{
    "openapi": "3.0.1",
    "info": {
        "title": "VMware Cloud Foundation Installer API Reference Guide",
        "description": "VMware Cloud Foundation Installer handles installation of VCF (or VVF) with new or existing components.",
        "termsOfService": "https://www.vmware.com",
        "license": {
            "name": "VMware Cloud Foundation"
        },
        "version": "9.0.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:80",
            "variables": {
                "basePath": {
                    "default": "/"
                }
            }
        }
    ],
    "tags": [
        {
            "name": "DepotSettings",
            "description": "APIs for managing Depot Settings"
        },
        {
            "name": "Bundles",
            "description": "APIs for managing Bundles"
        },
        {
            "name": "Tasks",
            "description": "APIs for managing Tasks"
        },
        {
            "name": "Tokens",
            "description": "APIs for managing Access and Refresh Token"
        },
        {
            "name": "VCF Installer",
            "description": "APIs for validating, starting and monitoring VCF (or VVF) installation using new or existing components."
        },
        {
            "name": "Trusted Certificates",
            "description": "APIs for managing Trusted Certificates"
        },
        {
            "name": "Releases",
            "description": "APIs for managing Releases"
        },
        {
            "name": "System",
            "description": "APIs for managing System"
        },
        {
            "name": "VcfServices",
            "description": "APIs for managing VCF Services"
        },
        {
            "name": "ProxyConfiguration",
            "description": "APIs for managing Proxy Configuration"
        },
        {
            "name": "CEIP",
            "description": "APIs for managing CEIP status"
        }
    ],
    "paths": {
        "/v1/system/settings/depot": {
            "get": {
                "tags": [
                    "DepotSettings"
                ],
                "summary": "Retrieve the depot configuration",
                "description": "Get the depot configuration. In a fresh setup, this would be empty.",
                "operationId": "getDepotSettings",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DepotSettings"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "DepotSettings"
                ],
                "summary": "Configure the depot credentials",
                "description": "Update depot settings. Depot settings can be updated with VMware Depot account",
                "operationId": "updateDepotSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DepotSettings"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DepotSettings"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DepotSettings"
                ],
                "summary": "Delete the depot configuration",
                "description": "Delete the depot configuration if it is present within VCF.",
                "operationId": "deleteDepotSettings",
                "parameters": [
                    {
                        "name": "depotType",
                        "in": "query",
                        "description": "Depot Type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Empty to delete any configured, or one of: VCF_DEPOT, VXRAIL_DEPOT"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/v1/tokens": {
            "post": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Create Token Pair",
                "description": "Creates access token and refresh token for user access",
                "operationId": "createToken",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenCreationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenPair"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs": {
            "get": {
                "tags": [
                    "VCF Installer"
                ],
                "summary": "Retrieve all VCF (or VVF) installation tasks",
                "operationId": "getSddcTasks",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfSddcTask"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "VCF Installer"
                ],
                "summary": "Start VCF (or VVF) installation",
                "description": "Start the workflow to install VCF (or VVF) based on the given SDDC specification.",
                "operationId": "deploySddc",
                "parameters": [
                    {
                        "name": "skipValidations",
                        "in": "query",
                        "description": "Skips validations",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SddcSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SddcTask"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Installation already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/vcfops-discovery": {
            "post": {
                "tags": [
                    "VCF Installer"
                ],
                "summary": "Discover VCF Operations topology",
                "description": "Discover VCF Operations instance and its adjacent topology such as its cluster nodes, management node, vCenters, etc.",
                "operationId": "discoverVcfOps",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VcfOperationsDiscoverySpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VcfOperationsDiscoveryResult"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/vcenter-discovery": {
            "post": {
                "tags": [
                    "VCF Installer"
                ],
                "summary": "Discover vCenter topology",
                "description": "Discover vCenter instance and its adjacent topology such as NSX instances associated with it.",
                "operationId": "discoverVcenter",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VcenterDiscoverySpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VcenterDiscoveryResult"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/validations": {
            "get": {
                "tags": [
                    "VCF Installer"
                ],
                "summary": "Retrieve a list of VCF (or VVF) installation validations",
                "operationId": "getSddcSpecValidations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfValidation"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "VCF Installer"
                ],
                "summary": "Perform validation of the VCF Installer specification",
                "description": "VCF Installer specification incorporates all the client inputs regarding VCF (or VVF) components constituting the installation.",
                "operationId": "validateSddcSpec",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SddcSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad user input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/network-config-profiles": {
            "post": {
                "tags": [
                    "VCF Installer"
                ],
                "summary": "Get Network Profiles",
                "description": "Get network profiles compatible with the storage type and hosts subject to installation.",
                "operationId": "getNetworkConfigProfiles",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SddcNetworkConfigProfileSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SddcNetworkConfigProfileResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/installer-mode": {
            "post": {
                "tags": [
                    "VCF Installer"
                ],
                "summary": "Get VCF Installer Appliance Mode",
                "description": "Get the VCF Installer mode that specifies whether the VCF Installer appliance is collocated with the VCF (or VVF) installation or is located externally.",
                "operationId": "getInstallerType",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SddcInstallerRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InstallerSpec"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddc-manager/trusted-certificates": {
            "get": {
                "tags": [
                    "Trusted Certificates"
                ],
                "summary": "Retrieve all trusted certificates from the appliance",
                "description": "Retrieve all trusted certificates from the appliance.",
                "operationId": "getTrustedCertificates",
                "responses": {
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTrustedCertificate"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Trusted Certificates"
                ],
                "summary": "Add a trusted certificate to the appliance's trust store",
                "description": "Add a trusted certificate to the appliance's trust store.",
                "operationId": "addTrustedCertificate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TrustedCertificateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Trusted certificate already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTrustedCertificate"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/bundles": {
            "get": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Retrieve a list of bundles",
                "description": "Get all Bundles. Returns uploaded bundles and bundles available via depot access.",
                "operationId": "getBundles",
                "parameters": [
                    {
                        "name": "productType",
                        "in": "query",
                        "description": "The type of the product",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e.g. VCENTER, NSX_T_MANAGER, SDDC_MANAGER, VROPS, VRA"
                    },
                    {
                        "name": "isCompliant",
                        "in": "query",
                        "description": "Is compliant with the current VCF version?",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "bundleType",
                        "in": "query",
                        "description": "The type of the bundle",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "One among: SDDC_MANAGER, VMWARE_SOFTWARE"
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfBundle"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Bundles"
                ],
                "summary": "[Unsupported] Upload a bundle to SDDC Manager or VCF Installer",
                "description": "Upload Bundle to SDDC Manager or VCF Installer. This is useful when you do not have internet connectivity for downloading bundles from the online depot to SDDC Manager or VCF Installer. The Bundles are manually downloaded from Depot using Bundle Transfer utility. This API is no longer supported from VCF 9.0. Please refer to POST v1/product-binaries instead.",
                "operationId": "uploadBundle",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BundleUploadSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "410": {
                        "description": "This API is no longer supported from VCF 9.0. Please refer to POST v1/product-binaries instead.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/tokens/access-token/refresh": {
            "patch": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Refresh Access Token",
                "description": "Refresh the access token associated with the given refresh token",
                "operationId": "refreshAccessToken",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "description": "ID of the refresh token"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/tasks/{id}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Retrieve a task by its ID",
                "description": "Get a Task by ID, if it exists",
                "operationId": "getTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task id to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "A task object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Cancel a Task",
                "description": "Cancel a Task by ID, if it exists",
                "operationId": "cancelTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task id for cancelling",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Task was cancelled successfully."
                    },
                    "409": {
                        "description": "Task can not be cancelled. Only a IN_PROGRESS task can be cancelled.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Retry a Task",
                "description": "Retry a failed Task by ID, if it exists",
                "operationId": "retryTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task id retry",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "409": {
                        "description": "Task can not be retried. Only a failed Task can be retried.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Task was retried successfully."
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system": {
            "get": {
                "tags": [
                    "System"
                ],
                "summary": "Retrieve the system configuration",
                "description": "Retrieve the system configuration.",
                "operationId": "getSystemConfiguration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/System"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "System"
                ],
                "summary": "Updates paramters of the system configuration",
                "description": "Updates paramters of the system configuration.",
                "operationId": "updateSystemConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SystemUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/settings/depot/depot-sync-info": {
            "get": {
                "tags": [
                    "DepotSettings"
                ],
                "summary": "Retrieve the depot sync information",
                "description": "Get the depot sync information.",
                "operationId": "getDepotSyncInfo",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DepotSyncInfo"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "DepotSettings"
                ],
                "summary": "Sync depot metadata",
                "description": "Sync depot metadata such as bundle manifest, pvc.",
                "operationId": "syncDepotMetadata",
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DepotSyncInfo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/proxy-configuration": {
            "get": {
                "tags": [
                    "ProxyConfiguration"
                ],
                "summary": "Get the current Proxy configuration",
                "description": "Get the current Proxy configuration",
                "operationId": "getProxyConfiguration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProxyConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "x-vmw-compiler-skip": true
                    }
                }
            },
            "patch": {
                "tags": [
                    "ProxyConfiguration"
                ],
                "summary": "Update Proxy configuration",
                "description": "Update Proxy configuration",
                "operationId": "updateProxyConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProxyConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "x-vmw-compiler-skip": true
                    }
                }
            }
        },
        "/v1/system/ceip": {
            "get": {
                "tags": [
                    "CEIP"
                ],
                "summary": "Retrieve the CEIP status",
                "description": "Get CEIP status and instance id",
                "operationId": "getCeipStatus",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Ceip"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "CEIP"
                ],
                "summary": "Configure CEIP to Opt-In or Opt-Out",
                "description": "Opt-in or Opt-out of CEIP",
                "operationId": "setCeipStatus",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "description": "Required action for CEIP.",
                                "enum": [
                                    "ENABLED",
                                    "DISABLED",
                                    "DISABLING",
                                    "ENABLING",
                                    "ENABLING_FAILED",
                                    "DISABLING_FAILED"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "The request could not be completed due to a conflict with the current state",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/{id}": {
            "get": {
                "tags": [
                    "VCF Installer"
                ],
                "summary": "Retrieve a VCF (or VVF) installation task by its ID",
                "operationId": "getSddcTaskByID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Installation task ID",
                        "required": true,
                        "schema": {
                            "maximum": 36,
                            "minimum": 36,
                            "type": "string"
                        },
                        "example": "123e4567-e89b-42d3-a456-556642440000"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SddcTask"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "VCF Installer"
                ],
                "summary": "Retry a failed VCF (or VVF) installation.",
                "operationId": "retrySddc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Failed installation task ID",
                        "required": true,
                        "schema": {
                            "maximum": 36,
                            "minimum": 36,
                            "type": "string"
                        },
                        "example": "123e4567-e89b-42d3-a456-556642440000"
                    },
                    {
                        "name": "skipValidations",
                        "in": "query",
                        "description": "Skips validations",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SddcSpec"
                            }
                        }
                    }
                },
                "responses": {
                    "405": {
                        "description": "Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SddcTask"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/bundles/{id}": {
            "get": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Retrieve a bundle by its ID",
                "description": "Get a Bundle",
                "operationId": "getBundle",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Bundle ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6ba8240-d9b7-11ef-bf62-63832c57ab1a"
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bundle Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bundle"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Delete a bundle by bundle ID",
                "description": "Delete a Bundle by bundle ID.",
                "operationId": "deleteBundle",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Bundle ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6ba8240-d9b7-11ef-bf62-63832c57ab1a"
                    },
                    {
                        "name": "binaryFilesOnly",
                        "in": "query",
                        "description": "binaryFilesOnly, if true, only binary files from storage will be deleted",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Start immediate, schedule or cancel download of a bundle by ID",
                "description": "Update a Bundle for scheduling/triggering download. If download is started, this can be used to cancel a download. Only one download can triggered for a Bundle.",
                "operationId": "startBundleDownloadByID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Bundle ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6ba8240-d9b7-11ef-bf62-63832c57ab1a"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BundleUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vcf-services": {
            "get": {
                "tags": [
                    "VcfServices"
                ],
                "summary": "Retrieve a list of SDDC Manager services",
                "operationId": "getVcfServices",
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfVcfService"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vcf-services/{id}": {
            "get": {
                "tags": [
                    "VcfServices"
                ],
                "summary": "Retrieve an SDDC Manager service by its ID",
                "operationId": "getVcfService",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VcfService ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VcfService"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "VcfService not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/tasks": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Retrieve a list of all tasks",
                "description": "Get the tasks",
                "operationId": "getTasks",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of elements to be returned in the result",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "taskStatus",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "taskType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resourceId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resourceType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "completedAfter",
                        "in": "query",
                        "description": "A time based filter to get tasks which are completed after the given timestamp. A task is completed if its status is 'Successful' or 'Failed'. Time is in milliseconds.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "Page number.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Size of the page you want to retrieve. Max page size allowed is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "orderDirection",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "taskName",
                        "in": "query",
                        "description": "Search filter when task name contains text.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "doLiveRefresh",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the list of tasks.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTask"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/vcf-management-components": {
            "get": {
                "tags": [
                    "System"
                ],
                "summary": "Get VCF Management Components",
                "description": "Get the details of VCF Management Components containing each component's FQDN, deployment type, and deployment status",
                "operationId": "getSystemVcfManagementComponents",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VcfManagementComponents"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/appliance-info": {
            "get": {
                "tags": [
                    "System"
                ],
                "summary": "Get appliance information",
                "description": "Get appliance information such as the version and the appliance's role.",
                "operationId": "getApplianceInfo",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplianceInfo"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/{id}/spec": {
            "get": {
                "tags": [
                    "VCF Installer"
                ],
                "summary": "Retrieve a VCF (or VVF) input specification for an already started installation by its task ID",
                "operationId": "getSddcSpecByID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Installation task ID",
                        "required": true,
                        "schema": {
                            "maximum": 36,
                            "minimum": 36,
                            "type": "string"
                        },
                        "example": "123e4567-e89b-42d3-a456-556642440000"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SddcSpec"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/validations/{id}": {
            "get": {
                "tags": [
                    "VCF Installer"
                ],
                "summary": "Retrieve the results of VCF (or VVF) installation validation by its ID",
                "operationId": "getSddcSpecValidation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VCF (or VVF) installation validation ID",
                        "required": true,
                        "schema": {
                            "maximum": 36,
                            "minimum": 36,
                            "type": "string"
                        },
                        "example": "123e4567-e89b-42d3-a456-556642440000"
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/validations/latest": {
            "get": {
                "tags": [
                    "VCF Installer"
                ],
                "summary": "Retrieve the results of latest VCF (or VVF) installation validation",
                "operationId": "getLatestSddcSpecValidation",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/latest": {
            "get": {
                "tags": [
                    "VCF Installer"
                ],
                "summary": "Retrieve latest VCF (or VVF) installation task",
                "operationId": "getLatestSddcTask",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SddcTask"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/releases": {
            "get": {
                "tags": [
                    "Releases"
                ],
                "summary": "Retrieve a list of releases including current and target versions",
                "description": "Get all Releases, with option to get current release for a domain, get release by version or get future releases for a versionor get all the applicable target release.",
                "operationId": "getReleases",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "Domain ID to get current release of the domain",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "9ab78840-ee25-11e8-a8fc-d71c338107bd"
                    },
                    {
                        "name": "versionEq",
                        "in": "query",
                        "description": "Release version to get its release",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3.9.0"
                    },
                    {
                        "name": "versionGt",
                        "in": "query",
                        "description": "Release version to get its future releases",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "4.0.0.0"
                    },
                    {
                        "name": "versionGe",
                        "in": "query",
                        "description": "Release version to get its current & future releases",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "9.0.0.0"
                    },
                    {
                        "name": "applicableForVersion",
                        "in": "query",
                        "description": "Release version to get applicable releases",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "4.0.1.0"
                    },
                    {
                        "name": "minInstallerVersionLe",
                        "in": "query",
                        "description": "Releases with minInstallerVersion less than given minInstallerVersion",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "9.0.0.0"
                    },
                    {
                        "name": "getFutureReleases",
                        "in": "query",
                        "description": "[Deprecated] Get all future releases for a given domain",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        },
                        "example": true
                    },
                    {
                        "name": "includeOnlyCompatible",
                        "in": "query",
                        "description": "Filter only compatible releases on the system",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        },
                        "example": true
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Release Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfRelease"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/releases/{sku}/release-components": {
            "get": {
                "tags": [
                    "Flexible Product Patches"
                ],
                "summary": "Retrieves the list of components that are part of a VCF or VVF release.",
                "description": "Gets a list of components, the SKU they are part of and the available patch versions,per release version. By default it provide release components of all the release equal and above 5.x",
                "operationId": "getReleaseComponentsBySku",
                "parameters": [
                    {
                        "name": "sku",
                        "in": "path",
                        "description": "SKU filter, to retrieve only components associated with a specific SKU (VCF or VVF)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "VCF"
                    },
                    {
                        "name": "releaseVersion",
                        "in": "query",
                        "description": "VCF Release Version",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "9.0.0.0"
                    },
                    {
                        "name": "imageType",
                        "in": "query",
                        "description": "image type for the image you want to retrieve.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "One among: PATCH, INSTALL"
                    },
                    {
                        "name": "automatedInstall",
                        "in": "query",
                        "description": "Automated Install. If true, list all automated Install product. if false or empty, filter will not be applied. Applicable only for VCF 9.0.0.0 and above releases releases",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        },
                        "example": true
                    },
                    {
                        "name": "lifecycleManagedBy",
                        "in": "query",
                        "description": "Lifecycle managed by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "One among: SDDC_MANAGER_VCF, VRSLCM"
                    },
                    {
                        "name": "releaseType",
                        "in": "query",
                        "description": "List of release types",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "example": "List can contain values among: MAJOR, MINOR, MAINTENANCE, PATCH"
                    },
                    {
                        "name": "matchWithReleaseType",
                        "in": "query",
                        "description": "Match with release type for provided releaseVersion",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "One among: MAJOR, MINOR, MAINTENANCE, PATCH"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfReleaseComponentDetail"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/releases/system": {
            "get": {
                "tags": [
                    "Releases"
                ],
                "summary": "Retrieve the lowest deployed release of VMware Cloud Foundation",
                "description": "Returns release for the lowest deployed VCF version for a domain on the environment. If Management domain is ahead of WLD domain, VCF BOM version for the WLD domain will be returned. NOTE: This operation is not applicable if appliance is in VCF Installer mode.",
                "operationId": "getSystemRelease",
                "responses": {
                    "404": {
                        "description": "Release Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Release"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/releases/domains/{domainId}/future-releases": {
            "get": {
                "tags": [
                    "Releases"
                ],
                "summary": "Retrieve a list of future releases by domain ID",
                "description": "Returns all known to the system future target versions for a domain. If some of them are not allowed (e.g. stepping stone), then message explains the reason. If the domain does not have a product configured at that point, then that product will not be included in the BOM or patch bundle list in each release. NOTE: This operation is not applicable if appliance is in VCF Installer mode.",
                "operationId": "getFutureReleases",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID to get all feature target versions for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "9ab78840-ee25-11e8-a8fc-d71c338107bd"
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfDomainFutureRelease"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Domain Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/releases/domains/{domainId}/custom-patches": {
            "get": {
                "tags": [
                    "Flexible Product Patches"
                ],
                "summary": "Retrieve the list of custom patches for BOM products associated with or applicable on a VCF domain",
                "description": "Filter applicable patches (current/target VCF releases) per product type per domain. NOTE: This operation is not applicable if appliance is in VCF Installer mode.",
                "operationId": "getCustomPatches",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vcfRelease",
                        "in": "query",
                        "description": "VCF Release",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "4.0.1.0"
                    },
                    {
                        "name": "productType",
                        "in": "query",
                        "description": "Product Type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e.g. VCENTER, NSX_T_MANAGER, SDDC_MANAGER, VRSLCM, VROPS, VCF_OPS_CLOUD_PROXY, VRA"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlexibleProductPatches"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/releases/custom-patches": {
            "get": {
                "tags": [
                    "Flexible Product Patches"
                ],
                "summary": "Retrieve the list of custom patches for BOM products associated with or applicable to SKU",
                "description": "Filter applicable patches (current/target VCF/VVF releases) per product type",
                "operationId": "getCustomPatchesBySku",
                "parameters": [
                    {
                        "name": "sku",
                        "in": "query",
                        "description": "SKU (VCF or VVF)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "One among: VCF ,  VVF"
                    },
                    {
                        "name": "releaseVersion",
                        "in": "query",
                        "description": "Release Version",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "9.0.0.0"
                    },
                    {
                        "name": "imageType",
                        "in": "query",
                        "description": "Image type for the image you want to retrieve.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "One among: PATCH, INSTALL"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPatches"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/bundles/download-status": {
            "get": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Retrieve a the download status for bundles",
                "description": "Get all download status for all bundles matching the criteria. Returns the download information (status, error, taskId) for all bundles matching the criteria (release version, bundle Id, image type).",
                "operationId": "getBundleDownloadStatus",
                "parameters": [
                    {
                        "name": "releaseVersion",
                        "in": "query",
                        "description": "Get download status for bundles that are associated with a specific release.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "9.0.0.0"
                    },
                    {
                        "name": "bundleId",
                        "in": "query",
                        "description": "Get the download status for a specific bundle by bundleId.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6ba8240-d9b7-11ef-bf62-63832c57ab1a"
                    },
                    {
                        "name": "imageType",
                        "in": "query",
                        "description": "The image type of the bundle, either INSTALL or PATCH",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "One among: PATCH, INSTALL"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfBundleDownloadStatusInfo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/bundles/domains/{id}": {
            "get": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Retrieve a list of bundles to skip upgrade a domain",
                "description": "Get bundles for skip upgrade a domain from current version to target version (for SDDC Manager only). NOTE: This operation is not applicable if appliance is in VCF Installer mode.",
                "operationId": "getBundlesForSkipUpgrade",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "targetVersion",
                        "in": "query",
                        "description": "[Deprecated] Target domain VCF version",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Domain Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfBundle"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/tokens/refresh-token": {
            "delete": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Invalidate Refresh Token",
                "description": "Invalidate the provided refresh token",
                "operationId": "invalidateRefreshToken",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "description": "ID of the refresh token"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                }
            }
        },
        "/v1/sddc-manager/trusted-certificates/{alias}": {
            "delete": {
                "tags": [
                    "Trusted Certificates"
                ],
                "summary": "Delete a trusted certificate from the appliance's trust store",
                "description": "Delete a trusted certificate from the appliance's trust store.",
                "operationId": "deleteTrustedCertificate",
                "parameters": [
                    {
                        "name": "alias",
                        "in": "path",
                        "description": "Certificate Alias",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "x-vmw-compiler-skip": true
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "DepotAccount": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Depot Username for Access. This field is optional when downloadToken is used for online depot authentication and authorization."
                    },
                    "password": {
                        "type": "string",
                        "description": "Depot Password for Access. This field is optional when downloadToken is used for online depot authentication and authorization."
                    },
                    "status": {
                        "type": "string",
                        "description": "Depot Status",
                        "example": "One among: DEPOT_UNKNOWN_HOST, DEPOT_NOT_AVAILABLE, DEPOT_USER_NOT_SET, DEPOT_INVALID_CREDENTIAL, UNKNOWN_FAILURE, DEPOT_CONNECTION_SUCCESSFUL"
                    },
                    "message": {
                        "type": "string",
                        "description": "Message explaining depot status"
                    },
                    "downloadToken": {
                        "maxLength": 32,
                        "type": "string",
                        "description": "This field is mandatory when downloadToken is used for online depot authentication and authorization. downloadToken should be generated from the broadcom support portal https://support.broadcom.com"
                    }
                },
                "description": "VMware Depot Account Information"
            },
            "DepotConfiguration": {
                "required": [
                    "hostname",
                    "isOfflineDepot",
                    "port"
                ],
                "type": "object",
                "properties": {
                    "isOfflineDepot": {
                        "type": "boolean",
                        "description": "Flag indicating if the depot is in offline mode"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "IP/Hostname of the depot"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port of the depot",
                        "format": "int32"
                    }
                },
                "description": "Depot Configuration"
            },
            "DepotSettings": {
                "type": "object",
                "properties": {
                    "vmwareAccount": {
                        "$ref": "#/components/schemas/DepotAccount"
                    },
                    "dellEmcSupportAccount": {
                        "$ref": "#/components/schemas/DepotAccount"
                    },
                    "offlineAccount": {
                        "$ref": "#/components/schemas/DepotAccount"
                    },
                    "depotConfiguration": {
                        "$ref": "#/components/schemas/DepotConfiguration"
                    }
                },
                "description": "VMware Depot Settings. At least one of vmwareAccount, dellEmcSupportAccount or offlineAccount value must be provided"
            },
            "Error": {
                "type": "object",
                "properties": {
                    "errorCode": {
                        "type": "string",
                        "description": "The minor error code",
                        "readOnly": true
                    },
                    "errorType": {
                        "type": "string",
                        "description": "The error type",
                        "readOnly": true
                    },
                    "arguments": {
                        "type": "array",
                        "description": "The arguments used to localize the message, Can be used by scripts to automate the error processing.",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "The arguments used to localize the message, Can be used by scripts to automate the error processing.",
                            "readOnly": true
                        }
                    },
                    "context": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The error context (e.g. the component where it occurred).",
                            "readOnly": true
                        },
                        "description": "The error context (e.g. the component where it occurred).",
                        "readOnly": true
                    },
                    "message": {
                        "type": "string",
                        "description": "The localized error message",
                        "readOnly": true
                    },
                    "remediationMessage": {
                        "type": "string",
                        "description": "The localized remediation error message"
                    },
                    "causes": {
                        "type": "array",
                        "description": "The underlying cause exceptions.",
                        "items": {
                            "$ref": "#/components/schemas/ErrorCause"
                        }
                    },
                    "nestedErrors": {
                        "type": "array",
                        "description": "The nested errors when the error is a composite one",
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "referenceToken": {
                        "type": "string",
                        "description": "A reference token correlating the error with the relevant detailed error logs. Should be sent to the service provider when reporting issues.",
                        "readOnly": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The localized label message",
                        "readOnly": true
                    },
                    "remediationUrl": {
                        "type": "string",
                        "description": "The URL string for remediation documentation link",
                        "readOnly": true
                    }
                },
                "description": "Error response containing a minor error code, a localized error message, a localized remediation message and optionally a reference token to correlate the error with the logs "
            },
            "ErrorCause": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The type of the error cause",
                        "readOnly": true
                    },
                    "message": {
                        "type": "string",
                        "description": "The message describing the reason for the error",
                        "readOnly": true
                    }
                },
                "description": "Describes a single error cause"
            },
            "TokenCreationSpec": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Username"
                    },
                    "password": {
                        "type": "string",
                        "description": "User Password"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API Key"
                    },
                    "idToken": {
                        "type": "string",
                        "description": "Id Token"
                    }
                },
                "description": "The spec used to sign the token"
            },
            "RefreshToken": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Refresh token id that can be used to request new access token"
                    }
                },
                "description": "This contains refresh token id for the user API access."
            },
            "TokenPair": {
                "type": "object",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Bearer token that can be used to make public API calls"
                    },
                    "refreshToken": {
                        "$ref": "#/components/schemas/RefreshToken"
                    }
                },
                "description": "This contains the access token and the refresh token for the user API access."
            },
            "DnsSpec": {
                "required": [
                    "subdomain"
                ],
                "type": "object",
                "properties": {
                    "subdomain": {
                        "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
                        "type": "string",
                        "description": "Tenant Sub domain. Includes the full domain suffix",
                        "example": "vcf.broadcom.com"
                    },
                    "nameservers": {
                        "type": "array",
                        "description": "Nameservers to be configured for vCenter/ESXi's/NSX. The first is the primary nameserver. Maximum allowed is two entries",
                        "example": "[172.0.0.4, 172.0.0.5]",
                        "items": {
                            "type": "string",
                            "description": "Nameservers to be configured for vCenter/ESXi's/NSX. The first is the primary nameserver. Maximum allowed is two entries",
                            "example": "[172.0.0.4, 172.0.0.5]"
                        }
                    }
                },
                "description": "Spec contains parameters of Domain Name System"
            },
            "DvsSpec": {
                "required": [
                    "vmnicsToUplinks"
                ],
                "type": "object",
                "properties": {
                    "dvsName": {
                        "type": "string",
                        "description": "vSphere Distributed Switch Name. It will be auto-generated if blank",
                        "example": "VdsName"
                    },
                    "networks": {
                        "type": "array",
                        "description": "Types of networks in this Distributed vSphere Switch. One among: VSAN, VMOTION, MANAGEMENT, VM_MANAGEMENT, NFS or any custom network types defined in networkSpecs",
                        "example": "MANAGEMENT",
                        "items": {
                            "type": "string",
                            "description": "Types of networks in this Distributed vSphere Switch. One among: VSAN, VMOTION, MANAGEMENT, VM_MANAGEMENT, NFS or any custom network types defined in networkSpecs",
                            "example": "MANAGEMENT"
                        }
                    },
                    "mtu": {
                        "maximum": 9190,
                        "minimum": 1280,
                        "type": "integer",
                        "description": "Distributed vSphere Switch MTU (default value is 9000)",
                        "format": "int32",
                        "example": 9000
                    },
                    "nsxtSwitchConfig": {
                        "$ref": "#/components/schemas/NsxtSwitchConfig"
                    },
                    "vmnicsToUplinks": {
                        "type": "array",
                        "description": "List of vmnic to uplink mapping",
                        "items": {
                            "$ref": "#/components/schemas/VmnicToUplink"
                        }
                    },
                    "nsxTeamings": {
                        "maxItems": 1,
                        "minItems": 0,
                        "type": "array",
                        "description": "The teaming policies to be associated with the uplink profile in NSX",
                        "items": {
                            "$ref": "#/components/schemas/TeamingSpec"
                        }
                    },
                    "lagSpecs": {
                        "type": "array",
                        "description": "List of LAGs to be associated with the vSphere Distributed Switch",
                        "items": {
                            "$ref": "#/components/schemas/LagSpec"
                        }
                    }
                },
                "description": "Spec contains parameters for DVS"
            },
            "FcSpec": {
                "required": [
                    "datastoreName"
                ],
                "type": "object",
                "properties": {
                    "datastoreName": {
                        "maxLength": 80,
                        "minLength": 0,
                        "type": "string",
                        "description": "Datastore name used for cluster creation"
                    }
                },
                "description": "Cluster storage configuration for VMFS on FC"
            },
            "IpAddressPoolRangeSpec": {
                "required": [
                    "end",
                    "start"
                ],
                "type": "object",
                "properties": {
                    "start": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "The first IP Address of the IP Address Range"
                    },
                    "end": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "The last IP Address of the IP Address Range"
                    }
                },
                "description": "This specification contains the parameters required to create an IP address range"
            },
            "IpAddressPoolSpec": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "pattern": "^[a-zA-Z0-9-_]+$",
                        "type": "string",
                        "description": "Name of the IP address pool"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the IP address pool"
                    },
                    "ignoreUnavailableNsxtCluster": {
                        "type": "boolean",
                        "description": "Ignore unavailable NSX cluster(s) during IP pool spec validation"
                    },
                    "subnets": {
                        "type": "array",
                        "description": "List of IP address pool subnet specification",
                        "items": {
                            "$ref": "#/components/schemas/IpAddressPoolSubnetSpec"
                        }
                    }
                },
                "description": "This specification contains the parameters required to create or reuse an IP address pool."
            },
            "IpAddressPoolSubnetSpec": {
                "required": [
                    "cidr",
                    "gateway",
                    "ipAddressPoolRanges"
                ],
                "type": "object",
                "properties": {
                    "ipAddressPoolRanges": {
                        "type": "array",
                        "description": "List of the IP allocation ranges. Atleast 1 IP address range has to be specified",
                        "items": {
                            "$ref": "#/components/schemas/IpAddressPoolRangeSpec"
                        }
                    },
                    "cidr": {
                        "type": "string",
                        "description": "The subnet representation, contains the network address and the prefix length"
                    },
                    "gateway": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "The default gateway address of the network"
                    }
                },
                "description": "This specification contains the parameters required to create an IP address pool subnet"
            },
            "IpRange": {
                "required": [
                    "endIpAddress",
                    "startIpAddress"
                ],
                "type": "object",
                "properties": {
                    "startIpAddress": {
                        "maxLength": 15,
                        "minLength": 7,
                        "type": "string",
                        "description": "Start IP Address",
                        "example": "192.168.0.123"
                    },
                    "endIpAddress": {
                        "maxLength": 15,
                        "minLength": 7,
                        "type": "string",
                        "description": "End IP Address",
                        "example": "192.168.0.128"
                    }
                },
                "description": "Spec contains parameters for range of IP addresses"
            },
            "LagSpec": {
                "required": [
                    "lacpMode",
                    "lacpTimeoutMode",
                    "loadBalancingMode",
                    "name",
                    "uplinksCount"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 80,
                        "minLength": 0,
                        "type": "string",
                        "description": "LAG name"
                    },
                    "uplinksCount": {
                        "type": "integer",
                        "description": "Number of uplinks/ports in this LAG",
                        "format": "int32"
                    },
                    "lacpMode": {
                        "pattern": "(ACTIVE|PASSIVE)",
                        "type": "string",
                        "description": "LACP mode of this LAG",
                        "example": "One among:ACTIVE, PASSIVE"
                    },
                    "loadBalancingMode": {
                        "pattern": "(SOURCE_MAC|DESTINATION_MAC|SOURCE_AND_DESTINATION_MAC|DESTINATION_IP_AND_VLAN|SOURCE_IP_AND_VLAN|SOURCE_AND_DESTINATION_IP_AND_VLAN|DESTINATION_TCP_UDP_PORT|SOURCE_TCP_UDP_PORT|SOURCE_AND_DESTINATION_TCP_UDP_PORT|DESTINATION_IP_AND_TCP_UDP_PORT|SOURCE_IP_AND_TCP_UDP_PORT|SOURCE_AND_DESTINATION_IP_AND_TCP_UDP_PORT|DESTINATION_IP_AND_TCP_UDP_PORT_AND_VLAN|SOURCE_IP_AND_TCP_UDP_PORT_AND_VLAN|SOURCE_AND_DESTINATION_IP_AND_TCP_UDP_PORT_AND_VLAN|DESTINATION_IP|SOURCE_IP|SOURCE_AND_DESTINATION_IP|VLAN|SOURCE_PORT_ID)",
                        "type": "string",
                        "description": "Load balancing mode of this LAG",
                        "example": "One among:SOURCE_MAC, DESTINATION_MAC, SOURCE_AND_DESTINATION_MAC, DESTINATION_IP_AND_VLAN, SOURCE_IP_AND_VLAN, SOURCE_AND_DESTINATION_IP_AND_VLAN, DESTINATION_TCP_UDP_PORT, SOURCE_TCP_UDP_PORT, SOURCE_AND_DESTINATION_TCP_UDP_PORT, DESTINATION_IP_AND_TCP_UDP_PORT, SOURCE_IP_AND_TCP_UDP_PORT, SOURCE_AND_DESTINATION_IP_AND_TCP_UDP_PORT, DESTINATION_IP_AND_TCP_UDP_PORT_AND_VLAN, SOURCE_IP_AND_TCP_UDP_PORT_AND_VLAN, SOURCE_AND_DESTINATION_IP_AND_TCP_UDP_PORT_AND_VLAN, DESTINATION_IP, SOURCE_IP, SOURCE_AND_DESTINATION_IP, VLAN, SOURCE_PORT_ID"
                    },
                    "lacpTimeoutMode": {
                        "pattern": "(SLOW|FAST)",
                        "type": "string",
                        "description": "LACP timeout mode of this LAG",
                        "example": "One among:SLOW, FAST"
                    }
                },
                "description": "This specification contains VDS (vSphere distributed switch) LAG configurations"
            },
            "NasVolumeSpec": {
                "required": [
                    "path",
                    "readOnly",
                    "serverName"
                ],
                "type": "object",
                "properties": {
                    "serverName": {
                        "type": "array",
                        "description": "NFS Server name used for cluster creation",
                        "items": {
                            "type": "string",
                            "description": "NFS Server name used for cluster creation"
                        }
                    },
                    "path": {
                        "type": "string",
                        "description": "Shared directory path used for NFS based cluster creation"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Readonly is used to identify whether to mount the directory as readOnly or not"
                    },
                    "userTag": {
                        "type": "string",
                        "description": "User tag used to annotate NFS share"
                    },
                    "enableBindToVmknic": {
                        "type": "boolean",
                        "description": "Indicates whether to bind the created NFS datastore to the VMkernel NIC created based on NFS Network Spec. This is to prevent unintentional flow of NFS traffic through any other VMkernel NIC, if such connectivity exists."
                    }
                },
                "description": "NAS configuration for NFS based cluster"
            },
            "NfsDatastoreSpec": {
                "required": [
                    "datastoreName",
                    "nasVolume"
                ],
                "type": "object",
                "properties": {
                    "datastoreName": {
                        "maxLength": 80,
                        "minLength": 0,
                        "type": "string",
                        "description": "Datastore name used for cluster creation"
                    },
                    "nasVolume": {
                        "$ref": "#/components/schemas/NasVolumeSpec"
                    }
                },
                "description": "This specification contains cluster storage configuration for NFS"
            },
            "NsxtManagerSpec": {
                "type": "object",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "NSX Manager hostname"
                    }
                },
                "description": "Spec contains parameters for NSX manager"
            },
            "NsxtSwitchConfig": {
                "required": [
                    "transportZones"
                ],
                "type": "object",
                "properties": {
                    "transportZones": {
                        "type": "array",
                        "description": "The list of transport zones to be associated with the vSphere Distributed Switch managed by NSX",
                        "items": {
                            "$ref": "#/components/schemas/TransportZone"
                        }
                    },
                    "hostSwitchOperationalMode": {
                        "pattern": "(STANDARD|ENS|ENS_INTERRUPT)",
                        "type": "string",
                        "description": "Operational mode type of a Host Switch. Applicable only for the VI Workload Domains.",
                        "example": "One among: STANDARD, ENS, ENS_INTERRUPT"
                    },
                    "ipAssignmentType": {
                        "type": "string",
                        "description": "Ip Assignment Type of a Host Switch"
                    }
                },
                "description": "This specification contains the configurations to be associated with the vSphere Distributed Switch managed by NSX"
            },
            "ResourcePoolSpec": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Resource Pool name. It will be auto-generated if blank"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of resource pool. One among: management, compute, network",
                        "enum": [
                            "management",
                            "compute",
                            "network"
                        ]
                    },
                    "cpuReservationPercentage": {
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer",
                        "description": "CPU reservation percentage, from 0 to 100, default 0",
                        "format": "int32"
                    },
                    "cpuReservationMhz": {
                        "type": "integer",
                        "description": "CPU reservation in Mhz, default 0",
                        "format": "int64"
                    },
                    "cpuLimit": {
                        "type": "integer",
                        "description": "CPU limit, default -1 (unlimited)",
                        "format": "int64"
                    },
                    "cpuReservationExpandable": {
                        "type": "boolean",
                        "description": "Is CPU reservation expandable, default true"
                    },
                    "cpuSharesLevel": {
                        "type": "string",
                        "description": "CPU shares level, default 'normal'",
                        "enum": [
                            "custom,high,low,normal"
                        ]
                    },
                    "cpuSharesValue": {
                        "type": "integer",
                        "description": "CPU shares value, only relevant when shares level is 'custom', default 0",
                        "format": "int32"
                    },
                    "memoryReservationPercentage": {
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer",
                        "description": "Memory reservation percentage, from 0 to 100, default 0",
                        "format": "int32"
                    },
                    "memoryReservationMb": {
                        "type": "integer",
                        "description": "Memory reservation in MB, default 0",
                        "format": "int64"
                    },
                    "memoryLimit": {
                        "type": "integer",
                        "description": "Memory limit, default -1 (unlimited)",
                        "format": "int64"
                    },
                    "memoryReservationExpandable": {
                        "type": "boolean",
                        "description": "Is Memory reservation expandable, default true"
                    },
                    "memorySharesLevel": {
                        "type": "string",
                        "description": "Memory shares level. default 'normal'",
                        "enum": [
                            "custom,high,low,normal"
                        ]
                    },
                    "memorySharesValue": {
                        "type": "integer",
                        "description": "Memory shares value, only relevant when shares level is 'custom', default 0",
                        "format": "int32"
                    }
                },
                "description": "Spec contains parameters for Resource Pool"
            },
            "RootCaCerts": {
                "type": "object",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "Certificate alias"
                    },
                    "certChain": {
                        "type": "array",
                        "description": "List of Base64 encoded certificates",
                        "items": {
                            "type": "string",
                            "description": "List of Base64 encoded certificates"
                        }
                    }
                },
                "description": "Spec contains Root Certificate Authority parameters"
            },
            "SddcClusterSpec": {
                "type": "object",
                "properties": {
                    "datacenterName": {
                        "type": "string",
                        "description": "vCenter Datacenter Name. It will be auto-generated if blank.",
                        "example": "DatacenterName"
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "vCenter Cluster Name. It will be auto-generated if blank.",
                        "example": "ClusterName"
                    },
                    "clusterEvcMode": {
                        "type": "string",
                        "description": "EVC mode for vSphere cluster, if needed",
                        "example": "One among: INTEL_MEROM, INTEL_PENRYN, INTEL_NEALEM, INTEL_WESTMERE, INTEL_SANDYBRIDGE, INTEL_IVYBRIDGE, INTEL_HASWELL, INTEL_BROADWELL, INTEL_SKYLAKE, INTEL_CASCADELAKE, INTEL_ICELAKE, INTEL_SAPPHIRERAPIDS, AMD_REV_E, AMD_REV_F, AMD_GREYHOUND_NO3DNOW, AMD_GREYHOUND, AMD_BULLDOZER, AMD_PILEDRIVER, AMD_STREAMROLLER, AMD_ZEN, AMD_ZEN2, AMD_ZEN3, AMD_ZEN4"
                    },
                    "resourcePoolSpecs": {
                        "type": "array",
                        "description": "List of Resource Pool Specification. If blank, no resource pools will be created. However, if you want to create resource pool, Management Resource Pool is required to be present in the list.",
                        "items": {
                            "$ref": "#/components/schemas/ResourcePoolSpec"
                        }
                    }
                },
                "description": "Spec contains parameters for vCenter Cluster"
            },
            "SddcCredentials": {
                "required": [
                    "password"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Username",
                        "example": "root"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password"
                    }
                },
                "description": "Credentials contains the username and password"
            },
            "SddcDatastoreSpec": {
                "type": "object",
                "properties": {
                    "nfsDatastoreSpec": {
                        "$ref": "#/components/schemas/NfsDatastoreSpec"
                    },
                    "vmfsDatastoreSpec": {
                        "$ref": "#/components/schemas/VmfsDatastoreSpec"
                    },
                    "vsanSpec": {
                        "$ref": "#/components/schemas/VsanSpec"
                    },
                    "existingDatastoreName": {
                        "type": "string",
                        "description": "Name of an existing datastore that is to be used when converting an existing environment."
                    }
                },
                "description": "This specification contains cluster storage configuration"
            },
            "SddcHostSpec": {
                "required": [
                    "hostname"
                ],
                "type": "object",
                "properties": {
                    "hostname": {
                        "maxLength": 63,
                        "minLength": 0,
                        "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
                        "type": "string",
                        "description": "ESX hostname. This value will be prefixed to the DNS subdomain name and should not include the domain name itself. Must also adhere to RFC 1123 naming conventions",
                        "example": "esx-1"
                    },
                    "credentials": {
                        "$ref": "#/components/schemas/SddcCredentials"
                    },
                    "sshThumbprint": {
                        "type": "string",
                        "description": "ESX host SSH thumbprint (RSA SHA256) in new deployment scenario or ESX host SSH key (RSA, ECDSA) in reuse existing deployment scenario",
                        "example": "SHA256:rVPNWOKE2tZjvmYvKPhtc3ghJ41Vc0G3MwASf4+8+yc"
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "ESX host SSL thumbprint (SHA256)",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                    }
                },
                "description": "Spec contains parameters for Host"
            },
            "SddcManagerSpec": {
                "required": [
                    "hostname"
                ],
                "type": "object",
                "properties": {
                    "rootPassword": {
                        "maxLength": 2147483647,
                        "minLength": 8,
                        "type": "string",
                        "description": "Password for the 'root' user on SDDC Manager appliance. It needs to be a strong password with at least one alphabet and one special character and at least 8 characters in length. If blank, the SDDC Local Admin Password will be used (if provided) or password will be auto-generated."
                    },
                    "hostname": {
                        "maxLength": 63,
                        "minLength": 0,
                        "type": "string",
                        "description": "SDDC Manager Hostname."
                    },
                    "sshPassword": {
                        "maxLength": 2147483647,
                        "minLength": 8,
                        "type": "string",
                        "description": "Password for the 'vcf' user on SDDC Manager appliance. It needs to be a strong password with at least one alphabet and one special character and at least 8 characters in length. If blank, the SDDC Local Admin Password will be used (if provided) or password will be auto-generated."
                    },
                    "localUserPassword": {
                        "maxLength": 2147483647,
                        "minLength": 12,
                        "type": "string",
                        "description": "The local account is a built-in admin account in VCF that can be used in emergency scenarios. The password of this account must be at least 12 characters long. It also must contain at-least 1 uppercase, 1 lowercase, 1 special character specified in braces [!%@$^#?] and 1 digit. In addition, a character cannot be repeated more than 3 times consecutively. If blank, the password will be auto-generated."
                    },
                    "useExistingDeployment": {
                        "type": "boolean",
                        "description": "Import existing deployment or deploy one.",
                        "example": true,
                        "default": false
                    },
                    "version": {
                        "type": "string",
                        "description": "Version",
                        "example": "9.0.0.0.24597083"
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "SSL thumbprint (SHA256) of the product's certificate. Need to be populated when using existing deployment in order to establish trust with the existing product.",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                    }
                },
                "description": "Client input parameters for SDDC Manager Virtual Machine"
            },
            "SddcNetworkSpec": {
                "required": [
                    "networkType",
                    "vlanId"
                ],
                "type": "object",
                "properties": {
                    "networkType": {
                        "type": "string",
                        "description": "Network Type. One among: VSAN, VMOTION, MANAGEMENT, VM_MANAGEMENT, NFS or any custom network type",
                        "example": "MANAGEMENT"
                    },
                    "subnet": {
                        "maxLength": 18,
                        "minLength": 7,
                        "type": "string",
                        "description": "Subnet",
                        "example": "10.0.0.250/24"
                    },
                    "gateway": {
                        "maxLength": 15,
                        "minLength": 7,
                        "type": "string",
                        "description": "Gateway",
                        "example": "10.0.0.250"
                    },
                    "subnetMask": {
                        "maxLength": 15,
                        "minLength": 7,
                        "type": "string",
                        "description": "Subnet Mask",
                        "example": "255.255.255.0"
                    },
                    "includeIpAddress": {
                        "type": "array",
                        "description": "IP Addresses to be included",
                        "example": "[10.0.0.100]",
                        "items": {
                            "type": "string",
                            "description": "IP Addresses to be included",
                            "example": "[10.0.0.100]"
                        }
                    },
                    "includeIpAddressRanges": {
                        "type": "array",
                        "description": "IP Address ranges to be included",
                        "items": {
                            "$ref": "#/components/schemas/IpRange"
                        }
                    },
                    "vlanId": {
                        "maximum": 4094,
                        "minimum": 0,
                        "type": "integer",
                        "description": "VLAN ID",
                        "format": "int32",
                        "example": 1000
                    },
                    "mtu": {
                        "maximum": 9190,
                        "minimum": 1280,
                        "type": "integer",
                        "description": "MTU size",
                        "format": "int32"
                    },
                    "teamingPolicy": {
                        "type": "string",
                        "description": "Teaming Policy for VSAN and VMOTION network types, Default is loadbalance_loadbased. One among:loadbalance_ip, loadbalance_srcmac, loadbalance_srcid, failover_explicit, loadbalance_loadbased",
                        "example": "loadbalance_ip"
                    },
                    "activeUplinks": {
                        "type": "array",
                        "description": "Active Uplinks for teaming policy, specify uplink1 for failover_explicit VSAN Teaming Policy",
                        "items": {
                            "type": "string",
                            "description": "Active Uplinks for teaming policy, specify uplink1 for failover_explicit VSAN Teaming Policy"
                        }
                    },
                    "standbyUplinks": {
                        "type": "array",
                        "description": "Standby Uplinks for teaming policy, specify uplink2 for failover_explicit VSAN Teaming Policy",
                        "items": {
                            "type": "string",
                            "description": "Standby Uplinks for teaming policy, specify uplink2 for failover_explicit VSAN Teaming Policy"
                        }
                    },
                    "portGroupKey": {
                        "type": "string",
                        "description": "Name of the Distributed Portgroup to be created. It will be autogenerated if null"
                    }
                },
                "description": "Defines a network spec"
            },
            "SddcNsxtSpec": {
                "required": [
                    "nsxtManagers",
                    "vipFqdn"
                ],
                "type": "object",
                "properties": {
                    "nsxtManagers": {
                        "type": "array",
                        "description": "NSX Managers",
                        "items": {
                            "$ref": "#/components/schemas/NsxtManagerSpec"
                        }
                    },
                    "nsxtManagerSize": {
                        "pattern": "(xlarge|large|medium)",
                        "type": "string",
                        "description": "NSX Manager size. One among: medium, large,xlarge. Default value if not provided is medium",
                        "example": "medium"
                    },
                    "vipFqdn": {
                        "type": "string",
                        "description": "Hostname for VIP so that common SSL certificates can be installed across all managers."
                    },
                    "rootNsxtManagerPassword": {
                        "maxLength": 2147483647,
                        "minLength": 12,
                        "type": "string",
                        "description": "NSX root password. The password must be at least 12 characters long. Must contain at-least 1 uppercase, 1 lowercase, 1 special character and 1 digit. In addition, a character cannot be repeated 3 or more times consectively. If blank, the SDDC Local Admin Password will be used (if provided) or password will be auto-generated."
                    },
                    "nsxtAdminPassword": {
                        "maxLength": 2147483647,
                        "minLength": 12,
                        "type": "string",
                        "description": "NSX admin password. The password must be at least 12 characters long. Must contain at-least 1 uppercase, 1 lowercase, 1 special character and 1 digit. In addition, a character cannot be repeated 3 or more times consectively. If blank, the SDDC Local Admin Password will be used (if provided) or password will be auto-generated."
                    },
                    "nsxtAuditPassword": {
                        "maxLength": 2147483647,
                        "minLength": 12,
                        "type": "string",
                        "description": "NSX audit password. The password must be at least 12 characters long. Must contain at-least 1 uppercase, 1 lowercase, 1 special character and 1 digit. In addition, a character cannot be repeated 3 or more times consectively. If blank, the SDDC Local Admin Password will be used (if provided) or password will be auto-generated."
                    },
                    "transportVlanId": {
                        "type": "integer",
                        "description": "Transport VLAN ID. Default '0' if not specified",
                        "format": "int32",
                        "example": 1000
                    },
                    "ipAddressPoolSpec": {
                        "$ref": "#/components/schemas/IpAddressPoolSpec"
                    },
                    "skipNsxOverlayOverManagementNetwork": {
                        "type": "boolean",
                        "description": "Flag that indicates if the Overlay over Management Network configuration will be skipped. Applicable only when vCenter is existing and being converted."
                    },
                    "enableEdgeClusterSync": {
                        "type": "boolean",
                        "description": "Enable NSX Edge Cluster synchronization. Applicable only when NSX exists and is being imported. If enabled and your NSX deployment has one or more Edge clusters, the import process will add the discovered Edge node VMs to the VCF inventory, including their user credentials. As part of this process, a one-time reset of the Edge node credential passwords will be done. The updated passwords may be retrieved from the VCF credential store if desired. Once an Edge cluster's node VMs have been imported, any node VMs added to that Edge cluster will also be imported and subject to the same one-time password reset.",
                        "example": true,
                        "default": false
                    },
                    "useExistingDeployment": {
                        "type": "boolean",
                        "description": "Import existing deployment or deploy one.",
                        "example": true,
                        "default": false
                    },
                    "version": {
                        "type": "string",
                        "description": "Version",
                        "example": "9.0.0.0.24597083"
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "SSL thumbprint (SHA256) of the product's certificate. Need to be populated when using existing deployment in order to establish trust with the existing product.",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                    }
                },
                "description": "Spec contains parameters for NSX deployment and configurations"
            },
            "SddcSpec": {
                "required": [
                    "dnsSpec",
                    "networkSpecs",
                    "sddcId",
                    "vcenterSpec"
                ],
                "type": "object",
                "properties": {
                    "sddcId": {
                        "maxLength": 20,
                        "minLength": 3,
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string",
                        "description": "Client string that identifies an SDDC by name or instance name. Used for management domain name. Can contain only letters, numbers and the following symbols: '-'. Minimum length 3, maximum length 20.",
                        "example": "sfo01-m01"
                    },
                    "workflowType": {
                        "pattern": "(VCF|VCF_EXTEND|VVF)",
                        "type": "string",
                        "description": "Type of workflow to initiate creation and/or validation of SDDC",
                        "example": "One among: VCF, VCF_EXTEND, VVF"
                    },
                    "hostSpecs": {
                        "type": "array",
                        "description": "List of ESXi to be added to the Management Cluster",
                        "items": {
                            "$ref": "#/components/schemas/SddcHostSpec"
                        }
                    },
                    "version": {
                        "type": "string",
                        "description": "Version",
                        "example": "9.0.0.0"
                    },
                    "vcenterSpec": {
                        "$ref": "#/components/schemas/SddcVcenterSpec"
                    },
                    "clusterSpec": {
                        "$ref": "#/components/schemas/SddcClusterSpec"
                    },
                    "dvsSpecs": {
                        "type": "array",
                        "description": "List of vSphere Distributed Switches to be created. For VCF only: if blank, a default single one will be created for all types of traffic connected to vmnic0 and vmnic1",
                        "items": {
                            "$ref": "#/components/schemas/DvsSpec"
                        }
                    },
                    "nsxtSpec": {
                        "$ref": "#/components/schemas/SddcNsxtSpec"
                    },
                    "networkSpecs": {
                        "type": "array",
                        "description": "List of Networks which be created and used for Management Cluster",
                        "items": {
                            "$ref": "#/components/schemas/SddcNetworkSpec"
                        }
                    },
                    "dnsSpec": {
                        "$ref": "#/components/schemas/DnsSpec"
                    },
                    "ntpServers": {
                        "type": "array",
                        "description": "List of NTP servers to be used for configuring Management Appliances",
                        "example": "[10.0.0.100, 10.0.0.101]",
                        "items": {
                            "type": "string",
                            "description": "List of NTP servers to be used for configuring Management Appliances",
                            "example": "[10.0.0.100, 10.0.0.101]"
                        }
                    },
                    "sddcManagerSpec": {
                        "$ref": "#/components/schemas/SddcManagerSpec"
                    },
                    "managementPoolName": {
                        "type": "string",
                        "description": "Name for the network pool to be created and associated with the Management Cluster"
                    },
                    "ceipEnabled": {
                        "type": "boolean",
                        "description": "Enable VCF Customer Experience Improvement Program",
                        "example": true
                    },
                    "skipEsxThumbprintValidation": {
                        "type": "boolean",
                        "description": "Skip ESXi thumbprint validation. Applies to both converting an existing environment and deploying a new one",
                        "example": false
                    },
                    "skipGatewayPingValidation": {
                        "type": "boolean",
                        "description": "Skip networks gateway connectivity validation",
                        "example": false
                    },
                    "securitySpec": {
                        "$ref": "#/components/schemas/SecuritySpec"
                    },
                    "datastoreSpec": {
                        "$ref": "#/components/schemas/SddcDatastoreSpec"
                    },
                    "vcfOperationsFleetManagementSpec": {
                        "$ref": "#/components/schemas/VcfOperationsFleetManagementSpec"
                    },
                    "vcfOperationsSpec": {
                        "$ref": "#/components/schemas/VcfOperationsSpec"
                    },
                    "vcfOperationsCollectorSpec": {
                        "$ref": "#/components/schemas/VcfOperationsCollectorSpec"
                    },
                    "vcfAutomationSpec": {
                        "$ref": "#/components/schemas/VcfAutomationSpec"
                    },
                    "vcfInstanceName": {
                        "maxLength": 300,
                        "minLength": 3,
                        "type": "string",
                        "description": "VCF Instance name. Minumum length 3, maximum length 300"
                    }
                },
                "description": "VCF Installer specification"
            },
            "SddcVcenterSpec": {
                "required": [
                    "rootVcenterPassword",
                    "vcenterHostname"
                ],
                "type": "object",
                "properties": {
                    "vcenterHostname": {
                        "maxLength": 63,
                        "minLength": 0,
                        "type": "string",
                        "description": "vCenter hostname address.",
                        "example": "vcenter.rainpole.io"
                    },
                    "rootVcenterPassword": {
                        "maxLength": 2147483647,
                        "minLength": 15,
                        "type": "string",
                        "description": "vCenter root password. The password must be between 15 characters and 20 characters long. It must also contain at least one uppercase and lowercase letter, one number, and one character from '! \" # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\ ] ^ _ ` { &Iota; } ~' and all characters must be ASCII. Space is not allowed in password. For VCF only: if blank, the SDDC Local Admin Password will be used (if provided) or password will be auto-generated.",
                        "example": "Sample_Password123"
                    },
                    "vmSize": {
                        "type": "string",
                        "description": "vCenter Virtual Machine size. One among:xlarge, large, medium, small, tiny",
                        "example": "medium"
                    },
                    "storageSize": {
                        "type": "string",
                        "description": "vCenter Virtual Machine Storage size. One among:lstorage, xlstorage",
                        "example": "lstorage"
                    },
                    "ssoDomain": {
                        "type": "string",
                        "description": "PSC SSO Domain"
                    },
                    "adminUserSsoUsername": {
                        "minLength": 1,
                        "type": "string",
                        "description": "Admin user sso username. If blank, administrator username will be used."
                    },
                    "adminUserSsoPassword": {
                        "maxLength": 2147483647,
                        "minLength": 8,
                        "type": "string",
                        "description": "Admin user sso password. Password needs to be a strong password with at least one Uppercase character, one lowercase character, one digit and one special character specified in braces [!$%^] and 8-20 characters in length,and 3 maximum identical adjacent characters!. If blank, the SDDC Local Admin Password will be used (if provided) or password will be auto-generated."
                    },
                    "useExistingDeployment": {
                        "type": "boolean",
                        "description": "Import existing deployment or deploy one.",
                        "example": true,
                        "default": false
                    },
                    "version": {
                        "type": "string",
                        "description": "Version",
                        "example": "9.0.0.0.24597083"
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "SSL thumbprint (SHA256) of the product's certificate. Need to be populated when using existing deployment in order to establish trust with the existing product.",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                    }
                },
                "description": "Spec contains parameters for vCenter"
            },
            "SecuritySpec": {
                "type": "object",
                "properties": {
                    "esxiCertsMode": {
                        "type": "string",
                        "description": "ESXi certificates mode. One among:Custom, VMCA",
                        "example": "VMCA"
                    },
                    "rootCaCerts": {
                        "type": "array",
                        "description": "Root Certificate Authority certificate list",
                        "items": {
                            "$ref": "#/components/schemas/RootCaCerts"
                        }
                    }
                },
                "description": "Spec contains security settings"
            },
            "TeamingSpec": {
                "required": [
                    "activeUplinks",
                    "policy"
                ],
                "type": "object",
                "properties": {
                    "policy": {
                        "pattern": "(FAILOVER_ORDER|LOADBALANCE_SRCID|LOADBALANCE_SRC_MAC)",
                        "type": "string",
                        "description": "The teaming policy associated with the uplink profile",
                        "example": "One among: FAILOVER_ORDER, LOADBALANCE_SRCID, LOADBALANCE_SRC_MAC"
                    },
                    "activeUplinks": {
                        "type": "array",
                        "description": "The list of active uplinks",
                        "items": {
                            "type": "string",
                            "description": "The list of active uplinks"
                        }
                    },
                    "standByUplinks": {
                        "type": "array",
                        "description": "The list of stand by uplinks",
                        "items": {
                            "type": "string",
                            "description": "The list of stand by uplinks"
                        }
                    }
                },
                "description": "This specification contains the teaming policies associated with the uplink profile."
            },
            "TransportZone": {
                "required": [
                    "transportType"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string",
                        "description": "The name of the transport zone"
                    },
                    "transportType": {
                        "pattern": "(VLAN|OVERLAY)",
                        "type": "string",
                        "description": "The type of the transport zone",
                        "example": "One among: VLAN, OVERLAY"
                    }
                },
                "description": "The transport zone to be associated with the vSphere Distributed Switch managed by NSX"
            },
            "VcfAutomationSpec": {
                "required": [
                    "hostname"
                ],
                "type": "object",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "Host name",
                        "example": "vcfautomation.rainpole.io"
                    },
                    "adminUserPassword": {
                        "type": "string",
                        "description": "Admin user password. If blank the password will be auto-generated."
                    },
                    "ipPool": {
                        "maxItems": 4,
                        "minItems": 2,
                        "type": "array",
                        "description": "List of IP addresses.  For Standard deployment model two IP addresses need to be specified and for High Availability four IP addresses need to be specified",
                        "example": "['10.0.0.80', '10.0.0.81']",
                        "items": {
                            "type": "string",
                            "description": "List of IP addresses.  For Standard deployment model two IP addresses need to be specified and for High Availability four IP addresses need to be specified",
                            "example": "['10.0.0.80', '10.0.0.81']"
                        }
                    },
                    "internalClusterCidr": {
                        "type": "string",
                        "description": "Internal Cluster CIDR. One among: 198.18.0.0/15, 240.0.0.0/15, 250.0.0.0/15",
                        "example": "198.18.0.0/15"
                    },
                    "nodePrefix": {
                        "maxLength": 57,
                        "minLength": 0,
                        "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$",
                        "type": "string",
                        "description": "Node Prefix. It cannot be blank and must begin and end with an alphanumeric character, and can only contain lowercase alphanumeric characters or hyphens.",
                        "example": "node-123"
                    },
                    "useExistingDeployment": {
                        "type": "boolean",
                        "description": "Import existing deployment or deploy one.",
                        "example": true,
                        "default": false
                    },
                    "version": {
                        "type": "string",
                        "description": "Version",
                        "example": "9.0.0.0.24597083"
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "SSL thumbprint (SHA256) of the product's certificate. Need to be populated when using existing deployment in order to establish trust with the existing product.",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                    }
                },
                "description": "Specification for VCF Automation"
            },
            "VcfOperationsCollectorSpec": {
                "required": [
                    "hostname"
                ],
                "type": "object",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "Host name",
                        "example": "vcf-operations-collector.rainpole.io"
                    },
                    "rootUserPassword": {
                        "maxLength": 2147483647,
                        "minLength": 15,
                        "type": "string",
                        "description": "Root user password."
                    },
                    "applianceSize": {
                        "type": "string",
                        "description": "VCF Operations collector appliance size. One among: small, standard. Default value if not provided is small",
                        "example": "small"
                    },
                    "useExistingDeployment": {
                        "type": "boolean",
                        "description": "Import existing deployment or deploy one.",
                        "example": true,
                        "default": false
                    },
                    "version": {
                        "type": "string",
                        "description": "Version",
                        "example": "9.0.0.0.24597083"
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "SSL thumbprint (SHA256) of the product's certificate. Need to be populated when using existing deployment in order to establish trust with the existing product.",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                    }
                },
                "description": "Specification for VCF Operations collector"
            },
            "VcfOperationsFleetManagementSpec": {
                "required": [
                    "hostname"
                ],
                "type": "object",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "Host name",
                        "example": "vcf-operations-fleet-management.rainpole.io"
                    },
                    "rootUserPassword": {
                        "maxLength": 256,
                        "minLength": 15,
                        "type": "string",
                        "description": "Root user password. Password should be at least 15 characters in length. If blank the password will be auto-generated."
                    },
                    "adminUserPassword": {
                        "type": "string",
                        "description": "Admin user password. If blank the password will be auto-generated."
                    },
                    "useExistingDeployment": {
                        "type": "boolean",
                        "description": "Import existing deployment or deploy one.",
                        "example": true,
                        "default": false
                    },
                    "version": {
                        "type": "string",
                        "description": "Version",
                        "example": "9.0.0.0.24597083"
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "SSL thumbprint (SHA256) of the product's certificate. Need to be populated when using existing deployment in order to establish trust with the existing product.",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                    }
                },
                "description": "Specification for VCF Operations fleet management"
            },
            "VcfOperationsNode": {
                "required": [
                    "hostname"
                ],
                "type": "object",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "Host name",
                        "example": "vcfoperations-master.rainpole.io"
                    },
                    "rootUserPassword": {
                        "maxLength": 2147483647,
                        "minLength": 15,
                        "type": "string",
                        "description": "Root user password."
                    },
                    "type": {
                        "type": "string",
                        "description": "Node type. One among: master, replica, data",
                        "example": "master"
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "SSL thumbprint (SHA256) of the node certificate. Need to be populated when using existing VCF Ops deployment.",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                    }
                },
                "description": "Specification for VCF Operations Node"
            },
            "VcfOperationsSpec": {
                "required": [
                    "nodes"
                ],
                "type": "object",
                "properties": {
                    "nodes": {
                        "maxItems": 3,
                        "minItems": 1,
                        "type": "array",
                        "description": "List of nodes",
                        "items": {
                            "$ref": "#/components/schemas/VcfOperationsNode"
                        }
                    },
                    "adminUserPassword": {
                        "maxLength": 2147483647,
                        "minLength": 8,
                        "type": "string",
                        "description": "Admin user password. If blank the password will be auto-generated."
                    },
                    "applianceSize": {
                        "pattern": "(xsmall|small|medium|large|xlarge)",
                        "type": "string",
                        "description": "VCF Operations appliance size. One among: xsmall, small, medium, large, xlarge for Simple deployment model and one among: medium, large, xlarge for High Availability. Default value if not provided is medium for both deployment models.",
                        "example": "medium"
                    },
                    "loadBalancerFqdn": {
                        "type": "string",
                        "description": "Load Balancer FQDN"
                    },
                    "useExistingDeployment": {
                        "type": "boolean",
                        "description": "Import existing deployment or deploy one.",
                        "example": true,
                        "default": false
                    },
                    "version": {
                        "type": "string",
                        "description": "Version",
                        "example": "9.0.0.0.24597083"
                    }
                },
                "description": "Specification for VCF Operations"
            },
            "VmfsDatastoreSpec": {
                "type": "object",
                "properties": {
                    "fcSpec": {
                        "type": "array",
                        "description": "Cluster storage configuration for VMFS on FC",
                        "items": {
                            "$ref": "#/components/schemas/FcSpec"
                        }
                    }
                },
                "description": "Cluster storage configuration for VMFS"
            },
            "VmnicToUplink": {
                "required": [
                    "id",
                    "uplink"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "VmNic ID of vSphere host to be associated with VDS, once added to cluster",
                        "example": "vmnic0"
                    },
                    "uplink": {
                        "type": "string",
                        "description": "The uplink name of the vSphere Distributed Switch to be associated",
                        "example": "uplink1"
                    }
                },
                "description": "This specification contains vmnic to uplink configurations for vSphere host."
            },
            "VsanEsaConfig": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the vSAN ESA is enabled."
                    }
                },
                "description": "This spec contains cluster vSAN ESA configuration"
            },
            "VsanSpec": {
                "type": "object",
                "properties": {
                    "datastoreName": {
                        "type": "string",
                        "description": "Datastore Name. It will be auto-generated if blank"
                    },
                    "vsanDedup": {
                        "type": "boolean",
                        "description": "VSAN feature Deduplication and Compression flag, one flag for both features"
                    },
                    "esaConfig": {
                        "$ref": "#/components/schemas/VsanEsaConfig"
                    },
                    "failuresToTolerate": {
                        "maximum": 3,
                        "minimum": 0,
                        "type": "integer",
                        "description": "Host failures to tolerate",
                        "format": "int32",
                        "example": 3
                    }
                },
                "description": "Spec contains parameters of Virtual SAN"
            },
            "MessagePack": {
                "required": [
                    "messageKey"
                ],
                "type": "object",
                "properties": {
                    "component": {
                        "type": "string",
                        "description": "The component the message belongs to"
                    },
                    "messageKey": {
                        "type": "string",
                        "description": "The machine-readable key of the message"
                    },
                    "arguments": {
                        "type": "array",
                        "description": "The arguments used to localize the message. Can be used by scripts to automate the response processing. ",
                        "items": {
                            "type": "string",
                            "description": "The arguments used to localize the message. Can be used by scripts to automate the response processing. "
                        }
                    },
                    "message": {
                        "type": "string",
                        "description": "The localized message (if not provided by another property)"
                    },
                    "bundle": {
                        "type": "string",
                        "description": "The local resource bundle details"
                    }
                },
                "description": "A message pack representing a localizable message and suitable for machine processing. Contains a message key unique in the scope of the specified component, as well as the arguments needed to generate the localized message.",
                "readOnly": true
            },
            "SddcMilestoneTask": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "SDDC Milestone Name"
                    },
                    "description": {
                        "type": "string",
                        "description": "SDDC Milestone Description"
                    },
                    "status": {
                        "type": "string",
                        "description": "SDDC Milestone Task Status",
                        "example": "One among: NOT_STARTED, IN_PROGRESS, COMPLETED_WITH_SUCCESS, COMPLETED_WITH_FAILURE"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "SDDC Milestone Creation Time"
                    },
                    "updateTimestamp": {
                        "type": "string",
                        "description": "Last Update Time of SDDC Milestone"
                    }
                },
                "description": "Represents a SDDC Milestone"
            },
            "SddcSubTask": {
                "type": "object",
                "properties": {
                    "sddcId": {
                        "type": "string",
                        "description": "SDDC ID",
                        "example": "123e4567-e89b-42d3-a456-556642440000"
                    },
                    "processingStateName": {
                        "type": "string",
                        "description": "Processing category name, e.g., VC Deployment, VSAN configuration etc"
                    },
                    "processingStateDescription": {
                        "type": "string",
                        "description": "Processing category description, e.g., VC Deployment, VSAN configuration etc"
                    },
                    "name": {
                        "type": "string",
                        "description": "Sub-Task Name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Sub-Task Description"
                    },
                    "localizableNamePack": {
                        "$ref": "#/components/schemas/MessagePack"
                    },
                    "localizableDescriptionPack": {
                        "$ref": "#/components/schemas/MessagePack"
                    },
                    "status": {
                        "type": "string",
                        "description": "Task Status",
                        "example": "INITIALIZED, COMPLETED_WITH_SUCCESS, COMPLETED_WITH_FAILURE, PREVALIDATION_COMPLETED_WITH_SUCCESS, PREVALIDATION_COMPLETED_WITH_FAILURE, POSTVALIDATION_COMPLETED_WITH_SUCCESS, POSTVALIDATION_COMPLETED_WITH_FAILURE,IN_PROGRESS, PREVALIDATION_IN_PROGRESS, POSTVALIDATION_IN_PROGRESS, INTERNAL_ERROR"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "Sub-Task Creation Time"
                    },
                    "updateTimestamp": {
                        "type": "string",
                        "description": "Last Update Time of Sub-Task"
                    },
                    "errors": {
                        "type": "array",
                        "description": "List of errors in case of a failure",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                },
                "description": "Represents a SDDC sub-task"
            },
            "SddcTask": {
                "required": [
                    "creationTimestamp",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "maxLength": 256,
                        "minLength": 3,
                        "type": "string",
                        "description": "SDDC ID",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Task name",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "SDDC Task status. One among: IN_PROGRESS, COMPLETED_WITH_SUCCESS, ROLLBACK_SUCCESS, COMPLETED_WITH_FAILURE",
                        "readOnly": true,
                        "example": "COMPLETED_WITH_SUCCESS"
                    },
                    "localizableNamePack": {
                        "$ref": "#/components/schemas/MessagePack"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "SDDC Task creation timestamp",
                        "readOnly": true
                    },
                    "sddcSubTasks": {
                        "type": "array",
                        "description": "All SDDC Sub-Tasks",
                        "items": {
                            "$ref": "#/components/schemas/SddcSubTask"
                        }
                    },
                    "milestones": {
                        "type": "array",
                        "description": "Milestones of the workflow",
                        "items": {
                            "$ref": "#/components/schemas/SddcMilestoneTask"
                        }
                    }
                },
                "description": "Represents a SDDC task"
            },
            "VcfOperationsDiscoverySpec": {
                "required": [
                    "address",
                    "adminPassword",
                    "sslThumbprint"
                ],
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "VCF Operations instance address."
                    },
                    "adminUsername": {
                        "type": "string",
                        "description": "Admin username. Can be omitted."
                    },
                    "adminPassword": {
                        "type": "string",
                        "description": "Admin password."
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "VCF Operations SSL thumbprint (SHA256).",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                    }
                },
                "description": "VCF Operations specification holding endpoint information which to query for topology/discovery data."
            },
            "NodeAddress": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Address type. One among: fqdn, ipv4",
                        "example": "fqdn"
                    },
                    "value": {
                        "type": "string",
                        "description": "Address value."
                    }
                },
                "description": "Node address."
            },
            "NsxAdapterInfo": {
                "required": [
                    "address",
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Adapter ID."
                    },
                    "name": {
                        "type": "string",
                        "description": "Adapter name."
                    },
                    "address": {
                        "type": "string",
                        "description": "NSX address."
                    },
                    "vcenterAddress": {
                        "type": "string",
                        "description": "vCenter address."
                    }
                },
                "description": "NSX Adapter information registered in Vcf Operations instance."
            },
            "VcenterAdapterInfo": {
                "required": [
                    "address",
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Adapter ID."
                    },
                    "name": {
                        "type": "string",
                        "description": "Adapter name."
                    },
                    "address": {
                        "type": "string",
                        "description": "vCenter address."
                    }
                },
                "description": "vCenter Adapter information registered in Vcf Operations instance."
            },
            "VcfAutomationNodeInfo": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Node name."
                    },
                    "addresses": {
                        "type": "array",
                        "description": "Node addresses.",
                        "items": {
                            "$ref": "#/components/schemas/NodeAddress"
                        }
                    },
                    "certificateThumbprints": {
                        "type": "array",
                        "description": "Certificate thumbprints (SHA256).",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8",
                        "items": {
                            "type": "string",
                            "description": "Certificate thumbprints (SHA256).",
                            "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                        }
                    }
                },
                "description": "VCF Automation node information."
            },
            "VcfOperationsDiscoveryResult": {
                "required": [
                    "vcfOperationsBuildNumber",
                    "vcfOperationsNodes",
                    "vcfOperationsVersion"
                ],
                "type": "object",
                "properties": {
                    "vcfOperationsVersion": {
                        "type": "string",
                        "description": "VCF Operations instance version."
                    },
                    "vcfOperationsBuildNumber": {
                        "type": "string",
                        "description": "VCF Operations instance build number."
                    },
                    "vcfOperationsNodes": {
                        "type": "array",
                        "description": "VCF Operations nodes info.",
                        "items": {
                            "$ref": "#/components/schemas/VcfOperationsNodeInfo"
                        }
                    },
                    "vcfOperationsManagementNode": {
                        "$ref": "#/components/schemas/VcfOperationsManagementNodeInfo"
                    },
                    "vcfAutomationNodes": {
                        "type": "array",
                        "description": "VCF Automation nodes info.",
                        "items": {
                            "$ref": "#/components/schemas/VcfAutomationNodeInfo"
                        }
                    },
                    "vcenterAdapters": {
                        "type": "array",
                        "description": "Registered vCenter adapters.",
                        "items": {
                            "$ref": "#/components/schemas/VcenterAdapterInfo"
                        }
                    },
                    "nsxAdapters": {
                        "type": "array",
                        "description": "Registered NSX adapters.",
                        "items": {
                            "$ref": "#/components/schemas/NsxAdapterInfo"
                        }
                    }
                },
                "description": "Topology discovery result from querying VCF Operations instance."
            },
            "VcfOperationsManagementNodeInfo": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Node name."
                    },
                    "addresses": {
                        "type": "array",
                        "description": "Node addresses.",
                        "items": {
                            "$ref": "#/components/schemas/NodeAddress"
                        }
                    },
                    "certificateThumbprints": {
                        "type": "array",
                        "description": "Certificate thumbprints (SHA256).",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8",
                        "items": {
                            "type": "string",
                            "description": "Certificate thumbprints (SHA256).",
                            "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                        }
                    }
                },
                "description": "VCF Operations Management node information."
            },
            "VcfOperationsNodeInfo": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Node address."
                    },
                    "name": {
                        "type": "string",
                        "description": "Node name."
                    },
                    "type": {
                        "type": "string",
                        "description": "Node type. One among: master, replica, data, witness, cloudproxy",
                        "example": "master"
                    }
                },
                "description": "VCF Operations node information."
            },
            "VcenterDiscoverySpec": {
                "required": [
                    "address",
                    "password",
                    "sslThumbprint",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "vCenter address."
                    },
                    "username": {
                        "type": "string",
                        "description": "SSO username."
                    },
                    "password": {
                        "type": "string",
                        "description": "SSO password."
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "vCenter SSL thumbprint (SHA256)",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                    }
                },
                "description": "vCenter specification holding endpoint information which to query for topology/discovery data."
            },
            "VcenterDiscoveryResult": {
                "type": "object",
                "properties": {
                    "vcenterVersion": {
                        "type": "string",
                        "description": "vCenter version."
                    },
                    "vcenterBuildNumber": {
                        "type": "string",
                        "description": "vCenter build number."
                    },
                    "nsxInfo": {
                        "$ref": "#/components/schemas/VcenterNsxInfo"
                    }
                },
                "description": "Topology discovery result from querying vCenter instance."
            },
            "VcenterNsxInfo": {
                "required": [
                    "address"
                ],
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "NSX address."
                    }
                },
                "description": "NSX instance associated with vCenter instance."
            },
            "Validation": {
                "required": [
                    "description",
                    "executionStatus",
                    "id",
                    "resultStatus"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the validation",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the validation",
                        "readOnly": true
                    },
                    "executionStatus": {
                        "type": "string",
                        "description": "Execution status of the validation. One among: IN_PROGRESS, FAILED, COMPLETED, UNKNOWN, SKIPPED, CANCELLED, CANCELLATION_IN_PROGRESS",
                        "readOnly": true,
                        "example": "COMPLETED"
                    },
                    "resultStatus": {
                        "type": "string",
                        "description": "Result status of the validation after it has completed its execution. One among: SUCCEEDED, FAILED, WARNING, UNKNOWN, CANCELLATION_IN_PROGRESS",
                        "readOnly": true,
                        "example": "SUCCEEDED"
                    },
                    "validationChecks": {
                        "type": "array",
                        "description": "List of one or more validation checks that are performed as part of the validation",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ValidationCheck"
                        }
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "description": "Represents a validation with a list of one or more validation checks that are performed as part of the validation"
            },
            "ValidationCheck": {
                "required": [
                    "resultStatus"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the validation check",
                        "readOnly": true
                    },
                    "severity": {
                        "type": "string",
                        "description": "Severity of the validation check",
                        "readOnly": true,
                        "example": "One among: WARNING, ERROR, INFO"
                    },
                    "resultStatus": {
                        "type": "string",
                        "description": "Result status of the validation check after it has completed its execution",
                        "example": "One among: IN_PROGRESS, SUCCEEDED, FAILED, SKIPPED, CANCELLED, CANCELLATION_IN_PROGRESS"
                    },
                    "acknowledge": {
                        "type": "boolean",
                        "description": "Flag indicating whether the validation check requires acknowledgment",
                        "readOnly": true
                    },
                    "errorResponse": {
                        "$ref": "#/components/schemas/Error"
                    }
                },
                "description": "Represents a validation check",
                "readOnly": true
            },
            "SddcNetworkConfigProfileSpec": {
                "required": [
                    "hostSpecs",
                    "storageType"
                ],
                "type": "object",
                "properties": {
                    "storageType": {
                        "type": "string",
                        "description": "Storage type of the Management Domain",
                        "enum": [
                            "VSAN",
                            "VSAN_ESA",
                            "NFS",
                            "FC"
                        ]
                    },
                    "hostSpecs": {
                        "type": "array",
                        "description": "List of hosts which will be used for the Management Domain",
                        "items": {
                            "$ref": "#/components/schemas/SddcHostSpec"
                        }
                    },
                    "subdomain": {
                        "type": "string",
                        "description": "Tenant Sub domain. Includes the full domain suffix",
                        "example": "vcf.vmware.com"
                    },
                    "nsxConfigType": {
                        "pattern": "(NSX_SEPARATION|NO_NSX_SEPARATION)",
                        "type": "string",
                        "description": "NSX Config Type",
                        "example": "One among: NSX_SEPARATION, NO_NSX_SEPARATION"
                    }
                },
                "description": "This specification contains the parameters needed to get pre-configured network profiles which to facilitate the configuration of the networking stack during Management Domain creation"
            },
            "SddcNetworkConfigProfile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the profile. One among: \"DEFAULT\", \"STORAGE_SEPARATION\", \"NSX_SEPARATION\", \"STORAGE_NSX_SEPARATION\"",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the profile",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the profile",
                        "readOnly": true
                    },
                    "dvsSpecs": {
                        "type": "array",
                        "description": "vSphere Distributed Switches topology",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/DvsSpec"
                        }
                    },
                    "dvsNameToPortgroupSpecs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "description": "Map of vSphere Distributed Switch name to portgroup/network specs",
                            "readOnly": true,
                            "items": {
                                "$ref": "#/components/schemas/SddcNetworkSpec"
                            }
                        },
                        "description": "Map of vSphere Distributed Switch name to portgroup/network specs",
                        "readOnly": true
                    }
                },
                "description": "Network configuration profile which can be used to configure the networking stack of the Management Domain.",
                "readOnly": true
            },
            "SddcNetworkConfigProfileResponse": {
                "type": "object",
                "properties": {
                    "commonPhysicalNics": {
                        "type": "array",
                        "description": "List of physical NICs common to all hosts.",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SddcPhysicalNic"
                        }
                    },
                    "profiles": {
                        "type": "array",
                        "description": "List of pre-configured network profiles",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SddcNetworkConfigProfile"
                        }
                    }
                },
                "description": "Response holding pre-configured network profiles and list of common physical NICs."
            },
            "SddcPhysicalNic": {
                "type": "object",
                "properties": {
                    "deviceName": {
                        "type": "string",
                        "description": "Device name of the physical NIC",
                        "readOnly": true
                    },
                    "speedMb": {
                        "type": "integer",
                        "description": "Speed of the physical NIC",
                        "format": "int64",
                        "readOnly": true
                    },
                    "isSmartNic": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "smartNic": {
                        "type": "boolean"
                    }
                },
                "description": "Physical NIC information which can be shared between multiple hosts",
                "readOnly": true
            },
            "SddcInstallerRequest": {
                "required": [
                    "endpoints",
                    "subdomain"
                ],
                "type": "object",
                "properties": {
                    "endpoints": {
                        "type": "array",
                        "description": "List of ESXi/vCenter in which the appliance will check for itself",
                        "items": {
                            "$ref": "#/components/schemas/SddcHostSpec"
                        }
                    },
                    "subdomain": {
                        "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
                        "type": "string",
                        "description": "Tenant Sub domain. Includes the full domain suffix",
                        "example": "vcf.broadcom.com"
                    }
                },
                "description": "Spec contains parameters for Host"
            },
            "InstallerSpec": {
                "type": "object",
                "properties": {
                    "applianceFqdn": {
                        "type": "string",
                        "description": "Appliance FQDN",
                        "example": "sddc-manager"
                    },
                    "type": {
                        "type": "string",
                        "description": "Installer type",
                        "enum": [
                            "Internal",
                            "External",
                            "Internal, External"
                        ]
                    }
                },
                "description": "VCF Installer Installer Specification"
            },
            "TrustedCertificateSpec": {
                "required": [
                    "certificate"
                ],
                "type": "object",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "Certificate in PEM format",
                        "example": "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----"
                    },
                    "certificateUsageType": {
                        "type": "string",
                        "description": "Certificate usage",
                        "example": "One among: TRUSTED_FOR_OUTBOUND, TRUSTED_FOR_INBOUND",
                        "deprecated": true
                    }
                },
                "description": "This specification contains certificate & certificate usage"
            },
            "PageMetadata": {
                "type": "object",
                "properties": {
                    "pageNumber": {
                        "type": "integer",
                        "description": "Returns the current page number",
                        "format": "int32",
                        "readOnly": true
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "Returns the number of elements in the current page",
                        "format": "int32",
                        "readOnly": true
                    },
                    "totalElements": {
                        "type": "integer",
                        "description": "Returns the total number of elements",
                        "format": "int32",
                        "readOnly": true
                    },
                    "totalPages": {
                        "type": "integer",
                        "description": "Returns the total number of pages",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "description": "Represents pageable elements pagination metadata",
                "readOnly": true
            },
            "PageOfTrustedCertificate": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/TrustedCertificate"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "TrustedCertificate": {
                "required": [
                    "alias",
                    "certificate"
                ],
                "type": "object",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "Certificate alias",
                        "example": "vcf_59:24:D5:18:04:A0:26:B0:A4:05:EA:82:60:95:82:A2:4B:F6:31:FB:81:93:01:F3:29:7D:34:9C:D3:05:39:90"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "Certificate in PEM format",
                        "example": "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----"
                    }
                },
                "description": "The Trusted Certificate details.",
                "readOnly": true
            },
            "BundleUploadSpec": {
                "required": [
                    "bundleFilePath",
                    "manifestFilePath"
                ],
                "type": "object",
                "properties": {
                    "bundleFilePath": {
                        "type": "string",
                        "description": "Bundle Upload File Path"
                    },
                    "manifestFilePath": {
                        "type": "string",
                        "description": "Bundle Upload Manifest File Path"
                    },
                    "signatureFilePath": {
                        "type": "string",
                        "description": "Bundle Upload Signature File Path"
                    },
                    "compatibilitySetsFilePath": {
                        "type": "string",
                        "description": "[Deprecated] Path to the software compatibility sets file",
                        "deprecated": true
                    },
                    "partnerExtensionSpec": {
                        "$ref": "#/components/schemas/PartnerExtensionSpec"
                    }
                },
                "description": "Bundle Upload Specification"
            },
            "PartnerExtensionSpec": {
                "type": "object",
                "properties": {
                    "partnerBundleVersion": {
                        "type": "string",
                        "description": "Version of partner bundle to be uploaded. Should match one of the bundle versions available in the partner bundle metadata file"
                    },
                    "partnerBundleMetadataFilePath": {
                        "type": "string",
                        "description": "Path to the bundle metadata file. The metadata file can have details of multiple bundles"
                    }
                },
                "description": "Specification for partner extensions. This specification is used in the Bundle Upload API"
            },
            "DocumentationLink": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "URL string of the documentation link",
                        "readOnly": true
                    },
                    "label": {
                        "type": "string",
                        "description": "Label of the documentation link",
                        "readOnly": true
                    }
                },
                "description": "Represents a documentation link's url string and label",
                "readOnly": true
            },
            "Resource": {
                "required": [
                    "resourceId",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "Resource ID",
                        "example": "BE8A5E04-92A0-43F6-A166-AA041F4327CC"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "Resource FQDN",
                        "example": "sfo-vc01.rainpole.io"
                    },
                    "type": {
                        "type": "string",
                        "description": "Resource type",
                        "example": "One among: SDDC_MANAGER, PSC, VCENTER, NSXT_MANAGER, VXRAIL_MANAGER, NSX_ALB, ESXI"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource"
                    },
                    "sans": {
                        "type": "array",
                        "description": "Subject alternative name(s)",
                        "example": "sfo-vc01.rainpole.io",
                        "items": {
                            "type": "string",
                            "description": "Subject alternative name(s)",
                            "example": "sfo-vc01.rainpole.io"
                        }
                    }
                },
                "description": "Represents the resource in the system",
                "readOnly": true
            },
            "Stage": {
                "required": [
                    "creationTimestamp",
                    "description",
                    "name",
                    "status",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Stage name",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Stage type",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Stage description",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Stage status",
                        "readOnly": true,
                        "example": "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "completionTimestamp": {
                        "type": "string",
                        "description": "Stage completion timestamp",
                        "readOnly": true
                    },
                    "errors": {
                        "type": "array",
                        "description": "List of errors in case of a failure",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                },
                "description": "Represents a Stage",
                "readOnly": true
            },
            "SubTask": {
                "required": [
                    "creationTimestamp",
                    "description",
                    "name",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Sub-task name",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Sub-task type",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Sub-task description",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Sub-task status",
                        "readOnly": true,
                        "example": "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED, SKIPPED, NOT_APPLICABLE"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "Sub-task creation timestamp",
                        "readOnly": true
                    },
                    "completionTimestamp": {
                        "type": "string",
                        "description": "Sub-task completion timestamp",
                        "readOnly": true
                    },
                    "stages": {
                        "type": "array",
                        "description": "List of stages of the sub-task",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Stage"
                        }
                    },
                    "errors": {
                        "type": "array",
                        "description": "List of errors in case of a failure",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of resources associated with sub-task",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Resource"
                        }
                    },
                    "subTasks": {
                        "type": "array",
                        "description": "List of child subtasks associated with this subtask",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SubTask"
                        }
                    },
                    "documentationLink": {
                        "$ref": "#/components/schemas/DocumentationLink"
                    }
                },
                "description": "Represents a sub-task",
                "readOnly": true
            },
            "Task": {
                "required": [
                    "creationTimestamp",
                    "id",
                    "name",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Task ID",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Task name",
                        "readOnly": true
                    },
                    "localizableDescriptionPack": {
                        "$ref": "#/components/schemas/MessagePack"
                    },
                    "type": {
                        "type": "string",
                        "description": "Operation that is represented by the Task in machine readable format.  The value is controlled by the owners/producers of the Task. The convention is <resource>_<operation>",
                        "readOnly": true,
                        "example": "Sample values: HOST_COMMISSION, HOST_DECOMMISSION"
                    },
                    "status": {
                        "type": "string",
                        "description": "Task status",
                        "readOnly": true,
                        "example": "One among: PENDING, Pending, IN_PROGRESS, In Progress, SUCCESSFUL, Successful, FAILED, Failed, CANCELLED, Cancelled, COMPLETED_WITH_WARNING, SKIPPED"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "Task creation timestamp",
                        "readOnly": true
                    },
                    "completionTimestamp": {
                        "type": "string",
                        "description": "Task completion timestamp",
                        "readOnly": true
                    },
                    "subTasks": {
                        "type": "array",
                        "description": "List of sub-tasks of the task",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SubTask"
                        }
                    },
                    "errors": {
                        "type": "array",
                        "description": "List of errors in case of a failure",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of resources associated with task",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Resource"
                        }
                    },
                    "resolutionStatus": {
                        "type": "string",
                        "description": "Resolution state",
                        "readOnly": true,
                        "example": "Can have only one of the two values: RESOLVED or UNRESOLVED"
                    },
                    "isCancellable": {
                        "type": "boolean",
                        "description": "Represents task can be cancellable or not.",
                        "readOnly": true
                    },
                    "isRetryable": {
                        "type": "boolean",
                        "description": "Indicates whether a task is eligible for retry or not.",
                        "readOnly": true
                    }
                },
                "description": "Represents a task"
            },
            "SystemUpdateSpec": {
                "required": [
                    "maxAllowedDomainsInSubscription"
                ],
                "type": "object",
                "properties": {
                    "maxAllowedDomainsInSubscription": {
                        "type": "integer",
                        "description": "new limit of amount of domains in subscription mode",
                        "format": "int32"
                    }
                },
                "description": "Contains the parameters required to perform update operation on system"
            },
            "DepotSyncInfo": {
                "required": [
                    "syncStatus"
                ],
                "type": "object",
                "properties": {
                    "syncStatus": {
                        "type": "string",
                        "description": "Depot sync status",
                        "readOnly": true
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Depot sync error message",
                        "readOnly": true
                    },
                    "lastSyncCompletionTimestamp": {
                        "type": "string",
                        "description": "The completion timestamp of the last sync operation",
                        "readOnly": true
                    }
                },
                "description": "Depot Sync Information"
            },
            "ProxyConfiguration": {
                "type": "object",
                "properties": {
                    "isConfigured": {
                        "type": "boolean",
                        "description": "Defines if the proxy is configured.",
                        "readOnly": true
                    },
                    "isEnabled": {
                        "type": "boolean",
                        "description": "Defines if the proxy configuration is enabled. To disable the proxy, this should be set to false."
                    },
                    "host": {
                        "type": "string",
                        "description": "IP address/FQDN of proxy server. This must be set if proxy is enabled.",
                        "example": "10.0.0.250"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port of proxy server. This must be set if proxy is enabled.",
                        "format": "int32",
                        "example": 3128
                    },
                    "transferProtocol": {
                        "type": "string",
                        "description": "Proxy transfer protocol, default value is HTTP",
                        "example": "One among: HTTP, HTTPS",
                        "enum": [
                            "HTTP",
                            "HTTPS"
                        ]
                    },
                    "username": {
                        "type": "string",
                        "description": "User name to connect"
                    },
                    "password": {
                        "type": "string",
                        "description": "User password to connect, will return null on reading"
                    },
                    "isAuthenticated": {
                        "type": "boolean",
                        "description": "If proxy authentication is required, isAuthenticated must be enabled and username and password should be set."
                    }
                },
                "description": "Proxy Configuration"
            },
            "BundleDownloadSpec": {
                "type": "object",
                "properties": {
                    "scheduledTimestamp": {
                        "type": "string",
                        "description": "Bundle Download Scheduled Time",
                        "example": "2025-01-24T10:00:00Z"
                    },
                    "downloadNow": {
                        "type": "boolean",
                        "description": "Flag for enabling Download Now. If true, scheduledTimestamp is ignored"
                    },
                    "cancelNow": {
                        "type": "boolean",
                        "description": "Flag for cancelling the download. If true, scheduledTimestamp/downloadNow is ignored"
                    }
                },
                "description": "Bundle Download Specification. This specification gets used in the Bundle Download API"
            },
            "BundleUpdateSpec": {
                "type": "object",
                "properties": {
                    "bundleDownloadSpec": {
                        "$ref": "#/components/schemas/BundleDownloadSpec"
                    }
                },
                "description": "Bundle Update Specification"
            },
            "PageOfVcfService": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/VcfService"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "VcfService": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the service"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the service"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the service"
                    }
                },
                "description": "VCF service representation"
            },
            "PageOfTask": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Task"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "System": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier of the system",
                        "readOnly": true
                    },
                    "maxAllowedDomainsInSubscription": {
                        "type": "integer",
                        "description": "The maximum number of domains allowed in subscription mode",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "description": "Represents a system"
            },
            "VcfAutomation": {
                "type": "object",
                "properties": {
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN",
                        "readOnly": true,
                        "example": "vcfautomation.rainpole.io"
                    },
                    "deploymentStatus": {
                        "type": "string",
                        "description": "VCF Automation deployment status. One among: NOT_FOUND, NOT_STARTED, IN_PROGRESS, FAILED, SUCCEEDED",
                        "readOnly": true,
                        "example": "SUCCEEDED"
                    },
                    "deploymentType": {
                        "type": "string",
                        "description": "VCF Automation deployment type. One among: NEW, EXISTING",
                        "readOnly": true,
                        "example": "NEW"
                    }
                },
                "description": "VCF Automation",
                "readOnly": true
            },
            "VcfManagementComponents": {
                "type": "object",
                "properties": {
                    "vcfOperationsFleetManagement": {
                        "$ref": "#/components/schemas/VcfOperationsFleetManagement"
                    },
                    "vcfOperations": {
                        "$ref": "#/components/schemas/VcfOperations"
                    },
                    "vcfOperationsCollector": {
                        "$ref": "#/components/schemas/VcfOperationsCollector"
                    },
                    "vcfAutomation": {
                        "$ref": "#/components/schemas/VcfAutomation"
                    }
                },
                "description": "VCF Management Components"
            },
            "VcfOperations": {
                "type": "object",
                "properties": {
                    "nodes": {
                        "type": "array",
                        "description": "List of nodes",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/VcfOperationsNodeDetails"
                        }
                    },
                    "loadBalancerFqdn": {
                        "type": "string",
                        "description": "Load Balancer FQDN",
                        "readOnly": true,
                        "example": "vcf-operations-load-balancer.rainpole.io"
                    },
                    "deploymentStatus": {
                        "type": "string",
                        "description": "VCF Operations deployment status. One among: NOT_FOUND, NOT_STARTED, IN_PROGRESS, FAILED, SUCCEEDED",
                        "readOnly": true,
                        "example": "SUCCEEDED"
                    },
                    "deploymentType": {
                        "type": "string",
                        "description": "VCF Operations deployment type. One among: NEW, EXISTING",
                        "readOnly": true,
                        "example": "NEW"
                    }
                },
                "description": "VCF Operations",
                "readOnly": true
            },
            "VcfOperationsCollector": {
                "type": "object",
                "properties": {
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN",
                        "readOnly": true,
                        "example": "vcf-operations-collector.rainpole.io"
                    },
                    "deploymentStatus": {
                        "type": "string",
                        "description": "VCF Operations collector deployment status. One among: NOT_FOUND, NOT_STARTED, IN_PROGRESS, FAILED, SUCCEEDED",
                        "readOnly": true,
                        "example": "SUCCEEDED"
                    },
                    "deploymentType": {
                        "type": "string",
                        "description": "VCF Operations collector deployment type. Only valid value is: NEW",
                        "readOnly": true,
                        "example": "NEW"
                    }
                },
                "description": "VCF Operations collector",
                "readOnly": true
            },
            "VcfOperationsFleetManagement": {
                "type": "object",
                "properties": {
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN",
                        "readOnly": true,
                        "example": "vcf-operations-fleet-management.rainpole.io"
                    },
                    "deploymentStatus": {
                        "type": "string",
                        "description": "VCF Operations fleet management deployment status. One among: NOT_FOUND, NOT_STARTED, IN_PROGRESS, FAILED, SUCCEEDED",
                        "readOnly": true,
                        "example": "SUCCEEDED"
                    },
                    "deploymentType": {
                        "type": "string",
                        "description": "VCF Operations fleet management deployment type. One among: NEW, EXISTING",
                        "readOnly": true,
                        "example": "NEW"
                    }
                },
                "description": "VCF Operations fleet management",
                "readOnly": true
            },
            "VcfOperationsNodeDetails": {
                "type": "object",
                "properties": {
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN",
                        "readOnly": true,
                        "example": "vcfoperations-master.rainpole.io"
                    },
                    "type": {
                        "type": "string",
                        "description": "Node type. One among: master, replica, data",
                        "readOnly": true,
                        "example": "master"
                    }
                },
                "description": "VCF Operations node details",
                "readOnly": true
            },
            "Ceip": {
                "required": [
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "CEIP status",
                        "example": "One among: ENABLED, DISABLED, ENABLING, DISABLING, ENABLING_FAILED, DISABLING_FAILED"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Instance Id of VCF",
                        "readOnly": true,
                        "example": "3f39d4a1-78d2-11e8-af85-f1cf26258cdc"
                    }
                },
                "description": "Defines VCF CEIP status and instance id"
            },
            "ApplianceInfo": {
                "type": "object",
                "properties": {
                    "role": {
                        "type": "string",
                        "description": "Appliance Role",
                        "example": "One of: VcfInstaller, SddcManager"
                    },
                    "version": {
                        "type": "string",
                        "description": "Appliance version",
                        "example": "9.0.0.0.1234567"
                    }
                },
                "description": "Appliance Information"
            },
            "PageOfSddcTask": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SddcTask"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfValidation": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Validation"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfRelease": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Release"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PatchBundle": {
                "required": [
                    "bundleElements",
                    "bundleId",
                    "bundleType",
                    "cumulativeFromVcfVersion"
                ],
                "type": "object",
                "properties": {
                    "bundleId": {
                        "type": "string",
                        "description": "Bundle ID of the patch bundle",
                        "readOnly": true
                    },
                    "bundleType": {
                        "type": "string",
                        "description": "Bundle type of the patch bundle",
                        "readOnly": true
                    },
                    "bundleElements": {
                        "type": "array",
                        "description": "Bundle elements of the patch bundle",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "Bundle elements of the patch bundle",
                            "readOnly": true
                        }
                    },
                    "cumulativeFromVcfVersion": {
                        "type": "string",
                        "description": "Minimum VCF version that this patch bundle can be directly applied on",
                        "readOnly": true
                    }
                },
                "description": "Model for patch bundle in a release",
                "readOnly": true
            },
            "ProductVersion": {
                "required": [
                    "name",
                    "publicName"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the product. e.g ESX",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Version for the product, e.g 6.7.0-11675023",
                        "readOnly": true
                    },
                    "changeId": {
                        "type": "string",
                        "description": "Build or CLN for the product, e.g 11675023",
                        "readOnly": true
                    },
                    "publicName": {
                        "type": "string",
                        "description": "Public name of the product, e.g VMware ESXi",
                        "readOnly": true
                    },
                    "releaseURL": {
                        "type": "string",
                        "description": "URL for the release.",
                        "readOnly": true
                    },
                    "additionalMetadata": {
                        "type": "string",
                        "description": "any additional metadata",
                        "readOnly": true
                    },
                    "automatedInstall": {
                        "type": "boolean",
                        "description": "Automated install or not, e.g. true",
                        "readOnly": true
                    },
                    "lifecycleManagedBy": {
                        "type": "string",
                        "description": "Lifecycle is managed by whom, e.g. SDDC_MANAGER_VCF",
                        "readOnly": true
                    }
                },
                "description": "Details of the product/component for the release.",
                "readOnly": true
            },
            "Release": {
                "required": [
                    "bom",
                    "description",
                    "product",
                    "releaseDate",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "product": {
                        "type": "string",
                        "description": "Name of the product e.g. \"VCF\"",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the release",
                        "readOnly": true
                    },
                    "minCompatibleVcfVersion": {
                        "type": "string",
                        "description": "Minimum compatible VCF version, used to represent compatibility of SDDC Manager and VMware BOM components",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Release description with all major features. ",
                        "readOnly": true
                    },
                    "releaseDate": {
                        "type": "string",
                        "description": "Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format",
                        "readOnly": true
                    },
                    "bom": {
                        "type": "array",
                        "description": "Release bill of materials",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ProductVersion"
                        }
                    },
                    "isApplicable": {
                        "type": "boolean",
                        "description": "[Deprecated] Whether bundle is applicable or not.",
                        "readOnly": true,
                        "deprecated": true
                    },
                    "notApplicableReason": {
                        "type": "string",
                        "description": "[Deprecated] Incompatibility reason for not applicable.",
                        "readOnly": true,
                        "deprecated": true
                    },
                    "sku": {
                        "type": "array",
                        "description": "Release sku specific patch and bill of materials",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SkuBomDetails"
                        }
                    },
                    "updates": {
                        "type": "array",
                        "description": "Collection of release updates",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ReleaseUpdate"
                        }
                    },
                    "patchBundles": {
                        "type": "array",
                        "description": "List of patch bundles in this release",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/PatchBundle"
                        }
                    },
                    "eol": {
                        "type": "string",
                        "description": "Release eol information e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format",
                        "readOnly": true
                    },
                    "upgradeOrder": {
                        "type": "string",
                        "description": "Custom upgrade order. Comma separated list of components in upgrade order. Supported components types: NSX_T_MANAGER, VCENTER, ESX_HOST. ",
                        "readOnly": true
                    },
                    "minInstallerVersion": {
                        "type": "string",
                        "description": "Minimum installer version, e.g. 9.0.0.0",
                        "readOnly": true
                    }
                },
                "description": "Model for releases with their description and product version"
            },
            "ReleaseUpdate": {
                "required": [
                    "baseProductVersion",
                    "description",
                    "id",
                    "productName",
                    "releaseDate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Release version",
                        "readOnly": true
                    },
                    "productName": {
                        "type": "string",
                        "description": "Product name for which the release update is provided",
                        "readOnly": true
                    },
                    "baseProductVersion": {
                        "type": "string",
                        "description": "Base product version for the release",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the release update",
                        "readOnly": true
                    },
                    "releaseUpdateURL": {
                        "type": "string",
                        "description": "URL to the release update",
                        "format": "url",
                        "readOnly": true
                    },
                    "releaseDate": {
                        "type": "string",
                        "description": "Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format",
                        "readOnly": true
                    }
                },
                "description": "Update to a given release",
                "readOnly": true
            },
            "SkuBomDetails": {
                "required": [
                    "bom"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "SKU name",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description to be shown in release page",
                        "readOnly": true
                    },
                    "skuSpecificPatchBundles": {
                        "type": "array",
                        "description": "List of patch bundles in this release",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SkuSpecificPatchBundles"
                        }
                    },
                    "bom": {
                        "type": "array",
                        "description": "Sku specific bill of materials",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ProductVersion"
                        }
                    }
                },
                "description": "Model for sku with their name, description, patchBundles and bom",
                "readOnly": true
            },
            "SkuSpecificPatchBundles": {
                "required": [
                    "bundleType",
                    "bundleVersion",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "bundleType": {
                        "type": "string",
                        "description": "Bundle type of the patch bundle",
                        "readOnly": true
                    },
                    "bundleVersion": {
                        "type": "string",
                        "description": "Bundle Version of the product",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Product version",
                        "readOnly": true
                    }
                },
                "description": "Model for Sku specific patch bundle in a release",
                "readOnly": true
            },
            "CustomPatch": {
                "required": [
                    "artifacts",
                    "productVersion"
                ],
                "type": "object",
                "properties": {
                    "productVersion": {
                        "type": "string",
                        "description": "Product version of the install/patch bundle",
                        "readOnly": true
                    },
                    "date": {
                        "type": "string",
                        "description": "Time of publish of the product e.g. 2020-06-08T02:20:15.844Z",
                        "readOnly": true
                    },
                    "artifacts": {
                        "$ref": "#/components/schemas/CustomPatchArtifact"
                    }
                },
                "description": "Patch or Install info from Product Version Catalog.",
                "readOnly": true
            },
            "CustomPatchArtifact": {
                "required": [
                    "bundles"
                ],
                "type": "object",
                "properties": {
                    "bundles": {
                        "type": "array",
                        "description": "List of bundle artifacts for corresponding product patch/install version",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/CustomPatchBundleInfo"
                        }
                    }
                },
                "description": "Patch rest model that is located in the Product Version Catalog.",
                "readOnly": true
            },
            "CustomPatchBundleInfo": {
                "required": [
                    "id",
                    "name",
                    "size",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Bundle id",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of bundle. ex) PATCH, INSTALL",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Patch/Install bundle name",
                        "readOnly": true
                    },
                    "size": {
                        "type": "integer",
                        "description": "Binary size",
                        "format": "int64",
                        "readOnly": true
                    }
                },
                "description": "Patch/Install bundle info from ProductVersionCatalog.",
                "readOnly": true
            },
            "PageOfReleaseComponentDetail": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ReleaseComponentDetail"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                },
                "description": "Paginated response containing the list of release component detail."
            },
            "ProductReleaseComponent": {
                "required": [
                    "automatedInstall",
                    "name",
                    "publicName",
                    "sku"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Product name",
                        "readOnly": true
                    },
                    "sku": {
                        "type": "string",
                        "description": "SKU of the install/patch bundle",
                        "readOnly": true
                    },
                    "publicName": {
                        "type": "string",
                        "description": "Product public name",
                        "readOnly": true
                    },
                    "automatedInstall": {
                        "type": "boolean",
                        "description": "automated Install",
                        "readOnly": true
                    },
                    "versions": {
                        "type": "array",
                        "description": "Product version details",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/CustomPatch"
                        }
                    }
                },
                "description": "Product Release Component",
                "readOnly": true
            },
            "ReleaseComponentDetail": {
                "required": [
                    "components",
                    "releaseVersion"
                ],
                "type": "object",
                "properties": {
                    "releaseVersion": {
                        "type": "string",
                        "description": "VCF/VVF release version",
                        "readOnly": true
                    },
                    "components": {
                        "type": "array",
                        "description": "VCF/VVF release elements",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ProductReleaseComponent"
                        }
                    }
                },
                "description": "Model for Release Component Detail",
                "readOnly": true
            },
            "AlternativeApplicableSddcManagerVersion": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "Version of target SDDC manger",
                        "readOnly": true
                    }
                },
                "description": "Version of Target SDDC Manager",
                "readOnly": true
            },
            "DomainFutureRelease": {
                "required": [
                    "bom",
                    "description",
                    "product",
                    "releaseDate",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "reasonNotApplicable": {
                        "$ref": "#/components/schemas/MessagePack"
                    },
                    "reasonsNotApplicable": {
                        "type": "array",
                        "description": "List of Incompatibility details for not applicable",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/MessagePack"
                        }
                    },
                    "warnings": {
                        "type": "array",
                        "description": "List of warning messages for product compatibility",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/MessagePack"
                        }
                    },
                    "alternativeApplicableSddcManagerVersions": {
                        "type": "array",
                        "description": "List of AlternativeApplicableSddcManagerVersions",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/AlternativeApplicableSddcManagerVersion"
                        }
                    },
                    "applicabilityStatus": {
                        "type": "string",
                        "description": "Whether bundle is applicable or not.",
                        "readOnly": true,
                        "example": "One among: APPLICABLE, NOT_APPLICABLE"
                    },
                    "product": {
                        "type": "string",
                        "description": "Name of the product e.g. \"VCF\"",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the release",
                        "readOnly": true
                    },
                    "minCompatibleVcfVersion": {
                        "type": "string",
                        "description": "Minimum compatible VCF version, used to represent compatibility of SDDC Manager and VMware BOM components",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Release description with all major features. ",
                        "readOnly": true
                    },
                    "releaseDate": {
                        "type": "string",
                        "description": "Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format",
                        "readOnly": true
                    },
                    "bom": {
                        "type": "array",
                        "description": "Release bill of materials",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ProductVersion"
                        }
                    },
                    "isApplicable": {
                        "type": "boolean",
                        "description": "[Deprecated] Whether bundle is applicable or not.",
                        "readOnly": true,
                        "deprecated": true
                    },
                    "notApplicableReason": {
                        "type": "string",
                        "description": "[Deprecated] Incompatibility reason for not applicable.",
                        "readOnly": true,
                        "deprecated": true
                    },
                    "sku": {
                        "type": "array",
                        "description": "Release sku specific patch and bill of materials",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SkuBomDetails"
                        }
                    },
                    "updates": {
                        "type": "array",
                        "description": "Collection of release updates",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ReleaseUpdate"
                        }
                    },
                    "patchBundles": {
                        "type": "array",
                        "description": "List of patch bundles in this release",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/PatchBundle"
                        }
                    },
                    "eol": {
                        "type": "string",
                        "description": "Release eol information e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format",
                        "readOnly": true
                    },
                    "upgradeOrder": {
                        "type": "string",
                        "description": "Custom upgrade order. Comma separated list of components in upgrade order. Supported components types: NSX_T_MANAGER, VCENTER, ESX_HOST. ",
                        "readOnly": true
                    },
                    "minInstallerVersion": {
                        "type": "string",
                        "description": "Minimum installer version, e.g. 9.0.0.0",
                        "readOnly": true
                    }
                },
                "description": "Model for releases with details if applicable to current domain version or not.",
                "readOnly": true
            },
            "PageOfDomainFutureRelease": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/DomainFutureRelease"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "FlexibleProductPatch": {
                "required": [
                    "productType",
                    "versions"
                ],
                "type": "object",
                "properties": {
                    "productType": {
                        "type": "string",
                        "description": "product type of patch",
                        "readOnly": true
                    },
                    "versions": {
                        "type": "array",
                        "description": "supported versions of patch",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "supported versions of patch",
                            "readOnly": true
                        }
                    }
                },
                "description": "Model for product async/hot patches with their supported product versions",
                "readOnly": true
            },
            "FlexibleProductPatches": {
                "required": [
                    "patches",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "Domain VCF release version",
                        "readOnly": true
                    },
                    "patches": {
                        "type": "array",
                        "description": "List of available patches on the VCF release",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/FlexibleProductPatch"
                        }
                    }
                },
                "description": "Model for supported product async/hot patches associated with a VCF release"
            },
            "CustomPatches": {
                "required": [
                    "releaseVersion"
                ],
                "type": "object",
                "properties": {
                    "releaseVersion": {
                        "type": "string",
                        "description": "VCF/VVF release version",
                        "readOnly": true
                    },
                    "patches": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "description": "Patches used for the product version catalog",
                            "readOnly": true,
                            "items": {
                                "$ref": "#/components/schemas/CustomPatch"
                            }
                        },
                        "description": "Patches used for the product version catalog",
                        "readOnly": true
                    }
                },
                "description": "Model for supported product install/patches associated with a VCF/VVF release"
            },
            "Bundle": {
                "required": [
                    "downloadStatus",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Bundle ID",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Bundle Type",
                        "readOnly": true,
                        "example": "One among: SDDC_MANAGER, VMWARE_SOFTWARE, VXRAIL"
                    },
                    "description": {
                        "type": "string",
                        "description": "Bundle Description",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Bundle Version",
                        "readOnly": true
                    },
                    "severity": {
                        "type": "string",
                        "description": "Bundle Severity",
                        "readOnly": true,
                        "example": "One among: CRITICAL, IMPORTANT, MODERATE, LOW"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "Bundle Vendor",
                        "readOnly": true
                    },
                    "releasedDate": {
                        "type": "string",
                        "description": "Bundle Release Date",
                        "readOnly": true
                    },
                    "isCumulative": {
                        "type": "boolean",
                        "description": "Is Bundle Cumulative",
                        "readOnly": true
                    },
                    "isCompliant": {
                        "type": "boolean",
                        "description": "Is compliant with the current VCF version",
                        "readOnly": true
                    },
                    "sizeMB": {
                        "type": "number",
                        "description": "Bundle Size in MB",
                        "format": "double",
                        "readOnly": true
                    },
                    "downloadStatus": {
                        "type": "string",
                        "description": "Bundle Download Status",
                        "readOnly": true,
                        "example": "One among: PENDING, SCHEDULED, IN_PROGRESS, SUCCESSFUL, FAILED, RECALLED"
                    },
                    "components": {
                        "type": "array",
                        "description": "Bundle Components",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/BundleComponent"
                        }
                    },
                    "applicabilityStatus": {
                        "type": "string",
                        "description": "Bundle Applicability Status",
                        "readOnly": true,
                        "example": "One among: SUCCESS, IN_PROGRESS, FAILED, AVAILABLE, PENDING"
                    },
                    "applicabilityOrder": {
                        "type": "integer",
                        "description": "Bundle Applicability Order",
                        "format": "int32",
                        "readOnly": true,
                        "example": 1
                    },
                    "isPartiallyUpgraded": {
                        "type": "boolean",
                        "description": "Is Bundle partially upgraded",
                        "readOnly": true,
                        "example": true
                    }
                },
                "description": "Bundle contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain.",
                "readOnly": true
            },
            "BundleComponent": {
                "required": [
                    "imageType"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Bundle Component Description",
                        "readOnly": true
                    },
                    "vendor": {
                        "type": "string",
                        "description": "Bundle Component Vendor",
                        "readOnly": true
                    },
                    "releasedDate": {
                        "type": "string",
                        "description": "Bundle Component Release Date",
                        "readOnly": true
                    },
                    "toVersion": {
                        "type": "string",
                        "description": "Bundle Component's to/target version after Upgrade",
                        "readOnly": true
                    },
                    "fromVersion": {
                        "type": "string",
                        "description": "Bundle Component's from/source version before Upgrade",
                        "readOnly": true
                    },
                    "imageType": {
                        "type": "string",
                        "description": "Bundle Component Image Type",
                        "readOnly": true,
                        "example": "One among: PATCH, INSTALL"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of Resource/Software Component",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Resource/Software Component",
                        "readOnly": true
                    }
                },
                "description": "Bundle Software Component",
                "readOnly": true
            },
            "PageOfBundle": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Bundle"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "BundleDownloadStatusInfo": {
                "required": [
                    "downloadScheduledTime",
                    "downloadStatus",
                    "isDownloadCancellable"
                ],
                "type": "object",
                "properties": {
                    "componentType": {
                        "type": "string",
                        "description": "The type of the component that the bundle represents."
                    },
                    "version": {
                        "type": "string",
                        "description": "The version (patch version) of the component."
                    },
                    "bundleId": {
                        "type": "string",
                        "description": "The bundle ID associated with a component version."
                    },
                    "downloadId": {
                        "type": "string",
                        "description": "The task ID of the download."
                    },
                    "downloadStatus": {
                        "type": "string",
                        "description": "The current status of the download."
                    },
                    "downloadedSize": {
                        "type": "integer",
                        "description": "The size of the file part that was downloaded so far.",
                        "format": "int64"
                    },
                    "downloadStartTime": {
                        "type": "integer",
                        "description": "The time when the download started.",
                        "format": "int64"
                    },
                    "downloadEndTime": {
                        "type": "integer",
                        "description": "The time when the download finished or interrupted.",
                        "format": "int64"
                    },
                    "downloadScheduledTime": {
                        "type": "integer",
                        "description": "The time when the download was scheduled to start.",
                        "format": "int64"
                    },
                    "isDownloadCancellable": {
                        "type": "boolean",
                        "description": "True if download can be cancelled."
                    },
                    "message": {
                        "type": "string",
                        "description": "In case of failed download, the error message."
                    },
                    "isDownloadable": {
                        "type": "boolean",
                        "description": "Indicates whether the bundle for this component version is downloadable currently or not."
                    }
                },
                "description": "Model for download status for the bundle of a release component.",
                "readOnly": true
            },
            "PageOfBundleDownloadStatusInfo": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/BundleDownloadStatusInfo"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            }
        }
    }
}