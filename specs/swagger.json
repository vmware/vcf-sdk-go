{
    "openapi": "3.0.1",
    "info": {
        "title": "VMware Cloud Foundation API Reference Guide",
        "description": "VMware Cloud Foundation is an integrated software stack that bundles the VMware virtualization and management components like compute virtualization (vSphere), storage virtualization (vSAN), network virtualization (NSX), and cloud management (VMware Aria Suite). VCF consists of Cloud Builder - that automates the bringup of the management infrastructure and SDDC Manager - that automates the workload domain management, lifecycle and operations. This API reference guide covers APIs of both Cloud Builder and SDDC Manager",
        "termsOfService": "http://www.vmware.com",
        "license": {
            "name": "VMware Cloud Foundation"
        },
        "version": "5.2.1"
    },
    "servers": [
        {
            "url": "http://localhost:80",
            "variables": {
                "basePath": {
                    "default": "/"
                }
            }
        }
    ],
    "tags": [
        {
            "name": "TargetUpgradeVersion",
            "description": "APIs for managing domains target upgrade versions"
        },
        {
            "name": "Suite Lifecycle",
            "description": "APIs for managing VMware Aria Suite Lifecycle"
        },
        {
            "name": "CheckSets",
            "description": "APIs to trigger check-set runs"
        },
        {
            "name": "Personalities",
            "description": "APIs for managing Personalities"
        },
        {
            "name": "BackupRestore",
            "description": "APIs for managing Backups and Restore"
        },
        {
            "name": "DepotSettings",
            "description": "APIs for managing Depot Settings"
        },
        {
            "name": "Credentials",
            "description": "APIs for managing Credentials"
        },
        {
            "name": "PSCs",
            "description": "APIs for managing PSCs"
        },
        {
            "name": "AVNs",
            "description": "APIs for managing Solutions Networking (Application Virtual Networks)"
        },
        {
            "name": "SOS",
            "description": "APIs for managing SOS"
        },
        {
            "name": "System",
            "description": "APIs for managing System"
        },
        {
            "name": "Users",
            "description": "APIs for managing Users"
        },
        {
            "name": "VersionAliasesForBundleComponentType",
            "description": "APIs for managing Version Alias Configuration"
        },
        {
            "name": "Resource Warnings",
            "description": "APIs for managing Resource Warnings"
        },
        {
            "name": "vCenters",
            "description": "APIs for managing vCenters"
        },
        {
            "name": "vSanHcl",
            "description": "APIs for managing vSAN HCL"
        },
        {
            "name": "ProxyConfiguration",
            "description": "APIs for managing Proxy Configuration"
        },
        {
            "name": "Domains",
            "description": "APIs for managing Domains"
        },
        {
            "name": "Hosts",
            "description": "APIs for managing Hosts"
        },
        {
            "name": "System Configuration",
            "description": "APIs for managing DNS & NTP configuration"
        },
        {
            "name": "Operations",
            "description": "APIs for managing VMware Aria Operations"
        },
        {
            "name": "Compliance",
            "description": "APIs for compliance service"
        },
        {
            "name": "VcfServices",
            "description": "APIs for managing VCF Services"
        },
        {
            "name": "Operation for Logs",
            "description": "APIs for managing VMware Aria Operations for Logs"
        },
        {
            "name": "NSX-T Clusters",
            "description": "APIs for managing NSX Clusters"
        },
        {
            "name": "ConfigReconciler",
            "description": "APIs for managing configs"
        },
        {
            "name": "vSANHealthCheck",
            "description": "APIs for managing vSAN health checks"
        },
        {
            "name": "Automation",
            "description": "APIs for managing VMware Aria Automation"
        },
        {
            "name": "Manifests",
            "description": "APIs for managing LCM Manifests"
        },
        {
            "name": "SddcManagers",
            "description": "APIs for managing SDDC Managers"
        },
        {
            "name": "SDDC",
            "description": "APIs for managing SDDC. The /v1/sddcs APIs are available only on the Cloud Builder appliance."
        },
        {
            "name": "Clusters",
            "description": "APIs for managing Clusters"
        },
        {
            "name": "VasaProviders",
            "description": "APIs for managing VASA Providers"
        },
        {
            "name": "CEIP",
            "description": "APIs for managing CEIP status"
        },
        {
            "name": "WSA",
            "description": "APIs for managing Workspace ONE Access for VMware Aria Suite Lifecycle"
        },
        {
            "name": "FIPS mode details",
            "description": "APIs for getting FIPS mode details"
        },
        {
            "name": "Bundles",
            "description": "APIs for managing Bundles"
        },
        {
            "name": "NsxTEdgeClusters",
            "description": "APIs for managing NSX Edge Clusters"
        },
        {
            "name": "Identity Provider Precheck",
            "description": "APIs for IDP precheck"
        },
        {
            "name": "License Keys",
            "description": "APIs for managing License Keys"
        },
        {
            "name": "Certificates",
            "description": "APIs for managing Certificates"
        },
        {
            "name": "NsxALBClusters",
            "description": "APIs for managing NSX ALB Clusters"
        },
        {
            "name": "Trusted Certificates",
            "description": "APIs for managing Trusted Certificates"
        },
        {
            "name": "Identity Providers",
            "description": "APIs for managing Identity Providers"
        },
        {
            "name": "SystemPrechecks",
            "description": "APIs for managing System Prechecks"
        },
        {
            "name": "Upgrades",
            "description": "APIs for managing Upgrades"
        },
        {
            "name": "Releases",
            "description": "APIs for managing Releases"
        },
        {
            "name": "Resource Functionalities",
            "description": "APIs for managing Resource Functionalities"
        },
        {
            "name": "Upgradables",
            "description": "APIs for managing Upgradables"
        },
        {
            "name": "Tasks",
            "description": "APIs for managing Tasks"
        },
        {
            "name": "Product Version Catalog",
            "description": "APIs for managing LCM Product Version Catalog"
        },
        {
            "name": "Tokens",
            "description": "APIs for managing Access and Refresh Token"
        },
        {
            "name": "Network Pools",
            "description": "APIs for managing Network Pools"
        }
    ],
    "paths": {
        "/v1/vrslcms/{id}": {
            "put": {
                "tags": [
                    "Suite Lifecycle"
                ],
                "summary": "Update the version of VMware Aria Suite Lifecycle based on its ID",
                "description": "Updates VMware Aria Suite Lifecycle version",
                "operationId": "updateVrslcmVersionByIdInInventory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "the ID of VMware Aria Suite Lifecycle instance",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vrslcm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vrslcm": {
            "get": {
                "tags": [
                    "Suite Lifecycle"
                ],
                "summary": "Retrieve information about VMware Aria Suite Lifecycle",
                "description": "Gets the complete information about the existing VMware Aria Suite Lifecycle instance.",
                "operationId": "getVrslcm",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Vrslcm"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Suite Lifecycle"
                ],
                "summary": "Update the version of VMware Aria Suite Lifecycle",
                "description": "Updates VMware Aria Suite Lifecycle version in VCF inventory",
                "operationId": "updateVrslcmVersionInInventory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vrslcm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Suite Lifecycle"
                ],
                "summary": "Remove VMware Aria Suite Lifecycle after an unsuccessful deployment",
                "description": "Triggers the VMware Aria Suite Lifecycle rollback operation and returns an URL in the headers to track the operation status.",
                "operationId": "rollbackVrslcm",
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vrops/domains": {
            "get": {
                "tags": [
                    "Operations"
                ],
                "summary": "Retrieve a list of VMware Aria Operations integration status for domains",
                "description": "Retrieves the existing  domains and their connection status with Aria Operations.",
                "operationId": "getVropsIntegratedDomains",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfDomainIntegration"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "put": {
                "tags": [
                    "Operations"
                ],
                "summary": "Connect or disconnect a domain with VMware Aria Operations",
                "description": "Connects/disconnects a workload domains with VMware Aria Operations",
                "operationId": "connectVropsWithDomain",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DomainIntegration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/vrli/domains": {
            "get": {
                "tags": [
                    "Operation for Logs"
                ],
                "summary": "Retrieve a list of VMware Aria Operations for Logs integration status for domains",
                "operationId": "getVrliIntegratedDomains",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfDomainIntegration"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Operation for Logs"
                ],
                "description": "Connect or disconnect a domain with VMware Aria Operations for Logs",
                "operationId": "connectVrliWithDomain",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DomainIntegration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/settings/version-aliases": {
            "get": {
                "tags": [
                    "VersionAliasesForBundleComponentType"
                ],
                "summary": "Retrieve Version Alias Configuration",
                "description": "Get the Version Alias Configuration.",
                "operationId": "getVersionAliasConfiguration",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfVersionAliasesForBundleComponentType"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "VersionAliasesForBundleComponentType"
                ],
                "summary": "Update Version Alias Configurations",
                "description": "Update Version Alias Configurations.",
                "operationId": "updateVersionAliasConfigurations",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VersionAliasesForBundleComponentTypeSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfVersionAliasesForBundleComponentType"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/settings/version-aliases/{bundleComponentType}/{version}": {
            "put": {
                "tags": [
                    "VersionAliasesForBundleComponentType"
                ],
                "summary": "Update the Version Alias Configuration by component type",
                "description": "Update Version Alias Configuration.",
                "operationId": "updateVersionAliasConfiguration",
                "parameters": [
                    {
                        "name": "bundleComponentType",
                        "in": "path",
                        "description": "Bundle Component Type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Version",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AliasSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfVersionAliasesForBundleComponentType"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "VersionAliasesForBundleComponentType"
                ],
                "summary": "Removes Version Alias Configuration by component type and version",
                "description": "Delete Version Alias Configuration by bundle component type, version, and aliases.",
                "operationId": "deleteAliasVersionsBySoftwareTypeAndBaseVersion",
                "parameters": [
                    {
                        "name": "bundleComponentType",
                        "in": "path",
                        "description": "Bundle Component Type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Version",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "List of alias versions",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No COntent"
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/settings/depot": {
            "get": {
                "tags": [
                    "DepotSettings"
                ],
                "summary": "Retrieve the depot configuration",
                "description": "Get the depot configuration. In a fresh setup, this would be empty.",
                "operationId": "getDepotSettings",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DepotSettings"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "DepotSettings"
                ],
                "summary": "Configure the depot credentials",
                "description": "Update depot settings. Depot settings can be updated with VMware Depot account",
                "operationId": "updateDepotSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DepotSettings"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DepotSettings"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DepotSettings"
                ],
                "summary": "Delete the depot configuration",
                "description": "Delete the depot configuration if such is present within VCF.",
                "operationId": "deleteDepotSettings",
                "parameters": [
                    {
                        "name": "depotType",
                        "in": "query",
                        "description": "Depot type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/ntp-configuration": {
            "get": {
                "tags": [
                    "System Configuration"
                ],
                "summary": "Retrieve the NTP configuration",
                "operationId": "getNtpConfiguration",
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NtpConfiguration"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "System Configuration"
                ],
                "summary": "Update the NTP configuration",
                "operationId": "configureNtp",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NtpConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/dns-configuration": {
            "get": {
                "tags": [
                    "System Configuration"
                ],
                "summary": "Retrieve the DNS configuration",
                "operationId": "getDnsConfiguration",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DnsConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "System Configuration"
                ],
                "summary": "Update the DNS configuration",
                "operationId": "configureDns",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DnsConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/backup-configuration": {
            "get": {
                "tags": [
                    "BackupRestore"
                ],
                "summary": "Retrieve the backup configuration for SDDC Manager and NSX Manager",
                "operationId": "getBackupConfiguration",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BackupConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BackupRestore"
                ],
                "summary": "Configure the backup configuration for SDDC Manager and NSX Manager",
                "operationId": "setBackupConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BackupConfigurationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "BackupRestore"
                ],
                "summary": "Update the backup configuration for SDDC Manager and NSX Manager",
                "operationId": "updateBackupConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BackupConfigurationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/resources/licensing-infos": {
            "put": {
                "tags": [
                    "License Keys"
                ],
                "summary": "Update a license key for a resource",
                "operationId": "setLicenseKeyForResource",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LicensingSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/personalities/files": {
            "put": {
                "tags": [
                    "Personalities"
                ],
                "summary": "Upload personality files to SDDC Manager",
                "description": "Upload personality files to SDDC Manager",
                "operationId": "uploadPersonalityFiles",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "files"
                                ],
                                "type": "object",
                                "properties": {
                                    "files": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/hosts/{id}/tags": {
            "get": {
                "tags": [
                    "Hosts"
                ],
                "description": "Get Tags assigned to Host",
                "operationId": "getTagsAssignedToHost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Host ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Hosts"
                ],
                "description": "Assign tags to a host",
                "operationId": "assignTagsToHost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Host ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Assign tags to a host request body.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagsSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagAssignmentResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Hosts"
                ],
                "description": "Remove Tags From Host",
                "operationId": "removeTagsFromHost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Host ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Remove Tags From Host request body.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagsSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagAssignmentResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/tags": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get tags assigned to a domain",
                "operationId": "getTagsAssignedToDomain",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Domains"
                ],
                "summary": "Assign tags to a domain",
                "operationId": "assignTagsToDomain",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagsSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagAssignmentResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Domains"
                ],
                "summary": "remove Tags From Domain",
                "operationId": "removeTagsFromDomain",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagsSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagAssignmentResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/resource-certificates": {
            "get": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Retrieve the certificate details for all resources in a domain",
                "description": "View detailed metadata about the certificate(s) of all the resources in a domain",
                "operationId": "getCertificatesByDomain",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID or Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3E86FBAD-8984-4D4B-992D-F0C49857572A"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfCertificate"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Replace the certificate(s) for selected resources of a domain",
                "description": "Replace resource certificates",
                "operationId": "replaceResourceCertificates",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3E86FBAD-8984-4D4B-992D-F0C49857572A"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "maxItems": 2147483647,
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ResourceCertificateSpec"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "headers": {
                            "location": {
                                "description": "API to fetch resource certificate installation status.",
                                "style": "simple",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/resource-certificates/validations": {
            "put": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Perform validation of the ResourceCertificateSpec specification",
                "description": "Validate resource certificates",
                "operationId": "validateResourceCertificates",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3E86FBAD-8984-4D4B-992D-F0C49857572A"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "maxItems": 2147483647,
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ResourceCertificateSpec"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {
                            "location": {
                                "description": "API to fetch certificate validation status",
                                "style": "simple",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CertificateValidationTask"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/csrs": {
            "get": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Request available CSR(s) in JSON format for a domain",
                "description": "Get available CSR(s) in json format",
                "operationId": "getCSRs",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID or Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3E86FBAD-8984-4D4B-992D-F0C49857572A"
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfCsr"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Request the creation of certificate signing request (CSR) files for resources of a domain",
                "description": "Generate CSR(s) for the selected resource(s) in the domain.\n\n*Warning:*\n_Avoid using wildcard certificates. Instead, use subdomain-specific certificates that are rotated often. A compromised wildcard certificate can lead to security repercussions_",
                "operationId": "generatesCSRs",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID or Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3E86FBAD-8984-4D4B-992D-F0C49857572A"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CsrsGenerationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "headers": {
                            "location": {
                                "description": "API to fetch CSRs generation status.",
                                "style": "simple",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/certificates": {
            "get": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Retrieve the latest generated certificates for a domain by its ID",
                "description": "Get latest generated certificate(s) in a domain.",
                "operationId": "getDomainCertificates",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID or Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3E86FBAD-8984-4D4B-992D-F0C49857572A"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfCertificate"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Request the creation of signed certificate for resources of a domain",
                "description": "Generate certificate(s) for the selected resource(s) in a domain. CA must be configured and CSR must be generated beforehand.",
                "operationId": "generateCertificates",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID or Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3E86FBAD-8984-4D4B-992D-F0C49857572A"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CertificatesGenerationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "headers": {
                            "location": {
                                "description": "API to fetch Certificate generation status.",
                                "style": "simple",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Replace certificate(s) for the selected resource(s) in a domain",
                "description": "Replace certificate(s) for the selected resource(s) in a domain",
                "operationId": "replaceCertificates",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID or Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3E86FBAD-8984-4D4B-992D-F0C49857572A"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CertificateOperationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "headers": {
                            "location": {
                                "description": "API to fetch certificate installation status.",
                                "style": "simple",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/certificates/uploads": {
            "put": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Import certificate(s) to the certificate store for a domain",
                "description": "Upload certificates to the certificate store",
                "operationId": "uploadCertificates",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID or Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3E86FBAD-8984-4D4B-992D-F0C49857572A"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/compatibility-matrices": {
            "get": {
                "tags": [
                    "CompatibilityMatrix"
                ],
                "summary": "Get Compatibility Matrices",
                "description": "Get Compatibility Matrices",
                "operationId": "getCompatibilityMatrices",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfCompatibilityMatrix"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "CompatibilityMatrix"
                ],
                "summary": "Update CompatibilityMatrix for a source with JSON file",
                "description": "Update CompatibilityMatrix content for a source using a JSON file",
                "operationId": "updateCompatibilityMatrix",
                "parameters": [
                    {
                        "name": "compatibilityMatrixSource",
                        "in": "query",
                        "description": "Compatibility Matrix Source (VMWARE_COMPAT, VXRAIL_COMPAT)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "compatibilityMatrixContent"
                                ],
                                "type": "object",
                                "properties": {
                                    "compatibilityMatrixContent": {
                                        "type": "string",
                                        "description": "Compatibility Matrix Content in JSON File format",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/tags": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get tags assigned to a cluster by its ID",
                "operationId": "getTagsAssignedToCluster",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Assign Tags to Cluster",
                "operationId": "assignTagsToCluster",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagsSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagAssignmentResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Remove tags from a cluster",
                "operationId": "removeTagsFromCluster",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagsSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagAssignmentResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/certificate-authorities": {
            "get": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Retrieve a list of Certificate Authorities",
                "description": "Get certificate authorities information",
                "operationId": "getCertificateAuthorities",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfCertificateAuthority"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Configure integration with a Certificate Authority",
                "description": "Creates a certificate authority. This is required to generate signed certificates by supporting CAs.",
                "operationId": "createCertificateAuthority",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CertificateAuthorityCreationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Update the configuration of a Certificate Authority",
                "description": "Update the configuration of a Certificate Authority",
                "operationId": "configureCertificateAuthority",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CertificateAuthorityCreationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vrslcms": {
            "get": {
                "tags": [
                    "Suite Lifecycle"
                ],
                "summary": "Get all existing VMware Aria Suite Lifecycle instances",
                "operationId": "getVrslcms",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfVrslcm"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Suite Lifecycle"
                ],
                "summary": "Deploy VMware Aria Suite Lifecycle",
                "description": "Triggers the VMware Aria Suite Lifecycle deployment operation and returns an URL in the headers to track the operation status.",
                "operationId": "deployVrslcm",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VrslcmDeploymentSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vrslcms/validations": {
            "post": {
                "tags": [
                    "Suite Lifecycle"
                ],
                "summary": "Perform validation of the VrslcmDeploymentSpec specification",
                "description": "Triggers VMware Aria Suite Lifecycle deployment specification validation workflow",
                "operationId": "validateVrslcm",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VrslcmDeploymentSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vasa-providers": {
            "get": {
                "tags": [
                    "VasaProviders"
                ],
                "summary": "Get the VASA Providers",
                "operationId": "getVasaProviders",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfVasaProvider"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "VasaProviders"
                ],
                "summary": "Add a VASA Provider",
                "operationId": "addVasaProvider",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VasaProvider"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VasaProvider"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vasa-providers/{id}/users": {
            "get": {
                "tags": [
                    "VasaProviders"
                ],
                "summary": "Get the users of a VASA Provider",
                "operationId": "getVasaProviderUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VASA Provider ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/VasaUser"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "VASA Provider not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "VasaProviders"
                ],
                "summary": "Add the users to a VASA Provider",
                "operationId": "addVasaProviderUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VASA Provider ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "VASA Users data",
                                "items": {
                                    "$ref": "#/components/schemas/VasaUser"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VasaProvider"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "VASA Provider not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vasa-providers/{id}/storage-containers": {
            "get": {
                "tags": [
                    "VasaProviders"
                ],
                "summary": "Get the storage containers of a VASA Provider",
                "operationId": "getVasaProviderStorageContainers",
                "parameters": [
                    {
                        "name": "protocolType",
                        "in": "query",
                        "description": "Pass an optional Storage Protocol type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VASA Provider ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/StorageContainer"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "VASA Provider not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "VasaProviders"
                ],
                "summary": "Add the storage containers to a VASA Provider",
                "operationId": "addVasaProviderStorageContainer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VASA Provider ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "Storage containers data",
                                "items": {
                                    "$ref": "#/components/schemas/StorageContainer"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VasaProvider"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "VASA Provider not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vasa-providers/validations": {
            "post": {
                "tags": [
                    "VasaProviders"
                ],
                "summary": "Validate VasaProvider input specification",
                "operationId": "validateVasaProviderSpec",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VasaProvider"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/v1/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve a list of users from SDDC Manager",
                "description": "Get a list of all users",
                "operationId": "getUsers",
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfUser"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Assign access to users in SDDC Manager",
                "description": "Add list of users",
                "operationId": "addUsers",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "User data collection",
                                "items": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfUser"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/upgrades": {
            "get": {
                "tags": [
                    "Upgrades"
                ],
                "summary": "Retrieve a list of upgrades",
                "description": "Retrieve a list of upgrades",
                "operationId": "getUpgrades",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status of the upgrades you want to retrieve",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bundleId",
                        "in": "query",
                        "description": "Bundle Id for the upgrade",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bundleType",
                        "in": "query",
                        "description": "Bundle type of the upgrades you want to retrieve",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Upgrade Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfUpgrade"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Upgrades"
                ],
                "summary": "Start an upgrade operation",
                "description": "Schedule/Trigger Upgrade of a Resource. Ex: Resource can be DOMAIN, CLUSTER, UNMANAGED_HOST etc. Performing upgrades are supported on VMware Cloud Foundation 3.5 BOM resources and above. Supports scheduling/triggering of only 'parallel' upgrades and only Resource 'cluster' that are managed using both vSphere Lifecycle Manager Baselines and vSphere Lifecycle Manager Images in the same request.",
                "operationId": "performUpgrade",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpgradeSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "403": {
                        "description": "Operation not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "424": {
                        "description": "Failed Dependency",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/upgrades/{upgradeId}/prechecks": {
            "post": {
                "tags": [
                    "Upgrades"
                ],
                "summary": "Start an upgrade precheck operation",
                "description": "Perform Upgrade Prechecks",
                "operationId": "startUpgradePrecheck",
                "parameters": [
                    {
                        "name": "upgradeId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "403": {
                        "description": "Operation not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/tokens": {
            "post": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Create Token Pair",
                "description": "Creates access token and refresh token for user access",
                "operationId": "createToken",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenCreationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenPair"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/support-bundles": {
            "get": {
                "tags": [
                    "SOS"
                ],
                "summary": "Retrieve a list of Support Bundle tasks",
                "operationId": "getSupportBundleTask",
                "responses": {
                    "500": {
                        "description": "Something went wrong. Internal server error occurred. Error {error}",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfSupportBundle"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bad request! Authorization Header is missing or not in correct format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request! Invalid Headers or Data. Error: {error}",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "SOS"
                ],
                "summary": "Start a Support Bundle operation using SoS",
                "operationId": "startSupportBundle",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SupportBundleSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Something went wrong. Internal server error occurred. Error {error}",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupportBundle"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bad request! Authorization Header is missing or not in correct format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request! Invalid Headers or Data. Error: {error}",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Operation is in progress for Id {id}. Wait for the operation to complete.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/sddc-spec-converter": {
            "post": {
                "tags": [
                    "SDDC"
                ],
                "summary": "Convert SDDC specification Json/Excel File",
                "description": "SDDC specification incorporates all the client inputs regarding VMW component parameters constituting the SDDC: NTP, DNS spec, ESXi, VC, VSAN, NSX spec et al.",
                "operationId": "startBringupSpecConversion",
                "parameters": [
                    {
                        "name": "design",
                        "in": "query",
                        "description": "Supported bringup designs - EMS, VXRAIL",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "EMS",
                            "enum": [
                                "EMS",
                                "VXRAIL"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "specFile"
                                ],
                                "type": "object",
                                "properties": {
                                    "specFile": {
                                        "type": "string",
                                        "description": "SDDC specification file which is either a JSON or xls file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SddcSpec"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Converting SDDC specification failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/prechecks": {
            "post": {
                "tags": [
                    "SystemPrechecks"
                ],
                "summary": "Start a system precheck",
                "description": "Perform precheck of resource(ex: Domain, Cluster). If only resource is specified, all resources/software components under it are included. If resource(Domain, Cluster etc) and specific resources/software components are provided, only those are included in precheck. As this API is deprecated, please use the new LCM Prechecks API - /v1/system/check-sets/queries and /v1/system/check-sets",
                "operationId": "startPrecheck",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrecheckSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/system/ntp-configuration/validations": {
            "get": {
                "tags": [
                    "System Configuration"
                ],
                "summary": "Retrieve a list of NTP configuation validations",
                "operationId": "getValidationsOfNtpConfiguration",
                "parameters": [
                    {
                        "name": "executionStatus",
                        "in": "query",
                        "description": "executionStatus",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "System Configuration"
                ],
                "summary": "Perform validation of the NtpConfiguration specification",
                "operationId": "validateNtpConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NtpConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/health-summary": {
            "get": {
                "tags": [
                    "SOS"
                ],
                "summary": "Retieve a list of Health Check tasks",
                "operationId": "getHealthCheckTask",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfHealthSummary"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Something went wrong. Internal server error occurred. Error {error}",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bad request! Authorization Header is missing or not in correct format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request! Invalid Headers or Data. Error: {error}",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "SOS"
                ],
                "summary": "Start a Health Check operation using SoS",
                "operationId": "startHealthCheck",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HealthSummarySpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Something went wrong. Internal server error occurred. Error {error}",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bad request! Authorization Header is missing or not in correct format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthSummary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request! Invalid Headers or Data. Error: {error}",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Operation is in progress for Id {id}. Wait for the operation to complete.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/dns-configuration/validations": {
            "get": {
                "tags": [
                    "System Configuration"
                ],
                "summary": "Retrieve a list of DNS configuation validations",
                "operationId": "getValidationsOfDNSConfiguration",
                "parameters": [
                    {
                        "name": "executionStatus",
                        "in": "query",
                        "description": "executionStatus",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "System Configuration"
                ],
                "summary": "Perform validation of the DnsConfiguration specification",
                "operationId": "validateDnsConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DnsConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/check-sets": {
            "get": {
                "tags": [
                    "CheckSets"
                ],
                "summary": "Get information about the last assessment run",
                "description": "Get information about the last assessment run",
                "operationId": "getLastAssessmentRunInfo",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "Id of the domain to filter tasks for, accepts multiple values as comma separated",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AssessmentTaskInfo"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "CheckSets"
                ],
                "summary": "Trigger a run of the selected checks",
                "description": "Trigger a run of the selected checks",
                "operationId": "triggerCheckRun",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckSetRunInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/check-sets/queries": {
            "post": {
                "tags": [
                    "CheckSets"
                ],
                "summary": "Query for check-sets for the given resources",
                "description": "Query for check-sets for the given resources",
                "operationId": "queryCheckSets",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckSetQueryInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckSetQueryResult"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/backup-configuration/validations": {
            "post": {
                "tags": [
                    "BackupRestore"
                ],
                "summary": "Validation API for backup configuration for SDDC Manager and NSX Manager",
                "operationId": "validateBackupConfigurationsOperations",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BackupConfigurationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs": {
            "get": {
                "tags": [
                    "SDDC"
                ],
                "summary": "Retrieve all bringup tasks",
                "operationId": "getBringupTasks",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfSddcTask"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "SDDC"
                ],
                "summary": "Deploy a management domain",
                "operationId": "startBringup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SddcSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SddcTask"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "SDDC already exists, Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/validations": {
            "get": {
                "tags": [
                    "SDDC"
                ],
                "summary": "Retrieve a list of bringup validations",
                "operationId": "getBringupValidations",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfValidation"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "SDDC"
                ],
                "summary": "Perform validation of the SddcSpec specification",
                "description": "SDDC specification incorporates all the client inputs regarding VMW component parameters constituting the SDDC: NTP, DNS spec, ESXi, VC, VSAN, NSX spec et al.",
                "operationId": "validateBringupSpec",
                "parameters": [
                    {
                        "name": "redo",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Validation name\nDeprecated: ESXI_VERSION_VALIDATION",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "JSON_SPEC_VALIDATION",
                                "SECURE_PLATFORM_AUDIT",
                                "LICENSE_KEY_VALIDATION",
                                "TIME_SYNC_VALIDATION",
                                "NETWORK_IP_POOLS_VALIDATION",
                                "NETWORK_CONFIG_VALIDATION",
                                "NETWORK_CONNECTIVITY_VALIDATION",
                                "ESXI_HOST_READINESS_VALIDATION",
                                "PASSWORDS_VALIDATION",
                                "HOST_IP_DNS_VALIDATION",
                                "CLOUDBUILDER_READY_VALIDATION",
                                "VSAN_AVAILABILITY_VALIDATION",
                                "VALIDATE_PROXY_DETAIL",
                                "NSXT_NETWORKS_VALIDATION",
                                "MANAGEMENT_NETWORKS_VALIDATION"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SddcSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddc-manager/trusted-certificates": {
            "get": {
                "tags": [
                    "Trusted Certificates"
                ],
                "summary": "Retrieve all trusted certificates from SDDC Manager",
                "description": "Retrieve all trusted certificates from SDDC Manager",
                "operationId": "getTrustedCertificates",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTrustedCertificate"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Trusted Certificates"
                ],
                "summary": "Add a trusted certificate to the SDDC Manager",
                "description": "Add a trusted certificate to the SDDC Manager",
                "operationId": "addTrustedCertificate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TrustedCertificateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTrustedCertificate"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Trusted certificate already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/restores/tasks": {
            "post": {
                "tags": [
                    "BackupRestore"
                ],
                "summary": "Start a restore operation",
                "operationId": "startRestore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestoreSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/resources/license-checks": {
            "post": {
                "tags": [
                    "License Keys"
                ],
                "summary": "Start a license check for a resource",
                "operationId": "startLicenseCheckByResource",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResourcesLicenseCheckSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourcesLicenseCheckResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/resource-warnings": {
            "get": {
                "tags": [
                    "Resource Warnings"
                ],
                "summary": "Get Resource Warnings",
                "operationId": "getResourceWarnings",
                "parameters": [
                    {
                        "name": "resourceType",
                        "in": "query",
                        "description": "Resource type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resourceIds",
                        "in": "query",
                        "description": "Resource IDs",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "resourceNames",
                        "in": "query",
                        "description": "Resource Names",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfResourceWarning"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Resource Warnings"
                ],
                "summary": "Create a new Resource Warning",
                "operationId": "createResourceWarning",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResourceWarningCreationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceWarning"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/releases/domains/{domainId}/validations": {
            "post": {
                "tags": [
                    "TargetUpgradeVersion"
                ],
                "summary": "Validate the target selected upgrade version for the domain",
                "description": "Validate the target selected upgrade release BOM or custom BOM for a domain by its ID",
                "operationId": "validateReleaseByDomainID",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID of the domain under validation",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "9ab78840-ee25-11e8-a8fc-d71c338107bd"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DomainRelease"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "ACCEPTED",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/product-version-catalog": {
            "get": {
                "tags": [
                    "Product Version Catalog"
                ],
                "summary": "Get product version catalog",
                "description": "Get product version catalog. There should be only one valid product version catalog in the System.",
                "operationId": "getProductVersionCatalog",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductVersionCatalog"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product Version catalog Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Product Version Catalog"
                ],
                "summary": "Upload product version catalog",
                "description": "Upload product version catalog. Make sure product version is a valid one.",
                "operationId": "uploadProductVersionCatalog",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductVersionCatalog"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/personalities": {
            "get": {
                "tags": [
                    "Personalities"
                ],
                "summary": "Get the Personalities",
                "description": "Get the Personalities which are available via depot access.",
                "operationId": "getPersonalities",
                "parameters": [
                    {
                        "name": "baseOSVersion",
                        "in": "query",
                        "description": "The base OS version",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "7.0.0-0.0.30340198"
                    },
                    {
                        "name": "addOnName",
                        "in": "query",
                        "description": "The add on name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addOnVendorName",
                        "in": "query",
                        "description": "The add on vendor name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "componentName",
                        "in": "query",
                        "description": "The component name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "componentVendorName",
                        "in": "query",
                        "description": "The component vendor name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "personalityName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfPersonality"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Personalities"
                ],
                "summary": "Upload a Personality",
                "description": "Upload Personality to SDDC Manager.",
                "operationId": "uploadPersonality",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonalityUploadSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Personalities"
                ],
                "summary": "Delete the personality based on either name or id",
                "description": "Delete the personality based on either name or id",
                "operationId": "deletePersonality",
                "parameters": [
                    {
                        "name": "personalityId",
                        "in": "query",
                        "description": "The personality id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "personalityName",
                        "in": "query",
                        "description": "The personality name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "404": {
                        "description": "Personality by name or id not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsxt-clusters/queries": {
            "post": {
                "tags": [
                    "NSX-T Clusters"
                ],
                "summary": "Start a query with NSX Criteria",
                "operationId": "startNsxCriteriaQuery",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NsxTCriterion"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NsxTQueryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsxt-clusters/oidcs": {
            "post": {
                "tags": [
                    "NSX-T Clusters"
                ],
                "operationId": "connectOpenId",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NsxtOidcSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/v1/nsxt-clusters/ip-address-pools/validations": {
            "post": {
                "tags": [
                    "NSX-T Clusters"
                ],
                "operationId": "validateIpPool",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NsxtIpAddressPoolValidationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsx-alb-clusters": {
            "get": {
                "tags": [
                    "NsxALBClusters"
                ],
                "summary": "Retrieve a list of NSX ALB Clusters",
                "operationId": "getALBClusters",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "Domain Id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfNsxALBCluster"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "NsxALBClusters"
                ],
                "summary": "Create NSX ALB cluster",
                "operationId": "createALBCluster",
                "parameters": [
                    {
                        "name": "skipCompatibilityCheck",
                        "in": "query",
                        "description": "Pass an optional Skip compatibility checks",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NsxAlbControllerClusterSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsx-alb-clusters/validations": {
            "post": {
                "tags": [
                    "NsxALBClusters"
                ],
                "summary": "Perform validiation of the NsxAlbControllerClusterSpec specification",
                "operationId": "validateALBClusterCreationSpec",
                "parameters": [
                    {
                        "name": "skipCompatibilityCheck",
                        "in": "query",
                        "description": "Pass an optional Skip compatibility checks",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NsxAlbControllerClusterSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsx-alb-clusters/validations/version": {
            "post": {
                "tags": [
                    "NsxALBClusters"
                ],
                "summary": "Validate NSX ALB compatibility version",
                "operationId": "validateNsxALBCompatibility",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NsxAlbVersionValidationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/network-pools": {
            "get": {
                "tags": [
                    "Network Pools"
                ],
                "summary": "Get the list of all Network Pools",
                "description": "Get the Network Pools",
                "operationId": "getNetworkPool",
                "responses": {
                    "200": {
                        "description": "Referenced network pool",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfNetworkPool"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Referenced network pool not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Network Pools"
                ],
                "summary": "Create a Network Pool",
                "description": "Create a Network Pool",
                "operationId": "createNetworkPool",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NetworkPool"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The newly created network pool",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NetworkPool"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Errors due to network pool validations failures",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/network-pools/{id}/networks/{networkId}/ip-pools": {
            "post": {
                "tags": [
                    "Network Pools"
                ],
                "summary": "Add an IP Pool to a Network of a Network Pool",
                "description": "Add an IP Pool to a Network of a Network Pool",
                "operationId": "addIpPoolToNetworkOfNetworkPool",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the networkpoolk",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "networkId",
                        "in": "path",
                        "description": "Id of the network",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IpPool"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Add the IP Pool associated with a Network of a Network Pool",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Network"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Either Network Pool ID or Network ID not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "IP range validation failed error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Network Pools"
                ],
                "summary": "Delete an IP Pool from a Network of a Network Pool",
                "description": "Delete an IP Pool from a Network of a Network Pool",
                "operationId": "deleteIpPoolFromNetworkOfNetworkPool",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the networkpool",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "networkId",
                        "in": "path",
                        "description": "ID of the network",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IpPool"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "404": {
                        "description": "Either network or Network pool not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Errors due to network/networkpool validations failures",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/v1/manifests": {
            "get": {
                "tags": [
                    "Manifests"
                ],
                "summary": "Get manifest",
                "description": "Get manifest. There should be only one valid manifest in the System.",
                "operationId": "getManifest",
                "responses": {
                    "404": {
                        "description": "Manifest Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Manifest"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Manifests"
                ],
                "summary": "Save/Load manifest",
                "description": "Save/Load manifest. Make sure manifest is a valid one. If manifest already exists, it gets overridden.",
                "operationId": "saveManifest",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Manifest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/license-keys": {
            "get": {
                "tags": [
                    "License Keys"
                ],
                "summary": "Retrieve a list of license keys",
                "operationId": "getLicenseKeys",
                "parameters": [
                    {
                        "name": "productType",
                        "in": "query",
                        "description": "Type of a Product",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "example": "NSXV,VCENTER"
                    },
                    {
                        "name": "licenseKeyStatus",
                        "in": "query",
                        "description": "Status of a License Key",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "example": "EXPIRED,ACTIVE"
                    },
                    {
                        "name": "licenseUnit",
                        "in": "query",
                        "description": "Unit of a license",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "example": "CPUPACKAGE, CORE"
                    },
                    {
                        "name": "productVersion",
                        "in": "query",
                        "description": "Product Version, gets the license keys matching the major version of the product version",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "6,7.0.3,8.0"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfLicenseKey"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "License Keys"
                ],
                "summary": "Add a a new license key",
                "operationId": "addLicenseKey",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LicenseKey"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/v1/identity-providers": {
            "get": {
                "tags": [
                    "Identity Providers"
                ],
                "summary": "Get all identity providers",
                "description": "Get a list of all identity providers",
                "operationId": "getIdentityProviders",
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfIdentityProvider"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Identity Providers"
                ],
                "summary": "Add a new external identity provider",
                "description": "Add a new external identity provider",
                "operationId": "addExternalIdentityProvider",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IdentityProviderSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/identity-providers/{id}/sync-client": {
            "post": {
                "tags": [
                    "Identity Providers"
                ],
                "summary": "Generate new sync client token",
                "description": "Generates a new sync client token",
                "operationId": "generateSyncClientToken",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Identity Provider",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "syncClientTokenTTL",
                        "in": "query",
                        "description": "TTL of the sync client token",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "IDP is not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/identity-providers/{id}/identity-sources": {
            "post": {
                "tags": [
                    "Identity Providers"
                ],
                "summary": "Add a new identity source to the embedded identity provider",
                "description": "Add an identity source to an embedded IDP by id, if it exists",
                "operationId": "addEmbeddedIdentitySource",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Identity Provider",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IdentitySourceSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Identity Provider not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/hosts": {
            "get": {
                "tags": [
                    "Hosts"
                ],
                "summary": "Get all hosts",
                "operationId": "getHosts",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status of the Host.One among: ASSIGNED, UNASSIGNED_USEABLE, UNASSIGNED_UNUSEABLE",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "ID of the Domain",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "query",
                        "description": "ID of the Cluster",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "networkpoolId",
                        "in": "query",
                        "description": "ID of the Network pool",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "storageType",
                        "in": "query",
                        "description": "Type of the Storage.VMFS_FC",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "datastoreName",
                        "in": "query",
                        "description": "Name of the datastore",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfHost"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Hosts"
                ],
                "summary": "Commission the Hosts",
                "operationId": "commissionHosts",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/HostCommissionSpec"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Hosts"
                ],
                "summary": "Decommission the Hosts",
                "operationId": "decommissionHosts",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/HostDecommissionSpec"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/hosts/validations": {
            "post": {
                "tags": [
                    "Hosts"
                ],
                "summary": "Perform validation of the  HostCommissionSpec specification",
                "operationId": "validateHostCommissionSpec",
                "requestBody": {
                    "description": "Perform validation of the  HostCommissionSpec specification request body.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/HostCommissionSpec"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/hosts/validations/commissions": {
            "post": {
                "tags": [
                    "Hosts"
                ],
                "summary": "Validate the input specification to commission the Hosts",
                "operationId": "validateCommissionHosts",
                "requestBody": {
                    "description": "Validate the input specification to commission the Hosts request body.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/HostCommissionSpec"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "deprecated": true
            }
        },
        "/v1/hosts/queries": {
            "post": {
                "tags": [
                    "Hosts"
                ],
                "description": "Post a query",
                "operationId": "postQuery",
                "requestBody": {
                    "description": "Post a query request body.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HostCriterion"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HostQueryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/hosts/prechecks": {
            "post": {
                "tags": [
                    "Hosts"
                ],
                "description": "Post host(s) prechecks",
                "operationId": "postHostsPrechecks_1",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "specFile": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HostsPrechecksRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HostsPrechecksResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/edge-clusters": {
            "get": {
                "tags": [
                    "NsxTEdgeClusters"
                ],
                "summary": "Retrieve a list of NSX Edge Clusters",
                "operationId": "getEdgeClusters",
                "parameters": [
                    {
                        "name": "clusterId",
                        "in": "query",
                        "description": "Pass an optional vSphere Cluster ID to fetch edge clusters associated with the vSphere Cluster",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfEdgeCluster"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "NsxTEdgeClusters"
                ],
                "summary": "Create an NSX Edge Cluster",
                "operationId": "createEdgeCluster",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EdgeClusterCreationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/edge-clusters/{id}/validations": {
            "post": {
                "tags": [
                    "NsxTEdgeClusters"
                ],
                "summary": "Perform validation of the EdgeClusterUpdateSpec specification",
                "operationId": "validateEdgeClusterUpdateSpec",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "NSX Edge cluster id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EdgeClusterUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/edge-clusters/validations": {
            "post": {
                "tags": [
                    "NsxTEdgeClusters"
                ],
                "summary": "Perform validiation of the EdgeClusterCreationSpec specification",
                "operationId": "validateEdgeClusterCreationSpec",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EdgeClusterCreationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Retrieve a list of domains",
                "operationId": "getDomains",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of the domain",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "MANAGEMENT,VI,VDI"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfDomain"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Domains"
                ],
                "summary": "Create a domain",
                "operationId": "createDomain",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DomainCreationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/validations": {
            "post": {
                "tags": [
                    "Domains"
                ],
                "summary": "Perform validation of the DomainUpdateSpec specification",
                "operationId": "validateDomainUpdateSpec",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DomainUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/compliance-audits": {
            "get": {
                "tags": [
                    "Compliance"
                ],
                "summary": "Get compliance audit history for a domain",
                "description": "Get compliance audit history for a domain",
                "operationId": "getComplianceAuditHistoryForADomain",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfComplianceAudit"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Compliance"
                ],
                "summary": "Compliance audit of resource",
                "description": "Compliance audit of resource",
                "operationId": "complianceAudit",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the domain",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ComplianceAuditSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ComplianceTask"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/isolation-prechecks": {
            "post": {
                "tags": [
                    "Domains"
                ],
                "summary": "Perform Domain Isolation Prechecks",
                "operationId": "performDomainIsolationPrecheck",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IsolationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/datastores/queries": {
            "post": {
                "tags": [
                    "Domains"
                ],
                "summary": "Post a datastore query",
                "operationId": "postDatastoreQuery",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatastoreCriterion"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatastoreQueryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/clusters/{clusterName}/queries": {
            "post": {
                "tags": [
                    "Domains"
                ],
                "summary": "Post a cluster query",
                "operationId": "postClusterQuery",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterName",
                        "in": "path",
                        "description": "Cluster Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterCriterion"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClusterQueryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/clusters/queries": {
            "post": {
                "tags": [
                    "Domains"
                ],
                "summary": "Post clusters query",
                "operationId": "postClustersQuery",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterCriterion"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClusterQueryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/validations": {
            "post": {
                "tags": [
                    "Domains"
                ],
                "summary": "Perform validation of the DomainCreationSpec specification",
                "operationId": "validateDomainCreationSpec",
                "parameters": [
                    {
                        "name": "hostsOnly",
                        "in": "query",
                        "description": "Validate hosts only",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "skipHostSwitchValidation",
                        "in": "query",
                        "description": "Skips host switch validation when hostOnly=true",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DomainCreationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/credentials/expirations": {
            "post": {
                "tags": [
                    "Credentials"
                ],
                "summary": "Fetch expiration details of passwords for a list of credentials",
                "description": "Fetch expiration details of passwords for a list of credentials",
                "operationId": "getPasswordExpiration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialsExpirationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialsExpiration"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/config-drift-reconciliations": {
            "post": {
                "tags": [
                    "ConfigReconciler"
                ],
                "summary": "Reconcile configs",
                "description": "For selective reconciliation, provide a config spec.",
                "operationId": "reconcileConfigs",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigDriftApplySpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Retrieve a list of clusters",
                "operationId": "getClusters",
                "parameters": [
                    {
                        "name": "isStretched",
                        "in": "query",
                        "description": "Is cluster vSAN stretched",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isImageBased",
                        "in": "query",
                        "description": "Is cluster managed using vSphere lifecycle Manager Images",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "ID of the Domain",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfCluster"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Create a cluster and add to an existing domain",
                "operationId": "createCluster",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterCreationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/validations": {
            "post": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Perform validation of the ClusterUpdateSpec specification",
                "operationId": "validateClusterUpdateSpec",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "useAsyncValidation",
                        "in": "query",
                        "description": "Cluster validations to be run async",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/network/queries": {
            "post": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get cluster network configuration",
                "operationId": "getClusterNetworkConfiguration",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterNetworkConfigurationCriterion"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClusterNetworkConfigurationQueryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/hosts/queries": {
            "post": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Post a host query",
                "operationId": "postHostQuery",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HostCriterion"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HostQueryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/datastores": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get the list of all datastores associated with the cluster.",
                "operationId": "getClusterDatastores",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Datastore"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Cluster Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Mount a datastore to a cluster",
                "operationId": "addDatastoreToCluster",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatastoreMountSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/datastores/queries": {
            "post": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Post a datastore query",
                "operationId": "postDatastoreQuery_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatastoreCriterion"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatastoreQueryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterId}/vdses": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get the list of VDSes of a cluster.",
                "operationId": "getVdses",
                "parameters": [
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Vds"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Cluster Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Import Vds to inventory for the given cluster",
                "operationId": "importVdsToInventory",
                "parameters": [
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImportVdsSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterId}/datastores/validations": {
            "post": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Perform validation of the DatastoreMountSpec specification",
                "operationId": "validateVsanRemoteDatastoreMountSpec",
                "parameters": [
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatastoreMountSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterId}/datastores/validation": {
            "post": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Perform validation of the DatastoreMountSpec specification",
                "operationId": "validateVsanRemoteDatastoreSpec",
                "parameters": [
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatastoreMountSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/clusters/validations": {
            "post": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Perform validation of the ClusterCreationSpec specification",
                "operationId": "validateClusterCreationSpec",
                "parameters": [
                    {
                        "name": "hostsOnly",
                        "in": "query",
                        "description": "Validate hosts only",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "skipHostSwitchValidation",
                        "in": "query",
                        "description": "Skips host switch validation when hostOnly=true",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterCreationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/bundles": {
            "get": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Retrieve a list of bundles",
                "description": "Get all Bundles i.e uploaded bundles and also bundles available via depot access.",
                "operationId": "getBundles",
                "parameters": [
                    {
                        "name": "productType",
                        "in": "query",
                        "description": "The type of the product",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "VRA,VROPS,VRLI"
                    },
                    {
                        "name": "isCompliant",
                        "in": "query",
                        "description": "Is compliant with the current VCF version",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "bundleType",
                        "in": "query",
                        "description": "The type of the bundle",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfBundle"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Upload a bundle to SDDC Manager",
                "description": "Upload Bundle to SDDC Manager. Used when you do not have internet connectivity for downloading bundles from VMWare/VxRail to SDDC Manager. The Bundles are manually downloaded from Depot using Bundle Transfer utility",
                "operationId": "uploadBundle",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BundleUploadSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/backups/tasks": {
            "post": {
                "tags": [
                    "BackupRestore"
                ],
                "summary": "Start a backup operation",
                "operationId": "startBackup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BackupSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BackupTask"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/avns": {
            "get": {
                "tags": [
                    "AVNs"
                ],
                "summary": "Retrieve Application Virtual Network (AVN) details",
                "description": "Returns all matching AVNs",
                "operationId": "getAvns",
                "parameters": [
                    {
                        "name": "regionType",
                        "in": "query",
                        "description": "Pass an optional AVN region type matching either Region-A or X-Region",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the list of all matching AVNs",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Avn"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AVNs"
                ],
                "summary": "Create Application Virtual Networks (AVN)",
                "operationId": "createAvns",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AvnsCreationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/avns/validations": {
            "post": {
                "tags": [
                    "AVNs"
                ],
                "summary": "Perform validation of the AvnsCreationSpec specification",
                "description": "Returns Validation report",
                "operationId": "validateAvnSpec",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AvnsCreationSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Validation of AVN Creation spec completed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vsan-hcl": {
            "patch": {
                "tags": [
                    "vSanHcl"
                ],
                "summary": "Download vSAN HCL",
                "description": "Download vSAN HCL if online connectivity is available. Timestamp of vSAN HCL on SDDC Manager is checked with what is available online before download. vSAN HCL is downloaded only if new data is available.",
                "operationId": "downloadVsanHcl",
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vsan-hcl/configuration": {
            "get": {
                "tags": [
                    "vSanHcl"
                ],
                "summary": "Get vSAN HCL configuration",
                "operationId": "getVsanHclConfiguration",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VsanHclConfiguration"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "vSAN HCL configuration not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "vSanHcl"
                ],
                "summary": "Update vSAN HCL configuration",
                "operationId": "updateVsanHclConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VsanHclConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VsanHclConfiguration"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "vSAN HCL configuration not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VsanHclConfiguration"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vasa-providers/{id}": {
            "get": {
                "tags": [
                    "VasaProviders"
                ],
                "summary": "Get a VASA Provider",
                "operationId": "getVasaProvider",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VASA Provider ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "VASA Provider not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VasaProvider"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "VasaProviders"
                ],
                "summary": "Delete a VASA Provider",
                "operationId": "removeVasaProvider",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VASA Provider ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "VASA Provider not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "VasaProviders"
                ],
                "summary": "Update a VASA Provider",
                "operationId": "updateVasaProvider",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VASA Provider ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VasaProviderUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "VASA Provider not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VasaProvider"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vasa-providers/{id}/users/{userId}": {
            "patch": {
                "tags": [
                    "VasaProviders"
                ],
                "summary": "Update the user of a VASA Provider",
                "operationId": "updateVasaProviderUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VASA Provider ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VasaUserUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VasaProvider"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vasa-providers/{id}/storage-containers/{storageContainerId}": {
            "delete": {
                "tags": [
                    "VasaProviders"
                ],
                "summary": "Delete a storage container of a VASA Provider",
                "operationId": "removeVasaProviderStorageContainer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VASA Provider ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "storageContainerId",
                        "in": "path",
                        "description": "Storage container ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Storage container not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "VasaProviders"
                ],
                "summary": "Update the storage container of a VASA Provider",
                "operationId": "updateVasaProviderStorageContainer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VASA Provider ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "storageContainerId",
                        "in": "path",
                        "description": "Storage container ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StorageContainerUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "404": {
                        "description": "Storage container not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VasaProvider"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/local/admin": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get local account details",
                "description": "Get information on the local account",
                "operationId": "getLocalAccount",
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LocalUser"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Disable local account",
                "description": "Disable local account",
                "operationId": "disableLocalAccount",
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update password for local account",
                "description": "Update the password for local account only if the old password is correct, or if user configures the local account for the first time",
                "operationId": "updateLocalUserPassword",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LocalAccountPasswordInfo"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/upgrades/{upgradeId}": {
            "get": {
                "tags": [
                    "Upgrades"
                ],
                "summary": "Retrieve an upgrade by ID",
                "description": "Retrieve an upgrade by ID",
                "operationId": "getUpgradeById",
                "parameters": [
                    {
                        "name": "upgradeId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Upgrade Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Upgrade"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Upgrades"
                ],
                "summary": "Change a DRAFT upgrade to a SCHEDULED state",
                "description": "Commit/Reschedule an existing upgrade. It moves the upgrade from DRAFT state to SCHEDULED state and/or changes the upgrade scheduled date/time.",
                "operationId": "updateUpgradeSchedule",
                "parameters": [
                    {
                        "name": "upgradeId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpgradeCommitSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "404": {
                        "description": "Upgrade Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Upgrade"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/tokens/access-token/refresh": {
            "patch": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Refresh Access Token",
                "description": "Refresh the access token associated with the given refresh token",
                "operationId": "refreshAccessToken",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "description": "ID of the refresh token"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/tasks/{id}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Retrieve a task by its ID",
                "description": "Get a Task by ID, if it exists",
                "operationId": "getTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task id to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "A task object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Cancel a Task",
                "description": "Cancel a Task by ID, if it exists",
                "operationId": "cancelTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task id for cancelling",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Task can not be cancelled. Only a IN_PROGRESS task can be cancelled.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Task was cancelled successfully."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Retry a Task",
                "description": "Retry a failed Task by ID, if it exists",
                "operationId": "retryTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task id retry",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Task can not be retried. Only a failed Task can be retried.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Task was retried successfully."
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system": {
            "get": {
                "tags": [
                    "System"
                ],
                "summary": "Retrieve the system configuration",
                "description": "Retrieve the system configuration",
                "operationId": "getSystemConfiguration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/System"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "System"
                ],
                "summary": "Updates paramters of the system configuration",
                "description": "Updates paramters of the system configuration",
                "operationId": "updateSystemConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SystemUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/proxy-configuration": {
            "get": {
                "tags": [
                    "ProxyConfiguration"
                ],
                "summary": "Get the current Proxy configuration",
                "description": "Get the current Proxy configuration",
                "operationId": "getProxyConfiguration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProxyConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "patch": {
                "tags": [
                    "ProxyConfiguration"
                ],
                "summary": "Update Proxy configuration",
                "description": "Update Proxy configuration",
                "operationId": "updateProxyConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProxyConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/check-sets/{runId}": {
            "get": {
                "tags": [
                    "CheckSets"
                ],
                "summary": "Get the result for a given check run",
                "description": "Get the result for a given check run",
                "operationId": "getResult",
                "parameters": [
                    {
                        "name": "runId",
                        "in": "path",
                        "description": "UUID of the task",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssessmentOutput"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invalid task for this UUID",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "CheckSets"
                ],
                "summary": "Trigger partial retry of a completed check run",
                "description": "Trigger partial retry of a completed check run",
                "operationId": "triggerPartialRetryOfCheckRun",
                "parameters": [
                    {
                        "name": "runId",
                        "in": "path",
                        "description": "UUID of the assessment to retry",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssessmentPartialRetryInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/ceip": {
            "get": {
                "tags": [
                    "CEIP"
                ],
                "summary": "Retrieve the CEIP status",
                "description": "Get CEIP status and instance id",
                "operationId": "getCeipStatus",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Ceip"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "CEIP"
                ],
                "summary": "Configure CEIP to Opt-In or Opt-Out",
                "description": "Opt-in or Opt-out of CEIP",
                "operationId": "setCeipStatus",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "description": "Required action for CEIP.",
                                "enum": [
                                    "ENABLED",
                                    "DISABLED",
                                    "DISABLING",
                                    "ENABLING",
                                    "ENABLING_FAILED",
                                    "DISABLING_FAILED"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "409": {
                        "description": "The request could not be completed due to a conflict with the current state",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/{id}": {
            "get": {
                "tags": [
                    "SDDC"
                ],
                "summary": "Get a bringup task by its id",
                "operationId": "getBringupTaskByID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "SDDC ID",
                        "required": true,
                        "schema": {
                            "maximum": 36,
                            "minimum": 36,
                            "type": "string"
                        },
                        "example": "123e4567-e89b-42d3-a456-556642440000"
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SddcTask"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "SDDC"
                ],
                "summary": "Retry failed SDDC creation",
                "operationId": "retrySddc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "SDDC ID",
                        "required": true,
                        "schema": {
                            "maximum": 36,
                            "minimum": 36,
                            "type": "string"
                        },
                        "example": "123e4567-e89b-42d3-a456-556642440000"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SddcSpec"
                            }
                        }
                    }
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SddcTask"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/validations/{id}": {
            "get": {
                "tags": [
                    "SDDC"
                ],
                "summary": "Retrieve the results of a bringup validation by its ID",
                "operationId": "getBringupValidation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "SDDC validation ID",
                        "required": true,
                        "schema": {
                            "maximum": 36,
                            "minimum": 36,
                            "type": "string"
                        },
                        "example": "123e4567-e89b-42d3-a456-556642440000"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "patch": {
                "tags": [
                    "SDDC"
                ],
                "summary": "Retry bringup validation",
                "description": "Retry a completed SDDC validation",
                "operationId": "retryBringupValidation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "SDDC validation ID",
                        "required": true,
                        "schema": {
                            "maximum": 36,
                            "minimum": 36,
                            "type": "string"
                        },
                        "example": "123e4567-e89b-42d3-a456-556642440000"
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Completed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/resource-functionalities": {
            "get": {
                "tags": [
                    "Resource Functionalities"
                ],
                "summary": "Get Resource Functionalities",
                "operationId": "getResourceFunctionalities",
                "parameters": [
                    {
                        "name": "resourceType",
                        "in": "query",
                        "description": "Resource type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "functionalityType",
                        "in": "query",
                        "description": "Functionality type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resourceIds",
                        "in": "query",
                        "description": "Resource IDs",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "isAllowed",
                        "in": "query",
                        "description": "Allowed or disallowed resource functionalities",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "parentResourceType",
                        "in": "query",
                        "description": "Parent resource type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfResourceFunctionalities"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Resource Functionalities"
                ],
                "summary": "Update Resources Functionalities",
                "operationId": "updateResourcesFunctionalities",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResourceFunctionalitiesUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceFunctionalitiesCaller"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/resource-functionalities/global": {
            "get": {
                "tags": [
                    "Resource Functionalities"
                ],
                "summary": "Get Resource Functionalities Allowed Global Configuration",
                "operationId": "getResourcesFunctionalitiesAllowedGlobal",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceFunctionalitiesGlobalConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Resource Functionalities"
                ],
                "summary": "Update Resources Functionalities Is Allowed Global Configuration",
                "operationId": "updateResourcesFunctionalities_1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResourceFunctionalitiesGlobalUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceFunctionalitiesGlobalConfigurationCaller"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/releases/domains/{domainId}": {
            "get": {
                "tags": [
                    "TargetUpgradeVersion"
                ],
                "summary": "Retrieve a release view for a domain by its ID",
                "description": "Get last selected upgrade version for the domain.",
                "operationId": "getReleaseByDomain",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID to get target version of the domain",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "9ab78840-ee25-11e8-a8fc-d71c338107bd"
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Domain not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DomainReleaseView"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "TargetUpgradeVersion"
                ],
                "summary": "Delete the target release by its domain ID",
                "description": "Delete last selected upgrade version for the domain",
                "operationId": "deleteReleaseByDomainID",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "9ab78840-ee25-11e8-a8fc-d71c338107bd"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "TargetUpgradeVersion"
                ],
                "summary": "Modify the target upgrade release for a domain by its ID",
                "description": "Update last selected upgrade version for the domain",
                "operationId": "updateReleaseByDomainID",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "9ab78840-ee25-11e8-a8fc-d71c338107bd"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DomainRelease"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "404": {
                        "description": "Domain or VCF target release not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/personalities/{personalityId}": {
            "get": {
                "tags": [
                    "Personalities"
                ],
                "summary": "Get a Personality by its id",
                "description": "Get the Personality for id",
                "operationId": "getPersonality",
                "parameters": [
                    {
                        "name": "personalityId",
                        "in": "path",
                        "description": "Personality ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Personality"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Personality Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Personalities"
                ],
                "summary": "Rename personality based on ID",
                "description": "Rename personality with the ID passed in the URL",
                "operationId": "renamePersonalityById",
                "parameters": [
                    {
                        "name": "personalityId",
                        "in": "path",
                        "description": "The personality id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Personality"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Personality"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Personality Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/network-pools/{id}": {
            "get": {
                "tags": [
                    "Network Pools"
                ],
                "summary": "Get a Network Pool",
                "description": "Get a Network Pool by ID, if it exists",
                "operationId": "getNetworkPoolByID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the network pool to fetch",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Referenced network pool not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Referenced network pool",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NetworkPool"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Network Pools"
                ],
                "summary": "Delete a Network Pool",
                "description": "Delete the Network Pool by the ID, if it exists and is unused",
                "operationId": "deleteNetworkPool",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the network pool",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "force",
                        "in": "query",
                        "description": "Force removal of Network Pool",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Referenced network pool not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The specification of the deleted network pool"
                    },
                    "400": {
                        "description": "Hosts are still associated with NetworkPool",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Network Pools"
                ],
                "summary": "Update Network Pool",
                "description": "Update a Network Pool by ID, if it exists",
                "operationId": "updateNetworkPool",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Network Pool ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NetworkPoolUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Network Pool update completed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NetworkPool"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Network Pool not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/license-keys/{licenseKeyOrId}": {
            "patch": {
                "tags": [
                    "License Keys"
                ],
                "summary": "Update the license key",
                "operationId": "updateLicenseKey",
                "parameters": [
                    {
                        "name": "licenseKeyOrId",
                        "in": "path",
                        "description": "license key or ID of the LicenseKey",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LicenseKeyUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "404": {
                        "description": "License key with ID / LicenseKey  does not exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/identity-providers/{id}": {
            "get": {
                "tags": [
                    "Identity Providers"
                ],
                "summary": "Get an identity provider by its id",
                "description": "Get a specific identity irovider using its id",
                "operationId": "getIdentityProviderById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Identity Provider",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IdentityProvider"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Identity Providers"
                ],
                "summary": "Remove an identity provider",
                "description": "Delete an Identity Provider by its identifier, if it exists",
                "operationId": "deleteExternalIdentityProvider",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Identity Provider",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "404": {
                        "description": "Identity Provider not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Identity Providers"
                ],
                "summary": "Update an identity provider",
                "description": "Update the identity provider by its identifier, if it exists",
                "operationId": "updateExternalIdentityProvider",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Identity Provider",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IdentityProviderSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Identity Provider not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/identity-providers/{id}/identity-sources/{domainName}": {
            "delete": {
                "tags": [
                    "Identity Providers"
                ],
                "summary": "Delete an Identity Source",
                "description": "Delete an Identity Source by domain name, if it exists",
                "operationId": "deleteIdentitySource",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Identity Provider",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "domainName",
                        "in": "path",
                        "description": "Domain Name associated with the identity source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Identity Source not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Identity Providers"
                ],
                "summary": "Update an identity source",
                "description": "Update the identity source associated with the embedded IDP by name, if it exists",
                "operationId": "updateEmbeddedIdentitySource",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Identity Provider",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "domainName",
                        "in": "path",
                        "description": "Domain Name associated with the identity source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IdentitySourceSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Identity Source not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/edge-clusters/{id}": {
            "get": {
                "tags": [
                    "NsxTEdgeClusters"
                ],
                "summary": "Retrieve an NSX Edge Cluster by its ID",
                "operationId": "getEdgeCluster",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Edge Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Edge Cluster not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeCluster"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "NsxTEdgeClusters"
                ],
                "summary": "Expand or shrink an NSX Edge Cluster",
                "operationId": "updateEdgeCluster",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Edge Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EdgeClusterUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "501": {
                        "description": "Not Implemented",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get a domain by its ID",
                "operationId": "getDomain",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Domain"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Domain not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Domains"
                ],
                "summary": "Remove a domain if it has been previously initialized for deletion",
                "operationId": "deleteDomain",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Domains"
                ],
                "summary": "Update a Domain",
                "operationId": "updateDomain",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DomainUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/compliance-audits/tasks/{taskId}": {
            "get": {
                "tags": [
                    "Compliance"
                ],
                "summary": "Get compliance audit task",
                "description": "Get compliance audit task",
                "operationId": "getComplianceAuditTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "description": "Audit task ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ComplianceTask"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Compliance"
                ],
                "summary": "Retry compliance audit task",
                "description": "Retry compliance audit task",
                "operationId": "retryComplianceAuditTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "description": "Audit task ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ComplianceTask"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/health-checks": {
            "get": {
                "tags": [
                    "vSANHealthCheck"
                ],
                "summary": "Retrieve vSAN Health Check status for a domain by its ID",
                "description": "Get vSAN health check status for all cluster on the domain",
                "operationId": "getVsanHealthCheckByDomain",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status of health check to filter by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckQueryResult"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "vSANHealthCheck"
                ],
                "summary": "Update the vSAN Health Check status for a domain",
                "description": "Update vSAN health check status for domain",
                "operationId": "updateVsanHealthCheckByDomain",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "Health check update spec",
                                "items": {
                                    "$ref": "#/components/schemas/HealthCheckSpec"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckTask"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/credentials": {
            "get": {
                "tags": [
                    "Credentials"
                ],
                "summary": "Retrieve a list of credentials",
                "description": "Retrieve a list of credentials",
                "operationId": "getCredentials",
                "parameters": [
                    {
                        "name": "resourceName",
                        "in": "query",
                        "description": "The name of the resource",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resourceIp",
                        "in": "query",
                        "description": "The IP address of the resource",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resourceType",
                        "in": "query",
                        "description": "The type of the resource. One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, NSX_ALB, BACKUP",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "domainName",
                        "in": "query",
                        "description": "The name of the domain to which the resource belongs to (may be null in case there is no associated domain)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "The page number (must be a positive number), starts with 0",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The page size (must be a positive number, 0 as page size returns all records in one page",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "name": "accountType",
                        "in": "query",
                        "description": "Type of the account that needs to be fetched by filtering",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfCredential"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Credentials"
                ],
                "summary": "Update or rotate passwords for a list of resources",
                "description": "Update passwords for given list of resources by supplying new passwords or rotate the passwords using system generated passwords",
                "operationId": "updateOrRotatePasswords",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialsUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/credentials/tasks/{id}": {
            "get": {
                "tags": [
                    "Credentials"
                ],
                "summary": "Retrieve a credential task by ID",
                "description": "Retrieve a credential task by ID",
                "operationId": "getCredentialsTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the credentials task",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialsTask"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Credentials"
                ],
                "summary": "Cancel a failed credential task by its ID",
                "description": "Cancel a failed credential task by its ID",
                "operationId": "cancelCredentialsTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task ID of the failed operation required to be cancelled",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Credentials"
                ],
                "summary": "Retry a failed credentials task for a given ID",
                "description": "Retry a failed credentials task for a given ID",
                "operationId": "retryCredentialsTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task ID of the failed operation that is to be retried",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialsUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get a cluster by its ID",
                "operationId": "getCluster",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Cluster"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Delete a cluster from a domain if it has been previously initialized for deletion",
                "operationId": "deleteCluster",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "force",
                        "in": "query",
                        "description": "Force deletion of the cluster. Please note when passed true, deletion will ignore vCenter Server connection issues and could possible leave cluster related resources in the vCenter Server if a connection cannot be established.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Update a Cluster by adding or removing Hosts, Stretching a standard vSAN cluster, Unstretching a stretched cluster or by marking for deletion",
                "operationId": "updateCluster",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/bundles/{id}": {
            "get": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Retrieve a bundle by its ID",
                "description": "Get a Bundle",
                "operationId": "getBundle",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Bundle ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bundle"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bundle Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Delete a bundle by bundle ID",
                "description": "Delete a Bundle by bundle ID.",
                "operationId": "deleteBundle",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Bundle ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Start immediate download or schedule download of a bundle by ID",
                "description": "Update a Bundle for scheduling/triggering download. Only one download can triggered for a Bundle.",
                "operationId": "startBundleDownloadByID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Bundle ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BundleUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/bundles/": {
            "patch": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Update the software compatability set for all bundles",
                "description": "Update software compatibility sets for Bundles",
                "operationId": "updateBundleCompatibilitySets",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BundleUpdateSpec"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/wsas": {
            "get": {
                "tags": [
                    "WSA"
                ],
                "summary": "Retrieve a list of Workspace ONE Access instances",
                "operationId": "getWsas",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfWsa"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vsan-hcl/attributes": {
            "get": {
                "tags": [
                    "vSanHcl"
                ],
                "summary": "Get vSAN HCL attributes",
                "description": "Attributes of vSAN HCL data such as timestamp of last update",
                "operationId": "getVsanHclAttributes",
                "responses": {
                    "404": {
                        "description": "vSAN HCL attributes not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VsanHclAttributes"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vrslcms/validations/{id}": {
            "get": {
                "tags": [
                    "Suite Lifecycle"
                ],
                "summary": "Retrieve the results of a VMware Aria Suite Lifecycle validation by its ID",
                "description": "Gets the status of given VMware Aria Suite Lifecycle validation workflow by given validation id",
                "operationId": "getVrslcmValidation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VMware Aria validation ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vrslcm/status": {
            "get": {
                "tags": [
                    "Suite Lifecycle"
                ],
                "summary": "Retrieve information about VMware Aria Suite Lifecycle actual status",
                "description": "Get status on the VMware Aria Suite Lifecycle product and availability of different actions.",
                "operationId": "getVrslcmStatus",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VrslcmStatus"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vropses": {
            "get": {
                "tags": [
                    "Operations"
                ],
                "summary": "Retrieve a list of VMware Aria Operations instances",
                "operationId": "getVropses",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfVrops"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vrlis": {
            "get": {
                "tags": [
                    "Operation for Logs"
                ],
                "summary": "Retrieve a list of VMware Aria Operations for Logs instances",
                "operationId": "getVrlis",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfVrli"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vras": {
            "get": {
                "tags": [
                    "Automation"
                ],
                "summary": "Retrieve a list of VMware Aria Automation instances",
                "operationId": "getVras",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfVra"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vcf-services": {
            "get": {
                "tags": [
                    "VcfServices"
                ],
                "summary": "Retrieve a list of SDDC Manager services",
                "operationId": "getVcfServices",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfVcfService"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vcf-services/{id}": {
            "get": {
                "tags": [
                    "VcfServices"
                ],
                "summary": "Retrieve an SDDC Manager service by its ID",
                "operationId": "getVcfService",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VcfService ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VcfService"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "VcfService not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vcenters": {
            "get": {
                "tags": [
                    "vCenters"
                ],
                "summary": "Retrieve a list of vCenter Servers",
                "operationId": "getVcenters",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "ID of the domain",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfVcenter"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vcenters/{id}": {
            "get": {
                "tags": [
                    "vCenters"
                ],
                "summary": "Retrieve a vCenter Server by its ID",
                "operationId": "getVcenter",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "vCenter ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "vCenter not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Vcenter"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/vasa-providers/validations/{id}": {
            "get": {
                "tags": [
                    "VasaProviders"
                ],
                "summary": "Get the status of the validation of the VASA Provider",
                "operationId": "getVasaProviderValidation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The validation ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal server error"
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Validation ID not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/ui": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve a list of users assigned access via SDDC Manager",
                "description": "Retrieve a list of users assigned access via SDDC Manager",
                "operationId": "getUiUsers",
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfUser"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/upgrades/{upgradeId}/prechecks/{precheckId}": {
            "get": {
                "tags": [
                    "Upgrades"
                ],
                "summary": "Retrieve an upgrade precheck task by ID",
                "description": "Gets upgrade precheck details",
                "operationId": "getUpgradePrecheckByID",
                "parameters": [
                    {
                        "name": "upgradeId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "precheckId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Operation not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/upgradables/domains/{domainId}": {
            "get": {
                "tags": [
                    "Upgradables"
                ],
                "summary": "Retrieve a list of all upgradable resources for a domain by its ID",
                "description": "Fetches the list of Upgradables for a given domain. If a target version is provided, Upgradables that are required for given target version become Available. The Upgradables providesinformation that can be use for Precheck API and also in the actual Upgrade API call.This API is used only for management domain, for all cases please use v1/system/upgradables.",
                "operationId": "getUpgradablesByDomain",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "targetVersion",
                        "in": "query",
                        "description": "Target Version to get Upgradables for a given Target Release",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "4.0.1.0"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfUpgradable"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Domain Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/upgradables/domains/{domainId}/nsxt": {
            "get": {
                "tags": [
                    "Upgradables"
                ],
                "summary": "Retrieve a list of all upgradable NSX resources for a domain by its ID",
                "description": "Get the list NSX upgradable reosurce with resource metadata info",
                "operationId": "getNsxUpgradeResources",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bundleId",
                        "in": "query",
                        "description": "bundle Id of the upgrade bundle applicable on the domain",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Bundle Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NsxtResources"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/upgradables/domains/{domainId}/clusters": {
            "get": {
                "tags": [
                    "Upgradables"
                ],
                "summary": "Retrieve a list of upgradable packages details from HSM for a domain by its ID",
                "description": "Fetches the list of available hardware support managers and configured hardware support managers for the give resource along with the hardware support packages and Software details.",
                "operationId": "getUpgradablesClusters",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfUpgradablesClusterResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Domain Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/tasks": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Retrieve a list of all tasks",
                "description": "Get the tasks",
                "operationId": "getTasks",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of elements to be returned in the result",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "taskStatus",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "taskType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resourceId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resourceType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "completedAfter",
                        "in": "query",
                        "description": "A time based filter to get tasks which are completed after the given timestamp. A task is completed if its status is 'Successful' or 'Failed'. Time is in milliseconds.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "Page number.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Size of the page you want to retrieve. Max page size allowed is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "orderDirection",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "taskName",
                        "in": "query",
                        "description": "Search filter when task name contains text.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the list of tasks.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTask"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/upgradables": {
            "get": {
                "tags": [
                    "Upgradables"
                ],
                "summary": "Retrieve a list of all upgradable resources",
                "description": "Fetches the list of Upgradables in the System. Only one Upgradable becomes AVAILABLE for Upgrade. The Upgradables provides information that can be use for Precheck API and also in the actual Upgrade API call.",
                "operationId": "getUpgradables",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfUpgradable"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/support-bundles/{id}": {
            "get": {
                "tags": [
                    "SOS"
                ],
                "summary": "Retrive the status of the Support Bundle operation",
                "operationId": "getSupportBundleStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The Support Bundle ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupportBundle"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Something went wrong. Internal server error occurred. Error {error}",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bad request! Authorization Header is missing or not in correct format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request! Invalid Headers or Data. Error: {error}",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/support-bundles/{id}/data": {
            "get": {
                "tags": [
                    "SOS"
                ],
                "summary": "Download a Support Bundle tar.gz by ID",
                "operationId": "exportSupportBundleByID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The Support Bundle ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Bundle not found or not available for download. Id:{id}",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request! Invalid Headers or Data. Error: {error}",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bad request! Authorization Header is missing or not in correct format.",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Something went wrong. Internal server error occurred. Error {error}",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/security/fips": {
            "get": {
                "tags": [
                    "FIPS mode details"
                ],
                "summary": "Retrieve the FIPS configration mode",
                "description": "Retrieve VCF security FIPS mode.",
                "operationId": "getFIPSConfiguration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Fips"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/system/prechecks/tasks/{id}": {
            "get": {
                "tags": [
                    "SystemPrechecks"
                ],
                "summary": "Retrieve a precheck task by its id",
                "description": "Monitor the progress of precheck task by the precheck task ID. As this API is deprecated, please use the new LCM Prechecks API - /v1/system/check-sets/{taskId}",
                "operationId": "getPrecheckTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Precheck Task ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/system/ntp-configuration/validations/{id}": {
            "get": {
                "tags": [
                    "System Configuration"
                ],
                "summary": "Retrieve the results of a NTP configuration  validation by its ID",
                "operationId": "getValidationOfNtpConfiguration",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The validation ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/health-summary/{id}": {
            "get": {
                "tags": [
                    "SOS"
                ],
                "summary": "Retrieve the status of the Health Check operations",
                "operationId": "getHealthCheckStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The Health Summary Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthSummary"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Something went wrong. Internal server error occurred. Error {error}",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bad request! Authorization Header is missing or not in correct format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request! Invalid Headers or Data. Error: {error}",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/health-summary/{id}/data": {
            "get": {
                "tags": [
                    "SOS"
                ],
                "summary": "Download a Health Check tar.gz by its ID",
                "operationId": "exportHealthCheckByID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The Health Summary Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad request! Invalid Headers or Data. Error: {error}.",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Something went wrong. Internal server error occurred. Error {error}.",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bundle not found or not available for download. Id:{id}. ",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bad request! Authorization Header is missing or not in correct format.",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/dns-configuration/validations/{id}": {
            "get": {
                "tags": [
                    "System Configuration"
                ],
                "summary": "Retrieve the results of a DNS configuration validation by its ID",
                "operationId": "getValidationOfDnsConfiguration",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The validation ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/system/backup-configuration/backup-locations": {
            "get": {
                "tags": [
                    "BackupRestore"
                ],
                "summary": "Retrieve the backup location details",
                "operationId": "getBackupLocation",
                "parameters": [
                    {
                        "name": "serverIP",
                        "in": "query",
                        "description": "Backup server IP",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "port",
                        "in": "query",
                        "description": "Backup server port",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BackupLocation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sso-domains": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Retrieive a list of domains from  vCenter Single Sign-On",
                "description": "Get a list of all SSO domains",
                "operationId": "getSSODomains",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfString"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sso-domains/{sso-domain}/entities": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve a list of users and groups from a domain in vCenter Single Sign-On",
                "description": "Get a list of all entities in the SSO domain",
                "operationId": "getSSODomainEntities",
                "parameters": [
                    {
                        "name": "sso-domain",
                        "in": "path",
                        "description": "SSO Domain Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityName",
                        "in": "query",
                        "description": "Search Criteria for the users and groups ",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfSsoDomainEntity"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/{id}/sddc-manager": {
            "get": {
                "tags": [
                    "SDDC"
                ],
                "summary": "Retrieve SDDC Manager VM details",
                "description": "Retrieves the details of SDDC Manager VM",
                "operationId": "getSddcManagerInfo",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "SDDC ID",
                        "required": true,
                        "schema": {
                            "maximum": 36,
                            "minimum": 36,
                            "type": "string"
                        },
                        "example": "123e4567-e89b-42d3-a456-556642440000"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SddcManagerInfo"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/{id}/detail-report": {
            "get": {
                "tags": [
                    "SDDC"
                ],
                "summary": "Get bringup report by ID",
                "description": "Returns the bringup report. Reports are generated in PDF and CSV formats.",
                "operationId": "exportBringupDetailReport",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "SDDC ID",
                        "required": true,
                        "schema": {
                            "maximum": 36,
                            "minimum": 36,
                            "type": "string"
                        },
                        "example": "123e4567-e89b-42d3-a456-556642440000"
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "One among: PDF, CSV",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "pdf",
                            "enum": [
                                "pdf",
                                "csv"
                            ]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            },
                            "text/csv": {
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/validations/{validationId}/report": {
            "get": {
                "tags": [
                    "SDDC"
                ],
                "summary": "Get validation report by ID",
                "description": "Returns the bringup report for a validation. Reports are generated in PDF format.",
                "operationId": "exportBringupValidationReport",
                "parameters": [
                    {
                        "name": "validationId",
                        "in": "path",
                        "description": "Bringup validation ID",
                        "required": true,
                        "schema": {
                            "maximum": 36,
                            "minimum": 36,
                            "type": "string"
                        },
                        "example": "123e4567-e89b-42d3-a456-556642440000"
                    },
                    {
                        "name": "startTime",
                        "in": "query",
                        "description": "Start time of validation to be put in the report",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "curClientTime",
                        "in": "query",
                        "description": "Current client local time of the the report generation",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddcs/about": {
            "get": {
                "tags": [
                    "SDDC"
                ],
                "summary": "Get information about the bringup application",
                "description": "GET Method to retrieve information about Bringup app",
                "operationId": "getBringupAppInfo",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VcfService"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddc-managers": {
            "get": {
                "tags": [
                    "SddcManagers"
                ],
                "summary": "Retrieve a list of SDDC Managers",
                "operationId": "getSddcManagers",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfSddcManager"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddc-managers/{id}": {
            "get": {
                "tags": [
                    "SddcManagers"
                ],
                "summary": "Retrieve the details of an SDDC Manager by its id",
                "operationId": "getSddcManager",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Sddc Manager ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Sddc Manager not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SddcManager"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddc-managers/{id}/history": {
            "get": {
                "tags": [
                    "SddcManagers"
                ],
                "summary": "Retrieve the history of SDDC Manager by its id",
                "operationId": "getSddcManagerHistory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "SDDC Manager ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/History"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "SDDC Manager not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddc-manager/upgradables": {
            "get": {
                "tags": [
                    "SddcManagerUpgradable"
                ],
                "summary": "Fetch SDDC Manager Upgradables",
                "operationId": "getSddcManagerUpgradables",
                "parameters": [
                    {
                        "name": "applicabilityStatus",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "SDDC Manager releases that are applicable for upgrade",
                            "enum": [
                                "APPLICABLE, NOT_APPLICABLE"
                            ]
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "SDDC Manager releases matching the version provided",
                            "example": "5.0.0.1,5.0.0.2"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfSddcManagerUpgradable"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddc-manager/local-os-user-accounts": {
            "get": {
                "tags": [
                    "SddcManagers"
                ],
                "summary": "Get local OS user accounts from the SDDC Manager appliance",
                "description": "Returns a list of local OS user accounts from the SDDC Manager appliance",
                "operationId": "getLocalOsUserAccounts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LocalOsUserAccount"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/roles": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve a list of roles from SDDC Manager",
                "description": "Get a list of all roles",
                "operationId": "getRoles",
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfRole"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/restores/tasks/{id}": {
            "get": {
                "tags": [
                    "BackupRestore"
                ],
                "summary": "Retrieve the restore task",
                "operationId": "getRestoreTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The restore task ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/resources/license-checks/{id}": {
            "get": {
                "tags": [
                    "License Keys"
                ],
                "summary": "Retrieve the results of a license check by its ID",
                "operationId": "getLicenseCheckResultByID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The resources license check ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourcesLicenseCheckResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/resource-warnings/{id}": {
            "get": {
                "tags": [
                    "Resource Warnings"
                ],
                "summary": "Get a Resource Warning by ID",
                "operationId": "getResourceWarning",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceWarning"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Warning not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/releases": {
            "get": {
                "tags": [
                    "Releases"
                ],
                "summary": "Retrieve a list of release including current and target versions",
                "description": "Get all Releases, with option to get current release for a domain, get release by version or get future releases for a versionor get all the applicable target release.",
                "operationId": "getReleases",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "Domain ID to get current release of the domain",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "9ab78840-ee25-11e8-a8fc-d71c338107bd"
                    },
                    {
                        "name": "versionEq",
                        "in": "query",
                        "description": "Release version to get its release",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3.9.0"
                    },
                    {
                        "name": "vxRailVersionEq",
                        "in": "query",
                        "description": "Release VxRail version to get its release",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3.9.0"
                    },
                    {
                        "name": "versionGt",
                        "in": "query",
                        "description": "Release version to get its future releases",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "4.0.0.0"
                    },
                    {
                        "name": "vxRailVersionGt",
                        "in": "query",
                        "description": "Release vxrail version to get its future releases",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "7.0.0.0"
                    },
                    {
                        "name": "applicableForVersion",
                        "in": "query",
                        "description": "Release version to get applicable releases",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "4.0.1.0"
                    },
                    {
                        "name": "applicableForVxRailVersion",
                        "in": "query",
                        "description": "Release VxRail version to get applicable releases",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "4.0.1.0"
                    },
                    {
                        "name": "getFutureReleases",
                        "in": "query",
                        "description": "[Deprecated] Get all future releases for a given domain",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        },
                        "example": true
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Release Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfRelease"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/releases/system": {
            "get": {
                "tags": [
                    "Releases"
                ],
                "summary": "Retrieve the lowest deployed release of VMware Cloud Foundation",
                "description": "Returns release for the lowest deployed VCF version for a domain on the environment.If Management domain is ahead of WLD domain, VCF BOM version for the WLDdomain will be returned.",
                "operationId": "getSystemRelease",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Release"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Release not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/releases/domains": {
            "get": {
                "tags": [
                    "TargetUpgradeVersion"
                ],
                "summary": "Retrieve a release view for all domains",
                "description": "Get last selected upgrade version for WLDs.",
                "operationId": "getReleaseByDomains",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfDomainReleaseView"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/releases/domains/{domainId}/future-releases": {
            "get": {
                "tags": [
                    "Releases"
                ],
                "summary": "Retrive a list of future release by domain ID",
                "description": "Returns all known to the system future target versions for a domain. If some of them are not allowed (e.g. stepping stone) includes message why. If the domain does not have a product configured at that point, that product will not be included in the BOM or patch bundle list in each release.",
                "operationId": "getFutureReleases",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID to get all feature target versions",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "9ab78840-ee25-11e8-a8fc-d71c338107bd"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfDomainFutureRelease"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Domain not found with given ID.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/releases/domains/{domainId}/custom-patches": {
            "get": {
                "tags": [
                    "Flexible Product Patches"
                ],
                "summary": "Retrieve the list of custom patches for BOM products associated with or applicable on a VCF domain",
                "description": "Filter applicable patches (current/target vcf releases) per product type per domain",
                "operationId": "getCustomPatches",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vcfRelease",
                        "in": "query",
                        "description": "VCF release",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "4.0.1.0"
                    },
                    {
                        "name": "vxrailReleaseVersion",
                        "in": "query",
                        "description": "Vxrail release version",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "8.0.100-28093095"
                    },
                    {
                        "name": "productType",
                        "in": "query",
                        "description": "Product Type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "HOST"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlexibleProductPatches"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/releases/domains/validations/{validationId}": {
            "get": {
                "tags": [
                    "TargetUpgradeVersion"
                ],
                "summary": "Retrieve a domain target state validation by its validation id",
                "description": "Monitor the progress of domain target state validation task by the validation id.",
                "operationId": "getDomainReleaseViewValidation",
                "parameters": [
                    {
                        "name": "validationId",
                        "in": "path",
                        "description": "Domain Target State Validation ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/pscs": {
            "get": {
                "tags": [
                    "PSCs"
                ],
                "summary": "Retrieve a list of Platform Service Controller (PSC)",
                "operationId": "getPscs",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfPsc"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/pscs/{id}": {
            "get": {
                "tags": [
                    "PSCs"
                ],
                "summary": "Retrieve details of a Platform Service Controller (PSC)",
                "operationId": "getPsc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PSC ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Psc"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Psc not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsxt-clusters": {
            "get": {
                "tags": [
                    "NSX-T Clusters"
                ],
                "summary": "Retrieve a list of NSX clusters",
                "operationId": "getNsxClusters",
                "parameters": [
                    {
                        "name": "isShareable",
                        "in": "query",
                        "description": "filter NSX clusters which can be shared for domain creation",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfNsxTCluster"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsxt-clusters/{nsxt-cluster-id}/transport-zones": {
            "get": {
                "tags": [
                    "NSX-T Clusters"
                ],
                "summary": "Retrieve list of all NSX transport zones",
                "operationId": "getNsxTransportZones",
                "parameters": [
                    {
                        "name": "nsxt-cluster-id",
                        "in": "path",
                        "description": "NSX cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfNsxtTransportZoneInfo"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools": {
            "get": {
                "tags": [
                    "NSX-T Clusters"
                ],
                "summary": "Retrive a list of NSX IP Address Pools by the NSX cluster ID",
                "operationId": "getNsxIpAddressPools",
                "parameters": [
                    {
                        "name": "nsxt-cluster-id",
                        "in": "path",
                        "description": "NSX cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfNsxtIpAddressPool"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "IP address pools not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools/{name}": {
            "get": {
                "tags": [
                    "NSX-T Clusters"
                ],
                "summary": "Retrieve an NSX IP Address Pool by its name",
                "operationId": "getNsxIpAddressPool",
                "parameters": [
                    {
                        "name": "nsxt-cluster-id",
                        "in": "path",
                        "description": "NSX cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "IP address pool name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NsxtIpAddressPool"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "IP address pool not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsxt-clusters/{id}": {
            "get": {
                "tags": [
                    "NSX-T Clusters"
                ],
                "summary": "Retrieve the details of an NSX cluster by its ID",
                "operationId": "getNsxCluster",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "NSX cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NsxTCluster"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "NSX cluster not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsxt-clusters/queries/{id}": {
            "get": {
                "tags": [
                    "NSX-T Clusters"
                ],
                "summary": "Get NSX cluster query response",
                "operationId": "getNsxClusterQueryResponse",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NsxTQueryResponse"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NsxTQueryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Query Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsxt-clusters/ip-address-pools/validations/{id}": {
            "get": {
                "tags": [
                    "NSX-T Clusters"
                ],
                "operationId": "getValidationResult",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsxt-clusters/criteria": {
            "get": {
                "tags": [
                    "NSX-T Clusters"
                ],
                "summary": "Get all NSX criteria",
                "operationId": "getNsxCriteria",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfNsxTCriterion"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsxt-clusters/criteria/{name}": {
            "get": {
                "tags": [
                    "NSX-T Clusters"
                ],
                "summary": "Get a NSX criterion",
                "operationId": "getNsxCriterion",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NsxTCriterion"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Criterion Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsx-alb-clusters/{id}": {
            "get": {
                "tags": [
                    "NsxALBClusters"
                ],
                "summary": "Retrieve an NSX ALB Cluster by its ID",
                "operationId": "getALBCluster",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ALB Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "ALB Cluster not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NsxALBCluster"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "NsxALBClusters"
                ],
                "summary": "Deletes an NSX ALB Cluster by its ID",
                "operationId": "deleteALBCluster",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ALB Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "forceDelete",
                        "in": "query",
                        "description": "Force Delete ALB Cluster",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "ALB Cluster not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/nsx-alb-clusters/form-factors": {
            "get": {
                "tags": [
                    "NsxALBClusters"
                ],
                "summary": "Retrieve a list of NSX ALB Clusters Form Factors",
                "operationId": "getALBClustersFormFactors",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ALBControllerNodeFormFactors"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/network-pools/{id}/networks": {
            "get": {
                "tags": [
                    "Network Pools"
                ],
                "summary": "Get the Networks of a Network Pool",
                "description": "Get the Networks that are part of a Network Pool",
                "operationId": "getNetworksOfNetworkPool",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID for Networkpool to get the networks from",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Network pool not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Networks for referenced network pool",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfNetwork"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/network-pools/{id}/networks/{networkId}": {
            "get": {
                "tags": [
                    "Network Pools"
                ],
                "summary": "Get a Network of a Network Pool",
                "description": "Get a Network that is part of a Network Pool",
                "operationId": "getNetworkOfNetworkPool",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the Network pool",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "networkId",
                        "in": "path",
                        "description": "Id of the Network",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Networkpool not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Network for referenced network pool",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Network"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/licensing-info": {
            "get": {
                "tags": [
                    "License Keys"
                ],
                "summary": "Retrieve licensing information",
                "operationId": "getLicenseInformation",
                "parameters": [
                    {
                        "name": "resourceType",
                        "in": "query",
                        "description": "Resource type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "SYSTEM,DOMAIN"
                    },
                    {
                        "name": "resourceIds",
                        "in": "query",
                        "description": "Resource IDs",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LicensingInfo"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/licensing-info/system": {
            "get": {
                "tags": [
                    "License Keys"
                ],
                "summary": "Get the Licensing information of system",
                "operationId": "getSystemLicensingInfo",
                "responses": {
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LicensingInfo"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/licensing-info/domains/{id}": {
            "get": {
                "tags": [
                    "License Keys"
                ],
                "summary": "Get the Licensing information of a domain",
                "operationId": "getDomainLicensingInfo",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LicensingInfo"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/license-keys/{key}": {
            "get": {
                "tags": [
                    "License Keys"
                ],
                "summary": "Retrieve a license key",
                "operationId": "getLicenseKey",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The 29 alpha numeric character license key with hyphens",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "4J6TH-3XK57-480X4-0E9H6-2X00P"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicenseKey"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "License key not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "License Keys"
                ],
                "summary": "Remove a license key",
                "operationId": "removeLicenseKey",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The 29 alpha numeric character license key with hyphens",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "4J6TH-3XK57-480X4-0E9H6-2X00P"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "404": {
                        "description": "License key not found"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/license-keys/product-types": {
            "get": {
                "tags": [
                    "License Keys"
                ],
                "summary": "Get product types",
                "operationId": "getLicenseProductTypes",
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/identity-broker/sddc-manager-oidc": {
            "get": {
                "tags": [
                    "Identity Providers"
                ],
                "summary": "Get the SDDC Manager WS1B OIDC Information",
                "description": "Get the SDDC Manager WS1B OIDC Information",
                "operationId": "getSddcWs1bOidcInfo",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SDDCManagerOidcInfo"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/identity-broker/prechecks": {
            "get": {
                "tags": [
                    "Identity Provider Precheck"
                ],
                "summary": "Get Identity Provider Federation Precheck Result",
                "description": "Get a list precheck result with warnings/errors",
                "operationId": "getIdentityPrecheckResult",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "IDP type for which Precheck needs to be run",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IdentityProviderPrecheckResult"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/hosts/{id}": {
            "get": {
                "tags": [
                    "Hosts"
                ],
                "summary": "Get a host by its ID",
                "operationId": "getHost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Host"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/hosts/{id}/tags/tag-manager": {
            "get": {
                "tags": [
                    "Hosts"
                ],
                "description": "Get Host Tag Manager Url",
                "operationId": "getHostTagManagerUrl",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Host ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagManagerModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/hosts/{id}/tags/assignable-tags": {
            "get": {
                "tags": [
                    "Hosts"
                ],
                "description": "Get tags assignable to a host",
                "operationId": "getAssignableTagForHost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Host ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/hosts/validations/{id}": {
            "get": {
                "tags": [
                    "Hosts"
                ],
                "summary": "Retrieve the results of a host commission validation by its ID",
                "operationId": "getHostCommissionValidationByID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The validation ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/hosts/tags": {
            "get": {
                "tags": [
                    "Hosts"
                ],
                "description": "Get Tags assigned to Hosts",
                "operationId": "getTagsAssignedToHosts",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTagsForResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/hosts/queries/{id}": {
            "get": {
                "tags": [
                    "Hosts"
                ],
                "description": "Get query response",
                "operationId": "getHostQueryResponse",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HostQueryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Query Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/hosts/prechecks/{id}": {
            "get": {
                "tags": [
                    "Hosts"
                ],
                "description": "Get host(s) prechecks response",
                "operationId": "getHostsPrechecksResponse",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Execution ID returned by post hostsprecheks",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HostsPrechecksResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/hosts/criteria": {
            "get": {
                "tags": [
                    "Hosts"
                ],
                "description": "Get all criteria",
                "operationId": "getCriteria",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfHostCriterion"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/hosts/criteria/{name}": {
            "get": {
                "tags": [
                    "Hosts"
                ],
                "description": "Get a criterion",
                "operationId": "getCriterion",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HostCriterion"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Criterion Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/edge-clusters/{edgeClusterId}/criteria": {
            "get": {
                "tags": [
                    "NsxTEdgeClusters"
                ],
                "summary": "Get the Edge Cluster criterion list for the NSX query",
                "operationId": "getEdgeClusterQueryCriteria",
                "parameters": [
                    {
                        "name": "edgeClusterId",
                        "in": "path",
                        "description": "Edge Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfEdgeClusterNsxtEntityCriterion"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/edge-clusters/validations/{id}": {
            "get": {
                "tags": [
                    "NsxTEdgeClusters"
                ],
                "summary": "Retrieve the results of a NSX Edge Cluster validation by its ID",
                "operationId": "getEdgeClusterValidationByID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The validation ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal server error"
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/validations/{validationId}": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get the status of the validations for domain related operations",
                "description": "Gets the status of given domain update validation workflow by given validation id",
                "operationId": "getDomainUpdateValidation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VxRail Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "validationId",
                        "in": "path",
                        "description": "VxRail Domain validation id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/tags/tag-manager": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get Domain Tag Manager Url",
                "operationId": "getDomainTagManagerUrl",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagManagerModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/tags/assignable-tags": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get tags assignable to a domain",
                "operationId": "getAssignableTagsForDomain",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/resource-certificates/validations/{validationId}": {
            "get": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Retrieve the results of a certificate validation by its ID",
                "description": "Get the resource certificate validation result",
                "operationId": "getResourceCertificatesValidationByID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3E86FBAD-8984-4D4B-992D-F0C49857572A"
                    },
                    {
                        "name": "validationId",
                        "in": "path",
                        "description": "Validation ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "B1930850-7D1A-4BAA-89D7-52FD5DAD196A"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfCertificate"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/endpoints": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Retrieve a list of endpoints or URLs for a domain by its ID",
                "operationId": "getDomainEndpoints",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfEndpoint"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Domain Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/csrs/downloads": {
            "get": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Request the download of CSR(s) for a domain in tar.gz format",
                "description": "Download available CSR(s) in tar.gz format",
                "operationId": "downloadCSR",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID or Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3E86FBAD-8984-4D4B-992D-F0C49857572A"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/domains/{id}/compliance-audits/{complianceAuditId}": {
            "get": {
                "tags": [
                    "Compliance"
                ],
                "summary": "Get compliance audit for a domain",
                "description": "Get compliance audit for a domain",
                "operationId": "getComplianceAuditForADomain",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "complianceAuditId",
                        "in": "path",
                        "description": "Compliance Audit ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ComplianceAudit"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{id}/compliance-audits/{complianceAuditId}/compliance-audit-items": {
            "get": {
                "tags": [
                    "Compliance"
                ],
                "summary": "Get compliance audit items for a domain",
                "description": "Get compliance audit items for a domain",
                "operationId": "getComplianceAuditItemsForADomain",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "complianceAuditId",
                        "in": "path",
                        "description": "Compliance Audit ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfComplianceAuditItem"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/isolation-prechecks/{precheckId}": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get the status of the Domain Isolation Precheck",
                "operationId": "getDomainIsolationPrecheckStatus",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "precheckId",
                        "in": "path",
                        "description": "Precheck ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IsolationPrecheckResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/health-checks/tasks/{taskId}": {
            "get": {
                "tags": [
                    "vSANHealthCheck"
                ],
                "summary": "Retrieve a vSAN Health Check by task ID",
                "description": "Get vSAN health check update task status for a given task Id",
                "operationId": "getVsanHealthCheckByTaskID",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "description": "Health check task id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckTask"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/health-checks/queries/{queryId}": {
            "get": {
                "tags": [
                    "vSANHealthCheck"
                ],
                "summary": "Retrieve vSAN Health Check status for a domain and query ID",
                "description": "Get vSAN health check status for a given Query Id",
                "operationId": "getVsanHealthCheckByQueryID",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "queryId",
                        "in": "path",
                        "description": "Query ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckQueryResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/datastores/queries/{queryId}": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get Datastore query response",
                "operationId": "getDatastoreQueryResponse",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "queryId",
                        "in": "path",
                        "description": "Query ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatastoreQueryResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Query Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/datastores/criteria": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get all datastore criteria",
                "operationId": "getDatastoresCriteria",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfDatastoreCriterion"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/datastores/criteria/{name}": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get a criterion to query for datastore",
                "operationId": "getDatastoreCriterion",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Criteria Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatastoreCriterion"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Criterion Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/clusters/{clusterName}/queries/{queryId}": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get cluster query response",
                "operationId": "getClusterQueryResponse",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterName",
                        "in": "path",
                        "description": "Cluster Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "queryId",
                        "in": "path",
                        "description": "Query ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClusterQueryResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/clusters/queries/{queryId}": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get clusters query response",
                "operationId": "getClustersQueryResponse",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "queryId",
                        "in": "path",
                        "description": "Query ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClusterQueryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Query Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/clusters/criteria": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get all cluster criteria",
                "operationId": "getClusterCriteria",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfClusterCriterion"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/{domainId}/clusters/criteria/{name}": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get a criterion to query for cluster",
                "operationId": "getClusterCriterion",
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Criteria Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClusterCriterion"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Criterion Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/validations/{id}": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get the status of the validations for domain related operations",
                "description": "Gets the status of given domain create validation workflow by given validation id",
                "operationId": "domainCreateValidation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "VxRail Domain validation id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/domains/tags": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "Get tags assigned to all domains",
                "operationId": "getTagsAssignedToDomains",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTagsForResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/credentials/{id}": {
            "get": {
                "tags": [
                    "Credentials"
                ],
                "summary": "Retrieve a credential by its ID",
                "description": "Retrieve a credential by its ID",
                "operationId": "getCredential",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the credential",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Credential"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/credentials/tasks": {
            "get": {
                "tags": [
                    "Credentials"
                ],
                "summary": "Retrieve a list of credential tasks",
                "description": "Retrieve a list of credential tasks",
                "operationId": "getCredentialsTasks",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of elements to be returned in the result",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfCredentialsTask"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/credentials/tasks/{id}/subtasks/{subtaskId}": {
            "get": {
                "tags": [
                    "Credentials"
                ],
                "summary": "Retrieve a credential sub task by its ID",
                "description": "Retrieve a credential sub task by its ID",
                "operationId": "getCredentialsSubTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the credentials task",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subtaskId",
                        "in": "path",
                        "description": "The ID of the credentials sub-task",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialsTask"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/credentials/tasks/{id}/resource-credentials": {
            "get": {
                "tags": [
                    "Credentials"
                ],
                "summary": "Retriece a credential taks by resource ID",
                "description": "Retriece a credential taks by resource ID",
                "operationId": "getCredentialTaskByResourceID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the credentials task",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ResourceCredentials"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/credentials/expirations/{id}": {
            "get": {
                "tags": [
                    "Credentials"
                ],
                "summary": "Retrive a password expiration task by ID",
                "description": "Retrive a password expiration task by ID",
                "operationId": "getPasswordExpirationByTaskID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The expiration fetch workflow ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialsExpiration"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/config-drifts": {
            "get": {
                "tags": [
                    "ConfigReconciler"
                ],
                "summary": "Get configs associated with the given criteria",
                "description": "Get configs associated with the given criteria, all if no criteria is provided",
                "operationId": "getConfigs",
                "parameters": [
                    {
                        "name": "resourceId",
                        "in": "query",
                        "description": "Resource Id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resourceType",
                        "in": "query",
                        "description": "Resource Type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configId",
                        "in": "query",
                        "description": "Config Id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "driftType",
                        "in": "query",
                        "description": "Drift Type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Size of the page to retrieve. Default page size is 10. Optional",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number to retrieve. Default page 0 will retrieve all elements. Optional",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Internal Service Unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfConfigDriftSpec"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/config-drift-reconciliations/{taskId}": {
            "get": {
                "tags": [
                    "ConfigReconciler"
                ],
                "summary": "Get config reconciliation task associated with the given task Id",
                "description": "Get config reconciliation task associated with the given task Id",
                "operationId": "getReconciliationTask",
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "description": "Task Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Reconciliation task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/compliance-standards": {
            "get": {
                "tags": [
                    "Compliance"
                ],
                "summary": "Get all compliance standards",
                "description": "Get a list of all compliance standards",
                "operationId": "getComplianceStandards",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfComplianceStandard"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/compliance-configurations": {
            "get": {
                "tags": [
                    "Compliance"
                ],
                "summary": "Get all compliance configurations",
                "description": "Get a list of all compliance configurations",
                "operationId": "getComplianceConfigurations",
                "parameters": [
                    {
                        "name": "standardType",
                        "in": "query",
                        "description": "The standard type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "standardVersion",
                        "in": "query",
                        "description": "The standard version, use in combination with standardType",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resourceType",
                        "in": "query",
                        "description": "The resource type One among: SDDC_MANAGER",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resourceVersion",
                        "in": "query",
                        "description": "The resource version, use in combination with resourceType)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfComplianceConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/compliance-audits": {
            "get": {
                "tags": [
                    "Compliance"
                ],
                "summary": "Get compliance audit history",
                "description": "Get compliance audit history",
                "operationId": "getComplianceAuditHistory",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfComplianceAudit"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/compliance-audits/{complianceAuditId}": {
            "get": {
                "tags": [
                    "Compliance"
                ],
                "summary": "Get compliance audit",
                "description": "Get compliance audit",
                "operationId": "getComplianceAudit",
                "parameters": [
                    {
                        "name": "complianceAuditId",
                        "in": "path",
                        "description": "Compliance Audit ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ComplianceAudit"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/compliance-audits/{complianceAuditId}/compliance-audit-items": {
            "get": {
                "tags": [
                    "Compliance"
                ],
                "summary": "Get compliance audit items",
                "description": "Get compliance audit items",
                "operationId": "getComplianceAuditItems",
                "parameters": [
                    {
                        "name": "complianceAuditId",
                        "in": "path",
                        "description": "Compliance Audit ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfComplianceAuditItem"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/compatibility-matrices/{compatibilityMatrixSource}": {
            "get": {
                "tags": [
                    "CompatibilityMatrix"
                ],
                "summary": "Get Compatibility Matrix",
                "description": "Get Compatibility Matrix",
                "operationId": "getCompatibilityMatrix",
                "parameters": [
                    {
                        "name": "compatibilityMatrixSource",
                        "in": "path",
                        "description": "compatibilityMatrixSource of compatibility data",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompatibilityMatrix"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/compatibility-matrices/{compatibilityMatrixSource}/metadata": {
            "get": {
                "tags": [
                    "CompatibilityMatrix"
                ],
                "summary": "Get Compatibility Matrix Metadata",
                "description": "Get Compatibility Matrix Metadata",
                "operationId": "getCompatibilityMatrixMetadata",
                "parameters": [
                    {
                        "name": "compatibilityMatrixSource",
                        "in": "path",
                        "description": "compatibilityMatrixSource of compatibility data",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompatibilityMatrixMetadata"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/compatibility-matrices/{compatibilityMatrixSource}/content": {
            "get": {
                "tags": [
                    "CompatibilityMatrix"
                ],
                "summary": "Get Compatibility Matrix content",
                "description": "Get Compatibility Matrix content",
                "operationId": "getCompatibilityMatrixContent",
                "parameters": [
                    {
                        "name": "compatibilityMatrixSource",
                        "in": "path",
                        "description": "compatibilityMatrixSource of compatibility data",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/validations/{validationId}": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get the status of the validations for cluster updates",
                "description": "Gets the status of given cluster updates validation workflow by given validation id",
                "operationId": "getClusterUpdateValidation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "validationId",
                        "in": "path",
                        "description": "Cluster validation workflow id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "useAsyncValidation",
                        "in": "query",
                        "description": "Cluster validation result for async validations",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/tags/tag-manager": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get Cluster Tag Manager Url",
                "operationId": "getClusterTagManagerUrl",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagManagerModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/tags/assignable-tags": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get tags assignable to a cluster",
                "operationId": "getTagAssignableForCluster",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/network/queries/{queryId}": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get cluster network configuration query response",
                "description": "The response retrieved is only applicable for pure L2 domain clusters",
                "operationId": "getClusterNetworkConfigurationQueryResponse",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "queryId",
                        "in": "path",
                        "description": "Query ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClusterNetworkConfigurationQueryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/network/criteria": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get cluster network configuration criteria",
                "operationId": "getClusterNetworkConfigurationCriteria",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfClusterNetworkConfigurationCriterion"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/hosts/criteria": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get all host criteria",
                "operationId": "getHostCriteria",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfHostCriterion"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/hosts/criteria/{name}": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get a criterion to query for host",
                "operationId": "getHostCriterion",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Criteria Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HostCriterion"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Criterion Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/datastores/criteria": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get all datastore criteria",
                "operationId": "getDatastoresCriteria_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfDatastoreCriterion"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/datastores/criteria/{name}": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get a criterion to query for datastore",
                "operationId": "getDatastoreCriterion_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Criteria Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatastoreCriterion"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Criterion Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterId}/hosts/queries/{queryId}": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get query response",
                "operationId": "getHostQueryResponse_1",
                "parameters": [
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "queryId",
                        "in": "path",
                        "description": "Query ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HostQueryResponse"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HostQueryResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Query Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterId}/datastores/queries/{queryId}": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get Datastore query response",
                "operationId": "getDatastoreQueryResponse_1",
                "parameters": [
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "queryId",
                        "in": "path",
                        "description": "Query ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatastoreQueryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/validations/{id}": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get the status of the validations for cluster deployment",
                "description": "Gets the status of given cluster create validation workflow by given validation id",
                "operationId": "getClusterCreateValidation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster validation workflow id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Validation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/tags": {
            "get": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Get tags assigned to clusters",
                "operationId": "getTagsAssignedToClusters",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfTagsForResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/certificate-authorities/{id}": {
            "get": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Retrieve the details of a Certificate Authority by ID",
                "description": "Get certificate authority information",
                "operationId": "getCertificateAuthorityById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The CA type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "One among: OpenSSL, Microsoft"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CertificateAuthority"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Certificates"
                ],
                "summary": "Remove the configuration of a Certificate Authority",
                "description": "Deletes CA configuration file",
                "operationId": "removeCertificateAuthority",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The CA type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "One among: OpenSSL, Microsoft"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/bundles/domains/{id}": {
            "get": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Retrieve a list of bundles for skip upgrade by domain ID",
                "description": "Get bundles for skip upgrade a domain from current version to target version.",
                "operationId": "getBundlesForSkipUpgrade",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Domain ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "targetVersion",
                        "in": "query",
                        "description": "[Deprecated] Target domain VCF version",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageOfBundle"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Domain not found with given ID.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/{id}": {
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Remove access for a user in SDDC Manager",
                "description": "Delete the user by the ID, if it exists",
                "operationId": "removeUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/tokens/refresh-token": {
            "delete": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Invalidate Refresh Token",
                "description": "Invalidate the provided refresh token",
                "operationId": "invalidateRefreshToken",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "description": "ID of the refresh token"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                }
            }
        },
        "/v1/system/settings/version-aliases/{bundleComponentType}": {
            "delete": {
                "tags": [
                    "VersionAliasesForBundleComponentType"
                ],
                "summary": "Removes Version Alias Configuration by component type",
                "description": "Removes Version Alias Configuration by component type",
                "operationId": "deleteVersionAliasBySoftwareType",
                "parameters": [
                    {
                        "name": "bundleComponentType",
                        "in": "path",
                        "description": "Bundle Component Type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No COntent"
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sddc-manager/trusted-certificates/{alias}": {
            "delete": {
                "tags": [
                    "Trusted Certificates"
                ],
                "summary": "Delete a trusted certificate from the SDDC Manager",
                "description": "Delete a trusted certificate from the SDDC Manager.",
                "operationId": "deleteTrustedCertificate",
                "parameters": [
                    {
                        "name": "alias",
                        "in": "path",
                        "description": "Certificate Alias",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/clusters/{id}/datastores/{datastoreId}": {
            "delete": {
                "tags": [
                    "Clusters"
                ],
                "summary": "Unmount a datastore from a cluster",
                "operationId": "removeDatastoreFromCluster",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cluster ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "datastoreId",
                        "in": "path",
                        "description": "Datastore ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Error": {
                "type": "object",
                "properties": {
                    "errorCode": {
                        "type": "string",
                        "description": "The minor error code",
                        "readOnly": true
                    },
                    "errorType": {
                        "type": "string",
                        "description": "The error type",
                        "readOnly": true
                    },
                    "arguments": {
                        "type": "array",
                        "description": "The arguments used to localize the message, Can be used by scripts to automate the error processing.",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "The arguments used to localize the message, Can be used by scripts to automate the error processing.",
                            "readOnly": true
                        }
                    },
                    "context": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The error context (e.g. the component where it occurred).",
                            "readOnly": true
                        },
                        "description": "The error context (e.g. the component where it occurred).",
                        "readOnly": true
                    },
                    "message": {
                        "type": "string",
                        "description": "The localized error message",
                        "readOnly": true
                    },
                    "remediationMessage": {
                        "type": "string",
                        "description": "The localized remediation error message"
                    },
                    "causes": {
                        "type": "array",
                        "description": "The underlying cause exceptions.",
                        "items": {
                            "$ref": "#/components/schemas/ErrorCause"
                        }
                    },
                    "nestedErrors": {
                        "type": "array",
                        "description": "The nested errors when the error is a composite one",
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "referenceToken": {
                        "type": "string",
                        "description": "A reference token correlating the error with the relevant detailed error logs. Should be sent to the service provider when reporting issues.",
                        "readOnly": true
                    }
                },
                "description": "Error response containing a minor error code, a localized error message, a localized remediation message and optionally a reference token to correlate the error with the logs "
            },
            "ErrorCause": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The type of the error cause",
                        "readOnly": true
                    },
                    "message": {
                        "type": "string",
                        "description": "The message describing the reason for the error",
                        "readOnly": true
                    }
                },
                "description": "Describes a single error cause"
            },
            "Vrslcm": {
                "required": [
                    "fqdn",
                    "id",
                    "ipAddress",
                    "status",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the VMware Aria Suite Lifecycle Manager instance",
                        "readOnly": true
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "Fully Qualified Domain Name",
                        "readOnly": true
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP Address of VMware Aria Suite Lifecycle Manager appliance",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the product that is currently running on the environment",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The state of the current product instance",
                        "readOnly": true
                    }
                },
                "description": "This specification contains information related to the existing VMware Aria Suite Lifecycle instance deployment"
            },
            "MessagePack": {
                "required": [
                    "messageKey"
                ],
                "type": "object",
                "properties": {
                    "component": {
                        "type": "string",
                        "description": "The component the message belongs to"
                    },
                    "messageKey": {
                        "type": "string",
                        "description": "The machine-readable key of the message"
                    },
                    "arguments": {
                        "type": "array",
                        "description": "The arguments used to localize the message. Can be used by scripts to automate the response processing. ",
                        "items": {
                            "type": "string",
                            "description": "The arguments used to localize the message. Can be used by scripts to automate the response processing. "
                        }
                    },
                    "message": {
                        "type": "string",
                        "description": "The localized message (if not provided by another property)"
                    },
                    "bundle": {
                        "type": "string",
                        "description": "The local resource bundle details"
                    }
                },
                "description": "A message pack representing a localizable message and suitable for machine processing. Contains a message key unique in the scope of the specified component, as well as the arguments needed to generate the localized message.",
                "readOnly": true
            },
            "Resource": {
                "required": [
                    "resourceId",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "Resource ID",
                        "example": "BE8A5E04-92A0-43F6-A166-AA041F4327CC"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "Resource FQDN",
                        "example": "sfo-vc01.rainpole.io"
                    },
                    "type": {
                        "type": "string",
                        "description": "Resource type",
                        "example": "One among: SDDC_MANAGER, PSC, VCENTER, NSX_MANAGER, NSXT_MANAGER, VRA, VRLI, VROPS, VRSLCM, VXRAIL_MANAGER, NSX_ALB, ESXI"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource"
                    },
                    "sans": {
                        "type": "array",
                        "description": "Subject alternative name(s)",
                        "example": "sfo-vc01.rainpole.io",
                        "items": {
                            "type": "string",
                            "description": "Subject alternative name(s)",
                            "example": "sfo-vc01.rainpole.io"
                        }
                    }
                },
                "description": "Represents the resource in the system",
                "readOnly": true
            },
            "Stage": {
                "required": [
                    "creationTimestamp",
                    "description",
                    "name",
                    "status",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Stage name",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Stage type",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Stage description",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Stage status",
                        "readOnly": true,
                        "example": "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED"
                    },
                    "creationTimestamp": {
                        "type": "string"
                    },
                    "completionTimestamp": {
                        "type": "string",
                        "description": "Stage completion timestamp",
                        "readOnly": true
                    },
                    "errors": {
                        "type": "array",
                        "description": "List of errors in case of a failure",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                },
                "description": "Represents a Stage",
                "readOnly": true
            },
            "SubTask": {
                "required": [
                    "creationTimestamp",
                    "description",
                    "name",
                    "status",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Sub-task name",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Sub-task type",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Sub-task description",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Sub-task status",
                        "readOnly": true,
                        "example": "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED, NOT_APPLICABLE"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "Sub-task creation timestamp",
                        "readOnly": true
                    },
                    "completionTimestamp": {
                        "type": "string",
                        "description": "Sub-task completion timestamp",
                        "readOnly": true
                    },
                    "stages": {
                        "type": "array",
                        "description": "List of stages of the sub-task",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Stage"
                        }
                    },
                    "errors": {
                        "type": "array",
                        "description": "List of errors in case of a failure",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of resources associated with sub-task",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Resource"
                        }
                    },
                    "subTasks": {
                        "type": "array",
                        "description": "List of child subtasks associated with this subtask",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SubTask"
                        }
                    }
                },
                "description": "Represents a sub-task",
                "readOnly": true
            },
            "Task": {
                "required": [
                    "creationTimestamp",
                    "id",
                    "name",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Task ID",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Task name",
                        "readOnly": true
                    },
                    "localizableDescriptionPack": {
                        "$ref": "#/components/schemas/MessagePack"
                    },
                    "type": {
                        "type": "string",
                        "description": "Operation that is represented by the Task in machine readable format.  The value is controlled by the owners/producers of the Task. The convention is <resource>_<operation>",
                        "readOnly": true,
                        "example": "Sample values: HOST_COMMISSION, HOST_DECOMMISSION"
                    },
                    "status": {
                        "type": "string",
                        "description": "Task status",
                        "readOnly": true,
                        "example": "One among: PENDING, Pending, IN_PROGRESS, In Progress, SUCCESSFUL, Successful, FAILED, Failed, CANCELLED, Cancelled, COMPLETED_WITH_WARNING, SKIPPED"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "Task creation timestamp",
                        "readOnly": true
                    },
                    "completionTimestamp": {
                        "type": "string",
                        "description": "Task completion timestamp",
                        "readOnly": true
                    },
                    "subTasks": {
                        "type": "array",
                        "description": "List of sub-tasks of the task",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SubTask"
                        }
                    },
                    "errors": {
                        "type": "array",
                        "description": "List of errors in case of a failure",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of resources associated with task",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Resource"
                        }
                    },
                    "resolutionStatus": {
                        "type": "string",
                        "description": "Resolution state",
                        "readOnly": true,
                        "example": "Can have only one of the two values: RESOLVED or UNRESOLVED"
                    },
                    "isCancellable": {
                        "type": "boolean",
                        "description": "Represents task can be cancellable or not.",
                        "readOnly": true
                    },
                    "isRetryable": {
                        "type": "boolean",
                        "description": "Indicates whether a task is eligible for retry or not.",
                        "readOnly": true
                    }
                },
                "description": "Represents a task"
            },
            "DomainIntegration": {
                "required": [
                    "domainId",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "domainId": {
                        "type": "string",
                        "description": "The ID of the workload domain",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The association status of the workload domain",
                        "example": "ENABLED, DISABLED, IN_PROGRESS",
                        "enum": [
                            "ENABLED",
                            "DISABLED"
                        ]
                    }
                },
                "description": "This specification contains information related to the existing VMware Aria Operations instance deployment",
                "readOnly": true
            },
            "BaseAlias": {
                "required": [
                    "aliases",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "Base version",
                        "readOnly": true
                    },
                    "aliases": {
                        "type": "array",
                        "description": "List of Alias versions",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "List of Alias versions",
                            "readOnly": true
                        }
                    }
                },
                "description": "Base Alias representation",
                "readOnly": true
            },
            "VersionAliasesForBundleComponentType": {
                "required": [
                    "bundleComponentType",
                    "versionAliases"
                ],
                "type": "object",
                "properties": {
                    "bundleComponentType": {
                        "type": "string",
                        "description": "Bundle Component Type",
                        "readOnly": true,
                        "example": "One among: VCENTER, PSC, NSX_T_MANAGER, NSX_MANAGER, ESX_HOST, VCF_VRA_UPGRADE, VCF_VRLI_UPGRADE, VCF_VROPS_UPGRADE, VCF_VRSLCM_UPGRADE, SDDC_MANAGER_VCF, LCM, SDDC_MANAGER, SDDC_MANAGER_UI, OPERATIONS_MANAGER, COMMON_SERVICES, SOLUTIONS_MANAGER, MULTI_SITE_SERVICE, "
                    },
                    "versionAliases": {
                        "type": "array",
                        "description": "Version Aliases",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/BaseAlias"
                        }
                    }
                },
                "description": "Version Alias representation",
                "readOnly": true
            },
            "VersionAliasesForBundleComponentTypeSpec": {
                "type": "object",
                "properties": {
                    "versionAliasesForBundleComponentTypes": {
                        "type": "array",
                        "description": "List of version aliases for bundle component types.",
                        "items": {
                            "$ref": "#/components/schemas/VersionAliasesForBundleComponentType"
                        }
                    },
                    "forceUpdate": {
                        "type": "boolean",
                        "description": "Flag for force update version alias configuration."
                    },
                    "targetVcfVersion": {
                        "type": "string",
                        "description": "If this field is set, LCM will calculate and update version aliases based on current deployment VCF version and the provided target VCF version"
                    }
                },
                "description": "Version Alias Configuration Specification"
            },
            "PageMetadata": {
                "type": "object",
                "properties": {
                    "pageNumber": {
                        "type": "integer",
                        "description": "Returns the current page number",
                        "format": "int32",
                        "readOnly": true
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "Returns the number of elements in the current page",
                        "format": "int32",
                        "readOnly": true
                    },
                    "totalElements": {
                        "type": "integer",
                        "description": "Returns the total number of elements",
                        "format": "int32",
                        "readOnly": true
                    },
                    "totalPages": {
                        "type": "integer",
                        "description": "Returns the total number of pages",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "description": "Represents pageable elements pagination metadata",
                "readOnly": true
            },
            "PageOfVersionAliasesForBundleComponentType": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/VersionAliasesForBundleComponentType"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "AliasSpec": {
                "required": [
                    "aliases"
                ],
                "type": "object",
                "properties": {
                    "aliases": {
                        "type": "array",
                        "description": "Aliases for bundle component type and version.",
                        "items": {
                            "type": "string",
                            "description": "Aliases for bundle component type and version."
                        }
                    },
                    "forceUpdate": {
                        "type": "boolean",
                        "description": "Flag for force update version alias configuration."
                    }
                },
                "description": "Alias Specification"
            },
            "DepotAccount": {
                "required": [
                    "password",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Depot Username for Access"
                    },
                    "password": {
                        "type": "string",
                        "description": "Depot Password for Access"
                    },
                    "status": {
                        "type": "string",
                        "description": "Depot Status",
                        "example": "One among: DEPOT_UNKNOWN_HOST, DEPOT_NOT_AVAILABLE, DEPOT_USER_NOT_SET, DEPOT_INVALID_CREDENTIAL, UNKNOWN_FAILURE, DEPOT_CONNECTION_SUCCESSFUL"
                    },
                    "message": {
                        "type": "string",
                        "description": "Message explaining depot status"
                    }
                },
                "description": "VMware Depot Account Information"
            },
            "DepotConfiguration": {
                "required": [
                    "hostname",
                    "isOfflineDepot",
                    "port"
                ],
                "type": "object",
                "properties": {
                    "isOfflineDepot": {
                        "type": "boolean",
                        "description": "Flag indicating if the depot is in offline mode"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "IP/Hostname of the depot"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port of the depot",
                        "format": "int32"
                    }
                },
                "description": "Depot Configuration"
            },
            "DepotSettings": {
                "type": "object",
                "properties": {
                    "vmwareAccount": {
                        "$ref": "#/components/schemas/DepotAccount"
                    },
                    "dellEmcSupportAccount": {
                        "$ref": "#/components/schemas/DepotAccount"
                    },
                    "offlineAccount": {
                        "$ref": "#/components/schemas/DepotAccount"
                    },
                    "depotConfiguration": {
                        "$ref": "#/components/schemas/DepotConfiguration"
                    }
                },
                "description": "VMware Depot Settings. At least one of vmwareAccount, dellEmcSupportAccount or offlineAccount value must be provided"
            },
            "NtpConfiguration": {
                "required": [
                    "ntpServers"
                ],
                "type": "object",
                "properties": {
                    "ntpServers": {
                        "type": "array",
                        "description": "List of NTP servers",
                        "items": {
                            "$ref": "#/components/schemas/NtpServer"
                        }
                    }
                },
                "description": "NTP Configuration"
            },
            "NtpServer": {
                "required": [
                    "ipAddress"
                ],
                "type": "object",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "description": "IP address/FQDN of NTP server",
                        "example": "10.0.0.250"
                    }
                },
                "description": "NTP server details"
            },
            "DnsConfiguration": {
                "required": [
                    "dnsServers"
                ],
                "type": "object",
                "properties": {
                    "dnsServers": {
                        "type": "array",
                        "description": "List of DNS servers. A maximum of 2 DNS servers are allowed",
                        "items": {
                            "$ref": "#/components/schemas/DnsServer"
                        }
                    }
                },
                "description": "DNS Configuration"
            },
            "DnsServer": {
                "required": [
                    "ipAddress",
                    "isPrimary"
                ],
                "type": "object",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "description": "IP address/FQDN of DNS server",
                        "example": "10.0.0.250"
                    },
                    "isPrimary": {
                        "type": "boolean",
                        "description": "Is DNS server primary"
                    }
                },
                "description": "DNS server details"
            },
            "BackupConfigurationSpec": {
                "type": "object",
                "properties": {
                    "encryption": {
                        "$ref": "#/components/schemas/Encryption"
                    },
                    "backupLocations": {
                        "type": "array",
                        "description": "List of backup locations",
                        "items": {
                            "$ref": "#/components/schemas/BackupLocation"
                        }
                    },
                    "backupSchedules": {
                        "type": "array",
                        "description": "List of backup schedules",
                        "items": {
                            "$ref": "#/components/schemas/BackupSchedule"
                        }
                    }
                },
                "description": "Backup configuration Specification"
            },
            "BackupLocation": {
                "required": [
                    "directoryPath",
                    "port",
                    "protocol",
                    "server",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "server": {
                        "type": "string",
                        "description": "IP address or FQDN  of the backup server"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port number for the backup server to connect",
                        "format": "int32"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol to be used for transferring files",
                        "example": "SFTP"
                    },
                    "username": {
                        "type": "string",
                        "description": "Backup server username"
                    },
                    "password": {
                        "type": "string",
                        "description": "Backup server password"
                    },
                    "directoryPath": {
                        "type": "string",
                        "description": "Full directory path to save the backup files"
                    },
                    "sshFingerprint": {
                        "type": "string",
                        "description": "SSH fingerprint of the backup server"
                    }
                },
                "description": "Backup location to backup VCF resources"
            },
            "BackupRetentionPolicy": {
                "required": [
                    "numberOfMostRecentBackups"
                ],
                "type": "object",
                "properties": {
                    "numberOfMostRecentBackups": {
                        "maximum": 600,
                        "minimum": 1,
                        "type": "integer",
                        "description": "This attribute controls the number of recent backup files to retain. Range 1 to 600 backup files.",
                        "format": "int32",
                        "example": 15
                    },
                    "numberOfDaysOfHourlyBackups": {
                        "maximum": 14,
                        "minimum": 0,
                        "type": "integer",
                        "description": "This attribute controls the number of hourly backup files to retain, measured in days. Range 0 to 14 days. The system will filter the existing backup files, and retain one for every hour for the specified number of days, counting back from the most recent backup.",
                        "format": "int32",
                        "example": 10
                    },
                    "numberOfDaysOfDailyBackups": {
                        "maximum": 30,
                        "minimum": 0,
                        "type": "integer",
                        "description": "This attribute controls the number of daily backup files to retain, measured in days. Range 0 to 30 days. The system will filter the existing backup files, and retain one for every day for the specified number of days, counting back from the most recent backup.",
                        "format": "int32",
                        "example": 20
                    }
                },
                "description": "Backup retention policy for SDDC Manager comprising three attributes. Backup files are deleted if they do not satisfy any of the three attributes."
            },
            "BackupSchedule": {
                "required": [
                    "frequency",
                    "resourceType"
                ],
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "Resource type to configure backup schedule",
                        "example": "SDDC_MANAGER"
                    },
                    "takeScheduledBackups": {
                        "type": "boolean",
                        "description": "Enable/disable scheduled backups",
                        "example": true
                    },
                    "frequency": {
                        "type": "string",
                        "description": "Backup frequency",
                        "example": "One among: WEEKLY, HOURLY"
                    },
                    "daysOfWeek": {
                        "type": "array",
                        "description": "List of days of the week to schedule backup",
                        "example": "One among: SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY",
                        "items": {
                            "type": "string",
                            "description": "List of days of the week to schedule backup",
                            "example": "One among: SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY"
                        }
                    },
                    "hourOfDay": {
                        "type": "integer",
                        "description": "Hour of the day to schedule backup",
                        "format": "int32"
                    },
                    "minuteOfHour": {
                        "type": "integer",
                        "description": "Minute of the hour to schedule backup",
                        "format": "int32"
                    },
                    "takeBackupOnStateChange": {
                        "type": "boolean",
                        "description": "Enable/disable backups on state change. If enabled, SDDC Manager will take a backup after the successful completion of an operation that changes its state. This mode requires that scheduled backups be enabled.",
                        "example": true
                    },
                    "retentionPolicy": {
                        "$ref": "#/components/schemas/BackupRetentionPolicy"
                    }
                },
                "description": "Backup schedule configuration",
                "readOnly": true
            },
            "Encryption": {
                "required": [
                    "passphrase"
                ],
                "type": "object",
                "properties": {
                    "passphrase": {
                        "type": "string",
                        "description": "Passphrase"
                    }
                },
                "description": "Restore Specification",
                "readOnly": true
            },
            "Validation": {
                "required": [
                    "description",
                    "executionStatus",
                    "id",
                    "resultStatus"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the validation",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the validation",
                        "readOnly": true
                    },
                    "executionStatus": {
                        "type": "string",
                        "description": "Execution status of the validation. One among: IN_PROGRESS, FAILED, COMPLETED, UNKNOWN, SKIPPED, CANCELLED, CANCELLATION_IN_PROGRESS",
                        "readOnly": true,
                        "example": "COMPLETED"
                    },
                    "resultStatus": {
                        "type": "string",
                        "description": "Result status of the validation after it has completed its execution. One among: SUCCEEDED, FAILED, FAILED_WITH_WARNINGS, UNKNOWN, CANCELLATION_IN_PROGRESS",
                        "readOnly": true,
                        "example": "SUCCEEDED"
                    },
                    "validationChecks": {
                        "type": "array",
                        "description": "List of one or more validation checks that are performed as part of the validation",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ValidationCheck"
                        }
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "description": "Represents a validation with a list of one or more validation checks that are performed as part of the validation"
            },
            "ValidationCheck": {
                "required": [
                    "description",
                    "resultStatus",
                    "severity"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the validation check",
                        "readOnly": true
                    },
                    "severity": {
                        "type": "string",
                        "description": "Severity of the validation check",
                        "readOnly": true,
                        "example": "One among: WARNING, ERROR, INFO"
                    },
                    "resultStatus": {
                        "type": "string",
                        "description": "Result status of the validation check after it has completed its execution",
                        "example": "One among: IN_PROGRESS, SUCCEEDED, FAILED, SKIPPED, CANCELLED, CANCELLATION_IN_PROGRESS"
                    },
                    "errorResponse": {
                        "$ref": "#/components/schemas/Error"
                    }
                },
                "description": "Represents a validation check",
                "readOnly": true
            },
            "LicensingSpec": {
                "required": [
                    "resourceLicensingInfos"
                ],
                "type": "object",
                "properties": {
                    "resourceLicensingInfos": {
                        "type": "array",
                        "description": "List of LicensingInfos of resources",
                        "items": {
                            "$ref": "#/components/schemas/ResourceLicensingInfo"
                        }
                    }
                },
                "description": "License Information of resources"
            },
            "ProductInfo": {
                "type": "object",
                "properties": {
                    "licenseKey": {
                        "type": "string",
                        "description": "License key of product",
                        "example": "XXXXX-XXXXX-XXXXX-XXXXX-XXXXX"
                    },
                    "type": {
                        "type": "string",
                        "description": "Product type",
                        "example": "One among: VCENTER, NSXT, VSAN, WCP, ESXI"
                    },
                    "licensingMode": {
                        "type": "string",
                        "description": "Licensing Mode",
                        "readOnly": true,
                        "example": "One among: SUBSCRIPTION, PERPETUAL, MIXED"
                    },
                    "licenseKeyStatus": {
                        "type": "string",
                        "description": "License key status",
                        "readOnly": true,
                        "example": "One among: EXPIRED, ACTIVE, NEVER_EXPIRES"
                    },
                    "licenseKeyExpirationDate": {
                        "type": "string",
                        "description": "License key expiration date",
                        "readOnly": true,
                        "example": "2021-04-08T04:37:51.662Z"
                    },
                    "errorResponse": {
                        "$ref": "#/components/schemas/Error"
                    }
                },
                "description": "Product Info and License Key Info"
            },
            "ResourceInfo": {
                "required": [
                    "domainId"
                ],
                "type": "object",
                "properties": {
                    "domainId": {
                        "type": "string",
                        "description": "Domain Identifier",
                        "example": "f0bf0f65-f719-4c2d-980a-29a9094045b5"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Cluster Id of resourceInfo",
                        "example": "a0bf0f65-f719-4c2d-980a-29a9094045b5"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "Host Id of resourceInfo",
                        "example": "b0bf0f65-f719-4c2d-980a-29a9094045b5"
                    }
                },
                "description": "Resource info"
            },
            "ResourceLicensingInfo": {
                "required": [
                    "resourceInfo"
                ],
                "type": "object",
                "properties": {
                    "resourceInfo": {
                        "$ref": "#/components/schemas/ResourceInfo"
                    },
                    "productInfo": {
                        "$ref": "#/components/schemas/ProductInfo"
                    }
                },
                "description": "Resource Licensing Info",
                "readOnly": true
            },
            "TagAssignmentResult": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "Success value of Assign/Detach Tags operation"
                    },
                    "defaultErrorMessages": {
                        "type": "array",
                        "description": "Default Error messages for Assign/Detach Tags operation",
                        "items": {
                            "type": "string",
                            "description": "Default Error messages for Assign/Detach Tags operation"
                        }
                    }
                },
                "description": "Represents a Tag Assignment Result"
            },
            "TagsSpec": {
                "required": [
                    "tagIds"
                ],
                "type": "object",
                "properties": {
                    "tagIds": {
                        "type": "array",
                        "description": "Tag IDs",
                        "items": {
                            "type": "string",
                            "description": "Tag IDs"
                        }
                    }
                },
                "description": "Tags Spec"
            },
            "ResourceCertificateSpec": {
                "type": "object",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "Resource ID",
                        "example": "BE8A5E04-92A0-43F6-A166-AA041F4327CC"
                    },
                    "resourceFqdn": {
                        "type": "string",
                        "description": "Resource FQDN",
                        "example": "sfo-vc01.rainpole.io"
                    },
                    "resourceCertificate": {
                        "type": "string",
                        "description": "Resource Certificate",
                        "example": "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----"
                    },
                    "caCertificate": {
                        "type": "string",
                        "description": "CA Certificate",
                        "example": "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----"
                    },
                    "certificateChain": {
                        "type": "string",
                        "description": "Certificate Chain",
                        "example": "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----"
                    }
                },
                "description": "This specification contains resource certificate details. Either resourceId or resourceFqdn should be provided. Either certificateChain or both resourceCertificate and caCertificate should be provided."
            },
            "CertificateValidation": {
                "required": [
                    "resourceFqdn",
                    "resourceId",
                    "startTimestamp",
                    "validationStatus"
                ],
                "type": "object",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "Resource ID",
                        "example": "BE8A5E04-92A0-43F6-A166-AA041F4327CC"
                    },
                    "resourceFqdn": {
                        "type": "string",
                        "description": "Resource FQDN",
                        "example": "sfo-vc01.rainpole.io"
                    },
                    "startTimestamp": {
                        "type": "string",
                        "description": "Start Timestamp",
                        "example": "2020-01-01T00:00:00.000Z"
                    },
                    "endTimestamp": {
                        "type": "string",
                        "description": "End Timestamp",
                        "example": "2021-02-02T00:00:00.000Z"
                    },
                    "validationStatus": {
                        "type": "string",
                        "description": "Validation Status",
                        "example": "One among: INPROGRESS, SUCCESSFUL, FAILED"
                    },
                    "validationMessage": {
                        "type": "string",
                        "description": "Validation Message",
                        "example": "Certificate Expired"
                    }
                },
                "description": "The Certificate Validation details."
            },
            "CertificateValidationTask": {
                "required": [
                    "completed",
                    "validationId",
                    "validations"
                ],
                "type": "object",
                "properties": {
                    "validationId": {
                        "type": "string",
                        "description": "Validation ID",
                        "example": "B1930850-7D1A-4BAA-89D7-52FD5DAD196A"
                    },
                    "startTimestamp": {
                        "type": "string",
                        "description": "Validation Task Start Time",
                        "example": "2021-02-02T00:00:00.000Z"
                    },
                    "endTimestamp": {
                        "type": "string",
                        "description": "Validation Task End Time",
                        "example": "2021-02-02T00:00:00.000Z"
                    },
                    "completed": {
                        "type": "boolean",
                        "description": "Validation Task Completed",
                        "example": false
                    },
                    "validations": {
                        "type": "array",
                        "description": "Resource Certificate Validations",
                        "items": {
                            "$ref": "#/components/schemas/CertificateValidation"
                        }
                    }
                },
                "description": "The Certificate Validation Task."
            },
            "CsrGenerationSpec": {
                "required": [
                    "country",
                    "keyAlgorithm",
                    "keySize",
                    "locality",
                    "organization",
                    "organizationUnit",
                    "state"
                ],
                "type": "object",
                "properties": {
                    "country": {
                        "type": "string",
                        "description": "ISO 3166 country code where company is legally registered",
                        "example": "IN"
                    },
                    "state": {
                        "type": "string",
                        "description": "The full name of the state where company is legally registered",
                        "example": "Karnataka"
                    },
                    "locality": {
                        "type": "string",
                        "description": "The city or locality where company is legally registered",
                        "example": "Bengaluru"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The name under which company is legally registered",
                        "example": "VMware Inc."
                    },
                    "organizationUnit": {
                        "type": "string",
                        "description": "Organization with which the certificate is associated",
                        "example": "VCF"
                    },
                    "email": {
                        "type": "string",
                        "description": "Contact email address",
                        "example": "admin@vmware.com"
                    },
                    "keySize": {
                        "type": "string",
                        "description": "Certificate public key size",
                        "example": "One among: 2048, 3072, 4096"
                    },
                    "keyAlgorithm": {
                        "type": "string",
                        "description": "The public key algorithm of the certificate",
                        "example": "One among: RSA"
                    }
                },
                "description": "This specification contains Certificate Signing Request (CSR) details"
            },
            "CsrsGenerationSpec": {
                "required": [
                    "csrGenerationSpec"
                ],
                "type": "object",
                "properties": {
                    "csrGenerationSpec": {
                        "$ref": "#/components/schemas/CsrGenerationSpec"
                    },
                    "resources": {
                        "type": "array",
                        "description": "Resource(s) in a domain",
                        "items": {
                            "$ref": "#/components/schemas/Resource"
                        }
                    }
                },
                "description": "This specification contains CSR Generation request details"
            },
            "CertificatesGenerationSpec": {
                "required": [
                    "caType"
                ],
                "type": "object",
                "properties": {
                    "caType": {
                        "type": "string",
                        "description": "CA type. Only supports Microsoft and OpenSSL CAs",
                        "example": "One among: OpenSSL, Microsoft"
                    },
                    "resources": {
                        "type": "array",
                        "description": "Resource(s) in a domain",
                        "items": {
                            "$ref": "#/components/schemas/Resource"
                        }
                    }
                },
                "description": "This specification contains certificates generation request details"
            },
            "CertificateAuthorityCreationSpec": {
                "type": "object",
                "properties": {
                    "openSSLCertificateAuthoritySpec": {
                        "$ref": "#/components/schemas/OpenSSLCertificateAuthoritySpec"
                    },
                    "microsoftCertificateAuthoritySpec": {
                        "$ref": "#/components/schemas/MicrosoftCertificateAuthoritySpec"
                    }
                },
                "description": "This specification contains Certificate Authority (CA) creation details. Either openSSLCertificateAuthoritySpec or microsoftCertificateAuthoritySpec should be specified."
            },
            "MicrosoftCertificateAuthoritySpec": {
                "required": [
                    "secret",
                    "serverUrl",
                    "templateName",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "CA server username",
                        "example": "Administrator"
                    },
                    "secret": {
                        "type": "string",
                        "description": "CA server password",
                        "example": "********"
                    },
                    "serverUrl": {
                        "type": "string",
                        "description": "CA server url",
                        "example": "https://sfo-ad.rainpole.io/certsrv"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "CA server template name",
                        "example": "WebServer"
                    }
                },
                "description": "This specification contains Microsoft CA configuration details"
            },
            "OpenSSLCertificateAuthoritySpec": {
                "required": [
                    "commonName",
                    "country",
                    "locality",
                    "organization",
                    "organizationUnit",
                    "state"
                ],
                "type": "object",
                "properties": {
                    "commonName": {
                        "maxLength": 64,
                        "minLength": 0,
                        "type": "string",
                        "description": "OpenSSL CA domain name",
                        "example": "OpenSSL CA"
                    },
                    "country": {
                        "maxLength": 2,
                        "minLength": 2,
                        "type": "string",
                        "description": "ISO 3166 country code where company is legally registered",
                        "example": "IN"
                    },
                    "state": {
                        "maxLength": 128,
                        "minLength": 0,
                        "type": "string",
                        "description": "The full name of the state where company is legally registered",
                        "example": "Karnataka"
                    },
                    "locality": {
                        "maxLength": 128,
                        "minLength": 0,
                        "type": "string",
                        "description": "The city or locality where company is legally registered",
                        "example": "Bengaluru"
                    },
                    "organization": {
                        "maxLength": 64,
                        "minLength": 0,
                        "type": "string",
                        "description": "The name under which company is legally registered",
                        "example": "VMware Inc."
                    },
                    "organizationUnit": {
                        "maxLength": 64,
                        "minLength": 0,
                        "type": "string",
                        "description": "Organization with which the certificate is associated",
                        "example": "VCF"
                    }
                },
                "description": "This specification contains OpenSSL CA configuration details"
            },
            "VrslcmDeploymentSpec": {
                "required": [
                    "apiPassword",
                    "fqdn",
                    "nsxtStandaloneTier1Ip",
                    "sshPassword"
                ],
                "type": "object",
                "properties": {
                    "fqdn": {
                        "type": "string",
                        "description": "Fully Qualified Domain Name",
                        "example": "vrslcm.vrack.vsphere.local"
                    },
                    "sshPassword": {
                        "type": "string",
                        "description": "The password for a root user of VMware Aria Suite Lifecycle appliance"
                    },
                    "apiPassword": {
                        "type": "string",
                        "description": "The password for an admin API/UI user of VMware Aria Suite Lifecycle"
                    },
                    "nsxtStandaloneTier1Ip": {
                        "type": "string",
                        "description": "The IP to use for deploying a new standalone Tier-1 router in NSX. This router will be used subsequently for VMware Aria load balancers."
                    }
                },
                "description": "VMware Aria Suite Lifecycle Deployment Specification"
            },
            "StorageContainer": {
                "required": [
                    "name",
                    "protocolType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the storage container",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the storage container"
                    },
                    "protocolType": {
                        "type": "string",
                        "description": "Storage protocol type",
                        "example": "One among: ISCSI, FC, NFS"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "ID of the cluster which is using the storage container",
                        "readOnly": true
                    }
                },
                "description": "Storage container representation"
            },
            "VasaProvider": {
                "required": [
                    "name",
                    "storageContainers",
                    "url",
                    "users"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the VASA Provider",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the VASA Provider"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the VASA Provider"
                    },
                    "storageContainers": {
                        "type": "array",
                        "description": "List of storage containers associated with the VASA Provider",
                        "items": {
                            "$ref": "#/components/schemas/StorageContainer"
                        }
                    },
                    "users": {
                        "type": "array",
                        "description": "List of users associated with the VASA Provider",
                        "items": {
                            "$ref": "#/components/schemas/VasaUser"
                        }
                    }
                },
                "description": "VASA Provider representation"
            },
            "VasaUser": {
                "required": [
                    "password",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the VASA User",
                        "readOnly": true
                    },
                    "username": {
                        "type": "string",
                        "description": "VASA User name"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password"
                    }
                },
                "description": "VASA User representation"
            },
            "RoleReference": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the role"
                    }
                },
                "description": "Represents a role reference"
            },
            "User": {
                "required": [
                    "name",
                    "role",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the user"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of the user"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the user",
                        "example": "One among: USER, GROUP, SERVICE"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "The API key of the user"
                    },
                    "role": {
                        "$ref": "#/components/schemas/RoleReference"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "The timestamp at which the user was created"
                    }
                },
                "description": "Represents user and its attributes",
                "readOnly": true
            },
            "ErrorResponse": {
                "type": "object",
                "properties": {
                    "errorCode": {
                        "type": "string"
                    },
                    "arguments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "context": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "message": {
                        "type": "string"
                    },
                    "remediationMessage": {
                        "type": "string"
                    },
                    "cause": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ErrorCause"
                        }
                    },
                    "nestedErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    },
                    "referenceToken": {
                        "type": "string"
                    }
                }
            },
            "PageOfUser": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/User"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "CustomISOSpec": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Custom ISO Id for VUM Clusters Upgrade"
                    }
                },
                "description": "Custom ISO Specifications for VUM Clusters Upgrade with Custom ISO"
            },
            "EsxUpgradeFailureAction": {
                "required": [
                    "action",
                    "retryCount",
                    "retryDelay"
                ],
                "type": "object",
                "properties": {
                    "retryDelay": {
                        "type": "integer",
                        "description": "Time to wait before we retry the failed operation in seconds. If action is RETRY, the value should be between 300 and 3600 seconds. If action is FAIL, the value should not be set.",
                        "format": "int64"
                    },
                    "retryCount": {
                        "type": "integer",
                        "description": "Number of times to retry the failed operation. If the action is RETRY, the value should be between 3 and 100. If the action is FAIL, the value should not be set.",
                        "format": "int64"
                    },
                    "action": {
                        "type": "string",
                        "description": "Action to be taken if entering maintenance mode fails for a host",
                        "example": "FAIL, RETRY"
                    }
                },
                "description": "Esx Upgrade failure actions to be taken if host entering maintenance mode failed during esx cluster upgrade"
            },
            "EsxUpgradeOptionsSpec": {
                "type": "object",
                "properties": {
                    "esxUpgradeFailureAction": {
                        "$ref": "#/components/schemas/EsxUpgradeFailureAction"
                    },
                    "enforceHclValidation": {
                        "type": "boolean",
                        "description": "Flag for enforcing HCL validation for ESXi upgrade, when applicable, to prevent remediation if hardware compatibility issues are found."
                    },
                    "enableQuickPatch": {
                        "type": "boolean",
                        "description": "Flag for enabling quick patch policy for ESXi upgrade, when applicable, to do live remediation and not require full maintenance mode or reboot. This option is only applicable to vLCM based ESXi upgrade."
                    },
                    "enableQuickboot": {
                        "type": "boolean",
                        "description": "Flag for requesting Quick Boot"
                    },
                    "evacuateOfflineVms": {
                        "type": "boolean",
                        "description": "Flag for requesting Evacuation of Offline VMs"
                    },
                    "disableHac": {
                        "type": "boolean",
                        "description": "Flag for disabling HA admission control on the cluster."
                    },
                    "disableDpm": {
                        "type": "boolean",
                        "description": "Flag for disabling DPM on the cluster."
                    },
                    "preRemediationPowerAction": {
                        "type": "string",
                        "description": "Flag for setting VM power state before entering maintenance mode.",
                        "example": "POWER_OFF_VMS, SUSPEND_VMS, DO_NOT_CHANGE_VMS_POWER_STATE, SUSPEND_VMS_TO_MEMORY"
                    }
                },
                "description": "Options for ESXi upgrade. These are applicable to vSphere Lifecycle Manager Images based upgrade only."
            },
            "HardwareSupportSpec": {
                "required": [
                    "name",
                    "packageSpec"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Hardware Support Manager name"
                    },
                    "packageSpec": {
                        "$ref": "#/components/schemas/PackageSpec"
                    }
                },
                "description": "Hardware Support Specification for Firmware Upgrade"
            },
            "NsxtEdgeClusterUpgradeSpec": {
                "required": [
                    "edgeClusterId"
                ],
                "type": "object",
                "properties": {
                    "edgeClusterId": {
                        "type": "string",
                        "description": "Resource ID of the edge transport node cluster"
                    },
                    "edgeParallelUpgrade": {
                        "type": "boolean",
                        "description": "disable/enable parallel upgrade of edges within the cluster"
                    }
                },
                "description": "Host transport node cluster upgrade input"
            },
            "NsxtHostClusterUpgradeSpec": {
                "required": [
                    "hostClusterId"
                ],
                "type": "object",
                "properties": {
                    "hostClusterId": {
                        "type": "string",
                        "description": "Resource ID of the host transport node cluster"
                    },
                    "hostParallelUpgrade": {
                        "type": "boolean",
                        "description": "Flag for disabling/enabling parallel upgrade within the cluster"
                    },
                    "liveUpgrade": {
                        "type": "boolean",
                        "description": "Flag for disabling/enabling live upgrade of hosts in the transportnode clusters"
                    }
                },
                "description": "Host trnasport node cluster upgrade input"
            },
            "NsxtUpgradeOptions": {
                "type": "object",
                "properties": {
                    "isEdgeOnlyUpgrade": {
                        "type": "boolean",
                        "description": "Flag for performing edge-only upgrade"
                    },
                    "isHostClustersUpgradeParallel": {
                        "type": "boolean",
                        "description": "Flag for disabling/enabling parallel upgrade of host transportnode clusters"
                    },
                    "isEdgeClustersUpgradeParallel": {
                        "type": "boolean",
                        "description": "Flag for disabling/enabling parallel upgrade of edge transportnode clusters"
                    }
                },
                "description": "NSX Upgrade options"
            },
            "NsxtUpgradeUserInputSpec": {
                "type": "object",
                "properties": {
                    "nsxtHostClusterUpgradeSpecs": {
                        "type": "array",
                        "description": "List of host clusters information if explicit selection is to be made",
                        "items": {
                            "$ref": "#/components/schemas/NsxtHostClusterUpgradeSpec"
                        }
                    },
                    "nsxtEdgeClusterUpgradeSpecs": {
                        "type": "array",
                        "description": "List of edge clusters information if explicit selection is to be made",
                        "items": {
                            "$ref": "#/components/schemas/NsxtEdgeClusterUpgradeSpec"
                        }
                    },
                    "nsxtUpgradeOptions": {
                        "$ref": "#/components/schemas/NsxtUpgradeOptions"
                    },
                    "nsxtId": {
                        "type": "string",
                        "description": "Identifier of the NSX instance"
                    }
                },
                "description": "NSX Upgrade User Input Specification"
            },
            "PackageSpec": {
                "required": [
                    "name",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Package name"
                    },
                    "version": {
                        "type": "string",
                        "description": "Package version"
                    }
                },
                "description": "Hardware Support Package Specification"
            },
            "PersonalitySpec": {
                "required": [
                    "personalityId"
                ],
                "type": "object",
                "properties": {
                    "personalityId": {
                        "type": "string",
                        "description": "Personality ID for vLCM based Upgrade"
                    },
                    "hardwareSupportSpecs": {
                        "type": "array",
                        "description": "Hardware Support Specifications for Firmware upgrade",
                        "items": {
                            "$ref": "#/components/schemas/HardwareSupportSpec"
                        }
                    }
                },
                "description": "Personality Specification for vLCM based upgrade"
            },
            "ResourceUpgradeSpec": {
                "required": [
                    "resourceId"
                ],
                "type": "object",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "Resource ID for Upgrade"
                    },
                    "shutdownVms": {
                        "type": "boolean",
                        "description": "If Resource Type is UNASSIGNED_HOST, set flag for enabling shutting down VM's before Upgrade"
                    },
                    "toVersion": {
                        "type": "string",
                        "description": "If Resource Type is UNASSIGNED_HOST, set the target version for Upgrade"
                    },
                    "scheduledTimestamp": {
                        "type": "string",
                        "description": "Upgrade Scheduled Time"
                    },
                    "upgradeNow": {
                        "type": "boolean",
                        "description": "Flag for enabling Upgrade Now. If true, scheduledTimestamp is ignored"
                    },
                    "personalitySpec": {
                        "$ref": "#/components/schemas/PersonalitySpec"
                    },
                    "customIsoSpec": {
                        "$ref": "#/components/schemas/CustomISOSpec"
                    },
                    "enableQuickboot": {
                        "type": "boolean",
                        "description": "Flag for requesting Quick Boot for ESXi upgrade",
                        "deprecated": true
                    },
                    "evacuateOfflineVms": {
                        "type": "boolean",
                        "description": "Flag for requesting Evacuation of Offline VMs for ESXi upgrade",
                        "deprecated": true
                    },
                    "esxUpgradeOptionsSpec": {
                        "$ref": "#/components/schemas/EsxUpgradeOptionsSpec"
                    }
                },
                "description": "Resource Upgrade Specification"
            },
            "TemporaryNetwork": {
                "type": "object",
                "properties": {
                    "networkMode": {
                        "type": "string",
                        "description": "Network mode for target vCenter server",
                        "example": "One among: STATIC, AUTOMATIC"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP Address for vCenter Upgrade temporary network"
                    },
                    "subnetMask": {
                        "type": "string",
                        "description": "Subnet Mask for vCenter Upgrade temporary network"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "Gateway for vCenter Upgrade temporary network"
                    }
                },
                "description": "Temporary Network for vCenter Upgrade"
            },
            "UpgradeSpec": {
                "required": [
                    "bundleId",
                    "resourceType",
                    "resourceUpgradeSpecs"
                ],
                "type": "object",
                "properties": {
                    "bundleId": {
                        "type": "string",
                        "description": "Bundle ID for Upgrade"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Resource Type for Upgrade",
                        "example": "One among: DOMAIN, CLUSTER, UNASSIGNED_HOST"
                    },
                    "parallelUpgrade": {
                        "type": "boolean",
                        "description": "Boolean to represent components will be upgraded in parallel on not"
                    },
                    "draftMode": {
                        "type": "boolean",
                        "description": "Boolean to represent upgrade will be created in DRAFT mode. This allows to run prechecks before user confirm/commit the upgrade."
                    },
                    "resourceUpgradeSpecs": {
                        "type": "array",
                        "description": "Resource Upgrade Specifications",
                        "items": {
                            "$ref": "#/components/schemas/ResourceUpgradeSpec"
                        }
                    },
                    "nsxtUpgradeUserInputSpecs": {
                        "type": "array",
                        "description": "Resource Upgrade Specifications for NSX upgrade",
                        "items": {
                            "$ref": "#/components/schemas/NsxtUpgradeUserInputSpec"
                        }
                    },
                    "vcenterUpgradeUserInputSpecs": {
                        "type": "array",
                        "description": "User Input for vCenter upgrade",
                        "items": {
                            "$ref": "#/components/schemas/VcenterUpgradeUserInputSpec"
                        }
                    }
                },
                "description": "Upgrade Specification"
            },
            "VcenterUpgradeUserInputSpec": {
                "required": [
                    "temporaryNetwork"
                ],
                "type": "object",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "Resource ID for Upgrade"
                    },
                    "upgradeMechanism": {
                        "type": "string",
                        "description": "vCenter upgrade mechanism. This field is only supported for vCenter patch upgrades. Minimum supported vCenter target version is 8.0 Update 3b",
                        "example": "One among: ReducedDowntimeMigration, InPlace"
                    },
                    "startSwitchoverTimestamp": {
                        "type": "string",
                        "description": "Start switchover time. This field is only supported for ReducedDowntimeMigration upgrade mechanism"
                    },
                    "temporaryNetwork": {
                        "$ref": "#/components/schemas/TemporaryNetwork"
                    }
                },
                "description": "vCenter Upgrade User Input Specification"
            },
            "TokenCreationSpec": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Username"
                    },
                    "password": {
                        "type": "string",
                        "description": "User Password"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API Key"
                    },
                    "idToken": {
                        "type": "string",
                        "description": "Id Token"
                    }
                },
                "description": "The spec used to sign the token"
            },
            "RefreshToken": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Refresh token id that can be used to request new access token"
                    }
                },
                "description": "This contains refresh token id for the user API access."
            },
            "TokenPair": {
                "type": "object",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Bearer token that can be used to make public API calls"
                    },
                    "refreshToken": {
                        "$ref": "#/components/schemas/RefreshToken"
                    }
                },
                "description": "This contains the access token and the refresh token for the user API access."
            },
            "Domains": {
                "type": "object",
                "properties": {
                    "domainName": {
                        "type": "string",
                        "description": "Domain name"
                    },
                    "clusterNames": {
                        "type": "array",
                        "description": "Clusters for the operation",
                        "items": {
                            "type": "string",
                            "description": "Clusters for the operation"
                        }
                    }
                },
                "description": "Domains and Clusters for SOS operation."
            },
            "Logs": {
                "type": "object",
                "properties": {
                    "vcLogs": {
                        "type": "boolean",
                        "description": "Collect vCenter Logs."
                    },
                    "nsxLogs": {
                        "type": "boolean",
                        "description": "Collect NSX Logs."
                    },
                    "esxLogs": {
                        "type": "boolean",
                        "description": "Collect ESX Logs."
                    },
                    "wcpLogs": {
                        "type": "boolean",
                        "description": "Collect WCP Logs."
                    },
                    "sddcManagerLogs": {
                        "type": "boolean",
                        "description": "Collect SDDC Manager Logs."
                    },
                    "apiLogs": {
                        "type": "boolean",
                        "description": "Collect API Logs."
                    },
                    "vxrailManagerLogs": {
                        "type": "boolean",
                        "description": "Collect VXRailManager Logs."
                    },
                    "systemDebugLogs": {
                        "type": "boolean",
                        "description": "Collect SystemDebug Logs."
                    },
                    "vmScreenshots": {
                        "type": "boolean",
                        "description": "Collect VMScreenshots."
                    },
                    "vraLogs": {
                        "type": "boolean",
                        "description": "[Deprecated] Collect VMware Aria Automation Logs.",
                        "deprecated": true
                    },
                    "vropsLogs": {
                        "type": "boolean",
                        "description": "[Deprecated] Collect VMware Aria Operations Logs.",
                        "deprecated": true
                    },
                    "vrliLogs": {
                        "type": "boolean",
                        "description": "[Deprecated] Collect VMware Aria Operations for Logs Logs.",
                        "deprecated": true
                    },
                    "vrslcmLogs": {
                        "type": "boolean",
                        "description": "[Deprecated] Collect VMware Aria Suite Lifecycle Logs.",
                        "deprecated": true
                    },
                    "automationLogs": {
                        "type": "boolean",
                        "description": "Collect VMware Aria Automation support logs."
                    },
                    "operationsLogs": {
                        "type": "boolean",
                        "description": "Collect VMware Aria Operations support logs."
                    },
                    "operationsForLogs": {
                        "type": "boolean",
                        "description": "Collect VMware Aria Operations For Logs support logs."
                    },
                    "lifecycleLogs": {
                        "type": "boolean",
                        "description": "Collect VMware Aria Suite Lifecycle support logs."
                    }
                },
                "description": "Logs of different components."
            },
            "SupportBundleConfig": {
                "type": "object",
                "properties": {
                    "skipKnownHostCheck": {
                        "type": "boolean",
                        "description": "Skip known_hosts file for SupportBundle collection."
                    },
                    "force": {
                        "type": "boolean",
                        "description": "Run SOS operations, even if there is a Workload running."
                    }
                },
                "description": "SupportBundle config."
            },
            "SupportBundleIncludeItems": {
                "type": "object",
                "properties": {
                    "summaryReport": {
                        "type": "boolean",
                        "description": "Collect Vcf Summary Reports."
                    },
                    "healthCheck": {
                        "type": "boolean",
                        "description": "Perform SOS Health checks."
                    }
                },
                "description": "Sos Additional Reports for Support Bundle."
            },
            "SupportBundleOption": {
                "type": "object",
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/SupportBundleConfig"
                    },
                    "include": {
                        "$ref": "#/components/schemas/SupportBundleIncludeItems"
                    }
                },
                "description": "Sos options for support bundle collection."
            },
            "SupportBundleScope": {
                "type": "object",
                "properties": {
                    "includeFreeHosts": {
                        "type": "boolean",
                        "description": "Include free hosts."
                    },
                    "domains": {
                        "type": "array",
                        "description": "Domains and Clusters for SOS operation.",
                        "items": {
                            "$ref": "#/components/schemas/Domains"
                        }
                    }
                },
                "description": "Domain and cluster under which logs should be collected."
            },
            "SupportBundleSpec": {
                "type": "object",
                "properties": {
                    "options": {
                        "$ref": "#/components/schemas/SupportBundleOption"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/SupportBundleScope"
                    },
                    "logs": {
                        "$ref": "#/components/schemas/Logs"
                    }
                }
            },
            "SupportBundle": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Support Bundle Status.",
                        "example": "One among: IN_PROGRESS, PENDING, COMPLETED_WITH_SUCCESS, COMPLETED_WITH_FAILURE"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "CreationTimestamp."
                    },
                    "description": {
                        "type": "string",
                        "description": "Name of the Operation."
                    },
                    "bundleAvailable": {
                        "type": "string",
                        "description": "Indicate if bundle is available in file system."
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the Support Bundle task."
                    },
                    "completionTimestamp": {
                        "type": "string",
                        "description": "CompletionTimestamp."
                    },
                    "bundleName": {
                        "type": "string",
                        "description": "Name of the Support Bundle."
                    }
                }
            },
            "DnsSpec": {
                "required": [
                    "subdomain"
                ],
                "type": "object",
                "properties": {
                    "subdomain": {
                        "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
                        "type": "string",
                        "description": "Tenant Sub domain. Includes the full domain suffix",
                        "example": "vcf.vmware.com"
                    },
                    "domain": {
                        "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
                        "type": "string",
                        "description": "Tenant domain. Parent tenant domain including TLD suffix. This property is deprecated in favor of subdomain.",
                        "example": "vmware.com",
                        "deprecated": true
                    },
                    "nameserver": {
                        "type": "string",
                        "description": "Primary nameserver to be configured for vCenter/ESXi's/NSX. Deprecated in favor of 'nameservers'",
                        "example": "172.0.0.4",
                        "deprecated": true
                    },
                    "secondaryNameserver": {
                        "type": "string",
                        "description": "Secondary nameserver to be configured for vCenter/ESXi's/NSX. Deprecated in favor of 'nameservers'",
                        "example": "172.0.0.5",
                        "deprecated": true
                    },
                    "nameservers": {
                        "type": "array",
                        "description": "Nameservers to be configured for vCenter/ESXi's/NSX. The first is the primary nameserver. Maximum allowed is two entries",
                        "example": "[172.0.0.4, 172.0.0.5]",
                        "items": {
                            "type": "string",
                            "description": "Nameservers to be configured for vCenter/ESXi's/NSX. The first is the primary nameserver. Maximum allowed is two entries",
                            "example": "[172.0.0.4, 172.0.0.5]"
                        }
                    }
                },
                "description": "Spec contains parameters of Domain Name System"
            },
            "DvsSpec": {
                "type": "object",
                "properties": {
                    "dvsName": {
                        "type": "string",
                        "description": "vSphere Distributed Switch Name. It will be auto-generated if blank",
                        "example": "VdsName"
                    },
                    "vmnics": {
                        "type": "array",
                        "description": "Vmnics to be attached to the DVS. \nThis property is deprecated in favor of vmnicsToUplinks fields",
                        "deprecated": true,
                        "items": {
                            "type": "string",
                            "description": "Vmnics to be attached to the DVS. \nThis property is deprecated in favor of vmnicsToUplinks fields",
                            "deprecated": true
                        }
                    },
                    "networks": {
                        "type": "array",
                        "description": "Types of networks in this Distributed vSphere Switch. One among: VSAN, VMOTION, MANAGEMENT, VM_MANAGEMENT or any custom network types defined in networkSpecs",
                        "example": "MANAGEMENT",
                        "items": {
                            "type": "string",
                            "description": "Types of networks in this Distributed vSphere Switch. One among: VSAN, VMOTION, MANAGEMENT, VM_MANAGEMENT or any custom network types defined in networkSpecs",
                            "example": "MANAGEMENT"
                        }
                    },
                    "niocSpecs": {
                        "type": "array",
                        "description": "List of Network IO Control Specification for networks",
                        "items": {
                            "$ref": "#/components/schemas/NiocSpec"
                        }
                    },
                    "mtu": {
                        "maximum": 9000,
                        "minimum": 1500,
                        "type": "integer",
                        "description": "Distributed vSphere Switch MTU (default value is 9000)",
                        "format": "int32",
                        "example": 9000
                    },
                    "isUsedByNsxt": {
                        "type": "boolean",
                        "description": "Flag indicating whether the Distributed vSphere Switch is used by NSX.\nThis property is deprecated in favor of nsxtSwitchConfig field",
                        "example": true,
                        "deprecated": true
                    },
                    "nsxtSwitchConfig": {
                        "$ref": "#/components/schemas/NsxtSwitchConfig"
                    },
                    "vmnicsToUplinks": {
                        "type": "array",
                        "description": "List of vmnic to uplink mapping",
                        "items": {
                            "$ref": "#/components/schemas/VmnicToUplink"
                        }
                    },
                    "nsxTeamings": {
                        "maxItems": 1,
                        "minItems": 0,
                        "type": "array",
                        "description": "The teaming policies to be associated with the uplink profile in NSX",
                        "items": {
                            "$ref": "#/components/schemas/TeamingSpec"
                        }
                    }
                },
                "description": "Spec contains parameters for DVS"
            },
            "IpAddressPoolRangeSpec": {
                "required": [
                    "end",
                    "start"
                ],
                "type": "object",
                "properties": {
                    "start": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "The first IP Address of the IP Address Range"
                    },
                    "end": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "The last IP Address of the IP Address Range"
                    }
                },
                "description": "This specification contains the parameters required to create an IP address range"
            },
            "IpAddressPoolSpec": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "pattern": "^[a-zA-Z0-9-_]+$",
                        "type": "string",
                        "description": "Name of the IP address pool"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the IP address pool"
                    },
                    "ignoreUnavailableNsxtCluster": {
                        "type": "boolean",
                        "description": "Ignore unavailable NSX cluster(s) during IP pool spec validation"
                    },
                    "subnets": {
                        "type": "array",
                        "description": "List of IP address pool subnet specification",
                        "items": {
                            "$ref": "#/components/schemas/IpAddressPoolSubnetSpec"
                        }
                    }
                },
                "description": "This specification contains the parameters required to create or reuse an IP address pool."
            },
            "IpAddressPoolSubnetSpec": {
                "required": [
                    "cidr",
                    "gateway",
                    "ipAddressPoolRanges"
                ],
                "type": "object",
                "properties": {
                    "ipAddressPoolRanges": {
                        "type": "array",
                        "description": "List of the IP allocation ranges. Atleast 1 IP address range has to be specified",
                        "items": {
                            "$ref": "#/components/schemas/IpAddressPoolRangeSpec"
                        }
                    },
                    "cidr": {
                        "type": "string",
                        "description": "The subnet representation, contains the network address and the prefix length"
                    },
                    "gateway": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "The default gateway address of the network"
                    }
                },
                "description": "This specification contains the parameters required to create an IP address pool subnet"
            },
            "IpAllocation": {
                "required": [
                    "ipAddress"
                ],
                "type": "object",
                "properties": {
                    "ipAddress": {
                        "maxLength": 15,
                        "minLength": 7,
                        "pattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
                        "type": "string",
                        "description": "IP Address of the ESXi host",
                        "example": "192.168.0.123"
                    },
                    "gateway": {
                        "maxLength": 15,
                        "minLength": 7,
                        "pattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
                        "type": "string",
                        "description": "Gateway",
                        "example": "192.168.0.1"
                    },
                    "subnet": {
                        "maxLength": 15,
                        "minLength": 7,
                        "pattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
                        "type": "string",
                        "description": "Subnet",
                        "example": "255.255.255.252"
                    },
                    "cidr": {
                        "maxLength": 18,
                        "minLength": 10,
                        "type": "string",
                        "description": "Classless Inter-Domain Routing (CIDR)",
                        "example": "172.0.0.0/24"
                    }
                },
                "description": "Defines an IP address with gateway and subnet"
            },
            "IpRange": {
                "required": [
                    "endIpAddress",
                    "startIpAddress"
                ],
                "type": "object",
                "properties": {
                    "startIpAddress": {
                        "maxLength": 15,
                        "minLength": 7,
                        "type": "string",
                        "description": "Start IP Address",
                        "example": "192.168.0.123"
                    },
                    "endIpAddress": {
                        "maxLength": 15,
                        "minLength": 7,
                        "type": "string",
                        "description": "End IP Address",
                        "example": "192.168.0.128"
                    }
                },
                "description": "Spec contains parameters for range of IP addresses"
            },
            "NiocSpec": {
                "required": [
                    "trafficType",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "trafficType": {
                        "type": "string",
                        "description": "Traffic Type. One among:VSAN, VMOTION, VIRTUALMACHINE, MANAGEMENT, NFS, VDP, HBR, FAULTTOLERANCE, ISCSI",
                        "example": "MANAGEMENT"
                    },
                    "value": {
                        "type": "string",
                        "description": "NIOC Value"
                    }
                },
                "description": "Spec contains parameters for Network IO Control"
            },
            "NsxtManagerSpec": {
                "type": "object",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "NSX Manager hostname"
                    },
                    "ip": {
                        "pattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
                        "type": "string",
                        "description": "NSX Manager IP Address. Can be omitted if hostname is provided."
                    }
                },
                "description": "Spec contains parameters for NSX manager"
            },
            "NsxtSwitchConfig": {
                "required": [
                    "transportZones"
                ],
                "type": "object",
                "properties": {
                    "transportZones": {
                        "type": "array",
                        "description": "The list of transport zones to be associated with the vSphere Distributed Switch managed by NSX",
                        "items": {
                            "$ref": "#/components/schemas/TransportZone"
                        }
                    },
                    "hostSwitchOperationalMode": {
                        "pattern": "(STANDARD|ENS|ENS_INTERRUPT)",
                        "type": "string",
                        "description": "Operational mode type of a Host Switch. Applicable only for the VI Workload Domains.",
                        "example": "One among: STANDARD, ENS, ENS_INTERRUPT"
                    }
                },
                "description": "This specification contains the configurations to be associated with the vSphere Distributed Switch managed by NSX"
            },
            "NsxtTransportZone": {
                "required": [
                    "networkName",
                    "zoneName"
                ],
                "type": "object",
                "properties": {
                    "zoneName": {
                        "type": "string",
                        "description": "Transport zone name"
                    },
                    "networkName": {
                        "type": "string",
                        "description": "Transport zone network name"
                    }
                },
                "description": "Spec contains required parameters for NSX Transport Zone",
                "deprecated": true
            },
            "ProxySpec": {
                "required": [
                    "host",
                    "port"
                ],
                "type": "object",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "IP address/FQDN of proxy server",
                        "example": "10.0.0.250"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port of proxy server",
                        "format": "int32",
                        "example": 3128
                    },
                    "username": {
                        "type": "string",
                        "description": "Proxy server username"
                    },
                    "password": {
                        "type": "string",
                        "description": "Proxy server password"
                    },
                    "transferProtocol": {
                        "type": "string",
                        "description": "Proxy transfer protocol, default value is HTTP. One among: HTTP, HTTPS",
                        "example": "HTTPS"
                    }
                },
                "description": "Spec contains parameters for proxy settings"
            },
            "PscSpec": {
                "required": [
                    "pscSsoSpec"
                ],
                "type": "object",
                "properties": {
                    "pscSsoSpec": {
                        "$ref": "#/components/schemas/PscSsoSpec"
                    },
                    "adminUserSsoPassword": {
                        "maxLength": 20,
                        "minLength": 8,
                        "type": "string",
                        "description": "Admin user sso passwordPassword needs to be a strong password with at least one Uppercase alphabet, one lowercase alphabet, one digit and one special character specified in braces [!$%^] and 8-20 characters in length,and 3 maximum identical adjacent characters!. If blank, the SDDC Local Admin Password will be used."
                    }
                },
                "description": "Spec contains parameters for deployment/configuration of Platform Services Controller"
            },
            "PscSsoSpec": {
                "type": "object",
                "properties": {
                    "ssoDomain": {
                        "type": "string",
                        "description": "PSC SSO Domain"
                    }
                },
                "description": "Spec contains parameters for Platform Services Controller SSO"
            },
            "ResourcePoolSpec": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Resource Pool name. It will be auto-generated if blank"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of resource pool. One among: management, compute, network",
                        "enum": [
                            "management",
                            "compute",
                            "network"
                        ]
                    },
                    "cpuReservationPercentage": {
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer",
                        "description": "CPU reservation percentage, from 0 to 100, default 0",
                        "format": "int32"
                    },
                    "cpuReservationMhz": {
                        "type": "integer",
                        "description": "CPU reservation in Mhz, default 0",
                        "format": "int64"
                    },
                    "cpuLimit": {
                        "type": "integer",
                        "description": "CPU limit, default -1 (unlimited)",
                        "format": "int64"
                    },
                    "cpuReservationExpandable": {
                        "type": "boolean",
                        "description": "Is CPU reservation expandable, default true"
                    },
                    "cpuSharesLevel": {
                        "type": "string",
                        "description": "CPU shares level, default 'normal'",
                        "enum": [
                            "custom",
                            "high",
                            "low",
                            "normal"
                        ]
                    },
                    "cpuSharesValue": {
                        "type": "integer",
                        "description": "CPU shares value, only relevant when shares level is 'custom', default 0",
                        "format": "int32"
                    },
                    "memoryReservationPercentage": {
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer",
                        "description": "Memory reservation percentage, from 0 to 100, default 0",
                        "format": "int32"
                    },
                    "memoryReservationMb": {
                        "type": "integer",
                        "description": "Memory reservation in MB, default 0",
                        "format": "int64"
                    },
                    "memoryLimit": {
                        "type": "integer",
                        "description": "Memory limit, default -1 (unlimited)",
                        "format": "int64"
                    },
                    "memoryReservationExpandable": {
                        "type": "boolean",
                        "description": "Is Memory reservation expandable, default true"
                    },
                    "memorySharesLevel": {
                        "type": "string",
                        "description": "Memory shares level. default 'normal'",
                        "enum": [
                            "custom",
                            "high",
                            "low",
                            "normal"
                        ]
                    },
                    "memorySharesValue": {
                        "type": "integer",
                        "description": "Memory shares value, only relevant when shares level is 'custom', default 0",
                        "format": "int32"
                    }
                },
                "description": "Spec contains parameters for Resource Pool"
            },
            "RootCaCerts": {
                "type": "object",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "Certificate alias"
                    },
                    "certChain": {
                        "type": "array",
                        "description": "List of Base64 encoded certificates",
                        "items": {
                            "type": "string",
                            "description": "List of Base64 encoded certificates"
                        }
                    }
                },
                "description": "Spec contains Root Certificate Authority parameters"
            },
            "SddcClusterSpec": {
                "type": "object",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "vCenter Cluster Name. It will be auto-generated if blank.",
                        "example": "ClusterName"
                    },
                    "clusterEvcMode": {
                        "type": "string",
                        "description": "vCenter Cluster EVC mode"
                    },
                    "personalityName": {
                        "type": "string",
                        "description": "Cluster Personality Name",
                        "deprecated": true
                    },
                    "clusterImageEnabled": {
                        "type": "boolean",
                        "description": "Enable vSphere Lifecycle Manager Images for cluster creation",
                        "example": true
                    },
                    "resourcePoolSpecs": {
                        "type": "array",
                        "description": "List of Resource Pool Specification. If blank, no resource pools will be created. However, if you want to create resource pool, Management Resource Pool is required to be present in the list.",
                        "items": {
                            "$ref": "#/components/schemas/ResourcePoolSpec"
                        }
                    },
                    "hostFailuresToTolerate": {
                        "maximum": 3,
                        "minimum": 0,
                        "type": "integer",
                        "description": "Host failures to tolerate",
                        "format": "int32",
                        "example": 3
                    },
                    "vmFolders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Virtual Machine folders map. One among:MANAGEMENT, NETWORKING"
                        },
                        "description": "Virtual Machine folders map. One among:MANAGEMENT, NETWORKING"
                    }
                },
                "description": "Spec contains parameters for vCenter Cluster"
            },
            "SddcCredentials": {
                "required": [
                    "password"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Username",
                        "example": "root"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password"
                    }
                },
                "description": "Credentials contains the username and password"
            },
            "SddcHostSpec": {
                "required": [
                    "hostname"
                ],
                "type": "object",
                "properties": {
                    "association": {
                        "type": "string",
                        "description": "Datacenter name. Can be added to just one of the host specifications. If not provided, it will be auto-generated."
                    },
                    "ipAddressPrivate": {
                        "$ref": "#/components/schemas/IpAllocation"
                    },
                    "hostname": {
                        "maxLength": 63,
                        "minLength": 0,
                        "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
                        "type": "string",
                        "description": "ESXi Host hostname. This value will be prefixed to the DNS subdomain name and should not include the domain name itself. Must also adhere to RFC 1123 naming conventions",
                        "example": "esx-1"
                    },
                    "credentials": {
                        "$ref": "#/components/schemas/SddcCredentials"
                    },
                    "vSwitch": {
                        "type": "string",
                        "description": "ESXi Host vSwitch name",
                        "example": "vSwitch0",
                        "deprecated": true
                    },
                    "sshThumbprint": {
                        "type": "string",
                        "description": "ESXi Host SSH thumbprint (RSA SHA256)",
                        "example": "SHA256:rVPNWOKE2tZjvmYvKPhtc3ghJ41Vc0G3MwASf4+8+yc"
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "ESXi Host SSL thumbprint (SHA256)",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                    }
                },
                "description": "Spec contains parameters for Host"
            },
            "SddcManagerSpec": {
                "required": [
                    "hostname"
                ],
                "type": "object",
                "properties": {
                    "rootUserCredentials": {
                        "$ref": "#/components/schemas/SddcCredentials"
                    },
                    "hostname": {
                        "maxLength": 63,
                        "minLength": 0,
                        "type": "string",
                        "description": "SDDC Manager Hostname."
                    },
                    "secondUserCredentials": {
                        "$ref": "#/components/schemas/SddcCredentials"
                    },
                    "localUserPassword": {
                        "maxLength": 2147483647,
                        "minLength": 12,
                        "type": "string",
                        "description": "The local account is a built-in admin account in VCF that can be used in emergency scenarios. The password of this account must be at least 12 characters long. It also must contain at-least 1 uppercase, 1 lowercase, 1 special character specified in braces [!%@$^#?] and 1 digit. In addition, a character cannot be repeated more than 3 times consecutively. This password will be used for other passwords if they have not been passed as input."
                    },
                    "ipAddress": {
                        "maxLength": 15,
                        "minLength": 7,
                        "pattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
                        "type": "string",
                        "description": "SDDC Manager IP address. Can be omitted if hostname is provided."
                    }
                },
                "description": "Client input parameters for SDDC Manager Virtual Machine"
            },
            "SddcNetworkSpec": {
                "required": [
                    "networkType",
                    "vlanId"
                ],
                "type": "object",
                "properties": {
                    "networkType": {
                        "type": "string",
                        "description": "Network Type. One among: VSAN, VMOTION, MANAGEMENT, VM_MANAGEMENT or any custom network type",
                        "example": "MANAGEMENT"
                    },
                    "subnet": {
                        "maxLength": 18,
                        "minLength": 7,
                        "type": "string",
                        "description": "Subnet",
                        "example": "10.0.0.250/24"
                    },
                    "gateway": {
                        "maxLength": 15,
                        "minLength": 7,
                        "type": "string",
                        "description": "Gateway",
                        "example": "10.0.0.250"
                    },
                    "subnetMask": {
                        "maxLength": 15,
                        "minLength": 7,
                        "type": "string",
                        "description": "Subnet Mask",
                        "example": "255.255.255.0"
                    },
                    "excludeIpaddresses": {
                        "type": "array",
                        "description": "This property is deprecated and will be ignored.",
                        "example": "[10.0.0.10,10.0.0.11]",
                        "deprecated": true,
                        "items": {
                            "type": "string",
                            "description": "This property is deprecated and will be ignored.",
                            "example": "[10.0.0.10,10.0.0.11]",
                            "deprecated": true
                        }
                    },
                    "excludeIpAddressRanges": {
                        "type": "array",
                        "description": "This property is deprecated and will be ignored.",
                        "deprecated": true,
                        "items": {
                            "type": "string",
                            "description": "This property is deprecated and will be ignored.",
                            "deprecated": true
                        }
                    },
                    "includeIpAddress": {
                        "type": "array",
                        "description": "IP Addresses to be included",
                        "example": "[10.0.0.100]",
                        "items": {
                            "type": "string",
                            "description": "IP Addresses to be included",
                            "example": "[10.0.0.100]"
                        }
                    },
                    "includeIpAddressRanges": {
                        "type": "array",
                        "description": "IP Address ranges to be included",
                        "items": {
                            "$ref": "#/components/schemas/IpRange"
                        }
                    },
                    "vlanId": {
                        "maximum": 4094,
                        "minimum": 0,
                        "type": "integer",
                        "description": "VLAN ID",
                        "example": "1000"
                    },
                    "mtu": {
                        "maximum": 9000,
                        "minimum": 1500,
                        "type": "integer",
                        "description": "MTU size"
                    },
                    "teamingPolicy": {
                        "type": "string",
                        "description": "Teaming Policy for VSAN and VMOTION network types, Default is loadbalance_loadbased. One among:loadbalance_ip, loadbalance_srcmac, loadbalance_srcid, failover_explicit, loadbalance_loadbased",
                        "example": "loadbalance_ip"
                    },
                    "activeUplinks": {
                        "type": "array",
                        "description": "Active Uplinks for teaming policy, specify uplink1 for failover_explicit VSAN Teaming Policy",
                        "items": {
                            "type": "string",
                            "description": "Active Uplinks for teaming policy, specify uplink1 for failover_explicit VSAN Teaming Policy"
                        }
                    },
                    "standbyUplinks": {
                        "type": "array",
                        "description": "Standby Uplinks for teaming policy, specify uplink2 for failover_explicit VSAN Teaming Policy",
                        "items": {
                            "type": "string",
                            "description": "Standby Uplinks for teaming policy, specify uplink2 for failover_explicit VSAN Teaming Policy"
                        }
                    },
                    "portGroupKey": {
                        "type": "string",
                        "description": "Name of the Distributed Portgroup to be created. It will be autogenerated if null"
                    }
                },
                "description": "Defines a network spec"
            },
            "SddcNsxtSpec": {
                "required": [
                    "nsxtManagers",
                    "vipFqdn"
                ],
                "type": "object",
                "properties": {
                    "nsxtManagers": {
                        "type": "array",
                        "description": "NSX Managers",
                        "items": {
                            "$ref": "#/components/schemas/NsxtManagerSpec"
                        }
                    },
                    "nsxtManagerSize": {
                        "type": "string",
                        "description": "NSX Manager size. One among: medium, large,xlarge. Default value if not provided is medium",
                        "example": "medium"
                    },
                    "nsxtLicense": {
                        "type": "string",
                        "description": "NSX Manager license"
                    },
                    "vip": {
                        "type": "string",
                        "description": "Virtual IP address which would act as proxy/alias for NSX Managers. Can be omitted if VIP hostname is provided."
                    },
                    "vipFqdn": {
                        "type": "string",
                        "description": "Hostname for VIP so that common SSL certificates can be installed across all managers."
                    },
                    "rootNsxtManagerPassword": {
                        "type": "string",
                        "description": "NSX Manager root password. Password should have 1) At least eight characters, 2) At least one lower-case letter, 3) At least one upper-case letter 4) At least one digit 5) At least one special character, 6) At least five different characters , 7) No dictionary words, 6) No palindromes. If blank, the SDDC Local Admin Password will be used."
                    },
                    "nsxtAdminPassword": {
                        "type": "string",
                        "description": "NSX admin password. The password must be at least 12 characters long. Must contain at-least 1 uppercase, 1 lowercase, 1 special character and 1 digit. In addition, a character cannot be repeated 3 or more times consectively. If blank, the SDDC Local Admin Password will be used."
                    },
                    "nsxtAuditPassword": {
                        "type": "string",
                        "description": "NSX audit password. The password must be at least 12 characters long. Must contain at-least 1 uppercase, 1 lowercase, 1 special character and 1 digit. In addition, a character cannot be repeated 3 or more times consectively. If blank, the SDDC Local Admin Password will be used."
                    },
                    "overLayTransportZone": {
                        "$ref": "#/components/schemas/NsxtTransportZone"
                    },
                    "transportVlanId": {
                        "type": "integer",
                        "description": "Transport VLAN ID. Default '0' if not specified",
                        "format": "int32",
                        "example": 1000
                    },
                    "ipAddressPoolSpec": {
                        "$ref": "#/components/schemas/IpAddressPoolSpec"
                    }
                },
                "description": "Spec contains parameters for NSX deployment and configurations"
            },
            "SddcSpec": {
                "required": [
                    "dnsSpec",
                    "hostSpecs",
                    "networkSpecs",
                    "ntpServers",
                    "sddcId",
                    "vcenterSpec"
                ],
                "type": "object",
                "properties": {
                    "sddcId": {
                        "maxLength": 20,
                        "minLength": 3,
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string",
                        "description": "Client string that identifies an SDDC by name or instance name. Used for management domain name. Can contain only letters, numbers and the following symbols: '-'",
                        "example": "sfo01-m01"
                    },
                    "taskName": {
                        "type": "string",
                        "description": "Name of the task to execute. This is deprecated. Please use property 'workflowType'",
                        "example": "workflowconfig/workflowspec-ems.json",
                        "deprecated": true
                    },
                    "workflowType": {
                        "pattern": "(VCF|VCF_VXRAIL)",
                        "type": "string",
                        "description": "Type of workflow to initiate creation and/or validation of SDDC",
                        "example": "One among: VCF, VCF_VXRAIL"
                    },
                    "hostSpecs": {
                        "type": "array",
                        "description": "List of ESXi to be added to the Management Cluster",
                        "items": {
                            "$ref": "#/components/schemas/SddcHostSpec"
                        }
                    },
                    "vcenterSpec": {
                        "$ref": "#/components/schemas/SddcVcenterSpec"
                    },
                    "clusterSpec": {
                        "$ref": "#/components/schemas/SddcClusterSpec"
                    },
                    "dvsSpecs": {
                        "type": "array",
                        "description": "List of vSphere Distributed Switches to be created. For VCF only: if blank, a default single one will be created for all types of traffic connected to vmnic0 and vmnic1",
                        "items": {
                            "$ref": "#/components/schemas/DvsSpec"
                        }
                    },
                    "vsanSpec": {
                        "$ref": "#/components/schemas/VsanSpec"
                    },
                    "nsxtSpec": {
                        "$ref": "#/components/schemas/SddcNsxtSpec"
                    },
                    "networkSpecs": {
                        "type": "array",
                        "description": "List of Networks which be created and used for Management Cluster",
                        "items": {
                            "$ref": "#/components/schemas/SddcNetworkSpec"
                        }
                    },
                    "dnsSpec": {
                        "$ref": "#/components/schemas/DnsSpec"
                    },
                    "ntpServers": {
                        "type": "array",
                        "description": "List of NTP servers to be used for configuring Management Appliances",
                        "example": "[10.0.0.100, 10.0.0.101]",
                        "items": {
                            "type": "string",
                            "description": "List of NTP servers to be used for configuring Management Appliances",
                            "example": "[10.0.0.100, 10.0.0.101]"
                        }
                    },
                    "sddcManagerSpec": {
                        "$ref": "#/components/schemas/SddcManagerSpec"
                    },
                    "pscSpecs": {
                        "type": "array",
                        "description": "Specification for SSO Configuration in the Management vCenter Server Appliance",
                        "items": {
                            "$ref": "#/components/schemas/PscSpec"
                        }
                    },
                    "vxManagerSpec": {
                        "$ref": "#/components/schemas/VxManagerSpec"
                    },
                    "managementPoolName": {
                        "type": "string",
                        "description": "Name for the network pool to be created and associated with the Management Cluster"
                    },
                    "excludedComponents": {
                        "type": "array",
                        "description": "Components of the workflow to be excluded. NOTE: Leave this empty unless you are fully aware of what you are doing.",
                        "items": {
                            "type": "string",
                            "description": "Components of the workflow to be excluded. NOTE: Leave this empty unless you are fully aware of what you are doing."
                        }
                    },
                    "dvSwitchVersion": {
                        "type": "string",
                        "description": "The version of the Distributed vSphere Switches to be used. One among: 7.0.0, 7.0.2, 7.0.3, 8.0.0. If blank, then the latest version will be obtain from vCenter Server",
                        "example": "8.0.0"
                    },
                    "ceipEnabled": {
                        "type": "boolean",
                        "description": "Enable VCF Customer Experience Improvement Program",
                        "example": true
                    },
                    "fipsEnabled": {
                        "type": "boolean",
                        "description": "Enable Federal Information Processing Standards",
                        "example": true
                    },
                    "esxLicense": {
                        "type": "string",
                        "description": "License for the ESXi hosts",
                        "example": "XXXX-XXXX-XXXX-XXXX"
                    },
                    "skipEsxThumbprintValidation": {
                        "type": "boolean",
                        "description": "Skip ESXi thumbprint validation",
                        "example": false
                    },
                    "skipGatewayPingValidation": {
                        "type": "boolean",
                        "description": "Skip networks gateway connectivity validation",
                        "example": false
                    },
                    "securitySpec": {
                        "$ref": "#/components/schemas/SecuritySpec"
                    },
                    "proxySpec": {
                        "$ref": "#/components/schemas/ProxySpec"
                    },
                    "deployWithoutLicenseKeys": {
                        "type": "boolean",
                        "description": "Flag that indicates if the deployment should happen without license keys."
                    }
                },
                "description": "SDDC specification"
            },
            "SddcVcenterSpec": {
                "required": [
                    "rootVcenterPassword",
                    "vcenterHostname"
                ],
                "type": "object",
                "properties": {
                    "licenseFile": {
                        "type": "string",
                        "description": "License File/Key"
                    },
                    "vcenterIp": {
                        "maxLength": 15,
                        "minLength": 7,
                        "pattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
                        "type": "string",
                        "description": "vCenter IP address. Can be omitted if hostname is provided.",
                        "example": "10.0.0.6"
                    },
                    "vcenterHostname": {
                        "maxLength": 63,
                        "minLength": 0,
                        "type": "string",
                        "description": "vCenter hostname address.",
                        "example": "vcenter.rainpole.io"
                    },
                    "rootVcenterPassword": {
                        "maxLength": 20,
                        "minLength": 8,
                        "type": "string",
                        "description": "vCenter root password. The password must be between 8 characters and 20 characters long. It must also contain at least one uppercase and lowercase letter, one number, and one character from '! \" # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\ ] ^ _ ` { &Iota; } ~' and all characters must be ASCII. Space is not allowed in password. For VCF only: if blank, the SDDC Local Admin Password will be used.",
                        "example": "Sample_Password123"
                    },
                    "vmSize": {
                        "type": "string",
                        "description": "vCenter Virtual Machine size. One among:xlarge, large, medium, small, tiny",
                        "example": "medium"
                    },
                    "storageSize": {
                        "type": "string",
                        "description": "vCenter Virtual Machine Storage size. One among:lstorage, xlstorage",
                        "example": "lstorage"
                    },
                    "sshThumbprint": {
                        "type": "string",
                        "description": "vCenter Server SSH thumbprint (RSA SHA256). This is only for VCF on VxRail",
                        "example": "SHA256:rVPNWOKE2tZjvmYvKPhtc3ghJ41Vc0G3MwASf4+8+yc"
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "vCenter Server SSL thumbprint (SHA256). This is only for VCF on VxRail",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                    }
                },
                "description": "Spec contains parameters for vCenter"
            },
            "SecuritySpec": {
                "type": "object",
                "properties": {
                    "esxiCertsMode": {
                        "type": "string",
                        "description": "ESXi certificates mode. One among:Custom, VMCA",
                        "example": "VMCA"
                    },
                    "rootCaCerts": {
                        "type": "array",
                        "description": "Root Certificate Authority certificate list",
                        "items": {
                            "$ref": "#/components/schemas/RootCaCerts"
                        }
                    }
                },
                "description": "Spec contains security settings"
            },
            "TeamingSpec": {
                "required": [
                    "activeUplinks",
                    "policy"
                ],
                "type": "object",
                "properties": {
                    "policy": {
                        "pattern": "(FAILOVER_ORDER|LOADBALANCE_SRCID|LOADBALANCE_SRC_MAC)",
                        "type": "string",
                        "description": "The teaming policy associated with the uplink profile",
                        "example": "One among: FAILOVER_ORDER, LOADBALANCE_SRCID, LOADBALANCE_SRC_MAC"
                    },
                    "activeUplinks": {
                        "type": "array",
                        "description": "The list of active uplinks",
                        "items": {
                            "type": "string",
                            "description": "The list of active uplinks"
                        }
                    },
                    "standByUplinks": {
                        "type": "array",
                        "description": "The list of stand by uplinks",
                        "items": {
                            "type": "string",
                            "description": "The list of stand by uplinks"
                        }
                    }
                },
                "description": "This specification contains the teaming policies associated with the uplink profile."
            },
            "TransportZone": {
                "required": [
                    "transportType"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string",
                        "description": "The name of the transport zone"
                    },
                    "transportType": {
                        "pattern": "(VLAN|OVERLAY)",
                        "type": "string",
                        "description": "The type of the transport zone",
                        "example": "One among: VLAN, OVERLAY"
                    }
                },
                "description": "The transport zone to be associated with the vSphere Distributed Switch managed by NSX"
            },
            "VmnicToUplink": {
                "required": [
                    "id",
                    "uplink"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "VmNic ID of vSphere host to be associated with VDS, once added to cluster",
                        "example": "vmnic0"
                    },
                    "uplink": {
                        "type": "string",
                        "description": "The uplink name of the vSphere Distributed Switch to be associated",
                        "example": "uplink1"
                    }
                },
                "description": "This specification contains vmnic to uplink configurations for vSphere host."
            },
            "VsanEsaConfig": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the vSAN ESA is enabled."
                    }
                },
                "description": "This spec contains cluster vSAN ESA configuration"
            },
            "VsanSpec": {
                "type": "object",
                "properties": {
                    "licenseFile": {
                        "type": "string",
                        "description": "License File"
                    },
                    "hclFile": {
                        "type": "string",
                        "description": "HCL File"
                    },
                    "datastoreName": {
                        "type": "string",
                        "description": "Datastore Name. It will be auto-generated if blank"
                    },
                    "vsanDedup": {
                        "type": "boolean",
                        "description": "VSAN feature Deduplication and Compression flag, one flag for both features"
                    },
                    "esaConfig": {
                        "$ref": "#/components/schemas/VsanEsaConfig"
                    }
                },
                "description": "Spec contains parameters of Virtual SAN"
            },
            "VxManagerSpec": {
                "required": [
                    "defaultAdminUserCredentials",
                    "defaultRootUserCredentials",
                    "vxManagerHostName"
                ],
                "type": "object",
                "properties": {
                    "vxManagerHostName": {
                        "type": "string",
                        "description": "VxRail Manager Appliance hostname"
                    },
                    "defaultRootUserCredentials": {
                        "$ref": "#/components/schemas/SddcCredentials"
                    },
                    "defaultAdminUserCredentials": {
                        "$ref": "#/components/schemas/SddcCredentials"
                    },
                    "sshThumbprint": {
                        "type": "string",
                        "description": "VxRail Manager SSH thumbprint (RSA SHA256)",
                        "example": "SHA256:rVPNWOKE2tZjvmYvKPhtc3ghJ41Vc0G3MwASf4+8+yc"
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "VxRail Manager SSL thumbprint (SHA256)",
                        "example": "3D:D0:EE:B5:A0:CC:45:08:5C:4F:84:51:CD:00:B6:41:BB:4A:A2:9A:77:1C:A6:4C:6D:84:5A:D0:4F:68:7A:B8"
                    }
                },
                "description": "Spec contains parameters for VxRail Manager"
            },
            "PrecheckSpec": {
                "required": [
                    "resources"
                ],
                "type": "object",
                "properties": {
                    "resources": {
                        "type": "array",
                        "description": "List of resources for Precheck supported type DOMAIN, CLUSTER",
                        "items": {
                            "$ref": "#/components/schemas/Resource"
                        }
                    },
                    "bundleId": {
                        "type": "string",
                        "description": " If specified, indicate the bundle applicability in the result"
                    },
                    "mode": {
                        "type": "string",
                        "description": " If specified, indicates the mode of the execution. Supported modes are UPGRADE and RECOVERY. UPGRADE is default mode. Specify RECOVERY for the Inventory Consistency Checks"
                    }
                },
                "description": "Precheck System Spec"
            },
            "HealthChecks": {
                "type": "object",
                "properties": {
                    "servicesHealth": {
                        "type": "boolean",
                        "description": "Performs checks on Services health."
                    },
                    "ntpHealth": {
                        "type": "boolean",
                        "description": "Performs NTP checks for components."
                    },
                    "generalHealth": {
                        "type": "boolean",
                        "description": "Performs some generic health checks."
                    },
                    "certificateHealth": {
                        "type": "boolean",
                        "description": "Performs Certificate health checks."
                    },
                    "passwordHealth": {
                        "type": "boolean",
                        "description": "Performs Password Expiry checks."
                    },
                    "connectivityHealth": {
                        "type": "boolean",
                        "description": "Performs Connectivity health checks."
                    },
                    "computeHealth": {
                        "type": "boolean",
                        "description": "Performs Compute Health checks."
                    },
                    "storageHealth": {
                        "type": "boolean",
                        "description": "Performs Storage Health checks."
                    },
                    "dnsHealth": {
                        "type": "boolean",
                        "description": "Performs DNS Health checks."
                    },
                    "hardwareCompatibilityHealth": {
                        "type": "boolean",
                        "description": "Performs HardwareCompatibilityHealth Health checks."
                    },
                    "versionHealth": {
                        "type": "boolean",
                        "description": "Perform version checks for VCF components."
                    }
                },
                "description": "Sos Health Checks."
            },
            "HealthSummaryConfig": {
                "type": "object",
                "properties": {
                    "skipKnownHostCheck": {
                        "type": "boolean",
                        "description": "Skip known_hosts file for HealthSummary."
                    },
                    "force": {
                        "type": "boolean",
                        "description": "Run SOS operations, even if there is a Workload running."
                    }
                },
                "description": "HealthSummary config"
            },
            "HealthSummaryIncludeItems": {
                "type": "object",
                "properties": {
                    "summaryReport": {
                        "type": "boolean",
                        "description": "Collect Vcf Summary Reports"
                    },
                    "precheckReport": {
                        "type": "boolean",
                        "description": "Collect VCF LCM Upgrade Pre-check Reports, Default value is False"
                    }
                },
                "description": "Sos Additional Reports for Health Checks."
            },
            "HealthSummaryOption": {
                "type": "object",
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/HealthSummaryConfig"
                    },
                    "include": {
                        "$ref": "#/components/schemas/HealthSummaryIncludeItems"
                    }
                },
                "description": "Sos options for support health checks."
            },
            "HealthSummaryScope": {
                "type": "object",
                "properties": {
                    "includeFreeHosts": {
                        "type": "boolean",
                        "description": "Include free hosts."
                    },
                    "includeAllDomains": {
                        "type": "boolean",
                        "description": "Include all domains for SOS operation."
                    },
                    "domains": {
                        "type": "array",
                        "description": "Domains and Clusters for SOS operation.",
                        "items": {
                            "$ref": "#/components/schemas/Domains"
                        }
                    }
                },
                "description": "Domain and cluster under which logs should be collected."
            },
            "HealthSummarySpec": {
                "type": "object",
                "properties": {
                    "options": {
                        "$ref": "#/components/schemas/HealthSummaryOption"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/HealthSummaryScope"
                    },
                    "healthChecks": {
                        "$ref": "#/components/schemas/HealthChecks"
                    }
                }
            },
            "HealthSummary": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Health summary collection status.",
                        "example": "One among: IN_PROGRESS, PENDING, COMPLETED_WITH_SUCCESS, COMPLETED_WITH_FAILURE"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "CreationTimestamp."
                    },
                    "description": {
                        "type": "string",
                        "description": "Name of the Operation."
                    },
                    "bundleAvailable": {
                        "type": "string",
                        "description": "Indicate if bundle is available in file system."
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the Support Bundle task."
                    },
                    "completionTimestamp": {
                        "type": "string",
                        "description": "CompletionTimestamp."
                    },
                    "bundleName": {
                        "type": "string",
                        "description": "Name of the Support Bundle."
                    }
                }
            },
            "CheckSetResourceSelection": {
                "required": [
                    "checkSets",
                    "resourceId",
                    "resourceName",
                    "resourceType"
                ],
                "type": "object",
                "properties": {
                    "resourceName": {
                        "type": "string",
                        "description": "Name of the resource"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "Id of the resource"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Type of the resource"
                    },
                    "domain": {
                        "$ref": "#/components/schemas/DomainInfo"
                    },
                    "checkSets": {
                        "type": "array",
                        "description": "Information about the selected check-set candidates",
                        "items": {
                            "$ref": "#/components/schemas/SelectedCheckSetCandidate"
                        }
                    }
                },
                "description": "Represents a selection of check-set candidates over a given resource"
            },
            "CheckSetRunInput": {
                "required": [
                    "queryId",
                    "resources"
                ],
                "type": "object",
                "properties": {
                    "queryId": {
                        "type": "string",
                        "description": "Id of the query the selection was based on"
                    },
                    "resources": {
                        "type": "array",
                        "description": "Information about the resource and its selection",
                        "items": {
                            "$ref": "#/components/schemas/CheckSetResourceSelection"
                        }
                    }
                },
                "description": "Check-set selection for resources"
            },
            "DomainInfo": {
                "type": "object",
                "properties": {
                    "domainName": {
                        "type": "string",
                        "description": "Name of the domain"
                    },
                    "domainType": {
                        "type": "string",
                        "description": "Type of the domain",
                        "enum": [
                            "MANAGEMENT",
                            "VI"
                        ]
                    },
                    "domainId": {
                        "type": "string",
                        "description": "Id of the domain"
                    }
                },
                "description": "Information about the assessed domain"
            },
            "SelectedCheckSetCandidate": {
                "required": [
                    "checkSetId"
                ],
                "type": "object",
                "properties": {
                    "checkSetId": {
                        "type": "string",
                        "description": "Id of the selected check-set"
                    }
                },
                "description": "Selected check-set candidate"
            },
            "CheckSetQueryDomainResources": {
                "required": [
                    "domainId"
                ],
                "type": "object",
                "properties": {
                    "domainId": {
                        "type": "string",
                        "description": "Id of the domain to search for resources in"
                    },
                    "resources": {
                        "type": "array",
                        "description": "Resources in the domain to generate check-set candidates for",
                        "items": {
                            "$ref": "#/components/schemas/CheckSetQueryResource"
                        }
                    }
                },
                "description": "Spec representing a set of resources in a domain to query check-sets for"
            },
            "CheckSetQueryInput": {
                "required": [
                    "checkSetType",
                    "domains"
                ],
                "type": "object",
                "properties": {
                    "checkSetType": {
                        "type": "string",
                        "description": "Type of the check sets to query for. e.g. 'UPGRADE'",
                        "example": "UPGRADE"
                    },
                    "domains": {
                        "type": "array",
                        "description": "List of domain resources to query check-sets of the given type for",
                        "items": {
                            "$ref": "#/components/schemas/CheckSetQueryDomainResources"
                        }
                    }
                },
                "description": "Check-set query input"
            },
            "CheckSetQueryResource": {
                "required": [
                    "resourceType"
                ],
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "Type of the resource",
                        "example": "VCENTER"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "UUID of the resource, if used adds additional filtering",
                        "example": "187f6468-f9e0-45f5-8d34-b28efc1e7a36"
                    },
                    "resourceTargetVersion": {
                        "type": "string",
                        "description": "Upgrade target version for the resources",
                        "example": "3.0.0-123456"
                    }
                },
                "description": "Resource input to query check-sets for"
            },
            "CheckSetCandidates": {
                "type": "object",
                "properties": {
                    "checkSetId": {
                        "type": "string",
                        "description": "Id of the check-set"
                    },
                    "checkSetName": {
                        "type": "string",
                        "description": "Name of the check-set"
                    },
                    "checkSetType": {
                        "type": "string",
                        "description": "Type of the check-set"
                    }
                },
                "description": "Represents a check-set id that can be used to run checks for a resource"
            },
            "CheckSetQueryResourceResult": {
                "type": "object",
                "properties": {
                    "resourceName": {
                        "type": "string",
                        "description": "Name of the resource"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "Id of the resource"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Type of the resource"
                    },
                    "resourceVersion": {
                        "type": "string",
                        "description": "Current version of the resource"
                    },
                    "domain": {
                        "$ref": "#/components/schemas/ResourceDomainInfo"
                    },
                    "checkSets": {
                        "type": "array",
                        "description": "Check set candidates to select from",
                        "items": {
                            "$ref": "#/components/schemas/CheckSetCandidates"
                        }
                    },
                    "extraContext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                },
                "description": "Represents a result of a check-set query call for a given resource"
            },
            "CheckSetQueryResult": {
                "required": [
                    "queryId",
                    "resources"
                ],
                "type": "object",
                "properties": {
                    "queryId": {
                        "type": "string",
                        "description": "Id of the query, to be provided in the selection API"
                    },
                    "resources": {
                        "type": "array",
                        "description": "Resources with check-sets result from the query",
                        "items": {
                            "$ref": "#/components/schemas/CheckSetQueryResourceResult"
                        }
                    }
                },
                "description": "Represents a result of a check-set query call"
            },
            "ResourceDomainInfo": {
                "type": "object",
                "properties": {
                    "domainId": {
                        "type": "string",
                        "description": "Id of the domain"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "Name of the domain"
                    },
                    "domainType": {
                        "type": "string",
                        "description": "Type of the domain",
                        "enum": [
                            "MANAGEMENT",
                            "VI"
                        ]
                    }
                },
                "description": "Information about the domain the resource belongs to"
            },
            "SddcSubTask": {
                "type": "object",
                "properties": {
                    "sddcId": {
                        "type": "string",
                        "description": "SDDC ID",
                        "example": "123e4567-e89b-42d3-a456-556642440000"
                    },
                    "processingStateName": {
                        "type": "string",
                        "description": "Processing category name, e.g., VC Deployment, VSAN configuration etc"
                    },
                    "processingStateDescription": {
                        "type": "string",
                        "description": "Processing category description, e.g., VC Deployment, VSAN configuration etc"
                    },
                    "name": {
                        "type": "string",
                        "description": "Sub-Task Name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Sub-Task Description"
                    },
                    "localizableNamePack": {
                        "$ref": "#/components/schemas/MessagePack"
                    },
                    "localizableDescriptionPack": {
                        "$ref": "#/components/schemas/MessagePack"
                    },
                    "status": {
                        "type": "string",
                        "description": "Task Status",
                        "example": "INITIALIZED, COMPLETED_WITH_SUCCESS, COMPLETED_WITH_FAILURE, PREVALIDATION_COMPLETED_WITH_SUCCESS, PREVALIDATION_COMPLETED_WITH_FAILURE, POSTVALIDATION_COMPLETED_WITH_SUCCESS, POSTVALIDATION_COMPLETED_WITH_FAILURE,IN_PROGRESS, PREVALIDATION_IN_PROGRESS, POSTVALIDATION_IN_PROGRESS, INTERNAL_ERROR"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "Sub-Task Creation Time"
                    },
                    "updateTimestamp": {
                        "type": "string",
                        "description": "Last Update Time of Sub-Task"
                    },
                    "errors": {
                        "type": "array",
                        "description": "List of errors in case of a failure",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                },
                "description": "Represents a SDDC sub-task"
            },
            "SddcTask": {
                "required": [
                    "creationTimestamp",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "maxLength": 256,
                        "minLength": 3,
                        "type": "string",
                        "description": "SDDC ID",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Task name",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "SDDC Task status. One among: IN_PROGRESS, COMPLETED_WITH_SUCCESS, ROLLBACK_SUCCESS, COMPLETED_WITH_FAILURE",
                        "readOnly": true,
                        "example": "COMPLETED_WITH_SUCCESS"
                    },
                    "localizableNamePack": {
                        "$ref": "#/components/schemas/MessagePack"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "SDDC Task creation timestamp",
                        "readOnly": true
                    },
                    "sddcSubTasks": {
                        "type": "array",
                        "description": "All SDDC Sub-Tasks",
                        "items": {
                            "$ref": "#/components/schemas/SddcSubTask"
                        }
                    }
                },
                "description": "Represents a SDDC task"
            },
            "TrustedCertificateSpec": {
                "required": [
                    "certificate"
                ],
                "type": "object",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "Certificate in PEM format",
                        "example": "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----"
                    },
                    "certificateUsageType": {
                        "type": "string",
                        "description": "Certificate usage",
                        "example": "One among: TRUSTED_FOR_OUTBOUND, TRUSTED_FOR_INBOUND",
                        "deprecated": true
                    }
                },
                "description": "This specification contains certificate & certificate usage"
            },
            "PageOfTrustedCertificate": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/TrustedCertificate"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "TrustedCertificate": {
                "required": [
                    "alias",
                    "certificate"
                ],
                "type": "object",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "Certificate alias",
                        "example": "vcf_59:24:D5:18:04:A0:26:B0:A4:05:EA:82:60:95:82:A2:4B:F6:31:FB:81:93:01:F3:29:7D:34:9C:D3:05:39:90"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "Certificate in PEM format",
                        "example": "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----"
                    }
                },
                "description": "The Trusted Certificate details.",
                "readOnly": true
            },
            "BackupResource": {
                "required": [
                    "resourceType"
                ],
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "Resource type",
                        "example": "SDDC_MANAGER"
                    }
                },
                "description": "Element specification to trigger backup"
            },
            "RestoreSpec": {
                "required": [
                    "backupFile",
                    "elements",
                    "encryption"
                ],
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "List of elements to be restored",
                        "items": {
                            "$ref": "#/components/schemas/BackupResource"
                        }
                    },
                    "backupFile": {
                        "type": "string",
                        "description": "Backup file name"
                    },
                    "encryption": {
                        "$ref": "#/components/schemas/Encryption"
                    }
                },
                "description": "Restore Specification"
            },
            "LicenseCheckResource": {
                "required": [
                    "resourceInfo"
                ],
                "type": "object",
                "properties": {
                    "resourceInfo": {
                        "$ref": "#/components/schemas/ResourceInfo"
                    },
                    "productInfo": {
                        "$ref": "#/components/schemas/ProductInfo"
                    }
                },
                "description": "License check resource"
            },
            "ResourcesLicenseCheckSpec": {
                "type": "object",
                "properties": {
                    "licenseCheckResources": {
                        "type": "array",
                        "description": "A list of resources for which license check needs to be performed",
                        "items": {
                            "$ref": "#/components/schemas/LicenseCheckResource"
                        }
                    },
                    "forAllDomains": {
                        "type": "boolean",
                        "description": "Value that defines whether to get license check for all domains or not"
                    }
                },
                "description": "Resources license check spec"
            },
            "ResourcesLicenseCheckResult": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the resources license check task",
                        "readOnly": true
                    },
                    "startTimestamp": {
                        "type": "string",
                        "description": "Task start timestamp",
                        "readOnly": true
                    },
                    "endTimestamp": {
                        "type": "string",
                        "description": "Task end timestamp",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Task status",
                        "readOnly": true,
                        "example": "One among: PENDING, Pending, IN_PROGRESS, In Progress, SUCCESSFUL, Successful, FAILED, Failed, CANCELLED, Cancelled, COMPLETED_WITH_WARNING, SKIPPED"
                    },
                    "resourceLicensingInfos": {
                        "type": "array",
                        "description": "List of licensing infos of resources",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ResourceLicensingInfo"
                        }
                    }
                },
                "description": "Resource License check result"
            },
            "AssociatedTask": {
                "required": [
                    "taskId"
                ],
                "type": "object",
                "properties": {
                    "taskId": {
                        "type": "string",
                        "description": "ID of the task where the warning for the resource occurred"
                    },
                    "subTaskId": {
                        "type": "string",
                        "description": "ID of the subtask where the warning for the resource occurred"
                    }
                },
                "description": "Task association for a resource warning. Indicates in which task the resource warning occurred"
            },
            "LocalizableWarningPack": {
                "required": [
                    "defaultMessage",
                    "localBundle",
                    "vipComponent",
                    "warningCode"
                ],
                "type": "object",
                "properties": {
                    "warningCode": {
                        "type": "string",
                        "description": "Minor warning code"
                    },
                    "localBundle": {
                        "type": "string",
                        "description": "Local bundle to be used for localization"
                    },
                    "vipComponent": {
                        "type": "string",
                        "description": "VIP component that contains the message"
                    },
                    "defaultMessage": {
                        "type": "string",
                        "description": "Default warning message in English. Will be used as fallback if a localized message cannot be obtained"
                    },
                    "arguments": {
                        "type": "array",
                        "description": "Arguments used to localize the message",
                        "items": {
                            "type": "string",
                            "description": "Arguments used to localize the message"
                        }
                    },
                    "referenceToken": {
                        "type": "string",
                        "description": "A reference token correlating the warning with the relevant detailed logs. Should be sent to the service provider when reporting issues"
                    }
                },
                "description": "Localization warning pack containing all required data to provide localized warning messages"
            },
            "ResourceWarningCreationSpec": {
                "required": [
                    "localizableWarningPack",
                    "occurredAtTimestamp",
                    "resourceId",
                    "resourceName",
                    "resourceType",
                    "severity",
                    "warningType"
                ],
                "type": "object",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "ID of the resource to which this warning will be associated"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Name of the resource to which this warning will be associated"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Type of the resource to which this warning will be associated",
                        "example": "HOST, CLUSTER, DOMAIN",
                        "enum": [
                            "HOST",
                            "CLUSTER",
                            "DOMAIN"
                        ]
                    },
                    "warningType": {
                        "type": "string",
                        "description": "The type of the warning",
                        "example": "SKIPPED_RESOURCE, VALIDATION, CONFIGURATION, OTHER",
                        "enum": [
                            "CONFIGURATION",
                            "OTHER",
                            "SKIPPED_RESOURCE",
                            "VALIDATION"
                        ]
                    },
                    "severity": {
                        "type": "string",
                        "description": "The severity of the warning",
                        "example": "MINOR, MAJOR",
                        "enum": [
                            "MAJOR",
                            "MINOR"
                        ]
                    },
                    "occurredAtTimestamp": {
                        "type": "integer",
                        "description": "The Unix epoch timestamp of when the warning occurred",
                        "format": "int64"
                    },
                    "context": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Optional additional context information to be associated to the warning"
                        },
                        "description": "Optional additional context information to be associated to the warning"
                    },
                    "localizableWarningPack": {
                        "$ref": "#/components/schemas/LocalizableWarningPack"
                    },
                    "associatedTask": {
                        "$ref": "#/components/schemas/AssociatedTask"
                    }
                },
                "description": "Resource Warning creation specification"
            },
            "ResourceWarning": {
                "required": [
                    "occurredAtTimestamp"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the resource warning"
                    },
                    "warningCode": {
                        "type": "string",
                        "description": "The warning code"
                    },
                    "message": {
                        "type": "string",
                        "description": "The localized warning message"
                    },
                    "remediationMessage": {
                        "type": "string",
                        "description": "The localized remediation warning message"
                    },
                    "referenceToken": {
                        "type": "string",
                        "description": "A reference token correlating the warning with the relevant detailed logs. Should be sent to the service provider when reporting issues"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "ID of the associated resource"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Type of the associated resource",
                        "example": "One among: HOST, CLUSTER, DOMAIN"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Name of the associated resource"
                    },
                    "warningType": {
                        "type": "string",
                        "description": "Type of the warning",
                        "example": "One among: SKIPPED_RESOURCE, VALIDATION, CONFIGURATION, OTHER"
                    },
                    "severity": {
                        "type": "string",
                        "description": "Severity of the warning",
                        "example": "One among: MINOR, MAJOR"
                    },
                    "occurredAtTimestamp": {
                        "type": "string",
                        "description": "Timestamp when the warning occurred"
                    },
                    "context": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Optional additional context information in a key value form"
                        },
                        "description": "Optional additional context information in a key value form"
                    },
                    "associatedTask": {
                        "$ref": "#/components/schemas/AssociatedTask"
                    }
                },
                "description": "Represents a warning associated to a specific resource"
            },
            "DomainRelease": {
                "type": "object",
                "properties": {
                    "targetVersion": {
                        "type": "string",
                        "description": "Target version"
                    },
                    "targetVxRailVersion": {
                        "type": "string",
                        "description": "Target VxRail version"
                    },
                    "targetSddcManagerVersion": {
                        "type": "string",
                        "description": "Target SDDC Manager version"
                    },
                    "patches": {
                        "type": "array",
                        "description": "Target product release and patch versions",
                        "items": {
                            "$ref": "#/components/schemas/TargetProductVersion"
                        }
                    }
                },
                "description": "Target domain VCF version"
            },
            "TargetProductVersion": {
                "required": [
                    "productType",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "productType": {
                        "type": "string",
                        "description": "Product Type",
                        "example": "One among: SDDC_MANAGER, ESX, VCENTER, VXRAIL, NSX"
                    },
                    "version": {
                        "type": "string",
                        "description": "Target upgrade version of the product"
                    }
                },
                "description": "Model for target product versions in domain release view."
            },
            "Artifact": {
                "type": "object",
                "properties": {
                    "bundles": {
                        "type": "array",
                        "description": "List of bundle artifacts for corresponding product patch version",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/BundleInfo"
                        }
                    }
                },
                "description": "Patch rest model that is located in the Product Version Catalog, these models are consumed by LCM's Flex BOM workflows.",
                "readOnly": true
            },
            "BundleInfo": {
                "required": [
                    "id",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Bundle id",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of bundle. ex) PATCH, INSTALL",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Patch/Install bundle name",
                        "readOnly": true
                    }
                },
                "description": "Patch/Install bundle info to be used as part of ProductVersionCatalog patches.",
                "readOnly": true
            },
            "Patch": {
                "required": [
                    "artifacts",
                    "productVersion"
                ],
                "type": "object",
                "properties": {
                    "productVersion": {
                        "type": "string",
                        "description": "Product version of the patch bundle",
                        "readOnly": true
                    },
                    "artifacts": {
                        "$ref": "#/components/schemas/Artifact"
                    }
                },
                "description": "Patch rest model that is located in the Product Version Catalog, these models are consumed by LCM's Flex BOM workflows.",
                "readOnly": true
            },
            "ProductVersionCatalog": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "integer",
                        "description": "Product Version catalog version supported by VCF",
                        "format": "int32",
                        "readOnly": true
                    },
                    "sequenceNumber": {
                        "type": "integer",
                        "description": "Product Version catalog sequence number which signifies an update in the product version catalog",
                        "format": "int32",
                        "readOnly": true
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Creation time for the Product Version catalog e.g. 2020-06-08T02:20:15.844Z, in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format",
                        "readOnly": true
                    },
                    "publishedTime": {
                        "type": "string",
                        "description": "Time of publish of the Product Version catalog e.g. 2020-06-08T02:20:15.844Z, in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format",
                        "readOnly": true
                    },
                    "patches": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "description": "Patches used for the product version catalog",
                            "readOnly": true,
                            "items": {
                                "$ref": "#/components/schemas/Patch"
                            }
                        },
                        "description": "Patches used for the product version catalog",
                        "readOnly": true
                    }
                },
                "description": "LCM Product Version Catalog that contains async patches for VMware Cloud foundation components (VC/ESX/NSX) that's used by Life cycle manager."
            },
            "PersonalityUploadSpec": {
                "required": [
                    "uploadMode"
                ],
                "type": "object",
                "properties": {
                    "uploadMode": {
                        "type": "string",
                        "description": "Personality upload mode",
                        "example": "One among: RAW, RAW_WITH_FILE_UPLOAD_ID, REFERRED"
                    },
                    "uploadSpecRawMode": {
                        "$ref": "#/components/schemas/PersonalityUploadSpecRaw"
                    },
                    "uploadSpecRawWithFileUploadIdMode": {
                        "$ref": "#/components/schemas/PersonalityUploadSpecRawWithFileUploadId"
                    },
                    "uploadSpecReferredMode": {
                        "$ref": "#/components/schemas/PersonalityUploadSpecReferred"
                    },
                    "name": {
                        "type": "string",
                        "description": "Personality name"
                    }
                },
                "description": "Personality Upload Specification"
            },
            "PersonalityUploadSpecRaw": {
                "required": [
                    "personalityInfoJSONFilePath",
                    "personalityJSONFilePath",
                    "personalityZIPFilePath"
                ],
                "type": "object",
                "properties": {
                    "personalityInfoJSONFilePath": {
                        "type": "string",
                        "description": "Personality Info JSON File Path"
                    },
                    "personalityJSONFilePath": {
                        "type": "string",
                        "description": "Personality JSON File Path"
                    },
                    "personalityZIPFilePath": {
                        "type": "string",
                        "description": "Personality Zip File Path"
                    },
                    "personalityISOFilePath": {
                        "type": "string",
                        "description": "Personality ISO File Path"
                    }
                },
                "description": "Personality upload specification for uploading the personality from raw files exported from avCenter cluster. This mode of uploading personality is useful when the source vCenter cluster is outside the target VCF deployment."
            },
            "PersonalityUploadSpecRawWithFileUploadId": {
                "required": [
                    "fileUploadId"
                ],
                "type": "object",
                "properties": {
                    "fileUploadId": {
                        "type": "string",
                        "description": "Personality file upload id. This id is obtained by calling v1/personalities/files and uploading files into SDDC Manager"
                    }
                },
                "description": "Personality upload specification for uploading the personality from raw files exported from a vCenter cluster. This mode of uploading personality is useful when the source vCenter cluster is outside the target VCF deployment. User can upload files from a source location to SDDC Manager using v1/personalities/files API, which returns a file upload id. The id is then passed in this spec with Personality Upload Mode RAW_WITH_FILE_UPLOAD_ID."
            },
            "PersonalityUploadSpecReferred": {
                "required": [
                    "clusterId",
                    "vCenterId"
                ],
                "type": "object",
                "properties": {
                    "vCenterId": {
                        "type": "string",
                        "description": "Source vCenter UUID from VCF inventory"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Source cluster MOID"
                    }
                },
                "description": "Personality upload specification for uploading the personality from a referred vCentercluster. This mode of uploading personality is useful when the source vCenter cluster is internal to the target VCF deployment."
            },
            "DomainReference": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the domain"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the domain"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the domain"
                    }
                },
                "description": "Represents a domain reference",
                "readOnly": true
            },
            "NsxTCluster": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the cluster",
                        "readOnly": true
                    },
                    "nativeId": {
                        "type": "string",
                        "description": "[Deprecated] Native ID of the NSX cluster",
                        "readOnly": true,
                        "deprecated": true
                    },
                    "vipFqdn": {
                        "type": "string",
                        "description": "FQDN for VIP of the cluster",
                        "readOnly": true
                    },
                    "vip": {
                        "type": "string",
                        "description": "VIP (Virtual IP Address) of the cluster",
                        "readOnly": true
                    },
                    "domains": {
                        "type": "array",
                        "description": "Information about the domains associated with the cluster",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/DomainReference"
                        }
                    },
                    "nodes": {
                        "type": "array",
                        "description": "Information about the NSX managers associated with the cluster",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/NsxTManager"
                        }
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the NSX managers associated with the cluster",
                        "readOnly": true
                    },
                    "isShared": {
                        "type": "boolean",
                        "description": "Boolean to identify if the NSX cluster is shared among workload domains",
                        "readOnly": true
                    },
                    "isShareable": {
                        "type": "boolean",
                        "description": "Boolean to identify if the NSX cluster can be shared to create a new workload domain",
                        "readOnly": true
                    },
                    "isVlcmCompatible": {
                        "type": "boolean",
                        "description": "[Deprecated] Boolean to identify if the NSX cluster is compatible with vLCM. This should not be used to determineif vLCM Clusters can be created on the domain",
                        "readOnly": true,
                        "deprecated": true
                    },
                    "status": {
                        "type": "string",
                        "description": "NSX cluster status. To get NSX cluster status invoke nsxt-clusters query API with criterion NSXT_CLUSTERS_WITH_STATUS",
                        "readOnly": true,
                        "example": "One among: INITIALIZING, STABLE, DEGRADED, UNSTABLE, UNAVAILABLE, UNIDENTIFIED, UNDEFINED"
                    }
                },
                "description": "NSX Cluster representation",
                "readOnly": true
            },
            "NsxTManager": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the manager",
                        "readOnly": true
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN of the manager",
                        "readOnly": true
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP address of the manager",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "NSX Manager VM name in vCenter",
                        "readOnly": true
                    }
                },
                "description": "NSX Manager representation",
                "readOnly": true
            },
            "NsxTQueryResponse": {
                "type": "object",
                "properties": {
                    "queryInfo": {
                        "$ref": "#/components/schemas/QueryInfo"
                    },
                    "result": {
                        "$ref": "#/components/schemas/PageNsxTCluster"
                    }
                },
                "description": "Represents a NSX cluster query response."
            },
            "PageNsxTCluster": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/NsxTCluster"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                },
                "description": "Represents a page of elements of a single type",
                "readOnly": true
            },
            "QueryInfo": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Status of the query",
                        "readOnly": true
                    },
                    "queryId": {
                        "type": "string",
                        "description": "ID of the query to retrieve",
                        "readOnly": true
                    },
                    "errorResponse": {
                        "$ref": "#/components/schemas/Error"
                    },
                    "failure": {
                        "type": "boolean"
                    },
                    "completed": {
                        "type": "boolean"
                    },
                    "processing": {
                        "type": "boolean"
                    }
                },
                "description": "Represents the query info.",
                "readOnly": true
            },
            "NsxTCriterion": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the criterion",
                        "readOnly": true,
                        "example": "NSXT_CLUSTERS_WITH_STATUS"
                    },
                    "arguments": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Arguments required for a particular criterion",
                            "readOnly": true
                        },
                        "description": "Arguments required for a particular criterion",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the criterion",
                        "readOnly": true
                    }
                },
                "description": "Represents a criterion for querying the NSX cluster"
            },
            "NsxtOidcSpec": {
                "required": [
                    "entityInventoryId",
                    "oidcType"
                ],
                "type": "object",
                "properties": {
                    "entityInventoryId": {
                        "type": "string",
                        "description": "VCF Inventory identificator of the entity to connect oidc"
                    },
                    "oidcType": {
                        "type": "string",
                        "description": "Type of the oidc entity.",
                        "enum": [
                            "vcenter"
                        ]
                    }
                },
                "description": "Spec for the parameters required to add OpenId connection to NSX"
            },
            "NsxtIpAddressPoolValidationSpec": {
                "required": [
                    "ipAddressPoolSpec"
                ],
                "type": "object",
                "properties": {
                    "ipAddressPoolSpec": {
                        "$ref": "#/components/schemas/IpAddressPoolSpec"
                    },
                    "nsxtClusterId": {
                        "type": "string"
                    }
                }
            },
            "NsxAlbControllerClusterSpec": {
                "required": [
                    "adminPassword",
                    "clusterFqdn",
                    "clusterIpAddress",
                    "clusterName",
                    "domainIds",
                    "formFactor"
                ],
                "type": "object",
                "properties": {
                    "domainIds": {
                        "type": "array",
                        "description": "IDs of the workload Domains where NSX Advanced Load Balancer Cluster will be deployed",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "IDs of the workload Domains where NSX Advanced Load Balancer Cluster will be deployed",
                            "readOnly": true
                        }
                    },
                    "clusterName": {
                        "maxLength": 80,
                        "minLength": 0,
                        "type": "string",
                        "description": "Name of NSX Advanced Load Balancer Cluster",
                        "readOnly": true
                    },
                    "clusterFqdn": {
                        "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
                        "type": "string",
                        "description": "NSX Advanced Load Balancer Cluster fully qualified domain name",
                        "readOnly": true
                    },
                    "clusterIpAddress": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "NSX Advanced Load Balancer Cluster Virtual IPv4 address of format 'x.x.x.x'",
                        "readOnly": true
                    },
                    "formFactor": {
                        "pattern": "(LARGE|MEDIUM|SMALL)",
                        "type": "string",
                        "description": "Size of NSX ALB cluster",
                        "readOnly": true,
                        "example": "One among: LARGE, MEDIUM, SMALL"
                    },
                    "adminPassword": {
                        "type": "string",
                        "description": "Admin user password of NSX Advanced Load Balancer Cluster",
                        "readOnly": true
                    },
                    "nodes": {
                        "maxItems": 3,
                        "minItems": 3,
                        "type": "array",
                        "description": "NSX Advanced Load Balancer Cluster Controller Nodes",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/NsxAlbControllerNodeSpec"
                        }
                    },
                    "bundleId": {
                        "type": "string",
                        "description": "NSX Advanced Load Balancer Bundle ID",
                        "readOnly": true
                    }
                },
                "description": "NSX Alb cluster creation data"
            },
            "NsxAlbControllerNodeSpec": {
                "required": [
                    "ipAddress"
                ],
                "type": "object",
                "properties": {
                    "ipAddress": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "IPv4 address of NSX Advanced Load Balancer Node",
                        "readOnly": true
                    }
                },
                "description": "NSX ALB Node representation",
                "readOnly": true
            },
            "NsxAlbVersionValidationSpec": {
                "required": [
                    "bundleId",
                    "domainIds"
                ],
                "type": "object",
                "properties": {
                    "domainIds": {
                        "type": "array",
                        "description": "IDs of the WorkLoadDomain where NSX Advanced Load Balancer Cluster will be deployed",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "IDs of the WorkLoadDomain where NSX Advanced Load Balancer Cluster will be deployed",
                            "readOnly": true
                        }
                    },
                    "bundleId": {
                        "type": "string",
                        "description": "NSX Advanced Load Balancer Bundle ID",
                        "readOnly": true
                    }
                },
                "description": "NSX Alb cluster creation data"
            },
            "IpPool": {
                "required": [
                    "end",
                    "start"
                ],
                "type": "object",
                "properties": {
                    "start": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "Start IP address of the IP pool"
                    },
                    "end": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "End IP address of the IP pool"
                    }
                },
                "description": "Represents an IP Pool of a network in a network pool"
            },
            "Network": {
                "required": [
                    "gateway",
                    "mask",
                    "mtu",
                    "subnet",
                    "type",
                    "vlanId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the network",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Network Type of the network",
                        "example": "VSAN, VMOTION, VXLAN, NFS, ISCSI, VSAN_EXTERNAL"
                    },
                    "vlanId": {
                        "type": "integer",
                        "description": "VLAN ID associated with the network",
                        "format": "int32"
                    },
                    "mtu": {
                        "type": "integer",
                        "description": "MTU of the network",
                        "format": "int32"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "Subnet associated with the network"
                    },
                    "mask": {
                        "type": "string",
                        "description": "Subnet mask for the subnet of the network"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "Gateway for the network"
                    },
                    "ipPools": {
                        "type": "array",
                        "description": "List of IP pool ranges to use",
                        "items": {
                            "$ref": "#/components/schemas/IpPool"
                        }
                    },
                    "freeIps": {
                        "type": "array",
                        "description": "List of free IPs to use",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "List of free IPs to use",
                            "readOnly": true
                        }
                    },
                    "usedIps": {
                        "type": "array",
                        "description": "List of used IPs",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "List of used IPs",
                            "readOnly": true
                        }
                    }
                },
                "description": "Represents a network in a network pool",
                "readOnly": true,
                "deprecated": true
            },
            "NetworkPool": {
                "required": [
                    "name",
                    "networks"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the network pool",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "User specified name of the network pool"
                    },
                    "networks": {
                        "type": "array",
                        "description": "Representing the networks associated with the network pool",
                        "items": {
                            "$ref": "#/components/schemas/Network"
                        }
                    }
                },
                "description": "Represents a network pool in the system"
            },
            "AsyncPatch": {
                "required": [
                    "productVersion",
                    "supportedSkuTypes"
                ],
                "type": "object",
                "properties": {
                    "productVersion": {
                        "type": "string",
                        "description": "Product version of the async patch bundle",
                        "readOnly": true
                    },
                    "supportedSkuTypes": {
                        "type": "array",
                        "description": "Supported SKU types of the async patch bundle",
                        "readOnly": true,
                        "example": "One among: VXRAIL, VSAN",
                        "items": {
                            "type": "string",
                            "description": "Supported SKU types of the async patch bundle",
                            "readOnly": true,
                            "example": "One among: VXRAIL, VSAN"
                        }
                    },
                    "inputSpecUrl": {
                        "type": "string",
                        "description": "Input spec URL of the async patch bundle",
                        "readOnly": true
                    },
                    "sddcHotPatchInfo": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "description": "Sddc hot patch info for each sddc manager service (lcm, dm, om, commonsvc)",
                            "readOnly": true,
                            "items": {
                                "$ref": "#/components/schemas/SddcHotPatchInfo"
                            }
                        },
                        "description": "Sddc hot patch info for each sddc manager service (lcm, dm, om, commonsvc)",
                        "readOnly": true
                    }
                },
                "description": "Async patch bundle rest model that is located in the 2.0 manifest, these models are consumed by LCM's async patch workflows to determine if customer can download patch in list and apply.",
                "readOnly": true
            },
            "BundleRecall": {
                "required": [
                    "recalledBundleIds",
                    "replacementBundleStatus"
                ],
                "type": "object",
                "properties": {
                    "recalledBundleIds": {
                        "type": "array",
                        "description": "List of Bundle IDs that are recalled",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "List of Bundle IDs that are recalled",
                            "readOnly": true
                        }
                    },
                    "replacementBundleStatus": {
                        "type": "string",
                        "description": "Status of bundle replacement.",
                        "readOnly": true,
                        "example": "One among: NONE, PENDING, READY"
                    },
                    "replacementBundleIds": {
                        "type": "array",
                        "description": "List of Bundle IDs that act as replacement",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "List of Bundle IDs that act as replacement",
                            "readOnly": true
                        }
                    }
                },
                "description": "Bundle Recall model for collection of bundles that are recalled with their replacements if applicable.",
                "readOnly": true
            },
            "Manifest": {
                "required": [
                    "creationTime",
                    "publishedDate",
                    "releases",
                    "sequenceNumber",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "type": "integer",
                        "description": "Manifest version supported by VCF",
                        "format": "int32",
                        "readOnly": true
                    },
                    "sequenceNumber": {
                        "type": "integer",
                        "description": "Manifest sequence number which signifies an update in manifest",
                        "format": "int32",
                        "readOnly": true
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Creation time for the manifest e.g. 2020-06-08T02:20:15.844Z, in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format",
                        "readOnly": true
                    },
                    "publishedDate": {
                        "type": "string",
                        "description": "Date of publish of the manifest e.g. 2020-06-08T02:20:15.844Z, in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format",
                        "readOnly": true
                    },
                    "releases": {
                        "type": "array",
                        "description": "Releases of VCF in the ascending order of product version",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Release"
                        }
                    },
                    "recalledBundles": {
                        "type": "array",
                        "description": "Collection of bundles that are recalled and their replacements, if applicable",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/BundleRecall"
                        }
                    },
                    "sddcManagerReleases": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Product releases in the ascending order of product version",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SddcManagerRelease"
                        }
                    },
                    "asyncPatches": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "description": "Async patches used by Async Patch Tool",
                            "readOnly": true,
                            "items": {
                                "$ref": "#/components/schemas/AsyncPatch"
                            }
                        },
                        "description": "Async patches used by Async Patch Tool",
                        "readOnly": true
                    },
                    "vvsMappings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/components/schemas/VvsVersionAliases"
                            },
                            "description": "VVS product release Id to VCF version mapping",
                            "readOnly": true
                        },
                        "description": "VVS product release Id to VCF version mapping",
                        "readOnly": true
                    }
                },
                "description": "LCM 2.0 Manifest model that represents the metadata of the VMware Cloud foundation components and releases that Lyfe cycle manager utilises."
            },
            "PatchBundle": {
                "required": [
                    "bundleElements",
                    "bundleId",
                    "bundleType",
                    "cumulativeFromVcfVersion"
                ],
                "type": "object",
                "properties": {
                    "bundleId": {
                        "type": "string",
                        "description": "Bundle ID of the patch bundle",
                        "readOnly": true
                    },
                    "bundleType": {
                        "type": "string",
                        "description": "Bundle type of the patch bundle",
                        "readOnly": true
                    },
                    "bundleElements": {
                        "type": "array",
                        "description": "Bundle elements of the patch bundle",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "Bundle elements of the patch bundle",
                            "readOnly": true
                        }
                    },
                    "cumulativeFromVcfVersion": {
                        "type": "string",
                        "description": "Minimum VCF version that this patch bundle can be directly applied on",
                        "readOnly": true
                    }
                },
                "description": "Model for patch bundle in a release",
                "readOnly": true
            },
            "ProductVersion": {
                "required": [
                    "name",
                    "publicName",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the product. e.g ESX",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Version for the product, e.g 6.7.0-11675023",
                        "readOnly": true
                    },
                    "publicName": {
                        "type": "string",
                        "description": "Public name of the product, e.g VMware ESXi",
                        "readOnly": true
                    },
                    "releaseURL": {
                        "type": "string",
                        "description": "URL for the release.",
                        "readOnly": true
                    },
                    "additionalMetadata": {
                        "type": "string",
                        "description": "any additional metadata",
                        "readOnly": true
                    }
                },
                "description": "Details of the product/component for the release.",
                "readOnly": true
            },
            "Release": {
                "required": [
                    "bom",
                    "description",
                    "minCompatibleVcfVersion",
                    "product",
                    "releaseDate",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "product": {
                        "type": "string",
                        "description": "Name of the product e.g. \"VCF\"",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the release",
                        "readOnly": true
                    },
                    "minCompatibleVcfVersion": {
                        "type": "string",
                        "description": "Minimum compatible VCF version, used to represent compatibility of SDDC Manager and VMware BOM components",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Release description with all major features. ",
                        "readOnly": true
                    },
                    "releaseDate": {
                        "type": "string",
                        "description": "Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format",
                        "readOnly": true
                    },
                    "bom": {
                        "type": "array",
                        "description": "Release bill of materials",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ProductVersion"
                        }
                    },
                    "isApplicable": {
                        "type": "boolean",
                        "description": "[Deprecated] Whether bundle is applicable or not.",
                        "readOnly": true,
                        "deprecated": true
                    },
                    "notApplicableReason": {
                        "type": "string",
                        "description": "[Deprecated] Incompatibility reason for not applicable.",
                        "readOnly": true,
                        "deprecated": true
                    },
                    "sku": {
                        "type": "array",
                        "description": "Release sku specific patch and bill of materials",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SkuBomDetails"
                        }
                    },
                    "updates": {
                        "type": "array",
                        "description": "Collection of release updates",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ReleaseUpdate"
                        }
                    },
                    "patchBundles": {
                        "type": "array",
                        "description": "List of patch bundles in this release",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/PatchBundle"
                        }
                    },
                    "eol": {
                        "type": "string",
                        "description": "Release eol information e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format",
                        "readOnly": true
                    },
                    "upgradeOrder": {
                        "type": "string",
                        "description": "Custom upgrade order. Comma separated list of components in upgrade order. Supported components types: NSX_T_MANAGER, VCENTER, ESX_HOST. ",
                        "readOnly": true
                    }
                },
                "description": "Model for releases with their description and product version",
                "readOnly": true
            },
            "ReleaseUpdate": {
                "required": [
                    "baseProductVersion",
                    "description",
                    "id",
                    "productName",
                    "releaseDate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Release version",
                        "readOnly": true
                    },
                    "productName": {
                        "type": "string",
                        "description": "Product name for which the release update is provided",
                        "readOnly": true
                    },
                    "baseProductVersion": {
                        "type": "string",
                        "description": "Base product version for the release",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the release update",
                        "readOnly": true
                    },
                    "releaseUpdateURL": {
                        "type": "string",
                        "description": "URL to the release update",
                        "format": "url",
                        "readOnly": true
                    },
                    "releaseDate": {
                        "type": "string",
                        "description": "Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format",
                        "readOnly": true
                    }
                },
                "description": "Update to a given release",
                "readOnly": true
            },
            "SddcHotPatchInfo": {
                "required": [
                    "sddcHotPatchMinTargetVcfVersion",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "Product version",
                        "readOnly": true
                    },
                    "sddcHotPatchMinTargetVcfVersion": {
                        "type": "string",
                        "description": "Sddc Hot patch min target version",
                        "readOnly": true
                    }
                },
                "description": "Sddc Hot patch info rest model that is located in the 2.0 manifest, as part of the async patch catalog.",
                "readOnly": true
            },
            "SddcManagerRelease": {
                "required": [
                    "additionalMetadata",
                    "bundleId",
                    "cumulativeFromVcfVersion",
                    "description",
                    "releaseDate",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "Sddc Manager release version",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Sddc Manager release description",
                        "readOnly": true
                    },
                    "additionalMetadata": {
                        "type": "string",
                        "description": "Sddc Manager release additional details",
                        "readOnly": true
                    },
                    "bundleId": {
                        "type": "string",
                        "description": "Bundle ID of the Sddc Manager release",
                        "readOnly": true
                    },
                    "releaseDate": {
                        "type": "integer",
                        "description": "Sddc Manager version release date in epoch",
                        "format": "int64",
                        "readOnly": true
                    },
                    "cumulativeFromVcfVersion": {
                        "type": "string",
                        "description": "Minimum VCF version that this patch bundle can be directly applied on",
                        "readOnly": true
                    }
                },
                "description": "Collection of Sddc Manager Releases",
                "readOnly": true
            },
            "SkuBomDetails": {
                "required": [
                    "bom"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "SKU name",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description to be shown in release page",
                        "readOnly": true
                    },
                    "skuSpecificPatchBundles": {
                        "type": "array",
                        "description": "List of patch bundles in this release",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SkuSpecificPatchBundles"
                        }
                    },
                    "bom": {
                        "type": "array",
                        "description": "Sku specific bill of materials",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ProductVersion"
                        }
                    }
                },
                "description": "Model for sku with their name, description, patchBundles and bom",
                "readOnly": true
            },
            "SkuSpecificPatchBundles": {
                "required": [
                    "bundleType",
                    "bundleVersion",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "bundleType": {
                        "type": "string",
                        "description": "Bundle type of the patch bundle",
                        "readOnly": true
                    },
                    "bundleVersion": {
                        "type": "string",
                        "description": "Bundle Version of the product",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Product version",
                        "readOnly": true
                    }
                },
                "description": "Model for Sku specific patch bundle in a release",
                "readOnly": true
            },
            "VvsVersionAliases": {
                "required": [
                    "version"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "Product version",
                        "readOnly": true
                    },
                    "aliases": {
                        "type": "array",
                        "description": "Product version aliases",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "Product version aliases",
                            "readOnly": true
                        }
                    }
                },
                "description": "Vvs Mapping rest model that is located in the 2.0 manifest, these models are consumed by AP tool to determine the release Id to vcf version mapping in VVS compatibility data.",
                "readOnly": true
            },
            "LicenseKey": {
                "required": [
                    "description",
                    "key",
                    "productType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the license key",
                        "readOnly": true
                    },
                    "key": {
                        "maxLength": 29,
                        "minLength": 29,
                        "pattern": "(((?![BIOS_])\\w){5}-){4}?((?![BIOS_])\\w){5}?",
                        "type": "string",
                        "description": "The 29 alpha numeric character license key with hyphens",
                        "readOnly": true,
                        "example": "XX0XX-XX0XX-XX0XX-XX0XX-XX0XX "
                    },
                    "productType": {
                        "type": "string",
                        "description": "The type of the product to which the license key is applicable",
                        "readOnly": true,
                        "example": "One among: VCENTER, VSAN, ESXI, NSXT, WCP"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the license key given by user",
                        "readOnly": true
                    },
                    "productVersion": {
                        "type": "string",
                        "description": "Product version",
                        "readOnly": true
                    },
                    "isUnlimited": {
                        "type": "boolean",
                        "description": "Indicates if the license key has unlimited usage",
                        "readOnly": true
                    },
                    "licenseKeyUsage": {
                        "$ref": "#/components/schemas/LicenseKeyUsage"
                    },
                    "licenseKeyValidity": {
                        "$ref": "#/components/schemas/LicenseKeyValidity"
                    },
                    "features": {
                        "type": "array",
                        "description": "License key features",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "License key features",
                            "readOnly": true
                        }
                    },
                    "licenseEdition": {
                        "type": "string",
                        "description": "License key edition",
                        "readOnly": true
                    },
                    "licenseUnit": {
                        "type": "string",
                        "description": "License capacity unit",
                        "readOnly": true
                    },
                    "minimumCore": {
                        "type": "integer",
                        "description": "The minimum number of core licenses required per CPU, when license unit is cpu core",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "description": "Defines a license key and its attributes"
            },
            "LicenseKeyUsage": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "description": "The total units of the license key",
                        "format": "int32",
                        "readOnly": true
                    },
                    "remaining": {
                        "type": "integer",
                        "description": "The remaining/free units of the license key",
                        "format": "int32",
                        "readOnly": true
                    },
                    "used": {
                        "type": "integer",
                        "description": "The consumed/used units of the license key",
                        "format": "int32",
                        "readOnly": true
                    },
                    "licenseUnit": {
                        "type": "string",
                        "description": "Units of the license key",
                        "readOnly": true,
                        "example": "One among: CPUPACKAGE, INSTANCE, VMS, CCU, PLU, DESKTOPVM, SERVERVM, VM, SERVER, CORES, CONCURRENTUSER, NAMEDUSER, CPUCORE, TIB"
                    }
                },
                "description": "Defines license key usage",
                "readOnly": true
            },
            "LicenseKeyValidity": {
                "type": "object",
                "properties": {
                    "licenseKeyStatus": {
                        "type": "string",
                        "description": "The validity status of the license key",
                        "readOnly": true,
                        "example": "One among: EXPIRED, ACTIVE, NEVER_EXPIRES"
                    },
                    "expiryDate": {
                        "type": "string",
                        "description": "The license key expiry date",
                        "readOnly": true
                    }
                },
                "description": "Defines license key validity details",
                "readOnly": true
            },
            "FederatedIdentityProviderSpec": {
                "required": [
                    "directory",
                    "name",
                    "oidcSpec"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The user-friendly name for the Identity Provider"
                    },
                    "directory": {
                        "$ref": "#/components/schemas/IdentityProviderDirectory"
                    },
                    "oidcSpec": {
                        "$ref": "#/components/schemas/OidcSpec"
                    },
                    "syncClientTokenTTL": {
                        "type": "integer",
                        "description": "The lifetime in seconds of the sync client bear token, default to 6 months if not specified. This field is deprecated.  It is being made as a query parameter in the sync client token generation API. ",
                        "format": "int64",
                        "deprecated": true
                    }
                },
                "description": "The identity management configuration when the provider is via broker federation"
            },
            "IdentityProviderDirectory": {
                "required": [
                    "defaultDomain",
                    "domains",
                    "federatedIdpSourceType",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "directoryId": {
                        "type": "string",
                        "description": "The id of the directory"
                    },
                    "name": {
                        "type": "string",
                        "description": "The user-friendly name for the directory. This must be unique and the allowed symbols are letters in any language, digits (0-9), space, underscore and hyphen"
                    },
                    "defaultDomain": {
                        "type": "string",
                        "description": "The trusted default domain of the directory",
                        "readOnly": true
                    },
                    "domains": {
                        "type": "array",
                        "description": "The set of trusted domains of the directory",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "The set of trusted domains of the directory",
                            "readOnly": true
                        }
                    },
                    "federatedIdpSourceType": {
                        "type": "string",
                        "description": "The type of the Federated IDP",
                        "readOnly": true,
                        "example": "One among: OKTA, MICROSOFT_ENTRA_ID, PING_FEDERATE"
                    }
                },
                "description": "The directory configuration when the provider is via broker federation",
                "readOnly": true
            },
            "IdentityProviderSpec": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The user-friendly name for the Identity Provider"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of Identity Identity Provider"
                    },
                    "certChain": {
                        "type": "array",
                        "description": "The root certificate chain required to connect to the external server",
                        "items": {
                            "type": "string",
                            "description": "The root certificate chain required to connect to the external server"
                        }
                    },
                    "ldap": {
                        "$ref": "#/components/schemas/LdapSpec"
                    },
                    "oidc": {
                        "$ref": "#/components/schemas/OidcSpec"
                    },
                    "fedIdpSpec": {
                        "$ref": "#/components/schemas/FederatedIdentityProviderSpec"
                    }
                },
                "description": "Identity Provider Spec"
            },
            "LdapSpec": {
                "required": [
                    "domainName",
                    "password",
                    "sourceDetails",
                    "type",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The type of the LDAP Server",
                        "example": "One among: OpenLdap, ActiveDirectory"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "The name to associate with the created domain"
                    },
                    "domainAlias": {
                        "type": "string",
                        "description": "The optional alias to associate the domain name"
                    },
                    "username": {
                        "type": "string",
                        "description": "User name to connect to ldap(s) server"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password to connect to the ldap(s) server"
                    },
                    "sourceDetails": {
                        "$ref": "#/components/schemas/SourceDetails"
                    }
                },
                "description": "The LDAP specification when the protocol is LDAP"
            },
            "OidcSpec": {
                "required": [
                    "clientId",
                    "clientSecret",
                    "discoveryEndpoint"
                ],
                "type": "object",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "Client identifier to connect to the provider"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "The secret shared between the client and the provider"
                    },
                    "discoveryEndpoint": {
                        "type": "string",
                        "description": "Endpoint to retrieve the provider metadata"
                    }
                },
                "description": "Identity management configuration when the Identity Provider is based on oidc",
                "readOnly": true
            },
            "SourceDetails": {
                "required": [
                    "groupsBaseDn",
                    "serverEndpoints",
                    "usersBaseDn"
                ],
                "type": "object",
                "properties": {
                    "usersBaseDn": {
                        "type": "string",
                        "description": "Base distinguished name for users"
                    },
                    "groupsBaseDn": {
                        "type": "string",
                        "description": "Base distinguished name for groups"
                    },
                    "certChain": {
                        "type": "array",
                        "description": "SSL certificate chain in base64 encoding. This field can be unset only, if all the active directory server endpoints use the LDAP (not LDAPS) protocol",
                        "items": {
                            "type": "string",
                            "description": "SSL certificate chain in base64 encoding. This field can be unset only, if all the active directory server endpoints use the LDAP (not LDAPS) protocol"
                        }
                    },
                    "serverEndpoints": {
                        "type": "array",
                        "description": "Active directory server endpoints. At least one active directory server endpoint must be set",
                        "items": {
                            "type": "string",
                            "description": "Active directory server endpoints. At least one active directory server endpoint must be set"
                        }
                    }
                },
                "description": "Details of the Identity Source",
                "readOnly": true
            },
            "IdentitySourceSpec": {
                "required": [
                    "ldap",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The user-friendly name for the identity Source"
                    },
                    "ldap": {
                        "$ref": "#/components/schemas/LdapSpec"
                    }
                },
                "description": "Identity Source Spec"
            },
            "HostCommissionSpec": {
                "required": [
                    "fqdn",
                    "networkPoolId",
                    "password",
                    "storageType",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN of the host"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username of the host"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password of the host"
                    },
                    "storageType": {
                        "type": "string",
                        "description": "Storage Type",
                        "example": "One among: VSAN, VSAN_ESA, VSAN_REMOTE, VSAN_MAX, NFS, VMFS_FC, VVOL"
                    },
                    "vvolStorageProtocolType": {
                        "type": "string",
                        "description": "vVol Storage Protocol Type",
                        "example": "One among: ISCSI, NFS, FC"
                    },
                    "networkPoolId": {
                        "type": "string",
                        "description": "ID of the network pool to associate the host with"
                    },
                    "networkPoolName": {
                        "type": "string",
                        "description": "Name of the network pool to associate the host with"
                    },
                    "sshThumbprint": {
                        "type": "string",
                        "description": "SSH thumbprint of the host"
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "SSL thumbprint of the host"
                    }
                },
                "description": " This specification contains the input to commission a host to VMware Cloud Foundation"
            },
            "AddOnInfo": {
                "required": [
                    "name",
                    "vendor",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "Add on software version",
                        "readOnly": true,
                        "example": "2.0-1"
                    },
                    "name": {
                        "type": "string",
                        "description": "Component name",
                        "readOnly": true,
                        "example": "DELL-sample-Addon"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "vendor",
                        "readOnly": true,
                        "example": "Dell"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Add On display name",
                        "readOnly": true
                    },
                    "displayVersion": {
                        "type": "string",
                        "description": "Add On display version",
                        "readOnly": true
                    }
                },
                "description": "AddOn contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain.",
                "readOnly": true
            },
            "BaseImageDetails": {
                "required": [
                    "displayName",
                    "displayVersion"
                ],
                "type": "object",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "BaseImage display name",
                        "readOnly": true,
                        "example": "7.0.0-0.0.30340198"
                    },
                    "displayVersion": {
                        "type": "string",
                        "description": "BaseImage display version",
                        "readOnly": true
                    },
                    "releaseDate": {
                        "type": "string",
                        "description": "BaseImage release date",
                        "readOnly": true,
                        "deprecated": true
                    },
                    "releaseTimestamp": {
                        "type": "string",
                        "description": "Timestamp of BaseImage release",
                        "readOnly": true
                    },
                    "quickPatchCompatibleVersions": {
                        "type": "array",
                        "description": "ESX Quick Patch compatible source image versions",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Version"
                        }
                    }
                },
                "description": "BaseImage contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain.",
                "readOnly": true
            },
            "BaseImageInfo": {
                "required": [
                    "version"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "BaseImage Version",
                        "readOnly": true,
                        "example": "7.0.0-0.0.30340198"
                    },
                    "details": {
                        "$ref": "#/components/schemas/BaseImageDetails"
                    }
                },
                "description": "BaseImage contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain.",
                "readOnly": true
            },
            "ClusterReference": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the cluster"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the cluster"
                    }
                },
                "description": "Represents a reference to the cluster",
                "readOnly": true
            },
            "ComponentDetails": {
                "required": [
                    "displayName",
                    "vendor"
                ],
                "type": "object",
                "properties": {
                    "vendor": {
                        "type": "string",
                        "description": "Component vendor",
                        "readOnly": true,
                        "example": "intel"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Component display name",
                        "readOnly": true
                    },
                    "displayVersion": {
                        "type": "string",
                        "description": "Component display version",
                        "readOnly": true
                    }
                },
                "description": "Component contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain.",
                "readOnly": true
            },
            "ComponentInfo": {
                "required": [
                    "details",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "Component Version",
                        "readOnly": true,
                        "example": "1.3.2.8-1OEM.650.0.0.4598673"
                    },
                    "details": {
                        "$ref": "#/components/schemas/ComponentDetails"
                    }
                },
                "description": "Component contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain.",
                "readOnly": true
            },
            "Cpu": {
                "type": "object",
                "properties": {
                    "frequencyMHz": {
                        "type": "number",
                        "description": "Total CPU frequency in MHz",
                        "format": "double",
                        "readOnly": true
                    },
                    "usedFrequencyMHz": {
                        "type": "number",
                        "description": "Used CPU frequency in MHz",
                        "format": "double",
                        "readOnly": true
                    },
                    "cores": {
                        "type": "integer",
                        "description": "Number of CPU cores",
                        "format": "int32",
                        "readOnly": true
                    },
                    "cpuCores": {
                        "type": "array",
                        "description": "Information about each of the CPU cores",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/CpuCore"
                        }
                    }
                },
                "description": "Represents information about CPUs on a host",
                "readOnly": true
            },
            "CpuCore": {
                "type": "object",
                "properties": {
                    "frequencyMHz": {
                        "type": "number",
                        "description": "CPU frequency in MHz",
                        "format": "double",
                        "readOnly": true
                    },
                    "model": {
                        "type": "string",
                        "description": "Hardware model of the CPU",
                        "readOnly": true
                    },
                    "manufacturer": {
                        "type": "string",
                        "description": "Hardware manufacturer of the CPU",
                        "readOnly": true
                    }
                },
                "description": "Represents a CPU core",
                "readOnly": true
            },
            "Disk": {
                "type": "object",
                "properties": {
                    "capacityMB": {
                        "type": "number",
                        "description": "Total capacity of the disk in MB",
                        "format": "double",
                        "readOnly": true
                    },
                    "diskType": {
                        "type": "string",
                        "description": "Type of the disk",
                        "readOnly": true,
                        "example": "One among: HDD, FLASH"
                    },
                    "manufacturer": {
                        "type": "string",
                        "description": "Hardware manufacturer of the disk",
                        "readOnly": true
                    },
                    "model": {
                        "type": "string",
                        "description": "Hardware model of the disk",
                        "readOnly": true
                    }
                },
                "description": "Represents a disk",
                "readOnly": true
            },
            "HardwareSupportInfo": {
                "required": [
                    "packages"
                ],
                "type": "object",
                "properties": {
                    "packages": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/HardwareSupportPackageInfo"
                        },
                        "description": "Hardware support packages",
                        "readOnly": true
                    }
                },
                "description": "Hardware support contains base os, components, hardware support, addOn metadata to install/update the appropriate Cloud Foundation software components in your management domain or workload domain.",
                "readOnly": true
            },
            "HardwareSupportPackageInfo": {
                "required": [
                    "pkg",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "pkg": {
                        "type": "string",
                        "description": "Hardware support package name",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Hardware support package version",
                        "readOnly": true
                    }
                },
                "description": "Hardware Support Package contains metadata regarding the package, version to install/update the appropriate Cloud Foundation software components in your management domain or workload domain.",
                "readOnly": true
            },
            "Host": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the host",
                        "readOnly": true
                    },
                    "serialNumber": {
                        "type": "string",
                        "description": "Serial Number of the host",
                        "readOnly": true
                    },
                    "esxiVersion": {
                        "type": "string",
                        "description": "ESXi software version of the host",
                        "readOnly": true
                    },
                    "sshThumbprint": {
                        "type": "string",
                        "description": "SSH Thumbprint of the host",
                        "readOnly": true
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "SSL Thumbprint of the host",
                        "readOnly": true
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN of the host",
                        "readOnly": true
                    },
                    "hardwareVendor": {
                        "type": "string",
                        "description": "Hardware vendor of the host",
                        "readOnly": true
                    },
                    "hardwareModel": {
                        "type": "string",
                        "description": "Hardware model of the host",
                        "readOnly": true
                    },
                    "isPrimary": {
                        "type": "boolean",
                        "description": "Is the host a primary host in VxRail HCI Context",
                        "readOnly": true
                    },
                    "isVsanEsaEligible": {
                        "type": "boolean",
                        "description": "Is the host vSAN ESA eligible in VxRail HCI Context",
                        "readOnly": true
                    },
                    "ipAddresses": {
                        "type": "array",
                        "description": "Information about IP addresses assigned to the host",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/IpAddress"
                        }
                    },
                    "cpu": {
                        "$ref": "#/components/schemas/Cpu"
                    },
                    "memory": {
                        "$ref": "#/components/schemas/Memory"
                    },
                    "storage": {
                        "$ref": "#/components/schemas/Storage"
                    },
                    "physicalNics": {
                        "type": "array",
                        "description": "Information about physical NICs on the host",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/PhysicalNic"
                        }
                    },
                    "networks": {
                        "type": "array",
                        "description": "Information about Networks on the host This is deprecated",
                        "readOnly": true,
                        "deprecated": true,
                        "items": {
                            "$ref": "#/components/schemas/Network"
                        }
                    },
                    "hostNetworks": {
                        "type": "array",
                        "description": "Information about Networks on the host",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/HostNetwork"
                        }
                    },
                    "domain": {
                        "$ref": "#/components/schemas/DomainReference"
                    },
                    "networkpool": {
                        "$ref": "#/components/schemas/NetworkPoolReference"
                    },
                    "cluster": {
                        "$ref": "#/components/schemas/ClusterReference"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the host",
                        "readOnly": true,
                        "example": "One among: ASSIGNED, UNASSIGNED_USEABLE, UNASSIGNED_UNUSEABLE"
                    },
                    "compatibleStorageType": {
                        "type": "string",
                        "description": "Information about the host compatible storage type",
                        "readOnly": true
                    },
                    "bundleRepoDatastore": {
                        "type": "string",
                        "description": "Bundle repositry datastore for this host",
                        "readOnly": true
                    },
                    "hybrid": {
                        "type": "boolean",
                        "description": "Information about the storage type of the host, true if the host is hybrid",
                        "readOnly": true
                    },
                    "softwareInfo": {
                        "$ref": "#/components/schemas/SoftwareInfo"
                    },
                    "tags": {
                        "type": "array",
                        "description": "Deprecated, this list will always be returned empty",
                        "deprecated": true,
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "configurationStatus": {
                        "type": "string",
                        "description": "Information about the configuration status of the host",
                        "readOnly": true,
                        "example": "One among: ACTIVE, ACTIVATING, UPGRADING, DISABLED, ERROR, SKIPPED, DEACTIVATING, EXPANDING, SHRINKING, CREATING"
                    },
                    "datastoreType": {
                        "type": "string",
                        "description": "Information about the datastore type of the host",
                        "readOnly": true,
                        "example": "One among: VSAN, VSAN_ESA, VSAN_MAX, NFS, FC, VVOL, VSAN_REMOTE"
                    }
                },
                "description": "Represents an Esxi host in the system",
                "readOnly": true
            },
            "HostNetwork": {
                "required": [
                    "mtu",
                    "type",
                    "vlanId"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Network Type of the network"
                    },
                    "vlanId": {
                        "type": "integer",
                        "description": "VLAN ID associated with the network",
                        "format": "int32"
                    },
                    "mtu": {
                        "type": "integer",
                        "description": "MTU of the network",
                        "format": "int32"
                    }
                },
                "description": "Represents a network in a Host",
                "readOnly": true
            },
            "HostQueryResponse": {
                "type": "object",
                "properties": {
                    "queryInfo": {
                        "$ref": "#/components/schemas/QueryInfo"
                    },
                    "result": {
                        "$ref": "#/components/schemas/PageHost"
                    }
                },
                "description": "Represents a host query response"
            },
            "IpAddress": {
                "type": "object",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "description": "IP address",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of IP addresss",
                        "readOnly": true,
                        "example": "One among: MANAGEMENT, VSAN, VMOTION, NFS, VSAN_EXTERNAL"
                    }
                },
                "description": "Represents IP address",
                "readOnly": true
            },
            "Memory": {
                "type": "object",
                "properties": {
                    "totalCapacityMB": {
                        "type": "number",
                        "description": "Total memory in MB",
                        "format": "double",
                        "readOnly": true
                    },
                    "usedCapacityMB": {
                        "type": "number",
                        "description": "Used memory in MB",
                        "format": "double",
                        "readOnly": true
                    }
                },
                "description": "Represents information about memory on a host",
                "readOnly": true
            },
            "NetworkPoolReference": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the network pool"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the network pool"
                    }
                },
                "description": "Represents a network pool reference",
                "readOnly": true
            },
            "PageHost": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Host"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                },
                "description": "Represents a page of elements of a single type",
                "readOnly": true
            },
            "PhysicalNic": {
                "type": "object",
                "properties": {
                    "deviceName": {
                        "type": "string",
                        "description": "Device name of the physical NIC",
                        "readOnly": true
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "Mac address of the physical NIC",
                        "readOnly": true
                    },
                    "speed": {
                        "type": "integer",
                        "description": "Speed in bytes of the physical NIC",
                        "format": "int64",
                        "readOnly": true
                    },
                    "unit": {
                        "type": "string",
                        "description": "Unit of physical NIC speed",
                        "readOnly": true,
                        "enum": [
                            "KB",
                            "MB",
                            "GB",
                            "TB",
                            "PB"
                        ]
                    },
                    "smartNicInfo": {
                        "$ref": "#/components/schemas/SmartNicInfo"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the physical NIC",
                        "readOnly": true,
                        "example": "One among: INACTIVE, ACTIVE_IN_USE, ACTIVE_NOT_IN_USE"
                    }
                },
                "description": "Represents a physical NIC",
                "readOnly": true
            },
            "SmartNicInfo": {
                "type": "object",
                "properties": {
                    "vendorName": {
                        "type": "string",
                        "description": "Vendor Name of the SmartNicInfo",
                        "readOnly": true
                    },
                    "dpuId": {
                        "type": "string",
                        "description": "Dpu ID corresponding to the SmartNicInfo",
                        "readOnly": true
                    }
                },
                "description": "Represents informtion related to smart nic",
                "readOnly": true
            },
            "SoftwareInfo": {
                "required": [
                    "baseImage"
                ],
                "type": "object",
                "properties": {
                    "baseImage": {
                        "$ref": "#/components/schemas/BaseImageInfo"
                    },
                    "addOn": {
                        "$ref": "#/components/schemas/AddOnInfo"
                    },
                    "components": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ComponentInfo"
                        },
                        "description": "Personality components",
                        "readOnly": true
                    },
                    "hardwareSupport": {
                        "$ref": "#/components/schemas/HardwareSupportInfo"
                    }
                },
                "description": "SoftwareSpec contains base os, components, hardware support, addOn metadata to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
            },
            "Storage": {
                "type": "object",
                "properties": {
                    "totalCapacityMB": {
                        "type": "number",
                        "description": "Total storage capacity in MB",
                        "format": "double",
                        "readOnly": true
                    },
                    "usedCapacityMB": {
                        "type": "number",
                        "description": "Used storage capacity in MB",
                        "format": "double",
                        "readOnly": true
                    },
                    "disks": {
                        "type": "array",
                        "description": "Information about disks",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Disk"
                        }
                    }
                },
                "description": "Represents information about storage on a host",
                "readOnly": true
            },
            "Tag": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the tag"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the tag"
                    },
                    "categoryId": {
                        "type": "string",
                        "description": "ID of the tag category"
                    },
                    "categoryName": {
                        "type": "string",
                        "description": "Category name of the tag"
                    }
                },
                "description": "Represents a tag"
            },
            "Version": {
                "required": [
                    "displayVersion",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "Source Image full version",
                        "readOnly": true,
                        "example": "8.0.3-0.0.23174786"
                    },
                    "displayVersion": {
                        "type": "string",
                        "description": "Source Image display version",
                        "readOnly": true,
                        "example": "8.0 Update 3 - 23174786"
                    }
                },
                "description": "ESX Quick Patch compatible source image version details",
                "readOnly": true
            },
            "HostCriterion": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the criterion",
                        "readOnly": true,
                        "example": "One among: HOST_COMPATIBLE_WITH_CLUSTER_USING_PNICS, UNMANAGED_HOSTS_IN_VCENTER, UNMANAGED_HOSTS_IN_HCIMGR, UNMANAGED_HOSTS_IN_HCIMGR_MANUAL_DISCOVERY"
                    },
                    "subCriteria": {
                        "type": "array",
                        "description": "Collection of sub-criterion supported on this criterion",
                        "readOnly": true,
                        "example": "One among: HOST_COMPATIBLE_WITH_CLUSTER_USING_PNICS, UNMANAGED_HOSTS_IN_VCENTER, UNMANAGED_HOSTS_IN_HCIMGR, UNMANAGED_HOSTS_IN_HCIMGR_MANUAL_DISCOVERY",
                        "items": {
                            "$ref": "#/components/schemas/HostCriterion"
                        }
                    },
                    "arguments": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Arguments required for a particular criterion",
                            "readOnly": true
                        },
                        "description": "Arguments required for a particular criterion",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the criterion",
                        "readOnly": true
                    }
                },
                "description": "Represents a criterion for querying the host"
            },
            "HostPrechecks": {
                "type": "object",
                "properties": {
                    "host": {
                        "$ref": "#/components/schemas/Host"
                    },
                    "result": {
                        "type": "string",
                        "description": "Result of the prechecks"
                    },
                    "error": {
                        "type": "string",
                        "description": "Error found during prechecks"
                    }
                },
                "description": "Represents the status of prechecks done on host",
                "readOnly": true
            },
            "HostsPrechecksResponse": {
                "required": [
                    "executionStatus",
                    "id",
                    "result"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID for hosts prechecks",
                        "readOnly": true
                    },
                    "executionStatus": {
                        "type": "string",
                        "description": "Overall execution status of hosts prechecks",
                        "readOnly": true,
                        "example": "One among: IN_PROGRESS, COMPLETED"
                    },
                    "result": {
                        "type": "string",
                        "description": "Result status of the hosts prechecks after it has completed its execution",
                        "readOnly": true,
                        "example": "One among: SUCCEEDED, FAILED"
                    },
                    "hostPrechecks": {
                        "type": "array",
                        "description": "precheck done on each host",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/HostPrechecks"
                        }
                    }
                },
                "description": "Represents hosts prechecks response"
            },
            "HostsPrechecksRequest": {
                "type": "object",
                "properties": {
                    "hosts": {
                        "type": "array",
                        "description": "list of hosts on which prechecks will be done",
                        "items": {
                            "$ref": "#/components/schemas/HostCommissionSpec"
                        }
                    }
                },
                "description": "Represents hosts prechecks request"
            },
            "BgpPeerSpec": {
                "required": [
                    "asn",
                    "ip",
                    "password"
                ],
                "type": "object",
                "properties": {
                    "ip": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/(([0-9])|([12][0-9])|(3[0-2]))$",
                        "type": "string",
                        "description": "BGP Peer IP"
                    },
                    "asn": {
                        "maximum": 4294967295,
                        "minimum": 1,
                        "type": "integer",
                        "description": "ASN of Peer",
                        "format": "int64"
                    },
                    "password": {
                        "type": "string",
                        "description": "BGP Peer Password"
                    }
                },
                "description": "This specification contains configuration inputs required for BGP configuration for an uplink"
            },
            "EdgeClusterCreationSpec": {
                "required": [
                    "edgeAdminPassword",
                    "edgeAuditPassword",
                    "edgeClusterName",
                    "edgeClusterProfileType",
                    "edgeClusterType",
                    "edgeFormFactor",
                    "edgeNodeSpecs",
                    "edgeRootPassword",
                    "mtu"
                ],
                "type": "object",
                "properties": {
                    "edgeClusterName": {
                        "maxLength": 80,
                        "minLength": 0,
                        "type": "string",
                        "description": "Name for the edge cluster."
                    },
                    "edgeClusterType": {
                        "pattern": "(NSX-T)",
                        "type": "string",
                        "description": "Type of edge cluster",
                        "example": "One among: NSX-T"
                    },
                    "edgeRootPassword": {
                        "type": "string",
                        "description": "Edge Password for root user."
                    },
                    "edgeAdminPassword": {
                        "type": "string",
                        "description": "Edge Password for admin user"
                    },
                    "edgeAuditPassword": {
                        "type": "string",
                        "description": "Edge Password for audit"
                    },
                    "edgeFormFactor": {
                        "pattern": "(XLARGE|LARGE|MEDIUM|SMALL)",
                        "type": "string",
                        "description": "Edge Form Factor",
                        "example": "One among: XLARGE, LARGE, MEDIUM, SMALL"
                    },
                    "tier0ServicesHighAvailability": {
                        "pattern": "(ACTIVE_ACTIVE|ACTIVE_STANDBY|)",
                        "type": "string",
                        "description": "High-availability Mode for Tier-0",
                        "example": "One among: ACTIVE_ACTIVE, ACTIVE_STANDBY"
                    },
                    "mtu": {
                        "type": "integer",
                        "description": "Maximum transmission unit",
                        "format": "int32"
                    },
                    "asn": {
                        "maximum": 4294967295,
                        "minimum": 1,
                        "type": "integer",
                        "description": "ASN to be used for the edge cluster",
                        "format": "int64"
                    },
                    "edgeNodeSpecs": {
                        "type": "array",
                        "description": "Specifications for Edge Node. Number of Edge Nodes cannot exceed 8 if HA mode is ACTIVE-ACTIVE and can not exceed 2 if HA mode is ACTIVE-STANDBY",
                        "items": {
                            "$ref": "#/components/schemas/NsxTEdgeNodeSpec"
                        }
                    },
                    "newIpAddressPoolSpecs": {
                        "type": "array",
                        "description": "Specifications for new NSX IP address pool(s)",
                        "items": {
                            "$ref": "#/components/schemas/IpAddressPoolSpec"
                        }
                    },
                    "tier0RoutingType": {
                        "pattern": "(EBGP|STATIC|)",
                        "type": "string",
                        "description": "Tier 0 Routing type -eg eBGP, Static",
                        "example": "One among: EBGP, STATIC"
                    },
                    "tier0Name": {
                        "maxLength": 30,
                        "minLength": 0,
                        "type": "string",
                        "description": "Name for the Tier-0"
                    },
                    "tier1Name": {
                        "maxLength": 30,
                        "minLength": 0,
                        "type": "string",
                        "description": "Name for the Tier-1"
                    },
                    "tier1Unhosted": {
                        "type": "boolean",
                        "description": "Select whether Tier-1 being created per this spec is hosted on the new Edge cluster or not (default value is false, meaning hosted)"
                    },
                    "edgeClusterProfileType": {
                        "pattern": "(CUSTOM|DEFAULT)",
                        "type": "string",
                        "description": "Type of edge cluster profile",
                        "example": "One among: DEFAULT, CUSTOM"
                    },
                    "edgeClusterProfileSpec": {
                        "$ref": "#/components/schemas/NsxTEdgeClusterProfileSpec"
                    },
                    "skipTepRoutabilityCheck": {
                        "type": "boolean",
                        "description": "Set to true to bypass normal ICMP-based check of Edge TEP / host TEP routability (default is false, meaning do check)"
                    },
                    "transitSubnets": {
                        "type": "array",
                        "description": "Transit subnet addresses in CIDR notation that are used to assign addresses to logical links connecting Tier-0 and Tier-1s",
                        "items": {
                            "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/(([0-9])|([12][0-9])|(3[0-2]))$",
                            "type": "string",
                            "description": "Transit subnet addresses in CIDR notation that are used to assign addresses to logical links connecting Tier-0 and Tier-1s"
                        }
                    },
                    "internalTransitSubnets": {
                        "maxItems": 1,
                        "minItems": 0,
                        "type": "array",
                        "description": "Subnet addresses in CIDR notation that are used to assign addresses to logical links connecting service routers and distributed routers",
                        "items": {
                            "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/(([0-9])|([12][0-9])|(3[0-2]))$",
                            "type": "string",
                            "description": "Subnet addresses in CIDR notation that are used to assign addresses to logical links connecting service routers and distributed routers"
                        }
                    }
                },
                "description": "NSX Edge cluster creation data to be validated"
            },
            "EdgeTepIpAddressPoolSpec": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "NSX IP Pool Name"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "NSX IP Pool ID"
                    }
                },
                "description": "This specification indicates which NSX IP pool to use for an Edge node's TEPs"
            },
            "NsxTEdgeClusterProfileSpec": {
                "required": [
                    "bfdAllowedHop",
                    "bfdDeclareDeadMultiple",
                    "bfdProbeInterval",
                    "edgeClusterProfileName",
                    "standbyRelocationThreshold"
                ],
                "type": "object",
                "properties": {
                    "edgeClusterProfileName": {
                        "maxLength": 20,
                        "minLength": 0,
                        "type": "string",
                        "description": "Name for the edge cluster profile."
                    },
                    "bfdAllowedHop": {
                        "maximum": 255,
                        "minimum": 1,
                        "type": "integer",
                        "description": "BFD allowed Hop",
                        "format": "int64"
                    },
                    "bfdDeclareDeadMultiple": {
                        "maximum": 16,
                        "minimum": 2,
                        "type": "integer",
                        "description": "BFD Declare Dead Multiple",
                        "format": "int64"
                    },
                    "bfdProbeInterval": {
                        "maximum": 60000,
                        "minimum": 500,
                        "type": "integer",
                        "description": "BFD Probe",
                        "format": "int64"
                    },
                    "standbyRelocationThreshold": {
                        "maximum": 1000,
                        "minimum": 10,
                        "type": "integer",
                        "description": "Standby Relocation Threshold",
                        "format": "int64"
                    }
                },
                "description": "This specification contains edge cluster profile configurations"
            },
            "NsxTEdgeNodeSpec": {
                "required": [
                    "edgeNodeName",
                    "edgeTepVlan",
                    "managementGateway",
                    "managementIP"
                ],
                "type": "object",
                "properties": {
                    "edgeNodeName": {
                        "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
                        "type": "string",
                        "description": "Edge Node Name"
                    },
                    "managementIP": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/(([0-9])|([12][0-9])|(3[0-2]))$",
                        "type": "string",
                        "description": "Management Interface IP"
                    },
                    "managementGateway": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "Management Gateway IP"
                    },
                    "vmManagementPortgroupVlan": {
                        "maximum": 4094,
                        "minimum": 0,
                        "type": "integer",
                        "description": "Management Vlan Id",
                        "format": "int32"
                    },
                    "vmManagementPortgroupName": {
                        "type": "string",
                        "description": "Management Network Name"
                    },
                    "edgeTepGateway": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "Edge TEP Gateway IP"
                    },
                    "edgeTep1IP": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/(([0-9])|([12][0-9])|(3[0-2]))$",
                        "type": "string",
                        "description": "Edge TEP 1 IP"
                    },
                    "edgeTep2IP": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/(([0-9])|([12][0-9])|(3[0-2]))$",
                        "type": "string",
                        "description": "Edge TEP 2 IP"
                    },
                    "edgeTepIpAddressPool": {
                        "$ref": "#/components/schemas/EdgeTepIpAddressPoolSpec"
                    },
                    "edgeTepVlan": {
                        "maximum": 4094,
                        "minimum": 2,
                        "type": "integer",
                        "description": "Edge TEP VLAN",
                        "format": "int32"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "ID of vSphere cluster where the Edge node will be deployed"
                    },
                    "interRackCluster": {
                        "type": "boolean",
                        "description": "Is inter-rack cluster(true for L2 non-uniform and L3 : At least one of management, uplink, Edge and host TEP networks is different for hosts of the cluster, false for L2 uniform :   All hosts in cluster have identical management, uplink, Edge and host TEP networks)"
                    },
                    "uplinkNetwork": {
                        "type": "array",
                        "description": "Specifications of Tier0 uplinks for the Edge Node. For edge cluster creation uplink network is mandatory otherwise its optional an field",
                        "items": {
                            "$ref": "#/components/schemas/NsxTEdgeUplinkNetwork"
                        }
                    },
                    "firstNsxVdsUplink": {
                        "pattern": "(uplink1|uplink2|uplink3|uplink4|uplink5|uplink6|uplink7|uplink8)",
                        "type": "string",
                        "description": "First NSX enabled VDS uplink for the Edge node",
                        "example": "One among: uplink1, uplink2, uplink3, uplink4, uplink5, uplink6, uplink7, uplink8"
                    },
                    "secondNsxVdsUplink": {
                        "pattern": "(uplink1|uplink2|uplink3|uplink4|uplink5|uplink6|uplink7|uplink8)",
                        "type": "string",
                        "description": "Second NSX enabled VDS uplink for the Edge node",
                        "example": "One among: uplink1, uplink2, uplink3, uplink4, uplink5, uplink6, uplink7, uplink8"
                    }
                },
                "description": "This specification contains configuration inputs required to deploy and configure an edge node"
            },
            "NsxTEdgeUplinkNetwork": {
                "required": [
                    "uplinkInterfaceIP",
                    "uplinkVlan"
                ],
                "type": "object",
                "properties": {
                    "uplinkVlan": {
                        "maximum": 4094,
                        "minimum": 2,
                        "type": "integer",
                        "description": "Uplink Vlan",
                        "format": "int32"
                    },
                    "uplinkInterfaceIP": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/(([0-9])|([12][0-9])|(3[0-2]))$",
                        "type": "string",
                        "description": "Uplink IP"
                    },
                    "peerIP": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/(([0-9])|([12][0-9])|(3[0-2]))$",
                        "type": "string",
                        "description": "[Deprecated] BGP Peer IP (please use bgpPeers instead)",
                        "deprecated": true
                    },
                    "asnPeer": {
                        "maximum": 4294967295,
                        "minimum": 1,
                        "type": "integer",
                        "description": "[Deprecated] ASN of Peer (please use bgpPeers instead)",
                        "format": "int64",
                        "deprecated": true
                    },
                    "bgpPeerPassword": {
                        "type": "string",
                        "description": "[Deprecated] BGP Peer Password (please use bgpPeers instead)",
                        "deprecated": true
                    },
                    "bgpPeers": {
                        "type": "array",
                        "description": "List of BGP Peer configuration",
                        "items": {
                            "$ref": "#/components/schemas/BgpPeerSpec"
                        }
                    }
                },
                "description": "This specification contains input  parameters required to configure  uplink network for NSX  edge node VM"
            },
            "EdgeClusterExpansionSpec": {
                "required": [
                    "edgeNodeAdminPassword",
                    "edgeNodeAuditPassword",
                    "edgeNodeRootPassword",
                    "edgeNodeSpecs"
                ],
                "type": "object",
                "properties": {
                    "edgeNodeRootPassword": {
                        "type": "string",
                        "description": "Edge Password for root user."
                    },
                    "edgeNodeAdminPassword": {
                        "type": "string",
                        "description": "Edge Password for admin user"
                    },
                    "edgeNodeAuditPassword": {
                        "type": "string",
                        "description": "Edge Password for audit user"
                    },
                    "skipTepRoutabilityCheck": {
                        "type": "boolean",
                        "description": "Set to true to bypass normal ICMP-based check of Edge TEP / host TEP routability (default is false, meaning do check)"
                    },
                    "edgeNodeSpecs": {
                        "maxItems": 8,
                        "minItems": 1,
                        "type": "array",
                        "description": "Specifications for Edge Node",
                        "items": {
                            "$ref": "#/components/schemas/NsxTEdgeNodeSpec"
                        }
                    },
                    "newIpAddressPoolSpecs": {
                        "type": "array",
                        "description": "Specifications for new NSX IP address pool(s)",
                        "items": {
                            "$ref": "#/components/schemas/IpAddressPoolSpec"
                        }
                    },
                    "additionalTier1Names": {
                        "type": "array",
                        "description": "List of names for the additional Tier-1(s) to be created during expansion",
                        "items": {
                            "type": "string",
                            "description": "List of names for the additional Tier-1(s) to be created during expansion"
                        }
                    },
                    "tier1Unhosted": {
                        "type": "boolean",
                        "description": "Select whether all Tier-1(s) being created per this spec are hosted on the Edge cluster or not (default is false, meaning hosted)"
                    }
                },
                "description": "This specification contains the parameters required to expand a NSX edge cluster."
            },
            "EdgeClusterShrinkageSpec": {
                "required": [
                    "edgeNodeIds"
                ],
                "type": "object",
                "properties": {
                    "edgeNodeIds": {
                        "type": "array",
                        "description": "List of VCF Edge Node ID's to be removed for shrinkage.",
                        "items": {
                            "type": "string",
                            "description": "List of VCF Edge Node ID's to be removed for shrinkage."
                        }
                    }
                },
                "description": "This specification contains the parameters required to shrink a NSX edge cluster."
            },
            "EdgeClusterUpdateSpec": {
                "required": [
                    "operation"
                ],
                "type": "object",
                "properties": {
                    "edgeClusterExpansionSpec": {
                        "$ref": "#/components/schemas/EdgeClusterExpansionSpec"
                    },
                    "edgeClusterShrinkageSpec": {
                        "$ref": "#/components/schemas/EdgeClusterShrinkageSpec"
                    },
                    "operation": {
                        "pattern": "(EXPANSION|SHRINKAGE)",
                        "type": "string",
                        "description": "Edge cluster operation Type.",
                        "example": "One among: EXPANSION, SHRINKAGE"
                    }
                },
                "description": "NSX Edge cluster update specification"
            },
            "AdvancedOptions": {
                "type": "object",
                "properties": {
                    "evcMode": {
                        "type": "string",
                        "description": "EVC mode for new cluster, if needed",
                        "example": "One among: INTEL_MEROM, INTEL_PENRYN, INTEL_NEALEM, INTEL_WESTMERE, INTEL_SANDYBRIDGE, INTEL_IVYBRIDGE, INTEL_HASWELL, INTEL_BROADWELL, INTEL_SKYLAKE, INTEL_CASCADELAKE, INTEL_ICELAKE, INTEL_SAPPHIRERAPIDS, AMD_REV_E, AMD_REV_F, AMD_GREYHOUND_NO3DNOW, AMD_GREYHOUND, AMD_BULLDOZER, AMD_PILEDRIVER, AMD_STREAMROLLER, AMD_ZEN, AMD_ZEN2, AMD_ZEN3, AMD_ZEN4"
                    },
                    "highAvailability": {
                        "$ref": "#/components/schemas/HighAvailability"
                    }
                },
                "description": "Advanced Options used to add Cluster"
            },
            "ClusterSpec": {
                "required": [
                    "datastoreSpec",
                    "hostSpecs",
                    "networkSpec"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 80,
                        "minLength": 0,
                        "type": "string",
                        "description": "Name of the new cluster that will be added to the specified workload domain"
                    },
                    "clusterImageId": {
                        "type": "string",
                        "description": "ID of the Cluster Image to be used only with the Cluster managed by vSphere Lifecycle Manager Images"
                    },
                    "vxRailDetails": {
                        "$ref": "#/components/schemas/VxRailDetails"
                    },
                    "hostSpecs": {
                        "maxItems": 64,
                        "minItems": 1,
                        "type": "array",
                        "description": "List of vSphere host information from the free pool to consume in the workload domain",
                        "items": {
                            "$ref": "#/components/schemas/HostSpec"
                        }
                    },
                    "datastoreSpec": {
                        "$ref": "#/components/schemas/DatastoreSpec"
                    },
                    "networkSpec": {
                        "$ref": "#/components/schemas/NetworkSpec"
                    },
                    "advancedOptions": {
                        "$ref": "#/components/schemas/AdvancedOptions"
                    },
                    "skipThumbprintValidation": {
                        "type": "boolean",
                        "description": "Skip thumbprint validation for ESXi and VxRail Manager during add cluster/host operation. \nThis property is deprecated.",
                        "deprecated": true
                    }
                },
                "description": "This specification contains the parameters required to add a cluster to a workload domain"
            },
            "ComputeSpec": {
                "required": [
                    "clusterSpecs"
                ],
                "type": "object",
                "properties": {
                    "clusterSpecs": {
                        "type": "array",
                        "description": "List of clusters to be added to workload domain",
                        "items": {
                            "$ref": "#/components/schemas/ClusterSpec"
                        }
                    },
                    "skipFailedHosts": {
                        "type": "boolean",
                        "description": "Skip failed ESXi Hosts and proceed with the rest of the ESXi Hosts during add Cluster. This is not supported for VCF VxRail.",
                        "example": false
                    }
                },
                "description": "This specification contains the parameters required to add each cluster to a workload domain"
            },
            "DatastoreSpec": {
                "type": "object",
                "properties": {
                    "vsanDatastoreSpec": {
                        "$ref": "#/components/schemas/VsanDatastoreSpec"
                    },
                    "nfsDatastoreSpecs": {
                        "type": "array",
                        "description": "Cluster storage configuration for NFS",
                        "items": {
                            "$ref": "#/components/schemas/NfsDatastoreSpec"
                        }
                    },
                    "vmfsDatastoreSpec": {
                        "$ref": "#/components/schemas/VmfsDatastoreSpec"
                    },
                    "vvolDatastoreSpecs": {
                        "type": "array",
                        "description": "Cluster storage configuration for VVOL",
                        "items": {
                            "$ref": "#/components/schemas/VvolDatastoreSpec"
                        }
                    },
                    "vsanRemoteDatastoreClusterSpec": {
                        "$ref": "#/components/schemas/VsanRemoteDatastoreClusterSpec"
                    }
                },
                "description": "This specification contains cluster storage configuration"
            },
            "DomainCreationSpec": {
                "required": [
                    "computeSpec",
                    "vcenterSpec"
                ],
                "type": "object",
                "properties": {
                    "domainName": {
                        "maxLength": 20,
                        "minLength": 3,
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string",
                        "description": "Name of the workload domain"
                    },
                    "orgName": {
                        "maxLength": 20,
                        "minLength": 3,
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string",
                        "description": "Organization name of the workload domain"
                    },
                    "vcenterSpec": {
                        "$ref": "#/components/schemas/VcenterSpec"
                    },
                    "computeSpec": {
                        "$ref": "#/components/schemas/ComputeSpec"
                    },
                    "nsxTSpec": {
                        "$ref": "#/components/schemas/NsxTSpec"
                    },
                    "ssoDomainSpec": {
                        "$ref": "#/components/schemas/SsoDomainSpec"
                    },
                    "securitySpec": {
                        "$ref": "#/components/schemas/SecuritySpec"
                    },
                    "deployWithoutLicenseKeys": {
                        "type": "boolean",
                        "description": "Flag that indicates if the deployment should happen without license keys"
                    }
                },
                "description": "Domain Creation Spec"
            },
            "EsaConfig": {
                "required": [
                    "enabled"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "vSAN ESA enablement status."
                    },
                    "vsanMaxConfig": {
                        "$ref": "#/components/schemas/VsanMaxConfig"
                    }
                },
                "description": "This spec contains cluster vSAN ESA configuration"
            },
            "FcSpec": {
                "required": [
                    "datastoreName"
                ],
                "type": "object",
                "properties": {
                    "datastoreName": {
                        "type": "string",
                        "description": "Datastore name used for cluster creation"
                    }
                },
                "description": "Cluster storage configuration for VMFS on FC"
            },
            "HighAvailability": {
                "required": [
                    "enabled"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "description": "This specification contains high availability settings"
            },
            "HostNetworkSpec": {
                "type": "object",
                "properties": {
                    "vmNics": {
                        "type": "array",
                        "description": "List of the vSphere host vmNics",
                        "items": {
                            "$ref": "#/components/schemas/VmNic"
                        }
                    },
                    "networkProfileName": {
                        "pattern": "^(?!\\s*$).+",
                        "type": "string",
                        "description": "Network profile name"
                    }
                },
                "description": "This specification contains network details required when adding a vSphere host to a cluster"
            },
            "HostSpec": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of a vSphere host in the free pool"
                    },
                    "licenseKey": {
                        "type": "string",
                        "description": "License key of a vSphere host in the free pool \n(This is required except in cases where the ESXi host has already been licensed outside of the VMware Cloud Foundation system)"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP address of the vSphere host"
                    },
                    "hostName": {
                        "type": "string",
                        "description": "Host name of the vSphere host"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username of the vSphere host"
                    },
                    "password": {
                        "type": "string",
                        "description": "SSH password of the vSphere host "
                    },
                    "hostNetworkSpec": {
                        "$ref": "#/components/schemas/HostNetworkSpec"
                    },
                    "azName": {
                        "type": "string",
                        "description": "Availability Zone Name \n(This is required while performing a stretched cluster expand operation)"
                    },
                    "sshThumbprint": {
                        "type": "string",
                        "description": "SSH thumbprint(fingerprint) of the vSphere host \nNote:This field will be mandatory in future releases."
                    },
                    "serialNumber": {
                        "type": "string",
                        "description": "Serial Number of the vSphere host"
                    }
                },
                "description": "This specification contains information required to add vSphere host to a cluster"
            },
            "NasVolumeSpec": {
                "required": [
                    "path",
                    "readOnly",
                    "serverName"
                ],
                "type": "object",
                "properties": {
                    "serverName": {
                        "type": "array",
                        "description": "NFS Server name used for cluster creation",
                        "items": {
                            "type": "string",
                            "description": "NFS Server name used for cluster creation"
                        }
                    },
                    "path": {
                        "type": "string",
                        "description": "Shared directory path used for NFS based cluster creation"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Readonly is used to identify whether to mount the directory as readOnly or not"
                    },
                    "userTag": {
                        "type": "string",
                        "description": "User tag used to annotate NFS share"
                    }
                },
                "description": "NAS configuration for NFS based cluster"
            },
            "NetworkDetailsSpec": {
                "required": [
                    "dnsName"
                ],
                "type": "object",
                "properties": {
                    "ipAddress": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "IPv4 address of the virtual machine. Can be omitted if hostname (dnsName) is provded."
                    },
                    "dnsName": {
                        "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
                        "type": "string",
                        "description": "DNS name of the virtual machine, e.g., vc-1.domain1.vsphere.local"
                    },
                    "gateway": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "IPv4 gateway the VM can use to connect to the outside world"
                    },
                    "subnetMask": {
                        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
                        "type": "string",
                        "description": "Subnet mask"
                    }
                },
                "description": "This specification contains network parameters required for new virtual machines being added to a workload domain"
            },
            "NetworkProfile": {
                "required": [
                    "name",
                    "nsxtHostSwitchConfigs"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The network profile name"
                    },
                    "description": {
                        "type": "string",
                        "description": "The network profile description"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Designates the network profile as a Global Network Config or Sub Network Config"
                    },
                    "nsxtHostSwitchConfigs": {
                        "type": "array",
                        "description": "The list of NSX host switch configurations",
                        "items": {
                            "$ref": "#/components/schemas/NsxtHostSwitchConfig"
                        }
                    }
                },
                "description": "This specification contains the host switch configurations for the NSX transport node."
            },
            "NetworkSpec": {
                "type": "object",
                "properties": {
                    "vdsSpecs": {
                        "type": "array",
                        "description": "Distributed switches to add to the cluster",
                        "items": {
                            "$ref": "#/components/schemas/VdsSpec"
                        }
                    },
                    "nsxClusterSpec": {
                        "$ref": "#/components/schemas/NsxClusterSpec"
                    },
                    "networkProfiles": {
                        "type": "array",
                        "description": "The list of network profiles",
                        "items": {
                            "$ref": "#/components/schemas/NetworkProfile"
                        }
                    }
                },
                "description": "This specification contains cluster's network configuration."
            },
            "NfsDatastoreSpec": {
                "required": [
                    "datastoreName",
                    "nasVolume"
                ],
                "type": "object",
                "properties": {
                    "datastoreName": {
                        "type": "string",
                        "description": "Datastore name used for cluster creation"
                    },
                    "nasVolume": {
                        "$ref": "#/components/schemas/NasVolumeSpec"
                    }
                },
                "description": "This specification contains cluster storage configuration for NFS"
            },
            "NiocBandwidthAllocationSpec": {
                "required": [
                    "niocTrafficResourceAllocation",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "pattern": "management|faultTolerance|vmotion|virtualMachine|iSCSI|nfs|hbr|vsan|vdp",
                        "type": "string",
                        "description": "DvsHostInfrastructureTrafficResource resource type"
                    },
                    "niocTrafficResourceAllocation": {
                        "$ref": "#/components/schemas/NiocTrafficResourceAllocation"
                    }
                },
                "description": "This specification contains network traffic per resource type"
            },
            "NiocTrafficResourceAllocation": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "sharesInfo": {
                        "$ref": "#/components/schemas/SharesInfo"
                    },
                    "reservation": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "description": "Specify network traffic allocation for a resource"
            },
            "NsxClusterSpec": {
                "type": "object",
                "properties": {
                    "nsxTClusterSpec": {
                        "$ref": "#/components/schemas/NsxTClusterSpec"
                    }
                },
                "description": "This specification contains NSX configuration for cluster"
            },
            "NsxManagerSpec": {
                "required": [
                    "networkDetailsSpec"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 80,
                        "minLength": 0,
                        "type": "string",
                        "description": "Name of the NSX Manager virtual machine"
                    },
                    "networkDetailsSpec": {
                        "$ref": "#/components/schemas/NetworkDetailsSpec"
                    }
                },
                "description": "This specification contains the parameters required to install and configure NSX Manager in a workload domain"
            },
            "NsxTClusterSpec": {
                "type": "object",
                "properties": {
                    "geneveVlanId": {
                        "type": "integer",
                        "description": "Vlan id of Geneve. (This field is deprecated, instead please use transportVlan in uplinkProfiles)",
                        "format": "int32",
                        "deprecated": true
                    },
                    "ipAddressPoolSpec": {
                        "$ref": "#/components/schemas/IpAddressPoolSpec"
                    },
                    "ipAddressPoolsSpec": {
                        "type": "array",
                        "description": "The list of IP address pools specification",
                        "items": {
                            "$ref": "#/components/schemas/IpAddressPoolSpec"
                        }
                    },
                    "uplinkProfiles": {
                        "type": "array",
                        "description": "The list of uplink profile specifications.",
                        "items": {
                            "$ref": "#/components/schemas/UplinkProfile"
                        }
                    }
                },
                "description": "This specification contains NSX configuration for a new cluster."
            },
            "NsxTSpec": {
                "required": [
                    "nsxManagerSpecs",
                    "vipFqdn"
                ],
                "type": "object",
                "properties": {
                    "nsxManagerSpecs": {
                        "type": "array",
                        "description": "Specification details of the NSX Manager virtual machine",
                        "items": {
                            "$ref": "#/components/schemas/NsxManagerSpec"
                        }
                    },
                    "vip": {
                        "type": "string",
                        "description": "Virtual IP address which would act as proxy/alias for NSX Managers. Can be omitted if FQDN is provided."
                    },
                    "vipFqdn": {
                        "type": "string",
                        "description": "FQDN for VIP so that common SSL certificates can be installed across all managers"
                    },
                    "licenseKey": {
                        "type": "string",
                        "description": "NSX license value"
                    },
                    "nsxManagerAdminPassword": {
                        "type": "string",
                        "description": "NSX manager admin password (basic auth and SSH)"
                    },
                    "nsxManagerAuditPassword": {
                        "type": "string",
                        "description": "NSX manager Audit password"
                    },
                    "formFactor": {
                        "pattern": "(xlarge|large|medium|small)",
                        "type": "string",
                        "description": "NSX manager form factor"
                    },
                    "ipAddressPoolSpec": {
                        "$ref": "#/components/schemas/IpAddressPoolSpec"
                    }
                },
                "description": "This specification contains the parameters required to install and configure NSX in a workload domain"
            },
            "NsxtHostSwitchConfig": {
                "required": [
                    "uplinkProfileName",
                    "vdsName",
                    "vdsUplinkToNsxUplink"
                ],
                "type": "object",
                "properties": {
                    "vdsName": {
                        "type": "string",
                        "description": "The name of the vSphere Distributed Switch"
                    },
                    "uplinkProfileName": {
                        "type": "string",
                        "description": "The name of the uplink profile"
                    },
                    "ipAddressPoolName": {
                        "type": "string",
                        "description": "The IP address pool name"
                    },
                    "vdsUplinkToNsxUplink": {
                        "type": "array",
                        "description": "The map of vSphere Distributed Switch uplinks to the NSX switch uplinks.",
                        "items": {
                            "$ref": "#/components/schemas/UplinkMapping"
                        }
                    }
                },
                "description": "This specification contains the configurations to be applied on the Host switch."
            },
            "PortgroupSpec": {
                "required": [
                    "name",
                    "transportType"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 80,
                        "minLength": 0,
                        "type": "string",
                        "description": "Port group name"
                    },
                    "transportType": {
                        "type": "string",
                        "description": "Port group transport type",
                        "example": "One among: VSAN, VMOTION, MANAGEMENT, PUBLIC, NFS, VREALIZE, ISCSI, EDGE_INFRA_OVERLAY_UPLINK, VM_MANAGEMENT, VSAN_EXTERNAL"
                    },
                    "activeUplinks": {
                        "type": "array",
                        "description": "The list of active uplinks associated with portgroup",
                        "items": {
                            "type": "string",
                            "description": "The list of active uplinks associated with portgroup"
                        }
                    },
                    "standByUplinks": {
                        "type": "array",
                        "description": "The list of standby uplinks associated with portgroup.",
                        "items": {
                            "type": "string",
                            "description": "The list of standby uplinks associated with portgroup."
                        }
                    },
                    "teamingPolicy": {
                        "pattern": "(loadbalance_ip|loadbalance_srcmac|loadbalance_srcid|failover_explicit|loadbalance_loadbased)",
                        "type": "string",
                        "description": "The teaming policy associated with the portgroup.",
                        "example": "One among:loadbalance_ip, loadbalance_srcmac, loadbalance_srcid, failover_explicit, loadbalance_loadbased"
                    }
                },
                "description": "This specification contains vCenter port group configurations"
            },
            "SharesInfo": {
                "type": "object",
                "properties": {
                    "shares": {
                        "type": "integer",
                        "description": "The number of shares allocated",
                        "format": "int32"
                    },
                    "level": {
                        "type": "string",
                        "description": "The allocation level",
                        "example": "One among: low, normal, high, custom"
                    }
                },
                "description": "Specify relative allocation between resource consumers"
            },
            "SsoDomainSpec": {
                "type": "object",
                "properties": {
                    "ssoDomainPassword": {
                        "type": "string",
                        "description": "New SSO domain password"
                    },
                    "ssoDomainName": {
                        "type": "string",
                        "description": "SSO domain name to be created"
                    }
                },
                "description": "Spec for the SSO configuration in a VMware Cloud Foundation Domain"
            },
            "UnmanagedResourceCredential": {
                "required": [
                    "credentialType",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "credentialType": {
                        "type": "string",
                        "description": "Credential type",
                        "example": "One among: SSH"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password"
                    }
                },
                "description": "Represents credentials of am unmanaged resource (i.e a resource that is not managed by VCF)"
            },
            "UplinkMapping": {
                "required": [
                    "nsxUplinkName",
                    "vdsUplinkName"
                ],
                "type": "object",
                "properties": {
                    "vdsUplinkName": {
                        "type": "string",
                        "description": "The uplink name of the vSphere Distributed Switch"
                    },
                    "nsxUplinkName": {
                        "type": "string",
                        "description": "The uplink name of the NSX switch"
                    }
                },
                "description": "The map of vSphere Distributed Switch uplinks to the NSX switch uplinks."
            },
            "UplinkProfile": {
                "required": [
                    "name",
                    "teamings"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string",
                        "description": "The uplink profile name"
                    },
                    "teamings": {
                        "maxItems": 1,
                        "minItems": 0,
                        "type": "array",
                        "description": "The teaming policies to be associated with the uplink profile",
                        "items": {
                            "$ref": "#/components/schemas/TeamingSpec"
                        }
                    },
                    "transportVlan": {
                        "type": "integer",
                        "description": "The VLAN used for tagging overlay traffic of the associated Host Switch",
                        "format": "int32"
                    },
                    "supportedTeamingPolicies": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "List of supported teaming policies in NSX"
                        },
                        "description": "List of supported teaming policies in NSX"
                    }
                },
                "description": "This specification contains the policies for the links from hypervisor hosts to NSX logical switch."
            },
            "VasaProviderSpec": {
                "required": [
                    "storageContainerId",
                    "storageProtocolType",
                    "userId",
                    "vasaProviderId"
                ],
                "type": "object",
                "properties": {
                    "vasaProviderId": {
                        "type": "string",
                        "description": "UUID of the VASA storage provider"
                    },
                    "storageContainerId": {
                        "type": "string",
                        "description": "UUID of the VASA storage container"
                    },
                    "storageProtocolType": {
                        "type": "string",
                        "description": "Type of the VASA storage protocol",
                        "example": "One among: ISCSI, NFS, FC"
                    },
                    "userId": {
                        "type": "string",
                        "description": "UUID of the VASA storage user"
                    }
                },
                "description": "This specification contains cluster storage configuration for vVol"
            },
            "VcenterSpec": {
                "required": [
                    "networkDetailsSpec"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 80,
                        "minLength": 0,
                        "type": "string",
                        "description": "Name of the vCenter virtual machine"
                    },
                    "networkDetailsSpec": {
                        "$ref": "#/components/schemas/NetworkDetailsSpec"
                    },
                    "rootPassword": {
                        "pattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\"#$%&'()*+,-./:;<=>?@\\[\\]^_`{|}~])(?=\\S+$).{8,20}$",
                        "type": "string",
                        "description": "vCenter root shell password"
                    },
                    "datacenterName": {
                        "type": "string",
                        "description": "vCenter datacenter name"
                    },
                    "vmSize": {
                        "pattern": "(XLARGE|LARGE|MEDIUM|SMALL|TINY)",
                        "type": "string",
                        "description": "VCenter VM size",
                        "example": "One among:xlarge, large, medium, small, tiny"
                    },
                    "storageSize": {
                        "pattern": "(lstorage|xlstorage)",
                        "type": "string",
                        "description": "VCenter storage size",
                        "example": "One among:lstorage, xlstorage"
                    }
                },
                "description": "This specification contains the installation and configuration of vCenter in a workload domain"
            },
            "VdsSpec": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 80,
                        "minLength": 0,
                        "type": "string",
                        "description": "vSphere Distributed Switch name"
                    },
                    "isUsedByNsxt": {
                        "type": "boolean",
                        "description": "Boolean to identify if the vSphere distributed switch is used by NSX. This property is deprecated in favor of nsxtSwitchConfig field",
                        "deprecated": true
                    },
                    "nsxtSwitchConfig": {
                        "$ref": "#/components/schemas/NsxtSwitchConfig"
                    },
                    "portGroupSpecs": {
                        "type": "array",
                        "description": "List of portgroups to be associated with the vSphere Distributed Switch",
                        "items": {
                            "$ref": "#/components/schemas/PortgroupSpec"
                        }
                    },
                    "niocBandwidthAllocationSpecs": {
                        "type": "array",
                        "description": "List of Network I/O Control Bandwidth Allocations for System Traffic \n Based on shares, reservation, and limit, you can configure Network I/O Control to allocate certain amount of\nbandwidth for traffic generated by vSphere Fault Tolerance, iSCSI storage, vSphere vMotion, and so on.\nYou can use Network I/O Control on a distributed switch to configure bandwidth allocation for the traffic\nthat is related to the main system features in vSphere",
                        "items": {
                            "$ref": "#/components/schemas/NiocBandwidthAllocationSpec"
                        }
                    },
                    "mtu": {
                        "type": "integer",
                        "description": "The maximum transmission unit (MTU) configured for the uplinks",
                        "format": "int32"
                    }
                },
                "description": "This specification contains vSphere distributed switch configurations"
            },
            "VmNic": {
                "required": [
                    "id",
                    "vdsName"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "VmNic ID of vSphere host to be associated with VDS, once added to cluster"
                    },
                    "vdsName": {
                        "type": "string",
                        "description": "VDS name to associate with vSphere host. VDS name must match the cluster's VDS name"
                    },
                    "moveToNvds": {
                        "type": "boolean",
                        "description": "This flag determines if the vmnic must be on N-VDS. Set this to true for a vmnic that will be moved to N-VDS"
                    },
                    "uplink": {
                        "type": "string",
                        "description": "Uplink to be associated with vmnic"
                    }
                },
                "description": "This specification contains vmnic configurations for vSphere host"
            },
            "VmfsDatastoreSpec": {
                "type": "object",
                "properties": {
                    "fcSpec": {
                        "type": "array",
                        "description": "Cluster storage configuration for VMFS on FC",
                        "items": {
                            "$ref": "#/components/schemas/FcSpec"
                        }
                    }
                },
                "description": "Cluster storage configuration for VMFS"
            },
            "VsanDatastoreSpec": {
                "required": [
                    "datastoreName"
                ],
                "type": "object",
                "properties": {
                    "datastoreName": {
                        "type": "string",
                        "description": "Datastore name used for cluster creation"
                    },
                    "failuresToTolerate": {
                        "type": "integer",
                        "description": "Number of vSphere host failures to tolerate in the vSAN cluster. This field is required for vSAN OSA configuration.",
                        "format": "int32"
                    },
                    "licenseKey": {
                        "type": "string",
                        "description": "License key for the vSAN data store to be applied in vCenter"
                    },
                    "dedupAndCompressionEnabled": {
                        "type": "boolean",
                        "description": "Enable vSAN deduplication and compression. This features is only available for clusters in which the hosts are all-flash"
                    },
                    "esaConfig": {
                        "$ref": "#/components/schemas/EsaConfig"
                    }
                },
                "description": "This specification contains cluster storage configuration for vSAN"
            },
            "VsanMaxConfig": {
                "type": "object",
                "properties": {
                    "enableVsanMax": {
                        "type": "boolean",
                        "description": "Field to enable Vsan Max on the Cluster"
                    }
                },
                "description": "This spec contains cluster vSAN MAX configuration"
            },
            "VsanRemoteDatastoreClusterSpec": {
                "type": "object",
                "properties": {
                    "vsanRemoteDatastoreSpec": {
                        "type": "array",
                        "description": "List of Remote vSAN datastore configuration for vSAN compute client cluster",
                        "items": {
                            "$ref": "#/components/schemas/VsanRemoteDatastoreSpec"
                        }
                    }
                },
                "description": "vSAN remote datastore configuration for the cluster"
            },
            "VsanRemoteDatastoreSpec": {
                "required": [
                    "datastoreUuid"
                ],
                "type": "object",
                "properties": {
                    "datastoreUuid": {
                        "type": "string",
                        "description": "vSAN Remote Datastore UUID"
                    }
                },
                "description": "This specification contains cluster storage configuration for vSAN"
            },
            "VvolDatastoreSpec": {
                "required": [
                    "name",
                    "vasaProviderSpec"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the datastore"
                    },
                    "vasaProviderSpec": {
                        "$ref": "#/components/schemas/VasaProviderSpec"
                    }
                },
                "description": "This specification contains cluster storage configuration for vVol"
            },
            "VxRailArrayAssociationContext": {
                "type": "object",
                "properties": {
                    "parent": {
                        "$ref": "#/components/schemas/VxRailArrayAssociationContext"
                    },
                    "arrayAttributeIdsKeyValue": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Key, Value map that holds the simple attributes on the array item that are currently supported."
                        },
                        "description": "Key, Value map that holds the simple attributes on the array item that are currently supported."
                    }
                },
                "description": "Contains the mapping between custom attributes and the supported attributes on the array item object."
            },
            "VxRailContext": {
                "type": "object",
                "properties": {
                    "attributeName": {
                        "type": "string",
                        "description": "Attribute name"
                    },
                    "datatype": {
                        "type": "string",
                        "description": "Datatype of attribute value",
                        "enum": [
                            "INTEGER",
                            "BOOLEAN",
                            "STRING"
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "Attribute value"
                    }
                },
                "description": "Contains VxRail Specific properties"
            },
            "VxRailCustomArrayContext": {
                "type": "object",
                "properties": {
                    "arrayAssociationContext": {
                        "$ref": "#/components/schemas/VxRailArrayAssociationContext"
                    },
                    "simpleAttributes": {
                        "type": "array",
                        "description": "Collection of simple attributes that contains name, value and type for each attribute.",
                        "items": {
                            "$ref": "#/components/schemas/VxRailContext"
                        }
                    }
                },
                "description": "Contains the details of simple/complex custom attribute on an array item object."
            },
            "VxRailDetails": {
                "required": [
                    "networks"
                ],
                "type": "object",
                "properties": {
                    "rootCredentials": {
                        "$ref": "#/components/schemas/UnmanagedResourceCredential"
                    },
                    "adminCredentials": {
                        "$ref": "#/components/schemas/UnmanagedResourceCredential"
                    },
                    "sshThumbprint": {
                        "type": "string",
                        "description": "SSH thumbprint of the VxRail Manager"
                    },
                    "sslThumbprint": {
                        "type": "string",
                        "description": "SSL thumbprint of the VxRail Manager"
                    },
                    "networks": {
                        "type": "array",
                        "description": "Network details of the VxRail Manager",
                        "items": {
                            "$ref": "#/components/schemas/Network"
                        }
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP Address of the VxRail Manager"
                    },
                    "dnsName": {
                        "pattern": "^[a-z0-9]+(([-]+[a-z0-9]+)|([.][a-z0-9]+))*\\.[a-z]{2,}$",
                        "type": "string",
                        "description": "DNS Name/Hostname of the VxRail Manager"
                    },
                    "nicProfile": {
                        "type": "string",
                        "description": "Nic Profile Type"
                    },
                    "contextWithKeyValuePair": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "description": "Map of Context class with list of key and value pairs",
                            "items": {
                                "$ref": "#/components/schemas/VxRailContext"
                            }
                        },
                        "description": "Map of Context class with list of key and value pairs"
                    },
                    "arrayContextWithKeyValuePair": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "description": "Map of Context class with list of key and value pairs for array objects",
                            "items": {
                                "$ref": "#/components/schemas/VxRailCustomArrayContext"
                            }
                        },
                        "description": "Map of Context class with list of key and value pairs for array objects"
                    }
                },
                "description": "Contains the VxRail Manager details"
            },
            "DomainUpdateSpec": {
                "type": "object",
                "properties": {
                    "clusterSpec": {
                        "$ref": "#/components/schemas/ClusterSpec"
                    },
                    "nsxTSpec": {
                        "$ref": "#/components/schemas/NsxTSpec"
                    },
                    "markForDeletion": {
                        "type": "boolean",
                        "description": "Enable deletion for the domain"
                    },
                    "name": {
                        "maxLength": 20,
                        "minLength": 3,
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string",
                        "description": "Name of the domain"
                    },
                    "isolationSpec": {
                        "$ref": "#/components/schemas/IsolationSpec"
                    }
                },
                "description": "Domain Update Data"
            },
            "IsolationSpec": {
                "type": "object",
                "properties": {
                    "ssoDomainSpec": {
                        "$ref": "#/components/schemas/SsoDomainSpec"
                    },
                    "domainIdForIsolation": {
                        "type": "string",
                        "description": "Id of the domain that needs to be isolated"
                    },
                    "workloadDomainName": {
                        "type": "string",
                        "description": "Name of the domain that needs to be isolated"
                    }
                },
                "description": "Domain Isolation Details"
            },
            "ComplianceAuditSpec": {
                "required": [
                    "complianceResourcesConfigurationSpec",
                    "standardType",
                    "standardVersion"
                ],
                "type": "object",
                "properties": {
                    "standardType": {
                        "type": "string",
                        "description": "Compliance standard type",
                        "example": "One among: PCI"
                    },
                    "standardVersion": {
                        "type": "string",
                        "description": "Compliance standard version"
                    },
                    "complianceResourcesConfigurationSpec": {
                        "type": "array",
                        "description": "Compliance resource and configuration spec",
                        "items": {
                            "$ref": "#/components/schemas/ComplianceResourcesConfigurationSpec"
                        }
                    }
                },
                "description": "This specification contains compliance to be audited"
            },
            "ComplianceResource": {
                "required": [
                    "resourceType"
                ],
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "Compliance Resource Type",
                        "example": "One among: SDDC_MANAGER"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Compliance Resource FQDN"
                    }
                },
                "description": "This specification contains compliance resource details"
            },
            "ComplianceResourcesConfigurationSpec": {
                "required": [
                    "resources"
                ],
                "type": "object",
                "properties": {
                    "configurationId": {
                        "type": "string",
                        "description": "Compliance configuration id"
                    },
                    "resources": {
                        "type": "array",
                        "description": "Compliance Resource details",
                        "items": {
                            "$ref": "#/components/schemas/ComplianceResource"
                        }
                    }
                },
                "description": "This specification contains compliance configuration and resource request details"
            },
            "ComplianceTask": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Compliance task id",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Compliance task status",
                        "readOnly": true,
                        "example": "One among: PENDING, Pending, IN_PROGRESS, In Progress, SUCCESSFUL, Successful, FAILED, Failed, CANCELLED, Cancelled, COMPLETED_WITH_WARNING, SKIPPED"
                    },
                    "complianceAuditId": {
                        "type": "string",
                        "description": "Compliance audit id",
                        "readOnly": true
                    }
                },
                "description": "Represents a compliance task"
            },
            "Datastore": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the datastore",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the datastore",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the datastore",
                        "readOnly": true
                    },
                    "vcInstanceUuid": {
                        "type": "string",
                        "description": "Instance UUID of the vCenter that manages this datastore",
                        "readOnly": true
                    },
                    "vcDatacenterName": {
                        "type": "string",
                        "description": "Name of the vCenter datacenter that this datastore resides",
                        "readOnly": true
                    },
                    "datastoreType": {
                        "type": "string",
                        "description": "Datastore Type",
                        "readOnly": true
                    },
                    "totalCapacityGB": {
                        "type": "number",
                        "description": "Total storage capacity in GB",
                        "format": "double",
                        "readOnly": true
                    },
                    "freeCapacityGB": {
                        "type": "number",
                        "description": "Free storage capacity in GB",
                        "format": "double",
                        "readOnly": true
                    },
                    "vmCount": {
                        "type": "integer",
                        "description": "Number of VMs on the datastore",
                        "format": "int32",
                        "readOnly": true
                    },
                    "tags": {
                        "type": "array",
                        "description": "List of assigned tags for the datastore",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    }
                },
                "description": "Represents a datastore in the system",
                "readOnly": true
            },
            "DatastoreQueryResponse": {
                "type": "object",
                "properties": {
                    "queryInfo": {
                        "$ref": "#/components/schemas/QueryInfo"
                    },
                    "result": {
                        "$ref": "#/components/schemas/PageDatastore"
                    }
                },
                "description": "Represents a datastore query response."
            },
            "PageDatastore": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Datastore"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                },
                "description": "Represents a page of elements of a single type",
                "readOnly": true
            },
            "DatastoreCriterion": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the criterion for querying datastores",
                        "readOnly": true,
                        "example": "One among: VSAN_REMOTE_DATASTORES"
                    },
                    "arguments": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Arguments required for a particular criterion",
                            "readOnly": true
                        },
                        "description": "Arguments required for a particular criterion",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the criterion",
                        "readOnly": true
                    }
                },
                "description": "Represents a criterion for querying the datastores"
            },
            "Capacity": {
                "type": "object",
                "properties": {
                    "cpu": {
                        "$ref": "#/components/schemas/CpuInfo"
                    },
                    "memory": {
                        "$ref": "#/components/schemas/MemoryInfo"
                    },
                    "storage": {
                        "$ref": "#/components/schemas/StorageInfo"
                    }
                },
                "description": "Represents a usage and capacity information of a Resource"
            },
            "Cluster": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the cluster"
                    },
                    "domain": {
                        "$ref": "#/components/schemas/DomainReference"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the cluster"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster",
                        "example": "One among: ACTIVE, ACTIVATING, UPGRADING, DISABLED, ERROR, SKIPPED, DEACTIVATING, EXPANDING, SHRINKING, CREATING"
                    },
                    "hciMeshData": {
                        "$ref": "#/components/schemas/HciMeshData"
                    },
                    "primaryDatastoreName": {
                        "type": "string",
                        "description": "Name of the primary datastore"
                    },
                    "primaryDatastoreType": {
                        "type": "string",
                        "description": "Storage type of the primary datastore",
                        "example": "One among: VSAN, VSAN_ESA, VSAN_MAX, NFS, FC, VVOL_FC, VVOL_ISCSI, VVOL_NFS, VSAN_REMOTE"
                    },
                    "hosts": {
                        "type": "array",
                        "description": "List of hosts associated with the cluster",
                        "items": {
                            "$ref": "#/components/schemas/HostReference"
                        }
                    },
                    "isStretched": {
                        "type": "boolean",
                        "description": "Status of the cluster if Stretched or not"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Status of the cluster if default or not"
                    },
                    "failuresToTolerate": {
                        "type": "integer",
                        "description": "Number of ESXi host failures to tolerate in the vSAN cluster. Applicable only for clusters with vSAN datastore",
                        "format": "int32"
                    },
                    "vdsSpecs": {
                        "type": "array",
                        "description": "Distributed switches to added to the cluster",
                        "items": {
                            "$ref": "#/components/schemas/VdsSpec"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "description": "Deprecated, this list will always be returned empty",
                        "deprecated": true,
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "isImageBased": {
                        "type": "boolean",
                        "description": "Is cluster managed by vSphere Lifecycle Manager Images - true if managed, false if managed by vSphere Lifecycle Manager Baselines"
                    },
                    "capacity": {
                        "$ref": "#/components/schemas/Capacity"
                    },
                    "vcenter": {
                        "$ref": "#/components/schemas/VcenterReference"
                    },
                    "managedObjectReferenceId": {
                        "type": "string",
                        "description": "Managed Object Reference Id of this cluster in vCenter"
                    },
                    "vsanClusterMode": {
                        "type": "string",
                        "description": "vSAN cluster mode"
                    }
                },
                "description": "Cluster representation"
            },
            "ClusterQueryResponse": {
                "type": "object",
                "properties": {
                    "queryInfo": {
                        "$ref": "#/components/schemas/QueryInfo"
                    },
                    "result": {
                        "$ref": "#/components/schemas/PageCluster"
                    }
                },
                "description": "Represents a cluster query response."
            },
            "CpuInfo": {
                "type": "object",
                "properties": {
                    "used": {
                        "$ref": "#/components/schemas/FrequencyMetric"
                    },
                    "total": {
                        "$ref": "#/components/schemas/FrequencyMetric"
                    },
                    "numberOfCores": {
                        "type": "integer",
                        "description": "Number of cores",
                        "format": "int32"
                    },
                    "numberOfCPUPackages": {
                        "type": "integer",
                        "description": "Number of CPU Packages",
                        "format": "int32"
                    }
                },
                "description": "Represents CPU information"
            },
            "DataMetric": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "number",
                        "description": "Value of the metric",
                        "format": "double"
                    },
                    "unit": {
                        "type": "string",
                        "description": "Unit of the metric",
                        "enum": [
                            "B",
                            "KB",
                            "MB",
                            "GB",
                            "TB",
                            "PB"
                        ]
                    }
                },
                "description": "Represents a single metric representing digital data"
            },
            "FrequencyMetric": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "number",
                        "description": "Value of the metric",
                        "format": "double"
                    },
                    "unit": {
                        "type": "string",
                        "description": "Unit of the metric",
                        "enum": [
                            "Hz",
                            "KHz",
                            "MHz",
                            "GHz",
                            "THz"
                        ]
                    }
                },
                "description": "Represents a single metric representing frequency"
            },
            "HciMeshData": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Cluster name"
                    },
                    "isHciMeshEnabled": {
                        "type": "boolean",
                        "description": "vSAN remote datastore mount enabled status"
                    },
                    "remoteDatastore": {
                        "type": "string",
                        "description": "Remote Datastore"
                    },
                    "primaryDataStoreId": {
                        "type": "string",
                        "description": "Primary Datastore Id"
                    },
                    "vsanDataStores": {
                        "type": "array",
                        "description": "vSAN Datastores",
                        "items": {
                            "type": "string",
                            "description": "vSAN Datastores"
                        }
                    },
                    "clientClusters": {
                        "type": "array",
                        "description": "Client Cluster",
                        "items": {
                            "type": "string",
                            "description": "Client Cluster"
                        }
                    },
                    "remoteDatastoreInfos": {
                        "type": "array",
                        "description": "Remote Datastore Infos",
                        "items": {
                            "$ref": "#/components/schemas/RemoteDatastoreInfo"
                        }
                    },
                    "isServer": {
                        "type": "boolean",
                        "description": "Is Cluster Server"
                    },
                    "isClient": {
                        "type": "boolean",
                        "description": "Is Cluster Client"
                    },
                    "computeOnlyClient": {
                        "type": "boolean",
                        "description": "Is Cluster Compute only"
                    },
                    "numberOfClients": {
                        "type": "integer",
                        "description": "Client clusters count",
                        "format": "int32"
                    },
                    "numberOfServers": {
                        "type": "integer",
                        "description": "Server clusters count",
                        "format": "int32"
                    }
                },
                "description": "vSAN remote datastore mount related data for Cluster"
            },
            "HostReference": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the host"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP address of the host"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN of the host"
                    },
                    "vmNics": {
                        "type": "array",
                        "description": "VM NICs of the host",
                        "items": {
                            "$ref": "#/components/schemas/VMNicInfo"
                        }
                    },
                    "azName": {
                        "type": "string",
                        "description": "Fault domain name of the host"
                    }
                },
                "description": "Represents an ESXi host reference"
            },
            "MemoryInfo": {
                "type": "object",
                "properties": {
                    "used": {
                        "$ref": "#/components/schemas/DataMetric"
                    },
                    "total": {
                        "$ref": "#/components/schemas/DataMetric"
                    }
                },
                "description": "Represents a memory metric with used and total for a resource"
            },
            "PageCluster": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Cluster"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                },
                "description": "Represents a page of elements of a single type",
                "readOnly": true
            },
            "RemoteDatastoreInfo": {
                "type": "object",
                "properties": {
                    "serverCluster": {
                        "type": "string",
                        "description": "Server cluster"
                    },
                    "remoteDatastore": {
                        "type": "string",
                        "description": "Remote Datastore"
                    }
                },
                "description": "Remote Datastore Info"
            },
            "StorageInfo": {
                "type": "object",
                "properties": {
                    "used": {
                        "$ref": "#/components/schemas/DataMetric"
                    },
                    "total": {
                        "$ref": "#/components/schemas/DataMetric"
                    }
                },
                "description": "Represents a storage metric with used and total for a resource"
            },
            "VMNicInfo": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the VMNic"
                    },
                    "linkSpeedMB": {
                        "type": "integer",
                        "description": "VMNic link speed in MB",
                        "format": "int32"
                    },
                    "isInUse": {
                        "type": "boolean",
                        "description": "Status of VMNic if in use or available"
                    },
                    "isAutoNegotiateSupported": {
                        "type": "boolean",
                        "description": "Status of VMNic if auto negotiate is supported or not"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Status of VMNic if active or inactive"
                    }
                },
                "description": "VMNics attached to an ESXi host reference"
            },
            "VcenterReference": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the vCenter"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN of the vCenter"
                    },
                    "vcInstanceId": {
                        "type": "string",
                        "description": "vCenter instance ID"
                    }
                },
                "description": "Represents a vCenter reference"
            },
            "ClusterCriterion": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the criterion",
                        "readOnly": true,
                        "example": "One among: UNMANAGED_CLUSTERS_IN_VCENTER, UNMANAGED_CLUSTER_IN_VCENTER"
                    },
                    "arguments": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Arguments required for a particular criterion",
                            "readOnly": true
                        },
                        "description": "Arguments required for a particular criterion",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the criterion",
                        "readOnly": true
                    }
                },
                "description": "Represents a criterion for querying the cluster"
            },
            "CredentialsExpirationSpec": {
                "required": [
                    "resourceType"
                ],
                "type": "object",
                "properties": {
                    "domainName": {
                        "type": "string",
                        "description": "Domain name"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Authenticated Resource Type",
                        "example": "One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, NSX_ALB, BACKUP"
                    },
                    "credentialIds": {
                        "type": "array",
                        "description": "List of credential ids",
                        "items": {
                            "type": "string",
                            "description": "List of credential ids"
                        }
                    }
                },
                "description": "This specification contains password expiration fetch request details"
            },
            "AuthenticatedResource": {
                "required": [
                    "domainNames",
                    "resourceId",
                    "resourceIp",
                    "resourceName",
                    "resourceType"
                ],
                "type": "object",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "Resource ID"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Resource name"
                    },
                    "resourceIp": {
                        "type": "string",
                        "description": "Resource IP address"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Resource type",
                        "example": "One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, NSX_ALB, BACKUP"
                    },
                    "domainNames": {
                        "type": "array",
                        "description": "Domain names",
                        "items": {
                            "type": "string",
                            "description": "Domain names"
                        }
                    },
                    "domainName": {
                        "type": "string",
                        "description": "Domain name (deprecated)",
                        "deprecated": true
                    }
                },
                "description": "Represents the credential resource in the system",
                "readOnly": true
            },
            "CredentialExpirationCheck": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Credential ID",
                        "readOnly": true
                    },
                    "username": {
                        "type": "string",
                        "description": "Username",
                        "readOnly": true
                    },
                    "resource": {
                        "$ref": "#/components/schemas/AuthenticatedResource"
                    },
                    "expiry": {
                        "$ref": "#/components/schemas/ExpirationDetails"
                    },
                    "errors": {
                        "type": "array",
                        "description": "List of errors in case of a failure",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "Creation timestamp",
                        "readOnly": true
                    },
                    "completionTimestamp": {
                        "type": "string",
                        "description": "Completion timestamp",
                        "readOnly": true
                    }
                },
                "description": "Represents credential expiration check details",
                "readOnly": true
            },
            "CredentialsExpiration": {
                "required": [
                    "status"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of expiration task",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Execution status of the expiration",
                        "readOnly": true,
                        "example": "One among: COMPLETED, FAILED, IN_PROGRESS"
                    },
                    "elements": {
                        "type": "array",
                        "description": "List of one or more expiration checks that are performed as part of the credentials expiration task",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/CredentialExpirationCheck"
                        }
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "Creation timestamp",
                        "readOnly": true
                    },
                    "completionTimestamp": {
                        "type": "string",
                        "description": "Completion timestamp",
                        "readOnly": true
                    }
                },
                "description": "Represents a credentials expiration task response"
            },
            "ExpirationDetails": {
                "type": "object",
                "properties": {
                    "expiryDate": {
                        "type": "string",
                        "description": "Expiration date",
                        "readOnly": true
                    },
                    "lastCheckedDate": {
                        "type": "string",
                        "description": "Last checked date",
                        "readOnly": true
                    },
                    "connectivityStatus": {
                        "type": "string",
                        "description": "Connectivity status",
                        "readOnly": true,
                        "example": "One among: ACTIVE, ERROR, UNKNOWN"
                    },
                    "status": {
                        "type": "string",
                        "description": "Expiration status",
                        "readOnly": true,
                        "example": "One among: ACTIVE, EXPIRING, EXPIRED, UNKNOWN"
                    }
                },
                "description": "Represents expiration details of the credential",
                "readOnly": true
            },
            "ConfigDriftApplySpec": {
                "type": "object",
                "properties": {
                    "reconciliationForResources": {
                        "type": "array",
                        "description": "List of Configuration Reconciliation for resource, mutually exclusive with reconciliationForDrifts",
                        "items": {
                            "$ref": "#/components/schemas/ReconciliationForResource"
                        }
                    }
                },
                "description": "Describes Configuration Reconciliation operations"
            },
            "ReconciliationForResource": {
                "required": [
                    "applyAll",
                    "resourceId"
                ],
                "type": "object",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "Target resource ID",
                        "example": "Could be ID of domain or a nested child resource eg cluster, host etc."
                    },
                    "applyAll": {
                        "type": "boolean",
                        "description": "All application flag. Indicates if all applicable config drifts must be applied"
                    }
                },
                "description": "Describes Configuration Reconciliation operation(s) for a resource"
            },
            "ClusterCreationSpec": {
                "required": [
                    "computeSpec",
                    "domainId"
                ],
                "type": "object",
                "properties": {
                    "domainId": {
                        "type": "string",
                        "description": "ID of the domain to which the clusters will be added"
                    },
                    "computeSpec": {
                        "$ref": "#/components/schemas/ComputeSpec"
                    },
                    "deployWithoutLicenseKeys": {
                        "type": "boolean",
                        "description": "Flag that indicates if the deployment should happen without license keys."
                    }
                },
                "description": "Cluster creation specification"
            },
            "ClusterCompactionSpec": {
                "required": [
                    "hosts"
                ],
                "type": "object",
                "properties": {
                    "hosts": {
                        "type": "array",
                        "description": "List of vSphere hosts to be removed",
                        "items": {
                            "$ref": "#/components/schemas/HostReference"
                        }
                    },
                    "force": {
                        "type": "boolean",
                        "description": "Force removal of vSphere host"
                    },
                    "forceByPassingSafeMinSize": {
                        "type": "boolean",
                        "description": "Remove dead hosts from cluster, bypassing validations. Forced removal may result in permanent data loss. Review recovery plan with VMware Support before using."
                    }
                },
                "description": "This specification contains the parameters required to remove one or more vSphere hosts from existing cluster in a workload domain"
            },
            "ClusterExpansionNetworkProfile": {
                "required": [
                    "name",
                    "nsxtHostSwitchConfigs"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The network profile name"
                    },
                    "description": {
                        "type": "string",
                        "description": "The network profile description"
                    },
                    "nsxtHostSwitchConfigs": {
                        "type": "array",
                        "description": "The list of NSX host switch configurations",
                        "items": {
                            "$ref": "#/components/schemas/NsxtHostSwitchConfig"
                        }
                    }
                },
                "description": "This specification contains the host switch configurations for the NSX transport node."
            },
            "ClusterExpansionNetworkSpec": {
                "required": [
                    "networkProfiles",
                    "nsxClusterSpec"
                ],
                "type": "object",
                "properties": {
                    "nsxClusterSpec": {
                        "$ref": "#/components/schemas/ClusterExpansionNsxSpec"
                    },
                    "networkProfiles": {
                        "type": "array",
                        "description": "The list of network profiles",
                        "items": {
                            "$ref": "#/components/schemas/ClusterExpansionNetworkProfile"
                        }
                    }
                },
                "description": "This specification contains cluster network configuration."
            },
            "ClusterExpansionNsxSpec": {
                "required": [
                    "uplinkProfiles"
                ],
                "type": "object",
                "properties": {
                    "ipAddressPoolsSpec": {
                        "type": "array",
                        "description": "The IP address pools specification",
                        "items": {
                            "$ref": "#/components/schemas/IpAddressPoolSpec"
                        }
                    },
                    "uplinkProfiles": {
                        "type": "array",
                        "description": "The list of uplink profile specifications.",
                        "items": {
                            "$ref": "#/components/schemas/UplinkProfile"
                        }
                    }
                },
                "description": "This specification contains NSX configuration for cluster expansion"
            },
            "ClusterExpansionSpec": {
                "required": [
                    "hostSpecs"
                ],
                "type": "object",
                "properties": {
                    "hostSpecs": {
                        "maxItems": 64,
                        "minItems": 1,
                        "type": "array",
                        "description": "List of vSphere host information from the free pool to consume in the workload domain",
                        "items": {
                            "$ref": "#/components/schemas/HostSpec"
                        }
                    },
                    "networkSpec": {
                        "$ref": "#/components/schemas/ClusterExpansionNetworkSpec"
                    },
                    "vsanNetworkSpecs": {
                        "type": "array",
                        "description": "vSAN Network Pool Spec",
                        "items": {
                            "$ref": "#/components/schemas/VSANNetworkSpec"
                        }
                    },
                    "witnessSpec": {
                        "$ref": "#/components/schemas/WitnessSpec"
                    },
                    "witnessTrafficSharedWithVsanTraffic": {
                        "type": "boolean",
                        "description": "Witness traffic to be shared with vSAN traffic"
                    },
                    "deployWithoutLicenseKeys": {
                        "type": "boolean",
                        "description": "Flag that indicates if the deployment should happen without license keys."
                    },
                    "interRackExpansion": {
                        "type": "boolean",
                        "description": "Is inter-rack cluster(true for L2 non-uniform and L3 : At least one of management, uplink, Edge and host TEP networks is different for hosts of the cluster, false for L2 uniform :  All hosts in cluster have identical management, uplink, Edge and host TEP networks) expansion. Required, only if Cluster contains NSX Edge Cluster"
                    },
                    "forceHostAdditionInPresenceofDeadHosts": {
                        "type": "boolean",
                        "description": "Use to add host to a cluster with dead host(s). Bypasses validation of disconnected hosts and vSAN cluster health. Review recovery plan VMware Support before using. False if omitted. This property is deprecated and it has no effect when using it.",
                        "deprecated": true
                    },
                    "skipThumbprintValidation": {
                        "type": "boolean",
                        "description": "Skip thumbprint validation for ESXi hosts during add host operation. \nThis property is deprecated.",
                        "deprecated": true
                    }
                },
                "description": "This specification contains the parameters required to add one or more vSphere hosts to an existing cluster in a workload domain"
            },
            "ClusterStretchNetworkSpec": {
                "required": [
                    "networkProfiles",
                    "nsxClusterSpec"
                ],
                "type": "object",
                "properties": {
                    "nsxClusterSpec": {
                        "$ref": "#/components/schemas/NsxStretchClusterSpec"
                    },
                    "networkProfiles": {
                        "type": "array",
                        "description": "The network profile to be associated with Secondary AZ Hosts in NSX.",
                        "items": {
                            "$ref": "#/components/schemas/StretchClusterNetworkProfile"
                        }
                    }
                },
                "description": "This specification contains network configuration for stretiching a vSan Cluster"
            },
            "ClusterStretchSpec": {
                "required": [
                    "hostSpecs",
                    "witnessSpec"
                ],
                "type": "object",
                "properties": {
                    "hostSpecs": {
                        "type": "array",
                        "description": "List of vSphere host information from the free pool to consume in the workload domain",
                        "items": {
                            "$ref": "#/components/schemas/HostSpec"
                        }
                    },
                    "witnessSpec": {
                        "$ref": "#/components/schemas/WitnessSpec"
                    },
                    "witnessTrafficSharedWithVsanTraffic": {
                        "type": "boolean",
                        "description": "Witness traffic to be shared with vSAN traffic"
                    },
                    "vsanNetworkSpecs": {
                        "type": "array",
                        "description": "vSAN Network Pool Specs",
                        "items": {
                            "$ref": "#/components/schemas/VSANNetworkSpec"
                        }
                    },
                    "secondaryAzOverlayVlanId": {
                        "type": "integer",
                        "description": "Secondary AZ Overlay Vlan Id. This field is deprecated. The secondary AZ overlay vlan id should be mentioned in the uplinkProfile field instead",
                        "format": "int32",
                        "deprecated": true
                    },
                    "networkSpec": {
                        "$ref": "#/components/schemas/ClusterStretchNetworkSpec"
                    },
                    "isEdgeClusterConfiguredForMultiAZ": {
                        "type": "boolean",
                        "description": "Edge cluster configured for multi AZ"
                    },
                    "deployWithoutLicenseKeys": {
                        "type": "boolean",
                        "description": "Flag that indicates if the deployment should happen without license keys."
                    }
                },
                "description": "This spec contains the parameters required to convert a Standard vSAN cluster to a Stretched cluster"
            },
            "ClusterUnstretchSpec": {
                "type": "object",
                "description": "This spec contains the parameters required to convert a Stretched cluster to a Standard vSAN cluster"
            },
            "ClusterUpdateSpec": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Cluster Name"
                    },
                    "clusterExpansionSpec": {
                        "$ref": "#/components/schemas/ClusterExpansionSpec"
                    },
                    "clusterCompactionSpec": {
                        "$ref": "#/components/schemas/ClusterCompactionSpec"
                    },
                    "clusterStretchSpec": {
                        "$ref": "#/components/schemas/ClusterStretchSpec"
                    },
                    "clusterUnstretchSpec": {
                        "$ref": "#/components/schemas/ClusterUnstretchSpec"
                    },
                    "markForDeletion": {
                        "type": "boolean",
                        "description": "Prepare the cluster for deletion"
                    },
                    "prepareForStretch": {
                        "type": "boolean",
                        "description": "Prepare the cluster for stretch"
                    }
                },
                "description": "Cluster Update Data"
            },
            "NsxStretchClusterSpec": {
                "required": [
                    "uplinkProfiles"
                ],
                "type": "object",
                "properties": {
                    "ipAddressPoolsSpec": {
                        "type": "array",
                        "description": "The IP address pool specifications",
                        "items": {
                            "$ref": "#/components/schemas/IpAddressPoolSpec"
                        }
                    },
                    "uplinkProfiles": {
                        "type": "array",
                        "description": "The list of uplink profile specifications.",
                        "items": {
                            "$ref": "#/components/schemas/UplinkProfile"
                        }
                    }
                },
                "description": "This specification contains NSX configuration for Secondary AZ Hosts"
            },
            "StretchClusterNetworkProfile": {
                "required": [
                    "name",
                    "nsxtHostSwitchConfigs"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The network profile name"
                    },
                    "description": {
                        "type": "string",
                        "description": "The network profile description"
                    },
                    "nsxtHostSwitchConfigs": {
                        "type": "array",
                        "description": "The list of NSX host switch configurations",
                        "items": {
                            "$ref": "#/components/schemas/NsxtHostSwitchConfig"
                        }
                    }
                },
                "description": "This specification contains the host switch configurations for the NSX transport nodes belonging to Secondary AZ."
            },
            "VSANNetworkSpec": {
                "required": [
                    "vsanCidr",
                    "vsanGatewayIP"
                ],
                "type": "object",
                "properties": {
                    "vsanGatewayIP": {
                        "type": "string",
                        "description": "vSAN Gateway IP of the ESXi host"
                    },
                    "vsanCidr": {
                        "type": "string",
                        "description": "vSAN subnet cidr of the ESXi host"
                    }
                },
                "description": "Contains the vSAN Network details"
            },
            "WitnessSpec": {
                "required": [
                    "fqdn",
                    "vsanCidr",
                    "vsanIp"
                ],
                "type": "object",
                "properties": {
                    "vsanIp": {
                        "type": "string",
                        "description": "vSAN IP of the witness host"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "Management ip of the witness host"
                    },
                    "vsanCidr": {
                        "type": "string",
                        "description": "vSAN subnet cidr of the witness host"
                    }
                },
                "description": "Spec contains the Witness host parameters that are part of each stretched cluster"
            },
            "ClusterNetworkConfiguration": {
                "type": "object",
                "properties": {
                    "hostDetails": {
                        "type": "array",
                        "description": "List of host details",
                        "items": {
                            "$ref": "#/components/schemas/HostDetail"
                        }
                    },
                    "vdsConfigurations": {
                        "type": "array",
                        "description": "List of VDS configuration",
                        "items": {
                            "$ref": "#/components/schemas/VdsConfiguration"
                        }
                    },
                    "nonVcfCreatedVds": {
                        "type": "array",
                        "description": "List of VDS names that is not present in VCF inventory",
                        "items": {
                            "type": "string",
                            "description": "List of VDS names that is not present in VCF inventory"
                        }
                    },
                    "ipAddressPools": {
                        "type": "array",
                        "description": "List of IP address pool configuration",
                        "items": {
                            "$ref": "#/components/schemas/NsxtIpAddressPool"
                        }
                    },
                    "uplinkProfiles": {
                        "type": "array",
                        "description": "List of uplink profile configuration",
                        "items": {
                            "$ref": "#/components/schemas/UplinkProfile"
                        }
                    },
                    "networkProfiles": {
                        "type": "array",
                        "description": "List of network profiles",
                        "items": {
                            "$ref": "#/components/schemas/NetworkProfileConfiguration"
                        }
                    }
                },
                "description": "Represents the cluster network configuration.",
                "readOnly": true
            },
            "ClusterNetworkConfigurationQueryResponse": {
                "type": "object",
                "properties": {
                    "queryInfo": {
                        "$ref": "#/components/schemas/QueryInfo"
                    },
                    "result": {
                        "$ref": "#/components/schemas/PageClusterNetworkConfiguration"
                    }
                },
                "description": "Represents the cluster network configuration query response."
            },
            "HostDetail": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the host"
                    },
                    "hostName": {
                        "type": "string",
                        "description": "Host name of the vSphere host"
                    },
                    "hostNetworkConfiguration": {
                        "$ref": "#/components/schemas/HostNetworkConfiguration"
                    },
                    "azName": {
                        "type": "string",
                        "description": "Availability zone to which the host belongs when the cluster is stretched"
                    }
                },
                "description": "Host Configuration"
            },
            "HostNetworkConfiguration": {
                "type": "object",
                "properties": {
                    "vmNics": {
                        "type": "array",
                        "description": "Vmnic-Uplink configuration of the vSphere host",
                        "items": {
                            "$ref": "#/components/schemas/HostVmnicUplinkConfiguration"
                        }
                    },
                    "networkProfileName": {
                        "type": "string",
                        "description": "The network profile associated with the Host"
                    }
                },
                "description": "Host Network Configuration."
            },
            "HostVmnicUplinkConfiguration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "VmNic ID"
                    },
                    "vdsName": {
                        "type": "string",
                        "description": "VDS name"
                    },
                    "uplink": {
                        "type": "string",
                        "description": "Uplink of the VDS associated with the vmnic"
                    }
                },
                "description": "This specification contains vmnic-uplink network configuration of host in a cluster"
            },
            "InventoryMismatchInfo": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Inventory mismatch type",
                        "readOnly": true,
                        "example": "One among: VDS_LEVEL, PORTGROUP_LEVEL, NSX_LEVEL"
                    },
                    "inventoryObjects": {
                        "type": "array",
                        "description": "Inventory object names associated with the mismatch",
                        "items": {
                            "type": "string",
                            "description": "Inventory object names associated with the mismatch"
                        }
                    }
                },
                "description": "Represents the inventory mismatch info."
            },
            "NetworkProfileConfiguration": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The network profile name"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Flag that denotes if the profile is default or not"
                    },
                    "nsxtHostSwitchConfigs": {
                        "type": "array",
                        "description": "The list of NSX host switch configurations",
                        "items": {
                            "$ref": "#/components/schemas/NsxtHostSwitchConfiguration"
                        }
                    }
                },
                "description": "This configuration contains the host switch configurations for the NSX transport node."
            },
            "NsxtHostSwitchConfiguration": {
                "type": "object",
                "properties": {
                    "vdsName": {
                        "type": "string",
                        "description": "The name of the vSphere Distributed Switch"
                    },
                    "uplinkProfileName": {
                        "type": "string",
                        "description": "The name of the uplink profile"
                    },
                    "ipAddressPoolName": {
                        "type": "string",
                        "description": "The IP address Pool name. For DHCP, this field will be empty"
                    },
                    "vdsUplinkToNsxUplink": {
                        "type": "array",
                        "description": "The map of vSphere Distributed Switch uplinks to the NSX switch uplinks.",
                        "items": {
                            "$ref": "#/components/schemas/VdsUplinkToNsxUplinkConfiguration"
                        }
                    }
                },
                "description": "The configurations to be applied on the Host switch."
            },
            "NsxtIpAddressPool": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the IP address pool",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the IP address pool",
                        "readOnly": true
                    },
                    "availableIpAddresses": {
                        "type": "integer",
                        "description": "The number of IP addresses available in the IP address pool",
                        "format": "int32",
                        "readOnly": true
                    },
                    "totalIpAddresses": {
                        "type": "integer",
                        "description": "The total number of IP addresses in the IP address pool",
                        "format": "int32",
                        "readOnly": true
                    },
                    "blockSubnets": {
                        "type": "array",
                        "description": "The list of IP address pool block subnets",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/NsxtIpAddressPoolBlockSubnet"
                        }
                    },
                    "staticSubnets": {
                        "type": "array",
                        "description": "The list of IP address pool static subnets",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/NsxtIpAddressPoolStaticSubnet"
                        }
                    }
                },
                "description": "NSX IP address pool representation"
            },
            "NsxtIpAddressPoolBlockSubnet": {
                "type": "object",
                "properties": {
                    "size": {
                        "type": "integer",
                        "description": "The size of the IP address block",
                        "format": "int32",
                        "readOnly": true
                    },
                    "gatewayAssigned": {
                        "type": "boolean",
                        "description": "The boolean representing the state of the gateway assignment",
                        "readOnly": true
                    },
                    "cidr": {
                        "type": "string",
                        "description": "The CIDR of the IP address subnet",
                        "readOnly": true
                    }
                },
                "description": "NSX IP address pool block subnet representation",
                "readOnly": true
            },
            "NsxtIpAddressPoolRange": {
                "type": "object",
                "properties": {
                    "start": {
                        "type": "string",
                        "description": "The start of the IP address range",
                        "readOnly": true
                    },
                    "end": {
                        "type": "string",
                        "description": "The end of the IP address range",
                        "readOnly": true
                    }
                },
                "description": "NSX IP address pool range representation",
                "readOnly": true
            },
            "NsxtIpAddressPoolStaticSubnet": {
                "type": "object",
                "properties": {
                    "ipAddressPoolRanges": {
                        "type": "array",
                        "description": "The list of IP address ranges",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/NsxtIpAddressPoolRange"
                        }
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The gateway IP address",
                        "readOnly": true
                    },
                    "cidr": {
                        "type": "string",
                        "description": "The CIDR of the IP address subnet",
                        "readOnly": true
                    }
                },
                "description": "NSX IP address pool static subnet representation",
                "readOnly": true
            },
            "PageClusterNetworkConfiguration": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ClusterNetworkConfiguration"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                },
                "description": "Represents a page of elements of a single type",
                "readOnly": true
            },
            "PortgroupConfig": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Port group name"
                    },
                    "transportType": {
                        "type": "string",
                        "description": "Port group transport type"
                    },
                    "activeUplinks": {
                        "type": "array",
                        "description": "List of active uplinks associated with port group",
                        "items": {
                            "type": "string",
                            "description": "List of active uplinks associated with port group"
                        }
                    },
                    "standByUplinks": {
                        "type": "array",
                        "description": "List of standby uplinks associated with port group",
                        "items": {
                            "type": "string",
                            "description": "List of standby uplinks associated with port group"
                        }
                    },
                    "policy": {
                        "type": "string",
                        "description": "The load balancing policy associated with port group"
                    },
                    "supportedTeamingPolicies": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "List of supported teaming policies at port group"
                        },
                        "description": "List of supported teaming policies at port group"
                    },
                    "vlanId": {
                        "type": "integer",
                        "description": "The vlan id associated with the port group",
                        "format": "int32"
                    },
                    "mtu": {
                        "type": "integer",
                        "description": "The maximum transmission unit (MTU) used for the uplinks associated with the port group",
                        "format": "int32"
                    }
                },
                "description": "This specification contains the network configuration in a port group."
            },
            "VdsConfiguration": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "vSphere Distributed Switch name"
                    },
                    "portGroups": {
                        "type": "array",
                        "description": "List of portgroup configuration associated with the vSphere Distributed Switch",
                        "items": {
                            "$ref": "#/components/schemas/PortgroupConfig"
                        }
                    },
                    "nsxtSwitchConfig": {
                        "$ref": "#/components/schemas/NsxtSwitchConfig"
                    },
                    "inventoryMismatchInfo": {
                        "type": "array",
                        "description": "Inventory mismatch levels",
                        "items": {
                            "$ref": "#/components/schemas/InventoryMismatchInfo"
                        }
                    },
                    "uplinks": {
                        "type": "array",
                        "description": "Uplinks used by vSphere Distributed Switch",
                        "items": {
                            "type": "string",
                            "description": "Uplinks used by vSphere Distributed Switch"
                        }
                    },
                    "mtu": {
                        "type": "integer",
                        "description": "The maximum transmission unit (MTU) configured for the uplinks",
                        "format": "int32"
                    }
                },
                "description": "The vSphere Distributed Switch network configuration"
            },
            "VdsUplinkToNsxUplinkConfiguration": {
                "type": "object",
                "properties": {
                    "vdsUplinkName": {
                        "type": "string",
                        "description": "The uplink name of the vSphere Distributed Switch"
                    },
                    "nsxUplinkName": {
                        "type": "string",
                        "description": "The uplink name of the NSX switch"
                    }
                },
                "description": "The map of vSphere Distributed Switch uplinks to the NSX switch uplinks."
            },
            "ClusterNetworkConfigurationCriterion": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the criterion",
                        "readOnly": true,
                        "example": "One among: VCENTER_NSXT_NETWORK_CONFIG, VCENTER_NETWORK_CONFIG_SUMMARY, NSX_NETWORK_CONFIG_PREVIEW_POST_DRIFT"
                    },
                    "arguments": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Arguments required for a particular criterion",
                            "readOnly": true
                        },
                        "description": "Arguments required for a particular criterion",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the criterion",
                        "readOnly": true
                    }
                },
                "description": "Represents criterion for querying the network properties of a cluster.",
                "readOnly": true
            },
            "DatastoreMountSpec": {
                "required": [
                    "datastoreSpec"
                ],
                "type": "object",
                "properties": {
                    "datastoreSpec": {
                        "$ref": "#/components/schemas/DatastoreSpec"
                    }
                },
                "description": "Datastore Mount Spec"
            },
            "ImportVdsSpec": {
                "required": [
                    "listOfVdsDetails"
                ],
                "type": "object",
                "properties": {
                    "listOfVdsDetails": {
                        "type": "array",
                        "description": "List of details of vSphere Distributed Switches to be imported to the inventory",
                        "items": {
                            "$ref": "#/components/schemas/VdsDetail"
                        }
                    }
                },
                "description": "Import Vds Spec"
            },
            "VdsDetail": {
                "required": [
                    "vdsName"
                ],
                "type": "object",
                "properties": {
                    "vdsName": {
                        "type": "string",
                        "description": "vSphere Distributed Switch name"
                    }
                },
                "description": "This specification contains the details of vSphere Distributed Switch to be imported to the inventory"
            },
            "BundleUploadSpec": {
                "required": [
                    "bundleFilePath",
                    "manifestFilePath"
                ],
                "type": "object",
                "properties": {
                    "bundleFilePath": {
                        "type": "string",
                        "description": "Bundle Upload File Path"
                    },
                    "manifestFilePath": {
                        "type": "string",
                        "description": "Bundle Upload Manifest File Path"
                    },
                    "signatureFilePath": {
                        "type": "string",
                        "description": "Bundle Upload Signature File Path"
                    },
                    "compatibilitySetsFilePath": {
                        "type": "string",
                        "description": "[Deprecated] Path to the software compatibility sets file",
                        "deprecated": true
                    },
                    "partnerExtensionSpec": {
                        "$ref": "#/components/schemas/PartnerExtensionSpec"
                    }
                },
                "description": "Bundle Upload Specification"
            },
            "PartnerExtensionSpec": {
                "type": "object",
                "properties": {
                    "partnerBundleVersion": {
                        "type": "string",
                        "description": "Version of partner bundle to be uploaded. Should match one of the bundle versions available in the partner bundle metadata file"
                    },
                    "partnerBundleMetadataFilePath": {
                        "type": "string",
                        "description": "Path to the bundle metadata file. The metadata file can have details of multiple bundles"
                    }
                },
                "description": "Specification for partner extensions. This specification is used in the Bundle Upload API"
            },
            "BackupSpec": {
                "required": [
                    "elements"
                ],
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "List of elements to be backed up",
                        "items": {
                            "$ref": "#/components/schemas/BackupResource"
                        }
                    }
                },
                "description": "Backup Specification"
            },
            "BackupTask": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Backup task ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Backup task name"
                    },
                    "status": {
                        "type": "string",
                        "description": "Backup task status",
                        "example": "One among: IN_PROGRESS"
                    },
                    "resources": {
                        "type": "array",
                        "description": "Backup resources, to get the backup details",
                        "items": {
                            "$ref": "#/components/schemas/Resource"
                        }
                    },
                    "errors": {
                        "type": "array",
                        "description": "List of errors in case of a failure",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "Avn": {
                "required": [
                    "gateway",
                    "mtu",
                    "name",
                    "regionType",
                    "subnet",
                    "subnetMask"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The UUID of the AVN",
                        "example": "3f39d4a1-78d2-11e8-af85-f1cf26258cdc"
                    },
                    "name": {
                        "type": "string",
                        "description": "User provided name of the AVN",
                        "example": "vRealize-AVN"
                    },
                    "regionType": {
                        "pattern": "(REGION_A|REGION_B|X_REGION)",
                        "type": "string",
                        "description": "The region type of AVN; X_REGION or REGION_A",
                        "example": "REGION_A"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "Subnet assigned to the AVN",
                        "example": "192.168.31.0"
                    },
                    "subnetMask": {
                        "type": "string",
                        "description": "Subnet mask for the network assigned to the AVN",
                        "example": "255.255.255.0"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "Gateway of the AVN subnet",
                        "example": "192.168.31.1"
                    },
                    "mtu": {
                        "maximum": 9000,
                        "minimum": 1600,
                        "type": "integer",
                        "description": "MTU for the AVN",
                        "format": "int32",
                        "example": 1600
                    },
                    "vlanId": {
                        "type": "integer",
                        "description": "VLAN ID for the VLAN backed AVN",
                        "format": "int32",
                        "example": 30
                    },
                    "portGroupName": {
                        "type": "string",
                        "description": "Port group name identifying the AVN on the distributed switch",
                        "example": "sfo-m01-seg01-pg"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "AVN search domain",
                        "example": "rainpole.io"
                    },
                    "routerName": {
                        "type": "string",
                        "description": "Name of Tier-1 Gateway AVN is connected to",
                        "example": "sfo-m01-ec01-t1-gw01"
                    }
                },
                "description": "Defines an Application virtual Network (AVN) and its attributes"
            },
            "AvnsCreationSpec": {
                "required": [
                    "avns"
                ],
                "type": "object",
                "properties": {
                    "edgeClusterId": {
                        "type": "string",
                        "description": "The UUID of the Edge Cluster to associate VLAN AVNs",
                        "example": "3f39d4a1-78d2-11e8-af85-f1cf26258cdc"
                    },
                    "avns": {
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "array",
                        "description": "The list of AVNs to be created",
                        "items": {
                            "$ref": "#/components/schemas/Avn"
                        }
                    }
                },
                "description": "Provide the spec to create the AVNs"
            },
            "VsanHclConfiguration": {
                "required": [
                    "autoDownloadEnabled",
                    "outOfDateErrorThreshold",
                    "outOfDateWarningThreshold",
                    "pollingEnabled",
                    "pollingInterval"
                ],
                "type": "object",
                "properties": {
                    "autoDownloadEnabled": {
                        "type": "boolean",
                        "description": "Flag to indicate if auto download of vSAN HCL data is enabled or disabled"
                    },
                    "outOfDateErrorThreshold": {
                        "type": "integer",
                        "description": "Duration after which vSAN HCL data will be flagged as out of date with severity as error",
                        "format": "int32"
                    },
                    "outOfDateWarningThreshold": {
                        "type": "integer",
                        "description": "Duration after which vSAN HCL data will be flagged as out of date with severity as warning",
                        "format": "int32"
                    },
                    "pollingInterval": {
                        "type": "integer",
                        "description": "Interval in minutes at which availability of new vSAN HCL data will be checked",
                        "format": "int64"
                    },
                    "pollingEnabled": {
                        "type": "boolean",
                        "description": "Flag to indicate if polling for vSAN HCL data is enabled or disabled"
                    }
                },
                "description": "vSAN HCL configuration"
            },
            "VasaProviderUpdateSpec": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the VASA Provider"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the VASA Provider"
                    }
                },
                "description": "VASA Provider update data"
            },
            "VasaUserUpdateSpec": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "VASA User name"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password"
                    }
                },
                "description": "User update data"
            },
            "StorageContainerUpdateSpec": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the storage container"
                    }
                },
                "description": "Storage container update data"
            },
            "LocalAccountPasswordInfo": {
                "required": [
                    "newPassword"
                ],
                "type": "object",
                "properties": {
                    "oldPassword": {
                        "type": "string",
                        "description": "The old password of the local account",
                        "readOnly": true
                    },
                    "newPassword": {
                        "type": "string",
                        "description": "The new password of the local account",
                        "readOnly": true
                    }
                },
                "description": "Local user password details"
            },
            "UpgradeCommitSpec": {
                "type": "object",
                "properties": {
                    "scheduledTimestamp": {
                        "type": "string",
                        "description": "Upgrade Scheduled Time"
                    },
                    "upgradeNow": {
                        "type": "boolean",
                        "description": "Flag for enabling Upgrade Now. If true, scheduledTimestamp is ignored"
                    },
                    "markForCancellation": {
                        "type": "boolean",
                        "description": "Flag for marking an upgrade for cancellation.  If set to true, other fields in the request will be ignored"
                    },
                    "vcenterUpgradePatchSpecs": {
                        "type": "array",
                        "description": "User input for vCenter ReducedDowntimeMigration upgrade",
                        "items": {
                            "$ref": "#/components/schemas/VcenterUpgradePatchSpec"
                        }
                    }
                },
                "description": "Upgrade Commit/Reschedule Specification"
            },
            "VcenterUpgradePatchSpec": {
                "required": [
                    "resourceId",
                    "startSwitchoverTimestamp"
                ],
                "type": "object",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "Resource ID for Upgrade"
                    },
                    "startSwitchoverTimestamp": {
                        "type": "string",
                        "description": "Start switchover time. This field is only supported for ReducedDowntimeMigration upgrade mechanism. To unset startSwitchoverTimestamp, provide the value as: 1970-01-01T00:00:00Z"
                    }
                },
                "description": "vCenter Upgrade User editable Input Specification"
            },
            "Bundle": {
                "required": [
                    "downloadStatus",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Bundle ID",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Bundle Type",
                        "readOnly": true,
                        "example": "One among: SDDC_MANAGER, VMWARE_SOFTWARE, VXRAIL"
                    },
                    "description": {
                        "type": "string",
                        "description": "Bundle Description",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Bundle Version",
                        "readOnly": true
                    },
                    "severity": {
                        "type": "string",
                        "description": "Bundle Severity",
                        "readOnly": true,
                        "example": "One among: CRITICAL, IMPORTANT, MODERATE, LOW"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "Bundle Vendor",
                        "readOnly": true
                    },
                    "releasedDate": {
                        "type": "string",
                        "description": "Bundle Release Date",
                        "readOnly": true
                    },
                    "isCumulative": {
                        "type": "boolean",
                        "description": "Is Bundle Cumulative",
                        "readOnly": true
                    },
                    "isCompliant": {
                        "type": "boolean",
                        "description": "Is compliant with the current VCF version",
                        "readOnly": true
                    },
                    "sizeMB": {
                        "type": "number",
                        "description": "Bundle Size in MB",
                        "format": "double",
                        "readOnly": true
                    },
                    "downloadStatus": {
                        "type": "string",
                        "description": "Bundle Download Status",
                        "readOnly": true,
                        "example": "One among: PENDING, SCHEDULED, IN_PROGRESS, SUCCESSFUL, FAILED, RECALLED"
                    },
                    "components": {
                        "type": "array",
                        "description": "Bundle Components",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/BundleComponent"
                        }
                    },
                    "applicabilityStatus": {
                        "type": "string",
                        "description": "Bundle Applicability Status",
                        "readOnly": true,
                        "example": "One among: SUCCESS, IN_PROGRESS, FAILED, AVAILABLE, PENDING"
                    },
                    "applicabilityOrder": {
                        "type": "integer",
                        "description": "Bundle Applicability Order",
                        "format": "int32",
                        "readOnly": true,
                        "example": 1
                    },
                    "isPartiallyUpgraded": {
                        "type": "boolean",
                        "description": "Is Bundle partially upgraded",
                        "readOnly": true,
                        "example": true
                    }
                },
                "description": "Bundle contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain.",
                "readOnly": true
            },
            "BundleComponent": {
                "required": [
                    "imageType"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Bundle Component Description",
                        "readOnly": true
                    },
                    "vendor": {
                        "type": "string",
                        "description": "Bundle Component Vendor",
                        "readOnly": true
                    },
                    "releasedDate": {
                        "type": "string",
                        "description": "Bundle Component Release Date",
                        "readOnly": true
                    },
                    "toVersion": {
                        "type": "string",
                        "description": "Bundle Component's to/target version after Upgrade",
                        "readOnly": true
                    },
                    "fromVersion": {
                        "type": "string",
                        "description": "Bundle Component's from/source version before Upgrade",
                        "readOnly": true
                    },
                    "imageType": {
                        "type": "string",
                        "description": "Bundle Component Image Type",
                        "readOnly": true,
                        "example": "One among: PATCH, INSTALL"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of Resource/Software Component",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Resource/Software Component",
                        "readOnly": true
                    }
                },
                "description": "Bundle Software Component",
                "readOnly": true
            },
            "Upgrade": {
                "required": [
                    "bundleId",
                    "id",
                    "resourceType",
                    "resourceUpgradeSpecs",
                    "status",
                    "taskId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID for Upgrade"
                    },
                    "bundleId": {
                        "type": "string",
                        "description": "Bundle ID for Upgrade"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Resource Type for Upgrade",
                        "example": "One among: DOMAIN, CLUSTER, UNASSIGNED_HOST"
                    },
                    "parallelUpgrade": {
                        "type": "boolean",
                        "description": "Boolean to represent components will be upgraded in parallel on not"
                    },
                    "resourceUpgradeSpecs": {
                        "type": "array",
                        "description": "Resource Upgrade Specifications",
                        "items": {
                            "$ref": "#/components/schemas/ResourceUpgradeSpec"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "Overall upgrade status"
                    },
                    "taskId": {
                        "type": "string",
                        "description": "Task ID associated with upgrade"
                    },
                    "nsxtUpgradeUserInputSpec": {
                        "$ref": "#/components/schemas/NsxtUpgradeUserInputSpec"
                    },
                    "bundle": {
                        "$ref": "#/components/schemas/Bundle"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "End time of the upgrade",
                        "format": "int64"
                    },
                    "vcenterUpgradeUserInputSpec": {
                        "$ref": "#/components/schemas/VcenterUpgradeUserInputSpec"
                    }
                },
                "description": "Upgrade object which contain details regarding the upgrade",
                "readOnly": true
            },
            "SystemUpdateSpec": {
                "required": [
                    "maxAllowedDomainsInSubscription"
                ],
                "type": "object",
                "properties": {
                    "maxAllowedDomainsInSubscription": {
                        "type": "integer",
                        "description": "new limit of amount of domains in subscription mode",
                        "format": "int32"
                    }
                },
                "description": "Contains the parameters required to perform update operation on system"
            },
            "ProxyConfiguration": {
                "type": "object",
                "properties": {
                    "isConfigured": {
                        "type": "boolean",
                        "description": "Is proxy configured",
                        "readOnly": true
                    },
                    "isEnabled": {
                        "type": "boolean",
                        "description": "Is proxy enabled"
                    },
                    "host": {
                        "type": "string",
                        "description": "IP address/FQDN of proxy server",
                        "example": "10.0.0.250"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port of proxy server",
                        "format": "int32",
                        "example": 3128
                    },
                    "transferProtocol": {
                        "type": "string",
                        "description": "Proxy transfer protocol, default value is HTTP",
                        "enum": [
                            "HTTP",
                            "HTTPS"
                        ]
                    },
                    "username": {
                        "type": "string",
                        "description": "User name to connect"
                    },
                    "password": {
                        "type": "string",
                        "description": "User password to connect, will return null on reading"
                    },
                    "isAuthenticated": {
                        "type": "boolean",
                        "description": "Is proxy authenticated"
                    }
                },
                "description": "Proxy Configuration"
            },
            "AssessmentPartialRetryInput": {
                "required": [
                    "errorIds"
                ],
                "type": "object",
                "properties": {
                    "errorIds": {
                        "type": "array",
                        "description": "List of error ids to retry",
                        "items": {
                            "type": "string",
                            "description": "List of error ids to retry"
                        }
                    },
                    "options": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Options map (toggles) to control assessment flow. Available toggles 'discoveryCaching' - if set to true the assessment engine will use the Domain data (if present) from previous discovery execution. If any of the passed in the request domains is not present in the cache the Discovery is triggered for ALL domains (even the ones existing in the cache). ",
                            "example": "{\"discoveryCaching\":\"true\"}"
                        },
                        "description": "Options map (toggles) to control assessment flow. Available toggles 'discoveryCaching' - if set to true the assessment engine will use the Domain data (if present) from previous discovery execution. If any of the passed in the request domains is not present in the cache the Discovery is triggered for ALL domains (even the ones existing in the cache). ",
                        "example": {
                            "discoveryCaching": "true"
                        }
                    }
                },
                "description": "Spec for assessment retry"
            },
            "Functionality": {
                "required": [
                    "isAllowed",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Operation that is represented in machine readable format. The convention is <resource>_<operation>",
                        "example": "Sample values: HOST_COMMISSION, HOST_DECOMMISSION"
                    },
                    "isAllowed": {
                        "type": "boolean",
                        "description": "Flag indicating if a given functionality is allowed/disallowed",
                        "example": true
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "The localized error message"
                    }
                },
                "description": "Defines a functionality model"
            },
            "ResourceFunctionalities": {
                "required": [
                    "resourceType"
                ],
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "Type of the resource",
                        "example": "One among: SYSTEM, HOST, CLUSTER, DOMAIN, EDGE_CLUSTER"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "ID of the resource"
                    },
                    "functionalities": {
                        "type": "array",
                        "description": "List of functionalities associated with the resource",
                        "items": {
                            "$ref": "#/components/schemas/Functionality"
                        }
                    }
                },
                "description": "Defines a resource functionality specification",
                "readOnly": true
            },
            "ResourceFunctionalitiesUpdateSpec": {
                "required": [
                    "operationId",
                    "operationName",
                    "resourceFunctionalities",
                    "serviceId"
                ],
                "type": "object",
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The identifier of the service associated with the resource functionalities"
                    },
                    "operationName": {
                        "type": "string",
                        "description": "The name of the operation associated with the resource functionalities"
                    },
                    "operationId": {
                        "type": "string",
                        "description": "The identifier of the operation associated with the resource functionalities"
                    },
                    "resourceFunctionalities": {
                        "type": "array",
                        "description": "List of resource functionalities associated with the caller",
                        "items": {
                            "$ref": "#/components/schemas/ResourceFunctionalities"
                        }
                    }
                },
                "description": "Resource Functionality Caller update specification"
            },
            "ResourceFunctionalitiesCaller": {
                "type": "object",
                "properties": {
                    "operationId": {
                        "type": "string",
                        "description": "The identifier of the operation associated with the resource functionalities"
                    },
                    "operationName": {
                        "type": "string",
                        "description": "The name of the operation associated with the resource functionalities"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The identifier of the service associated with the resource functionalities"
                    },
                    "resourceFunctionalities": {
                        "type": "array",
                        "description": "List of resource functionalities associated with the caller",
                        "items": {
                            "$ref": "#/components/schemas/ResourceFunctionalities"
                        }
                    }
                },
                "description": "Defines a resource functionality caller specification"
            },
            "ResourceFunctionalitiesGlobalUpdateSpec": {
                "required": [
                    "isAllowed",
                    "operationId",
                    "operationName",
                    "serviceId"
                ],
                "type": "object",
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The identifier of the service associated with the resource functionalities"
                    },
                    "operationName": {
                        "type": "string",
                        "description": "The name of the operation associated with the resource functionalities"
                    },
                    "operationId": {
                        "type": "string",
                        "description": "The identifier of the operation associated with the resource functionalities"
                    },
                    "isAllowed": {
                        "type": "boolean",
                        "description": "Flag indicating if all of the functionalities are allowed",
                        "example": true
                    }
                },
                "description": "Resource Functionality Global Caller update specification"
            },
            "ResourceFunctionalitiesGlobalConfigurationCaller": {
                "type": "object",
                "properties": {
                    "operationId": {
                        "type": "string",
                        "description": "The identifier of the operation associated with the resource functionalities"
                    },
                    "operationName": {
                        "type": "string",
                        "description": "The name of the operation associated with the resource functionalities"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The identifier of the service associated with the resource functionalities"
                    },
                    "isAllowed": {
                        "type": "boolean",
                        "description": "Global flag representing if all of the VMware Cloud Foundation operations are allowed or not"
                    }
                },
                "description": "Defines a resource functionality global caller specification"
            },
            "Personality": {
                "required": [
                    "description",
                    "displayName",
                    "imageChecksum",
                    "imageSize",
                    "personalityId",
                    "personalityName",
                    "softwareInfo",
                    "version",
                    "vsphereExportedIsoPath",
                    "vsphereExportedJsonPath",
                    "vsphereExportedZipPath"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "Personality Version",
                        "readOnly": true
                    },
                    "personalityId": {
                        "type": "string",
                        "description": "Personality id",
                        "readOnly": true
                    },
                    "personalityName": {
                        "pattern": "^[a-zA-Z\\d\\-]{3,20}$",
                        "type": "string",
                        "description": "Personality name",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Personality description",
                        "readOnly": true,
                        "example": "ESXi 7.0 Dell Personality"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "Personality created by",
                        "readOnly": true
                    },
                    "imageSize": {
                        "type": "string",
                        "description": "Personality image size",
                        "readOnly": true
                    },
                    "imageChecksum": {
                        "type": "string",
                        "description": "Personality image checksum",
                        "readOnly": true
                    },
                    "vsphereExportedZipPath": {
                        "type": "string",
                        "description": "Personality depot path",
                        "readOnly": true
                    },
                    "vsphereExportedIsoPath": {
                        "type": "string",
                        "description": "Personality depot path",
                        "readOnly": true
                    },
                    "vsphereExportedJsonPath": {
                        "type": "string",
                        "description": "Personality depot path",
                        "readOnly": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Personality displayName",
                        "readOnly": true,
                        "example": "ESXi 7.0 Dell Personality"
                    },
                    "releaseDate": {
                        "type": "string",
                        "description": "Personality Release date",
                        "readOnly": true,
                        "deprecated": true
                    },
                    "importTimestamp": {
                        "type": "string",
                        "description": "Timestamp of Personality import into SDDC Manager",
                        "readOnly": true
                    },
                    "tags": {
                        "type": "array",
                        "description": "Personality tags",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "Personality tags",
                            "readOnly": true
                        }
                    },
                    "kbArticles": {
                        "type": "string",
                        "description": "Personality kb articles",
                        "readOnly": true
                    },
                    "softwareInfo": {
                        "$ref": "#/components/schemas/SoftwareInfo"
                    }
                },
                "description": "Personality contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
            },
            "NetworkPoolUpdateSpec": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 80,
                        "minLength": 3,
                        "type": "string",
                        "description": "Name of the Network Pool"
                    }
                },
                "description": "Network Pool update data"
            },
            "LicenseKeyUpdateSpec": {
                "required": [
                    "description"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "String for updating the description of the license key",
                        "readOnly": true
                    }
                },
                "description": "Spec for updating a license key"
            },
            "CertificateOperationSpec": {
                "required": [
                    "operationType"
                ],
                "type": "object",
                "properties": {
                    "operationType": {
                        "type": "string",
                        "description": "The Certificates operation type",
                        "example": "One among: INSTALL"
                    },
                    "resources": {
                        "type": "array",
                        "description": "Resource(s) in a domain",
                        "items": {
                            "$ref": "#/components/schemas/Resource"
                        }
                    }
                },
                "description": "This specification contains certificate operation request details"
            },
            "HealthCheckSpec": {
                "required": [
                    "id",
                    "name",
                    "resourceType",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Health Check id"
                    },
                    "name": {
                        "type": "string",
                        "description": "Health Check name"
                    },
                    "status": {
                        "type": "string",
                        "description": "Health check status"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Resource Type"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Name of the resource, if the ResourceType is CLUSTER, then the resourceName == ClusterName"
                    }
                },
                "description": "HealthCheck"
            },
            "HealthCheckTask": {
                "required": [
                    "id",
                    "resourceStatus",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Health Check task id"
                    },
                    "status": {
                        "type": "string",
                        "description": "Health Check task status"
                    },
                    "resourceStatus": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Health Check resource status"
                        },
                        "description": "Health Check resource status"
                    }
                },
                "description": "HealthCheckTask"
            },
            "AutoRotateCredentialPolicyInputSpec": {
                "required": [
                    "enableAutoRotatePolicy"
                ],
                "type": "object",
                "properties": {
                    "frequencyInDays": {
                        "type": "integer",
                        "description": "Frequency in days",
                        "format": "int32"
                    },
                    "enableAutoRotatePolicy": {
                        "type": "boolean",
                        "description": " Enable or disable  auto rotate policy"
                    }
                },
                "description": "Represents password auto rotate config details"
            },
            "BaseCredential": {
                "required": [
                    "username"
                ],
                "type": "object",
                "properties": {
                    "credentialType": {
                        "type": "string",
                        "description": "Credential type",
                        "example": "One among: SSO, SSH, API, FTP, AUDIT"
                    },
                    "accountType": {
                        "type": "string",
                        "description": "Account type",
                        "example": "One among: USER, SYSTEM, SERVICE"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password"
                    }
                },
                "description": "Represents credentials of a resource in the system"
            },
            "CredentialsUpdateSpec": {
                "required": [
                    "elements",
                    "operationType"
                ],
                "type": "object",
                "properties": {
                    "operationType": {
                        "type": "string",
                        "description": "Operation type",
                        "example": "One among: UPDATE, ROTATE, REMEDIATE, UPDATE_AUTO_ROTATE_POLICY"
                    },
                    "elements": {
                        "type": "array",
                        "description": "List of resource credentials to be changed",
                        "items": {
                            "$ref": "#/components/schemas/ResourceCredentials"
                        }
                    },
                    "autoRotatePolicy": {
                        "$ref": "#/components/schemas/AutoRotateCredentialPolicyInputSpec"
                    }
                },
                "description": "This specification contains password operation request details"
            },
            "ResourceCredentials": {
                "required": [
                    "credentials",
                    "resourceType"
                ],
                "type": "object",
                "properties": {
                    "resourceName": {
                        "type": "string",
                        "description": "Resource name"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "Resource ID"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Authenticated Resource Type",
                        "example": "One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, NSX_ALB, BACKUP"
                    },
                    "credentials": {
                        "type": "array",
                        "description": "Credentials of the resource",
                        "items": {
                            "$ref": "#/components/schemas/BaseCredential"
                        }
                    }
                },
                "description": "Represents a resource along with its list of credentials to be changed."
            },
            "BundleDownloadSpec": {
                "type": "object",
                "properties": {
                    "scheduledTimestamp": {
                        "type": "string",
                        "description": "Bundle Download Scheduled Time"
                    },
                    "downloadNow": {
                        "type": "boolean",
                        "description": "Flag for enabling Download Now. If true, scheduledTimestamp is ignored"
                    },
                    "cancelNow": {
                        "type": "boolean",
                        "description": "Flag for cancelling the download. If true, scheduledTimestamp/downloadNow is ignored"
                    }
                },
                "description": "Bundle Download Specification. This specification gets used in the Bundle Download API"
            },
            "BundleUpdateSpec": {
                "type": "object",
                "properties": {
                    "bundleDownloadSpec": {
                        "$ref": "#/components/schemas/BundleDownloadSpec"
                    },
                    "compatibilitySetsFilePath": {
                        "type": "string",
                        "description": "[Deprecated] Path to the software compatibility sets file",
                        "deprecated": true
                    }
                },
                "description": "Bundle Update Specification"
            },
            "PageOfWsa": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Wsa"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "VrealizeProductNode": {
                "required": [
                    "fqdn",
                    "ipAddress"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the node",
                        "readOnly": true
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The Fully Qualified Domain Name for the VMware Aria node (virtual appliance)",
                        "example": "vrealize.node.vrack.vsphere.local"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the VMware Aria product node",
                        "example": "MASTER, REPLICA, DATA, REMOTE_COLLECTOR, WORKER",
                        "enum": [
                            "MASTER",
                            "REPLICA",
                            "DATA",
                            "REMOTE_COLLECTOR",
                            "WORKER"
                        ]
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP Address of VMware Aria product appliance",
                        "readOnly": true,
                        "example": "10.0.0.17"
                    }
                },
                "description": "Spec contains information for a VMware Aria product node",
                "readOnly": true
            },
            "Wsa": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Workspace ONE Access instance",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the Workspace ONE Access instance",
                        "readOnly": true,
                        "example": "8.1.0-13036238"
                    },
                    "loadBalancerFqdn": {
                        "type": "string",
                        "description": "The Fully Qualified Domain Name of the Workspace ONE Access load balancer",
                        "readOnly": true,
                        "example": "wsa-lb.vrack.vsphere.local"
                    },
                    "loadBalancerIpAddress": {
                        "type": "string",
                        "description": "The IP address of the Workspace ONE Access load balancer",
                        "readOnly": true,
                        "example": "10.0.0.15"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Workspace ONE Access instance",
                        "readOnly": true,
                        "example": "ACTIVE, ERROR"
                    },
                    "nodes": {
                        "type": "array",
                        "description": "The nodes of the Workspace ONE Access instance",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/VrealizeProductNode"
                        }
                    }
                },
                "description": "Spec contains parameters of a VMware Aria Automation instance",
                "readOnly": true
            },
            "VsanHclAttributes": {
                "required": [
                    "localDataTimestamp",
                    "remoteDataTimestamp"
                ],
                "type": "object",
                "properties": {
                    "remoteDataTimestamp": {
                        "type": "integer",
                        "description": "Timestamp of vSAN HCL data (in seconds) from remote vSAN HCL service as determined by periodic polling",
                        "format": "int64",
                        "readOnly": true
                    },
                    "localDataTimestamp": {
                        "type": "integer",
                        "description": "Timestamp of vSAN HCL data (in seconds) saved on SDDC Manager",
                        "format": "int64",
                        "readOnly": true
                    },
                    "lastError": {
                        "type": "string",
                        "description": "Details of last error in case of failure in updating vSAN HCL data on SDDC Manager"
                    },
                    "isLocalDataMissing": {
                        "type": "boolean",
                        "description": "True if vSAN HCL data is missing on SDDC Manager"
                    },
                    "isNewDataAvailable": {
                        "type": "boolean",
                        "description": "True if timestamp of vSAN HCL data on SDDC Manager is older than timestamp fetched via periodic polling"
                    },
                    "isWarningThresholdExceeded": {
                        "type": "boolean",
                        "description": "True if age of vSAN HCL data on SDDC Manager is older than threshold set for warning level"
                    },
                    "isErrorThresholdExceeded": {
                        "type": "boolean",
                        "description": "True if age of vSAN HCL data on SDDC Manager is older than threshold set for error level"
                    },
                    "localDataTime": {
                        "type": "string",
                        "description": "Last update time of vSAN HCL data in SDDC Manager"
                    }
                },
                "description": "Represents attributes of vSAN HCL data"
            },
            "PageOfVrslcm": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Vrslcm"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "VrslcmOperationStatus": {
                "required": [
                    "name",
                    "operationState"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Unique name identifier of the supported VMware Aria Suite Lifecycle operation",
                        "readOnly": true
                    },
                    "operationState": {
                        "type": "string",
                        "description": "The status of the operation for VMware Aria Suite Lifecycle in SDDC Manager",
                        "readOnly": true,
                        "example": "One among: IN_PROGRESS, AVAILABLE, NOT_AVAILABLE, ERROR"
                    },
                    "errorCode": {
                        "type": "string",
                        "description": "Code used to describe if operation is not available (in error state)",
                        "readOnly": true,
                        "example": "One among: VRSLCM_NOT_DEPLOYED, VRSLCM_UPGRADE_FAILED, VRSLCM_FAILED, AVN_NOT_CREATED, NSXT_MANAGER_NOT_AVAILABLE, BUNDLE_DOWNLOAD"
                    },
                    "message": {
                        "type": "string",
                        "description": "Message representing the outcome of the last VMware Aria Suite Lifecycle operation",
                        "readOnly": true
                    }
                },
                "description": "This specification contains information about the current status of certain (i.e. rollback, deployment) operation for VMware Aria Suite Lifecycle"
            },
            "VrslcmStatus": {
                "required": [
                    "state"
                ],
                "type": "object",
                "properties": {
                    "state": {
                        "type": "string",
                        "description": "The overall status of the VMware Aria Suite Lifecycle deployment",
                        "readOnly": true,
                        "example": "One among: NOT_DEPLOYED, ACTIVE, ERROR"
                    },
                    "operations": {
                        "type": "array",
                        "description": "A list that represent the states of the executable operations in SDDC Manager (i.e. 'deploy' and 'rollback').",
                        "items": {
                            "$ref": "#/components/schemas/VrslcmOperationStatus"
                        }
                    }
                },
                "description": "This specification contains information about the current status of VMware Aria Suite Lifecycle deployment"
            },
            "PageOfVrops": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Vrops"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "Vrops": {
                "required": [
                    "id",
                    "loadBalancerFqdn",
                    "loadBalancerIp",
                    "nodes",
                    "status",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the VMware Aria Operations instance",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the VMware Aria Operations instance",
                        "readOnly": true
                    },
                    "nodes": {
                        "type": "array",
                        "description": "The nodes of the VMware Aria Operations instance",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/VropsNode"
                        }
                    },
                    "loadBalancerFqdn": {
                        "type": "string",
                        "description": "Fully Qualified Domain Name for the VMware Aria Operations load balancer ",
                        "readOnly": true
                    },
                    "loadBalancerIp": {
                        "type": "string",
                        "description": "IP for the VMware Aria Operations load balancer ",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The state of the current product instance",
                        "readOnly": true
                    }
                },
                "description": "This specification contains information related to the existing VMware Aria Operations instance deployment",
                "readOnly": true
            },
            "VropsNode": {
                "required": [
                    "fqdn",
                    "ipAddress",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username for a root user of VMware Aria appliance",
                        "readOnly": true,
                        "example": "user"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for a root user of VMware Aria appliance"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the VMware Aria product node",
                        "readOnly": true,
                        "example": "ACTIVE"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the node",
                        "readOnly": true
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The Fully Qualified Domain Name for the VMware Aria node (virtual appliance)",
                        "example": "vrealize.node.vrack.vsphere.local"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the VMware Aria product node",
                        "example": "MASTER, REPLICA, DATA, REMOTE_COLLECTOR, WORKER",
                        "enum": [
                            "MASTER",
                            "REPLICA",
                            "DATA",
                            "REMOTE_COLLECTOR",
                            "WORKER"
                        ]
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP Address of VMware Aria product appliance",
                        "readOnly": true,
                        "example": "10.0.0.17"
                    }
                },
                "description": "Spec contains information for a VMware Aria product node",
                "readOnly": true
            },
            "PageOfDomainIntegration": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/DomainIntegration"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfVrli": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Vrli"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "Vrli": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the VMware Aria Operations for Logs instance",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the VMware Aria Operations for Logs instance",
                        "readOnly": true,
                        "example": "4.8.0-13036238"
                    },
                    "loadBalancerFqdn": {
                        "type": "string",
                        "description": "The Fully Qualified Domain Name of the VMware Aria Operations for Logs load balancer",
                        "readOnly": true,
                        "example": "load-balancer.vrack.vsphere.local"
                    },
                    "loadBalancerIpAddress": {
                        "type": "string",
                        "description": "The IP address of the VMware Aria Operations for Logs load balancer",
                        "readOnly": true,
                        "example": "10.0.0.15"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the VMware Aria Operations for Logs instance",
                        "readOnly": true,
                        "example": "ACTIVE, ERROR"
                    },
                    "nodes": {
                        "type": "array",
                        "description": "The nodes of the VMware Aria Operations for Logs instance",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/VrealizeProductNode"
                        }
                    }
                },
                "description": "Spec contains parameters of a VMware Aria Operations for Logs instance",
                "readOnly": true
            },
            "PageOfVra": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Vra"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "Vra": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the VMware Aria Automation instance",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the VMware Aria Automation instance",
                        "readOnly": true,
                        "example": "8.1.0-13036238"
                    },
                    "loadBalancerFqdn": {
                        "type": "string",
                        "description": "The Fully Qualified Domain Name of the VMware Aria Automation load balancer",
                        "readOnly": true,
                        "example": "vra-lb.vrack.vsphere.local"
                    },
                    "loadBalancerIpAddress": {
                        "type": "string",
                        "description": "The IP address of the VMware Aria Automation load balancer",
                        "readOnly": true,
                        "example": "10.0.0.15"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the VMware Aria Automation instance",
                        "readOnly": true,
                        "example": "ACTIVE, ERROR"
                    },
                    "nodes": {
                        "type": "array",
                        "description": "The nodes of the VMware Aria Automation instance",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/VrealizeProductNode"
                        }
                    }
                },
                "description": "Spec contains parameters of a VMware Aria Automation instance",
                "readOnly": true
            },
            "PageOfVcfService": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/VcfService"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "VcfService": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the service"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the service"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the service"
                    }
                },
                "description": "VCF service representation"
            },
            "PageOfVcenter": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Vcenter"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "Vcenter": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the vCenter",
                        "readOnly": true
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN of the vCenter",
                        "readOnly": true
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP address of the vCenter",
                        "readOnly": true
                    },
                    "domain": {
                        "$ref": "#/components/schemas/DomainReference"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the vCenter",
                        "readOnly": true
                    }
                },
                "description": "vCenter representation"
            },
            "PageOfVasaProvider": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/VasaProvider"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "LocalUser": {
                "required": [
                    "name",
                    "role",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "isConfigured": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not local account is configured",
                        "readOnly": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the user"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of the user"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the user",
                        "example": "One among: USER, GROUP, SERVICE"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "The API key of the user"
                    },
                    "role": {
                        "$ref": "#/components/schemas/RoleReference"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "The timestamp at which the user was created"
                    }
                },
                "description": "Represents Local User and its attributes"
            },
            "PageOfUpgrade": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Upgrade"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfUpgradable": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Upgradable"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "SoftwareComponent": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of Resource/Software Component",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Resource/Software Component",
                        "readOnly": true
                    }
                },
                "description": "Software Components which are Upgradable",
                "readOnly": true
            },
            "Upgradable": {
                "type": "object",
                "properties": {
                    "bundleId": {
                        "type": "string",
                        "description": "Bundle ID",
                        "readOnly": true
                    },
                    "bundleType": {
                        "type": "string",
                        "description": "Bundle Type",
                        "readOnly": true
                    },
                    "resource": {
                        "$ref": "#/components/schemas/Resource"
                    },
                    "softwareComponents": {
                        "type": "array",
                        "description": "Software Components which are Upgradable",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SoftwareComponent"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "Upgradable Status",
                        "readOnly": true
                    },
                    "errors": {
                        "type": "array",
                        "description": "Upgradable Errors found during computation of upgrade availabiltiy.",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                },
                "description": "Upgradable represents the upgrade capability of resources. It contains the bundle(using what), resource(on which) and its associated resources/software components that can be upgraded.",
                "readOnly": true
            },
            "HardwareSupportPackage": {
                "required": [
                    "name",
                    "pkg"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Hardware Support Manager name"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Hardware Support Manager display name"
                    },
                    "pkg": {
                        "$ref": "#/components/schemas/Package"
                    }
                },
                "description": "Hardware Support Specification for Firmware Upgrade"
            },
            "HardwareSupportPackages": {
                "required": [
                    "displayName",
                    "name",
                    "packages"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Hardware Support Manager name"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Hardware Support Manager display name"
                    },
                    "packages": {
                        "type": "array",
                        "description": "Hardware Support Packages",
                        "items": {
                            "$ref": "#/components/schemas/Package"
                        }
                    }
                },
                "description": "Available Hardware Support Manager details"
            },
            "NsxtEdgeCluster": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Edge cluster id"
                    },
                    "name": {
                        "type": "string",
                        "description": "Edge cluster name"
                    },
                    "upgradeStatus": {
                        "type": "string",
                        "description": "Upgrade status with respect to the bundle"
                    },
                    "resourceHealth": {
                        "type": "string",
                        "description": "Current resource health status"
                    },
                    "version": {
                        "type": "string",
                        "description": "The current version of the edge cluster.If a partial upgrade is done, this will be the least version among the edges in the edge cluster"
                    }
                },
                "description": "NSX Edge Cluster Upgrade Resource"
            },
            "NsxtHostCluster": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Host cluster VCF cluster id"
                    },
                    "name": {
                        "type": "string",
                        "description": "Cluster name"
                    },
                    "upgradeStatus": {
                        "type": "string",
                        "description": "Upgrade status with respect to the bundle"
                    },
                    "resourceHealth": {
                        "type": "string",
                        "description": "Current resource health status"
                    },
                    "upgradedUnits": {
                        "type": "integer",
                        "description": "Number of hosts which are already upgraded",
                        "format": "int32"
                    },
                    "totalUnits": {
                        "type": "integer",
                        "description": "Total number of hosts in the Host cluster",
                        "format": "int32"
                    },
                    "domainId": {
                        "type": "string",
                        "description": "Id of the domain the Host cluster belongs to"
                    },
                    "version": {
                        "type": "string",
                        "description": "The current version of the host node cluster.If a partial upgrade is done, this will be the least version among the hosts"
                    },
                    "primaryCluster": {
                        "type": "boolean",
                        "description": "Flag to determine if primary cluster for vLCM"
                    },
                    "vLcmEnabled": {
                        "type": "boolean",
                        "description": "Flag to determine if vLCM enabled on the cluster"
                    },
                    "configuredHardwareSupportManagers": {
                        "type": "array",
                        "description": "Configured Hardware Support Managers for Firmware upgrade",
                        "items": {
                            "$ref": "#/components/schemas/HardwareSupportPackage"
                        }
                    },
                    "availableHardwareSupportManagers": {
                        "type": "array",
                        "description": "Available Hardware Support Managers for Firmware upgrade",
                        "items": {
                            "$ref": "#/components/schemas/HardwareSupportPackages"
                        }
                    },
                    "nsxtComponentId": {
                        "type": "string",
                        "description": "Nsxt Component native id of the nsxt host cluster"
                    }
                },
                "description": "NSX Host Cluster Upgrade Resource"
            },
            "NsxtManagerCluster": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Manager cluster id"
                    },
                    "name": {
                        "type": "string",
                        "description": "Manager cluster name"
                    },
                    "upgradeStatus": {
                        "type": "string",
                        "description": "Upgrade status with respect to the bundle"
                    },
                    "resourceHealth": {
                        "type": "string",
                        "description": "Current resource health status"
                    },
                    "version": {
                        "type": "string",
                        "description": "The current version of the manager cluster.If a partial upgrade is done, this will be the least version among the managers in the manager cluster"
                    }
                },
                "description": "Nsx Manager Cluster Upgrade Resource"
            },
            "NsxtResources": {
                "type": "object",
                "properties": {
                    "nsxtHostClusters": {
                        "type": "array",
                        "description": "List of host clusters that are candidates for upgrade",
                        "items": {
                            "$ref": "#/components/schemas/NsxtHostCluster"
                        }
                    },
                    "nsxtEdgeClusters": {
                        "type": "array",
                        "description": "List of edge clusters that are candidates for upgrade",
                        "items": {
                            "$ref": "#/components/schemas/NsxtEdgeCluster"
                        }
                    },
                    "nsxtManagerCluster": {
                        "$ref": "#/components/schemas/NsxtManagerCluster"
                    },
                    "nsxtUpgradeCoordinator": {
                        "$ref": "#/components/schemas/NsxtUpgradeCoordinator"
                    },
                    "bundleId": {
                        "type": "string",
                        "description": "Bundle id used to compute the upgradability"
                    },
                    "domainId": {
                        "type": "string",
                        "description": "Domain id associated with the NSX cluster"
                    }
                },
                "description": "NSX Upgrade Resources for an NSX instance"
            },
            "NsxtUpgradeCoordinator": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Upgrade coordinator id"
                    },
                    "upgradeStatus": {
                        "type": "string",
                        "description": "Upgrade status with respect to the bundle"
                    },
                    "resourceHealth": {
                        "type": "string",
                        "description": "Current resource health status"
                    },
                    "version": {
                        "type": "string",
                        "description": "The current version of the UC"
                    },
                    "enabledOn": {
                        "type": "string",
                        "description": "The IP of the manager on which UC is enabled"
                    }
                },
                "description": "NSX Upgrade coordinator Upgrade Resource"
            },
            "Package": {
                "required": [
                    "name",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Package name"
                    },
                    "version": {
                        "type": "string",
                        "description": "Package version"
                    }
                },
                "description": "Hardware Support Package Specification"
            },
            "PageOfUpgradablesClusterResource": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of Upgradables Cluster Resource elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/UpgradablesClusterResource"
                        }
                    }
                },
                "description": "Represents a page of elements of a Upgradables Cluster Resource"
            },
            "UpgradablesClusterResource": {
                "required": [
                    "resourceId",
                    "resourceType"
                ],
                "type": "object",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "Resource Id"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Resource Type",
                        "example": "CLUSTER"
                    },
                    "primaryCluster": {
                        "type": "boolean",
                        "description": "Flag for primary cluster"
                    },
                    "softwareInfo": {
                        "$ref": "#/components/schemas/SoftwareInfo"
                    },
                    "vlcmEnabled": {
                        "type": "boolean",
                        "description": "Flag to determine if vLCM enabled on the cluster"
                    },
                    "configuredHardwareSupportManagers": {
                        "type": "array",
                        "description": "Configured Hardware Support Managers for Firmware upgrade",
                        "items": {
                            "$ref": "#/components/schemas/HardwareSupportPackage"
                        }
                    },
                    "availableHardwareSupportManagers": {
                        "type": "array",
                        "description": "Available Hardware Support Managers for Firmware upgrade",
                        "items": {
                            "$ref": "#/components/schemas/HardwareSupportPackages"
                        }
                    }
                },
                "description": "Upgradables clusters details with hardware support managers",
                "readOnly": true
            },
            "PageOfTask": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Task"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "System": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier of the system",
                        "readOnly": true
                    },
                    "maxAllowedDomainsInSubscription": {
                        "type": "integer",
                        "description": "The maximum number of domains allowed in subscription mode",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "description": "Represents a system"
            },
            "PageOfSupportBundle": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SupportBundle"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "Fips": {
                "required": [
                    "enabled"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "VCF FIPS mode status",
                        "readOnly": true
                    }
                },
                "description": "Represents VCF FIPS mode status (enabled/disabled)"
            },
            "PageOfHealthSummary": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/HealthSummary"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "AssessmentMetadata": {
                "type": "object",
                "properties": {
                    "targetVersion": {
                        "type": "string",
                        "description": "Version of target state definitions that is going to be used for assessment",
                        "example": "5.0.0.0"
                    },
                    "resources": {
                        "type": "array",
                        "description": "Resources of target state definitions that is going to be used for assessment",
                        "items": {
                            "$ref": "#/components/schemas/AssessmentResource"
                        }
                    },
                    "upgradeId": {
                        "type": "string",
                        "description": "Upgrade Id for the configure upgrade precheck"
                    }
                },
                "description": "Metadata about the assessment run that is triggered and passed to the result"
            },
            "AssessmentResource": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the resource"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the resource"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource"
                    },
                    "domainId": {
                        "type": "string",
                        "description": "Domain ID of the resource"
                    },
                    "targetVersion": {
                        "type": "string",
                        "description": "Target upgrade version for the resource"
                    }
                },
                "description": "Resource information for the assessment"
            },
            "AssessmentTaskInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the assessment run"
                    },
                    "state": {
                        "type": "string",
                        "description": "The related task state of the run associated to the given result"
                    },
                    "timestamp": {
                        "type": "integer",
                        "description": "Timestamp corresponding to the time when the assessment was initiated",
                        "format": "int64"
                    },
                    "completionTimestamp": {
                        "type": "integer",
                        "description": "Timestamp corresponding to the time when the assessment was finished",
                        "format": "int64"
                    },
                    "domainInputs": {
                        "type": "array",
                        "description": "The domains that have been assessed in the run associated to the given result",
                        "items": {
                            "$ref": "#/components/schemas/DomainInfo"
                        }
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/AssessmentMetadata"
                    }
                },
                "description": "A summary of an assessment execution"
            },
            "AssessmentOutput": {
                "type": "object",
                "properties": {
                    "physicalPresentedData": {
                        "$ref": "#/components/schemas/EntityRest"
                    },
                    "presentedArtifactsMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "description": "Extra assessment artefacts produced by the workflow"
                        },
                        "description": "Extra assessment artefacts produced by the workflow"
                    },
                    "validationResult": {
                        "$ref": "#/components/schemas/Error"
                    },
                    "status": {
                        "type": "string",
                        "description": "Execution status",
                        "enum": [
                            "IN_PROGRESS",
                            "COMPLETED_WITH_SUCCESS",
                            "COMPLETED_WITH_FAILURE"
                        ]
                    },
                    "inputValidationErrors": {
                        "type": "array",
                        "description": "Set of the input validation errors",
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "discoveryProgress": {
                        "$ref": "#/components/schemas/DiscoveryProgress"
                    },
                    "relatedAssessmentId": {
                        "type": "string",
                        "description": "Related assessment run id"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Assessment task creation timestamp",
                        "readOnly": true
                    },
                    "completionTimestamp": {
                        "type": "string",
                        "description": "Assessment task completion timestamp",
                        "readOnly": true
                    }
                },
                "description": "Result from the baseliner assessment run (execution result, presented artifacts or ask for extra info)."
            },
            "Classification": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the classification, e.g. domainType"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the classification, e.g. MGMT_DOMAIN"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the classification"
                    },
                    "source": {
                        "type": "string",
                        "description": "Source of the classification",
                        "enum": [
                            "CLASSIFIER",
                            "USER_INPUT",
                            "INHERITED"
                        ]
                    }
                },
                "description": "Describes the source of the classification,classification can be acquired by a classifier, user input or inherited from a parent entity."
            },
            "DiscoveryProgress": {
                "type": "object",
                "properties": {
                    "progressMessages": {
                        "type": "array",
                        "description": "Progress messages",
                        "items": {
                            "type": "string",
                            "description": "Progress messages"
                        }
                    },
                    "percentageComplete": {
                        "type": "integer",
                        "description": "Percentage completed",
                        "format": "int32"
                    }
                },
                "description": "Information about the assessment run progress."
            },
            "EntityRest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the entity"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the entity"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the entity"
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "description": "Properties for this entity"
                        },
                        "description": "Properties for this entity"
                    },
                    "childEntities": {
                        "type": "array",
                        "description": "Child entities of this entity",
                        "items": {
                            "$ref": "#/components/schemas/EntityRest"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the entity"
                    },
                    "sourceAddress": {
                        "type": "string",
                        "description": "The address of the source"
                    },
                    "classifications": {
                        "type": "array",
                        "description": "Classifications of the entity",
                        "items": {
                            "$ref": "#/components/schemas/Classification"
                        }
                    }
                },
                "description": "Entity model representing the physical data output of the assessment workflow."
            },
            "Ceip": {
                "required": [
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "CEIP status",
                        "example": "One among: ENABLED, DISABLED, ENABLING, DISABLING, ENABLING_FAILED, DISABLING_FAILED"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Instance Id of VCF",
                        "readOnly": true,
                        "example": "3f39d4a1-78d2-11e8-af85-f1cf26258cdc"
                    }
                },
                "description": "Defines VCF CEIP status and instance id"
            },
            "BackupConfiguration": {
                "type": "object",
                "properties": {
                    "encryption": {
                        "$ref": "#/components/schemas/Encryption"
                    },
                    "backupLocations": {
                        "type": "array",
                        "description": "List of backup locations",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/BackupLocation"
                        }
                    },
                    "backupSchedules": {
                        "type": "array",
                        "description": "List of backup schedules",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/BackupSchedule"
                        }
                    },
                    "isConfigured": {
                        "type": "boolean",
                        "description": "Backup configuration status of both FTP server and passphrase ",
                        "readOnly": true
                    }
                },
                "description": "Backup configuration used to configure backup of NSX and SDDC manager"
            },
            "PageOfString": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "The list of elements included in this page",
                            "readOnly": true
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfSsoDomainEntity": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SsoDomainEntity"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "SsoDomainEntity": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the SSO domain entity",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSO domain entity",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the SSO domain entity",
                        "readOnly": true,
                        "example": "One among: USER, GROUP"
                    }
                },
                "description": "Represents SSO domain entity",
                "readOnly": true
            },
            "PageOfSddcTask": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SddcTask"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "SddcManagerInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the SDDC Manager"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN of the SDDC Manager"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the SDDC Manager",
                        "readOnly": true
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP Address of the SDDC Manager"
                    }
                },
                "description": "SDDC Manager Information"
            },
            "PageOfValidation": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Validation"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "BasicAuthDetails": {
                "required": [
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Basic auth status",
                        "example": "One among: ENABLED, DISABLED"
                    },
                    "username": {
                        "type": "string",
                        "description": "Basic auth username",
                        "readOnly": true
                    }
                },
                "description": "Basic auth details"
            },
            "PageOfSddcManager": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SddcManager"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "SddcManager": {
                "type": "object",
                "properties": {
                    "domain": {
                        "$ref": "#/components/schemas/DomainReference"
                    },
                    "basicAuthDetails": {
                        "$ref": "#/components/schemas/BasicAuthDetails"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the SDDC Manager"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN of the SDDC Manager"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the SDDC Manager",
                        "readOnly": true
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP Address of the SDDC Manager"
                    }
                },
                "description": "SDDC Manager representation"
            },
            "History": {
                "type": "object",
                "properties": {
                    "versions": {
                        "type": "array",
                        "description": "The list of version change",
                        "items": {
                            "$ref": "#/components/schemas/Version"
                        }
                    }
                },
                "description": "Represents version change history for a resource"
            },
            "BundleDownload": {
                "type": "object",
                "properties": {
                    "downloadId": {
                        "type": "string",
                        "description": "Uniquely identity a download",
                        "readOnly": true
                    },
                    "bundleId": {
                        "type": "string",
                        "description": "Bundle id associated with this download",
                        "readOnly": true
                    },
                    "scheduledTime": {
                        "type": "integer",
                        "description": "The scheduled time when the download to start",
                        "format": "int64",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Bundle download status",
                        "readOnly": true,
                        "enum": [
                            "PENDING,SCHEDULED,INPROGRESS,SUCCESS,FAILED;"
                        ]
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "The actual start download time",
                        "format": "int64",
                        "readOnly": true
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "The actual end download time",
                        "format": "int64",
                        "readOnly": true
                    },
                    "downloadError": {
                        "$ref": "#/components/schemas/DownloadBundleError"
                    }
                },
                "description": "Represents a download record of a bundle. A bundle may be associated with multiple downloads if previous downloads failed",
                "readOnly": true
            },
            "DownloadBundleError": {
                "type": "object",
                "properties": {
                    "errorCode": {
                        "type": "string",
                        "description": "Error code",
                        "readOnly": true
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Error message",
                        "readOnly": true
                    },
                    "stackTraceStr": {
                        "type": "string",
                        "description": "Exception stack trace string",
                        "readOnly": true
                    },
                    "retriable": {
                        "type": "boolean",
                        "description": "Error is retriable",
                        "readOnly": true
                    }
                },
                "description": "Describe a download error",
                "readOnly": true
            },
            "DownloadProgressIndicator": {
                "type": "object",
                "properties": {
                    "downloadedBytes": {
                        "type": "integer",
                        "description": "Number of bytes downloaded",
                        "format": "int64",
                        "readOnly": true
                    },
                    "isDownloadCancelled": {
                        "type": "boolean",
                        "description": "is download cancelled",
                        "readOnly": true
                    }
                },
                "description": "Download progress indicator",
                "readOnly": true
            },
            "PageOfSddcManagerUpgradable": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SddcManagerUpgradable"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "SddcManagerBundle": {
                "required": [
                    "downloadStatus",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Bundle ID",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Bundle Type",
                        "readOnly": true,
                        "example": "One among: SDDC_MANAGER, VMWARE_SOFTWARE, VXRAIL"
                    },
                    "description": {
                        "type": "string",
                        "description": "Bundle Description",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Bundle Version",
                        "readOnly": true
                    },
                    "vendor": {
                        "type": "string",
                        "description": "Bundle Vendor",
                        "readOnly": true
                    },
                    "releasedDate": {
                        "type": "string",
                        "description": "Bundle Release Date",
                        "readOnly": true
                    },
                    "isCumulative": {
                        "type": "boolean",
                        "description": "Is Bundle Cumulative",
                        "readOnly": true
                    },
                    "sizeMB": {
                        "type": "number",
                        "description": "Bundle Size in MB",
                        "format": "double",
                        "readOnly": true
                    },
                    "downloadStatus": {
                        "type": "string",
                        "description": "Bundle Download Status",
                        "readOnly": true,
                        "example": "One among: PENDING, AVAILABLE, SCHEDULED, INPROGRESS, VALIDATING, SUCCESS, CANCELLED, FAILED, RECALLED"
                    },
                    "downloadProgress": {
                        "$ref": "#/components/schemas/DownloadProgressIndicator"
                    },
                    "downloadStartTime": {
                        "type": "integer",
                        "description": "Bundle download start time",
                        "format": "int64"
                    },
                    "downloadEndTime": {
                        "type": "integer",
                        "description": "Bundle download end time",
                        "format": "int64"
                    },
                    "bundleDownload": {
                        "$ref": "#/components/schemas/BundleDownload"
                    }
                },
                "description": "SDDC Manager Bundle consists the bits to perform the upgrade of an SDDC Manager",
                "readOnly": true
            },
            "SddcManagerUpgradable": {
                "required": [
                    "compatibilityStatus"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "SDDC Manager Release Description",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "SDDC Manager Release Version",
                        "readOnly": true
                    },
                    "releaseDate": {
                        "type": "string",
                        "description": "SDDC Manager Release Date",
                        "readOnly": true
                    },
                    "applicabilityStatus": {
                        "type": "string",
                        "description": "SDDC Manager Release Applicability Status",
                        "readOnly": true
                    },
                    "compatibilityStatus": {
                        "type": "string",
                        "description": "SDDC Manager Release Compatibility Status",
                        "readOnly": true,
                        "example": "One among: COMPATIBLE, INCOMPATIBLE, DISABLED"
                    },
                    "errors": {
                        "type": "array",
                        "description": "SDDC Manager Release in-applicability reasons",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/MessagePack"
                        }
                    },
                    "warnings": {
                        "type": "array",
                        "description": "SDDC Manager Release applicable with warnings reasons",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/MessagePack"
                        }
                    },
                    "sddcManagerBundle": {
                        "$ref": "#/components/schemas/SddcManagerBundle"
                    },
                    "upgrade": {
                        "$ref": "#/components/schemas/Upgrade"
                    }
                },
                "description": "SDDC Manager Upgradable consists of release information, bits and the upgrade information  to upgrade SDDC Manager on the system.",
                "readOnly": true
            },
            "LocalOsUserAccount": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username of the local OS account"
                    },
                    "lastPasswordChange": {
                        "type": "string",
                        "description": "The date and time when the user last changed their password"
                    },
                    "passwordExpiresAt": {
                        "type": "string",
                        "description": "The date and time when the user's password will expire"
                    },
                    "passwordInactiveAt": {
                        "type": "string",
                        "description": "The date and time when the user's password becomes inactive"
                    },
                    "accountExpiresAt": {
                        "type": "string",
                        "description": "The date and time when the user's account will expire"
                    },
                    "maxDaysBetweenPasswordChange": {
                        "type": "integer",
                        "description": "The maximum number of days that a user can keep the same password before being required to change it",
                        "format": "int32"
                    },
                    "minDaysBetweenPasswordChange": {
                        "type": "integer",
                        "description": "The minimum number of days that must elapse before a user can change their password again",
                        "format": "int32"
                    },
                    "warnDaysBeforePasswordExpiration": {
                        "type": "integer",
                        "description": "The number of days before the password expiration date that the user will be warned",
                        "format": "int32"
                    }
                },
                "description": "Local OS user account details"
            },
            "PageOfRole": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "Role": {
                "required": [
                    "description",
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the role",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the role",
                        "readOnly": true
                    }
                },
                "description": "Represents role and its attributes",
                "readOnly": true
            },
            "PageOfResourceWarning": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ResourceWarning"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfResourceFunctionalities": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ResourceFunctionalities"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "ResourceFunctionalitiesGlobalConfiguration": {
                "type": "object",
                "properties": {
                    "isAllowed": {
                        "type": "boolean",
                        "description": "Global flag representing if all of the VMware Cloud Foundation operations are allowed or not"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "The localized error message"
                    }
                },
                "description": "Defines a resource functionality caller specification"
            },
            "PageOfRelease": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Release"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "DomainReleaseView": {
                "required": [
                    "domainId",
                    "targetVersion"
                ],
                "type": "object",
                "properties": {
                    "domainId": {
                        "type": "string",
                        "description": "Domain ID"
                    },
                    "targetVersion": {
                        "type": "string",
                        "description": "Target upgrade version of the domain"
                    },
                    "targetVxRailVersion": {
                        "type": "string",
                        "description": "Target VxRail version"
                    },
                    "targetSddcManagerVersion": {
                        "type": "string",
                        "description": "Target SDDC Manager version"
                    },
                    "patches": {
                        "type": "array",
                        "description": "Target product release and patch versions",
                        "items": {
                            "$ref": "#/components/schemas/TargetProductVersion"
                        }
                    },
                    "isCustomizedBom": {
                        "type": "boolean",
                        "description": "Identifier for VCF Release vs Customized BOM",
                        "readOnly": true,
                        "example": true
                    }
                },
                "description": "Model for domain release view."
            },
            "PageOfDomainReleaseView": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/DomainReleaseView"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "AlternativeApplicableSddcManagerVersion": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "Version of target SDDC manger",
                        "readOnly": true
                    }
                },
                "description": "Version of Target SDDC Manager",
                "readOnly": true
            },
            "DomainFutureRelease": {
                "required": [
                    "bom",
                    "description",
                    "minCompatibleVcfVersion",
                    "product",
                    "releaseDate",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "reasonNotApplicable": {
                        "$ref": "#/components/schemas/MessagePack"
                    },
                    "reasonsNotApplicable": {
                        "type": "array",
                        "description": "List of Incompatibility details for not applicable",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/MessagePack"
                        }
                    },
                    "warnings": {
                        "type": "array",
                        "description": "List of warning messages for product compatibility",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/MessagePack"
                        }
                    },
                    "alternativeApplicableSddcManagerVersions": {
                        "type": "array",
                        "description": "List of AlternativeApplicableSddcManagerVersions",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/AlternativeApplicableSddcManagerVersion"
                        }
                    },
                    "applicabilityStatus": {
                        "type": "string",
                        "description": "Whether bundle is applicable or not.",
                        "readOnly": true,
                        "example": "One among: APPLICABLE, NOT_APPLICABLE"
                    },
                    "product": {
                        "type": "string",
                        "description": "Name of the product e.g. \"VCF\"",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the release",
                        "readOnly": true
                    },
                    "minCompatibleVcfVersion": {
                        "type": "string",
                        "description": "Minimum compatible VCF version, used to represent compatibility of SDDC Manager and VMware BOM components",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Release description with all major features. ",
                        "readOnly": true
                    },
                    "releaseDate": {
                        "type": "string",
                        "description": "Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format",
                        "readOnly": true
                    },
                    "bom": {
                        "type": "array",
                        "description": "Release bill of materials",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ProductVersion"
                        }
                    },
                    "isApplicable": {
                        "type": "boolean",
                        "description": "[Deprecated] Whether bundle is applicable or not.",
                        "readOnly": true,
                        "deprecated": true
                    },
                    "notApplicableReason": {
                        "type": "string",
                        "description": "[Deprecated] Incompatibility reason for not applicable.",
                        "readOnly": true,
                        "deprecated": true
                    },
                    "sku": {
                        "type": "array",
                        "description": "Release sku specific patch and bill of materials",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SkuBomDetails"
                        }
                    },
                    "updates": {
                        "type": "array",
                        "description": "Collection of release updates",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ReleaseUpdate"
                        }
                    },
                    "patchBundles": {
                        "type": "array",
                        "description": "List of patch bundles in this release",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/PatchBundle"
                        }
                    },
                    "eol": {
                        "type": "string",
                        "description": "Release eol information e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format",
                        "readOnly": true
                    },
                    "upgradeOrder": {
                        "type": "string",
                        "description": "Custom upgrade order. Comma separated list of components in upgrade order. Supported components types: NSX_T_MANAGER, VCENTER, ESX_HOST. ",
                        "readOnly": true
                    }
                },
                "description": "Model for releases with details if applicable to current domain version or not.",
                "readOnly": true
            },
            "PageOfDomainFutureRelease": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/DomainFutureRelease"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "FlexibleProductPatch": {
                "required": [
                    "productType",
                    "versions"
                ],
                "type": "object",
                "properties": {
                    "productType": {
                        "type": "string",
                        "description": "product type of patch",
                        "readOnly": true
                    },
                    "versions": {
                        "type": "array",
                        "description": "supported versions of patch",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "supported versions of patch",
                            "readOnly": true
                        }
                    }
                },
                "description": "Model for product async/hot patches with their supported product versions",
                "readOnly": true
            },
            "FlexibleProductPatches": {
                "required": [
                    "patches",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "Domain VCF release version",
                        "readOnly": true
                    },
                    "patches": {
                        "type": "array",
                        "description": "List of available patches on the VCF release",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/FlexibleProductPatch"
                        }
                    }
                },
                "description": "Model for supported product async/hot patches associated with a VCF release"
            },
            "PageOfPsc": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Psc"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "Psc": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the Psc"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN of the Psc"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP Address of the Psc"
                    },
                    "ssoDomainName": {
                        "type": "string",
                        "description": "SSO Domain name of the Psc"
                    },
                    "ssoSubDomainName": {
                        "type": "string",
                        "description": "SSO sub domain name of the Psc"
                    },
                    "isReplica": {
                        "type": "boolean",
                        "description": "Indicates if the Psc is a replica"
                    },
                    "domain": {
                        "$ref": "#/components/schemas/DomainReference"
                    }
                },
                "description": "Psc representation"
            },
            "PageOfPersonality": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Personality"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfNsxTCluster": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/NsxTCluster"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "NsxtTransportZoneInfo": {
                "type": "object",
                "description": "NSX transport zone representation.",
                "readOnly": true
            },
            "PageOfNsxtTransportZoneInfo": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/NsxtTransportZoneInfo"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfNsxtIpAddressPool": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/NsxtIpAddressPool"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfNsxTCriterion": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/NsxTCriterion"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "NsxALBCluster": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the NSX Advanced Load Balancer Cluster",
                        "readOnly": true
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "Name of NSX Advanced Load Balancer Cluster",
                        "readOnly": true
                    },
                    "domains": {
                        "type": "array",
                        "description": "Collection of IDs of Workload Domains where NSX Advanced Load Balancer Cluster is deployed",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/DomainReference"
                        }
                    },
                    "nsxClusters": {
                        "type": "array",
                        "description": "Collection of IDs of the NSX where NSX Advanced Load Balancer Cluster is deployed",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/NsxTClusterReference"
                        }
                    },
                    "clusterFqdn": {
                        "type": "string",
                        "description": "NSX Advanced Load Balancer Cluster Virtual fqdn",
                        "readOnly": true
                    },
                    "clusterIpAddress": {
                        "type": "string",
                        "description": "NSX Advanced Load Balancer Cluster Virtual IPv4 address of format 'x.x.x.x'",
                        "readOnly": true
                    },
                    "clusterStatus": {
                        "type": "string",
                        "description": "NSX Advanced Load Balancer Cluster status",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "NSX Advanced Load Balancer Cluster version",
                        "readOnly": true
                    },
                    "deploymentStatus": {
                        "type": "string",
                        "description": "NSX Advanced Load Balancer Deployment Status",
                        "readOnly": true,
                        "example": "One among: ACTIVE, ACTIVATING, DEACTIVATING"
                    }
                },
                "description": "NSX ALB Cluster"
            },
            "NsxTClusterReference": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the NSX cluster",
                        "readOnly": true
                    },
                    "vipFqdn": {
                        "type": "string",
                        "description": "FQDN for VIP of the NSX cluster",
                        "readOnly": true
                    },
                    "vip": {
                        "type": "string",
                        "description": "VIP (Virtual IP Address) of the NSX cluster",
                        "readOnly": true
                    }
                },
                "description": "Represents an NSX Cluster reference"
            },
            "PageOfNsxALBCluster": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/NsxALBCluster"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "ALBControllerNodeFormFactor": {
                "type": "object",
                "properties": {
                    "disk": {
                        "type": "integer",
                        "description": "Disk size of the NSX Advanced Load Balancer controller node in Bytes",
                        "format": "int64",
                        "readOnly": true
                    },
                    "memory": {
                        "type": "integer",
                        "description": "Memory size of the NSX Advanced Load Balancer controller node in Bytes",
                        "format": "int64",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "NSX Advanced Load Balancer controller node form factor type",
                        "readOnly": true,
                        "example": "One among: LARGE, MEDIUM, SMALL"
                    },
                    "vcpu": {
                        "type": "integer",
                        "description": "Number of virtual cpus on the NSX Advanced Load Balancer controller node",
                        "format": "int64",
                        "readOnly": true
                    }
                },
                "description": "NSX ALB Cluster node form factor",
                "readOnly": true
            },
            "ALBControllerNodeFormFactors": {
                "type": "object",
                "properties": {
                    "formFactors": {
                        "type": "array",
                        "description": "List of NSX ALB Cluster node form factor",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ALBControllerNodeFormFactor"
                        }
                    }
                },
                "description": "NSX ALB Cluster node form factors"
            },
            "PageOfNetworkPool": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/NetworkPool"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfNetwork": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Network"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "Entitlements": {
                "type": "object",
                "properties": {
                    "hasNsxEntitlement": {
                        "type": "boolean",
                        "description": "Flag indicating whether the resource has NSX entitlement or not"
                    }
                },
                "description": "Entitlements of the resource"
            },
            "LicensingInfo": {
                "required": [
                    "resourceType"
                ],
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "Type of the resource",
                        "example": "One among: SYSTEM, DOMAIN, CLUSTER, NSXT_CLUSTER"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "ID of the resource, need not be set for the resource of the type : SYSTEM"
                    },
                    "licensingMode": {
                        "type": "string",
                        "description": "Licensing mode",
                        "example": "One among: SUBSCRIPTION, PERPETUAL, MIXED"
                    },
                    "subscriptionStatus": {
                        "type": "string",
                        "description": "Status of the subscription mode",
                        "example": "One among: UNSUBSCRIBED, ACTIVE, EXPIRED"
                    },
                    "subscribedState": {
                        "type": "string",
                        "description": "Subscribed state",
                        "readOnly": true,
                        "example": "One among: UNSUBSCRIBED, PARTIALLY_SUBSCRIBED, SUBSCRIBED"
                    },
                    "isRegistered": {
                        "type": "boolean",
                        "description": "Flag indicating the resource is registered for subscription or not"
                    },
                    "isSubscribed": {
                        "type": "boolean",
                        "description": "Flag indicating the resource is subscribed or not",
                        "readOnly": true
                    },
                    "daysRemainingToSubscribe": {
                        "type": "integer",
                        "description": "Number of days remaining to subscribe",
                        "format": "int32",
                        "readOnly": true
                    },
                    "entitlements": {
                        "$ref": "#/components/schemas/Entitlements"
                    }
                },
                "description": "Licensing information of the resource"
            },
            "PageOfLicenseKey": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/LicenseKey"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "FederatedIdentityProviderInfo": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The user-friendly name for the Identity Provider",
                        "readOnly": true
                    },
                    "source": {
                        "type": "string",
                        "description": "The source of the Identity Provider",
                        "readOnly": true,
                        "example": "One among: OKTA, MICROSOFT_ENTRA_ID, PING_FEDERATE"
                    },
                    "directoryList": {
                        "$ref": "#/components/schemas/IdentityProviderDirectory"
                    },
                    "oidcInfo": {
                        "$ref": "#/components/schemas/OidcInfo"
                    },
                    "syncClientTokenTTL": {
                        "type": "integer",
                        "description": "The lifetime in seconds of the sync client bear token",
                        "format": "int64",
                        "readOnly": true
                    },
                    "syncClientTokenInfo": {
                        "$ref": "#/components/schemas/SyncClientTokenInfo"
                    }
                },
                "description": "The identity management info when the provider is via broker federation",
                "readOnly": true
            },
            "IdentityProvider": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the Identity Provider",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The user-friendly name for the Identity Provider",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the Identity Provider",
                        "readOnly": true
                    },
                    "domainNames": {
                        "type": "array",
                        "description": "The Domains of the Identity Provider",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "The Domains of the Identity Provider",
                            "readOnly": true
                        }
                    },
                    "identitySources": {
                        "type": "array",
                        "description": "The Identity Sources of the Identity Provider",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/VcIdentitySources"
                        }
                    },
                    "ldap": {
                        "$ref": "#/components/schemas/LdapInfo"
                    },
                    "oidc": {
                        "$ref": "#/components/schemas/OidcInfo"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Identity Provider (set as ACTIVE for currently enabled Identity Provider)",
                        "readOnly": true,
                        "example": "One among: ACTIVE, INACTIVE"
                    },
                    "idpMessage": {
                        "type": "string",
                        "description": "The message conveyed by VCF for managing the Identity Provider",
                        "readOnly": true
                    },
                    "fedIdp": {
                        "$ref": "#/components/schemas/FederatedIdentityProviderInfo"
                    }
                },
                "description": "Represents Identity Provider and its attributes",
                "readOnly": true
            },
            "LdapInfo": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The type of the LDAP Server",
                        "readOnly": true
                    },
                    "domainName": {
                        "type": "string",
                        "description": "The name to associate with the created Domain",
                        "readOnly": true
                    },
                    "domainAlias": {
                        "type": "string",
                        "description": "The optional alias to associate the Domain name",
                        "readOnly": true
                    },
                    "username": {
                        "type": "string",
                        "description": "User name to connect to LDAP(s) server",
                        "readOnly": true
                    },
                    "sourceDetails": {
                        "$ref": "#/components/schemas/SourceDetails"
                    }
                },
                "description": "Represents Identity management configuration when the protocol is LDAP",
                "readOnly": true
            },
            "OidcInfo": {
                "type": "object",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "Client identifier to connect to the Identity Provider",
                        "readOnly": true
                    },
                    "discoveryEndpoint": {
                        "type": "string",
                        "description": "Endpoint to retrieve the Identity Provider metadata",
                        "readOnly": true
                    },
                    "authEndpoint": {
                        "type": "string",
                        "description": "Authentication endpoint of the Identity Provider",
                        "readOnly": true
                    },
                    "authMethod": {
                        "type": "string",
                        "description": "Authentication method used by the Identity Provider",
                        "readOnly": true,
                        "example": "One among: CLIENT_SECRET_BASIC, CLIENT_SECRET_POST, CLIENT_SECRET_JWT, PRIVATE_KEY_JWT"
                    },
                    "logoutEndpoint": {
                        "type": "string",
                        "description": "The endpoint to use for terminating the user's session at the Identity Provider",
                        "readOnly": true
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The Identity Provider namespace. It is used to validate the issuer in the acquired OAuth2 token",
                        "readOnly": true
                    },
                    "publicKeyUri": {
                        "type": "string",
                        "description": "Endpoint to retrieve the Identity Provider public key for validation",
                        "readOnly": true
                    },
                    "tokenEndpoint": {
                        "type": "string",
                        "description": "Token endpoint of the Identity Provider",
                        "readOnly": true
                    }
                },
                "description": "Represents Identity management configuration when the provider is based on OIDC",
                "readOnly": true
            },
            "PageOfIdentityProvider": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/IdentityProvider"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "SyncClientTokenInfo": {
                "required": [
                    "expireAt",
                    "expireIn",
                    "scimUrl",
                    "token"
                ],
                "type": "object",
                "properties": {
                    "expireIn": {
                        "type": "integer",
                        "description": "The seconds in which the token expires. Please start using expireAt field for the same.",
                        "format": "int64",
                        "readOnly": true,
                        "deprecated": true
                    },
                    "expireAt": {
                        "type": "string",
                        "description": "The seconds at which the token expires",
                        "readOnly": true
                    },
                    "token": {
                        "type": "string",
                        "description": "The sync client bearer token",
                        "readOnly": true
                    },
                    "scimUrl": {
                        "type": "string",
                        "description": "The WS1B SCIM URL to push users and groups data from external identity provider",
                        "readOnly": true
                    }
                },
                "description": "Represents the information about sync client token",
                "readOnly": true
            },
            "VcIdentitySources": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Identity Source.",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the Identity Source.",
                        "readOnly": true
                    },
                    "domainNames": {
                        "type": "array",
                        "description": "The Domains of the Identity Source",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "The Domains of the Identity Source",
                            "readOnly": true
                        }
                    },
                    "ldap": {
                        "$ref": "#/components/schemas/LdapInfo"
                    }
                },
                "description": "Represents embedded Identity Sources and its attributes.",
                "readOnly": true
            },
            "SDDCManagerOidcInfo": {
                "required": [
                    "idpType",
                    "oidcAuthorizationEndpoint",
                    "oidcClientId",
                    "oidcEndSessionEndpoint",
                    "source"
                ],
                "type": "object",
                "properties": {
                    "oidcClientId": {
                        "type": "string",
                        "description": "The SDDC Manager OIDC client id",
                        "readOnly": true
                    },
                    "oidcAuthorizationEndpoint": {
                        "type": "string",
                        "description": "The SDDC Manager Authorization end point",
                        "readOnly": true
                    },
                    "oidcEndSessionEndpoint": {
                        "type": "string",
                        "description": "The SDDC Manager end session end point",
                        "readOnly": true
                    },
                    "idpType": {
                        "type": "string",
                        "description": "The type of the current identity provider",
                        "readOnly": true
                    },
                    "source": {
                        "type": "string",
                        "description": "The source of the current identity provider",
                        "readOnly": true
                    }
                },
                "description": "Represents the SDDC Manager's OIDC client information"
            },
            "IdentityProviderPrecheckResult": {
                "required": [
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "One of SUCCESS, WARNING, FAILURE",
                        "readOnly": true
                    },
                    "details": {
                        "type": "array",
                        "description": "Details about status type and error messages",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/details"
                        }
                    }
                },
                "description": "Represents Identity Management pre-check result"
            },
            "details": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Precheck response type",
                        "readOnly": true
                    },
                    "message": {
                        "type": "string",
                        "description": "User messages for WARNING and FAILURE",
                        "readOnly": true
                    }
                },
                "description": "Represents Identity Management pre-check details and user messages",
                "readOnly": true
            },
            "PageOfHost": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Host"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfTag": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "TagManagerModel": {
                "type": "object",
                "properties": {
                    "tagManagerUrl": {
                        "type": "string",
                        "description": "Tag Manager URL value"
                    }
                },
                "description": "Represents a Tag Manager Model"
            },
            "PageOfTagsForResource": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/TagsForResource"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "TaggedResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the resource"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the resource"
                    }
                },
                "description": "Specifies a resource with id and type"
            },
            "TagsForResource": {
                "type": "object",
                "properties": {
                    "resource": {
                        "$ref": "#/components/schemas/TaggedResource"
                    },
                    "tags": {
                        "type": "array",
                        "description": "List of associated tags",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    }
                },
                "description": "Represents a taggable resource with its associations",
                "readOnly": true
            },
            "PageOfHostCriterion": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/HostCriterion"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "EdgeCluster": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the egde cluster"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the edge cluster"
                    },
                    "clusters": {
                        "type": "array",
                        "description": "List of clusters associated with the edge cluster",
                        "items": {
                            "$ref": "#/components/schemas/ClusterReference"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "NSX Edge cluster status",
                        "readOnly": true,
                        "example": "One among: ACTIVE, ACTIVATING, UPGRADING, DISABLED, ERROR, DEACTIVATING, EXPANDING, SHRINKING, CREATING, SKIPPED"
                    },
                    "nsxtCluster": {
                        "$ref": "#/components/schemas/NsxTClusterReference"
                    },
                    "edgeNodes": {
                        "type": "array",
                        "description": "List of edge nodes associated with the edge cluster",
                        "items": {
                            "$ref": "#/components/schemas/EdgeNodeReference"
                        }
                    },
                    "isTier0ManagedBySystem": {
                        "type": "boolean",
                        "description": "Whether or not this edge cluster's tier 0 is managed by system"
                    },
                    "skipTepRoutabilityCheck": {
                        "type": "boolean",
                        "description": "Whether or not host/TEP network checks were done for this edge cluster"
                    }
                },
                "description": "EdgeCluster representation"
            },
            "EdgeNodeReference": {
                "required": [
                    "hostName",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the edge node"
                    },
                    "hostName": {
                        "type": "string",
                        "description": "Hostname of the edge node"
                    }
                },
                "description": "Represents a reference to the edge node"
            },
            "PageOfEdgeCluster": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/EdgeCluster"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "EdgeClusterNsxtEntityCriterion": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the criterion",
                        "readOnly": true,
                        "example": "One among: TIER_0_GATEWAY_ASSOCIATED_WITH_EDGE_CLUSTER, TIER_1_GATEWAY_ASSOCIATED_WITH_EDGE_CLUSTER"
                    },
                    "arguments": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Arguments required for a particular criterion",
                            "readOnly": true
                        },
                        "description": "Arguments required for a particular criterion",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the criterion",
                        "readOnly": true
                    }
                },
                "description": "Represents a criterion for querying the Edge Cluster",
                "readOnly": true
            },
            "PageOfEdgeClusterNsxtEntityCriterion": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/EdgeClusterNsxtEntityCriterion"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "Page": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/EdgeClusterNsxtEntityCriterion"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                },
                "description": "Represents a page of elements of a single type"
            },
            "Domain": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the workload domain"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workload domain"
                    },
                    "orgName": {
                        "type": "string",
                        "description": "Organization name of the workload domain"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the workload domain",
                        "example": "One among: ACTIVE, ACTIVATING, UPGRADING, DISABLED, ERROR, SKIPPED, DEACTIVATING, EXPANDING, SHRINKING, CREATING"
                    },
                    "upgradeState": {
                        "type": "string",
                        "description": "Workload domain upgrade state",
                        "example": "One among: AVAILABLE, FAILED"
                    },
                    "upgradeStatus": {
                        "$ref": "#/components/schemas/UpgradeStatus"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the workload domain"
                    },
                    "vraIntegrationStatus": {
                        "type": "string",
                        "description": "Status that represents the workload domain integration with VMware Aria Automation",
                        "example": "One among: ENABLED, DISABLED, FAILED, IN_PROGRESS"
                    },
                    "vropsIntegrationStatus": {
                        "type": "string",
                        "description": "Status that represents the workload domain integration with VMware Aria Operations",
                        "example": "One among: ENABLED, DISABLED, FAILED, IN_PROGRESS"
                    },
                    "vrliIntegrationStatus": {
                        "type": "string",
                        "description": "Status that represents the workload domain integration with VMware Aria Operations for Logs",
                        "example": "One among: ENABLED, DISABLED, FAILED, IN_PROGRESS"
                    },
                    "owners": {
                        "type": "array",
                        "description": "List of users owning the workload domain",
                        "items": {
                            "type": "string",
                            "description": "List of users owning the workload domain"
                        }
                    },
                    "vcenters": {
                        "type": "array",
                        "description": "List of vCenters associated with the workload domain",
                        "items": {
                            "$ref": "#/components/schemas/VcenterReference"
                        }
                    },
                    "ssoId": {
                        "type": "string",
                        "description": "ID of the SSO domain associated with the workload domain"
                    },
                    "ssoName": {
                        "type": "string",
                        "description": "Name of the SSO domain associated with the workload domain"
                    },
                    "isManagementSsoDomain": {
                        "type": "boolean",
                        "description": "Shows whether the workload domain is joined to the Management domain SSO"
                    },
                    "clusters": {
                        "type": "array",
                        "description": "List of clusters associated with the workload domain",
                        "items": {
                            "$ref": "#/components/schemas/ClusterReference"
                        }
                    },
                    "nsxtCluster": {
                        "$ref": "#/components/schemas/NsxTClusterReference"
                    },
                    "licensingInfo": {
                        "$ref": "#/components/schemas/LicensingInfoReference"
                    },
                    "capacity": {
                        "$ref": "#/components/schemas/Capacity"
                    },
                    "tags": {
                        "type": "array",
                        "description": "Deprecated, this list will always be returned empty",
                        "deprecated": true,
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "elmStatus": {
                        "type": "string",
                        "description": "ELM status of the domain: ISOLATED, IN_TRANSIT, or LINKED",
                        "example": "One among: ISOLATED, IN_TRANSIT, LINKED"
                    },
                    "lifecycleManagementMode": {
                        "type": "string",
                        "description": "Lifecycle Management mode of the domain",
                        "example": "One among: IMAGES, BASELINES, BASELINES_AND_IMAGES"
                    },
                    "isNetworkSeparationEnabled": {
                        "type": "boolean",
                        "description": "Domain network separation status"
                    },
                    "isSecurityEnabled": {
                        "type": "boolean",
                        "description": "Domain security status"
                    },
                    "isPrimaryDomainForNsx": {
                        "type": "boolean",
                        "description": "Is Primary Domain of NSX"
                    }
                },
                "description": "Represents a domain"
            },
            "LicensingInfoReference": {
                "type": "object",
                "properties": {
                    "licensingMode": {
                        "type": "string",
                        "description": "Licensing mode",
                        "example": "One among: SUBSCRIPTION, PERPETUAL, MIXED"
                    },
                    "subscriptionStatus": {
                        "type": "string",
                        "description": "Status of the subscription mode",
                        "example": "One among: UNSUBSCRIBED, ACTIVE, EXPIRED"
                    },
                    "isRegistered": {
                        "type": "boolean",
                        "description": "Flag indicating the resource is registered for subscription or not"
                    },
                    "isSubscribed": {
                        "type": "boolean",
                        "description": "Flag indicating the resource is subscribed or not",
                        "readOnly": true
                    },
                    "daysRemainingToSubscribe": {
                        "type": "integer",
                        "description": "Number of days remaining to subscribe",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "description": "Represents a Licensing information"
            },
            "PageOfDomain": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Domain"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "UpgradeStatus": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Upgrade status",
                        "example": "One among: UP_TO_DATE, SCHEDULED, IN_PROGRESS, READY, AVAILABLE"
                    },
                    "completedResources": {
                        "type": "integer",
                        "description": "Number of completed resources",
                        "format": "int32"
                    },
                    "totalResources": {
                        "type": "integer",
                        "description": "Total number of resources",
                        "format": "int32"
                    }
                },
                "description": "Represents upgrade status of a domain"
            },
            "Certificate": {
                "required": [
                    "domain",
                    "expirationStatus",
                    "getCertificateError",
                    "isInstalled",
                    "issuedBy",
                    "issuedTo",
                    "keySize",
                    "notAfter",
                    "notBefore",
                    "numberOfDaysToExpire",
                    "pemEncoded",
                    "publicKey",
                    "publicKeyAlgorithm",
                    "resourceType",
                    "serialNumber",
                    "signatureAlgorithm",
                    "subject",
                    "subjectAlternativeName",
                    "thumbprint",
                    "thumbprintAlgorithm",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "isInstalled": {
                        "type": "boolean",
                        "description": "Whether the certificate is installed or not",
                        "readOnly": true,
                        "example": false
                    },
                    "version": {
                        "type": "string",
                        "description": "The X.509 version of the certificate",
                        "readOnly": true,
                        "example": "V3"
                    },
                    "serialNumber": {
                        "type": "string",
                        "description": "The serial number of the certificate",
                        "readOnly": true,
                        "example": "46:85:19:77:36:12:67:26"
                    },
                    "issuedTo": {
                        "type": "string",
                        "description": "To whom the certificate is issued",
                        "readOnly": true,
                        "example": "sfo-vc01.rainpole.io"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Resource type",
                        "example": "One among: SDDC_MANAGER, PSC, VCENTER, NSX_MANAGER, NSXT_MANAGER, VRA, VRLI, VROPS, VRSLCM, VXRAIL_MANAGER, NSX_ALB, ESXI"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Resource fqdn"
                    },
                    "issuedBy": {
                        "type": "string",
                        "description": "The certificate authority that issued the certificate",
                        "readOnly": true,
                        "example": "CN=OpenSSL CA, OU=VCF, O=VMware, L=Bengaluru, ST=Karnataka, C=IN"
                    },
                    "notBefore": {
                        "type": "string",
                        "description": "The timestamp before which certificate is not valid",
                        "readOnly": true,
                        "example": "2020-01-01T00:00:00Z"
                    },
                    "notAfter": {
                        "type": "string",
                        "description": "The timestamp after which certificate is not valid",
                        "readOnly": true,
                        "example": "2021-02-02T00:00:00Z"
                    },
                    "signatureAlgorithm": {
                        "type": "string",
                        "description": "Algorithm used to sign the certificate",
                        "readOnly": true,
                        "example": "SHA256withRSA"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Complete distinguished name to which the certificate is issued",
                        "readOnly": true,
                        "example": "CN=sfo-vc01.rainpole.io, OU=VCF, O=VMware, L=Bengaluru, ST=Karnataka, C=IN"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Domain of the resource certificate",
                        "readOnly": true,
                        "example": "3E86FBAD-8984-4D4B-992D-F0C49857572A"
                    },
                    "subjectAlternativeName": {
                        "type": "array",
                        "description": "The alternative names to which the certificate is issued",
                        "readOnly": true,
                        "example": "sfo-vc01.rainpole.io",
                        "items": {
                            "type": "string",
                            "description": "The alternative names to which the certificate is issued",
                            "readOnly": true,
                            "example": "sfo-vc01.rainpole.io"
                        }
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public key of the certificate",
                        "readOnly": true,
                        "example": "D6:FD:DF:33:F1:..."
                    },
                    "publicKeyAlgorithm": {
                        "type": "string",
                        "description": "The public key algorithm of the certificate",
                        "readOnly": true,
                        "example": "One among: RSA"
                    },
                    "keySize": {
                        "type": "string",
                        "description": "The key size of the certificate",
                        "readOnly": true,
                        "example": "One among: 2048, 3072, 4096"
                    },
                    "thumbprintAlgorithm": {
                        "type": "string",
                        "description": "Algorithm used to generate thumbprint",
                        "readOnly": true,
                        "example": "SHA-256"
                    },
                    "thumbprint": {
                        "type": "string",
                        "description": "Thumbprint generated using certificate content",
                        "readOnly": true,
                        "example": "59:24:D5:18:04:A0:26:B0:A4:05:EA:82:60:95:82:A2:4B:F6:31:FB:81:93:01:F3:29:7D:34:9C:D3:05:39:90"
                    },
                    "numberOfDaysToExpire": {
                        "type": "integer",
                        "description": "Number of days left for the certificate to expire",
                        "format": "int32",
                        "readOnly": true,
                        "example": 398
                    },
                    "expirationStatus": {
                        "type": "string",
                        "description": "Certificate expiry status",
                        "readOnly": true,
                        "example": "One among: ACTIVE, ABOUT_TO_EXPIRE, EXPIRED"
                    },
                    "pemEncoded": {
                        "type": "string",
                        "description": "The PEM encoded certificate content",
                        "readOnly": true,
                        "example": "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----"
                    },
                    "getCertificateError": {
                        "type": "string",
                        "description": "Error if certificate cannot be fetched",
                        "readOnly": true,
                        "example": "Status : NOT_TRUSTED, Message : Certificate Expired"
                    },
                    "operationType": {
                        "type": "string",
                        "description": "The last operation type",
                        "readOnly": true,
                        "example": "One among: GENERATE_CSR, GENERATE_CERTIFICATE, REPLACE_CERTIFICATE"
                    },
                    "operationStatus": {
                        "type": "string",
                        "description": "The last operation status",
                        "readOnly": true,
                        "example": "One among: PENDING, Pending, IN_PROGRESS, In Progress, SUCCESSFUL, Successful, FAILED, Failed, CANCELLED, Cancelled, COMPLETED_WITH_WARNING, SKIPPED"
                    },
                    "operationMessage": {
                        "type": "string",
                        "description": "The last operation status message",
                        "readOnly": true
                    },
                    "caChain": {
                        "type": "array",
                        "description": "Certificate chain ordered from intermediate to root certificates",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Certificate"
                        }
                    }
                },
                "description": "Represents certificate and its attributes",
                "readOnly": true
            },
            "PageOfCertificate": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Certificate"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "Endpoint": {
                "required": [
                    "type",
                    "url"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the Endpoint",
                        "readOnly": true,
                        "example": "One among: PSC, VCENTER, NSX_MANAGER, NSX_T_MANAGER, VRLI, VRA, VROPS, WSA, VRSLCM"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the Endpoint",
                        "readOnly": true
                    }
                },
                "description": "Represents an Endpoint in a Domain",
                "readOnly": true
            },
            "PageOfEndpoint": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Endpoint"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "Csr": {
                "required": [
                    "csrDecodedContent",
                    "csrEncodedContent",
                    "resource"
                ],
                "type": "object",
                "properties": {
                    "csrEncodedContent": {
                        "type": "string",
                        "description": "The CSR encoded content",
                        "readOnly": true,
                        "example": "-----BEGIN CERTIFICATE REQUEST-----\nMIIEH...\n-----END CERTIFICATE REQUEST-----"
                    },
                    "resource": {
                        "$ref": "#/components/schemas/Resource"
                    },
                    "csrDecodedContent": {
                        "type": "string",
                        "description": "The CSR decoded content",
                        "readOnly": true,
                        "example": "DECODED CSR AS STRING"
                    }
                },
                "description": "The Certificate Signing Request (CSR) details",
                "readOnly": true
            },
            "PageOfCsr": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Csr"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "ComplianceAudit": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Compliance audit id",
                        "readOnly": true
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "The timestamp at which audit was initiated",
                        "readOnly": true
                    },
                    "completionTimestamp": {
                        "type": "string",
                        "description": "The timestamp at which audit was completed",
                        "readOnly": true
                    },
                    "standardType": {
                        "type": "string",
                        "description": "Compliance standard type",
                        "readOnly": true,
                        "example": "One among: PCI"
                    },
                    "standardVersion": {
                        "type": "string",
                        "description": "Compliance standard version",
                        "readOnly": true
                    },
                    "domainId": {
                        "type": "string",
                        "description": "Domain id",
                        "readOnly": true
                    },
                    "configurationEvaluationStatus": {
                        "type": "string",
                        "description": "Configuration evaluation status",
                        "readOnly": true,
                        "example": "One among: ALL_EVALUATED, SOME_EVALUATED, NONE_EVALUATED, UNKNOWN"
                    },
                    "configurationEvaluationStatusDetails": {
                        "type": "string",
                        "description": "Details about evaluation status",
                        "readOnly": true
                    },
                    "compliantStatus": {
                        "type": "string",
                        "description": "Compliant status of overall task",
                        "readOnly": true,
                        "example": "One among: COMPLIANT, NON_COMPLIANT, PARTIALLY_COMPLIANT, UNKNOWN"
                    },
                    "totalConfigurationsEvaluated": {
                        "type": "integer",
                        "description": "Total number of configurations evaluated",
                        "format": "int32",
                        "readOnly": true
                    },
                    "numberOfNonCompliantConfigurations": {
                        "type": "integer",
                        "description": "Number of non compliant configurations",
                        "format": "int32",
                        "readOnly": true
                    },
                    "numberOfSkippedConfigurations": {
                        "type": "integer",
                        "description": "Number of configurations skipped",
                        "format": "int32",
                        "readOnly": true
                    },
                    "numberOfAuditItems": {
                        "type": "integer",
                        "description": "Number of audit items",
                        "format": "int32",
                        "readOnly": true
                    },
                    "auditItems": {
                        "type": "array",
                        "description": "Compliance audit items",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ComplianceAuditItem"
                        }
                    }
                },
                "description": "Represents a compliance audit report"
            },
            "ComplianceAuditItem": {
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "Compliance resource type",
                        "readOnly": true,
                        "example": "One among: SDDC_MANAGER"
                    },
                    "resourceVersion": {
                        "type": "string",
                        "description": "Compliance resource version",
                        "readOnly": true
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Compliance resource name",
                        "readOnly": true
                    },
                    "configurationId": {
                        "type": "string",
                        "description": "Compliance configuration id",
                        "readOnly": true
                    },
                    "configurationTitle": {
                        "type": "string",
                        "description": "Compliance configuration title",
                        "readOnly": true
                    },
                    "isConfigurationRecommendedByStandard": {
                        "type": "boolean",
                        "description": "Whether the configuration is recommended by compliance standard",
                        "readOnly": true
                    },
                    "citationReference": {
                        "type": "string",
                        "description": "Compliance configuration citation in compliance standard documentation",
                        "readOnly": true
                    },
                    "recommendedValue": {
                        "type": "string",
                        "description": "Recommended value for compliance configuration",
                        "readOnly": true
                    },
                    "actualValue": {
                        "type": "string",
                        "description": "Actual value for compliance configuration",
                        "readOnly": true
                    },
                    "complianceStatus": {
                        "type": "string",
                        "description": "Compliance status of the configuration",
                        "readOnly": true,
                        "example": "One among: COMPLIANT, NON_COMPLIANT, PARTIALLY_COMPLIANT, UNKNOWN"
                    },
                    "remediationStep": {
                        "type": "string",
                        "description": "Remediation steps if the configuration is non compliant",
                        "readOnly": true
                    },
                    "complianceAuditStatus": {
                        "type": "string",
                        "description": "Compliance audit task status",
                        "readOnly": true,
                        "example": "One among: SUCCEEDED, FAILED, NOT_SUPPORTED"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Error message if compliance audit fails",
                        "readOnly": true
                    }
                },
                "description": "Represents a compliance audit item",
                "readOnly": true
            },
            "PageOfComplianceAudit": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ComplianceAudit"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfComplianceAuditItem": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ComplianceAuditItem"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "IsolationPrecheckResult": {
                "required": [
                    "executionStatus"
                ],
                "type": "object",
                "properties": {
                    "precheckFailures": {
                        "type": "array",
                        "description": "Conditions that will have to be remediated inorder to proceed with isolation operation",
                        "items": {
                            "type": "string",
                            "description": "Conditions that will have to be remediated inorder to proceed with isolation operation"
                        }
                    },
                    "precheckWarnings": {
                        "type": "array",
                        "description": "Conditions that may have to cause side effects if not remediated during execution of isolation operation",
                        "items": {
                            "type": "string",
                            "description": "Conditions that may have to cause side effects if not remediated during execution of isolation operation"
                        }
                    },
                    "implications": {
                        "type": "array",
                        "description": "Implications of breaking ELM",
                        "items": {
                            "type": "string",
                            "description": "Implications of breaking ELM"
                        }
                    },
                    "executionStatus": {
                        "type": "string",
                        "description": "Execution status of the prechecks",
                        "example": "One among: IN_PROGRESS, FAILED, COMPLETED, UNKNOWN, SKIPPED, CANCELLED, CANCELLATION_IN_PROGRESS"
                    }
                },
                "description": "Isolation Precheck Results"
            },
            "HealthCheckQueryResult": {
                "required": [
                    "resultId",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "resultId": {
                        "type": "string",
                        "description": "Result id"
                    },
                    "status": {
                        "type": "string",
                        "description": "status"
                    },
                    "result": {
                        "type": "array",
                        "description": "result",
                        "items": {
                            "$ref": "#/components/schemas/HealthCheckResult"
                        }
                    }
                },
                "description": "HealthCheckQueryResult"
            },
            "HealthCheckResult": {
                "required": [
                    "description",
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Health Check id"
                    },
                    "name": {
                        "type": "string",
                        "description": "Health Check name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Health check description"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the health check.",
                        "readOnly": true,
                        "example": "One among: VSAN"
                    },
                    "status": {
                        "type": "string",
                        "description": "Type of the health status.",
                        "readOnly": true,
                        "example": "One among: ENABLED, DISABLED"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Type of the health status.",
                        "readOnly": true,
                        "example": "One among: CLUSTER"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "ID of the resource, if the ResourceType is CLUSTER, then the resourceId == ClusterId"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Name of  resource, if the ResourceType is CLUSTER, then the resourceName == ClusterName"
                    }
                },
                "description": "HealthCheckResult"
            },
            "PageOfDatastoreCriterion": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/DatastoreCriterion"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfClusterCriterion": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ClusterCriterion"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "AutoRotateCredentialPolicy": {
                "required": [
                    "nextSchedule"
                ],
                "type": "object",
                "properties": {
                    "frequencyInDays": {
                        "type": "integer",
                        "description": "Frequency in days",
                        "format": "int32",
                        "readOnly": true
                    },
                    "nextSchedule": {
                        "type": "string",
                        "description": "The timestamp at which auto-rotate for credential will run",
                        "readOnly": true
                    }
                },
                "description": "Represents a auto-rotate policy for a credential",
                "readOnly": true
            },
            "Credential": {
                "required": [
                    "accountType",
                    "creationTimestamp",
                    "credentialType",
                    "id",
                    "modificationTimestamp",
                    "resource",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Credential ID",
                        "readOnly": true
                    },
                    "credentialType": {
                        "type": "string",
                        "description": "Credential type",
                        "readOnly": true,
                        "example": "One among: SSO, SSH, API, FTP, AUDIT"
                    },
                    "accountType": {
                        "type": "string",
                        "description": "Account type",
                        "readOnly": true,
                        "example": "One among: USER, SYSTEM, SERVICE"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username",
                        "readOnly": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Password",
                        "readOnly": true
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "The timestamp at which credential was created",
                        "readOnly": true
                    },
                    "modificationTimestamp": {
                        "type": "string",
                        "description": "The timestamp at which credential was last modified",
                        "readOnly": true
                    },
                    "expiry": {
                        "$ref": "#/components/schemas/ExpirationDetails"
                    },
                    "resource": {
                        "$ref": "#/components/schemas/AuthenticatedResource"
                    },
                    "autoRotatePolicy": {
                        "$ref": "#/components/schemas/AutoRotateCredentialPolicy"
                    }
                },
                "description": "Represents a credential and the resource to which it is associated with"
            },
            "PageOfCredential": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Credential"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "CredentialsSubTask": {
                "required": [
                    "creationTimestamp",
                    "description",
                    "name",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Credential sub-task ID",
                        "readOnly": true
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Resource name",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Credential sub-task name",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Credential sub-task description",
                        "readOnly": true
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "Credential sub-task creation timestamp",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Credential sub-task status",
                        "readOnly": true,
                        "example": "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED, USER_CANCELLED, INCONSISTENT"
                    },
                    "dependentSubTasks": {
                        "type": "array",
                        "description": "List of dependent sub-tasks of the credential sub-task",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/CredentialsSubTask"
                        }
                    },
                    "errors": {
                        "type": "array",
                        "description": "List of errors in case of a failure",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "oldPassword": {
                        "type": "string",
                        "description": "Credential sub-task old password",
                        "readOnly": true
                    },
                    "newPassword": {
                        "type": "string",
                        "description": "Credential sub-task new password",
                        "readOnly": true
                    },
                    "entityType": {
                        "type": "string",
                        "description": "Credential sub-task entity type",
                        "readOnly": true
                    },
                    "username": {
                        "type": "string",
                        "description": "Credential sub-task username",
                        "readOnly": true
                    },
                    "credentialType": {
                        "type": "string",
                        "description": "Credential sub-task credential type",
                        "readOnly": true
                    }
                },
                "description": "Represents the credentials sub-task in the system",
                "readOnly": true
            },
            "CredentialsTask": {
                "required": [
                    "creationTimestamp",
                    "id",
                    "name",
                    "status",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Credential task ID",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Credential task name",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Credential task type",
                        "readOnly": true,
                        "example": "One among: UPDATE, ROTATE, REMEDIATE, UPDATE_AUTO_ROTATE_POLICY"
                    },
                    "creationTimestamp": {
                        "type": "string",
                        "description": "Credential task creation timestamp",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Credential task status",
                        "readOnly": true,
                        "example": "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED, USER_CANCELLED, INCONSISTENT"
                    },
                    "subTasks": {
                        "type": "array",
                        "description": "List of credential sub-tasks of the credential task",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/CredentialsSubTask"
                        }
                    },
                    "errors": {
                        "type": "array",
                        "description": "List of errors in case of a failure",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "isAutoRotate": {
                        "type": "boolean",
                        "description": "Is Credential task an auto rotate task",
                        "readOnly": true
                    }
                },
                "description": "Represents the credentials task in the system"
            },
            "PageOfCredentialsTask": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/CredentialsTask"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "Applicability": {
                "required": [
                    "skuType",
                    "versionApplicability"
                ],
                "type": "object",
                "properties": {
                    "versionApplicability": {
                        "type": "array",
                        "description": "List of product version related applicability",
                        "items": {
                            "$ref": "#/components/schemas/VersionApplicability"
                        }
                    },
                    "skuType": {
                        "type": "string",
                        "description": "SKU Type for this Configuration Drift",
                        "example": "OPTIONS: VXRAIL|VSAN|VSRN_VXRAIL"
                    }
                },
                "description": "Represents all applicability requirements for a Configuration Drift"
            },
            "ConfigDriftSpec": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The UUID of the Configuration Drift",
                        "readOnly": true,
                        "example": "3f39d4a1-78d2-11e8-af85-f1cf26258cdc"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Configuration Drift",
                        "example": "Distributed Virtual Portgroup configuration drift"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Configuration Drift",
                        "example": "This drift operation will create an additional distributed virtual port group on a cluster for VCF management VM communication, and migrate VCF-managed VMs to this new port group"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "The infrastructure resource on which this Configuration Drift operates",
                        "example": "system | domain | cluster | host | edge_cluster"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of Configuration Drift",
                        "example": "fix | feature"
                    },
                    "applicability": {
                        "$ref": "#/components/schemas/Applicability"
                    }
                },
                "description": "Represents a Configuration Drift workflow",
                "readOnly": true
            },
            "PageOfConfigDriftSpec": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ConfigDriftSpec"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "VersionApplicability": {
                "type": "object",
                "properties": {
                    "productType": {
                        "type": "string",
                        "description": "Product type",
                        "example": "SDDC_MANAGER|VCENTER|ESXI|NSXT_MANAGER|VXRAIL"
                    },
                    "minVersion": {
                        "type": "string",
                        "description": "The minimum version for current product to apply current Configuration Drift"
                    },
                    "maxVersion": {
                        "type": "string",
                        "description": "The maximum version for current product to apply current Configuration Drift"
                    }
                },
                "description": "Represents the version applicability of a Configuration Drift for a product"
            },
            "ComplianceStandard": {
                "type": "object",
                "properties": {
                    "standardType": {
                        "type": "string",
                        "description": "Compliance standard type",
                        "readOnly": true,
                        "example": "One among: PCI"
                    },
                    "standardVersions": {
                        "type": "array",
                        "description": "Compliance standard versions",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "Compliance standard versions",
                            "readOnly": true
                        }
                    }
                },
                "description": "Represents a compliance standard",
                "readOnly": true
            },
            "PageOfComplianceStandard": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ComplianceStandard"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "ComplianceConfiguration": {
                "type": "object",
                "properties": {
                    "configurationId": {
                        "type": "string",
                        "description": "Compliance configuration id",
                        "readOnly": true
                    },
                    "configurationTitle": {
                        "type": "string",
                        "description": "Compliance configuration title",
                        "readOnly": true
                    },
                    "complianceResourceStandardConfigurationDetails": {
                        "type": "array",
                        "description": "Compliance resource standard configuration details",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ComplianceResourceStandardConfiguration"
                        }
                    }
                },
                "description": "Represents a compliance configuration",
                "readOnly": true
            },
            "ComplianceResourceStandardConfiguration": {
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "Compliance resource type",
                        "readOnly": true,
                        "example": "One among: SDDC_MANAGER"
                    },
                    "resourceVersion": {
                        "type": "string",
                        "description": "Compliance resource version",
                        "readOnly": true
                    },
                    "standardConfigurationDetails": {
                        "type": "array",
                        "description": "Compliance standard configuration",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ComplianceStandardConfiguration"
                        }
                    }
                },
                "description": "Represents a compliance resource and standard configuration",
                "readOnly": true
            },
            "ComplianceStandardConfiguration": {
                "type": "object",
                "properties": {
                    "standardType": {
                        "type": "string",
                        "description": "Compliance standard type",
                        "readOnly": true,
                        "example": "One among: PCI"
                    },
                    "standardVersion": {
                        "type": "string",
                        "description": "Compliance standard version",
                        "readOnly": true
                    },
                    "isRecommendedByStandard": {
                        "type": "boolean",
                        "description": "Whether the config is recommended by the standard or it's a VMware best practice",
                        "readOnly": true
                    },
                    "isAuditAutomated": {
                        "type": "boolean",
                        "description": "Whether an automated or manual audit is supported",
                        "readOnly": true
                    },
                    "citationReference": {
                        "type": "string",
                        "description": "Citation reference of the configuration in the standard's documentation",
                        "readOnly": true
                    },
                    "auditProcedure": {
                        "type": "string",
                        "description": "How the configuration can be audited",
                        "readOnly": true
                    },
                    "recommendedValue": {
                        "type": "string",
                        "description": "Recommended value of the configuration by the standard",
                        "readOnly": true
                    },
                    "remediationProcedure": {
                        "type": "string",
                        "description": "Remediation procedure if the configuration is not compliant",
                        "readOnly": true
                    }
                },
                "description": "Represents a compliance standard configuration",
                "readOnly": true
            },
            "PageOfComplianceConfiguration": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ComplianceConfiguration"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "CompatibilityMatrix": {
                "required": [
                    "compatibilityMatrixContent",
                    "compatibilityMatrixMetadata",
                    "compatibilityMatrixSource"
                ],
                "type": "object",
                "properties": {
                    "compatibilityMatrixMetadata": {
                        "$ref": "#/components/schemas/CompatibilityMatrixMetadata"
                    },
                    "compatibilityMatrixSource": {
                        "type": "string",
                        "description": "Source type of the compatibility matrix content",
                        "example": "One among: VMWARE_COMPAT, VXRAIL_COMPAT"
                    },
                    "compatibilityMatrixContent": {
                        "type": "string",
                        "description": "Content of the compatibility matrix"
                    }
                },
                "description": "Model for metadata of compatibility matrix"
            },
            "CompatibilityMatrixMetadata": {
                "type": "object",
                "properties": {
                    "isStale": {
                        "type": "boolean",
                        "description": "staleness of the compatibility matrix content",
                        "readOnly": true
                    },
                    "isMissing": {
                        "type": "boolean",
                        "description": "existence of the compatibility matrix content",
                        "readOnly": true
                    },
                    "lastModifiedDate": {
                        "type": "integer",
                        "description": "Last modified date of the compatibility matrix content",
                        "format": "int64",
                        "readOnly": true
                    },
                    "message": {
                        "type": "string",
                        "description": "Info message for the compatibility matrix content",
                        "readOnly": true
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Error message for the compatibility matrix content",
                        "readOnly": true
                    },
                    "warningMessage": {
                        "type": "string",
                        "description": "Warning message for the compatibility matrix content",
                        "readOnly": true
                    }
                },
                "description": "Model for metadata of compatibility matrix"
            },
            "PageOfCompatibilityMatrix": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/CompatibilityMatrix"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfCluster": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Cluster"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfClusterNetworkConfigurationCriterion": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ClusterNetworkConfigurationCriterion"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "NiocBandwidthAllocation": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Host infrastructure traffic type",
                        "example": "Example: management, faultTolerance, vmotion, virtualMachine, iSCSI, nfs, hbr, vsan, vdp etc."
                    },
                    "niocTrafficResourceAllocation": {
                        "$ref": "#/components/schemas/NiocTrafficResourceAllocation"
                    }
                },
                "description": "Network traffic per resource type"
            },
            "NsxTransportZone": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the transport zone"
                    },
                    "transportType": {
                        "type": "string",
                        "description": "The type of the transport zone",
                        "example": "One among: VLAN, OVERLAY"
                    }
                },
                "description": "The transport zone associated with the vSphere Distributed Switch used by NSX"
            },
            "NsxtSwitchConfiguration": {
                "type": "object",
                "properties": {
                    "transportZones": {
                        "type": "array",
                        "description": "The list of transport zones associated with the vSphere Distributed Switch managed by NSX",
                        "items": {
                            "$ref": "#/components/schemas/NsxTransportZone"
                        }
                    },
                    "hostSwitchOperationalMode": {
                        "type": "string",
                        "description": "Operational mode of a Host Switch",
                        "example": "One among: STANDARD, ENS, ENS_INTERRUPT"
                    }
                },
                "description": "The network configurations associated with the vSphere Distributed Switch managed by NSX"
            },
            "Portgroup": {
                "required": [
                    "name",
                    "transportType"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Port group name"
                    },
                    "transportType": {
                        "type": "string",
                        "description": "Port group transport type",
                        "example": "One among: VSAN, VMOTION, MANAGEMENT, PUBLIC, NFS, VREALIZE, ISCSI, EDGE_INFRA_OVERLAY_UPLINK, VM_MANAGEMENT, VSAN_EXTERNAL"
                    },
                    "portBindingType": {
                        "type": "string",
                        "description": "Port binding type",
                        "example": "One among: STATIC, EPHEMERAL"
                    },
                    "vlanId": {
                        "type": "integer",
                        "description": "VLAN ID",
                        "format": "int32"
                    },
                    "activeUplinks": {
                        "type": "array",
                        "description": "List of active uplinks",
                        "items": {
                            "type": "string",
                            "description": "List of active uplinks"
                        }
                    },
                    "standbyUplinks": {
                        "type": "array",
                        "description": "List of standby uplinks",
                        "items": {
                            "type": "string",
                            "description": "List of standby uplinks"
                        }
                    }
                },
                "description": "Portgroup associated with the vSphere Distributed Switch"
            },
            "Vds": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "vSphere Distributed Switch id"
                    },
                    "name": {
                        "type": "string",
                        "description": "vSphere Distributed Switch name"
                    },
                    "isUsedByNsxt": {
                        "type": "boolean",
                        "description": "Boolean to identify if the vSphere distributed switch is used by NSX. This property is deprecated in favor of nsxtSwitchConfig field"
                    },
                    "mtu": {
                        "type": "integer",
                        "description": "Maximum Transmission Unit",
                        "format": "int32"
                    },
                    "portGroups": {
                        "type": "array",
                        "description": "List of portgroups associated with the vSphere Distributed Switch",
                        "items": {
                            "$ref": "#/components/schemas/Portgroup"
                        }
                    },
                    "niocBandwidthAllocations": {
                        "type": "array",
                        "description": "List of Network I/O Control Bandwidth Allocations for System Traffic \nBased on shares, reservation, and limit, you can configure Network I/O Control to allocate certain amount of\nbandwidth for traffic generated by vSphere Fault Tolerance, iSCSI storage, vSphere vMotion, and so on.\nYou can use Network I/O Control on a distributed switch to configure bandwidth allocation for the traffic\nthat is related to the main system features in vSphere",
                        "items": {
                            "$ref": "#/components/schemas/NiocBandwidthAllocation"
                        }
                    },
                    "version": {
                        "type": "string",
                        "description": "vSphere Distributed Switch version"
                    },
                    "nsxtSwitchConfig": {
                        "$ref": "#/components/schemas/NsxtSwitchConfiguration"
                    }
                },
                "description": "vSphere distributed switch"
            },
            "CertificateAuthority": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "CA type. Only supports Microsoft and OpenSSL CAs",
                        "readOnly": true,
                        "example": "One among: OpenSSL, Microsoft"
                    },
                    "username": {
                        "type": "string",
                        "description": "Microsoft CA server username",
                        "readOnly": true,
                        "example": "Administrator"
                    },
                    "serverUrl": {
                        "type": "string",
                        "description": "Microsoft CA server url",
                        "readOnly": true,
                        "example": "https://sfo-ad.rainpole.io/certsrv"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "Microsoft CA server template name",
                        "readOnly": true,
                        "example": "WebServer"
                    },
                    "commonName": {
                        "type": "string",
                        "description": "OpenSSL CA domain name",
                        "readOnly": true,
                        "example": "OpenSSL CA"
                    },
                    "country": {
                        "type": "string",
                        "description": "ISO 3166 country code where company is legally registered",
                        "readOnly": true,
                        "example": "IN"
                    },
                    "state": {
                        "type": "string",
                        "description": "The full name of the state where company is legally registered",
                        "readOnly": true,
                        "example": "Karnataka"
                    },
                    "locality": {
                        "type": "string",
                        "description": "The city or locality where company is legally registered",
                        "readOnly": true,
                        "example": "Bengaluru"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The name under which company is legally registered",
                        "readOnly": true,
                        "example": "VMware Inc."
                    },
                    "organizationUnit": {
                        "type": "string",
                        "description": "Organization with which the certificate is associated",
                        "readOnly": true,
                        "example": "VCF"
                    }
                },
                "description": "The Certificate Authority (CA) details"
            },
            "PageOfCertificateAuthority": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/CertificateAuthority"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "PageOfBundle": {
                "type": "object",
                "properties": {
                    "elements": {
                        "type": "array",
                        "description": "The list of elements included in this page",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Bundle"
                        }
                    },
                    "pageMetadata": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "HostDecommissionSpec": {
                "required": [
                    "fqdn"
                ],
                "type": "object",
                "properties": {
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN of the host"
                    }
                },
                "description": "This specification contains host details required to decommission a host from VMware Cloud Foundation"
            }
        }
    }
}