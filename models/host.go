// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Host Represents an Esxi host in the system
//
// swagger:model Host
type Host struct {

	// Bundle repositry datastore for this host
	BundleRepoDatastore string `json:"bundleRepoDatastore,omitempty"`

	// Information about the cluster this host is part of
	Cluster *ClusterReference `json:"cluster,omitempty"`

	// Information about the host compatible storage type
	CompatibleStorageType string `json:"compatibleStorageType,omitempty"`

	// Information about CPUs on the host
	CPU *CPU `json:"cpu,omitempty"`

	// Information about the domain this host is part of
	Domain *DomainReference `json:"domain,omitempty"`

	// ESXi software version of the host
	EsxiVersion string `json:"esxiVersion,omitempty"`

	// FQDN of the host
	Fqdn string `json:"fqdn,omitempty"`

	// Hardware model of the host
	HardwareModel string `json:"hardwareModel,omitempty"`

	// Hardware vendor of the host
	HardwareVendor string `json:"hardwareVendor,omitempty"`

	// Information about the storage type of the host, true if the host is hybrid.
	Hybrid bool `json:"hybrid,omitempty"`

	// ID of the host
	ID string `json:"id,omitempty"`

	// Information about IP addresses assigned to the host
	IPAddresses []*IPAddress `json:"ipAddresses"`

	// Is the host a primary host in VxRail HCI Context
	IsPrimary bool `json:"isPrimary,omitempty"`

	// Information about memory on the host
	Memory *Memory `json:"memory,omitempty"`

	// Information about the network pool this host is part of
	Networkpool *NetworkPoolReference `json:"networkpool,omitempty"`

	// Information about Networks on the host
	Networks []*Network `json:"networks"`

	// Information about physical NICs on the host
	PhysicalNics []*PhysicalNic `json:"physicalNics"`

	// Serial Number of the host
	SerialNumber *OptionalOfstring `json:"serialNumber,omitempty"`

	// Software Spec contains base image, hardware support manager, and components details
	SoftwareInfo *SoftwareInfo `json:"softwareInfo,omitempty"`

	// SSH Thumbprint of the host
	SSHThumbprint *OptionalOfstring `json:"sshThumbprint,omitempty"`

	// SSL Thumbprint of the host
	SSLThumbprint *OptionalOfstring `json:"sslThumbprint,omitempty"`

	// Status of the host
	// Example: One among: ASSIGNED, UNASSIGNED_USEABLE, UNASSIGNED_UNUSEABLE
	Status string `json:"status,omitempty"`

	// Information about storage on the host
	Storage *Storage `json:"storage,omitempty"`

	// Deprecated, this list will always be returned empty
	Tags []*Tag `json:"tags"`
}

// Validate validates this host
func (m *Host) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkpool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHThumbprint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSLThumbprint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Host) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Host) validateCPU(formats strfmt.Registry) error {
	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if m.CPU != nil {
		if err := m.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *Host) validateDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	if m.Domain != nil {
		if err := m.Domain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *Host) validateIPAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.IPAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.IPAddresses); i++ {
		if swag.IsZero(m.IPAddresses[i]) { // not required
			continue
		}

		if m.IPAddresses[i] != nil {
			if err := m.IPAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipAddresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ipAddresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Host) validateMemory(formats strfmt.Registry) error {
	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if m.Memory != nil {
		if err := m.Memory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

func (m *Host) validateNetworkpool(formats strfmt.Registry) error {
	if swag.IsZero(m.Networkpool) { // not required
		return nil
	}

	if m.Networkpool != nil {
		if err := m.Networkpool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkpool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkpool")
			}
			return err
		}
	}

	return nil
}

func (m *Host) validateNetworks(formats strfmt.Registry) error {
	if swag.IsZero(m.Networks) { // not required
		return nil
	}

	for i := 0; i < len(m.Networks); i++ {
		if swag.IsZero(m.Networks[i]) { // not required
			continue
		}

		if m.Networks[i] != nil {
			if err := m.Networks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Host) validatePhysicalNics(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalNics) { // not required
		return nil
	}

	for i := 0; i < len(m.PhysicalNics); i++ {
		if swag.IsZero(m.PhysicalNics[i]) { // not required
			continue
		}

		if m.PhysicalNics[i] != nil {
			if err := m.PhysicalNics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("physicalNics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("physicalNics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Host) validateSerialNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.SerialNumber) { // not required
		return nil
	}

	if m.SerialNumber != nil {
		if err := m.SerialNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serialNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serialNumber")
			}
			return err
		}
	}

	return nil
}

func (m *Host) validateSoftwareInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareInfo) { // not required
		return nil
	}

	if m.SoftwareInfo != nil {
		if err := m.SoftwareInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("softwareInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("softwareInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Host) validateSSHThumbprint(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHThumbprint) { // not required
		return nil
	}

	if m.SSHThumbprint != nil {
		if err := m.SSHThumbprint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshThumbprint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshThumbprint")
			}
			return err
		}
	}

	return nil
}

func (m *Host) validateSSLThumbprint(formats strfmt.Registry) error {
	if swag.IsZero(m.SSLThumbprint) { // not required
		return nil
	}

	if m.SSLThumbprint != nil {
		if err := m.SSLThumbprint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sslThumbprint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sslThumbprint")
			}
			return err
		}
	}

	return nil
}

func (m *Host) validateStorage(formats strfmt.Registry) error {
	if swag.IsZero(m.Storage) { // not required
		return nil
	}

	if m.Storage != nil {
		if err := m.Storage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage")
			}
			return err
		}
	}

	return nil
}

func (m *Host) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this host based on the context it is used
func (m *Host) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCPU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkpool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSerialNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHThumbprint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSLThumbprint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Host) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {

		if swag.IsZero(m.Cluster) { // not required
			return nil
		}

		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Host) contextValidateCPU(ctx context.Context, formats strfmt.Registry) error {

	if m.CPU != nil {

		if swag.IsZero(m.CPU) { // not required
			return nil
		}

		if err := m.CPU.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *Host) contextValidateDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.Domain != nil {

		if swag.IsZero(m.Domain) { // not required
			return nil
		}

		if err := m.Domain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *Host) contextValidateIPAddresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPAddresses); i++ {

		if m.IPAddresses[i] != nil {

			if swag.IsZero(m.IPAddresses[i]) { // not required
				return nil
			}

			if err := m.IPAddresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipAddresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ipAddresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Host) contextValidateMemory(ctx context.Context, formats strfmt.Registry) error {

	if m.Memory != nil {

		if swag.IsZero(m.Memory) { // not required
			return nil
		}

		if err := m.Memory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

func (m *Host) contextValidateNetworkpool(ctx context.Context, formats strfmt.Registry) error {

	if m.Networkpool != nil {

		if swag.IsZero(m.Networkpool) { // not required
			return nil
		}

		if err := m.Networkpool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkpool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkpool")
			}
			return err
		}
	}

	return nil
}

func (m *Host) contextValidateNetworks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Networks); i++ {

		if m.Networks[i] != nil {

			if swag.IsZero(m.Networks[i]) { // not required
				return nil
			}

			if err := m.Networks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Host) contextValidatePhysicalNics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhysicalNics); i++ {

		if m.PhysicalNics[i] != nil {

			if swag.IsZero(m.PhysicalNics[i]) { // not required
				return nil
			}

			if err := m.PhysicalNics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("physicalNics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("physicalNics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Host) contextValidateSerialNumber(ctx context.Context, formats strfmt.Registry) error {

	if m.SerialNumber != nil {

		if swag.IsZero(m.SerialNumber) { // not required
			return nil
		}

		if err := m.SerialNumber.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serialNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serialNumber")
			}
			return err
		}
	}

	return nil
}

func (m *Host) contextValidateSoftwareInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SoftwareInfo != nil {

		if swag.IsZero(m.SoftwareInfo) { // not required
			return nil
		}

		if err := m.SoftwareInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("softwareInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("softwareInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Host) contextValidateSSHThumbprint(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHThumbprint != nil {

		if swag.IsZero(m.SSHThumbprint) { // not required
			return nil
		}

		if err := m.SSHThumbprint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshThumbprint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshThumbprint")
			}
			return err
		}
	}

	return nil
}

func (m *Host) contextValidateSSLThumbprint(ctx context.Context, formats strfmt.Registry) error {

	if m.SSLThumbprint != nil {

		if swag.IsZero(m.SSLThumbprint) { // not required
			return nil
		}

		if err := m.SSLThumbprint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sslThumbprint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sslThumbprint")
			}
			return err
		}
	}

	return nil
}

func (m *Host) contextValidateStorage(ctx context.Context, formats strfmt.Registry) error {

	if m.Storage != nil {

		if swag.IsZero(m.Storage) { // not required
			return nil
		}

		if err := m.Storage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage")
			}
			return err
		}
	}

	return nil
}

func (m *Host) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Host) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Host) UnmarshalBinary(b []byte) error {
	var res Host
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
