// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Error Error response containing a minor error code, a localized error message, a localized remediation message and optionally a reference token to correlate the error with the logs
//
// swagger:model Error
type Error struct {

	// The arguments used to localize the message, Can be used by scripts to automate the error processing.
	Arguments []string `json:"arguments"`

	// The underlying cause exceptions.
	Causes []*ErrorCause `json:"causes"`

	// The error context (e.g. the component where it occurred).
	Context map[string]string `json:"context,omitempty"`

	// The minor error code
	// Read Only: true
	ErrorCode string `json:"errorCode,omitempty"`

	// The error type
	// Read Only: true
	ErrorType string `json:"errorType,omitempty"`

	// The localized error message
	Message string `json:"message,omitempty"`

	// The nested errors when the error is a composite one
	NestedErrors []*Error `json:"nestedErrors"`

	// A reference token correlating the error with the relevant detailed error logs. Should be sent to the service provider when reporting issues.
	ReferenceToken string `json:"referenceToken,omitempty"`

	// The localized remediation error message
	RemediationMessage string `json:"remediationMessage,omitempty"`
}

// Validate validates this error
func (m *Error) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCauses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNestedErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Error) validateCauses(formats strfmt.Registry) error {
	if swag.IsZero(m.Causes) { // not required
		return nil
	}

	for i := 0; i < len(m.Causes); i++ {
		if swag.IsZero(m.Causes[i]) { // not required
			continue
		}

		if m.Causes[i] != nil {
			if err := m.Causes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("causes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("causes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Error) validateNestedErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.NestedErrors) { // not required
		return nil
	}

	for i := 0; i < len(m.NestedErrors); i++ {
		if swag.IsZero(m.NestedErrors[i]) { // not required
			continue
		}

		if m.NestedErrors[i] != nil {
			if err := m.NestedErrors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nestedErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nestedErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this error based on the context it is used
func (m *Error) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCauses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNestedErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Error) contextValidateCauses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Causes); i++ {

		if m.Causes[i] != nil {

			if swag.IsZero(m.Causes[i]) { // not required
				return nil
			}

			if err := m.Causes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("causes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("causes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Error) contextValidateErrorCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "errorCode", "body", string(m.ErrorCode)); err != nil {
		return err
	}

	return nil
}

func (m *Error) contextValidateErrorType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "errorType", "body", string(m.ErrorType)); err != nil {
		return err
	}

	return nil
}

func (m *Error) contextValidateNestedErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NestedErrors); i++ {

		if m.NestedErrors[i] != nil {

			if swag.IsZero(m.NestedErrors[i]) { // not required
				return nil
			}

			if err := m.NestedErrors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nestedErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nestedErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Error) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Error) UnmarshalBinary(b []byte) error {
	var res Error
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
