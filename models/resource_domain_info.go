// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceDomainInfo Information about the domain the resource belongs to
//
// swagger:model ResourceDomainInfo
type ResourceDomainInfo struct {

	// Id of the domain
	DomainID string `json:"domainId,omitempty"`

	// Name of the domain
	DomainName string `json:"domainName,omitempty"`

	// Type of the domain
	// Enum: [MANAGEMENT VI]
	DomainType string `json:"domainType,omitempty"`
}

// Validate validates this resource domain info
func (m *ResourceDomainInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomainType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var resourceDomainInfoTypeDomainTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MANAGEMENT","VI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceDomainInfoTypeDomainTypePropEnum = append(resourceDomainInfoTypeDomainTypePropEnum, v)
	}
}

const (

	// ResourceDomainInfoDomainTypeMANAGEMENT captures enum value "MANAGEMENT"
	ResourceDomainInfoDomainTypeMANAGEMENT string = "MANAGEMENT"

	// ResourceDomainInfoDomainTypeVI captures enum value "VI"
	ResourceDomainInfoDomainTypeVI string = "VI"
)

// prop value enum
func (m *ResourceDomainInfo) validateDomainTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resourceDomainInfoTypeDomainTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResourceDomainInfo) validateDomainType(formats strfmt.Registry) error {
	if swag.IsZero(m.DomainType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDomainTypeEnum("domainType", "body", m.DomainType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resource domain info based on context it is used
func (m *ResourceDomainInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResourceDomainInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceDomainInfo) UnmarshalBinary(b []byte) error {
	var res ResourceDomainInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
