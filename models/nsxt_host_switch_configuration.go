// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NSXTHostSwitchConfiguration The configurations to applied on the Host switch.
//
// swagger:model NsxtHostSwitchConfiguration
type NSXTHostSwitchConfiguration struct {

	// The IP address Pool name. For DHCP, this field will be empty
	IPAddressPoolName string `json:"ipAddressPoolName,omitempty"`

	// The name of the uplink profile
	UplinkProfileName string `json:"uplinkProfileName,omitempty"`

	// The name of the vSphere Distributed Switch
	VdsName string `json:"vdsName,omitempty"`

	// The map of vSphere Distributed Switch uplinks to the NSX switch uplinks.
	VdsUplinkToNsxUplink []*VdsUplinkToNsxUplinkConfiguration `json:"vdsUplinkToNsxUplink"`
}

// Validate validates this Nsxt host switch configuration
func (m *NSXTHostSwitchConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVdsUplinkToNsxUplink(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NSXTHostSwitchConfiguration) validateVdsUplinkToNsxUplink(formats strfmt.Registry) error {
	if swag.IsZero(m.VdsUplinkToNsxUplink) { // not required
		return nil
	}

	for i := 0; i < len(m.VdsUplinkToNsxUplink); i++ {
		if swag.IsZero(m.VdsUplinkToNsxUplink[i]) { // not required
			continue
		}

		if m.VdsUplinkToNsxUplink[i] != nil {
			if err := m.VdsUplinkToNsxUplink[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vdsUplinkToNsxUplink" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vdsUplinkToNsxUplink" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this Nsxt host switch configuration based on the context it is used
func (m *NSXTHostSwitchConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVdsUplinkToNsxUplink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NSXTHostSwitchConfiguration) contextValidateVdsUplinkToNsxUplink(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VdsUplinkToNsxUplink); i++ {

		if m.VdsUplinkToNsxUplink[i] != nil {

			if swag.IsZero(m.VdsUplinkToNsxUplink[i]) { // not required
				return nil
			}

			if err := m.VdsUplinkToNsxUplink[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vdsUplinkToNsxUplink" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vdsUplinkToNsxUplink" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NSXTHostSwitchConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NSXTHostSwitchConfiguration) UnmarshalBinary(b []byte) error {
	var res NSXTHostSwitchConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
