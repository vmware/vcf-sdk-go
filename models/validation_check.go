// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ValidationCheck Represents a validation check
//
// swagger:model ValidationCheck
type ValidationCheck struct {

	// Description of the validation check
	Description string `json:"description,omitempty"`

	// Error response associated with the validation check
	ErrorResponse *Error `json:"errorResponse,omitempty"`

	// List of one or more validation checks that are performed as part of the validation
	NestedValidationChecks []*ValidationCheck `json:"nestedValidationChecks"`

	// Result status of the validation check after it has completed its execution
	// Example: One among: IN_PROGRESS, SUCCEEDED, FAILED, SKIPPED, CANCELLED, CANCELLATION_IN_PROGRESS
	ResultStatus string `json:"resultStatus,omitempty"`

	// Severity of the validation check
	// Example: One among: WARNING, ERROR, INFO
	Severity string `json:"severity,omitempty"`
}

// Validate validates this validation check
func (m *ValidationCheck) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNestedValidationChecks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidationCheck) validateErrorResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorResponse) { // not required
		return nil
	}

	if m.ErrorResponse != nil {
		if err := m.ErrorResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorResponse")
			}
			return err
		}
	}

	return nil
}

func (m *ValidationCheck) validateNestedValidationChecks(formats strfmt.Registry) error {
	if swag.IsZero(m.NestedValidationChecks) { // not required
		return nil
	}

	for i := 0; i < len(m.NestedValidationChecks); i++ {
		if swag.IsZero(m.NestedValidationChecks[i]) { // not required
			continue
		}

		if m.NestedValidationChecks[i] != nil {
			if err := m.NestedValidationChecks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nestedValidationChecks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nestedValidationChecks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this validation check based on the context it is used
func (m *ValidationCheck) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrorResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNestedValidationChecks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidationCheck) contextValidateErrorResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.ErrorResponse != nil {

		if swag.IsZero(m.ErrorResponse) { // not required
			return nil
		}

		if err := m.ErrorResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorResponse")
			}
			return err
		}
	}

	return nil
}

func (m *ValidationCheck) contextValidateNestedValidationChecks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NestedValidationChecks); i++ {

		if m.NestedValidationChecks[i] != nil {

			if swag.IsZero(m.NestedValidationChecks[i]) { // not required
				return nil
			}

			if err := m.NestedValidationChecks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nestedValidationChecks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nestedValidationChecks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidationCheck) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidationCheck) UnmarshalBinary(b []byte) error {
	var res ValidationCheck
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
