// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NiocTrafficResourceAllocation Specify network traffic allocation for a resource
//
// swagger:model NiocTrafficResourceAllocation
type NiocTrafficResourceAllocation struct {

	// limit
	// Required: true
	Limit *int64 `json:"limit"`

	// reservation
	// Required: true
	Reservation *int64 `json:"reservation"`

	// shares info
	// Required: true
	SharesInfo *SharesInfo `json:"sharesInfo"`
}

// Validate validates this nioc traffic resource allocation
func (m *NiocTrafficResourceAllocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReservation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharesInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NiocTrafficResourceAllocation) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

func (m *NiocTrafficResourceAllocation) validateReservation(formats strfmt.Registry) error {

	if err := validate.Required("reservation", "body", m.Reservation); err != nil {
		return err
	}

	return nil
}

func (m *NiocTrafficResourceAllocation) validateSharesInfo(formats strfmt.Registry) error {

	if err := validate.Required("sharesInfo", "body", m.SharesInfo); err != nil {
		return err
	}

	if m.SharesInfo != nil {
		if err := m.SharesInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharesInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharesInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nioc traffic resource allocation based on the context it is used
func (m *NiocTrafficResourceAllocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSharesInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NiocTrafficResourceAllocation) contextValidateSharesInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SharesInfo != nil {

		if err := m.SharesInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharesInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharesInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NiocTrafficResourceAllocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NiocTrafficResourceAllocation) UnmarshalBinary(b []byte) error {
	var res NiocTrafficResourceAllocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
