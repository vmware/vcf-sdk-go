// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Classification Describes the source of the classification,classification can be acquired by a classifier, user input or inherited from a parent entity.
//
// swagger:model Classification
type Classification struct {

	// Description of the classification
	Description string `json:"description,omitempty"`

	// Source of the classification
	// Enum: [CLASSIFIER USER_INPUT INHERITED]
	Source string `json:"source,omitempty"`

	// Type of the classification, e.g. domainType
	Type string `json:"type,omitempty"`

	// Value of the classification, e.g. MGMT_DOMAIN
	Value string `json:"value,omitempty"`
}

// Validate validates this classification
func (m *Classification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var classificationTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLASSIFIER","USER_INPUT","INHERITED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		classificationTypeSourcePropEnum = append(classificationTypeSourcePropEnum, v)
	}
}

const (

	// ClassificationSourceCLASSIFIER captures enum value "CLASSIFIER"
	ClassificationSourceCLASSIFIER string = "CLASSIFIER"

	// ClassificationSourceUSERINPUT captures enum value "USER_INPUT"
	ClassificationSourceUSERINPUT string = "USER_INPUT"

	// ClassificationSourceINHERITED captures enum value "INHERITED"
	ClassificationSourceINHERITED string = "INHERITED"
)

// prop value enum
func (m *Classification) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, classificationTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Classification) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this classification based on context it is used
func (m *Classification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Classification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Classification) UnmarshalBinary(b []byte) error {
	var res Classification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
