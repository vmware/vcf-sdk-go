// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPAddressPoolSubnetSpec This specification contains the parameters required to create an IP address pool subnet
//
// swagger:model IpAddressPoolSubnetSpec
type IPAddressPoolSubnetSpec struct {

	// The subnet representation, contains the network address and the prefix length
	// Required: true
	Cidr *string `json:"cidr"`

	// The default gateway address of the network
	// Required: true
	Gateway *string `json:"gateway"`

	// List of the IP allocation ranges. Atleast 1 IP address range has to be specified
	// Required: true
	IPAddressPoolRanges []*IPAddressPoolRangeSpec `json:"ipAddressPoolRanges"`
}

// Validate validates this Ip address pool subnet spec
func (m *IPAddressPoolSubnetSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddressPoolRanges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPAddressPoolSubnetSpec) validateCidr(formats strfmt.Registry) error {

	if err := validate.Required("cidr", "body", m.Cidr); err != nil {
		return err
	}

	return nil
}

func (m *IPAddressPoolSubnetSpec) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *IPAddressPoolSubnetSpec) validateIPAddressPoolRanges(formats strfmt.Registry) error {

	if err := validate.Required("ipAddressPoolRanges", "body", m.IPAddressPoolRanges); err != nil {
		return err
	}

	for i := 0; i < len(m.IPAddressPoolRanges); i++ {
		if swag.IsZero(m.IPAddressPoolRanges[i]) { // not required
			continue
		}

		if m.IPAddressPoolRanges[i] != nil {
			if err := m.IPAddressPoolRanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipAddressPoolRanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ipAddressPoolRanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this Ip address pool subnet spec based on the context it is used
func (m *IPAddressPoolSubnetSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIPAddressPoolRanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPAddressPoolSubnetSpec) contextValidateIPAddressPoolRanges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPAddressPoolRanges); i++ {

		if m.IPAddressPoolRanges[i] != nil {

			if swag.IsZero(m.IPAddressPoolRanges[i]) { // not required
				return nil
			}

			if err := m.IPAddressPoolRanges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipAddressPoolRanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ipAddressPoolRanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPAddressPoolSubnetSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPAddressPoolSubnetSpec) UnmarshalBinary(b []byte) error {
	var res IPAddressPoolSubnetSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
