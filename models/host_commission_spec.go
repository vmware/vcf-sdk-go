// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HostCommissionSpec  This specification contains the input to commission a host to VMware Cloud Foundation
//
// swagger:model HostCommissionSpec
type HostCommissionSpec struct {

	// FQDN of the host
	// Required: true
	Fqdn *string `json:"fqdn"`

	// ID of the network pool to associate the host with
	// Required: true
	NetworkPoolID *string `json:"networkPoolId"`

	// Name of the network pool to associate the host with
	NetworkPoolName string `json:"networkPoolName,omitempty"`

	// Password of the host
	// Required: true
	Password *string `json:"password"`

	// SSH thumbprint of the host
	SSHThumbprint string `json:"sshThumbprint,omitempty"`

	// SSL thumbprint of the host
	SSLThumbprint string `json:"sslThumbprint,omitempty"`

	// Storage Type
	// Example: One among: VSAN, VSAN_ESA, VSAN_REMOTE, NFS, VMFS_FC, VVOL
	// Required: true
	StorageType *string `json:"storageType"`

	// Username of the host
	// Required: true
	Username *string `json:"username"`

	// vVol Storage Protocol Type
	// Example: One among: ISCSI, NFS, FC
	VvolStorageProtocolType string `json:"vvolStorageProtocolType,omitempty"`
}

// Validate validates this host commission spec
func (m *HostCommissionSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFqdn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkPoolID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostCommissionSpec) validateFqdn(formats strfmt.Registry) error {

	if err := validate.Required("fqdn", "body", m.Fqdn); err != nil {
		return err
	}

	return nil
}

func (m *HostCommissionSpec) validateNetworkPoolID(formats strfmt.Registry) error {

	if err := validate.Required("networkPoolId", "body", m.NetworkPoolID); err != nil {
		return err
	}

	return nil
}

func (m *HostCommissionSpec) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *HostCommissionSpec) validateStorageType(formats strfmt.Registry) error {

	if err := validate.Required("storageType", "body", m.StorageType); err != nil {
		return err
	}

	return nil
}

func (m *HostCommissionSpec) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this host commission spec based on context it is used
func (m *HostCommissionSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HostCommissionSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostCommissionSpec) UnmarshalBinary(b []byte) error {
	var res HostCommissionSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
