// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialValidationCheck Represents the validation check
//
// swagger:model CredentialValidationCheck
type CredentialValidationCheck struct {

	// Credential type
	// Example: One among: SSO, SSH, API, FTP, AUDIT
	// Required: true
	CredentialType *string `json:"credentialType"`

	// Description of the resource validation
	Description string `json:"description,omitempty"`

	// List of errors in case of a failure
	Errors []*Error `json:"errors"`

	// Password details with validity and expiry info
	PasswordDetails *PasswordDetails `json:"passwordDetails,omitempty"`

	// Resource ID
	ResourceID string `json:"resourceId,omitempty"`

	// Resource name
	ResourceName string `json:"resourceName,omitempty"`

	// Authenticated Resource Type
	// Example: One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, BACKUP
	// Required: true
	ResourceType *string `json:"resourceType"`

	// Result status of the validation check
	// Example: One among: SUCCEEDED, FAILED
	ResultStatus string `json:"resultStatus,omitempty"`

	// Username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this credential validation check
func (m *CredentialValidationCheck) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentialType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialValidationCheck) validateCredentialType(formats strfmt.Registry) error {

	if err := validate.Required("credentialType", "body", m.CredentialType); err != nil {
		return err
	}

	return nil
}

func (m *CredentialValidationCheck) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CredentialValidationCheck) validatePasswordDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordDetails) { // not required
		return nil
	}

	if m.PasswordDetails != nil {
		if err := m.PasswordDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("passwordDetails")
			}
			return err
		}
	}

	return nil
}

func (m *CredentialValidationCheck) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *CredentialValidationCheck) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this credential validation check based on the context it is used
func (m *CredentialValidationCheck) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePasswordDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialValidationCheck) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {

			if swag.IsZero(m.Errors[i]) { // not required
				return nil
			}

			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CredentialValidationCheck) contextValidatePasswordDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordDetails != nil {

		if swag.IsZero(m.PasswordDetails) { // not required
			return nil
		}

		if err := m.PasswordDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("passwordDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialValidationCheck) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialValidationCheck) UnmarshalBinary(b []byte) error {
	var res CredentialValidationCheck
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
