// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseUpdate Update to a given release
//
// swagger:model ReleaseUpdate
type ReleaseUpdate struct {

	// Base product version for the release
	// Required: true
	BaseProductVersion *string `json:"baseProductVersion"`

	// Description of the release update
	// Required: true
	Description *string `json:"description"`

	// Release version
	// Required: true
	ID *string `json:"id"`

	// Product name for which the release update is provided
	// Required: true
	ProductName *string `json:"productName"`

	// Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format
	// Required: true
	ReleaseDate *string `json:"releaseDate"`

	// URL to the release update
	ReleaseUpdateURL *URL `json:"releaseUpdateURL,omitempty"`
}

// Validate validates this release update
func (m *ReleaseUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseProductVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseUpdateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseUpdate) validateBaseProductVersion(formats strfmt.Registry) error {

	if err := validate.Required("baseProductVersion", "body", m.BaseProductVersion); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseUpdate) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseUpdate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseUpdate) validateProductName(formats strfmt.Registry) error {

	if err := validate.Required("productName", "body", m.ProductName); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseUpdate) validateReleaseDate(formats strfmt.Registry) error {

	if err := validate.Required("releaseDate", "body", m.ReleaseDate); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseUpdate) validateReleaseUpdateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseUpdateURL) { // not required
		return nil
	}

	if m.ReleaseUpdateURL != nil {
		if err := m.ReleaseUpdateURL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseUpdateURL")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("releaseUpdateURL")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this release update based on the context it is used
func (m *ReleaseUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReleaseUpdateURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseUpdate) contextValidateReleaseUpdateURL(ctx context.Context, formats strfmt.Registry) error {

	if m.ReleaseUpdateURL != nil {

		if swag.IsZero(m.ReleaseUpdateURL) { // not required
			return nil
		}

		if err := m.ReleaseUpdateURL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseUpdateURL")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("releaseUpdateURL")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseUpdate) UnmarshalBinary(b []byte) error {
	var res ReleaseUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
