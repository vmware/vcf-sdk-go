// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TokenPair This contains the access token and the refresh token for the user API access.
//
// swagger:model TokenPair
type TokenPair struct {

	// Bearer token that can be used to make public API calls
	AccessToken string `json:"accessToken,omitempty"`

	// Refresh token that can be used to request new access token
	RefreshToken *RefreshToken `json:"refreshToken,omitempty"`
}

// Validate validates this token pair
func (m *TokenPair) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRefreshToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenPair) validateRefreshToken(formats strfmt.Registry) error {
	if swag.IsZero(m.RefreshToken) { // not required
		return nil
	}

	if m.RefreshToken != nil {
		if err := m.RefreshToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshToken")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this token pair based on the context it is used
func (m *TokenPair) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRefreshToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenPair) contextValidateRefreshToken(ctx context.Context, formats strfmt.Registry) error {

	if m.RefreshToken != nil {

		if swag.IsZero(m.RefreshToken) { // not required
			return nil
		}

		if err := m.RefreshToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshToken")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TokenPair) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenPair) UnmarshalBinary(b []byte) error {
	var res TokenPair
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
