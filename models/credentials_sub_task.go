// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CredentialsSubTask Represents the credentials sub-task in the system
//
// swagger:model CredentialsSubTask
type CredentialsSubTask struct {

	// Credential sub-task creation timestamp
	CreationTimestamp string `json:"creationTimestamp,omitempty"`

	// Credential sub-task credential type
	CredentialType string `json:"credentialType,omitempty"`

	// List of dependent sub-tasks of the credential sub-task
	DependentSubTasks []*CredentialsSubTask `json:"dependentSubTasks"`

	// Credential sub-task description
	Description string `json:"description,omitempty"`

	// Credential sub-task entity type
	EntityType string `json:"entityType,omitempty"`

	// List of errors in case of a failure
	Errors []*Error `json:"errors"`

	// Credential sub-task ID
	ID string `json:"id,omitempty"`

	// Credential sub-task name
	Name string `json:"name,omitempty"`

	// Credential sub-task new password
	NewPassword string `json:"newPassword,omitempty"`

	// Credential sub-task old password
	OldPassword string `json:"oldPassword,omitempty"`

	// Resource name
	ResourceName string `json:"resourceName,omitempty"`

	// Credential sub-task status
	// Example: One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED, USER_CANCELLED, INCONSISTENT
	Status string `json:"status,omitempty"`

	// Credential sub-task username
	Username string `json:"username,omitempty"`
}

// Validate validates this credentials sub task
func (m *CredentialsSubTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDependentSubTasks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialsSubTask) validateDependentSubTasks(formats strfmt.Registry) error {
	if swag.IsZero(m.DependentSubTasks) { // not required
		return nil
	}

	for i := 0; i < len(m.DependentSubTasks); i++ {
		if swag.IsZero(m.DependentSubTasks[i]) { // not required
			continue
		}

		if m.DependentSubTasks[i] != nil {
			if err := m.DependentSubTasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependentSubTasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dependentSubTasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CredentialsSubTask) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this credentials sub task based on the context it is used
func (m *CredentialsSubTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDependentSubTasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialsSubTask) contextValidateDependentSubTasks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DependentSubTasks); i++ {

		if m.DependentSubTasks[i] != nil {

			if swag.IsZero(m.DependentSubTasks[i]) { // not required
				return nil
			}

			if err := m.DependentSubTasks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependentSubTasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dependentSubTasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CredentialsSubTask) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {

			if swag.IsZero(m.Errors[i]) { // not required
				return nil
			}

			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialsSubTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialsSubTask) UnmarshalBinary(b []byte) error {
	var res CredentialsSubTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
