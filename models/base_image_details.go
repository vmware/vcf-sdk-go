// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BaseImageDetails BaseImage contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain.
//
// swagger:model BaseImageDetails
type BaseImageDetails struct {

	// BaseImage display name
	// Example: 7.0.0-0.0.30340198
	// Required: true
	DisplayName *string `json:"displayName"`

	// BaseImage display version
	// Required: true
	DisplayVersion *string `json:"displayVersion"`

	// BaseImage release date
	ReleaseDate *Calendar `json:"releaseDate,omitempty"`
}

// Validate validates this base image details
func (m *BaseImageDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseImageDetails) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *BaseImageDetails) validateDisplayVersion(formats strfmt.Registry) error {

	if err := validate.Required("displayVersion", "body", m.DisplayVersion); err != nil {
		return err
	}

	return nil
}

func (m *BaseImageDetails) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseDate) { // not required
		return nil
	}

	if m.ReleaseDate != nil {
		if err := m.ReleaseDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("releaseDate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this base image details based on the context it is used
func (m *BaseImageDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReleaseDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseImageDetails) contextValidateReleaseDate(ctx context.Context, formats strfmt.Registry) error {

	if m.ReleaseDate != nil {

		if swag.IsZero(m.ReleaseDate) { // not required
			return nil
		}

		if err := m.ReleaseDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("releaseDate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseImageDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseImageDetails) UnmarshalBinary(b []byte) error {
	var res BaseImageDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
