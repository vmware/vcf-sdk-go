// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NSXTUpgradeUserInputSpec NSX Upgrade User Input Specification
//
// swagger:model NsxtUpgradeUserInputSpec
type NSXTUpgradeUserInputSpec struct {

	// List of edge clusters information if explicit selection is to be made
	NSXTEdgeClusterUpgradeSpecs []*NSXTEdgeClusterUpgradeSpec `json:"nsxtEdgeClusterUpgradeSpecs"`

	// List of host clusters information if explicit selection is to be made
	NSXTHostClusterUpgradeSpecs []*NSXTHostClusterUpgradeSpec `json:"nsxtHostClusterUpgradeSpecs"`

	// Identifier of the NSX instance
	NSXTID string `json:"nsxtId,omitempty"`

	// List of host clusters information if explicit selection is to be made
	NSXTUpgradeOptions *NSXTUpgradeOptions `json:"nsxtUpgradeOptions,omitempty"`
}

// Validate validates this Nsxt upgrade user input spec
func (m *NSXTUpgradeUserInputSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNSXTEdgeClusterUpgradeSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNSXTHostClusterUpgradeSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNSXTUpgradeOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NSXTUpgradeUserInputSpec) validateNSXTEdgeClusterUpgradeSpecs(formats strfmt.Registry) error {
	if swag.IsZero(m.NSXTEdgeClusterUpgradeSpecs) { // not required
		return nil
	}

	for i := 0; i < len(m.NSXTEdgeClusterUpgradeSpecs); i++ {
		if swag.IsZero(m.NSXTEdgeClusterUpgradeSpecs[i]) { // not required
			continue
		}

		if m.NSXTEdgeClusterUpgradeSpecs[i] != nil {
			if err := m.NSXTEdgeClusterUpgradeSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtEdgeClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtEdgeClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NSXTUpgradeUserInputSpec) validateNSXTHostClusterUpgradeSpecs(formats strfmt.Registry) error {
	if swag.IsZero(m.NSXTHostClusterUpgradeSpecs) { // not required
		return nil
	}

	for i := 0; i < len(m.NSXTHostClusterUpgradeSpecs); i++ {
		if swag.IsZero(m.NSXTHostClusterUpgradeSpecs[i]) { // not required
			continue
		}

		if m.NSXTHostClusterUpgradeSpecs[i] != nil {
			if err := m.NSXTHostClusterUpgradeSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtHostClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtHostClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NSXTUpgradeUserInputSpec) validateNSXTUpgradeOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.NSXTUpgradeOptions) { // not required
		return nil
	}

	if m.NSXTUpgradeOptions != nil {
		if err := m.NSXTUpgradeOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtUpgradeOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtUpgradeOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Nsxt upgrade user input spec based on the context it is used
func (m *NSXTUpgradeUserInputSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNSXTEdgeClusterUpgradeSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNSXTHostClusterUpgradeSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNSXTUpgradeOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NSXTUpgradeUserInputSpec) contextValidateNSXTEdgeClusterUpgradeSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NSXTEdgeClusterUpgradeSpecs); i++ {

		if m.NSXTEdgeClusterUpgradeSpecs[i] != nil {

			if swag.IsZero(m.NSXTEdgeClusterUpgradeSpecs[i]) { // not required
				return nil
			}

			if err := m.NSXTEdgeClusterUpgradeSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtEdgeClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtEdgeClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NSXTUpgradeUserInputSpec) contextValidateNSXTHostClusterUpgradeSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NSXTHostClusterUpgradeSpecs); i++ {

		if m.NSXTHostClusterUpgradeSpecs[i] != nil {

			if swag.IsZero(m.NSXTHostClusterUpgradeSpecs[i]) { // not required
				return nil
			}

			if err := m.NSXTHostClusterUpgradeSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtHostClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtHostClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NSXTUpgradeUserInputSpec) contextValidateNSXTUpgradeOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.NSXTUpgradeOptions != nil {

		if swag.IsZero(m.NSXTUpgradeOptions) { // not required
			return nil
		}

		if err := m.NSXTUpgradeOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtUpgradeOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtUpgradeOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NSXTUpgradeUserInputSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NSXTUpgradeUserInputSpec) UnmarshalBinary(b []byte) error {
	var res NSXTUpgradeUserInputSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
