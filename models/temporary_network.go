// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TemporaryNetwork Temporary Network for vCenter Upgrade
//
// swagger:model TemporaryNetwork
type TemporaryNetwork struct {

	// Gateway for vCenter Upgrade temporary network
	// Required: true
	Gateway *string `json:"gateway"`

	// IP Address for vCenter Upgrade temporary network
	// Required: true
	IPAddress *string `json:"ipAddress"`

	// Subnet Mask for vCenter Upgrade temporary network
	// Required: true
	SubnetMask *string `json:"subnetMask"`
}

// Validate validates this temporary network
func (m *TemporaryNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetMask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemporaryNetwork) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *TemporaryNetwork) validateIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("ipAddress", "body", m.IPAddress); err != nil {
		return err
	}

	return nil
}

func (m *TemporaryNetwork) validateSubnetMask(formats strfmt.Registry) error {

	if err := validate.Required("subnetMask", "body", m.SubnetMask); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this temporary network based on context it is used
func (m *TemporaryNetwork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TemporaryNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TemporaryNetwork) UnmarshalBinary(b []byte) error {
	var res TemporaryNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
