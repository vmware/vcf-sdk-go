// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrustedCertificateSpec This specification contains certificate & certificate usage
//
// swagger:model TrustedCertificateSpec
type TrustedCertificateSpec struct {

	// Certificate in PEM format
	// Example: -----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----
	// Required: true
	Certificate *string `json:"certificate"`

	// Certificate usage
	// Example: TRUSTED_FOR_OUTBOUND
	// Required: true
	CertificateUsageType *string `json:"certificateUsageType"`
}

// Validate validates this trusted certificate spec
func (m *TrustedCertificateSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateUsageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrustedCertificateSpec) validateCertificate(formats strfmt.Registry) error {

	if err := validate.Required("certificate", "body", m.Certificate); err != nil {
		return err
	}

	return nil
}

func (m *TrustedCertificateSpec) validateCertificateUsageType(formats strfmt.Registry) error {

	if err := validate.Required("certificateUsageType", "body", m.CertificateUsageType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this trusted certificate spec based on context it is used
func (m *TrustedCertificateSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TrustedCertificateSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrustedCertificateSpec) UnmarshalBinary(b []byte) error {
	var res TrustedCertificateSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
