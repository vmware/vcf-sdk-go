// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ErrorResponse error response
//
// swagger:model ErrorResponse
type ErrorResponse struct {

	// arguments
	Arguments []string `json:"arguments"`

	// cause
	Cause []*ErrorCause `json:"cause"`

	// context
	Context map[string]string `json:"context,omitempty"`

	// error code
	ErrorCode string `json:"errorCode,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// nested errors
	NestedErrors []*ErrorResponse `json:"nestedErrors"`

	// reference token
	ReferenceToken string `json:"referenceToken,omitempty"`

	// remediation message
	RemediationMessage string `json:"remediationMessage,omitempty"`
}

// Validate validates this error response
func (m *ErrorResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCause(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNestedErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorResponse) validateCause(formats strfmt.Registry) error {
	if swag.IsZero(m.Cause) { // not required
		return nil
	}

	for i := 0; i < len(m.Cause); i++ {
		if swag.IsZero(m.Cause[i]) { // not required
			continue
		}

		if m.Cause[i] != nil {
			if err := m.Cause[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cause" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cause" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ErrorResponse) validateNestedErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.NestedErrors) { // not required
		return nil
	}

	for i := 0; i < len(m.NestedErrors); i++ {
		if swag.IsZero(m.NestedErrors[i]) { // not required
			continue
		}

		if m.NestedErrors[i] != nil {
			if err := m.NestedErrors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nestedErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nestedErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this error response based on the context it is used
func (m *ErrorResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCause(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNestedErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorResponse) contextValidateCause(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Cause); i++ {

		if m.Cause[i] != nil {

			if swag.IsZero(m.Cause[i]) { // not required
				return nil
			}

			if err := m.Cause[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cause" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cause" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ErrorResponse) contextValidateNestedErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NestedErrors); i++ {

		if m.NestedErrors[i] != nil {

			if swag.IsZero(m.NestedErrors[i]) { // not required
				return nil
			}

			if err := m.NestedErrors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nestedErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nestedErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorResponse) UnmarshalBinary(b []byte) error {
	var res ErrorResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
