// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SDDCTask Represents a SDDC task
//
// swagger:model SddcTask
type SDDCTask struct {

	// SDDC Task creation timestamp
	CreationTimestamp string `json:"creationTimestamp,omitempty"`

	// SDDC ID
	// Max Length: 256
	// Min Length: 3
	ID string `json:"id,omitempty"`

	// Localizable SDDC Task name
	LocalizableNamePack *MessagePack `json:"localizableNamePack,omitempty"`

	// Task name
	Name string `json:"name,omitempty"`

	// All SDDC Sub-Tasks
	SDDCSubTasks []*SDDCSubTask `json:"sddcSubTasks"`

	// SDDC Task status
	// Example: One among: IN_PROGRESS, COMPLETED_WITH_SUCCESS, ROLLBACK_SUCCESS, COMPLETED_WITH_FAILURE
	Status string `json:"status,omitempty"`
}

// Validate validates this Sddc task
func (m *SDDCTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalizableNamePack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSDDCSubTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SDDCTask) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", m.ID, 256); err != nil {
		return err
	}

	return nil
}

func (m *SDDCTask) validateLocalizableNamePack(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalizableNamePack) { // not required
		return nil
	}

	if m.LocalizableNamePack != nil {
		if err := m.LocalizableNamePack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localizableNamePack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localizableNamePack")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCTask) validateSDDCSubTasks(formats strfmt.Registry) error {
	if swag.IsZero(m.SDDCSubTasks) { // not required
		return nil
	}

	for i := 0; i < len(m.SDDCSubTasks); i++ {
		if swag.IsZero(m.SDDCSubTasks[i]) { // not required
			continue
		}

		if m.SDDCSubTasks[i] != nil {
			if err := m.SDDCSubTasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sddcSubTasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sddcSubTasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this Sddc task based on the context it is used
func (m *SDDCTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocalizableNamePack(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSDDCSubTasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SDDCTask) contextValidateLocalizableNamePack(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalizableNamePack != nil {

		if swag.IsZero(m.LocalizableNamePack) { // not required
			return nil
		}

		if err := m.LocalizableNamePack.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localizableNamePack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localizableNamePack")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCTask) contextValidateSDDCSubTasks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SDDCSubTasks); i++ {

		if m.SDDCSubTasks[i] != nil {

			if swag.IsZero(m.SDDCSubTasks[i]) { // not required
				return nil
			}

			if err := m.SDDCSubTasks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sddcSubTasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sddcSubTasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SDDCTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SDDCTask) UnmarshalBinary(b []byte) error {
	var res SDDCTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
