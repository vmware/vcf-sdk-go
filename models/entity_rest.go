// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntityRest Entity model representing the physical data output of the assessment workflow.
//
// swagger:model EntityRest
type EntityRest struct {

	// Child entities of this entity
	ChildEntities []*EntityRest `json:"childEntities"`

	// Classifications of the entity
	Classifications []*Classification `json:"classifications"`

	// Description of the entity
	Description string `json:"description,omitempty"`

	// Id of the entity
	ID string `json:"id,omitempty"`

	// Name of the entity
	Name string `json:"name,omitempty"`

	// Properties for this entity
	Properties interface{} `json:"properties,omitempty"`

	// The address of the source
	SourceAddress string `json:"sourceAddress,omitempty"`

	// Type of the entity
	Type string `json:"type,omitempty"`
}

// Validate validates this entity rest
func (m *EntityRest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClassifications(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityRest) validateChildEntities(formats strfmt.Registry) error {
	if swag.IsZero(m.ChildEntities) { // not required
		return nil
	}

	for i := 0; i < len(m.ChildEntities); i++ {
		if swag.IsZero(m.ChildEntities[i]) { // not required
			continue
		}

		if m.ChildEntities[i] != nil {
			if err := m.ChildEntities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("childEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityRest) validateClassifications(formats strfmt.Registry) error {
	if swag.IsZero(m.Classifications) { // not required
		return nil
	}

	for i := 0; i < len(m.Classifications); i++ {
		if swag.IsZero(m.Classifications[i]) { // not required
			continue
		}

		if m.Classifications[i] != nil {
			if err := m.Classifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("classifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("classifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this entity rest based on the context it is used
func (m *EntityRest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildEntities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClassifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityRest) contextValidateChildEntities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChildEntities); i++ {

		if m.ChildEntities[i] != nil {

			if swag.IsZero(m.ChildEntities[i]) { // not required
				return nil
			}

			if err := m.ChildEntities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("childEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityRest) contextValidateClassifications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Classifications); i++ {

		if m.Classifications[i] != nil {

			if swag.IsZero(m.Classifications[i]) { // not required
				return nil
			}

			if err := m.Classifications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("classifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("classifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntityRest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntityRest) UnmarshalBinary(b []byte) error {
	var res EntityRest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
