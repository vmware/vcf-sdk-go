// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpgradeSpec Upgrade Specification
//
// swagger:model UpgradeSpec
type UpgradeSpec struct {

	// Bundle ID for Upgrade
	// Required: true
	BundleID *string `json:"bundleId"`

	// Boolean to represent upgrade will be created in DRAFT mode. This allows to run prechecks before user confirm/commit the upgrade.
	DraftMode bool `json:"draftMode,omitempty"`

	// Resource Upgrade Specifications for NSX upgrade
	NSXTUpgradeUserInputSpecs []*NSXTUpgradeUserInputSpec `json:"nsxtUpgradeUserInputSpecs"`

	// Boolean to represent components will be upgraded in parallel on not
	ParallelUpgrade bool `json:"parallelUpgrade,omitempty"`

	// Resource Type for Upgrade
	// Example: One among: DOMAIN, CLUSTER, UNASSIGNED_HOST
	// Required: true
	ResourceType *string `json:"resourceType"`

	// Resource Upgrade Specifications
	// Required: true
	ResourceUpgradeSpecs []*ResourceUpgradeSpec `json:"resourceUpgradeSpecs"`

	// User Input for vCenter upgrade
	VcenterUpgradeUserInputSpecs []*VcenterUpgradeUserInputSpec `json:"vcenterUpgradeUserInputSpecs"`
}

// Validate validates this upgrade spec
func (m *UpgradeSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNSXTUpgradeUserInputSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceUpgradeSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcenterUpgradeUserInputSpecs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeSpec) validateBundleID(formats strfmt.Registry) error {

	if err := validate.Required("bundleId", "body", m.BundleID); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeSpec) validateNSXTUpgradeUserInputSpecs(formats strfmt.Registry) error {
	if swag.IsZero(m.NSXTUpgradeUserInputSpecs) { // not required
		return nil
	}

	for i := 0; i < len(m.NSXTUpgradeUserInputSpecs); i++ {
		if swag.IsZero(m.NSXTUpgradeUserInputSpecs[i]) { // not required
			continue
		}

		if m.NSXTUpgradeUserInputSpecs[i] != nil {
			if err := m.NSXTUpgradeUserInputSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtUpgradeUserInputSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtUpgradeUserInputSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpgradeSpec) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeSpec) validateResourceUpgradeSpecs(formats strfmt.Registry) error {

	if err := validate.Required("resourceUpgradeSpecs", "body", m.ResourceUpgradeSpecs); err != nil {
		return err
	}

	for i := 0; i < len(m.ResourceUpgradeSpecs); i++ {
		if swag.IsZero(m.ResourceUpgradeSpecs[i]) { // not required
			continue
		}

		if m.ResourceUpgradeSpecs[i] != nil {
			if err := m.ResourceUpgradeSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceUpgradeSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceUpgradeSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpgradeSpec) validateVcenterUpgradeUserInputSpecs(formats strfmt.Registry) error {
	if swag.IsZero(m.VcenterUpgradeUserInputSpecs) { // not required
		return nil
	}

	for i := 0; i < len(m.VcenterUpgradeUserInputSpecs); i++ {
		if swag.IsZero(m.VcenterUpgradeUserInputSpecs[i]) { // not required
			continue
		}

		if m.VcenterUpgradeUserInputSpecs[i] != nil {
			if err := m.VcenterUpgradeUserInputSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vcenterUpgradeUserInputSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vcenterUpgradeUserInputSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this upgrade spec based on the context it is used
func (m *UpgradeSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNSXTUpgradeUserInputSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceUpgradeSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcenterUpgradeUserInputSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeSpec) contextValidateNSXTUpgradeUserInputSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NSXTUpgradeUserInputSpecs); i++ {

		if m.NSXTUpgradeUserInputSpecs[i] != nil {

			if swag.IsZero(m.NSXTUpgradeUserInputSpecs[i]) { // not required
				return nil
			}

			if err := m.NSXTUpgradeUserInputSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtUpgradeUserInputSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtUpgradeUserInputSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpgradeSpec) contextValidateResourceUpgradeSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceUpgradeSpecs); i++ {

		if m.ResourceUpgradeSpecs[i] != nil {

			if swag.IsZero(m.ResourceUpgradeSpecs[i]) { // not required
				return nil
			}

			if err := m.ResourceUpgradeSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceUpgradeSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceUpgradeSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpgradeSpec) contextValidateVcenterUpgradeUserInputSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VcenterUpgradeUserInputSpecs); i++ {

		if m.VcenterUpgradeUserInputSpecs[i] != nil {

			if swag.IsZero(m.VcenterUpgradeUserInputSpecs[i]) { // not required
				return nil
			}

			if err := m.VcenterUpgradeUserInputSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vcenterUpgradeUserInputSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vcenterUpgradeUserInputSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeSpec) UnmarshalBinary(b []byte) error {
	var res UpgradeSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
