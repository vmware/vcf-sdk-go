// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FrequencyMetric Represents a single metric representing frequency
//
// swagger:model FrequencyMetric
type FrequencyMetric struct {

	// Unit of the metric
	// Enum: [Hz KHz MHz GHz THz]
	Unit string `json:"unit,omitempty"`

	// Value of the metric
	Value float64 `json:"value,omitempty"`
}

// Validate validates this frequency metric
func (m *FrequencyMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var frequencyMetricTypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Hz","KHz","MHz","GHz","THz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		frequencyMetricTypeUnitPropEnum = append(frequencyMetricTypeUnitPropEnum, v)
	}
}

const (

	// FrequencyMetricUnitHz captures enum value "Hz"
	FrequencyMetricUnitHz string = "Hz"

	// FrequencyMetricUnitKHz captures enum value "KHz"
	FrequencyMetricUnitKHz string = "KHz"

	// FrequencyMetricUnitMHz captures enum value "MHz"
	FrequencyMetricUnitMHz string = "MHz"

	// FrequencyMetricUnitGHz captures enum value "GHz"
	FrequencyMetricUnitGHz string = "GHz"

	// FrequencyMetricUnitTHz captures enum value "THz"
	FrequencyMetricUnitTHz string = "THz"
)

// prop value enum
func (m *FrequencyMetric) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, frequencyMetricTypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FrequencyMetric) validateUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateUnitEnum("unit", "body", m.Unit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this frequency metric based on context it is used
func (m *FrequencyMetric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FrequencyMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FrequencyMetric) UnmarshalBinary(b []byte) error {
	var res FrequencyMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
