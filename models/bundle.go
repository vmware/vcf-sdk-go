// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Bundle Bundle contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain.
//
// swagger:model Bundle
type Bundle struct {

	// Bundle Applicability Order
	// Example: 1
	ApplicabilityOrder int32 `json:"applicabilityOrder,omitempty"`

	// Bundle Applicability Status
	// Example: One among: SUCCESS, IN_PROGRESS, FAILED, AVAILABLE, PENDING
	ApplicabilityStatus string `json:"applicabilityStatus,omitempty"`

	// Bundle Components
	Components []*BundleComponent `json:"components"`

	// Bundle Description
	Description string `json:"description,omitempty"`

	// Bundle Download Status
	// Example: One among: PENDING, SCHEDULED, IN_PROGRESS, SUCCESSFUL, FAILED, RECALLED
	// Required: true
	DownloadStatus *string `json:"downloadStatus"`

	// Bundle ID
	ID string `json:"id,omitempty"`

	// Is compliant with the current VCF version
	IsCompliant bool `json:"isCompliant,omitempty"`

	// Is Bundle Cumulative
	IsCumulative bool `json:"isCumulative,omitempty"`

	// Is Bundle partially upgraded
	// Example: true
	IsPartiallyUpgraded bool `json:"isPartiallyUpgraded,omitempty"`

	// Bundle Release Date
	ReleasedDate string `json:"releasedDate,omitempty"`

	// Bundle Severity
	// Example: One among: CRITICAL, IMPORTANT, MODERATE, LOW
	Severity string `json:"severity,omitempty"`

	// Bundle Size in MB
	SizeMB float64 `json:"sizeMB,omitempty"`

	// Bundle Type
	// Example: One among: SDDC_MANAGER, VMWARE_SOFTWARE, VXRAIL
	// Required: true
	Type *string `json:"type"`

	// Bundle Vendor
	Vendor string `json:"vendor,omitempty"`

	// Bundle Version
	Version string `json:"version,omitempty"`
}

// Validate validates this bundle
func (m *Bundle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Bundle) validateComponents(formats strfmt.Registry) error {
	if swag.IsZero(m.Components) { // not required
		return nil
	}

	for i := 0; i < len(m.Components); i++ {
		if swag.IsZero(m.Components[i]) { // not required
			continue
		}

		if m.Components[i] != nil {
			if err := m.Components[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("components" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Bundle) validateDownloadStatus(formats strfmt.Registry) error {

	if err := validate.Required("downloadStatus", "body", m.DownloadStatus); err != nil {
		return err
	}

	return nil
}

func (m *Bundle) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this bundle based on the context it is used
func (m *Bundle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Bundle) contextValidateComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Components); i++ {

		if m.Components[i] != nil {

			if swag.IsZero(m.Components[i]) { // not required
				return nil
			}

			if err := m.Components[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("components" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Bundle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Bundle) UnmarshalBinary(b []byte) error {
	var res Bundle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
