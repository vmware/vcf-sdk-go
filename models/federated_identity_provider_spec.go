// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FederatedIdentityProviderSpec The identity management configuration when the provider is via broker federation
//
// swagger:model FederatedIdentityProviderSpec
type FederatedIdentityProviderSpec struct {

	// The directory configuration of the Identity Provider
	// Required: true
	Directory *IdentityProviderDirectory `json:"directory"`

	// The user-friendly name for the Identity Provider
	// Required: true
	Name *string `json:"name"`

	// The OIDC profile of the Identity Provider
	// Required: true
	OidcSpec *OidcSpec `json:"oidcSpec"`

	// The lifetime in seconds of the sync client bear token, default to 3 days if not specified
	SyncClientTokenTTL int64 `json:"syncClientTokenTTL,omitempty"`
}

// Validate validates this federated identity provider spec
func (m *FederatedIdentityProviderSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirectory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOidcSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FederatedIdentityProviderSpec) validateDirectory(formats strfmt.Registry) error {

	if err := validate.Required("directory", "body", m.Directory); err != nil {
		return err
	}

	if m.Directory != nil {
		if err := m.Directory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("directory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("directory")
			}
			return err
		}
	}

	return nil
}

func (m *FederatedIdentityProviderSpec) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FederatedIdentityProviderSpec) validateOidcSpec(formats strfmt.Registry) error {

	if err := validate.Required("oidcSpec", "body", m.OidcSpec); err != nil {
		return err
	}

	if m.OidcSpec != nil {
		if err := m.OidcSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidcSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oidcSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this federated identity provider spec based on the context it is used
func (m *FederatedIdentityProviderSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDirectory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOidcSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FederatedIdentityProviderSpec) contextValidateDirectory(ctx context.Context, formats strfmt.Registry) error {

	if m.Directory != nil {

		if err := m.Directory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("directory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("directory")
			}
			return err
		}
	}

	return nil
}

func (m *FederatedIdentityProviderSpec) contextValidateOidcSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.OidcSpec != nil {

		if err := m.OidcSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidcSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oidcSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FederatedIdentityProviderSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FederatedIdentityProviderSpec) UnmarshalBinary(b []byte) error {
	var res FederatedIdentityProviderSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
