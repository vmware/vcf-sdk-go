// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AutoRotateCredentialPolicyInputSpec Represents password auto rotate config details
//
// swagger:model AutoRotateCredentialPolicyInputSpec
type AutoRotateCredentialPolicyInputSpec struct {

	//  Enable or disable  auto rotate policy
	// Required: true
	EnableAutoRotatePolicy *bool `json:"enableAutoRotatePolicy"`

	// Frequency in days
	FrequencyInDays int32 `json:"frequencyInDays,omitempty"`
}

// Validate validates this auto rotate credential policy input spec
func (m *AutoRotateCredentialPolicyInputSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnableAutoRotatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoRotateCredentialPolicyInputSpec) validateEnableAutoRotatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("enableAutoRotatePolicy", "body", m.EnableAutoRotatePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this auto rotate credential policy input spec based on context it is used
func (m *AutoRotateCredentialPolicyInputSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AutoRotateCredentialPolicyInputSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutoRotateCredentialPolicyInputSpec) UnmarshalBinary(b []byte) error {
	var res AutoRotateCredentialPolicyInputSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
