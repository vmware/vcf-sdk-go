// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssessmentOutput Result from the baseliner assessment run (execution result, presented artifacts or ask for extra info).
//
// swagger:model AssessmentOutput
type AssessmentOutput struct {

	// Assessment task completion timestamp
	CompletionTimestamp string `json:"completionTimestamp,omitempty"`

	// Progress messages
	DiscoveryProgress *DiscoveryProgress `json:"discoveryProgress,omitempty"`

	// Set of the input validation errors
	InputValidationErrors []*Error `json:"inputValidationErrors"`

	// The root entity with its child entities effectively representing the complete assessed environment tree
	PhysicalPresentedData *EntityRest `json:"physicalPresentedData,omitempty"`

	// Extra assessment artefacts produced by the workflow
	PresentedArtifactsMap interface{} `json:"presentedArtifactsMap,omitempty"`

	// Related assessment run id
	RelatedAssessmentID string `json:"relatedAssessmentId,omitempty"`

	// Execution status
	// Enum: [IN_PROGRESS COMPLETED_WITH_SUCCESS COMPLETED_WITH_FAILURE]
	Status string `json:"status,omitempty"`

	// Assessment task creation timestamp
	Timestamp string `json:"timestamp,omitempty"`

	// Result from the assessed validation rules
	ValidationResult *Error `json:"validationResult,omitempty"`
}

// Validate validates this assessment output
func (m *AssessmentOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscoveryProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputValidationErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalPresentedData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssessmentOutput) validateDiscoveryProgress(formats strfmt.Registry) error {
	if swag.IsZero(m.DiscoveryProgress) { // not required
		return nil
	}

	if m.DiscoveryProgress != nil {
		if err := m.DiscoveryProgress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discoveryProgress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discoveryProgress")
			}
			return err
		}
	}

	return nil
}

func (m *AssessmentOutput) validateInputValidationErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.InputValidationErrors) { // not required
		return nil
	}

	for i := 0; i < len(m.InputValidationErrors); i++ {
		if swag.IsZero(m.InputValidationErrors[i]) { // not required
			continue
		}

		if m.InputValidationErrors[i] != nil {
			if err := m.InputValidationErrors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputValidationErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputValidationErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssessmentOutput) validatePhysicalPresentedData(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalPresentedData) { // not required
		return nil
	}

	if m.PhysicalPresentedData != nil {
		if err := m.PhysicalPresentedData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalPresentedData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalPresentedData")
			}
			return err
		}
	}

	return nil
}

var assessmentOutputTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IN_PROGRESS","COMPLETED_WITH_SUCCESS","COMPLETED_WITH_FAILURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assessmentOutputTypeStatusPropEnum = append(assessmentOutputTypeStatusPropEnum, v)
	}
}

const (

	// AssessmentOutputStatusINPROGRESS captures enum value "IN_PROGRESS"
	AssessmentOutputStatusINPROGRESS string = "IN_PROGRESS"

	// AssessmentOutputStatusCOMPLETEDWITHSUCCESS captures enum value "COMPLETED_WITH_SUCCESS"
	AssessmentOutputStatusCOMPLETEDWITHSUCCESS string = "COMPLETED_WITH_SUCCESS"

	// AssessmentOutputStatusCOMPLETEDWITHFAILURE captures enum value "COMPLETED_WITH_FAILURE"
	AssessmentOutputStatusCOMPLETEDWITHFAILURE string = "COMPLETED_WITH_FAILURE"
)

// prop value enum
func (m *AssessmentOutput) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assessmentOutputTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssessmentOutput) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *AssessmentOutput) validateValidationResult(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidationResult) { // not required
		return nil
	}

	if m.ValidationResult != nil {
		if err := m.ValidationResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validationResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validationResult")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this assessment output based on the context it is used
func (m *AssessmentOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiscoveryProgress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInputValidationErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalPresentedData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidationResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssessmentOutput) contextValidateDiscoveryProgress(ctx context.Context, formats strfmt.Registry) error {

	if m.DiscoveryProgress != nil {

		if swag.IsZero(m.DiscoveryProgress) { // not required
			return nil
		}

		if err := m.DiscoveryProgress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discoveryProgress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discoveryProgress")
			}
			return err
		}
	}

	return nil
}

func (m *AssessmentOutput) contextValidateInputValidationErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InputValidationErrors); i++ {

		if m.InputValidationErrors[i] != nil {

			if swag.IsZero(m.InputValidationErrors[i]) { // not required
				return nil
			}

			if err := m.InputValidationErrors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputValidationErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputValidationErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssessmentOutput) contextValidatePhysicalPresentedData(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalPresentedData != nil {

		if swag.IsZero(m.PhysicalPresentedData) { // not required
			return nil
		}

		if err := m.PhysicalPresentedData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalPresentedData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalPresentedData")
			}
			return err
		}
	}

	return nil
}

func (m *AssessmentOutput) contextValidateValidationResult(ctx context.Context, formats strfmt.Registry) error {

	if m.ValidationResult != nil {

		if swag.IsZero(m.ValidationResult) { // not required
			return nil
		}

		if err := m.ValidationResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validationResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validationResult")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssessmentOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssessmentOutput) UnmarshalBinary(b []byte) error {
	var res AssessmentOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
