// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourceWarning Represents a warning associated to a specific resource
//
// swagger:model ResourceWarning
type ResourceWarning struct {

	// Optional associated task where the warning occurred
	AssociatedTask *AssociatedTask `json:"associatedTask,omitempty"`

	// Optional additional context information in a key value form
	Context map[string]string `json:"context,omitempty"`

	// ID of the resource warning
	ID string `json:"id,omitempty"`

	// The localized warning message
	Message string `json:"message,omitempty"`

	// Timestamp when the warning occurred
	OccurredAtTimestamp string `json:"occurredAtTimestamp,omitempty"`

	// A reference token correlating the warning with the relevant detailed logs. Should be sent to the service provider when reporting issues
	ReferenceToken string `json:"referenceToken,omitempty"`

	// The localized remediation warning message
	RemediationMessage string `json:"remediationMessage,omitempty"`

	// ID of the associated resource
	ResourceID string `json:"resourceId,omitempty"`

	// Name of the associated resource
	ResourceName string `json:"resourceName,omitempty"`

	// Type of the associated resource
	// Example: One among: HOST, CLUSTER, DOMAIN
	ResourceType string `json:"resourceType,omitempty"`

	// Severity of the warning
	// Example: One among: MINOR, MAJOR
	Severity string `json:"severity,omitempty"`

	// The warning code
	WarningCode string `json:"warningCode,omitempty"`

	// Type of the warning
	// Example: One among: SKIPPED_RESOURCE, VALIDATION, CONFIGURATION, OTHER
	WarningType string `json:"warningType,omitempty"`
}

// Validate validates this resource warning
func (m *ResourceWarning) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociatedTask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceWarning) validateAssociatedTask(formats strfmt.Registry) error {
	if swag.IsZero(m.AssociatedTask) { // not required
		return nil
	}

	if m.AssociatedTask != nil {
		if err := m.AssociatedTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associatedTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("associatedTask")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this resource warning based on the context it is used
func (m *ResourceWarning) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssociatedTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceWarning) contextValidateAssociatedTask(ctx context.Context, formats strfmt.Registry) error {

	if m.AssociatedTask != nil {

		if swag.IsZero(m.AssociatedTask) { // not required
			return nil
		}

		if err := m.AssociatedTask.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associatedTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("associatedTask")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceWarning) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceWarning) UnmarshalBinary(b []byte) error {
	var res ResourceWarning
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
