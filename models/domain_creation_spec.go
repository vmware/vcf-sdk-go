// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainCreationSpec This specification contains the parameters required to create a new workload domain
//
// swagger:model DomainCreationSpec
type DomainCreationSpec struct {

	// Specification representing the clusters to be added to the workload domain
	// Required: true
	ComputeSpec *ComputeSpec `json:"computeSpec"`

	// Enable deployment of the domain without licensing the infrastructure.
	DeployWithoutLicenseKeys bool `json:"deployWithoutLicenseKeys,omitempty"`

	// Name of the workload domain
	// Required: true
	DomainName *string `json:"domainName"`

	// Specifications for network separation configuration
	NetworkSeparationSpec *NetworkSeparationSpec `json:"networkSeparationSpec,omitempty"`

	// Specification details for NSX configuration
	NsxTSpec *NsxTSpec `json:"nsxTSpec,omitempty"`

	// Organization name of the workload domain
	OrgName string `json:"orgName,omitempty"`

	// SSO domain specification
	SSODomainSpec *SSODomainSpec `json:"ssoDomainSpec,omitempty"`

	// Specification details for vCenter
	// Required: true
	VcenterSpec *VcenterSpec `json:"vcenterSpec"`
}

// Validate validates this domain creation spec
func (m *DomainCreationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputeSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkSeparationSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNsxTSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSODomainSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcenterSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainCreationSpec) validateComputeSpec(formats strfmt.Registry) error {

	if err := validate.Required("computeSpec", "body", m.ComputeSpec); err != nil {
		return err
	}

	if m.ComputeSpec != nil {
		if err := m.ComputeSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeSpec")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCreationSpec) validateDomainName(formats strfmt.Registry) error {

	if err := validate.Required("domainName", "body", m.DomainName); err != nil {
		return err
	}

	return nil
}

func (m *DomainCreationSpec) validateNetworkSeparationSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkSeparationSpec) { // not required
		return nil
	}

	if m.NetworkSeparationSpec != nil {
		if err := m.NetworkSeparationSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkSeparationSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkSeparationSpec")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCreationSpec) validateNsxTSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.NsxTSpec) { // not required
		return nil
	}

	if m.NsxTSpec != nil {
		if err := m.NsxTSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxTSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxTSpec")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCreationSpec) validateSSODomainSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.SSODomainSpec) { // not required
		return nil
	}

	if m.SSODomainSpec != nil {
		if err := m.SSODomainSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ssoDomainSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ssoDomainSpec")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCreationSpec) validateVcenterSpec(formats strfmt.Registry) error {

	if err := validate.Required("vcenterSpec", "body", m.VcenterSpec); err != nil {
		return err
	}

	if m.VcenterSpec != nil {
		if err := m.VcenterSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcenterSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcenterSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain creation spec based on the context it is used
func (m *DomainCreationSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputeSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkSeparationSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNsxTSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSODomainSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcenterSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainCreationSpec) contextValidateComputeSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ComputeSpec != nil {

		if err := m.ComputeSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeSpec")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCreationSpec) contextValidateNetworkSeparationSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkSeparationSpec != nil {

		if swag.IsZero(m.NetworkSeparationSpec) { // not required
			return nil
		}

		if err := m.NetworkSeparationSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkSeparationSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkSeparationSpec")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCreationSpec) contextValidateNsxTSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.NsxTSpec != nil {

		if swag.IsZero(m.NsxTSpec) { // not required
			return nil
		}

		if err := m.NsxTSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxTSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxTSpec")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCreationSpec) contextValidateSSODomainSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.SSODomainSpec != nil {

		if swag.IsZero(m.SSODomainSpec) { // not required
			return nil
		}

		if err := m.SSODomainSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ssoDomainSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ssoDomainSpec")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCreationSpec) contextValidateVcenterSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.VcenterSpec != nil {

		if err := m.VcenterSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcenterSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcenterSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainCreationSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainCreationSpec) UnmarshalBinary(b []byte) error {
	var res DomainCreationSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
