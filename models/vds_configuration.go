// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VdsConfiguration The VDS network configuration
//
// swagger:model VdsConfiguration
type VdsConfiguration struct {

	// Inventory mismatch levels
	InventoryMismatchInfo []*InventoryMismatchInfo `json:"inventoryMismatchInfo"`

	// The maximum transmission unit (MTU) configured for the uplinks
	Mtu int32 `json:"mtu,omitempty"`

	// vSphere Distributed Switch name
	Name string `json:"name,omitempty"`

	// The NSX configuration associated with the vSphere Distributed Switch
	NSXTSwitchConfig *NSXTSwitchConfig `json:"nsxtSwitchConfig,omitempty"`

	// List of portgroup configuration associated with the vSphere Distributed Switch
	PortGroups []*PortgroupConfig `json:"portGroups"`

	// Uplinks configured on vSphere Distributed Switch
	Uplinks []string `json:"uplinks"`
}

// Validate validates this vds configuration
func (m *VdsConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInventoryMismatchInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNSXTSwitchConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VdsConfiguration) validateInventoryMismatchInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.InventoryMismatchInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.InventoryMismatchInfo); i++ {
		if swag.IsZero(m.InventoryMismatchInfo[i]) { // not required
			continue
		}

		if m.InventoryMismatchInfo[i] != nil {
			if err := m.InventoryMismatchInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inventoryMismatchInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inventoryMismatchInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VdsConfiguration) validateNSXTSwitchConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.NSXTSwitchConfig) { // not required
		return nil
	}

	if m.NSXTSwitchConfig != nil {
		if err := m.NSXTSwitchConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtSwitchConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtSwitchConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VdsConfiguration) validatePortGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.PortGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.PortGroups); i++ {
		if swag.IsZero(m.PortGroups[i]) { // not required
			continue
		}

		if m.PortGroups[i] != nil {
			if err := m.PortGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("portGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("portGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this vds configuration based on the context it is used
func (m *VdsConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInventoryMismatchInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNSXTSwitchConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePortGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VdsConfiguration) contextValidateInventoryMismatchInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InventoryMismatchInfo); i++ {

		if m.InventoryMismatchInfo[i] != nil {

			if swag.IsZero(m.InventoryMismatchInfo[i]) { // not required
				return nil
			}

			if err := m.InventoryMismatchInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inventoryMismatchInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inventoryMismatchInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VdsConfiguration) contextValidateNSXTSwitchConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NSXTSwitchConfig != nil {

		if swag.IsZero(m.NSXTSwitchConfig) { // not required
			return nil
		}

		if err := m.NSXTSwitchConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtSwitchConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtSwitchConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VdsConfiguration) contextValidatePortGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PortGroups); i++ {

		if m.PortGroups[i] != nil {

			if swag.IsZero(m.PortGroups[i]) { // not required
				return nil
			}

			if err := m.PortGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("portGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("portGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VdsConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VdsConfiguration) UnmarshalBinary(b []byte) error {
	var res VdsConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
