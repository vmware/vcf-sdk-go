// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterNetworkConfiguration Represents the cluster network configuration.
//
// swagger:model ClusterNetworkConfiguration
type ClusterNetworkConfiguration struct {

	// List of host details
	HostDetails []*HostDetail `json:"hostDetails"`

	// List of IP address pool configuration
	IPAddressPools []*NSXTIPAddressPool `json:"ipAddressPools"`

	// List of network profiles
	NetworkProfiles []*NetworkProfileConfiguration `json:"networkProfiles"`

	// List of VDS names that is not present in VCF inventory
	NonVcfCreatedVds []string `json:"nonVcfCreatedVds"`

	// List of uplink profile configuration
	UplinkProfiles []*UplinkProfile `json:"uplinkProfiles"`

	// List of VDS configuration
	VdsConfigurations []*VdsConfiguration `json:"vdsConfigurations"`
}

// Validate validates this cluster network configuration
func (m *ClusterNetworkConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddressPools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUplinkProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdsConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNetworkConfiguration) validateHostDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.HostDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.HostDetails); i++ {
		if swag.IsZero(m.HostDetails[i]) { // not required
			continue
		}

		if m.HostDetails[i] != nil {
			if err := m.HostDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNetworkConfiguration) validateIPAddressPools(formats strfmt.Registry) error {
	if swag.IsZero(m.IPAddressPools) { // not required
		return nil
	}

	for i := 0; i < len(m.IPAddressPools); i++ {
		if swag.IsZero(m.IPAddressPools[i]) { // not required
			continue
		}

		if m.IPAddressPools[i] != nil {
			if err := m.IPAddressPools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipAddressPools" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ipAddressPools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNetworkConfiguration) validateNetworkProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkProfiles) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkProfiles); i++ {
		if swag.IsZero(m.NetworkProfiles[i]) { // not required
			continue
		}

		if m.NetworkProfiles[i] != nil {
			if err := m.NetworkProfiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkProfiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkProfiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNetworkConfiguration) validateUplinkProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.UplinkProfiles) { // not required
		return nil
	}

	for i := 0; i < len(m.UplinkProfiles); i++ {
		if swag.IsZero(m.UplinkProfiles[i]) { // not required
			continue
		}

		if m.UplinkProfiles[i] != nil {
			if err := m.UplinkProfiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uplinkProfiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("uplinkProfiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNetworkConfiguration) validateVdsConfigurations(formats strfmt.Registry) error {
	if swag.IsZero(m.VdsConfigurations) { // not required
		return nil
	}

	for i := 0; i < len(m.VdsConfigurations); i++ {
		if swag.IsZero(m.VdsConfigurations[i]) { // not required
			continue
		}

		if m.VdsConfigurations[i] != nil {
			if err := m.VdsConfigurations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vdsConfigurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vdsConfigurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster network configuration based on the context it is used
func (m *ClusterNetworkConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPAddressPools(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUplinkProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVdsConfigurations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNetworkConfiguration) contextValidateHostDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HostDetails); i++ {

		if m.HostDetails[i] != nil {

			if swag.IsZero(m.HostDetails[i]) { // not required
				return nil
			}

			if err := m.HostDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNetworkConfiguration) contextValidateIPAddressPools(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPAddressPools); i++ {

		if m.IPAddressPools[i] != nil {

			if swag.IsZero(m.IPAddressPools[i]) { // not required
				return nil
			}

			if err := m.IPAddressPools[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipAddressPools" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ipAddressPools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNetworkConfiguration) contextValidateNetworkProfiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkProfiles); i++ {

		if m.NetworkProfiles[i] != nil {

			if swag.IsZero(m.NetworkProfiles[i]) { // not required
				return nil
			}

			if err := m.NetworkProfiles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkProfiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkProfiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNetworkConfiguration) contextValidateUplinkProfiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UplinkProfiles); i++ {

		if m.UplinkProfiles[i] != nil {

			if swag.IsZero(m.UplinkProfiles[i]) { // not required
				return nil
			}

			if err := m.UplinkProfiles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uplinkProfiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("uplinkProfiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNetworkConfiguration) contextValidateVdsConfigurations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VdsConfigurations); i++ {

		if m.VdsConfigurations[i] != nil {

			if swag.IsZero(m.VdsConfigurations[i]) { // not required
				return nil
			}

			if err := m.VdsConfigurations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vdsConfigurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vdsConfigurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNetworkConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNetworkConfiguration) UnmarshalBinary(b []byte) error {
	var res ClusterNetworkConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
