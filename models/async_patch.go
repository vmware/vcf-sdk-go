// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AsyncPatch Async patch bundle rest model that is located in the 2.0 manifest, these models are consumed by LCM's async patch workflows to determine if customer can download patch in list and apply.
//
// swagger:model AsyncPatch
type AsyncPatch struct {

	// Input spec URL of the async patch bundle
	InputSpecURL string `json:"inputSpecUrl,omitempty"`

	// Product version of the async patch bundle
	// Required: true
	ProductVersion *string `json:"productVersion"`

	// Sddc hot patch info for each sddc manager service (lcm, dm, om, commonsvc)
	SDDCHotPatchInfo map[string]MapOfstringAndListOfSDDCHotPatchInfo `json:"sddcHotPatchInfo,omitempty"`

	// Supported SKU types of the async patch bundle
	// Example: One among: VXRAIL, VSAN
	// Required: true
	SupportedSkuTypes []string `json:"supportedSkuTypes"`
}

// Validate validates this async patch
func (m *AsyncPatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProductVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSDDCHotPatchInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedSkuTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AsyncPatch) validateProductVersion(formats strfmt.Registry) error {

	if err := validate.Required("productVersion", "body", m.ProductVersion); err != nil {
		return err
	}

	return nil
}

func (m *AsyncPatch) validateSDDCHotPatchInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SDDCHotPatchInfo) { // not required
		return nil
	}

	for k := range m.SDDCHotPatchInfo {

		if val, ok := m.SDDCHotPatchInfo[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *AsyncPatch) validateSupportedSkuTypes(formats strfmt.Registry) error {

	if err := validate.Required("supportedSkuTypes", "body", m.SupportedSkuTypes); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this async patch based on the context it is used
func (m *AsyncPatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSDDCHotPatchInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AsyncPatch) contextValidateSDDCHotPatchInfo(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.SDDCHotPatchInfo {

		if val, ok := m.SDDCHotPatchInfo[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AsyncPatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AsyncPatch) UnmarshalBinary(b []byte) error {
	var res AsyncPatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
