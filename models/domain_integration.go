// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainIntegration This specification contains information related to the existing VMware Aria Operations instance deployment
//
// swagger:model DomainIntegration
type DomainIntegration struct {

	// The ID of the workload domain
	DomainID string `json:"domainId,omitempty"`

	// The association status of the workload domain
	// Example: ENABLED, DISABLED, IN_PROGRESS
	// Required: true
	// Enum: [ENABLED DISABLED]
	Status *string `json:"status"`
}

// Validate validates this domain integration
func (m *DomainIntegration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var domainIntegrationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainIntegrationTypeStatusPropEnum = append(domainIntegrationTypeStatusPropEnum, v)
	}
}

const (

	// DomainIntegrationStatusENABLED captures enum value "ENABLED"
	DomainIntegrationStatusENABLED string = "ENABLED"

	// DomainIntegrationStatusDISABLED captures enum value "DISABLED"
	DomainIntegrationStatusDISABLED string = "DISABLED"
)

// prop value enum
func (m *DomainIntegration) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, domainIntegrationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DomainIntegration) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain integration based on context it is used
func (m *DomainIntegration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainIntegration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainIntegration) UnmarshalBinary(b []byte) error {
	var res DomainIntegration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
