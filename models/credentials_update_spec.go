// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialsUpdateSpec This specification contains password operation request details
//
// swagger:model CredentialsUpdateSpec
type CredentialsUpdateSpec struct {

	// Auto Rotate policy for set of credentials
	AutoRotatePolicy *AutoRotateCredentialPolicyInputSpec `json:"autoRotatePolicy,omitempty"`

	// List of resource credentials to be changed
	// Required: true
	Elements []*ResourceCredentials `json:"elements"`

	// Operation type
	// Example: One among: UPDATE, ROTATE, REMEDIATE, UPDATE_AUTO_ROTATE_POLICY
	// Required: true
	OperationType *string `json:"operationType"`
}

// Validate validates this credentials update spec
func (m *CredentialsUpdateSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoRotatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialsUpdateSpec) validateAutoRotatePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoRotatePolicy) { // not required
		return nil
	}

	if m.AutoRotatePolicy != nil {
		if err := m.AutoRotatePolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoRotatePolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoRotatePolicy")
			}
			return err
		}
	}

	return nil
}

func (m *CredentialsUpdateSpec) validateElements(formats strfmt.Registry) error {

	if err := validate.Required("elements", "body", m.Elements); err != nil {
		return err
	}

	for i := 0; i < len(m.Elements); i++ {
		if swag.IsZero(m.Elements[i]) { // not required
			continue
		}

		if m.Elements[i] != nil {
			if err := m.Elements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("elements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("elements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CredentialsUpdateSpec) validateOperationType(formats strfmt.Registry) error {

	if err := validate.Required("operationType", "body", m.OperationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this credentials update spec based on the context it is used
func (m *CredentialsUpdateSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutoRotatePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialsUpdateSpec) contextValidateAutoRotatePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.AutoRotatePolicy != nil {

		if swag.IsZero(m.AutoRotatePolicy) { // not required
			return nil
		}

		if err := m.AutoRotatePolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoRotatePolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoRotatePolicy")
			}
			return err
		}
	}

	return nil
}

func (m *CredentialsUpdateSpec) contextValidateElements(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Elements); i++ {

		if m.Elements[i] != nil {

			if swag.IsZero(m.Elements[i]) { // not required
				return nil
			}

			if err := m.Elements[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("elements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("elements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialsUpdateSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialsUpdateSpec) UnmarshalBinary(b []byte) error {
	var res CredentialsUpdateSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
