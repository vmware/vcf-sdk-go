// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupConfigurationSpec Backup configuration Specification
//
// swagger:model BackupConfigurationSpec
type BackupConfigurationSpec struct {

	// List of backup locations
	BackupLocations []*BackupLocation `json:"backupLocations"`

	// List of backup schedules
	BackupSchedules []*BackupSchedule `json:"backupSchedules"`

	// Encryption passphrase to encrypt and decrypt backup file
	Encryption *Encryption `json:"encryption,omitempty"`
}

// Validate validates this backup configuration spec
func (m *BackupConfigurationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupLocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupSchedules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupConfigurationSpec) validateBackupLocations(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupLocations) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupLocations); i++ {
		if swag.IsZero(m.BackupLocations[i]) { // not required
			continue
		}

		if m.BackupLocations[i] != nil {
			if err := m.BackupLocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backupLocations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backupLocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupConfigurationSpec) validateBackupSchedules(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupSchedules) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupSchedules); i++ {
		if swag.IsZero(m.BackupSchedules[i]) { // not required
			continue
		}

		if m.BackupSchedules[i] != nil {
			if err := m.BackupSchedules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backupSchedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backupSchedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupConfigurationSpec) validateEncryption(formats strfmt.Registry) error {
	if swag.IsZero(m.Encryption) { // not required
		return nil
	}

	if m.Encryption != nil {
		if err := m.Encryption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryption")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup configuration spec based on the context it is used
func (m *BackupConfigurationSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupLocations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupSchedules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupConfigurationSpec) contextValidateBackupLocations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupLocations); i++ {

		if m.BackupLocations[i] != nil {

			if swag.IsZero(m.BackupLocations[i]) { // not required
				return nil
			}

			if err := m.BackupLocations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backupLocations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backupLocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupConfigurationSpec) contextValidateBackupSchedules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupSchedules); i++ {

		if m.BackupSchedules[i] != nil {

			if swag.IsZero(m.BackupSchedules[i]) { // not required
				return nil
			}

			if err := m.BackupSchedules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backupSchedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backupSchedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupConfigurationSpec) contextValidateEncryption(ctx context.Context, formats strfmt.Registry) error {

	if m.Encryption != nil {

		if swag.IsZero(m.Encryption) { // not required
			return nil
		}

		if err := m.Encryption.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryption")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupConfigurationSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupConfigurationSpec) UnmarshalBinary(b []byte) error {
	var res BackupConfigurationSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
