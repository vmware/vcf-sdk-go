// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckSetQueryResource Resource input to query check-sets for
//
// swagger:model CheckSetQueryResource
type CheckSetQueryResource struct {

	// UUID of the resource, if used adds additional filtering
	// Example: 187f6468-f9e0-45f5-8d34-b28efc1e7a36
	ResourceID string `json:"resourceId,omitempty"`

	// Upgrade target version for the resources
	// Example: 3.0.0-123456
	ResourceTargetVersion string `json:"resourceTargetVersion,omitempty"`

	// Type of the resource
	// Example: VCENTER
	// Required: true
	ResourceType *string `json:"resourceType"`
}

// Validate validates this check set query resource
func (m *CheckSetQueryResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckSetQueryResource) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this check set query resource based on context it is used
func (m *CheckSetQueryResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CheckSetQueryResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckSetQueryResource) UnmarshalBinary(b []byte) error {
	var res CheckSetQueryResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
