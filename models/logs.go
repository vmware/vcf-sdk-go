// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Logs logs
//
// swagger:model Logs
type Logs struct {

	// Collect API Logs.
	APILogs bool `json:"apiLogs,omitempty"`

	// Collect VMware Aria Automation support logs.
	AutomationLogs bool `json:"automationLogs,omitempty"`

	// Collect ESX Logs.
	EsxLogs bool `json:"esxLogs,omitempty"`

	// Collect VMware Aria Suite Lifecycle support logs.
	LifecycleLogs bool `json:"lifecycleLogs,omitempty"`

	// Collect NSX Logs.
	NsxLogs bool `json:"nsxLogs,omitempty"`

	// Collect VMware Aria Operations For Logs support logs.
	OperationsForLogs bool `json:"operationsForLogs,omitempty"`

	// Collect VMware Aria Operations support logs.
	OperationsLogs bool `json:"operationsLogs,omitempty"`

	// Collect SDDC Manager Logs.
	SDDCManagerLogs bool `json:"sddcManagerLogs,omitempty"`

	// Collect SystemDebug Logs.
	SystemDebugLogs bool `json:"systemDebugLogs,omitempty"`

	// Collect vCenter Logs.
	VcLogs bool `json:"vcLogs,omitempty"`

	// Collect VMScreenshots.
	VMScreenshots bool `json:"vmScreenshots,omitempty"`

	// [Deprecated] Collect VMware Aria Automation Logs.
	VRALogs bool `json:"vraLogs,omitempty"`

	// [Deprecated] Collect VMware Aria Operations For Logs Logs.
	VrliLogs bool `json:"vrliLogs,omitempty"`

	// [Deprecated] Collect VMware Aria Operations Logs.
	VROPSLogs bool `json:"vropsLogs,omitempty"`

	// [Deprecated] Collect VMware Aria Suite Lifecycle Logs.
	VRSLCMLogs bool `json:"vrslcmLogs,omitempty"`

	// Collect VXRailManager Logs.
	VxrailManagerLogs bool `json:"vxrailManagerLogs,omitempty"`

	// Collect WCP Logs.
	WcpLogs bool `json:"wcpLogs,omitempty"`
}

// Validate validates this logs
func (m *Logs) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this logs based on context it is used
func (m *Logs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Logs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Logs) UnmarshalBinary(b []byte) error {
	var res Logs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
