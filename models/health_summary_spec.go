// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HealthSummarySpec health summary spec
//
// swagger:model HealthSummarySpec
type HealthSummarySpec struct {

	// Sos Health Checks.
	HealthChecks *HealthChecks `json:"healthChecks,omitempty"`

	// Sos options for support health checks.
	Options *HealthSummaryOption `json:"options,omitempty"`

	// Domain and cluster under which logs should be collected.
	Scope *HealthSummaryScope `json:"scope,omitempty"`
}

// Validate validates this health summary spec
func (m *HealthSummarySpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealthChecks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthSummarySpec) validateHealthChecks(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthChecks) { // not required
		return nil
	}

	if m.HealthChecks != nil {
		if err := m.HealthChecks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("healthChecks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("healthChecks")
			}
			return err
		}
	}

	return nil
}

func (m *HealthSummarySpec) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *HealthSummarySpec) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this health summary spec based on the context it is used
func (m *HealthSummarySpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHealthChecks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthSummarySpec) contextValidateHealthChecks(ctx context.Context, formats strfmt.Registry) error {

	if m.HealthChecks != nil {

		if swag.IsZero(m.HealthChecks) { // not required
			return nil
		}

		if err := m.HealthChecks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("healthChecks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("healthChecks")
			}
			return err
		}
	}

	return nil
}

func (m *HealthSummarySpec) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.Options != nil {

		if swag.IsZero(m.Options) { // not required
			return nil
		}

		if err := m.Options.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *HealthSummarySpec) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if m.Scope != nil {

		if swag.IsZero(m.Scope) { // not required
			return nil
		}

		if err := m.Scope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HealthSummarySpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthSummarySpec) UnmarshalBinary(b []byte) error {
	var res HealthSummarySpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
