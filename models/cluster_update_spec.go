// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterUpdateSpec This specification contains the parameters required to perform update operation on cluster
//
// swagger:model ClusterUpdateSpec
type ClusterUpdateSpec struct {

	// Parameters required to perform cluster compaction, optional otherwise
	ClusterCompactionSpec *ClusterCompactionSpec `json:"clusterCompactionSpec,omitempty"`

	// Parameters required to check complaince of a cluster before transition to vSphere Lifecycle Manager Images, optional otherwise
	ClusterComplianceCheckSpec *ClusterComplianceCheckSpec `json:"clusterComplianceCheckSpec,omitempty"`

	// Parameters required to cleanup compliance results of a cluster before transition to vSphere Lifecycle Manager Images, optional otherwise
	ClusterComplianceCleanupSpec ClusterComplianceCleanupSpec `json:"clusterComplianceCleanupSpec,omitempty"`

	// Parameters required to perform cluster expansion, optional otherwise
	ClusterExpansionSpec *ClusterExpansionSpec `json:"clusterExpansionSpec,omitempty"`

	// Parameters required to remediate a cluster after transition to vSphere Lifecycle Manager Images, optional otherwise
	ClusterRemediationSpec ClusterRemediationSpec `json:"clusterRemediationSpec,omitempty"`

	// Parameters required to perform Stretch operation on cluster, optional otherwise
	ClusterStretchSpec *ClusterStretchSpec `json:"clusterStretchSpec,omitempty"`

	// Parameters required to transition a cluster to vSphere Lifecycle Manager Images, optional otherwise
	ClusterTransitionSpec ClusterTransitionSpec `json:"clusterTransitionSpec,omitempty"`

	// Parameters required to perform Unstretch operation on cluster, optional otherwise
	ClusterUnstretchSpec ClusterUnstretchSpec `json:"clusterUnstretchSpec,omitempty"`

	// Prepare the cluster for deletion
	MarkForDeletion bool `json:"markForDeletion,omitempty"`

	// Cluster Name
	Name string `json:"name,omitempty"`

	// Prepare the cluster for stretch
	PrepareForStretch bool `json:"prepareForStretch,omitempty"`
}

// Validate validates this cluster update spec
func (m *ClusterUpdateSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterCompactionSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterComplianceCheckSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterExpansionSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterStretchSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterUpdateSpec) validateClusterCompactionSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterCompactionSpec) { // not required
		return nil
	}

	if m.ClusterCompactionSpec != nil {
		if err := m.ClusterCompactionSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterCompactionSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterCompactionSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterUpdateSpec) validateClusterComplianceCheckSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterComplianceCheckSpec) { // not required
		return nil
	}

	if m.ClusterComplianceCheckSpec != nil {
		if err := m.ClusterComplianceCheckSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterComplianceCheckSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterComplianceCheckSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterUpdateSpec) validateClusterExpansionSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterExpansionSpec) { // not required
		return nil
	}

	if m.ClusterExpansionSpec != nil {
		if err := m.ClusterExpansionSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterExpansionSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterExpansionSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterUpdateSpec) validateClusterStretchSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterStretchSpec) { // not required
		return nil
	}

	if m.ClusterStretchSpec != nil {
		if err := m.ClusterStretchSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterStretchSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterStretchSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster update spec based on the context it is used
func (m *ClusterUpdateSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterCompactionSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterComplianceCheckSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterExpansionSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterStretchSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterUpdateSpec) contextValidateClusterCompactionSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterCompactionSpec != nil {

		if swag.IsZero(m.ClusterCompactionSpec) { // not required
			return nil
		}

		if err := m.ClusterCompactionSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterCompactionSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterCompactionSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterUpdateSpec) contextValidateClusterComplianceCheckSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterComplianceCheckSpec != nil {

		if swag.IsZero(m.ClusterComplianceCheckSpec) { // not required
			return nil
		}

		if err := m.ClusterComplianceCheckSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterComplianceCheckSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterComplianceCheckSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterUpdateSpec) contextValidateClusterExpansionSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterExpansionSpec != nil {

		if swag.IsZero(m.ClusterExpansionSpec) { // not required
			return nil
		}

		if err := m.ClusterExpansionSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterExpansionSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterExpansionSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterUpdateSpec) contextValidateClusterStretchSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterStretchSpec != nil {

		if swag.IsZero(m.ClusterStretchSpec) { // not required
			return nil
		}

		if err := m.ClusterStretchSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterStretchSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterStretchSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterUpdateSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterUpdateSpec) UnmarshalBinary(b []byte) error {
	var res ClusterUpdateSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
