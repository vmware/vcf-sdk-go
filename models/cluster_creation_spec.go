// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterCreationSpec This specification contains the parameters required to add a cluster to an existing workload Domain
//
// swagger:model ClusterCreationSpec
type ClusterCreationSpec struct {

	// Cluster specification to be added to the domain
	// Required: true
	ComputeSpec *ComputeSpec `json:"computeSpec"`

	// Enable deployment of the cluster without licensing the infrastructure.
	DeployWithoutLicenseKeys bool `json:"deployWithoutLicenseKeys,omitempty"`

	// ID of the domain to which the clusters will be added
	// Required: true
	DomainID *string `json:"domainId"`
}

// Validate validates this cluster creation spec
func (m *ClusterCreationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputeSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreationSpec) validateComputeSpec(formats strfmt.Registry) error {

	if err := validate.Required("computeSpec", "body", m.ComputeSpec); err != nil {
		return err
	}

	if m.ComputeSpec != nil {
		if err := m.ComputeSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterCreationSpec) validateDomainID(formats strfmt.Registry) error {

	if err := validate.Required("domainId", "body", m.DomainID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cluster creation spec based on the context it is used
func (m *ClusterCreationSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputeSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreationSpec) contextValidateComputeSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ComputeSpec != nil {

		if err := m.ComputeSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterCreationSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterCreationSpec) UnmarshalBinary(b []byte) error {
	var res ClusterCreationSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
