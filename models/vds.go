// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Vds vSphere distributed switch
//
// swagger:model Vds
type Vds struct {

	// vSphere Distributed Switch id
	ID string `json:"id,omitempty"`

	// Boolean to identify if the vSphere distributed switch is used by NSX. This property is deprecated in favor of nsxtSwitchConfig field.
	IsUsedByNSXT bool `json:"isUsedByNsxt,omitempty"`

	// Maximum Transmission Unit
	Mtu int32 `json:"mtu,omitempty"`

	// vSphere Distributed Switch name
	// Required: true
	Name *string `json:"name"`

	// List of Network I/O Control Bandwidth Allocations for System Traffic
	NiocBandwidthAllocations []*NiocBandwidthAllocation `json:"niocBandwidthAllocations"`

	// The configurations associated with the vSphere Distributed Switch managed by NSX
	NSXTSwitchConfig *NSXTSwitchConfiguration `json:"nsxtSwitchConfig,omitempty"`

	// List of portgroups associated with the vSphere Distributed Switch
	PortGroups []*Portgroup `json:"portGroups"`

	// vSphere Distributed Switch version
	Version string `json:"version,omitempty"`
}

// Validate validates this vds
func (m *Vds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNiocBandwidthAllocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNSXTSwitchConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vds) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Vds) validateNiocBandwidthAllocations(formats strfmt.Registry) error {
	if swag.IsZero(m.NiocBandwidthAllocations) { // not required
		return nil
	}

	for i := 0; i < len(m.NiocBandwidthAllocations); i++ {
		if swag.IsZero(m.NiocBandwidthAllocations[i]) { // not required
			continue
		}

		if m.NiocBandwidthAllocations[i] != nil {
			if err := m.NiocBandwidthAllocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("niocBandwidthAllocations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("niocBandwidthAllocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Vds) validateNSXTSwitchConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.NSXTSwitchConfig) { // not required
		return nil
	}

	if m.NSXTSwitchConfig != nil {
		if err := m.NSXTSwitchConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtSwitchConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtSwitchConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Vds) validatePortGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.PortGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.PortGroups); i++ {
		if swag.IsZero(m.PortGroups[i]) { // not required
			continue
		}

		if m.PortGroups[i] != nil {
			if err := m.PortGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("portGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("portGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this vds based on the context it is used
func (m *Vds) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNiocBandwidthAllocations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNSXTSwitchConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePortGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vds) contextValidateNiocBandwidthAllocations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NiocBandwidthAllocations); i++ {

		if m.NiocBandwidthAllocations[i] != nil {

			if swag.IsZero(m.NiocBandwidthAllocations[i]) { // not required
				return nil
			}

			if err := m.NiocBandwidthAllocations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("niocBandwidthAllocations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("niocBandwidthAllocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Vds) contextValidateNSXTSwitchConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NSXTSwitchConfig != nil {

		if swag.IsZero(m.NSXTSwitchConfig) { // not required
			return nil
		}

		if err := m.NSXTSwitchConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtSwitchConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtSwitchConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Vds) contextValidatePortGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PortGroups); i++ {

		if m.PortGroups[i] != nil {

			if swag.IsZero(m.PortGroups[i]) { // not required
				return nil
			}

			if err := m.PortGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("portGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("portGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Vds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Vds) UnmarshalBinary(b []byte) error {
	var res Vds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
