// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SDDCSpec Spec contains parameters for creating/bringing up an SDDC
//
// swagger:model SddcSpec
type SDDCSpec struct {

	// Enable VCF Customer Experience Improvement Program
	// Example: true
	CEIPEnabled bool `json:"ceipEnabled,omitempty"`

	// Cluster Spec
	// Required: true
	ClusterSpec *SDDCClusterSpec `json:"clusterSpec"`

	// DNS Spec
	// Required: true
	DNSSpec *DNSSpec `json:"dnsSpec"`

	// The version of the distributed virtual switches to be used
	// Example: One among:7.0.0, 7.0.2, 7.0.3
	DvSwitchVersion string `json:"dvSwitchVersion,omitempty"`

	// List of Dvs Specs
	// Required: true
	DvsSpecs []*DvsSpec `json:"dvsSpecs"`

	// License for the ESXi hosts
	EsxLicense string `json:"esxLicense,omitempty"`

	// Components to be excluded
	// Example: One among:NSX, VSAN, EsxThumbprintValidation, CEIP, Backup
	ExcludedComponents []string `json:"excludedComponents"`

	// Enable Federal Information Processing Standards
	// Example: true
	FIPSEnabled bool `json:"fipsEnabled,omitempty"`

	// List of Host Specs
	// Required: true
	HostSpecs []*SDDCHostSpec `json:"hostSpecs"`

	// A String identifying the network pool associated with the management domain
	ManagementPoolName string `json:"managementPoolName,omitempty"`

	// List of Network Specs
	// Required: true
	NetworkSpecs []*SDDCNetworkSpec `json:"networkSpecs"`

	// NSX Spec
	NSXTSpec *SDDCNSXTSpec `json:"nsxtSpec,omitempty"`

	// List of NTP servers
	// Required: true
	NtpServers []string `json:"ntpServers"`

	// Proxy Spec
	ProxySpec *ProxySpec `json:"proxySpec,omitempty"`

	// PSC VM spec
	PscSpecs []*PscSpec `json:"pscSpecs"`

	// Client string that identifies an SDDC by name or instance name. Used for management domain name. Can contain only letters, numbers and the following symbols: '-'.
	// Example: sfo01-m01
	// Required: true
	// Max Length: 20
	// Min Length: 3
	SDDCID *string `json:"sddcId"`

	// SDDC Manager Virtual Machine spec
	SDDCManagerSpec *SDDCManagerSpec `json:"sddcManagerSpec,omitempty"`

	// Security spec
	SecuritySpec *SecuritySpec `json:"securitySpec,omitempty"`

	// Skip ESXi thumbprint validation
	SkipEsxThumbprintValidation bool `json:"skipEsxThumbprintValidation,omitempty"`

	// Skip networks gateway connectivity validation
	SkipGatewayPingValidation bool `json:"skipGatewayPingValidation,omitempty"`

	// Name of the task to execute
	// Example: workflowconfig/workflowspec-ems.json
	// Required: true
	TaskName *string `json:"taskName"`

	// vCenter Spec
	// Required: true
	VcenterSpec *SDDCVcenterSpec `json:"vcenterSpec"`

	// VSAN Spec
	VSANSpec *VSANSpec `json:"vsanSpec,omitempty"`

	// VxManager Spec
	VxManagerSpec *VxManagerSpec `json:"vxManagerSpec,omitempty"`
}

// Validate validates this Sddc spec
func (m *SDDCSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDvsSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNSXTSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtpServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxySpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePscSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSDDCID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSDDCManagerSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecuritySpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcenterSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVSANSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVxManagerSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SDDCSpec) validateClusterSpec(formats strfmt.Registry) error {

	if err := validate.Required("clusterSpec", "body", m.ClusterSpec); err != nil {
		return err
	}

	if m.ClusterSpec != nil {
		if err := m.ClusterSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) validateDNSSpec(formats strfmt.Registry) error {

	if err := validate.Required("dnsSpec", "body", m.DNSSpec); err != nil {
		return err
	}

	if m.DNSSpec != nil {
		if err := m.DNSSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnsSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dnsSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) validateDvsSpecs(formats strfmt.Registry) error {

	if err := validate.Required("dvsSpecs", "body", m.DvsSpecs); err != nil {
		return err
	}

	for i := 0; i < len(m.DvsSpecs); i++ {
		if swag.IsZero(m.DvsSpecs[i]) { // not required
			continue
		}

		if m.DvsSpecs[i] != nil {
			if err := m.DvsSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dvsSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dvsSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SDDCSpec) validateHostSpecs(formats strfmt.Registry) error {

	if err := validate.Required("hostSpecs", "body", m.HostSpecs); err != nil {
		return err
	}

	for i := 0; i < len(m.HostSpecs); i++ {
		if swag.IsZero(m.HostSpecs[i]) { // not required
			continue
		}

		if m.HostSpecs[i] != nil {
			if err := m.HostSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SDDCSpec) validateNetworkSpecs(formats strfmt.Registry) error {

	if err := validate.Required("networkSpecs", "body", m.NetworkSpecs); err != nil {
		return err
	}

	for i := 0; i < len(m.NetworkSpecs); i++ {
		if swag.IsZero(m.NetworkSpecs[i]) { // not required
			continue
		}

		if m.NetworkSpecs[i] != nil {
			if err := m.NetworkSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SDDCSpec) validateNSXTSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.NSXTSpec) { // not required
		return nil
	}

	if m.NSXTSpec != nil {
		if err := m.NSXTSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) validateNtpServers(formats strfmt.Registry) error {

	if err := validate.Required("ntpServers", "body", m.NtpServers); err != nil {
		return err
	}

	return nil
}

func (m *SDDCSpec) validateProxySpec(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxySpec) { // not required
		return nil
	}

	if m.ProxySpec != nil {
		if err := m.ProxySpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxySpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) validatePscSpecs(formats strfmt.Registry) error {
	if swag.IsZero(m.PscSpecs) { // not required
		return nil
	}

	for i := 0; i < len(m.PscSpecs); i++ {
		if swag.IsZero(m.PscSpecs[i]) { // not required
			continue
		}

		if m.PscSpecs[i] != nil {
			if err := m.PscSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pscSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pscSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SDDCSpec) validateSDDCID(formats strfmt.Registry) error {

	if err := validate.Required("sddcId", "body", m.SDDCID); err != nil {
		return err
	}

	if err := validate.MinLength("sddcId", "body", *m.SDDCID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("sddcId", "body", *m.SDDCID, 20); err != nil {
		return err
	}

	return nil
}

func (m *SDDCSpec) validateSDDCManagerSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.SDDCManagerSpec) { // not required
		return nil
	}

	if m.SDDCManagerSpec != nil {
		if err := m.SDDCManagerSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sddcManagerSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sddcManagerSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) validateSecuritySpec(formats strfmt.Registry) error {
	if swag.IsZero(m.SecuritySpec) { // not required
		return nil
	}

	if m.SecuritySpec != nil {
		if err := m.SecuritySpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securitySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securitySpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) validateTaskName(formats strfmt.Registry) error {

	if err := validate.Required("taskName", "body", m.TaskName); err != nil {
		return err
	}

	return nil
}

func (m *SDDCSpec) validateVcenterSpec(formats strfmt.Registry) error {

	if err := validate.Required("vcenterSpec", "body", m.VcenterSpec); err != nil {
		return err
	}

	if m.VcenterSpec != nil {
		if err := m.VcenterSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcenterSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcenterSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) validateVSANSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.VSANSpec) { // not required
		return nil
	}

	if m.VSANSpec != nil {
		if err := m.VSANSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsanSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vsanSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) validateVxManagerSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.VxManagerSpec) { // not required
		return nil
	}

	if m.VxManagerSpec != nil {
		if err := m.VxManagerSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vxManagerSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vxManagerSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Sddc spec based on the context it is used
func (m *SDDCSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDNSSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDvsSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNSXTSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxySpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePscSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSDDCManagerSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecuritySpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcenterSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVSANSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVxManagerSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SDDCSpec) contextValidateClusterSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterSpec != nil {

		if err := m.ClusterSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) contextValidateDNSSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.DNSSpec != nil {

		if err := m.DNSSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnsSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dnsSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) contextValidateDvsSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DvsSpecs); i++ {

		if m.DvsSpecs[i] != nil {

			if swag.IsZero(m.DvsSpecs[i]) { // not required
				return nil
			}

			if err := m.DvsSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dvsSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dvsSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SDDCSpec) contextValidateHostSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HostSpecs); i++ {

		if m.HostSpecs[i] != nil {

			if swag.IsZero(m.HostSpecs[i]) { // not required
				return nil
			}

			if err := m.HostSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SDDCSpec) contextValidateNetworkSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkSpecs); i++ {

		if m.NetworkSpecs[i] != nil {

			if swag.IsZero(m.NetworkSpecs[i]) { // not required
				return nil
			}

			if err := m.NetworkSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SDDCSpec) contextValidateNSXTSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.NSXTSpec != nil {

		if swag.IsZero(m.NSXTSpec) { // not required
			return nil
		}

		if err := m.NSXTSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) contextValidateProxySpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ProxySpec != nil {

		if swag.IsZero(m.ProxySpec) { // not required
			return nil
		}

		if err := m.ProxySpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxySpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) contextValidatePscSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PscSpecs); i++ {

		if m.PscSpecs[i] != nil {

			if swag.IsZero(m.PscSpecs[i]) { // not required
				return nil
			}

			if err := m.PscSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pscSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pscSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SDDCSpec) contextValidateSDDCManagerSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.SDDCManagerSpec != nil {

		if swag.IsZero(m.SDDCManagerSpec) { // not required
			return nil
		}

		if err := m.SDDCManagerSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sddcManagerSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sddcManagerSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) contextValidateSecuritySpec(ctx context.Context, formats strfmt.Registry) error {

	if m.SecuritySpec != nil {

		if swag.IsZero(m.SecuritySpec) { // not required
			return nil
		}

		if err := m.SecuritySpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securitySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securitySpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) contextValidateVcenterSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.VcenterSpec != nil {

		if err := m.VcenterSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcenterSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcenterSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) contextValidateVSANSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.VSANSpec != nil {

		if swag.IsZero(m.VSANSpec) { // not required
			return nil
		}

		if err := m.VSANSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsanSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vsanSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SDDCSpec) contextValidateVxManagerSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.VxManagerSpec != nil {

		if swag.IsZero(m.VxManagerSpec) { // not required
			return nil
		}

		if err := m.VxManagerSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vxManagerSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vxManagerSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SDDCSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SDDCSpec) UnmarshalBinary(b []byte) error {
	var res SDDCSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
