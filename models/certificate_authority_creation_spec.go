// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CertificateAuthorityCreationSpec This specification contains Certificate Authority (CA) creation details. Either openSSLCertificateAuthoritySpec or microsoftCertificateAuthoritySpec should be specified.
//
// swagger:model CertificateAuthorityCreationSpec
type CertificateAuthorityCreationSpec struct {

	// Microsoft Certificate Authority specification
	MicrosoftCertificateAuthoritySpec *MicrosoftCertificateAuthoritySpec `json:"microsoftCertificateAuthoritySpec,omitempty"`

	// OpenSSL Certificate Authority specification
	OpenSSLCertificateAuthoritySpec *OpenSSLCertificateAuthoritySpec `json:"openSSLCertificateAuthoritySpec,omitempty"`
}

// Validate validates this certificate authority creation spec
func (m *CertificateAuthorityCreationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMicrosoftCertificateAuthoritySpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenSSLCertificateAuthoritySpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateAuthorityCreationSpec) validateMicrosoftCertificateAuthoritySpec(formats strfmt.Registry) error {
	if swag.IsZero(m.MicrosoftCertificateAuthoritySpec) { // not required
		return nil
	}

	if m.MicrosoftCertificateAuthoritySpec != nil {
		if err := m.MicrosoftCertificateAuthoritySpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("microsoftCertificateAuthoritySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("microsoftCertificateAuthoritySpec")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateAuthorityCreationSpec) validateOpenSSLCertificateAuthoritySpec(formats strfmt.Registry) error {
	if swag.IsZero(m.OpenSSLCertificateAuthoritySpec) { // not required
		return nil
	}

	if m.OpenSSLCertificateAuthoritySpec != nil {
		if err := m.OpenSSLCertificateAuthoritySpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openSSLCertificateAuthoritySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("openSSLCertificateAuthoritySpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this certificate authority creation spec based on the context it is used
func (m *CertificateAuthorityCreationSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMicrosoftCertificateAuthoritySpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpenSSLCertificateAuthoritySpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateAuthorityCreationSpec) contextValidateMicrosoftCertificateAuthoritySpec(ctx context.Context, formats strfmt.Registry) error {

	if m.MicrosoftCertificateAuthoritySpec != nil {

		if swag.IsZero(m.MicrosoftCertificateAuthoritySpec) { // not required
			return nil
		}

		if err := m.MicrosoftCertificateAuthoritySpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("microsoftCertificateAuthoritySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("microsoftCertificateAuthoritySpec")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateAuthorityCreationSpec) contextValidateOpenSSLCertificateAuthoritySpec(ctx context.Context, formats strfmt.Registry) error {

	if m.OpenSSLCertificateAuthoritySpec != nil {

		if swag.IsZero(m.OpenSSLCertificateAuthoritySpec) { // not required
			return nil
		}

		if err := m.OpenSSLCertificateAuthoritySpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openSSLCertificateAuthoritySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("openSSLCertificateAuthoritySpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateAuthorityCreationSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateAuthorityCreationSpec) UnmarshalBinary(b []byte) error {
	var res CertificateAuthorityCreationSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
