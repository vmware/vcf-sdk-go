// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HardwareSupportPackage Configured Hardware Support Manager details
//
// swagger:model HardwareSupportPackage
type HardwareSupportPackage struct {

	// Hardware Support Manager display name
	DisplayName string `json:"displayName,omitempty"`

	// Hardware Support Manager Name
	// Required: true
	Name *string `json:"name"`

	// Hardware Support Package
	// Required: true
	Pkg *PackageSpec `json:"pkg"`
}

// Validate validates this hardware support package
func (m *HardwareSupportPackage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HardwareSupportPackage) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *HardwareSupportPackage) validatePkg(formats strfmt.Registry) error {

	if err := validate.Required("pkg", "body", m.Pkg); err != nil {
		return err
	}

	if m.Pkg != nil {
		if err := m.Pkg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pkg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pkg")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hardware support package based on the context it is used
func (m *HardwareSupportPackage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePkg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HardwareSupportPackage) contextValidatePkg(ctx context.Context, formats strfmt.Registry) error {

	if m.Pkg != nil {

		if err := m.Pkg.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pkg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pkg")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HardwareSupportPackage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HardwareSupportPackage) UnmarshalBinary(b []byte) error {
	var res HardwareSupportPackage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
