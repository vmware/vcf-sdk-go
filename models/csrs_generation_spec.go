// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CSRSGenerationSpec This specification contains CSR Generation request details
//
// swagger:model CsrsGenerationSpec
type CSRSGenerationSpec struct {

	// The CSR specification to generate CSR for resource(s)
	// Required: true
	CSRGenerationSpec *CSRGenerationSpec `json:"csrGenerationSpec"`

	// Resource(s) in a domain
	Resources []*Resource `json:"resources"`
}

// Validate validates this Csrs generation spec
func (m *CSRSGenerationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCSRGenerationSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CSRSGenerationSpec) validateCSRGenerationSpec(formats strfmt.Registry) error {

	if err := validate.Required("csrGenerationSpec", "body", m.CSRGenerationSpec); err != nil {
		return err
	}

	if m.CSRGenerationSpec != nil {
		if err := m.CSRGenerationSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("csrGenerationSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("csrGenerationSpec")
			}
			return err
		}
	}

	return nil
}

func (m *CSRSGenerationSpec) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this Csrs generation spec based on the context it is used
func (m *CSRSGenerationSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCSRGenerationSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CSRSGenerationSpec) contextValidateCSRGenerationSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.CSRGenerationSpec != nil {

		if err := m.CSRGenerationSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("csrGenerationSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("csrGenerationSpec")
			}
			return err
		}
	}

	return nil
}

func (m *CSRSGenerationSpec) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resources); i++ {

		if m.Resources[i] != nil {

			if swag.IsZero(m.Resources[i]) { // not required
				return nil
			}

			if err := m.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CSRSGenerationSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CSRSGenerationSpec) UnmarshalBinary(b []byte) error {
	var res CSRSGenerationSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
