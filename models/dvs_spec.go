// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DvsSpec Spec contains parameters for DVS
//
// swagger:model DvsSpec
type DvsSpec struct {

	// DVS Name
	// Required: true
	DvsName *string `json:"dvsName"`

	// Flag indicating whether the DVS is used by NSX.
	//  This property is deprecated in favor of nsxtSwitchConfig field
	IsUsedByNSXT bool `json:"isUsedByNsxt,omitempty"`

	// DVS MTU (default value is 9000)
	// Maximum: 9000
	// Minimum: 1500
	Mtu int32 `json:"mtu,omitempty"`

	// Types of networks in this portgroup
	// Example: One among: VSAN, VMOTION, MANAGEMENT, VM_MANAGEMENT or any custom network types defined in networkSpecs
	// Required: true
	Networks []string `json:"networks"`

	// List of NIOC specs for networks
	NiocSpecs []*NiocSpec `json:"niocSpecs"`

	// The NSX Configurations to be associated with vSphere Distributed Switch
	NSXTSwitchConfig *NSXTSwitchConfig `json:"nsxtSwitchConfig,omitempty"`

	// Vmnics to be attached to the DVS.
	//  This property is deprecated in favor of vmnicsToUplinks fields
	Vmnics []string `json:"vmnics"`

	// The map of vSphere Distributed Switch uplinks to the NSX switch uplinks.
	VmnicsToUplinks []*UplinkMapping `json:"vmnicsToUplinks"`
}

// Validate validates this dvs spec
func (m *DvsSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDvsName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNiocSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNSXTSwitchConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmnicsToUplinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DvsSpec) validateDvsName(formats strfmt.Registry) error {

	if err := validate.Required("dvsName", "body", m.DvsName); err != nil {
		return err
	}

	return nil
}

func (m *DvsSpec) validateMtu(formats strfmt.Registry) error {
	if swag.IsZero(m.Mtu) { // not required
		return nil
	}

	if err := validate.MinimumInt("mtu", "body", int64(m.Mtu), 1500, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("mtu", "body", int64(m.Mtu), 9000, false); err != nil {
		return err
	}

	return nil
}

func (m *DvsSpec) validateNetworks(formats strfmt.Registry) error {

	if err := validate.Required("networks", "body", m.Networks); err != nil {
		return err
	}

	return nil
}

func (m *DvsSpec) validateNiocSpecs(formats strfmt.Registry) error {
	if swag.IsZero(m.NiocSpecs) { // not required
		return nil
	}

	for i := 0; i < len(m.NiocSpecs); i++ {
		if swag.IsZero(m.NiocSpecs[i]) { // not required
			continue
		}

		if m.NiocSpecs[i] != nil {
			if err := m.NiocSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("niocSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("niocSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DvsSpec) validateNSXTSwitchConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.NSXTSwitchConfig) { // not required
		return nil
	}

	if m.NSXTSwitchConfig != nil {
		if err := m.NSXTSwitchConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtSwitchConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtSwitchConfig")
			}
			return err
		}
	}

	return nil
}

func (m *DvsSpec) validateVmnicsToUplinks(formats strfmt.Registry) error {
	if swag.IsZero(m.VmnicsToUplinks) { // not required
		return nil
	}

	for i := 0; i < len(m.VmnicsToUplinks); i++ {
		if swag.IsZero(m.VmnicsToUplinks[i]) { // not required
			continue
		}

		if m.VmnicsToUplinks[i] != nil {
			if err := m.VmnicsToUplinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmnicsToUplinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vmnicsToUplinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dvs spec based on the context it is used
func (m *DvsSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNiocSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNSXTSwitchConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmnicsToUplinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DvsSpec) contextValidateNiocSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NiocSpecs); i++ {

		if m.NiocSpecs[i] != nil {

			if swag.IsZero(m.NiocSpecs[i]) { // not required
				return nil
			}

			if err := m.NiocSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("niocSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("niocSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DvsSpec) contextValidateNSXTSwitchConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NSXTSwitchConfig != nil {

		if swag.IsZero(m.NSXTSwitchConfig) { // not required
			return nil
		}

		if err := m.NSXTSwitchConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtSwitchConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtSwitchConfig")
			}
			return err
		}
	}

	return nil
}

func (m *DvsSpec) contextValidateVmnicsToUplinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VmnicsToUplinks); i++ {

		if m.VmnicsToUplinks[i] != nil {

			if swag.IsZero(m.VmnicsToUplinks[i]) { // not required
				return nil
			}

			if err := m.VmnicsToUplinks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmnicsToUplinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vmnicsToUplinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DvsSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DvsSpec) UnmarshalBinary(b []byte) error {
	var res DvsSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
