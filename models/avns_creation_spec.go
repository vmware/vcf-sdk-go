// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AvnsCreationSpec Defines the spec to create Application virtual Networks (AVNs) and its attributes
//
// swagger:model AvnsCreationSpec
type AvnsCreationSpec struct {

	// The list of AVNs to be created
	// Required: true
	Avns []*Avn `json:"avns"`

	// The UUID of the Edge Cluster to associate AVNs
	// Example: 3f39d4a1-78d2-11e8-af85-f1cf26258cdc
	// Required: true
	EdgeClusterID *string `json:"edgeClusterId"`
}

// Validate validates this avns creation spec
func (m *AvnsCreationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeClusterID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvnsCreationSpec) validateAvns(formats strfmt.Registry) error {

	if err := validate.Required("avns", "body", m.Avns); err != nil {
		return err
	}

	for i := 0; i < len(m.Avns); i++ {
		if swag.IsZero(m.Avns[i]) { // not required
			continue
		}

		if m.Avns[i] != nil {
			if err := m.Avns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("avns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("avns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AvnsCreationSpec) validateEdgeClusterID(formats strfmt.Registry) error {

	if err := validate.Required("edgeClusterId", "body", m.EdgeClusterID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this avns creation spec based on the context it is used
func (m *AvnsCreationSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvnsCreationSpec) contextValidateAvns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Avns); i++ {

		if m.Avns[i] != nil {

			if swag.IsZero(m.Avns[i]) { // not required
				return nil
			}

			if err := m.Avns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("avns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("avns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AvnsCreationSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AvnsCreationSpec) UnmarshalBinary(b []byte) error {
	var res AvnsCreationSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
