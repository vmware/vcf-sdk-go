// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VSANDatastoreSpec This specification contains cluster storage configuration for vSAN
//
// swagger:model VsanDatastoreSpec
type VSANDatastoreSpec struct {

	// Datastore name used for cluster creation
	// Required: true
	DatastoreName *string `json:"datastoreName"`

	// Enable vSAN deduplication and compression
	DedupAndCompressionEnabled bool `json:"dedupAndCompressionEnabled,omitempty"`

	// Enable vSAN ESA configuration.
	EsaConfig *EsaConfig `json:"esaConfig,omitempty"`

	// Number of vSphere host failures to tolerate in the vSAN cluster
	FailuresToTolerate int32 `json:"failuresToTolerate,omitempty"`

	// License key for the vSAN data store to be applied in vCenter
	LicenseKey string `json:"licenseKey,omitempty"`
}

// Validate validates this Vsan datastore spec
func (m *VSANDatastoreSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatastoreName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEsaConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VSANDatastoreSpec) validateDatastoreName(formats strfmt.Registry) error {

	if err := validate.Required("datastoreName", "body", m.DatastoreName); err != nil {
		return err
	}

	return nil
}

func (m *VSANDatastoreSpec) validateEsaConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EsaConfig) { // not required
		return nil
	}

	if m.EsaConfig != nil {
		if err := m.EsaConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("esaConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("esaConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Vsan datastore spec based on the context it is used
func (m *VSANDatastoreSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEsaConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VSANDatastoreSpec) contextValidateEsaConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EsaConfig != nil {

		if swag.IsZero(m.EsaConfig) { // not required
			return nil
		}

		if err := m.EsaConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("esaConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("esaConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VSANDatastoreSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VSANDatastoreSpec) UnmarshalBinary(b []byte) error {
	var res VSANDatastoreSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
