// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NSXTTransportZone Spec contains required parameters for NSX Transport Zone
//
// swagger:model NsxtTransportZone
type NSXTTransportZone struct {

	// Transport zone network name
	// Required: true
	NetworkName *string `json:"networkName"`

	// Transport zone name
	// Required: true
	ZoneName *string `json:"zoneName"`
}

// Validate validates this Nsxt transport zone
func (m *NSXTTransportZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NSXTTransportZone) validateNetworkName(formats strfmt.Registry) error {

	if err := validate.Required("networkName", "body", m.NetworkName); err != nil {
		return err
	}

	return nil
}

func (m *NSXTTransportZone) validateZoneName(formats strfmt.Registry) error {

	if err := validate.Required("zoneName", "body", m.ZoneName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Nsxt transport zone based on context it is used
func (m *NSXTTransportZone) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NSXTTransportZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NSXTTransportZone) UnmarshalBinary(b []byte) error {
	var res NSXTTransportZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
