// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PortgroupConfig This specification contains the network configuration in a port group.
//
// swagger:model PortgroupConfig
type PortgroupConfig struct {

	// List of active uplinks associated with port group
	ActiveUplinks []string `json:"activeUplinks"`

	// The maximum transmission unit (MTU) configured for the uplinks associated with the port group
	Mtu int32 `json:"mtu,omitempty"`

	// Port group name
	Name string `json:"name,omitempty"`

	// The load balancing policy associated with port group
	Policy string `json:"policy,omitempty"`

	// List of standby uplinks associated with port group
	StandByUplinks []string `json:"standByUplinks"`

	// List of supported teaming policies at port group
	SupportedTeamingPolicies interface{} `json:"supportedTeamingPolicies,omitempty"`

	// Port group transport type
	TransportType string `json:"transportType,omitempty"`

	// The vlan id associated with the port group
	VlanID int32 `json:"vlanId,omitempty"`
}

// Validate validates this portgroup config
func (m *PortgroupConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this portgroup config based on context it is used
func (m *PortgroupConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PortgroupConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortgroupConfig) UnmarshalBinary(b []byte) error {
	var res PortgroupConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
