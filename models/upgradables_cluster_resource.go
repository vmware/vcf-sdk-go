// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpgradablesClusterResource Upgradables clusters details with hardware support managers
//
// swagger:model UpgradablesClusterResource
type UpgradablesClusterResource struct {

	// Available Hardware Support Managers for Firmware upgrade
	AvailableHardwareSupportManagers []*HardwareSupportPackages `json:"availableHardwareSupportManagers"`

	// Configured Hardware Support Managers for Firmware upgrade
	ConfiguredHardwareSupportManagers []*HardwareSupportPackage `json:"configuredHardwareSupportManagers"`

	// Flag for primary cluster
	PrimaryCluster bool `json:"primaryCluster,omitempty"`

	// Resource Id
	// Required: true
	ResourceID *string `json:"resourceId"`

	// Resource Type
	// Example: CLUSTER
	// Required: true
	ResourceType *string `json:"resourceType"`

	// Software Spec contains base image, addOn, and components details
	SoftwareInfo *SoftwareInfo `json:"softwareInfo,omitempty"`

	// Flag to determine if vLCM enabled on the cluster
	VlcmEnabled bool `json:"vlcmEnabled,omitempty"`
}

// Validate validates this upgradables cluster resource
func (m *UpgradablesClusterResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableHardwareSupportManagers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiguredHardwareSupportManagers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradablesClusterResource) validateAvailableHardwareSupportManagers(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableHardwareSupportManagers) { // not required
		return nil
	}

	for i := 0; i < len(m.AvailableHardwareSupportManagers); i++ {
		if swag.IsZero(m.AvailableHardwareSupportManagers[i]) { // not required
			continue
		}

		if m.AvailableHardwareSupportManagers[i] != nil {
			if err := m.AvailableHardwareSupportManagers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availableHardwareSupportManagers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("availableHardwareSupportManagers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpgradablesClusterResource) validateConfiguredHardwareSupportManagers(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfiguredHardwareSupportManagers) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfiguredHardwareSupportManagers); i++ {
		if swag.IsZero(m.ConfiguredHardwareSupportManagers[i]) { // not required
			continue
		}

		if m.ConfiguredHardwareSupportManagers[i] != nil {
			if err := m.ConfiguredHardwareSupportManagers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configuredHardwareSupportManagers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configuredHardwareSupportManagers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpgradablesClusterResource) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("resourceId", "body", m.ResourceID); err != nil {
		return err
	}

	return nil
}

func (m *UpgradablesClusterResource) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *UpgradablesClusterResource) validateSoftwareInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareInfo) { // not required
		return nil
	}

	if m.SoftwareInfo != nil {
		if err := m.SoftwareInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("softwareInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("softwareInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this upgradables cluster resource based on the context it is used
func (m *UpgradablesClusterResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailableHardwareSupportManagers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfiguredHardwareSupportManagers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradablesClusterResource) contextValidateAvailableHardwareSupportManagers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AvailableHardwareSupportManagers); i++ {

		if m.AvailableHardwareSupportManagers[i] != nil {

			if swag.IsZero(m.AvailableHardwareSupportManagers[i]) { // not required
				return nil
			}

			if err := m.AvailableHardwareSupportManagers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availableHardwareSupportManagers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("availableHardwareSupportManagers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpgradablesClusterResource) contextValidateConfiguredHardwareSupportManagers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConfiguredHardwareSupportManagers); i++ {

		if m.ConfiguredHardwareSupportManagers[i] != nil {

			if swag.IsZero(m.ConfiguredHardwareSupportManagers[i]) { // not required
				return nil
			}

			if err := m.ConfiguredHardwareSupportManagers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configuredHardwareSupportManagers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configuredHardwareSupportManagers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpgradablesClusterResource) contextValidateSoftwareInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SoftwareInfo != nil {

		if swag.IsZero(m.SoftwareInfo) { // not required
			return nil
		}

		if err := m.SoftwareInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("softwareInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("softwareInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpgradablesClusterResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradablesClusterResource) UnmarshalBinary(b []byte) error {
	var res UpgradablesClusterResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
