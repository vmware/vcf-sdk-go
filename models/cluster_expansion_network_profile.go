// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterExpansionNetworkProfile This specification contains the host switch configurations for the NSX transport node.
//
// swagger:model ClusterExpansionNetworkProfile
type ClusterExpansionNetworkProfile struct {

	// The network profile description
	Description string `json:"description,omitempty"`

	// The network profile name
	Name string `json:"name,omitempty"`

	// The list of NSX host switch configurations
	NSXTHostSwitchConfigs []*NSXTHostSwitchConfig `json:"nsxtHostSwitchConfigs"`
}

// Validate validates this cluster expansion network profile
func (m *ClusterExpansionNetworkProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNSXTHostSwitchConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterExpansionNetworkProfile) validateNSXTHostSwitchConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.NSXTHostSwitchConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.NSXTHostSwitchConfigs); i++ {
		if swag.IsZero(m.NSXTHostSwitchConfigs[i]) { // not required
			continue
		}

		if m.NSXTHostSwitchConfigs[i] != nil {
			if err := m.NSXTHostSwitchConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtHostSwitchConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtHostSwitchConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster expansion network profile based on the context it is used
func (m *ClusterExpansionNetworkProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNSXTHostSwitchConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterExpansionNetworkProfile) contextValidateNSXTHostSwitchConfigs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NSXTHostSwitchConfigs); i++ {

		if m.NSXTHostSwitchConfigs[i] != nil {

			if swag.IsZero(m.NSXTHostSwitchConfigs[i]) { // not required
				return nil
			}

			if err := m.NSXTHostSwitchConfigs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtHostSwitchConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtHostSwitchConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterExpansionNetworkProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterExpansionNetworkProfile) UnmarshalBinary(b []byte) error {
	var res ClusterExpansionNetworkProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
