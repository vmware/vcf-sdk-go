// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Applicability Represents all applicability requirements for a Configuration Drift
//
// swagger:model Applicability
type Applicability struct {

	// Product's SkuType for Configuration Drift
	// Example: One among: VXRAIL, VSAN, VSRN_VXRAIL
	// Required: true
	SkuType *string `json:"skuType"`

	// List of product version related applicability
	// Required: true
	VersionApplicability []*VersionApplicability `json:"versionApplicability"`
}

// Validate validates this applicability
func (m *Applicability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSkuType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionApplicability(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Applicability) validateSkuType(formats strfmt.Registry) error {

	if err := validate.Required("skuType", "body", m.SkuType); err != nil {
		return err
	}

	return nil
}

func (m *Applicability) validateVersionApplicability(formats strfmt.Registry) error {

	if err := validate.Required("versionApplicability", "body", m.VersionApplicability); err != nil {
		return err
	}

	for i := 0; i < len(m.VersionApplicability); i++ {
		if swag.IsZero(m.VersionApplicability[i]) { // not required
			continue
		}

		if m.VersionApplicability[i] != nil {
			if err := m.VersionApplicability[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versionApplicability" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versionApplicability" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this applicability based on the context it is used
func (m *Applicability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersionApplicability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Applicability) contextValidateVersionApplicability(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VersionApplicability); i++ {

		if m.VersionApplicability[i] != nil {

			if swag.IsZero(m.VersionApplicability[i]) { // not required
				return nil
			}

			if err := m.VersionApplicability[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versionApplicability" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versionApplicability" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Applicability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Applicability) UnmarshalBinary(b []byte) error {
	var res Applicability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
