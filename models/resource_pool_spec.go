// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourcePoolSpec Spec contains parameters for Resource Pool
//
// swagger:model ResourcePoolSpec
type ResourcePoolSpec struct {

	// CPU limit, default -1 (unlimited)
	CPULimit int64 `json:"cpuLimit,omitempty"`

	// Is CPU reservation expandable, default true
	CPUReservationExpandable bool `json:"cpuReservationExpandable,omitempty"`

	// CPU reservation in Mhz
	CPUReservationMhz int64 `json:"cpuReservationMhz,omitempty"`

	// CPU reservation percentage, from 0 to 100, default 0
	// Maximum: 100
	// Minimum: 0
	CPUReservationPercentage *int32 `json:"cpuReservationPercentage,omitempty"`

	// CPU shares level, default 'normal'
	// Enum: [custom high low normal]
	CPUSharesLevel string `json:"cpuSharesLevel,omitempty"`

	// CPU shares value, only required when shares level is 'normal'
	CPUSharesValue int32 `json:"cpuSharesValue,omitempty"`

	// Memory limit, default -1 (unlimited)
	MemoryLimit int64 `json:"memoryLimit,omitempty"`

	// Is Memory reservation expandable, default true
	// Required: true
	MemoryReservationExpandable *bool `json:"memoryReservationExpandable"`

	// Memory reservation in MB
	MemoryReservationMb int64 `json:"memoryReservationMb,omitempty"`

	// Memory reservation percentage, from 0 to 100, default 0
	// Maximum: 100
	// Minimum: 0
	MemoryReservationPercentage *int32 `json:"memoryReservationPercentage,omitempty"`

	// Memory shares level. default 'normal'
	// Enum: [custom high low normal]
	MemorySharesLevel string `json:"memorySharesLevel,omitempty"`

	// Memory shares value, only required when shares level is '0'
	MemorySharesValue int32 `json:"memorySharesValue,omitempty"`

	// Resource Pool name
	// Required: true
	Name *string `json:"name"`

	// Type of resource pool
	// Enum: [management compute network]
	Type string `json:"type,omitempty"`
}

// Validate validates this resource pool spec
func (m *ResourcePoolSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUReservationPercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUSharesLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryReservationExpandable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryReservationPercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemorySharesLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcePoolSpec) validateCPUReservationPercentage(formats strfmt.Registry) error {
	if swag.IsZero(m.CPUReservationPercentage) { // not required
		return nil
	}

	if err := validate.MinimumInt("cpuReservationPercentage", "body", int64(*m.CPUReservationPercentage), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("cpuReservationPercentage", "body", int64(*m.CPUReservationPercentage), 100, false); err != nil {
		return err
	}

	return nil
}

var resourcePoolSpecTypeCPUSharesLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["custom","high","low","normal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourcePoolSpecTypeCPUSharesLevelPropEnum = append(resourcePoolSpecTypeCPUSharesLevelPropEnum, v)
	}
}

const (

	// ResourcePoolSpecCPUSharesLevelCustom captures enum value "custom"
	ResourcePoolSpecCPUSharesLevelCustom string = "custom"

	// ResourcePoolSpecCPUSharesLevelHigh captures enum value "high"
	ResourcePoolSpecCPUSharesLevelHigh string = "high"

	// ResourcePoolSpecCPUSharesLevelLow captures enum value "low"
	ResourcePoolSpecCPUSharesLevelLow string = "low"

	// ResourcePoolSpecCPUSharesLevelNormal captures enum value "normal"
	ResourcePoolSpecCPUSharesLevelNormal string = "normal"
)

// prop value enum
func (m *ResourcePoolSpec) validateCPUSharesLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resourcePoolSpecTypeCPUSharesLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResourcePoolSpec) validateCPUSharesLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.CPUSharesLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateCPUSharesLevelEnum("cpuSharesLevel", "body", m.CPUSharesLevel); err != nil {
		return err
	}

	return nil
}

func (m *ResourcePoolSpec) validateMemoryReservationExpandable(formats strfmt.Registry) error {

	if err := validate.Required("memoryReservationExpandable", "body", m.MemoryReservationExpandable); err != nil {
		return err
	}

	return nil
}

func (m *ResourcePoolSpec) validateMemoryReservationPercentage(formats strfmt.Registry) error {
	if swag.IsZero(m.MemoryReservationPercentage) { // not required
		return nil
	}

	if err := validate.MinimumInt("memoryReservationPercentage", "body", int64(*m.MemoryReservationPercentage), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("memoryReservationPercentage", "body", int64(*m.MemoryReservationPercentage), 100, false); err != nil {
		return err
	}

	return nil
}

var resourcePoolSpecTypeMemorySharesLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["custom","high","low","normal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourcePoolSpecTypeMemorySharesLevelPropEnum = append(resourcePoolSpecTypeMemorySharesLevelPropEnum, v)
	}
}

const (

	// ResourcePoolSpecMemorySharesLevelCustom captures enum value "custom"
	ResourcePoolSpecMemorySharesLevelCustom string = "custom"

	// ResourcePoolSpecMemorySharesLevelHigh captures enum value "high"
	ResourcePoolSpecMemorySharesLevelHigh string = "high"

	// ResourcePoolSpecMemorySharesLevelLow captures enum value "low"
	ResourcePoolSpecMemorySharesLevelLow string = "low"

	// ResourcePoolSpecMemorySharesLevelNormal captures enum value "normal"
	ResourcePoolSpecMemorySharesLevelNormal string = "normal"
)

// prop value enum
func (m *ResourcePoolSpec) validateMemorySharesLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resourcePoolSpecTypeMemorySharesLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResourcePoolSpec) validateMemorySharesLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.MemorySharesLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateMemorySharesLevelEnum("memorySharesLevel", "body", m.MemorySharesLevel); err != nil {
		return err
	}

	return nil
}

func (m *ResourcePoolSpec) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var resourcePoolSpecTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["management","compute","network"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourcePoolSpecTypeTypePropEnum = append(resourcePoolSpecTypeTypePropEnum, v)
	}
}

const (

	// ResourcePoolSpecTypeManagement captures enum value "management"
	ResourcePoolSpecTypeManagement string = "management"

	// ResourcePoolSpecTypeCompute captures enum value "compute"
	ResourcePoolSpecTypeCompute string = "compute"

	// ResourcePoolSpecTypeNetwork captures enum value "network"
	ResourcePoolSpecTypeNetwork string = "network"
)

// prop value enum
func (m *ResourcePoolSpec) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resourcePoolSpecTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResourcePoolSpec) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resource pool spec based on context it is used
func (m *ResourcePoolSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResourcePoolSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourcePoolSpec) UnmarshalBinary(b []byte) error {
	var res ResourcePoolSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
