// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LicenseCheckResource License check resource
//
// swagger:model LicenseCheckResource
type LicenseCheckResource struct {

	// Product info
	ProductInfo *ProductInfo `json:"productInfo,omitempty"`

	// Resource info
	// Required: true
	ResourceInfo *ResourceInfo `json:"resourceInfo"`
}

// Validate validates this license check resource
func (m *LicenseCheckResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProductInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicenseCheckResource) validateProductInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductInfo) { // not required
		return nil
	}

	if m.ProductInfo != nil {
		if err := m.ProductInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("productInfo")
			}
			return err
		}
	}

	return nil
}

func (m *LicenseCheckResource) validateResourceInfo(formats strfmt.Registry) error {

	if err := validate.Required("resourceInfo", "body", m.ResourceInfo); err != nil {
		return err
	}

	if m.ResourceInfo != nil {
		if err := m.ResourceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this license check resource based on the context it is used
func (m *LicenseCheckResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProductInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicenseCheckResource) contextValidateProductInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ProductInfo != nil {

		if swag.IsZero(m.ProductInfo) { // not required
			return nil
		}

		if err := m.ProductInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("productInfo")
			}
			return err
		}
	}

	return nil
}

func (m *LicenseCheckResource) contextValidateResourceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceInfo != nil {

		if err := m.ResourceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicenseCheckResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicenseCheckResource) UnmarshalBinary(b []byte) error {
	var res LicenseCheckResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
