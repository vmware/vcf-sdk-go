// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Calendar calendar
//
// swagger:model Calendar
type Calendar struct {

	// calendar type
	CalendarType string `json:"calendarType,omitempty"`

	// first day of week
	FirstDayOfWeek int32 `json:"firstDayOfWeek,omitempty"`

	// lenient
	Lenient bool `json:"lenient,omitempty"`

	// minimal days in first week
	MinimalDaysInFirstWeek int32 `json:"minimalDaysInFirstWeek,omitempty"`

	// time
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// time in millis
	TimeInMillis int64 `json:"timeInMillis,omitempty"`

	// time zone
	TimeZone *TimeZone `json:"timeZone,omitempty"`

	// week date supported
	WeekDateSupported bool `json:"weekDateSupported,omitempty"`

	// week year
	WeekYear int32 `json:"weekYear,omitempty"`

	// weeks in week year
	WeeksInWeekYear int32 `json:"weeksInWeekYear,omitempty"`
}

// Validate validates this calendar
func (m *Calendar) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Calendar) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Calendar) validateTimeZone(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeZone) { // not required
		return nil
	}

	if m.TimeZone != nil {
		if err := m.TimeZone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeZone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeZone")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this calendar based on the context it is used
func (m *Calendar) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimeZone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Calendar) contextValidateTimeZone(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeZone != nil {

		if swag.IsZero(m.TimeZone) { // not required
			return nil
		}

		if err := m.TimeZone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeZone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeZone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Calendar) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Calendar) UnmarshalBinary(b []byte) error {
	var res Calendar
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
