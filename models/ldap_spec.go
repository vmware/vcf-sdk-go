// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LdapSpec The LDAP specification when the protocol is LDAP
//
// swagger:model LdapSpec
type LdapSpec struct {

	// The optional alias to associate the domain name
	DomainAlias string `json:"domainAlias,omitempty"`

	// The name to associate with the created domain
	// Required: true
	DomainName *string `json:"domainName"`

	// Password to connect to the ldap(s) server
	// Required: true
	Password *string `json:"password"`

	// Details of the Identity Source
	// Required: true
	SourceDetails *SourceDetails `json:"sourceDetails"`

	// The type of the LDAP Server
	// Example: One among: OpenLdap, ActiveDirectory
	// Required: true
	Type *string `json:"type"`

	// User name to connect to ldap(s) server
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this ldap spec
func (m *LdapSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomainName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LdapSpec) validateDomainName(formats strfmt.Registry) error {

	if err := validate.Required("domainName", "body", m.DomainName); err != nil {
		return err
	}

	return nil
}

func (m *LdapSpec) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *LdapSpec) validateSourceDetails(formats strfmt.Registry) error {

	if err := validate.Required("sourceDetails", "body", m.SourceDetails); err != nil {
		return err
	}

	if m.SourceDetails != nil {
		if err := m.SourceDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceDetails")
			}
			return err
		}
	}

	return nil
}

func (m *LdapSpec) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *LdapSpec) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ldap spec based on the context it is used
func (m *LdapSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSourceDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LdapSpec) contextValidateSourceDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceDetails != nil {

		if err := m.SourceDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LdapSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LdapSpec) UnmarshalBinary(b []byte) error {
	var res LdapSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
