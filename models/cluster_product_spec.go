// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterProductSpec Spec contains information for a VMware Aria product
//
// swagger:model ClusterProductSpec
type ClusterProductSpec struct {

	// The credentials of the VMware Aria product Admin
	// Required: true
	AdminCredentials *CredentialsSpec `json:"adminCredentials"`

	// The certificate chain of the VMware Aria product.
	CertificateChain string `json:"certificateChain,omitempty"`

	// The ID of the product
	ID string `json:"id,omitempty"`

	// Fully Qualified Domain Name for the VMware Aria product load balancer
	// Required: true
	LoadBalancerFqdn *string `json:"loadBalancerFqdn"`

	// The nodes of the VMware Aria product instance
	// Required: true
	Nodes []*ProductNode `json:"nodes"`

	// The version of the VMware Aria product instance
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this cluster product spec
func (m *ClusterProductSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadBalancerFqdn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterProductSpec) validateAdminCredentials(formats strfmt.Registry) error {

	if err := validate.Required("adminCredentials", "body", m.AdminCredentials); err != nil {
		return err
	}

	if m.AdminCredentials != nil {
		if err := m.AdminCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterProductSpec) validateLoadBalancerFqdn(formats strfmt.Registry) error {

	if err := validate.Required("loadBalancerFqdn", "body", m.LoadBalancerFqdn); err != nil {
		return err
	}

	return nil
}

func (m *ClusterProductSpec) validateNodes(formats strfmt.Registry) error {

	if err := validate.Required("nodes", "body", m.Nodes); err != nil {
		return err
	}

	for i := 0; i < len(m.Nodes); i++ {
		if swag.IsZero(m.Nodes[i]) { // not required
			continue
		}

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterProductSpec) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cluster product spec based on the context it is used
func (m *ClusterProductSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdminCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterProductSpec) contextValidateAdminCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.AdminCredentials != nil {

		if err := m.AdminCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterProductSpec) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nodes); i++ {

		if m.Nodes[i] != nil {

			if swag.IsZero(m.Nodes[i]) { // not required
				return nil
			}

			if err := m.Nodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterProductSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterProductSpec) UnmarshalBinary(b []byte) error {
	var res ClusterProductSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
