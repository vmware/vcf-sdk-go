// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SkuSpecificPatchBundles Model for Sku specific patch bundle in a release
//
// swagger:model SkuSpecificPatchBundles
type SkuSpecificPatchBundles struct {

	// Bundle type of the patch bundle
	// Required: true
	BundleType *string `json:"bundleType"`

	// Bundle Version of the product
	// Required: true
	BundleVersion *string `json:"bundleVersion"`

	// Product version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this sku specific patch bundles
func (m *SkuSpecificPatchBundles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBundleVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SkuSpecificPatchBundles) validateBundleType(formats strfmt.Registry) error {

	if err := validate.Required("bundleType", "body", m.BundleType); err != nil {
		return err
	}

	return nil
}

func (m *SkuSpecificPatchBundles) validateBundleVersion(formats strfmt.Registry) error {

	if err := validate.Required("bundleVersion", "body", m.BundleVersion); err != nil {
		return err
	}

	return nil
}

func (m *SkuSpecificPatchBundles) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sku specific patch bundles based on context it is used
func (m *SkuSpecificPatchBundles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SkuSpecificPatchBundles) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SkuSpecificPatchBundles) UnmarshalBinary(b []byte) error {
	var res SkuSpecificPatchBundles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
