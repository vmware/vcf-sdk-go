// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CompatibilityMatrix Model for metadata of compatibility matrix
//
// swagger:model CompatibilityMatrix
type CompatibilityMatrix struct {

	// Content of the compatibility matrix
	// Required: true
	CompatibilityMatrixContent *string `json:"compatibilityMatrixContent"`

	// Metadata of the compatibility matrix content
	// Required: true
	CompatibilityMatrixMetadata *CompatibilityMatrixMetadata `json:"compatibilityMatrixMetadata"`

	// Source type of the compatibility matrix content
	// Example: One among: VMWARE_COMPAT, VXRAIL_COMPAT
	// Required: true
	CompatibilityMatrixSource *string `json:"compatibilityMatrixSource"`
}

// Validate validates this compatibility matrix
func (m *CompatibilityMatrix) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompatibilityMatrixContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompatibilityMatrixMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompatibilityMatrixSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompatibilityMatrix) validateCompatibilityMatrixContent(formats strfmt.Registry) error {

	if err := validate.Required("compatibilityMatrixContent", "body", m.CompatibilityMatrixContent); err != nil {
		return err
	}

	return nil
}

func (m *CompatibilityMatrix) validateCompatibilityMatrixMetadata(formats strfmt.Registry) error {

	if err := validate.Required("compatibilityMatrixMetadata", "body", m.CompatibilityMatrixMetadata); err != nil {
		return err
	}

	if m.CompatibilityMatrixMetadata != nil {
		if err := m.CompatibilityMatrixMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compatibilityMatrixMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("compatibilityMatrixMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *CompatibilityMatrix) validateCompatibilityMatrixSource(formats strfmt.Registry) error {

	if err := validate.Required("compatibilityMatrixSource", "body", m.CompatibilityMatrixSource); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this compatibility matrix based on the context it is used
func (m *CompatibilityMatrix) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompatibilityMatrixMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompatibilityMatrix) contextValidateCompatibilityMatrixMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.CompatibilityMatrixMetadata != nil {

		if err := m.CompatibilityMatrixMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compatibilityMatrixMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("compatibilityMatrixMetadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CompatibilityMatrix) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompatibilityMatrix) UnmarshalBinary(b []byte) error {
	var res CompatibilityMatrix
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
