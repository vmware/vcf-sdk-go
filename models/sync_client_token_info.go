// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SyncClientTokenInfo Represents the information about sync client token
//
// swagger:model SyncClientTokenInfo
type SyncClientTokenInfo struct {

	// expire at
	// Example: The date and time when the token expires
	// Required: true
	ExpireAt *string `json:"expireAt"`

	// The WS1B SCIM URL to push users and groups data from external identity provider
	// Required: true
	ScimURL *string `json:"scimUrl"`

	// The sync client bearer token
	// Required: true
	Token *string `json:"token"`
}

// Validate validates this sync client token info
func (m *SyncClientTokenInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpireAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScimURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SyncClientTokenInfo) validateExpireAt(formats strfmt.Registry) error {

	if err := validate.Required("expireAt", "body", m.ExpireAt); err != nil {
		return err
	}

	return nil
}

func (m *SyncClientTokenInfo) validateScimURL(formats strfmt.Registry) error {

	if err := validate.Required("scimUrl", "body", m.ScimURL); err != nil {
		return err
	}

	return nil
}

func (m *SyncClientTokenInfo) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sync client token info based on context it is used
func (m *SyncClientTokenInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SyncClientTokenInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyncClientTokenInfo) UnmarshalBinary(b []byte) error {
	var res SyncClientTokenInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
