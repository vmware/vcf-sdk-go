// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SDDCVcenterSpec Spec contains parameters for vCenter
//
// swagger:model SddcVcenterSpec
type SDDCVcenterSpec struct {

	// License File
	LicenseFile string `json:"licenseFile,omitempty"`

	// vCenter root password. The password must be between 8 characters and 20 characters long. It must also contain at least one uppercase and lowercase letter, one number, and one character from '! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { &Iota; } ~' and all characters must be ASCII. Space is not allowed in password.
	// Required: true
	// Max Length: 20
	// Min Length: 8
	RootVcenterPassword *string `json:"rootVcenterPassword"`

	// vCenter Server SSH thumbprint (RSA SHA256)
	SSHThumbprint string `json:"sshThumbprint,omitempty"`

	// vCenter Server SSL thumbprint (SHA256)
	SSLThumbprint string `json:"sslThumbprint,omitempty"`

	// vCenter VM storage size
	// Example: One among:lstorage, xlstorage
	StorageSize string `json:"storageSize,omitempty"`

	// vCenter hostname address
	// Required: true
	VcenterHostname *string `json:"vcenterHostname"`

	// vCenter IP address
	// Max Length: 15
	// Min Length: 7
	VcenterIP string `json:"vcenterIp,omitempty"`

	// vCenter VM size
	// Example: One among:xlarge, large, medium, small, tiny
	VMSize string `json:"vmSize,omitempty"`
}

// Validate validates this Sddc vcenter spec
func (m *SDDCVcenterSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRootVcenterPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcenterHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcenterIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SDDCVcenterSpec) validateRootVcenterPassword(formats strfmt.Registry) error {

	if err := validate.Required("rootVcenterPassword", "body", m.RootVcenterPassword); err != nil {
		return err
	}

	if err := validate.MinLength("rootVcenterPassword", "body", *m.RootVcenterPassword, 8); err != nil {
		return err
	}

	if err := validate.MaxLength("rootVcenterPassword", "body", *m.RootVcenterPassword, 20); err != nil {
		return err
	}

	return nil
}

func (m *SDDCVcenterSpec) validateVcenterHostname(formats strfmt.Registry) error {

	if err := validate.Required("vcenterHostname", "body", m.VcenterHostname); err != nil {
		return err
	}

	return nil
}

func (m *SDDCVcenterSpec) validateVcenterIP(formats strfmt.Registry) error {
	if swag.IsZero(m.VcenterIP) { // not required
		return nil
	}

	if err := validate.MinLength("vcenterIp", "body", m.VcenterIP, 7); err != nil {
		return err
	}

	if err := validate.MaxLength("vcenterIp", "body", m.VcenterIP, 15); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Sddc vcenter spec based on context it is used
func (m *SDDCVcenterSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SDDCVcenterSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SDDCVcenterSpec) UnmarshalBinary(b []byte) error {
	var res SDDCVcenterSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
