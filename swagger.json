{
  "swagger" : "2.0",
  "info" : {
    "description" : "VMware Cloud Foundation is an integrated software stack that bundles the VMware virtualization and management components like compute virtualization (vSphere), storage virtualization (vSAN), network virtualization (NSX), and cloud management (vRealize Suite). VCF consists of Cloud Builder - that automates the bringup of the management infrastructure and SDDC Manager - that automates the workload domain management, lifecycle and operations. This API reference guide covers APIs of both Cloud Builder and SDDC Manager",
    "version" : "4.5.2",
    "title" : "VMware Cloud Foundation API Reference Guide",
    "termsOfService" : "http://www.vmware.com/",
    "contact" : {
      "name" : "http://www.vmware.com/"
    },
    "license" : {
      "name" : "VMware Cloud Foundation"
    }
  },
  "host" : "sfo-vcf01.rainpole.io",
  "basePath" : "/",
  "tags" : [ {
    "name" : "Certificates",
    "description" : "APIs for managing Certificates"
  }, {
    "name" : "Network Pools",
    "description" : "APIs for managing Network Pools"
  }, {
    "name" : "ProxyConfiguration",
    "description" : "APIs for managing Proxy Configuration"
  }, {
    "name" : "vRSLCM",
    "description" : "APIs for managing vRealize Suite Lifecycle Manager"
  }, {
    "name" : "Trusted Certificates",
    "description" : "APIs for managing Trusted Certificates"
  }, {
    "name" : "Tasks",
    "description" : "APIs for managing Tasks"
  }, {
    "name" : "System",
    "description" : "APIs for managing System"
  }, {
    "name" : "CEIP",
    "description" : "APIs for managing CEIP status"
  }, {
    "name" : "Users",
    "description" : "APIs for managing Users"
  }, {
    "name" : "vRLI",
    "description" : "APIs for managing vRealize Log Insight"
  }, {
    "name" : "VersionAliasesForBundleComponentType",
    "description" : "APIs for managing Version Alias Configuration"
  }, {
    "name" : "Upgradables",
    "description" : "APIs for managing Upgradables"
  }, {
    "name" : "Upgrades",
    "description" : "APIs for managing Upgrades"
  }, {
    "name" : "vCenters",
    "description" : "APIs for managing vCenters"
  }, {
    "name" : "system",
    "description" : "APIs for managing DNS & NTP configuration"
  }, {
    "name" : "Hosts",
    "description" : "APIs for managing Hosts"
  }, {
    "name" : "NsxTEdgeClusters",
    "description" : "APIs for managing NSX-T Edge Clusters"
  }, {
    "name" : "DepotSettings",
    "description" : "APIs for managing Depot Settings"
  }, {
    "name" : "Releases",
    "description" : "APIs for managing Releases"
  }, {
    "name" : "VasaProviders",
    "description" : "APIs for managing VASA Providers"
  }, {
    "name" : "AVNs",
    "description" : "APIs for managing Solutions Networking (Application Virtual Networks)"
  }, {
    "name" : "NSX-T Clusters",
    "description" : "APIs for managing NSX-T Clusters"
  }, {
    "name" : "Manifests",
    "description" : "APIs for managing LCM Manifests"
  }, {
    "name" : "VcfServices",
    "description" : "APIs for managing VCF Services"
  }, {
    "name" : "Clusters",
    "description" : "APIs for managing Clusters"
  }, {
    "name" : "Tokens",
    "description" : "APIs for managing Access and Refresh Token"
  }, {
    "name" : "vROPs",
    "description" : "APIs for managing vRealize Operations"
  }, {
    "name" : "Resource Functionalities",
    "description" : "APIs for managing Resource Functionalities"
  }, {
    "name" : "Domains",
    "description" : "APIs for managing Domains"
  }, {
    "name" : "BackupRestore",
    "description" : "APIs for managing Backups and Restore"
  }, {
    "name" : "PSCs",
    "description" : "APIs for managing PSCs"
  }, {
    "name" : "WSA",
    "description" : "APIs for managing Workspace ONE Access for vRealize"
  }, {
    "name" : "Resource Warnings",
    "description" : "APIs for managing Resource Warnings"
  }, {
    "name" : "Bundles",
    "description" : "APIs for managing Bundles"
  }, {
    "name" : "FIPS mode details",
    "description" : "APIs for getting FIPS mode details"
  }, {
    "name" : "SddcManagers",
    "description" : "APIs for managing SDDC Managers"
  }, {
    "name" : "SOS",
    "description" : "APIs for managing SOS"
  }, {
    "name" : "Credentials",
    "description" : "APIs for managing Credentials"
  }, {
    "name" : "License Keys",
    "description" : "APIs for managing License Keys"
  }, {
    "name" : "Personalities",
    "description" : "APIs for managing Personalities"
  }, {
    "name" : "SystemPrechecks",
    "description" : "APIs for managing System Prechecks"
  }, {
    "name" : "vSANHealthCheck",
    "description" : "APIs for managing vSAN health checks"
  }, {
    "name" : "SDDC",
    "description" : "APIs for managing SDDC. The /v1/sddcs APIs are available only on the Cloud Builder appliance."
  }, {
    "name" : "Identity Providers",
    "description" : "APIs for managing Identity Providers"
  }, {
    "name" : "vRA",
    "description" : "APIs for managing vRealize Automation"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/v1/avns" : {
      "get" : {
        "tags" : [ "AVNs" ],
        "summary" : "Fetches all AVNs",
        "description" : "Returns all matching AVNs",
        "operationId" : "getAllAvns",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "regionType",
          "in" : "query",
          "description" : "Pass an optional AVN region type matching either Region-A or X-Region",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the list of all matching AVNs",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Avn"
              }
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AVNs" ],
        "summary" : "Create AVNs",
        "operationId" : "createAvns",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "avnsCreationSpec",
          "description" : "Avn creation data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AvnsCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/avns/validations" : {
      "post" : {
        "tags" : [ "AVNs" ],
        "summary" : "Validate AVN Creation Spec",
        "description" : "Returns Validation report",
        "operationId" : "validateAvns",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "avnsCreationSpec",
          "description" : "Provide the spec to create the AVNs",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AvnsCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Validation of AVN Creation spec completed",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/backups/tasks" : {
      "post" : {
        "tags" : [ "BackupRestore" ],
        "summary" : "Trigger backup",
        "operationId" : "backupTasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "backupsSpec",
          "description" : "backupsSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BackupSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/BackupTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/BackupTask"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/bundles" : {
      "get" : {
        "tags" : [ "Bundles" ],
        "summary" : "Get the Bundles",
        "description" : "Get all Bundles i.e uploaded bundles and also bundles available via depot access.",
        "operationId" : "getBundles",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "productType",
          "in" : "query",
          "description" : "The type of the product",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isCompliant",
          "in" : "query",
          "description" : "Is compliant with the current VCF version",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "bundleType",
          "in" : "query",
          "description" : "The type of the bundle",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfBundle"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Bundles" ],
        "summary" : "Upload a Bundle",
        "description" : "Upload Bundle to SDDC Manager. Used when you do not have internet connectivity for downloading bundles from VMWare/VxRail to SDDC Manager. The Bundles are manually downloaded from Depot using Bundle Transfer utility",
        "operationId" : "uploadBundle",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "bundleUploadSpec",
          "description" : "Bundle Upload Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BundleUploadSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/bundles/" : {
      "patch" : {
        "tags" : [ "Bundles" ],
        "summary" : "Update software compatibility sets for Bundles",
        "description" : "Update software compatibility sets for Bundles",
        "operationId" : "updateBundleCompatibilitySets",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "bundleUpdateSpec",
          "description" : "Bundle Update Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BundleUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/bundles/domains/{id}" : {
      "get" : {
        "tags" : [ "Bundles" ],
        "summary" : "Get bundles for skip upgrade a domain from current version to target version.",
        "operationId" : "getBundlesForSkipUpgradeUsingGET",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "targetVersion",
          "in" : "query",
          "description" : "[Deprecated] Target domain VCF version",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfBundle"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Domain not found with given ID.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/bundles/{id}" : {
      "get" : {
        "tags" : [ "Bundles" ],
        "summary" : "Get a Bundle",
        "description" : "Get a Bundle",
        "operationId" : "getBundle",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Bundle ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Bundle"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Bundle Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Bundles" ],
        "summary" : "Update a Bundle for downloading from depot",
        "description" : "Update a Bundle for scheduling/triggering download. Only one download can triggered for a Bundle.",
        "operationId" : "updateBundle",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Bundle ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "bundleUpdateSpec",
          "description" : "Bundle Update Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BundleUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/certificate-authorities" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Get certificate authorities information",
        "description" : "Get certificate authorities information",
        "operationId" : "getCertificateAuthorities",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfCertificateAuthority"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Certificates" ],
        "summary" : "Create a certificate authority",
        "description" : "Creates a certificate authority. This is required to generate signed certificates by supporting CAs.",
        "operationId" : "createCertificateAuthority",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "certificateAuthorityCreationSpec",
          "description" : "certificateAuthorityCreationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CertificateAuthorityCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Certificates" ],
        "summary" : "Configure existing certificate authority",
        "description" : "Configure existing certificate authority",
        "operationId" : "configureCertificateAuthority",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "certificateAuthoritySpec",
          "description" : "certificateAuthoritySpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CertificateAuthorityCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/certificate-authorities/{caType}" : {
      "delete" : {
        "tags" : [ "Certificates" ],
        "summary" : "Deletes CA configuration file",
        "description" : "Deletes CA configuration file",
        "operationId" : "DeleteCaConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "caType",
          "in" : "path",
          "description" : "The CA type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/certificate-authorities/{id}" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Get certificate authority information",
        "description" : "Get certificate authority information",
        "operationId" : "getCertificateAuthorityById",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "CA type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CertificateAuthority"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get the Clusters",
        "operationId" : "getClusters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "isStretched",
          "in" : "query",
          "description" : "isStretched",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfCluster"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Create a Cluster and add to an existing Domain",
        "operationId" : "createCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "clusterCreationSpec",
          "description" : "Cluster Creation Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClusterCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/tags" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get Tags assigned to Clusters",
        "operationId" : "getTagsAssignedToClusters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTagsForResource"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/validations" : {
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Validate the input specification for Cluster creation",
        "operationId" : "validateClustersOperations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "clusterCreationSpec",
          "description" : "Cluster creation specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClusterCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{clusterId}/datastores" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get the list of all datastores associated with the cluster.",
        "operationId" : "getClusterDatastores",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Datastore"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Cluster Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{clusterId}/datastores/queries/{queryId}" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get Datastore query response",
        "operationId" : "getDatastoreQueryResponse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "description" : "Query ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DatastoreQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Query Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{clusterId}/datastores/validation" : {
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Validate the input spec for mounting vSAN remote datastore to an existing cluster",
        "operationId" : "validateVsanRemoteDatastore",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "datastoreMountSpec",
          "description" : "Datastore Mount Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DatastoreMountSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{clusterId}/hosts/queries/{queryId}" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get query response",
        "operationId" : "getHostQueryResponse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "description" : "Query ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HostQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Query Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{clusterId}/vdses" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get the list of VDSes of a cluster.",
        "operationId" : "getVdses",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Vds"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Cluster Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get a Cluster",
        "operationId" : "getCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Cluster"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Cluster not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Clusters" ],
        "summary" : "Delete a Cluster from a Domain if it has been previously initialized for deletion",
        "operationId" : "deleteCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Clusters" ],
        "summary" : "Update a Cluster by adding or removing Hosts, Stretching a standard vSAN cluster, Unstretching a stretched cluster or by marking for deletion",
        "operationId" : "updateCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "clusterUpdateSpec",
          "description" : "Cluster Update Data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClusterUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/datastores" : {
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Mount a datastore to a cluster",
        "operationId" : "addDatastoreToCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "datastoreMountSpec",
          "description" : "Datastore Mount Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DatastoreMountSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/datastores/criteria" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get all datastore criteria",
        "operationId" : "getDatastoresCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfDatastoreCriterion"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/datastores/criteria/{name}" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get a criterion to query for datastore",
        "operationId" : "getDatastoreCriterion",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Criteria Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DatastoreCriterion"
            }
          },
          "404" : {
            "description" : "Criterion Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/datastores/queries" : {
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Post a datastore query",
        "operationId" : "postDatastoreQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "dsCriterion",
          "description" : "dsCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DatastoreCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DatastoreQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/datastores/{datastoreId}" : {
      "delete" : {
        "tags" : [ "Clusters" ],
        "summary" : "Unmount a datastore from a cluster",
        "operationId" : "removeDatastoreFromCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "datastoreId",
          "in" : "path",
          "description" : "Datastore ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/hosts/criteria" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get all host criteria",
        "operationId" : "getHostCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfHostCriterion"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/hosts/criteria/{name}" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get a criterion to query for host",
        "operationId" : "getHostCriterion",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Criteria Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HostCriterion"
            }
          },
          "404" : {
            "description" : "Criterion Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/hosts/queries" : {
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Post a host query",
        "operationId" : "postHostQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "hostCriterion",
          "description" : "hostCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HostCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HostQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/tags" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get Tags assigned to Cluster",
        "operationId" : "getTagsAssignedToCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTag"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Clusters" ],
        "summary" : "Assign Tags to Cluster",
        "operationId" : "assignTagsToExistingCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "tagsSpec",
          "description" : "Tags Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagsSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagAssignmentResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Clusters" ],
        "summary" : "Remove Tags From Cluster",
        "operationId" : "removeTagsFromExistingCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "tagsSpec",
          "description" : "Tags Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagsSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagAssignmentResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/tags/assignable-tags" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "get assignable Tags to Cluster",
        "operationId" : "assignableTagsToCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTag"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/tags/tag-manager" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get Cluster Tag Manager Url",
        "operationId" : "getClusterTagManagerUrl",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagManagerModel"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/validations" : {
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Validate input specification for updating given Cluster",
        "operationId" : "validateClusterOperations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "clusterUpdateSpec",
          "description" : "clusterUpdateSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClusterUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials" : {
      "get" : {
        "tags" : [ "Credentials" ],
        "summary" : "Get the Credentials",
        "description" : "Get the Credentials",
        "operationId" : "getCredentials",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceName",
          "in" : "query",
          "description" : "The name of the resource",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceIp",
          "in" : "query",
          "description" : "The IP address of the resource",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceType",
          "in" : "query",
          "description" : "The type of the resource. One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, BACKUP",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "domainName",
          "in" : "query",
          "description" : "The name of the domain to which the resource belongs to (may be null in case there is no associated domain)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number (must be a positive number), starts with 0",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The page size (must be a positive number, 0 as page size returns all records in one page",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountType",
          "in" : "query",
          "description" : "Type of the account that needs to be fetched by filtering",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfCredential"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Credentials" ],
        "summary" : "Update or rotate passwords for a list of resources",
        "description" : "Update passwords for given list of resources by supplying new passwords or rotate the passwords using system generated passwords",
        "operationId" : "updateOrRotatePasswords",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "credentialsUpdateSpec",
          "description" : "credentialsUpdateSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CredentialsUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials/expirations" : {
      "post" : {
        "tags" : [ "Credentials" ],
        "summary" : "Fetch expiration details of passwords for a list of credentials",
        "description" : "Fetch expiration details of passwords for a list of credentials",
        "operationId" : "fetchPasswordExpiration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "credentialsExpirationSpec",
          "description" : "credentialsExpirationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CredentialsExpirationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CredentialsExpiration"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Too many requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials/expirations/{id}" : {
      "get" : {
        "tags" : [ "Credentials" ],
        "summary" : "Get the status of the password expiration fetch",
        "description" : "Get the status of the password expiration fetch",
        "operationId" : "getExpirationsForPasswords",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The expiration fetch workflow ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CredentialsValidation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials/tasks" : {
      "get" : {
        "tags" : [ "Credentials" ],
        "summary" : "Fetch the credentials tasks",
        "description" : "Fetch all credentials tasks in reverse chronological order",
        "operationId" : "getCredentialsTasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of elements to be returned in the result",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfCredentialsTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials/tasks/{id}" : {
      "get" : {
        "tags" : [ "Credentials" ],
        "summary" : "Fetch a credentials task",
        "description" : "Fetch credentials task for a given ID",
        "operationId" : "getCredentialsTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the credentials task",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CredentialsTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Credentials" ],
        "summary" : "Cancel a failed credentials task for a given ID",
        "description" : "Cancel a failed credentials task for a given ID",
        "operationId" : "cancelCredentialsTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Task ID of the failed operation required to be cancelled",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Credentials" ],
        "summary" : "Retry a failed credentials task for a given ID",
        "description" : "Retry a failed credentials task for a given ID",
        "operationId" : "retryCredentialsTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "credentialsUpdateSpec",
          "description" : "credentialsUpdateSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CredentialsUpdateSpec"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Task ID of the failed operation that is to be retried",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials/tasks/{id}/resource-credentials" : {
      "get" : {
        "tags" : [ "Credentials" ],
        "summary" : "Fetch resource credentials for a given credentials task ID",
        "description" : "Fetch resource credentials for a given credentials task ID",
        "operationId" : "getCredentialsTaskResourcesCredentials",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the credentials task",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ResourceCredentials"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials/tasks/{id}/subtasks/{subtaskId}" : {
      "get" : {
        "tags" : [ "Credentials" ],
        "summary" : "Fetch details of a subtask for a given credentials task ID and sub-task ID.",
        "description" : "Fetch details of a subtask for a given credentials task ID and sub-task ID.",
        "operationId" : "getCredentialsSubTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the credentials task",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subtaskId",
          "in" : "path",
          "description" : "The ID of the credentials sub-task",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CredentialsTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials/{id}" : {
      "get" : {
        "tags" : [ "Credentials" ],
        "summary" : "Get Credential for the given ID",
        "description" : "Get Credential for the given ID",
        "operationId" : "getCredential",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the credential",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Credential"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get the Domains",
        "operationId" : "getDomains",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "The type of the domain",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfDomain"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "Create a Domain",
        "operationId" : "createDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "domainCreationSpec",
          "description" : "Domain creation data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DomainCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/tags" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get Tags assigned to Domains",
        "operationId" : "getTagsAssignedToDomains",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTagsForResource"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/validations" : {
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "Validate the input spec for domains operations",
        "operationId" : "validateDomainsOperations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "domainCreationSpec",
          "description" : "Domain Creation Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DomainCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/clusters/criteria" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get all cluster criteria",
        "operationId" : "getClusterCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfClusterCriterion"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/clusters/criteria/{name}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get a criterion to query for cluster",
        "operationId" : "getClusterCriterion",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Criteria Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ClusterCriterion"
            }
          },
          "404" : {
            "description" : "Criterion Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/clusters/queries" : {
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "Post clusters query",
        "operationId" : "postClustersQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "clusterCriterion",
          "description" : "clusterCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClusterCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ClusterQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/clusters/queries/{queryId}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get clusters query response",
        "operationId" : "getClustersQueryResponse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "description" : "Query ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ClusterQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Query Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/clusters/{clusterName}/queries" : {
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "Post a cluster query",
        "operationId" : "postClusterQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "clusterName",
          "in" : "path",
          "description" : "Cluster Name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "clusterCriterion",
          "description" : "clusterCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClusterCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ClusterQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/clusters/{clusterName}/queries/{queryId}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get cluster query response",
        "operationId" : "getClusterQueryResponse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "clusterName",
          "in" : "path",
          "description" : "Cluster Name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "description" : "Query ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ClusterQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Query Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/datastores/criteria" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get all datastore criteria",
        "operationId" : "getDatastoresCriteria_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfDatastoreCriterion"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/datastores/criteria/{name}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get a criterion to query for datastore",
        "operationId" : "getDatastoreCriterion_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Criteria Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DatastoreCriterion"
            }
          },
          "404" : {
            "description" : "Criterion Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/datastores/queries" : {
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "Post a datastore query",
        "operationId" : "postDatastoreQuery_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "dsCriterion",
          "description" : "dsCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DatastoreCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DatastoreQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/datastores/queries/{queryId}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get Datastore query response",
        "operationId" : "getDatastoreQueryResponse_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "description" : "Query ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DatastoreQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Query Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/health-checks" : {
      "get" : {
        "tags" : [ "vSANHealthCheck" ],
        "summary" : "Get vSAN health check status",
        "description" : "Get vSAN health check status for all cluster on the domain",
        "operationId" : "getHealthCheckQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Status of health check to filter by",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/HealthCheckQueryResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/HealthCheckQueryResult"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "vSANHealthCheck" ],
        "summary" : "Update vSAN health check status",
        "description" : "Update vSAN health check status for domain",
        "operationId" : "setHealthCheckStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "healthCheckUpdateSpec",
          "description" : "Health check update spec",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/HealthCheckSpec"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/HealthCheckTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/HealthCheckTask"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/health-checks/queries/{queryId}" : {
      "get" : {
        "tags" : [ "vSANHealthCheck" ],
        "summary" : "Get vSAN health check status by Query Id",
        "description" : "Get vSAN health check status for a given Query Id",
        "operationId" : "getHealthCheckStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "description" : "Query ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HealthCheckQueryResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/health-checks/tasks/{taskId}" : {
      "get" : {
        "tags" : [ "vSANHealthCheck" ],
        "summary" : "Get vSAN health check update task status",
        "description" : "Get vSAN health check update task status for a given task Id",
        "operationId" : "getHealthCheckStatusTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "taskId",
          "in" : "path",
          "description" : "Health check task id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HealthCheckTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainName}/certificates" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Get latest generated certificate(s) in a domain.",
        "description" : "Get latest generated certificate(s) in a domain.",
        "operationId" : "getCertificates",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainName",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfCertificate"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Certificates" ],
        "summary" : "Generate certificate(s) for the selected resource(s) in a domain",
        "description" : "Generate certificate(s) for the selected resource(s) in a domain. CA must be configured and CSR must be generated beforehand.",
        "operationId" : "generateCertificates",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainName",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "certificateGenerationSpec",
          "description" : "certificateGenerationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CertificatesGenerationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Certificates" ],
        "summary" : "Replace certificate(s) for the selected resource(s) in a domain",
        "description" : "Replace certificate(s) for the selected resource(s) in a domain",
        "operationId" : "replaceCertificates",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainName",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "certificateOperationSpec",
          "description" : "certificateOperationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CertificateOperationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v1/domains/{domainName}/certificates/uploads" : {
      "put" : {
        "tags" : [ "Certificates" ],
        "summary" : "Upload certificates to the certificate store",
        "description" : "Upload certificates to the certificate store",
        "operationId" : "uploadCertificates",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainName",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "file",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad request.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v1/domains/{domainName}/csrs" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Get available CSR(s) in json format",
        "description" : "Get available CSR(s) in json format",
        "operationId" : "getCSRs",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainName",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfCsr"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Certificates" ],
        "summary" : "Generate CSR(s)",
        "description" : "Generate CSR(s) for the selected resource(s) in the domain.\n\n*Warning:*\n_Avoid using wildcard certificates. Instead, use subdomain-specific certificates that are rotated often. A compromised wildcard certificate can lead to security repercussions_",
        "operationId" : "generatesCSRs",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainName",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "csrsGenerationSpec",
          "description" : "csrsGenerationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CsrsGenerationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainName}/csrs/downloads" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Download available CSR(s) in tar.gz format",
        "description" : "Download available CSR(s) in tar.gz format",
        "operationId" : "downloadCSR",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "domainName",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v1/domains/{domainName}/resource-certificates" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "View certificate of all the resources in a domain",
        "description" : "View detailed metadata about the certificate(s) of all the resources in a domain",
        "operationId" : "viewCertificate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainName",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfCertificate"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get a Domain",
        "operationId" : "getDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Domain"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Domain not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Domains" ],
        "summary" : "Delete a Domain if it has been previously initialized for deletion",
        "operationId" : "deleteDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Domains" ],
        "summary" : "Update a Domain",
        "operationId" : "updateDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "domainUpdateSpec",
          "description" : "Domain Update Data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DomainUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/endpoints" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get Endpoints of a Domain",
        "operationId" : "getDomainEndpoints",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfEndpoint"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Domain not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/resource-certificates" : {
      "put" : {
        "tags" : [ "Certificates" ],
        "summary" : "Replace resource certificates",
        "description" : "Replace resource certificates",
        "operationId" : "replaceResourceCertificates",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "resourceCertificateSpecs",
          "description" : "resourceCertificateSpecs",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ResourceCertificateSpec"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/resource-certificates/validations" : {
      "put" : {
        "tags" : [ "Certificates" ],
        "summary" : "Validate resource certificates",
        "description" : "Validate resource certificates",
        "operationId" : "validateResourceCertificates",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "resourceCertificateSpecs",
          "description" : "resourceCertificateSpecs",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ResourceCertificateSpec"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CertificateValidationTask"
            }
          },
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/CertificateValidationTask"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/resource-certificates/validations/{validationId}" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Get the resource certificate validation result",
        "description" : "Get the resource certificate validation result",
        "operationId" : "getResourceCertificatesValidationResult",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "validationId",
          "in" : "path",
          "description" : "Validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CertificateValidationTask"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/tags" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get Tags assigned to Domain",
        "operationId" : "getTagsAssignedToDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTag"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Domains" ],
        "summary" : "Assign Tags to Domain",
        "operationId" : "assignTagsToExistingDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "tagsSpec",
          "description" : "Tags Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagsSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagAssignmentResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Domains" ],
        "summary" : "remove Tags From Domain",
        "operationId" : "removeTagsFromDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "tagsSpec",
          "description" : "Tags Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagsSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagAssignmentResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/tags/assignable-tags" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "get assignable Tags to Domain",
        "operationId" : "assignableTagsToDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTag"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/tags/tag-manager" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get Domain Tag Manager Url",
        "operationId" : "getDomainTagManagerUrl",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagManagerModel"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/edge-clusters" : {
      "get" : {
        "tags" : [ "NsxTEdgeClusters" ],
        "summary" : "Get the Edge Clusters",
        "operationId" : "getEdgeClusters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "query",
          "description" : "Pass an optional vSphere Cluster ID to fetch edge clusters associated with the vSphere Cluster",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfEdgeCluster"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "NsxTEdgeClusters" ],
        "summary" : "Create an Edge Cluster",
        "operationId" : "createEdge",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "edgeCreationSpec",
          "description" : "NSX-T Edge cluster creation data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EdgeClusterCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/edge-clusters/validations" : {
      "post" : {
        "tags" : [ "NsxTEdgeClusters" ],
        "summary" : "Validate an Edge Cluster spec",
        "operationId" : "validateEdgeClusterSpec",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "edgeCreationSpec",
          "description" : "NSX-T Edge cluster creation data to be validated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EdgeClusterCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/edge-clusters/validations/{id}" : {
      "get" : {
        "tags" : [ "NsxTEdgeClusters" ],
        "summary" : "Get the Edge Cluster spec validation",
        "operationId" : "getValidationForCreateEdgeCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/edge-clusters/{id}" : {
      "get" : {
        "tags" : [ "NsxTEdgeClusters" ],
        "summary" : "Get an Edge Cluster",
        "operationId" : "getEdgeCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Edge Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/EdgeCluster"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Edge Cluster not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "NsxTEdgeClusters" ],
        "summary" : "Expand or Shrink an NSX-T Edge Cluster",
        "operationId" : "updateEdgeCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "edgeClusterUpdateSpec",
          "description" : "NSX-T Edge cluster update specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EdgeClusterUpdateSpec"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Edge Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "501" : {
            "description" : "Not Implemented",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/edge-clusters/{id}/validations" : {
      "post" : {
        "tags" : [ "NsxTEdgeClusters" ],
        "summary" : "Validate an NSX-T Edge Cluster update spec",
        "operationId" : "validateEdgeClusterUpdateSpec",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "edgeClusterUpdateSpec",
          "description" : "NSX-T Edge Cluster Update spec to be validated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EdgeClusterUpdateSpec"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "NSX-T Edge cluster id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get the Hosts",
        "operationId" : "getHosts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status of the Host.One among: ASSIGNED, UNASSIGNED_USEABLE, UNASSIGNED_UNUSEABLE",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "domainId",
          "in" : "query",
          "description" : "ID of the Domain",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clusterId",
          "in" : "query",
          "description" : "ID of the Cluster",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "networkpoolId",
          "in" : "query",
          "description" : "ID of the Network pool",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storageType",
          "in" : "query",
          "description" : "Type of the Storage.VMFS_FC",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "datastoreName",
          "in" : "query",
          "description" : "Name of the datastore",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfHost"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Hosts" ],
        "summary" : "Commission the Hosts",
        "operationId" : "commissionHosts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "hostCommissionSpecs",
          "description" : "hostCommissionSpecs",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/HostCommissionSpec"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Hosts" ],
        "summary" : "Decommission the Hosts",
        "operationId" : "decommissionHosts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "hostDecommissionSpecs",
          "description" : "hostDecommissionSpecs",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/HostDecommissionSpec"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/hosts/criteria" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get all criteria",
        "operationId" : "getCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfHostCriterion"
            }
          }
        }
      }
    },
    "/v1/hosts/criteria/{name}" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get a criterion",
        "operationId" : "getCriterion",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HostCriterion"
            }
          },
          "404" : {
            "description" : "Criterion Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts/queries" : {
      "post" : {
        "tags" : [ "Hosts" ],
        "summary" : "Post a query",
        "operationId" : "postQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "hostCriterion",
          "description" : "hostCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HostCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HostQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts/queries/{id}" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get query response",
        "operationId" : "getHostQueryResponse_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HostQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Query Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts/tags" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get Tags assigned to Hosts",
        "operationId" : "getTagsAssignedToHosts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTagsForResource"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts/validations" : {
      "post" : {
        "tags" : [ "Hosts" ],
        "summary" : "Validate the input spec for hosts operations",
        "operationId" : "validateHostsOperations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "hostCommissionSpecs",
          "description" : "hostCommissionSpecs",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/HostCommissionSpec"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/hosts/validations/{id}" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get the status of the validation of the input specification to commission the Hosts",
        "operationId" : "getValidationForCommissionHosts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/hosts/{id}" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get a Host",
        "operationId" : "getHost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Host"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Host Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts/{id}/tags" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get Tags assigned to Host",
        "operationId" : "getTagsAssignedToHost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Host ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTag"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Hosts" ],
        "summary" : "Assign Tags to Host",
        "operationId" : "assignTagsToExistingHost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Host ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "tagsSpec",
          "description" : "Tags Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagsSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagAssignmentResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Hosts" ],
        "summary" : "Remove Tags From Host",
        "operationId" : "removeTagsFromHost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Host ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "tagsSpec",
          "description" : "Tags Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagsSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagAssignmentResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts/{id}/tags/assignable-tags" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "get Assignable Tags to Host",
        "operationId" : "assignableTagsToHost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Host ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTag"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts/{id}/tags/tag-manager" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get Host Tag Manager Url",
        "operationId" : "getHostTagManagerUrl",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Host ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagManagerModel"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/identity-providers" : {
      "get" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Get all Identity Providers",
        "description" : "Get a list of all Identity Providers",
        "operationId" : "getAllIdps",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfIdentityProvider"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Add an external Identity provider",
        "description" : "Add an External Identity Provider",
        "operationId" : "addExternalIdentityProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "identityProviderSpec",
          "description" : "Identity Provider Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IdentityProviderSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : "Created",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/identity-providers/{id}" : {
      "get" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Get Identity Provider By Id",
        "description" : "Get a specific Identity Provider using it's Id",
        "operationId" : "getIdentityProviderById",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the Identity Provider",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/IdentityProvider"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Delete an external Identity Provider",
        "description" : "Delete an Identity Provider by its identifier, if it exists",
        "operationId" : "deleteExternalIdentityProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Identity Provider",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "Identity Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Update an external Identity provider",
        "description" : "Update the identity provider by its identifier, if it exists",
        "operationId" : "updateExternalIdentityProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "identityProviderSpec",
          "description" : "Identity Provider Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IdentityProviderSpec"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Identity Provider",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "Identity Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/identity-providers/{id}/identity-sources" : {
      "post" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Add an embedded Identity source",
        "description" : "Add an identity source to an embedded IDP by id, if it exists",
        "operationId" : "addEmbeddedIdentitySource",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Identity Provider",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "identitySourceSpec",
          "description" : "Identity Source Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IdentitySourceSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "Identity Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/identity-providers/{id}/identity-sources/{domainName}" : {
      "delete" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Delete an Identity Source",
        "description" : "Delete an Identity Source by domain name, if it exists",
        "operationId" : "deleteIdentitySource",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Identity Provider",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "domainName",
          "in" : "path",
          "description" : "Domain Name associated with the identity source",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "Identity Source not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Update an embedded Identity source",
        "description" : "Update the identity source associated with the embedded IDP by name, if it exists",
        "operationId" : "updateEmbeddedIdentitySource",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "identitySourceSpec",
          "description" : "Identity Source Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IdentitySourceSpec"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Identity Provider",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "domainName",
          "in" : "path",
          "description" : "Domain Name associated with the identity source",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "Identity Source not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/license-keys" : {
      "get" : {
        "tags" : [ "License Keys" ],
        "summary" : "Get the License Keys",
        "operationId" : "getLicenseKeys",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "productType",
          "in" : "query",
          "description" : "Type of a Product",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "licenseKeyStatus",
          "in" : "query",
          "description" : "Status of a License Key",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "schema" : {
              "$ref" : "#/definitions/PageOfLicenseKey"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "License Keys" ],
        "summary" : "Add a License Key",
        "operationId" : "addLicenseKey",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "licenseKey",
          "description" : "License key with other attributes",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LicenseKey"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/LicenseKey"
            }
          },
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/LicenseKey"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/license-keys/{key}" : {
      "get" : {
        "tags" : [ "License Keys" ],
        "summary" : "Get a License Key by key",
        "operationId" : "getLicenseKey",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The 29 alpha numeric character license key with hyphens",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "schema" : {
              "$ref" : "#/definitions/LicenseKey"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "License key not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "License Keys" ],
        "summary" : "Delete a License Key",
        "operationId" : "deleteLicenseKey",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The 29 alpha numeric character license key with hyphens",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content"
          },
          "404" : {
            "description" : "License key not found"
          }
        }
      }
    },
    "/v1/licensing-info" : {
      "get" : {
        "tags" : [ "License Keys" ],
        "summary" : "Get the Licensing information",
        "operationId" : "getLicensingInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "resourceType",
          "in" : "query",
          "description" : "Resource type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceIds",
          "in" : "query",
          "description" : "Resource IDs",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/LicensingInfo"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/licensing-info/domains/{id}" : {
      "get" : {
        "tags" : [ "License Keys" ],
        "summary" : "Get the Licensing information of a domain",
        "operationId" : "getDomainLicensingInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "schema" : {
              "$ref" : "#/definitions/LicensingInfo"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "License Keys" ],
        "summary" : "Update the Licensing information of a domain",
        "operationId" : "updateDomainLicensingInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "licensingInfoSpec",
          "description" : "License information spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LicensingInfoSpec"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/licensing-info/system" : {
      "get" : {
        "tags" : [ "License Keys" ],
        "summary" : "Get the Licensing information of system",
        "operationId" : "getSystemLicensingInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "schema" : {
              "$ref" : "#/definitions/LicensingInfo"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "License Keys" ],
        "summary" : "Update the Licensing information of system",
        "operationId" : "updateSystemLicensingInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "licensingInfoSpec",
          "description" : "License information spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LicensingInfoSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/manifests" : {
      "get" : {
        "tags" : [ "Manifests" ],
        "summary" : "Get manifest",
        "description" : "Get manifest. There should be only one valid manifest in the System.",
        "operationId" : "getManifest",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Manifest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Manifest Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Manifests" ],
        "summary" : "Save/Load manifest",
        "description" : "Save/Load manifest. Make sure manifest is a valid one. If manifest already exists, it gets overridden.",
        "operationId" : "saveManifest",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "manifest",
          "description" : "manifest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Manifest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/network-pools" : {
      "get" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Get the Network Pools",
        "description" : "Get the Network Pools",
        "operationId" : "getNetworkPools",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Referenced network pool",
            "schema" : {
              "$ref" : "#/definitions/PageOfNetworkPool"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Referenced network pool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Create a Network Pool",
        "description" : "Create a Network Pool",
        "operationId" : "createNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "networkPool",
          "description" : "Specification of the Network pool to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NetworkPool"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/NetworkPool"
            }
          },
          "201" : {
            "description" : "The newly created network pool",
            "schema" : {
              "$ref" : "#/definitions/NetworkPool"
            }
          },
          "400" : {
            "description" : "Errors due to network pool validations failures",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/network-pools/{id}" : {
      "get" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Get a Network Pool",
        "description" : "Get a Network Pool by ID, if it exists",
        "operationId" : "getNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the network pool to fetch",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Referenced network pool",
            "schema" : {
              "$ref" : "#/definitions/NetworkPool"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Referenced network pool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Delete a Network Pool",
        "description" : "Delete the Network Pool by the ID, if it exists and is unused",
        "operationId" : "deleteNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the network pool",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Hosts are still associated with NetworkPool",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "The specification of the deleted network pool"
          },
          "404" : {
            "description" : "Referenced network pool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Update Network Pool",
        "description" : "Update a Network Pool by ID, if it exists",
        "operationId" : "updateNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Network Pool ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "networkPoolUpdateSpec",
          "description" : "Network Pool update data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NetworkPoolUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Network Pool update completed",
            "schema" : {
              "$ref" : "#/definitions/NetworkPool"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Network Pool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/network-pools/{id}/networks" : {
      "get" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Get the Networks of a Network Pool",
        "description" : "Get the Networks that are part of a Network Pool",
        "operationId" : "getNetworksOfNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID for Networkpool to get the networks from",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Networks for referenced network pool",
            "schema" : {
              "$ref" : "#/definitions/PageOfNetwork"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Network pool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/network-pools/{id}/networks/{networkId}" : {
      "get" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Get a Network of a Network Pool",
        "description" : "Get a Network that is part of a Network Pool",
        "operationId" : "getNetworkOfNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the Network pool",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "networkId",
          "in" : "path",
          "description" : "Id of the Network",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Network for referenced network pool",
            "schema" : {
              "$ref" : "#/definitions/Network"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Networkpool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/network-pools/{id}/networks/{networkId}/ip-pools" : {
      "post" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Add an IP Pool to a Network of a Network Pool",
        "description" : "Add an IP Pool to a Network of a Network Pool",
        "operationId" : "addIpPoolToNetworkOfNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the networkpoolk",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "networkId",
          "in" : "path",
          "description" : "Id of the network",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "ipPool",
          "description" : "ipPool",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IpPool"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Add the IP Pool associated with a Network of a Network Pool",
            "schema" : {
              "$ref" : "#/definitions/Network"
            }
          },
          "400" : {
            "description" : "IP range validation failed error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Either Network Pool ID or Network ID not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Delete an IP Pool from a Network of a Network Pool",
        "description" : "Delete an IP Pool from a Network of a Network Pool",
        "operationId" : "deleteIpPoolFromNetworkOfNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the networkpool",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "networkId",
          "in" : "path",
          "description" : "ID of the network",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "ipPool",
          "description" : "ipPool",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IpPool"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Errors due to network/networkpool validations failures",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Either network or Network pool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Get the NSX-T clusters",
        "operationId" : "getNsxtClusters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "isShareable",
          "in" : "query",
          "description" : "filter NSX-T clusters which can be shared for domain creation",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfNsxTCluster"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/criteria" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Get all NSX-T criteria",
        "operationId" : "getCriteria_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfNsxTCriterion"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/criteria/{name}" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Get a NSX-T criterion",
        "operationId" : "getCriterion_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/NsxTCriterion"
            }
          },
          "404" : {
            "description" : "Criterion Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/ip-address-pools/validations" : {
      "post" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "validateIpPool",
        "operationId" : "validateIpPoolUsingPOST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nsxtIpAddressPoolValidationSpec",
          "description" : "nsxtIpAddressPoolValidationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NsxtIpAddressPoolValidationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/ip-address-pools/validations/{id}" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "getValidationResult",
        "operationId" : "getValidationResultUsingGET",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/queries" : {
      "post" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Post a query",
        "operationId" : "postQuery_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nsxtCriterion",
          "description" : "nsxtCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NsxTCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/NsxTQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/NsxTQueryResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/queries/{id}" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Get NSX-T cluster query response",
        "operationId" : "getNsxtClusterQueryResponse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/NsxTQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/NsxTQueryResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Query Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/{id}" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Get a NSX-T cluster",
        "operationId" : "getNsxtCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "NSX-T cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/NsxTCluster"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "NSX-T cluster not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Get the NSX-T IP address pools",
        "operationId" : "getNsxtIpAddressPools",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nsxt-cluster-id",
          "in" : "path",
          "description" : "NSX-T cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/NsxtIpAddressPool"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "IP address pools not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools/{name}" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Get a NSX-T IP address pool",
        "operationId" : "getNsxtIpAddressPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nsxt-cluster-id",
          "in" : "path",
          "description" : "NSX-T cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "IP address pool name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/NsxtIpAddressPool"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "IP address pool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/personalities" : {
      "get" : {
        "tags" : [ "Personalities" ],
        "summary" : "Get the Personalities",
        "description" : "Get the Personalities which are available via depot access.",
        "operationId" : "getPersonalities",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "baseOSVersion",
          "in" : "query",
          "description" : "The base OS version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "addOnName",
          "in" : "query",
          "description" : "The add on name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "addOnVendorName",
          "in" : "query",
          "description" : "The add on vendor name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "componentName",
          "in" : "query",
          "description" : "The component name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "componentVendorName",
          "in" : "query",
          "description" : "The component vendor name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "personalityName",
          "in" : "query",
          "description" : "personalityName",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfPersonality"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Personalities" ],
        "summary" : "Upload a Personality",
        "description" : "Upload Personality to SDDC Manager.",
        "operationId" : "uploadPersonality",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "personalityUploadSpec",
          "description" : "Personality Upload Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PersonalityUploadSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Personalities" ],
        "summary" : "Delete the personality based on either name or id",
        "description" : "Delete the personality based on either name or id",
        "operationId" : "deletePersonality",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "personalityId",
          "in" : "query",
          "description" : "The personality id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "personalityName",
          "in" : "query",
          "description" : "The personality name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Personality by name or id not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/personalities/{personalityId}" : {
      "get" : {
        "tags" : [ "Personalities" ],
        "summary" : "Get Personalities By Id",
        "description" : "Get the Personality for id",
        "operationId" : "getPersonality",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "personalityId",
          "in" : "path",
          "description" : "Personality ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Personality"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Personality not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/pscs" : {
      "get" : {
        "tags" : [ "PSCs" ],
        "summary" : "Get the PSCs",
        "operationId" : "getPscs",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfPsc"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/pscs/{id}" : {
      "get" : {
        "tags" : [ "PSCs" ],
        "summary" : "Get a PSC",
        "operationId" : "getPsc",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "PSC ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Psc"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Psc not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/releases" : {
      "get" : {
        "tags" : [ "Releases" ],
        "summary" : "Get Releases.",
        "description" : "Get all Releases, with option to get current release for a domain, get release by version or get future releases for a versionor get all the applicable target release.",
        "operationId" : "getReleases",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "query",
          "description" : "Domain ID to get current release of the domain",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionEq",
          "in" : "query",
          "description" : "Release version to get its release",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "vxRailVersionEq",
          "in" : "query",
          "description" : "Release VxRail version to get its release",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionGt",
          "in" : "query",
          "description" : "Release version to get its future releases",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "vxRailVersionGt",
          "in" : "query",
          "description" : "Release vxrail version to get its future releases",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "applicableForVersion",
          "in" : "query",
          "description" : "Release version to get applicable releases",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "applicableForVxRailVersion",
          "in" : "query",
          "description" : "Release VxRail version to get applicable releases",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getFutureReleases",
          "in" : "query",
          "description" : "[Deprecated] Get all future releases for a given domain",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfRelease"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Release not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/releases/domains/{domainId}/future-releases" : {
      "get" : {
        "tags" : [ "Releases" ],
        "summary" : "Returns all known to the system future target versions for a domain.",
        "description" : "Returns all known to the system future target versions for a domain. If some of them are not allowed (e.g. stepping stone) includes message why.",
        "operationId" : "getFutureReleases",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID to get all feature target versions",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfDomainFutureRelease"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Domain not found with given ID.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/releases/system" : {
      "get" : {
        "tags" : [ "Releases" ],
        "summary" : "Get System Release.",
        "description" : "Returns release for the lowest deployed VCF version for a domain on the environment.If Management domain is ahead of WLD domain, VCF BOM version for the WLDdomain will be returned.",
        "operationId" : "getSystemRelease",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Release"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Release not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/resource-functionalities" : {
      "get" : {
        "tags" : [ "Resource Functionalities" ],
        "summary" : "Get Resource Functionalities",
        "operationId" : "getResourceFunctionalities",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceType",
          "in" : "query",
          "description" : "Resource type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentResourceType",
          "in" : "query",
          "description" : "Parent resource type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionalityType",
          "in" : "query",
          "description" : "Functionality type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceIds",
          "in" : "query",
          "description" : "Resource IDs",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "isAllowed",
          "in" : "query",
          "description" : "Allowed or disallowed resource functionalities",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfResourceFunctionalities"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/resource-functionalities/global" : {
      "get" : {
        "tags" : [ "Resource Functionalities" ],
        "summary" : "Get Resource Functionalities Allowed Global Configuration",
        "operationId" : "getResourcesFunctionalitiesAllowedGlobal",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ResourceFunctionalitiesGlobalConfiguration"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/resource-warnings" : {
      "get" : {
        "tags" : [ "Resource Warnings" ],
        "summary" : "Get Resource Warnings",
        "operationId" : "getResourceWarnings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceType",
          "in" : "query",
          "description" : "Resource type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceIds",
          "in" : "query",
          "description" : "Resource IDs",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "resourceNames",
          "in" : "query",
          "description" : "Resource Names",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfResourceWarning"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/resource-warnings/{id}" : {
      "get" : {
        "tags" : [ "Resource Warnings" ],
        "summary" : "Get a Resource Warning by ID",
        "operationId" : "getResourceWarning",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ResourceWarning"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Resource Warning not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/restores/tasks" : {
      "post" : {
        "tags" : [ "BackupRestore" ],
        "summary" : "Trigger Restore",
        "operationId" : "restoresTasks_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "restoreSpec",
          "description" : "restoreSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RestoreSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/restores/tasks/{id}" : {
      "get" : {
        "tags" : [ "BackupRestore" ],
        "summary" : "Fetch the restores task",
        "operationId" : "restoresTasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The restore task ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/roles" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get all roles",
        "description" : "Get a list of all roles",
        "operationId" : "getRoles",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfRole"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sddc-manager/trusted-certificates" : {
      "get" : {
        "tags" : [ "Trusted Certificates" ],
        "summary" : "Get the trusted certificates from the SDDC Manager",
        "description" : "Get the trusted certificates from the SDDC Manager",
        "operationId" : "getTrustedCertificates",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfTrustedCertificate"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Trusted Certificates" ],
        "summary" : "Add a trusted certificate to the SDDC Manager",
        "description" : "Add a trusted certificate to the SDDC Manager",
        "operationId" : "addTrustedCertificate",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "trustedCertificateSpec",
          "description" : "trustedCertificateSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TrustedCertificateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Trusted certificate already exists",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/sddc-manager/trusted-certificates/{alias}" : {
      "delete" : {
        "tags" : [ "Trusted Certificates" ],
        "summary" : "Delete a trusted certificate from the SDDC Manager",
        "description" : "Delete a trusted certificate from the SDDC Manager. Restart the services to reflect the changes.",
        "operationId" : "deleteTrustedCertificate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "alias",
          "in" : "path",
          "description" : "Certificate Alias",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v1/sddc-managers" : {
      "get" : {
        "tags" : [ "SddcManagers" ],
        "summary" : "Get the SDDC Managers",
        "operationId" : "getSddcManagers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfSddcManager"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/sddc-managers/{id}" : {
      "get" : {
        "tags" : [ "SddcManagers" ],
        "summary" : "Get a SDDC Manager",
        "operationId" : "getSddcManager",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Sddc Manager ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/SddcManager"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Sddc Manager not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/sddcs" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Retrieve all SDDCs",
        "operationId" : "retrieveAllSddcs",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/PageOfSddcTask"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "SDDC" ],
        "summary" : "Create SDDC",
        "operationId" : "createSddc",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "sddcSpec",
          "description" : "SDDC specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SddcSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SddcTask"
            }
          },
          "400" : {
            "description" : "SDDC already exists, Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/SddcTask"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/sddcs/about" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Get Bringup Info",
        "description" : "GET Method to retrieve information about Bringup app",
        "operationId" : "getBringupInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VcfService"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          },
          "501" : {
            "description" : "Not Implemented"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v1/sddcs/validations" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Get all SDDC specification validations",
        "operationId" : "getAllSddcValidations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Accepted",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Validation"
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "501" : {
            "description" : "Not Implemented",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "SDDC" ],
        "summary" : "Validate SDDC specification before creation",
        "description" : "SDDC specification incorporates all the client inputs regarding VMW component parameters constituting the SDDC: NTP, DNS spec, ESXi, VC, VSAN, NSX spec et al.",
        "operationId" : "validateSddcSpec",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "sddcSpec",
          "description" : "SDDC specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SddcSpec"
          }
        }, {
          "name" : "redo",
          "in" : "query",
          "description" : "redo",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Validation name\nDeprecated: ESXI_VERSION_VALIDATION",
          "required" : false,
          "type" : "string",
          "enum" : [ "JSON_SPEC_VALIDATION", "SECURE_PLATFORM_AUDIT", "LICENSE_KEY_VALIDATION", "TIME_SYNC_VALIDATION", "NETWORK_IP_POOLS_VALIDATION", "NETWORK_CONFIG_VALIDATION", "NETWORK_CONNECTIVITY_VALIDATION", "ESXI_HOST_READINESS_VALIDATION", "PASSWORDS_VALIDATION", "HOST_IP_DNS_VALIDATION", "CLOUDBUILDER_READY_VALIDATION", "VSAN_AVAILABILITY_VALIDATION", "NSXT_NETWORKS_VALIDATION", "MANAGEMENT_NETWORKS_VALIDATION" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "202" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/sddcs/validations/{id}" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Get SDDC specification validation status by ID",
        "operationId" : "getSddcValidation",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SDDC validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "501" : {
            "description" : "Not Implemented",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "SDDC" ],
        "summary" : "Retry SDDC validation",
        "description" : "Retry a completed SDDC validation",
        "operationId" : "retrySddcValidation",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SDDC validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Completed",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          },
          "405" : {
            "description" : "Method Not Allowed"
          }
        }
      }
    },
    "/v1/sddcs/validations/{validationId}/report" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Get validation report by ID",
        "description" : "Returns the bringup report for a validation. Reports are generated in PDF format.",
        "operationId" : "getBringupValidationReport",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/pdf" ],
        "parameters" : [ {
          "name" : "validationId",
          "in" : "path",
          "description" : "Bringup validation ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "description" : "Start time of validation to be put in the report",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "curClientTime",
          "in" : "query",
          "description" : "Current client local time of the the report generation",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          },
          "501" : {
            "description" : "Not Implemented"
          }
        }
      }
    },
    "/v1/sddcs/{id}" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Retrieve a SDDC",
        "operationId" : "retrieveSDDC",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SDDC ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SddcTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "SDDC" ],
        "summary" : "Retry failed SDDC creation",
        "operationId" : "retrySddc",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SDDC ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "sddcSpec",
          "description" : "sddcSpec",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SddcSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SddcTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/SddcTask"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "405" : {
            "description" : "Not allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/sddcs/{id}/detail-report" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Get SDDC report by ID",
        "description" : "Returns the bringup report. Reports are generated in PDF and CSV formats.",
        "operationId" : "getBringupDetailReport",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/pdf", "text/csv" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SDDC ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "One among: PDF, CSV",
          "required" : false,
          "type" : "string",
          "default" : "PDF",
          "enum" : [ "PDF", "CSV" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          },
          "501" : {
            "description" : "Not Implemented"
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/v1/sddcs/{id}/sddc-manager" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Retrieve SDDC Manager VM details",
        "description" : "Retrieves the details of SDDC Manager VM",
        "operationId" : "getSddcManagerInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SDDC ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SddcManagerInfo"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          },
          "501" : {
            "description" : "Not Implemented"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v1/sso-domains" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get all SSO domains",
        "description" : "Get a list of all SSO domains",
        "operationId" : "getSSODomains",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfstring"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sso-domains/{sso-domain}/entities" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get all entities of SSO domain",
        "description" : "Get a list of all entities in the SSO domain",
        "operationId" : "getSSODomainEntities",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sso-domain",
          "in" : "path",
          "description" : "SSO Domain Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfSsoDomainEntity"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/system" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get the system",
        "description" : "Get the system",
        "operationId" : "getSystem",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/System"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "System" ],
        "summary" : "Update system level configuration",
        "description" : "Update system level configuration",
        "operationId" : "patchSystem",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "updateSpec",
          "description" : "updateSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SystemUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/system/backup-configuration" : {
      "get" : {
        "tags" : [ "BackupRestore" ],
        "summary" : "Get backup configuration used to backup NSX and SDDC manager",
        "operationId" : "getBackupSettings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/BackupConfiguration"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "BackupRestore" ],
        "summary" : "Configure backup settings to backup NSX and SDDC manager",
        "operationId" : "configureBackupSettings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "backupConfigurationSpec",
          "description" : "backupConfigurationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BackupConfigurationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "BackupRestore" ],
        "summary" : "Edit backup configuration to backup NSX and SDDC manager",
        "operationId" : "editBackupSettings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "backupConfigurationSpec",
          "description" : "backupConfigurationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BackupConfigurationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/ceip" : {
      "get" : {
        "tags" : [ "CEIP" ],
        "summary" : "Get CEIP status",
        "description" : "Get CEIP status and instance id",
        "operationId" : "getCeipStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Ceip"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "CEIP" ],
        "summary" : "Opt-in or Opt-out of CEIP",
        "description" : "Opt-in or Opt-out of CEIP",
        "operationId" : "updateCeipStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "ceipUpdateSpec",
          "description" : "Required action for CEIP.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CeipUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "The request could not be completed due to a conflict with the current state",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/dns-configuration" : {
      "get" : {
        "tags" : [ "system" ],
        "summary" : "Get the current DnsConfiguration",
        "operationId" : "getDnsConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DnsConfiguration"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "system" ],
        "summary" : "Configure the Dns Server",
        "operationId" : "configureDns",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "dnsConfiguration",
          "description" : "dnsConfiguration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DnsConfiguration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/dns-configuration/validations" : {
      "get" : {
        "tags" : [ "system" ],
        "summary" : "Get the validations of the input dnsServers to configure new DNS server",
        "operationId" : "getValidationsOfDNSConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "executionStatus",
          "in" : "query",
          "description" : "executionStatus",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "system" ],
        "summary" : "Validate DnsConfiguration input spec and system health before DNS configuration",
        "operationId" : "validateDnsConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "dnsConfiguration",
          "description" : "dnsConfiguration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DnsConfiguration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/v1/system/dns-configuration/validations/{id}" : {
      "get" : {
        "tags" : [ "system" ],
        "summary" : "Get the status of the validation of the input DnsConfiguration",
        "operationId" : "getValidationOfDnsConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/system/health-summary" : {
      "get" : {
        "tags" : [ "SOS" ],
        "summary" : "Fetch All Health Summary Tasks.",
        "operationId" : "gethealthsummarytasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfHealthSummary"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "SOS" ],
        "summary" : "Initiates Health Summary checks.",
        "operationId" : "health-summary",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "healthsummaryspec",
          "description" : "healthsummaryspec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HealthSummarySpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/HealthSummary"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/HealthSummary"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Operation is in progress for Id {id}. Wait for the operation to complete.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/health-summary/{id}" : {
      "get" : {
        "tags" : [ "SOS" ],
        "summary" : "Fetch the progress of a Health summary task.",
        "operationId" : "gethealthsummary",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Health Summary Id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HealthSummary"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/health-summary/{id}/data" : {
      "get" : {
        "tags" : [ "SOS" ],
        "summary" : "Download Health Summary Bundle.",
        "operationId" : "healthsummarydata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Health Summary Id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Bundle not found or not available for download. Id:{id}. ",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/ntp-configuration" : {
      "get" : {
        "tags" : [ "system" ],
        "summary" : "Get the current NtpConfiguration",
        "operationId" : "getNtpConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/NtpConfiguration"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "system" ],
        "summary" : "Configure the Ntp Server",
        "operationId" : "configureNtp",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "ntpConfiguration",
          "description" : "ntpConfiguration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NtpConfiguration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/ntp-configuration/validations" : {
      "get" : {
        "tags" : [ "system" ],
        "summary" : "Get the validations of the input ntpServers to configure new Ntp server",
        "operationId" : "getValidationsOfNtpConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "executionStatus",
          "in" : "query",
          "description" : "executionStatus",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "system" ],
        "summary" : "Validate NtpConfiguration input spec and system health before Ntp configuration",
        "operationId" : "validateNtpConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "ntpConfiguration",
          "description" : "ntpConfiguration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NtpConfiguration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/v1/system/ntp-configuration/validations/{id}" : {
      "get" : {
        "tags" : [ "system" ],
        "summary" : "Get the status of the validation of the input ntpServers to configure new Ntp server",
        "operationId" : "getValidationOfNtpConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/system/prechecks" : {
      "post" : {
        "tags" : [ "SystemPrechecks" ],
        "summary" : "Precheck System",
        "description" : "Perform precheck of resource(ex: Domain, Cluster). If only resource is specified, all resources/software components under it are included. If resource(Domain, Cluster etc) and specific resources/software components are provided, only those are included in precheck",
        "operationId" : "precheckSystem",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "precheckSpec",
          "description" : "Precheck System Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PrecheckSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/prechecks/tasks/{id}" : {
      "get" : {
        "tags" : [ "SystemPrechecks" ],
        "summary" : "Get Precheck Task by ID",
        "description" : "Monitor the progress of precheck task by the precheck task ID",
        "operationId" : "getPrecheckTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Precheck Task ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Precheck Task Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/proxy-configuration" : {
      "get" : {
        "tags" : [ "ProxyConfiguration" ],
        "summary" : "Get the current Proxy configuration",
        "description" : "Get the current Proxy configuration",
        "operationId" : "getProxyConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ProxyConfiguration"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "patch" : {
        "tags" : [ "ProxyConfiguration" ],
        "summary" : "Update Proxy configuration",
        "description" : "Update Proxy configuration",
        "operationId" : "updateProxyConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "proxyConfig",
          "description" : "proxyConfig",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProxyConfiguration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/system/sddc-spec-converter" : {
      "post" : {
        "tags" : [ "SDDC" ],
        "summary" : "Convert SDDC specification Json/Excel File",
        "description" : "SDDC specification incorporates all the client inputs regarding VMW component parameters constituting the SDDC: NTP, DNS spec, ESXi, VC, VSAN, NSX spec et al.",
        "operationId" : "convertToJsonSpec",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "specFile",
          "in" : "formData",
          "description" : "SDDC specification file which is either a JSON or xls file",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "design",
          "in" : "query",
          "description" : "Supported bringup designs - EMS, VXRAIL",
          "required" : false,
          "type" : "string",
          "default" : "EMS",
          "enum" : [ "EMS", "VXRAIL" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SddcSpec"
            }
          },
          "400" : {
            "description" : "Converting SDDC specification failed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "501" : {
            "description" : "Not Implemented",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/security/fips" : {
      "get" : {
        "tags" : [ "FIPS mode details" ],
        "summary" : "Get VCF security configuration",
        "description" : "Retrieve VCF security FIPS mode.",
        "operationId" : "getSecurityConfig",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Fips"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/system/settings/depot" : {
      "get" : {
        "tags" : [ "DepotSettings" ],
        "summary" : "Get Depot Settings",
        "description" : "Get the Depot Settings, In a fresh setup, this would be empty",
        "operationId" : "getDepotSettings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DepotSettings"
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "DepotSettings" ],
        "summary" : "Update Depot Settings",
        "description" : "Update Depot Settings. Depot Settings can be updated with VMware Depot Account",
        "operationId" : "updateDepotSettings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "depotSettings",
          "description" : "Depot Settings",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DepotSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DepotSettings"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DepotSettings"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/settings/version-aliases" : {
      "get" : {
        "tags" : [ "VersionAliasesForBundleComponentType" ],
        "summary" : "Get Version Alias Configuration",
        "description" : "Get the Version Alias Configuration.",
        "operationId" : "getVersionAliasConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfVersionAliasesForBundleComponentType"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "VersionAliasesForBundleComponentType" ],
        "summary" : "Update Version Alias Configurations",
        "description" : "Update Version Alias Configurations.",
        "operationId" : "updateVersionAliasConfigurations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "versionAliasesForBundleComponentTypeSpec",
          "description" : "Version Alias Configuration Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VersionAliasesForBundleComponentTypeSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfVersionAliasesForBundleComponentType"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/settings/version-aliases/{bundleComponentType}" : {
      "delete" : {
        "tags" : [ "VersionAliasesForBundleComponentType" ],
        "summary" : "Delete Version Alias for a bundle component type",
        "description" : "Delete Version Alias for a bundle component type.",
        "operationId" : "deleteVersionAliasBySoftwareType",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bundleComponentType",
          "in" : "path",
          "description" : "Bundle Component Type",
          "required" : true,
          "type" : "string",
          "enum" : [ "VCENTER", "PSC", "NSX_T_MANAGER", "NSX_MANAGER", "ESX_HOST", "VCF_VRA_UPGRADE", "VCF_VRLI_UPGRADE", "VCF_VROPS_UPGRADE", "VCF_VRSLCM_UPGRADE", "SDDC_MANAGER_VCF", "LCM", "SDDC_MANAGER", "SDDC_MANAGER_UI", "OPERATIONS_MANAGER", "COMMON_SERVICES", "SOLUTIONS_MANAGER", "MULTI_SITE_SERVICE" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/v1/system/settings/version-aliases/{bundleComponentType}/{version}" : {
      "put" : {
        "tags" : [ "VersionAliasesForBundleComponentType" ],
        "summary" : "Update Version Alias Configuration",
        "description" : "Update Version Alias Configuration.",
        "operationId" : "updateVersionAliasConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bundleComponentType",
          "in" : "path",
          "description" : "Bundle Component Type",
          "required" : true,
          "type" : "string",
          "enum" : [ "VCENTER", "PSC", "NSX_T_MANAGER", "NSX_MANAGER", "ESX_HOST", "VCF_VRA_UPGRADE", "VCF_VRLI_UPGRADE", "VCF_VROPS_UPGRADE", "VCF_VRSLCM_UPGRADE", "SDDC_MANAGER_VCF", "LCM", "SDDC_MANAGER", "SDDC_MANAGER_UI", "OPERATIONS_MANAGER", "COMMON_SERVICES", "SOLUTIONS_MANAGER", "MULTI_SITE_SERVICE" ]
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Version",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "aliasSpec",
          "description" : "Alias Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AliasSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfVersionAliasesForBundleComponentType"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "VersionAliasesForBundleComponentType" ],
        "summary" : "Delete Version Alias Configuration",
        "description" : "Delete Version Alias Configuration by bundle component type, version, and aliases.",
        "operationId" : "deleteAliasVersionsBySoftwareTypeAndBaseVersion",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "bundleComponentType",
          "in" : "path",
          "description" : "Bundle Component Type",
          "required" : true,
          "type" : "string",
          "enum" : [ "VCENTER", "PSC", "NSX_T_MANAGER", "NSX_MANAGER", "ESX_HOST", "VCF_VRA_UPGRADE", "VCF_VRLI_UPGRADE", "VCF_VROPS_UPGRADE", "VCF_VRSLCM_UPGRADE", "SDDC_MANAGER_VCF", "LCM", "SDDC_MANAGER", "SDDC_MANAGER_UI", "OPERATIONS_MANAGER", "COMMON_SERVICES", "SOLUTIONS_MANAGER", "MULTI_SITE_SERVICE" ]
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Version",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "aliasVersions",
          "description" : "List of alias versions",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/v1/system/support-bundles" : {
      "get" : {
        "tags" : [ "SOS" ],
        "summary" : "Fetch All Support bundle Tasks.",
        "operationId" : "getsupportBundleTasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfSupportBundle"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "SOS" ],
        "summary" : "Initiates Support bundle download",
        "operationId" : "supportbundles",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "supportbundlespec",
          "description" : "supportbundlespec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SupportBundleSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SupportBundle"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/SupportBundle"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Operation is in progress for Id {id}. Wait for the operation to complete.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/support-bundles/{id}" : {
      "get" : {
        "tags" : [ "SOS" ],
        "summary" : "Fetch the progress of support bundle task.",
        "operationId" : "getsupportBundle",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Support Bundle ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/SupportBundle"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/support-bundles/{id}/data" : {
      "get" : {
        "tags" : [ "SOS" ],
        "summary" : "Download Support bundles.",
        "operationId" : "supportBundledata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Support Bundle ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Bundle not found or not available for download. Id:{id}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/upgradables" : {
      "get" : {
        "tags" : [ "Upgradables" ],
        "summary" : "Get the Upgradables",
        "description" : "Fetches the list of Upgradables in the System. Only one Upgradable becomes AVAILABLE for Upgrade. The Upgradables provides information that can be use for Precheck API and also in the actual Upgrade API call.",
        "operationId" : "getUpgradables",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfUpgradable"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/tasks" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Get the Tasks",
        "description" : "Get the Tasks",
        "operationId" : "getTasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of elements to be returned in the result",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "taskStatus",
          "in" : "query",
          "description" : "taskStatus",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "taskType",
          "in" : "query",
          "description" : "taskType",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceId",
          "in" : "query",
          "description" : "resourceId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceType",
          "in" : "query",
          "description" : "resourceType",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "completedAfter",
          "in" : "query",
          "description" : "A time based filter to get tasks which are completed after the given timestamp. A task is completed if its status is 'Successsful' or 'Failed'. Time is in milliseconds.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the list of tasks.",
            "schema" : {
              "$ref" : "#/definitions/PageOfTask"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/tasks/{id}" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Get a Task",
        "description" : "Get a Task by ID, if it exists",
        "operationId" : "getTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Task id to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A task object.",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Task not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Tasks" ],
        "summary" : "Cancel a Task",
        "description" : "Cancel a Task by ID, if it exists",
        "operationId" : "cancelTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Task id for cancelling",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Task was cancelled successfully."
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Task not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Task can not be cancelled. Only a IN_PROGRESS task can be cancelled.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retry a Task",
        "description" : "Retry a failed Task by ID, if it exists",
        "operationId" : "retryTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Task id retry",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Task was retried successfully."
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Task not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Task can not be retried. Only a failed Task can be retried.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/tokens" : {
      "post" : {
        "tags" : [ "Tokens" ],
        "summary" : "Create Token Pair",
        "description" : "Creates access token and refresh token for user access",
        "operationId" : "createToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "tokenCreationSpec",
          "description" : "The spec used to sign the token",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TokenCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/TokenPair"
            }
          },
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/TokenPair"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/tokens/access-token/refresh" : {
      "patch" : {
        "tags" : [ "Tokens" ],
        "summary" : "Refresh Access Token",
        "description" : "Refresh the access token associated with the given refresh token",
        "operationId" : "refreshAccessToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "refreshToken",
          "description" : "ID of the refresh token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/tokens/refresh-token" : {
      "delete" : {
        "tags" : [ "Tokens" ],
        "summary" : "Invalidate Refresh Token",
        "description" : "Invalidate the provided refresh token",
        "operationId" : "invalidateRefreshToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "refreshToken",
          "description" : "ID of the refresh token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          }
        }
      }
    },
    "/v1/upgradables/domains/{domainId}" : {
      "get" : {
        "tags" : [ "Upgradables" ],
        "summary" : "Get the Upgradables",
        "description" : "Fetches the list of Upgradables for a given domain. If a target version is provided, Upgradables that are required for given target version become Available. The Upgradables providesinformation that can be use for Precheck API and also in the actual Upgrade API call.This API is used only for management domain, for all cases please use v1/system/upgradables.",
        "operationId" : "getUpgradablesByDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "targetVersion",
          "in" : "query",
          "description" : "Target Version to get Upgradables for a given Target Release",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfUpgradable"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Domain not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/upgradables/domains/{domainId}/clusters" : {
      "get" : {
        "tags" : [ "Upgradables" ],
        "summary" : "Get registered and available HSM details along with Software details",
        "description" : "Fetches the list of available hardware support managers and configured hardware support managers for the give resource along with the hardware support packages and Software details.",
        "operationId" : "getUpgradablesClusters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfUpgradablesClusterResource"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Domain Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/upgradables/domains/{domainId}/nsxt" : {
      "get" : {
        "tags" : [ "Upgradables" ],
        "summary" : "Get NSXT upgradable resources",
        "description" : "Get the list NSXT upgradable reosurce with resource metadata info",
        "operationId" : "getNsxtUpgradeResources",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "bundleId",
          "in" : "query",
          "description" : "bundle Id of the upgrade bundle applicable on the domain",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/NsxtResources"
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Bundle not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/upgrades" : {
      "get" : {
        "tags" : [ "Upgrades" ],
        "summary" : "Get Upgrades",
        "description" : "Get Upgrades",
        "operationId" : "getUpgrades",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status of the upgrades you want to retrieve",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bundleId",
          "in" : "query",
          "description" : "Bundle Id for the upgrade",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfUpgrade"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Upgrade not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Upgrades" ],
        "summary" : "Perform Upgrade",
        "description" : "Schedule/Trigger Upgrade of a Resource. Ex: Resource can be DOMAIN, CLUSTER, UNMANAGED_HOST etc. Performing upgrades are supported on VMware Cloud Foundation 3.5 BOM resources and above. ",
        "operationId" : "performUpgrade",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "upgradeSpec",
          "description" : "Upgrade Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpgradeSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "424" : {
            "description" : "Failed Dependency",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Operation not allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/upgrades/{upgradeId}" : {
      "get" : {
        "tags" : [ "Upgrades" ],
        "summary" : "Get Upgrade By Id",
        "description" : "Get Upgrade By Id",
        "operationId" : "getUpgradeById",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "upgradeId",
          "in" : "path",
          "description" : "upgradeId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Upgrade"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Upgrade not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Upgrades" ],
        "summary" : "Commit/Reschedule Upgrade",
        "description" : "Commit/Reschedule an existing upgrade. It moves the upgrade from DRAFT state to SCHEDULED state and/or changes the upgrade scheduled date/time.",
        "operationId" : "commitRescheduleUpgrade",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "upgradeId",
          "in" : "path",
          "description" : "upgradeId",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "upgradeCommitSpec",
          "description" : "Upgrade Commit/Reschedule Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpgradeCommitSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Upgrade not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/upgrades/{upgradeId}/prechecks" : {
      "post" : {
        "tags" : [ "Upgrades" ],
        "summary" : "performPrechecks",
        "operationId" : "performPrechecksUsingPOST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "upgradeId",
          "in" : "path",
          "description" : "upgradeId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Operation not allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/upgrades/{upgradeId}/prechecks/{precheckId}" : {
      "get" : {
        "tags" : [ "Upgrades" ],
        "summary" : "getPrecheck",
        "operationId" : "getPrecheckUsingGET",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "upgradeId",
          "in" : "path",
          "description" : "upgradeId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "precheckId",
          "in" : "path",
          "description" : "precheckId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Operation not allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/users" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get all Users",
        "description" : "Get a list of all users",
        "operationId" : "getUsers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfUser"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Add users",
        "description" : "Add list of users",
        "operationId" : "addUsers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "users",
          "description" : "User data collection",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/User"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfUser"
            }
          },
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/PageOfUser"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/users/local/admin" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get local account details",
        "description" : "Get information on the local account",
        "operationId" : "getLocalAccount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/LocalUser"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Users" ],
        "summary" : "Update password for local account",
        "description" : "Update the password for local account only if the old password is correct, or if user configures the local account for the first time",
        "operationId" : "updateLocalUserPassword",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "locaUserPassword",
          "description" : "Local user password details",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LocalAccountPasswordInfo"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "204" : {
            "description" : "No content"
          }
        }
      }
    },
    "/v1/users/ui" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "getAllUiUsers",
        "operationId" : "getAllUiUsersUsingGET",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfUser"
            }
          }
        }
      }
    },
    "/v1/users/{id}" : {
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Delete a user",
        "description" : "Delete the user by the ID, if it exists",
        "operationId" : "deleteUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the user",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content"
          },
          "404" : {
            "description" : "User not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vasa-providers" : {
      "get" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Get the VASA Providers",
        "operationId" : "getVasaProviders",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfVasaProvider"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Add a VASA Provider",
        "operationId" : "addVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "vasaProvider",
          "description" : "VASA Provider data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VasaProvider"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/VasaProvider"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vasa-providers/validations" : {
      "post" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Validate VasaProvider input specification",
        "operationId" : "validateVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "vasaProvider",
          "description" : "vasaProvider",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VasaProvider"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/v1/vasa-providers/validations/{id}" : {
      "get" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Get the status of the validation of the VASA Provider",
        "operationId" : "getValidationOfVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          },
          "404" : {
            "description" : "Validation ID not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vasa-providers/{id}" : {
      "get" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Get a VASA Provider",
        "operationId" : "getVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/VasaProvider"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "VASA Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Delete a VASA Provider",
        "operationId" : "deleteVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "VASA Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Update a VASA Provider",
        "operationId" : "updateVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "vasaProvider",
          "description" : "VASA Provider update data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VasaProviderUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/VasaProvider"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "VASA Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vasa-providers/{id}/storage-containers" : {
      "get" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Get the storage containers of a VASA Provider",
        "operationId" : "getStorageContainersOfVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "protocolType",
          "in" : "query",
          "description" : "Pass an optional Storage Protocol type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/StorageContainer"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "VASA Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Add the storage containers to a VASA Provider",
        "operationId" : "addStorageContainersToVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "storageContainers",
          "description" : "Storage containers data",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/StorageContainer"
            }
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/VasaProvider"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "VASA Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vasa-providers/{id}/storage-containers/{storageContainerId}" : {
      "delete" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Delete a storage container of a VASA Provider",
        "operationId" : "deleteStorageContainerOfVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "storageContainerId",
          "in" : "path",
          "description" : "Storage container ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Storage container not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Update the storage container of a VASA Provider",
        "operationId" : "updateStorageContainerOfVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "storageContainerId",
          "in" : "path",
          "description" : "Storage container ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "storageContainer",
          "description" : "Storage container update data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/StorageContainerUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/VasaProvider"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Storage container not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vasa-providers/{id}/users" : {
      "get" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Get the users of a VASA Provider",
        "operationId" : "getUsersOfVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/VasaUser"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "VASA Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Add the users to a VASA Provider",
        "operationId" : "addUsersToVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "vasaUsers",
          "description" : "VASA Users data",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/VasaUser"
            }
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/VasaProvider"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "VASA Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vasa-providers/{id}/users/{userId}" : {
      "patch" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Update the user of a VASA Provider",
        "operationId" : "updateUserOfVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "vasaUser",
          "description" : "User update data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VasaUserUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/VasaProvider"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "User not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vcenters" : {
      "get" : {
        "tags" : [ "vCenters" ],
        "summary" : "Get vCenters",
        "operationId" : "getVcenters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "query",
          "description" : "ID of the domain",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfVcenter"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vcenters/{id}" : {
      "get" : {
        "tags" : [ "vCenters" ],
        "summary" : "Get a vCenter",
        "operationId" : "getVcenter",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "vCenter ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Vcenter"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "vCenter not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vcf-services" : {
      "get" : {
        "tags" : [ "VcfServices" ],
        "summary" : "Get the VcfServices",
        "operationId" : "getVcfServices",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfVcfService"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vcf-services/{id}" : {
      "get" : {
        "tags" : [ "VcfServices" ],
        "summary" : "Get a VcfService",
        "operationId" : "getVcfService",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VcfService ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/VcfService"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "VcfService not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vras" : {
      "get" : {
        "tags" : [ "vRA" ],
        "summary" : "Get all existing vRealize Automation instances",
        "operationId" : "getVras",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfVra"
            }
          }
        }
      }
    },
    "/v1/vrli/domains" : {
      "get" : {
        "tags" : [ "vRLI" ],
        "summary" : "Gets vRealize Log Insight integration status for workload domains",
        "operationId" : "getIntegratedDomains_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfDomainIntegration"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "vRLI" ],
        "summary" : "Connects vRealize Log Insight with domain",
        "operationId" : "connectVrliWithDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "domainIntegration",
          "description" : "Domain Integration Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DomainIntegration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          }
        }
      }
    },
    "/v1/vrlis" : {
      "get" : {
        "tags" : [ "vRLI" ],
        "summary" : "Get all existing vRealize Log Insight instances",
        "operationId" : "getVrlis",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfVrli"
            }
          }
        }
      }
    },
    "/v1/vrops/domains" : {
      "get" : {
        "tags" : [ "vROPs" ],
        "summary" : "Gets vRealize Operations integration status for workload domains",
        "description" : "Retrieves the existing  domains and their connection status with vRealize Operations.",
        "operationId" : "getIntegratedDomainsVrops",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfDomainIntegration"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "vROPs" ],
        "summary" : "Connect/disconnect workload domains with vRealize Operations",
        "description" : "Connects/disconnects a workload domains with vRealize Operations",
        "operationId" : "connectVropsWithDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "domainIntegration",
          "description" : "Domain Integration Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DomainIntegration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vropses" : {
      "get" : {
        "tags" : [ "vROPs" ],
        "summary" : "Get all existing vRealize Operations instances",
        "operationId" : "getVropses",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfVrops"
            }
          }
        }
      }
    },
    "/v1/vrslcm" : {
      "get" : {
        "tags" : [ "vRSLCM" ],
        "summary" : "Get the existing vRealize Suite Lifecycle Manager",
        "description" : "Gets the complete information about the existing vRealize Suite Lifecycle Manager instance.",
        "operationId" : "getVrslcm",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Vrslcm"
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "vRSLCM" ],
        "summary" : "Updates the version of VRSLCM in SDDC Manager inventory",
        "description" : "Updates vRealize Suite Lifecycle Manager version in VCF inventory",
        "operationId" : "updateVrslcmVersionInInventory",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "vrslcmDto",
          "description" : "vrslcmDto",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Vrslcm"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string",
              "enum" : [ "100 CONTINUE", "101 SWITCHING_PROTOCOLS", "102 PROCESSING", "103 CHECKPOINT", "200 OK", "201 CREATED", "202 ACCEPTED", "203 NON_AUTHORITATIVE_INFORMATION", "204 NO_CONTENT", "205 RESET_CONTENT", "206 PARTIAL_CONTENT", "207 MULTI_STATUS", "208 ALREADY_REPORTED", "226 IM_USED", "300 MULTIPLE_CHOICES", "301 MOVED_PERMANENTLY", "302 FOUND", "302 MOVED_TEMPORARILY", "303 SEE_OTHER", "304 NOT_MODIFIED", "305 USE_PROXY", "307 TEMPORARY_REDIRECT", "308 PERMANENT_REDIRECT", "400 BAD_REQUEST", "401 UNAUTHORIZED", "402 PAYMENT_REQUIRED", "403 FORBIDDEN", "404 NOT_FOUND", "405 METHOD_NOT_ALLOWED", "406 NOT_ACCEPTABLE", "407 PROXY_AUTHENTICATION_REQUIRED", "408 REQUEST_TIMEOUT", "409 CONFLICT", "410 GONE", "411 LENGTH_REQUIRED", "412 PRECONDITION_FAILED", "413 PAYLOAD_TOO_LARGE", "413 REQUEST_ENTITY_TOO_LARGE", "414 URI_TOO_LONG", "414 REQUEST_URI_TOO_LONG", "415 UNSUPPORTED_MEDIA_TYPE", "416 REQUESTED_RANGE_NOT_SATISFIABLE", "417 EXPECTATION_FAILED", "418 I_AM_A_TEAPOT", "419 INSUFFICIENT_SPACE_ON_RESOURCE", "420 METHOD_FAILURE", "421 DESTINATION_LOCKED", "422 UNPROCESSABLE_ENTITY", "423 LOCKED", "424 FAILED_DEPENDENCY", "426 UPGRADE_REQUIRED", "428 PRECONDITION_REQUIRED", "429 TOO_MANY_REQUESTS", "431 REQUEST_HEADER_FIELDS_TOO_LARGE", "451 UNAVAILABLE_FOR_LEGAL_REASONS", "500 INTERNAL_SERVER_ERROR", "501 NOT_IMPLEMENTED", "502 BAD_GATEWAY", "503 SERVICE_UNAVAILABLE", "504 GATEWAY_TIMEOUT", "505 HTTP_VERSION_NOT_SUPPORTED", "506 VARIANT_ALSO_NEGOTIATES", "507 INSUFFICIENT_STORAGE", "508 LOOP_DETECTED", "509 BANDWIDTH_LIMIT_EXCEEDED", "510 NOT_EXTENDED", "511 NETWORK_AUTHENTICATION_REQUIRED" ]
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "405" : {
            "description" : "Method Not Allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "vRSLCM" ],
        "summary" : "Rollback vRealize Suite Lifecycle Manager after unsuccessful deployment",
        "description" : "Triggers the vRealize Suite Lifecycle Manager rollback operation and returns an URL in the headers to track the operation status.",
        "operationId" : "rollbackVrslcm",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "405" : {
            "description" : "Method Not Allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vrslcms" : {
      "get" : {
        "tags" : [ "vRSLCM" ],
        "summary" : "Get all existing vRealize Suite Lifecycle Manager instances",
        "operationId" : "getVrslcms",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfVrslcm"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "vRSLCM" ],
        "summary" : "Deploy vRealize Suite Lifecycle Manager",
        "description" : "Triggers the vRealize Suite Lifecycle Manager deployment operation and returns an URL in the headers to track the operation status.",
        "operationId" : "deployVrslcm",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "vrslcmPublicDeploymentSpec",
          "description" : "vRealize Suite Lifecycle Manager Deployment Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VrslcmDeploymentSpec"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "405" : {
            "description" : "Method Not Allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vrslcms/validations" : {
      "post" : {
        "tags" : [ "vRSLCM" ],
        "summary" : "Validate the input specification for vRealize Suite Lifecycle Manager deployment",
        "description" : "Triggers vRealize Suite Lifecycle Manager deployment specification validation workflow",
        "operationId" : "validateVrslcm",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "vrslcmPublicDeploymentSpec",
          "description" : "vRealize Suite Lifecycle Manager Deployment Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VrslcmDeploymentSpec"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          }
        }
      }
    },
    "/v1/vrslcms/validations/{id}" : {
      "get" : {
        "tags" : [ "vRSLCM" ],
        "summary" : "Get the status of the validations  for vRealize Lifecycle Manager deployment",
        "description" : "Gets the status of given vRealize Suite Lifecycle Manager validation workflow by given validation id",
        "operationId" : "getVrslcmValidation",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "vRealize validation id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vrslcms/{id}" : {
      "put" : {
        "tags" : [ "vRSLCM" ],
        "summary" : "Update vRSLCM version by ID in SDDC Manager inventory",
        "description" : "Updates Vrealize Suite Lifecycle Manager version",
        "operationId" : "updateVrslcmVersionByIdInInventory",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the ID of vRealize Suite Lifecycle Manager instance",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "vrslcmDto",
          "description" : "vrslcmDto",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Vrslcm"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string",
              "enum" : [ "100 CONTINUE", "101 SWITCHING_PROTOCOLS", "102 PROCESSING", "103 CHECKPOINT", "200 OK", "201 CREATED", "202 ACCEPTED", "203 NON_AUTHORITATIVE_INFORMATION", "204 NO_CONTENT", "205 RESET_CONTENT", "206 PARTIAL_CONTENT", "207 MULTI_STATUS", "208 ALREADY_REPORTED", "226 IM_USED", "300 MULTIPLE_CHOICES", "301 MOVED_PERMANENTLY", "302 FOUND", "302 MOVED_TEMPORARILY", "303 SEE_OTHER", "304 NOT_MODIFIED", "305 USE_PROXY", "307 TEMPORARY_REDIRECT", "308 PERMANENT_REDIRECT", "400 BAD_REQUEST", "401 UNAUTHORIZED", "402 PAYMENT_REQUIRED", "403 FORBIDDEN", "404 NOT_FOUND", "405 METHOD_NOT_ALLOWED", "406 NOT_ACCEPTABLE", "407 PROXY_AUTHENTICATION_REQUIRED", "408 REQUEST_TIMEOUT", "409 CONFLICT", "410 GONE", "411 LENGTH_REQUIRED", "412 PRECONDITION_FAILED", "413 PAYLOAD_TOO_LARGE", "413 REQUEST_ENTITY_TOO_LARGE", "414 URI_TOO_LONG", "414 REQUEST_URI_TOO_LONG", "415 UNSUPPORTED_MEDIA_TYPE", "416 REQUESTED_RANGE_NOT_SATISFIABLE", "417 EXPECTATION_FAILED", "418 I_AM_A_TEAPOT", "419 INSUFFICIENT_SPACE_ON_RESOURCE", "420 METHOD_FAILURE", "421 DESTINATION_LOCKED", "422 UNPROCESSABLE_ENTITY", "423 LOCKED", "424 FAILED_DEPENDENCY", "426 UPGRADE_REQUIRED", "428 PRECONDITION_REQUIRED", "429 TOO_MANY_REQUESTS", "431 REQUEST_HEADER_FIELDS_TOO_LARGE", "451 UNAVAILABLE_FOR_LEGAL_REASONS", "500 INTERNAL_SERVER_ERROR", "501 NOT_IMPLEMENTED", "502 BAD_GATEWAY", "503 SERVICE_UNAVAILABLE", "504 GATEWAY_TIMEOUT", "505 HTTP_VERSION_NOT_SUPPORTED", "506 VARIANT_ALSO_NEGOTIATES", "507 INSUFFICIENT_STORAGE", "508 LOOP_DETECTED", "509 BANDWIDTH_LIMIT_EXCEEDED", "510 NOT_EXTENDED", "511 NETWORK_AUTHENTICATION_REQUIRED" ]
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "405" : {
            "description" : "Method Not Allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/wsas" : {
      "get" : {
        "tags" : [ "WSA" ],
        "summary" : "Get all existing Workspace ONE Access instances",
        "operationId" : "getWsas",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfWsa"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "List": {
      "type": "array",
      "items": {
        "minItems": 1,
        "type": "object"
      }
    },
    "Map": {
      "type": "array",
      "items": {
        "minItems": 1,
        "type": "object"
      }
    },
    "VcenterReference" : {
      "required" : [ "id" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the vCenter"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the vCenter"
        }
      },
      "description" : "Represents a vCenter reference"
    },
    "PageOfCsr" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Csr"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "Memory" : {
      "properties" : {
        "totalCapacityMB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Total memory in MB"
        },
        "usedCapacityMB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Used memory in MB"
        }
      },
      "description" : "Represents information about memory on a host"
    },
    "OpenSSLCertificateAuthoritySpec" : {
      "required" : [ "commonName", "country", "locality", "organization", "organizationUnit", "state" ],
      "properties" : {
        "commonName" : {
          "type" : "string",
          "example" : "OpenSSL CA",
          "description" : "OpenSSL CA domain name"
        },
        "country" : {
          "type" : "string",
          "example" : "IN",
          "description" : "ISO 3166 country code where company is legally registered"
        },
        "locality" : {
          "type" : "string",
          "example" : "Bengaluru",
          "description" : "The city or locality where company is legally registered"
        },
        "organization" : {
          "type" : "string",
          "example" : "VMware Inc.",
          "description" : "The name under which company is legally registered"
        },
        "organizationUnit" : {
          "type" : "string",
          "example" : "VCF",
          "description" : "Organization with which the certificate is associated"
        },
        "state" : {
          "type" : "string",
          "example" : "Karnataka",
          "description" : "The full name of the state where company is legally registered"
        }
      },
      "description" : "This specification contains OpenSSL CA configuration details"
    },
    "AsyncPatch" : {
      "required" : [ "productVersion", "supportedSkuTypes" ],
      "properties" : {
        "inputSpecUrl" : {
          "type" : "string",
          "description" : "Input spec URL of the async patch bundle"
        },
        "productVersion" : {
          "type" : "string",
          "description" : "Product version of the async patch bundle"
        },
        "sddcHotPatchInfo" : {
          "type" : "object",
          "description" : "Sddc hot patch info for each sddc manager service (lcm, dm, om, commonsvc)",
          "additionalProperties" : {
            "$ref" : "#/definitions/List"
          }
        },
        "supportedSkuTypes" : {
          "type" : "array",
          "example" : "One among: VXRAIL, VSAN",
          "description" : "Supported SKU types of the async patch bundle",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Async patch bundle rest model that is located in the 2.0 manifest, these models are consumed by LCM's async patch workflows to determine if customer can download patch in list and apply."
    },
    "PageOfNsxtIpAddressPool" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/NsxtIpAddressPool"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "VsanRemoteDatastoreClusterSpec" : {
      "properties" : {
        "vsanRemoteDatastoreSpec" : {
          "type" : "array",
          "description" : "List of Remote vSAN datastore configuration for HCI Mesh compute client cluster",
          "items" : {
            "$ref" : "#/definitions/VsanRemoteDatastoreSpec"
          }
        }
      },
      "description" : "vSAN remote datastore configuration for the cluster"
    },
    "HostDecommissionSpec" : {
      "required" : [ "fqdn" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the host"
        }
      },
      "description" : "This specification contains host details required to decommission a host from VMware Cloud Foundation"
    },
    "AuthenticatedResource" : {
      "required" : [ "domainName", "resourceId", "resourceIp", "resourceName", "resourceType" ],
      "properties" : {
        "domainName" : {
          "type" : "string",
          "description" : "Domain name"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "Resource ID"
        },
        "resourceIp" : {
          "type" : "string",
          "description" : "Resource IP address"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Resource name"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, BACKUP",
          "description" : "Resource type"
        }
      },
      "description" : "Represents the credential resource in the system"
    },
    "EdgeClusterExpansionSpec" : {
      "required" : [ "edgeNodeAdminPassword", "edgeNodeAuditPassword", "edgeNodeRootPassword", "edgeNodeSpecs" ],
      "properties" : {
        "additionalTier1Names" : {
          "type" : "array",
          "description" : "List of names for the additional Tier-1(s) to be created during expansion",
          "items" : {
            "type" : "string"
          }
        },
        "edgeNodeAdminPassword" : {
          "type" : "string",
          "description" : "Edge Password for admin user"
        },
        "edgeNodeAuditPassword" : {
          "type" : "string",
          "description" : "Edge Password for audit user"
        },
        "edgeNodeRootPassword" : {
          "type" : "string",
          "description" : "Edge Password for root user."
        },
        "edgeNodeSpecs" : {
          "type" : "array",
          "description" : "Specifications for Edge Node",
          "items" : {
            "$ref" : "#/definitions/NsxTEdgeNodeSpec"
          }
        },
        "skipTepRoutabilityCheck" : {
          "type" : "boolean",
          "description" : "Set to true to bypass normal ICMP-based check of Edge TEP / host TEP routability (default is false, meaning do check)"
        },
        "tier1Unhosted" : {
          "type" : "boolean",
          "description" : "Select whether all Tier-1(s) being created per this spec are hosted on the Edge cluster or not (default is false, meaning hosted)"
        }
      },
      "description" : "This specification contains the parameters required to expand a NSX-T edge cluster."
    },
    "NsxTClusterSpec" : {
      "properties" : {
        "geneveVlanId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Vlan id of Geneve"
        },
        "ipAddressPoolSpec" : {
          "description" : "The IP address pool specification",
          "$ref" : "#/definitions/IpAddressPoolSpec"
        }
      },
      "description" : "This specification contains NSX-T configuration for a new cluster."
    },
    "SubTask" : {
      "properties" : {
        "completionTimestamp" : {
          "type" : "string",
          "description" : "Sub-task completion timestamp"
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "Sub-task creation timestamp"
        },
        "description" : {
          "type" : "string",
          "description" : "Sub-task description"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "Sub-task name"
        },
        "resources" : {
          "type" : "array",
          "description" : "List of resources associated with sub-task",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        },
        "stages" : {
          "type" : "array",
          "description" : "List of stages of the sub-task",
          "items" : {
            "$ref" : "#/definitions/Stage"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED, NOT_APPLICABLE",
          "description" : "Sub-task status"
        },
        "subTasks" : {
          "type" : "array",
          "description" : "List of child subtasks associated with this subtask",
          "items" : {
            "$ref" : "#/definitions/SubTask"
          }
        },
        "type" : {
          "type" : "string",
          "description" : "Sub-task type"
        }
      },
      "description" : "Represents a sub-task"
    },
    "Portgroup" : {
      "required" : [ "name", "transportType" ],
      "properties" : {
        "activeUplinks" : {
          "type" : "array",
          "description" : "List of active uplinks. This is only supported for VxRail.",
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "Port group name"
        },
        "portBindingType" : {
          "type" : "string",
          "example" : "One among: STATIC, DYNAMIC, EPHEMERAL",
          "description" : "Port binding type"
        },
        "standbyUplinks" : {
          "type" : "array",
          "description" : "List of standby uplinks. This is only supported for VxRail.",
          "items" : {
            "type" : "string"
          }
        },
        "transportType" : {
          "type" : "string",
          "example" : "One among: VSAN, VMOTION, MANAGEMENT, PUBLIC, NFS, VREALIZE, ISCSI, EDGE_INFRA_OVERLAY_UPLINK",
          "description" : "Port group transport type"
        },
        "vlanId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "VLAN ID"
        }
      },
      "description" : "Portgroup associated with the vSphere Distributed Switch"
    },
    "Vcenter" : {
      "properties" : {
        "domain" : {
          "description" : "Information about the domain this vCenter is part of",
          "$ref" : "#/definitions/DomainReference"
        },
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the vCenter"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the vCenter"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP address of the vCenter"
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the vCenter"
        }
      },
      "description" : "vCenter representation"
    },
    "PersonalitySpec" : {
      "required" : [ "personalityId" ],
      "properties" : {
        "hardwareSupportSpecs" : {
          "type" : "array",
          "description" : "Hardware Support Specifications for Firmware upgrade",
          "items" : {
            "$ref" : "#/definitions/HardwareSupportSpec"
          }
        },
        "personalityId" : {
          "type" : "string",
          "description" : "Personality ID for vLCM based Upgrade"
        }
      },
      "description" : "Personality Specification for vLCM based upgrade"
    },
    "NasVolumeSpec" : {
      "required" : [ "path", "readOnly", "serverName" ],
      "properties" : {
        "path" : {
          "type" : "string",
          "description" : "Shared directory path used for NFS based cluster creation"
        },
        "readOnly" : {
          "type" : "boolean",
          "description" : "Readonly is used to identify whether to mount the directory as readOnly or not"
        },
        "serverName" : {
          "type" : "array",
          "description" : "NFS Server name used for cluster creation",
          "items" : {
            "type" : "string"
          }
        },
        "userTag" : {
          "type" : "string",
          "description" : "User tag used to annotate NFS share"
        }
      },
      "description" : "NAS configuration for NFS based cluster"
    },
    "NtpServer" : {
      "required" : [ "ipAddress" ],
      "properties" : {
        "ipAddress" : {
          "type" : "string",
          "example" : "10.0.0.250",
          "description" : "IP address/FQDN of NTP server"
        }
      },
      "description" : "NTP server details"
    },
    "TimeZone" : {
      "properties" : {
        "displayName" : {
          "type" : "string"
        },
        "dstsavings" : {
          "type" : "integer",
          "format" : "int32"
        },
        "id" : {
          "type" : "string"
        },
        "rawOffset" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "CertificateAuthorityCreationSpec" : {
      "properties" : {
        "microsoftCertificateAuthoritySpec" : {
          "description" : "Microsoft Certificate Authority specification",
          "$ref" : "#/definitions/MicrosoftCertificateAuthoritySpec"
        },
        "openSSLCertificateAuthoritySpec" : {
          "description" : "OpenSSL Certificate Authority specification",
          "$ref" : "#/definitions/OpenSSLCertificateAuthoritySpec"
        }
      },
      "description" : "This specification contains Certificate Authority (CA) creation details. Either openSSLCertificateAuthoritySpec or microsoftCertificateAuthoritySpec should be specified."
    },
    "SsoDomainEntity" : {
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The ID of the SSO domain entity"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the SSO domain entity"
        },
        "type" : {
          "type" : "string",
          "example" : "One among: USER, GROUP",
          "description" : "The type of the SSO domain entity"
        }
      },
      "description" : "Represents SSO domain entity"
    },
    "SoftwareInfo" : {
      "required" : [ "baseImage" ],
      "properties" : {
        "addOn" : {
          "description" : "Personality addOn",
          "$ref" : "#/definitions/AddOnInfo"
        },
        "baseImage" : {
          "description" : "Personality base image",
          "$ref" : "#/definitions/BaseImageInfo"
        },
        "components" : {
          "type" : "object",
          "description" : "Personality components",
          "additionalProperties" : {
            "$ref" : "#/definitions/ComponentInfo"
          }
        },
        "hardwareSupport" : {
          "description" : "Personality hardware support",
          "$ref" : "#/definitions/HardwareSupportInfo"
        }
      },
      "description" : "SoftwareSpec contains base os, components, hardware support, addOn metadata to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "PageOfNetwork" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Network"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "NsxtTransportZone" : {
      "required" : [ "networkName", "zoneName" ],
      "properties" : {
        "networkName" : {
          "type" : "string",
          "description" : "Transport zone network name"
        },
        "zoneName" : {
          "type" : "string",
          "description" : "Transport zone name"
        }
      },
      "description" : "Spec contains required parameters for NSX-T Transport Zone"
    },
    "BundleRecall" : {
      "required" : [ "recalledBundleIds", "replacementBundleStatus" ],
      "properties" : {
        "recalledBundleIds" : {
          "type" : "array",
          "description" : "List of Bundle IDs that are recalled",
          "items" : {
            "type" : "string"
          }
        },
        "replacementBundleIds" : {
          "type" : "array",
          "description" : "List of Bundle IDs that act as replacement",
          "items" : {
            "type" : "string"
          }
        },
        "replacementBundleStatus" : {
          "type" : "string",
          "example" : "One among: NONE, PENDING, READY",
          "description" : "Status of bundle replacement."
        }
      },
      "description" : "Bundle Recall model for collection of bundles that are recalled with their replacements if applicable."
    },
    "ComputeSpec" : {
      "required" : [ "clusterSpecs" ],
      "properties" : {
        "clusterSpecs" : {
          "type" : "array",
          "description" : "List of clusters to be added to workload domain",
          "items" : {
            "$ref" : "#/definitions/ClusterSpec"
          }
        }
      },
      "description" : "This specification contains the parameters required to add each cluster to a workload domain"
    },
    "PageOfVasaProvider" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/VasaProvider"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ProductVersion" : {
      "required" : [ "name", "publicName", "version" ],
      "properties" : {
        "additionalMetadata" : {
          "type" : "string",
          "description" : "any additional metadata"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the product. e.g ESX"
        },
        "publicName" : {
          "type" : "string",
          "description" : "Public name of the product, e.g VMware ESXi"
        },
        "releaseURL" : {
          "description" : "URL for the release.",
          "$ref" : "#/definitions/URL"
        },
        "version" : {
          "type" : "string",
          "description" : "Version for the product, e.g 6.7.0-11675023"
        }
      },
      "description" : "Details of the product/component for the release."
    },
    "HostSpec" : {
      "required" : [ "id" ],
      "properties" : {
        "azName" : {
          "type" : "string",
          "description" : "Availability Zone Name \n(This is required while performing a stretched cluster expand operation)"
        },
        "hostName" : {
          "type" : "string",
          "description" : "Host name of the vSphere host"
        },
        "hostNetworkSpec" : {
          "description" : "Network Details of the vSphere host",
          "$ref" : "#/definitions/HostNetworkSpec"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of a vSphere host in the free pool"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP address of the vSphere host"
        },
        "licenseKey" : {
          "type" : "string",
          "description" : "License key of a vSphere host in the free pool \n(This is required except in cases where the ESXi host has already been licensed outside of the VMware Cloud Foundation system)"
        },
        "password" : {
          "type" : "string",
          "description" : "SSH password of the vSphere host "
        },
        "serialNumber" : {
          "type" : "string",
          "description" : "Serial Number of the vSphere host"
        },
        "sshThumbprint" : {
          "type" : "string",
          "description" : "SSH thumbprint(fingerprint) of the vSphere host \nNote:This field will be mandatory in future releases."
        },
        "username" : {
          "type" : "string",
          "description" : "Username of the vSphere host"
        }
      },
      "description" : "This specification contains information required to add vSphere host to a cluster"
    },
    "PageOfVcfService" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/VcfService"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "SupportBundleSpec" : {
      "properties" : {
        "logs" : {
          "description" : "Logs of different components.",
          "$ref" : "#/definitions/Logs"
        },
        "options" : {
          "description" : "Sos options for support bundle collection.",
          "$ref" : "#/definitions/SupportBundleOption"
        },
        "scope" : {
          "description" : "Domain and cluster under which logs should be collected.",
          "$ref" : "#/definitions/SupportBundleScope"
        }
      }
    },
    "PageOfobject" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "type" : "object"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "LicensingInfoSpec" : {
      "required" : [ "licensingMode" ],
      "properties" : {
        "licensingMode" : {
          "type" : "string",
          "example" : "One among: SUBSCRIPTION",
          "description" : "Licensing mode"
        }
      },
      "description" : "Represents the licensing info spec"
    },
    "NiocBandwidthAllocationSpec" : {
      "required" : [ "type" ],
      "properties" : {
        "niocTrafficResourceAllocation" : {
          "description" : "DvsHostInfrastructureTrafficResourceAllocation",
          "$ref" : "#/definitions/NiocTrafficResourceAllocation"
        },
        "type" : {
          "type" : "string",
          "description" : "DvsHostInfrastructureTrafficResource resource type"
        }
      },
      "description" : "This specification contains network traffic per resource type"
    },
    "RestoreSpec" : {
      "required" : [ "backupFile", "elements", "encryption" ],
      "properties" : {
        "backupFile" : {
          "type" : "string",
          "description" : "Backup file name"
        },
        "elements" : {
          "type" : "array",
          "description" : "List of elements to be restored",
          "items" : {
            "$ref" : "#/definitions/BackupResource"
          }
        },
        "encryption" : {
          "description" : "Encryption",
          "$ref" : "#/definitions/Encryption"
        }
      },
      "description" : "Restore Specification"
    },
    "VsanDatastoreSpec" : {
      "required" : [ "datastoreName", "failuresToTolerate" ],
      "properties" : {
        "datastoreName" : {
          "type" : "string",
          "description" : "Datastore name used for cluster creation"
        },
        "dedupAndCompressionEnabled" : {
          "type" : "boolean",
          "description" : "Enable vSAN deduplication and compression"
        },
        "failuresToTolerate" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of vSphere host failures to tolerate in the vSAN cluster"
        },
        "licenseKey" : {
          "type" : "string",
          "description" : "License key for the vSAN data store to be applied in vCenter"
        }
      },
      "description" : "This specification contains cluster storage configuration for vSAN"
    },
    "VxRailArrayAssociationContext" : {
      "properties" : {
        "arrayAttributeIdsKeyValue" : {
          "type" : "object",
          "description" : "Key, Value map that holds the simple attributes on the array item that are currently supported.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "parent" : {
          "description" : "Details that holds the association with the parent for nested objects",
          "$ref" : "#/definitions/VxRailArrayAssociationContext"
        }
      },
      "description" : "Contains the mapping between custom attributes and the supported attributes on the array item object."
    },
    "TrustedCertificate" : {
      "required" : [ "alias", "certificate" ],
      "properties" : {
        "alias" : {
          "type" : "string",
          "example" : "vcf_59:24:D5:18:04:A0:26:B0:A4:05:EA:82:60:95:82:A2:4B:F6:31:FB:81:93:01:F3:29:7D:34:9C:D3:05:39:90",
          "description" : "Certificate alias"
        },
        "certificate" : {
          "type" : "string",
          "example" : "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----",
          "description" : "Certificate in PEM format"
        }
      },
      "description" : "The Trusted Certificate details."
    },
    "BaseAlias" : {
      "required" : [ "aliases", "version" ],
      "properties" : {
        "aliases" : {
          "type" : "array",
          "description" : "List of Alias versions",
          "items" : {
            "type" : "string"
          }
        },
        "version" : {
          "type" : "string",
          "description" : "Base version"
        }
      },
      "description" : "Base Alias representation"
    },
    "MapOfstringAndListOfSddcHotPatchInfo" : {
      "type" : "object",
      "additionalProperties" : {
        "$ref" : "#/definitions/List"
      }
    },
    "PersonalityUploadSpecReferred" : {
      "required" : [ "clusterId", "vCenterId" ],
      "properties" : {
        "clusterId" : {
          "type" : "string",
          "description" : "Source cluster UUID from VCF inventory"
        },
        "vCenterId" : {
          "type" : "string"
        },
        "vcenterId" : {
          "type" : "string"
        }
      },
      "description" : "Personality upload specification for uploading the personality from a referred vCentercluster. This mode of uplaoding personality is useful when the source vCenter cluster isinternal to the target VCF deployment."
    },
    "TrustedCertificateSpec" : {
      "required" : [ "certificate", "certificateUsageType" ],
      "properties" : {
        "certificate" : {
          "type" : "string",
          "example" : "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----",
          "description" : "Certificate in PEM format"
        },
        "certificateUsageType" : {
          "type" : "string",
          "example" : "One among: TRUSTED_FOR_OUTBOUND, TRUSTED_FOR_INBOUND",
          "description" : "Certificate usage"
        }
      },
      "description" : "This specification contains certificate & certificate usage"
    },
    "Vrslcm" : {
      "required" : [ "fqdn", "id", "ipAddress", "status", "version" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "description" : "Fully Qualified Domain Name"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the vRealize Suite Lifecycle Manager instance"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP Address of vRealize Suite Lifecycle Manager appliance"
        },
        "status" : {
          "type" : "string",
          "description" : "The state of the current product instance"
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the product that is currently running on the environment"
        }
      },
      "description" : "This specification contains information related to the existing vRealize Suite Lifecycle Manager instance deployment"
    },
    "SddcTask" : {
      "properties" : {
        "creationTimestamp" : {
          "type" : "string",
          "description" : "SDDC Task creation timestamp"
        },
        "id" : {
          "type" : "string",
          "description" : "SDDC ID",
          "minLength" : 3,
          "maxLength" : 256
        },
        "localizableNamePack" : {
          "description" : "Localizable SDDC Task name",
          "$ref" : "#/definitions/MessagePack"
        },
        "name" : {
          "type" : "string",
          "description" : "Task name"
        },
        "sddcSubTasks" : {
          "type" : "array",
          "description" : "All SDDC Sub-Tasks",
          "items" : {
            "$ref" : "#/definitions/SddcSubTask"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "One among: IN_PROGRESS, COMPLETED_WITH_SUCCESS, ROLLBACK_SUCCESS, COMPLETED_WITH_FAILURE",
          "description" : "SDDC Task status"
        }
      },
      "description" : "Represents a SDDC task"
    },
    "BgpPeerSpec" : {
      "required" : [ "asn", "ip", "password" ],
      "properties" : {
        "asn" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "ASN of Peer"
        },
        "ip" : {
          "type" : "string",
          "description" : "BGP Peer IP"
        },
        "password" : {
          "type" : "string",
          "description" : "BGP Peer Password"
        }
      },
      "description" : "This specification contains configuration inputs required for BGP configuration for an uplink"
    },
    "SddcCredentials" : {
      "required" : [ "password", "username" ],
      "properties" : {
        "password" : {
          "type" : "string",
          "description" : "Password"
        },
        "username" : {
          "type" : "string",
          "example" : "root",
          "description" : "Username"
        }
      },
      "description" : "Credentials contains the username and password"
    },
    "NiocBandwidthAllocation" : {
      "properties" : {
        "niocTrafficResourceAllocation" : {
          "description" : "Specify network traffic allocation for a resource",
          "$ref" : "#/definitions/NiocTrafficResourceAllocation"
        },
        "type" : {
          "type" : "string",
          "example" : "Example: management, faultTolerance, vmotion, virtualMachine, iSCSI, nfs, hbr, vsan, vdp etc.",
          "description" : "Host infrastructure traffic type"
        }
      },
      "description" : "Network traffic per resource type"
    },
    "PageOfTask" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Task"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "Personality" : {
      "required" : [ "description", "displayName", "imageChecksum", "imageSize", "personalityId", "personalityName", "softwareInfo", "version", "vsphereExportedIsoPath", "vsphereExportedJsonPath", "vsphereExportedZipPath" ],
      "properties" : {
        "createdBy" : {
          "type" : "string",
          "description" : "Personality created by"
        },
        "description" : {
          "type" : "string",
          "example" : "ESXi 7.0 Dell Personality",
          "description" : "Personality description"
        },
        "displayName" : {
          "type" : "string",
          "example" : "ESXi 7.0 Dell Personality",
          "description" : "Personality displayName"
        },
        "imageChecksum" : {
          "type" : "string",
          "description" : "Personality image checksum"
        },
        "imageSize" : {
          "type" : "string",
          "description" : "Personality image size"
        },
        "kbArticles" : {
          "description" : "Personality kb articles",
          "$ref" : "#/definitions/URL"
        },
        "personalityId" : {
          "type" : "string",
          "description" : "Personality id"
        },
        "personalityName" : {
          "type" : "string",
          "description" : "Personality name"
        },
        "releaseDate" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Personality Release date"
        },
        "softwareInfo" : {
          "description" : "Personality software spec",
          "$ref" : "#/definitions/SoftwareInfo"
        },
        "tags" : {
          "type" : "array",
          "description" : "Personality tags",
          "items" : {
            "type" : "string"
          }
        },
        "version" : {
          "type" : "string",
          "description" : "Personality Version"
        },
        "vsphereExportedIsoPath" : {
          "type" : "string",
          "description" : "Personality depot path"
        },
        "vsphereExportedJsonPath" : {
          "type" : "string",
          "description" : "Personality depot path"
        },
        "vsphereExportedZipPath" : {
          "type" : "string",
          "description" : "Personality depot path"
        }
      },
      "description" : "Personality contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "ErrorResponse" : {
      "properties" : {
        "arguments" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "cause" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ErrorCause"
          }
        },
        "context" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "errorCode" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "nestedErrors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ErrorResponse"
          }
        },
        "referenceToken" : {
          "type" : "string"
        },
        "remediationMessage" : {
          "type" : "string"
        }
      }
    },
    "PageOfHost" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Host"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "MemoryInfo" : {
      "properties" : {
        "total" : {
          "description" : "Total value",
          "$ref" : "#/definitions/DataMetric"
        },
        "used" : {
          "description" : "Used value",
          "$ref" : "#/definitions/DataMetric"
        }
      },
      "description" : "Represents a memory metric with used and total for a resource"
    },
    "NtpConfiguration" : {
      "required" : [ "ntpServers" ],
      "properties" : {
        "ntpServers" : {
          "type" : "array",
          "description" : "List of NTP servers",
          "items" : {
            "$ref" : "#/definitions/NtpServer"
          }
        }
      },
      "description" : "NTP Configuration"
    },
    "IpAddress" : {
      "properties" : {
        "ipAddress" : {
          "type" : "string",
          "description" : "IP address"
        },
        "type" : {
          "type" : "string",
          "example" : "One among: MANAGEMENT, VSAN, VMOTION, NFS",
          "description" : "Type of IP addresss"
        }
      },
      "description" : "Represents IP address"
    },
    "SddcManager" : {
      "properties" : {
        "basicAuthDetails" : {
          "description" : "Basic auth details",
          "$ref" : "#/definitions/BasicAuthDetails"
        },
        "domain" : {
          "description" : "Information about the domain this SDDC Manager is part of",
          "$ref" : "#/definitions/DomainReference"
        },
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the SDDC Manager"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the SDDC Manager"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP Address of the SDDC Manager"
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the SDDC Manager"
        }
      },
      "description" : "SDDC Manager representation"
    },
    "VasaProviderSpec" : {
      "required" : [ "storageContainerId", "storageProtocolType", "userId", "vasaProviderId" ],
      "properties" : {
        "storageContainerId" : {
          "type" : "string",
          "description" : "UUID of the VASA storage container"
        },
        "storageProtocolType" : {
          "type" : "string",
          "example" : "One among: ISCSI, NFS, FC",
          "description" : "Type of the VASA storage protocol"
        },
        "userId" : {
          "type" : "string",
          "description" : "UUID of the VASA storage user"
        },
        "vasaProviderId" : {
          "type" : "string",
          "description" : "UUID of the VASA storage provider"
        }
      },
      "description" : "This specification contains cluster storage configuration for vVol"
    },
    "HostCriterion" : {
      "properties" : {
        "arguments" : {
          "type" : "object",
          "description" : "Arguments required for a particular criterion",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the criterion"
        },
        "name" : {
          "type" : "string",
          "example" : "One among: HOST_COMPATIBLE_WITH_CLUSTER_USING_PNICS, UNMANAGED_HOSTS_IN_VCENTER, UNMANAGED_HOSTS_IN_HCIMGR",
          "description" : "Name of the criterion"
        }
      },
      "description" : "Represents a criterion for querying the host"
    },
    "PageOfSsoDomainEntity" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/SsoDomainEntity"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "LdapSpec" : {
      "required" : [ "domainName", "password", "sourceDetails", "type", "username" ],
      "properties" : {
        "domainAlias" : {
          "type" : "string",
          "description" : "The optional alias to associate the domain name"
        },
        "domainName" : {
          "type" : "string",
          "description" : "The name to associate with the created domain"
        },
        "password" : {
          "type" : "string",
          "description" : "Password to connect to the ldap(s) server"
        },
        "sourceDetails" : {
          "description" : "Details of the Identity Source",
          "$ref" : "#/definitions/SourceDetails"
        },
        "type" : {
          "type" : "string",
          "example" : "One among: OpenLdap, ActiveDirectory",
          "description" : "The type of the LDAP Server"
        },
        "username" : {
          "type" : "string",
          "description" : "User name to connect to ldap(s) server"
        }
      },
      "description" : "The LDAP specification when the protocol is LDAP"
    },
    "NetworkPoolReference" : {
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the network pool"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the network pool"
        }
      },
      "description" : "Represents a network pool reference"
    },
    "PersonalityUploadSpec" : {
      "required" : [ "uploadMode" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Personality name"
        },
        "uploadMode" : {
          "type" : "string",
          "example" : "RAW, RAW_WITH_FILE_UPLOAD_ID, REFERRED",
          "description" : "Personality upload mode"
        },
        "uploadSpecRawMode" : {
          "description" : "Personality upload spec for upload from RAW files",
          "$ref" : "#/definitions/PersonalityUploadSpecRaw"
        },
        "uploadSpecRawWithFileUploadIdMode" : {
          "description" : "Personality upload spec for upload using file upload id",
          "$ref" : "#/definitions/PersonalityUploadSpecRawWithFileUploadId"
        },
        "uploadSpecReferredMode" : {
          "description" : "Personality upload spec for upload from REFERRED vcenter cluster",
          "$ref" : "#/definitions/PersonalityUploadSpecReferred"
        }
      },
      "description" : "Personality upload specification. This spec is used in personality upload API."
    },
    "BasicAuthDetails" : {
      "required" : [ "status" ],
      "properties" : {
        "status" : {
          "type" : "string",
          "example" : "One among: ENABLED, DISABLED",
          "description" : "Basic auth status"
        },
        "username" : {
          "type" : "string",
          "description" : "Basic auth username"
        }
      },
      "description" : "Basic auth details"
    },
    "Upgrade" : {
      "required" : [ "bundleId", "id", "resourceType", "resourceUpgradeSpecs", "status", "taskId" ],
      "properties" : {
        "bundleId" : {
          "type" : "string",
          "description" : "Bundle ID for Upgrade"
        },
        "id" : {
          "type" : "string",
          "description" : "ID for Upgrade"
        },
        "nsxtUpgradeUserInputSpec" : {
          "description" : "NSX-T upgrade specifications",
          "$ref" : "#/definitions/NsxtUpgradeUserInputSpec"
        },
        "parallelUpgrade" : {
          "type" : "boolean",
          "description" : "Boolean to represent components will be upgraded in parallel on not"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: DOMAIN, CLUSTER, UNASSIGNED_HOST",
          "description" : "Resource Type for Upgrade"
        },
        "resourceUpgradeSpecs" : {
          "type" : "array",
          "description" : "Resource Upgrade Specifications",
          "items" : {
            "$ref" : "#/definitions/ResourceUpgradeSpec"
          }
        },
        "status" : {
          "type" : "string",
          "description" : "Overall upgrade status"
        },
        "taskId" : {
          "type" : "string",
          "description" : "Task ID associated with upgrade"
        }
      },
      "description" : "Upgrade object which contain details regarding the upgrade"
    },
    "VcenterSpec" : {
      "required" : [ "datacenterName", "name", "networkDetailsSpec", "rootPassword" ],
      "properties" : {
        "datacenterName" : {
          "type" : "string",
          "description" : "vCenter datacenter name"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the vCenter virtual machine"
        },
        "networkDetailsSpec" : {
          "description" : "Network spec details of the vCenter virtual machine",
          "$ref" : "#/definitions/NetworkDetailsSpec"
        },
        "rootPassword" : {
          "type" : "string",
          "description" : "vCenter root shell password"
        },
        "storageSize" : {
          "type" : "string",
          "example" : "One among:lstorage, xlstorage",
          "description" : "VCenter storage size"
        },
        "vmSize" : {
          "type" : "string",
          "example" : "One among:xlarge, large, medium, small, tiny",
          "description" : "VCenter VM size"
        }
      },
      "description" : "This specification contains the installation and configuration of vCenter in a workload domain"
    },
    "SddcHotPatchInfo" : {
      "required" : [ "sddcHotPatchMinTargetVcfVersion", "version" ],
      "properties" : {
        "sddcHotPatchMinTargetVcfVersion" : {
          "type" : "string",
          "description" : "Sddc Hot patch min target version"
        },
        "version" : {
          "type" : "string",
          "description" : "Product version"
        }
      },
      "description" : "Sddc Hot patch info rest model that is located in the 2.0 manifest, as part of the async patch catalog."
    },
    "MicrosoftCertificateAuthoritySpec" : {
      "required" : [ "secret", "serverUrl", "templateName", "username" ],
      "properties" : {
        "secret" : {
          "type" : "string",
          "example" : "********",
          "description" : "CA server password"
        },
        "serverUrl" : {
          "type" : "string",
          "example" : "https://sfo-ad.rainpole.io/certsrv",
          "description" : "CA server url"
        },
        "templateName" : {
          "type" : "string",
          "example" : "WebServer",
          "description" : "CA server template name"
        },
        "username" : {
          "type" : "string",
          "example" : "Administrator",
          "description" : "CA server username"
        }
      },
      "description" : "This specification contains Microsoft CA configuration details"
    },
    "CredentialExpirationCheck" : {
      "properties" : {
        "completionTimestamp" : {
          "type" : "string",
          "description" : "Completion timestamp"
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "Creation timestamp"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "expiry" : {
          "description" : "Expiration details of credential",
          "$ref" : "#/definitions/ExpirationDetails"
        },
        "id" : {
          "type" : "string",
          "description" : "Credential ID"
        },
        "resource" : {
          "description" : "The resource which owns the credential",
          "$ref" : "#/definitions/AuthenticatedResource"
        },
        "username" : {
          "type" : "string",
          "description" : "Username"
        }
      },
      "description" : "Represents credential expiration check details"
    },
    "PackageSpec" : {
      "required" : [ "name", "version" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Package name"
        },
        "version" : {
          "type" : "string",
          "description" : "Package version"
        }
      },
      "description" : "Hardware Support Package Specification"
    },
    "ResourcePoolSpec" : {
      "required" : [ "memoryReservationExpandable", "name" ],
      "properties" : {
        "cpuLimit" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "CPU limit, default -1 (unlimited)"
        },
        "cpuReservationExpandable" : {
          "type" : "boolean",
          "description" : "Is CPU reservation expandable, default true"
        },
        "cpuReservationMhz" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "CPU reservation in Mhz"
        },
        "cpuReservationPercentage" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "CPU reservation percentage, from 0 to 100, default 0",
          "minimum" : 0.0,
          "maximum" : 100.0
        },
        "cpuSharesLevel" : {
          "type" : "string",
          "description" : "CPU shares level, default 'normal'",
          "enum" : [ "custom", "high", "low", "normal" ]
        },
        "cpuSharesValue" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "CPU shares value, only required when shares level is 'normal'"
        },
        "memoryLimit" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Memory limit, default -1 (unlimited)"
        },
        "memoryReservationExpandable" : {
          "type" : "boolean",
          "description" : "Is Memory reservation expandable, default true"
        },
        "memoryReservationMb" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Memory reservation in MB"
        },
        "memoryReservationPercentage" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Memory reservation percentage, from 0 to 100, default 0",
          "minimum" : 0.0,
          "maximum" : 100.0
        },
        "memorySharesLevel" : {
          "type" : "string",
          "description" : "Memory shares level. default 'normal'",
          "enum" : [ "custom", "high", "low", "normal" ]
        },
        "memorySharesValue" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Memory shares value, only required when shares level is '0'"
        },
        "name" : {
          "type" : "string",
          "description" : "Resource Pool name"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of resource pool",
          "enum" : [ "management", "compute", "network" ]
        }
      },
      "description" : "Spec contains parameters for Resource Pool"
    },
    "Validation" : {
      "properties" : {
        "additionalProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the validation"
        },
        "executionStatus" : {
          "type" : "string",
          "example" : "One among: IN_PROGRESS, FAILED, COMPLETED, SKIPPED, CANCELLED, CANCELLATION_IN_PROGRESS",
          "description" : "Execution status of the validation"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the validation"
        },
        "resultStatus" : {
          "type" : "string",
          "example" : "One among: SUCCEEDED, FAILED, FAILED_WITH_WARNINGS, CANCELLATION_IN_PROGRESS",
          "description" : "Result status of the validation after it has completed its execution"
        },
        "validationChecks" : {
          "type" : "array",
          "description" : "List of one or more validation checks that are performed as part of the validation",
          "items" : {
            "$ref" : "#/definitions/ValidationCheck"
          }
        }
      },
      "description" : "Represents a validation with a list of one or more validation checks that are performed as part of the validation"
    },
    "NsxManagerSpec" : {
      "required" : [ "name", "networkDetailsSpec" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the NSX Manager virtual machine"
        },
        "networkDetailsSpec" : {
          "description" : "Network speciication details of the NSX Manager virtual machine",
          "$ref" : "#/definitions/NetworkDetailsSpec"
        }
      },
      "description" : "This specification contains the parameters required to install and configure NSX Manager in a workload domain"
    },
    "PageOfDomainFutureRelease" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/DomainFutureRelease"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "VasaUserUpdateSpec" : {
      "properties" : {
        "password" : {
          "type" : "string",
          "description" : "Password"
        },
        "username" : {
          "type" : "string",
          "description" : "VASA User name"
        }
      },
      "description" : "Represents a VASA User update specification"
    },
    "Domains" : {
      "properties" : {
        "clusterNames" : {
          "type" : "array",
          "description" : "Clusters for the operation",
          "items" : {
            "type" : "string"
          }
        },
        "domainName" : {
          "type" : "string",
          "description" : "Domain name"
        }
      }
    },
    "Role" : {
      "required" : [ "description", "id", "name" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "The description of the role"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the role"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the role"
        }
      },
      "description" : "Represents role and its attributes"
    },
    "Storage" : {
      "properties" : {
        "disks" : {
          "type" : "array",
          "description" : "Information about disks",
          "items" : {
            "$ref" : "#/definitions/Disk"
          }
        },
        "totalCapacityMB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Total storage capacity in MB"
        },
        "usedCapacityMB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Used storage capacity in MB"
        }
      },
      "description" : "Represents information about storage on a host"
    },
    "StorageContainerUpdateSpec" : {
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the storage container"
        }
      },
      "description" : "Represents a storage container update specification"
    },
    "CpuCore" : {
      "properties" : {
        "frequencyMHz" : {
          "type" : "number",
          "format" : "double",
          "description" : "CPU frequency in MHz"
        },
        "manufacturer" : {
          "type" : "string",
          "description" : "Hardware manufacturer of the CPU"
        },
        "model" : {
          "type" : "string",
          "description" : "Hardware model of the CPU"
        }
      },
      "description" : "Represents a CPU core"
    },
    "PageOfDatastoreCriterion" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/DatastoreCriterion"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "NsxtIpAddressPoolValidationSpec" : {
      "required" : [ "ipAddressPoolSpec", "nsxtClusterId" ],
      "properties" : {
        "ipAddressPoolSpec" : {
          "$ref" : "#/definitions/IpAddressPoolSpec"
        },
        "nsxtClusterId" : {
          "type" : "string"
        }
      }
    },
    "HostCommissionSpec" : {
      "required" : [ "fqdn", "networkPoolId", "password", "storageType", "username" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the host"
        },
        "networkPoolId" : {
          "type" : "string",
          "description" : "ID of the network pool to associate the host with"
        },
        "networkPoolName" : {
          "type" : "string",
          "description" : "Name of the network pool to associate the host with"
        },
        "password" : {
          "type" : "string",
          "description" : "Password of the host"
        },
        "sshThumbprint" : {
          "type" : "string",
          "description" : "SSH thumbprint of the host"
        },
        "sslThumbprint" : {
          "type" : "string",
          "description" : "SSL thumbprint of the host"
        },
        "storageType" : {
          "type" : "string",
          "example" : "One among: VSAN, VSAN_REMOTE, NFS, VMFS_FC, VVOL",
          "description" : "Storage Type"
        },
        "username" : {
          "type" : "string",
          "description" : "Username of the host"
        },
        "vvolStorageProtocolType" : {
          "type" : "string",
          "example" : "One among: ISCSI, NFS, FC",
          "description" : "vVol Storage Protocol Type"
        }
      },
      "description" : " This specification contains the input to commission a host to VMware Cloud Foundation"
    },
    "VMNicInfo" : {
      "properties" : {
        "isActive" : {
          "type" : "boolean",
          "description" : "Status of VMNic if active or inactive"
        },
        "isAutoNegotiateSupported" : {
          "type" : "boolean",
          "description" : "Status of VMNic if auto negotiate is supported or not"
        },
        "isInUse" : {
          "type" : "boolean",
          "description" : "Status of VMNic if in use or available"
        },
        "linkSpeedMB" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "VMNic link speed in MB"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the VMNic"
        }
      },
      "description" : "VMNics attached to an ESXi host reference"
    },
    "HealthCheckSpec" : {
      "required" : [ "id", "name", "resourceType", "status" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Health Check id"
        },
        "name" : {
          "type" : "string",
          "description" : "Health Check name"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Name of the resource, if the ResourceType is CLUSTER, then the resourceName == ClusterName"
        },
        "resourceType" : {
          "type" : "string",
          "description" : "Resource Type"
        },
        "status" : {
          "type" : "string",
          "description" : "Health check status"
        }
      },
      "description" : "HealthCheck"
    },
    "DatastoreQueryResponse" : {
      "properties" : {
        "queryInfo" : {
          "description" : "Query info",
          "$ref" : "#/definitions/QueryInfo"
        },
        "result" : {
          "description" : "Query result",
          "$ref" : "#/definitions/PageOfDatastore"
        }
      },
      "description" : "Represents a datastore query response."
    },
    "PageOfPsc" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Psc"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "AliasSpec" : {
      "required" : [ "aliases" ],
      "properties" : {
        "aliases" : {
          "type" : "array",
          "description" : "Aliases for bundle component type and version.",
          "items" : {
            "type" : "string"
          }
        },
        "forceUpdate" : {
          "type" : "boolean",
          "description" : "Flag for force update version alias configuration."
        }
      },
      "description" : "Version Alias update Specification. This specification gets used in the Version Alias Update API."
    },
    "CredentialsUpdateSpec" : {
      "required" : [ "elements", "operationType" ],
      "properties" : {
        "autoRotatePolicy" : {
          "description" : "Auto Rotate policy for set of credentials",
          "$ref" : "#/definitions/AutoRotateCredentialPolicyInputSpec"
        },
        "elements" : {
          "type" : "array",
          "description" : "List of resource credentials to be changed",
          "items" : {
            "$ref" : "#/definitions/ResourceCredentials"
          }
        },
        "operationType" : {
          "type" : "string",
          "example" : "One among: UPDATE, ROTATE, REMEDIATE, UPDATE_AUTO_ROTATE_POLICY",
          "description" : "Operation type"
        }
      },
      "description" : "This specification contains password operation request details"
    },
    "TagsSpec" : {
      "required" : [ "tagIds" ],
      "properties" : {
        "tagIds" : {
          "type" : "array",
          "description" : "Tag IDs",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Represents tags spec"
    },
    "BackupConfigurationSpec" : {
      "properties" : {
        "backupLocations" : {
          "type" : "array",
          "description" : "List of backup locations",
          "items" : {
            "$ref" : "#/definitions/BackupLocation"
          }
        },
        "backupSchedules" : {
          "type" : "array",
          "description" : "List of backup schedules",
          "items" : {
            "$ref" : "#/definitions/BackupSchedule"
          }
        },
        "encryption" : {
          "description" : "Encryption passphrase to encrypt and decrypt backup file",
          "$ref" : "#/definitions/Encryption"
        }
      },
      "description" : "Backup configuration Specification"
    },
    "UpgradablesClusterResource" : {
      "required" : [ "resourceId", "resourceType" ],
      "properties" : {
        "availableHardwareSupportManagers" : {
          "type" : "array",
          "description" : "Available Hardware Support Managers for Firmware upgrade",
          "items" : {
            "$ref" : "#/definitions/HardwareSupportPackages"
          }
        },
        "configuredHardwareSupportManagers" : {
          "type" : "array",
          "description" : "Configured Hardware Support Managers for Firmware upgrade",
          "items" : {
            "$ref" : "#/definitions/HardwareSupportPackage"
          }
        },
        "primaryCluster" : {
          "type" : "boolean",
          "description" : "Flag for primary cluster"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "Resource Id"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "CLUSTER",
          "description" : "Resource Type"
        },
        "softwareInfo" : {
          "description" : "Software Spec contains base image, addOn, and components details",
          "$ref" : "#/definitions/SoftwareInfo"
        },
        "vlcmEnabled" : {
          "type" : "boolean",
          "description" : "Flag to determine if vLCM enabled on the cluster"
        }
      },
      "description" : "Upgradables clusters details with hardware support managers"
    },
    "PageOfUpgrade" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Upgrade"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "EdgeClusterCreationSpec" : {
      "required" : [ "edgeAdminPassword", "edgeAuditPassword", "edgeClusterName", "edgeClusterProfileSpec", "edgeClusterProfileType", "edgeClusterType", "edgeFormFactor", "edgeNodeSpecs", "edgeRootPassword", "mtu", "tier0Name", "tier0RoutingType", "tier0ServicesHighAvailability", "tier1Name" ],
      "properties" : {
        "asn" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "ASN to be used for the edge cluster"
        },
        "edgeAdminPassword" : {
          "type" : "string",
          "description" : "Edge Password for admin user"
        },
        "edgeAuditPassword" : {
          "type" : "string",
          "description" : "Edge Password for audit"
        },
        "edgeClusterName" : {
          "type" : "string",
          "description" : "Name for the edge cluster."
        },
        "edgeClusterProfileSpec" : {
          "description" : "Specifications for Edge Node",
          "$ref" : "#/definitions/NsxTEdgeClusterProfileSpec"
        },
        "edgeClusterProfileType" : {
          "type" : "string",
          "example" : "One among: DEFAULT, CUSTOM",
          "description" : "Type of edge cluster profile"
        },
        "edgeClusterType" : {
          "type" : "string",
          "example" : "One among: NSX-T",
          "description" : "Type of edge cluster"
        },
        "edgeFormFactor" : {
          "type" : "string",
          "example" : "One among: XLARGE, LARGE, MEDIUM, SMALL",
          "description" : "Edge Form Factor"
        },
        "edgeNodeSpecs" : {
          "type" : "array",
          "description" : "Specifications for Edge Node. Number of Edge Nodes cannot exceed 8 if HA mode is ACTIVE-ACTIVE and can not exceed 2 if HA mode is ACTIVE-STANDBY",
          "items" : {
            "$ref" : "#/definitions/NsxTEdgeNodeSpec"
          }
        },
        "edgeRootPassword" : {
          "type" : "string",
          "description" : "Edge Password for root user."
        },
        "internalTransitSubnets" : {
          "type" : "array",
          "description" : "Subnet addresses in CIDR notation that are used to assign addresses to logical links connecting service routers and distributed routers",
          "items" : {
            "type" : "string"
          }
        },
        "mtu" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Maximum transmission unit"
        },
        "skipTepRoutabilityCheck" : {
          "type" : "boolean",
          "description" : "Set to true to bypass normal ICMP-based check of Edge TEP / host TEP routability (default is false, meaning do check)"
        },
        "tier0Name" : {
          "type" : "string",
          "description" : "Name for the Tier-0"
        },
        "tier0RoutingType" : {
          "type" : "string",
          "example" : "One among: EBGP, STATIC",
          "description" : "Tier 0 Routing type -eg eBGP, Static"
        },
        "tier0ServicesHighAvailability" : {
          "type" : "string",
          "example" : "One among: ACTIVE_ACTIVE, ACTIVE_STANDBY",
          "description" : "High-availability Mode for Tier-0"
        },
        "tier1Name" : {
          "type" : "string",
          "description" : "Name for the Tier-1"
        },
        "tier1Unhosted" : {
          "type" : "boolean",
          "description" : "Select whether Tier-1 being created per this spec is hosted on the new Edge cluster or not (default value is false, meaning hosted)"
        },
        "transitSubnets" : {
          "type" : "array",
          "description" : "Transit subnet addresses in CIDR notation that are used to assign addresses to logical links connecting Tier-0 and Tier-1s",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "This specification contains the parameters required to add a NSX-T edge cluster spanning multiple VI clusters."
    },
    "PersonalityUploadSpecRawWithFileUploadId" : {
      "properties" : {
        "fileUploadId" : {
          "type" : "string",
          "description" : "Personality file upload id. This id is obtained by calling v1/personalities/files and uploading files into SDDC Manager"
        }
      },
      "description" : "Personality upload specification for uploading the personality from raw files exported from a vCenter cluster. This mode of uploading personality is useful when the source vCenter cluster is outside the target VCF deployment. User can upload files from a source location to SDDC Manager using v1/personalities/files API, which returns a file upload id. The id is then passed in this spec with Personality Upload Mode RAW_WITH_FILE_UPLOAD_ID."
    },
    "NsxtUpgradeUserInputSpec" : {
      "properties" : {
        "nsxtEdgeClusterUpgradeSpecs" : {
          "type" : "array",
          "description" : "List of edge clusters information if explicit selection is to be made",
          "items" : {
            "$ref" : "#/definitions/NsxtEdgeClusterUpgradeSpec"
          }
        },
        "nsxtHostClusterUpgradeSpecs" : {
          "type" : "array",
          "description" : "List of host clusters information if explicit selection is to be made",
          "items" : {
            "$ref" : "#/definitions/NsxtHostClusterUpgradeSpec"
          }
        },
        "nsxtId" : {
          "type" : "string",
          "description" : "Identifier of the NSXT instance"
        },
        "nsxtUpgradeOptions" : {
          "description" : "List of host clusters information if explicit selection is to be made",
          "$ref" : "#/definitions/NsxtUpgradeOptions"
        }
      },
      "description" : "Nsxt Upgrade User Input Specification"
    },
    "FrequencyMetric" : {
      "properties" : {
        "unit" : {
          "type" : "string",
          "description" : "Unit of the metric",
          "enum" : [ "Hz", "KHz", "MHz", "GHz", "THz" ]
        },
        "value" : {
          "type" : "number",
          "format" : "double",
          "description" : "Value of the metric"
        }
      },
      "description" : "Represents a single metric representing freequency"
    },
    "PageOfVrli" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Vrli"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "IpPool" : {
      "properties" : {
        "end" : {
          "type" : "string",
          "description" : "End IP address of the IP pool"
        },
        "start" : {
          "type" : "string",
          "description" : "Start IP address of the IP pool"
        }
      },
      "description" : "Represents an IP Pool of a network in a network pool"
    },
    "CertificateValidationTask" : {
      "required" : [ "completed", "validationId", "validations" ],
      "properties" : {
        "completed" : {
          "type" : "boolean",
          "example" : "One among: true, false",
          "description" : "Validation Task Completed"
        },
        "endTimestamp" : {
          "type" : "string",
          "example" : "2021-02-02T00:00:00.000Z",
          "description" : "Validation Task End Time"
        },
        "startTimestamp" : {
          "type" : "string",
          "example" : "2021-02-02T00:00:00.000Z",
          "description" : "Validation Task Start Time"
        },
        "validationId" : {
          "type" : "string",
          "example" : "B1930850-7D1A-4BAA-89D7-52FD5DAD196A",
          "description" : "Validation ID"
        },
        "validations" : {
          "type" : "array",
          "description" : "Resource Certificate Validations",
          "items" : {
            "$ref" : "#/definitions/CertificateValidation"
          }
        }
      },
      "description" : "The Certificate Validation Task."
    },
    "Wsa" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The ID of the Workspace ONE Access instance"
        },
        "loadBalancerFqdn" : {
          "type" : "string",
          "example" : "wsa-lb.vrack.vsphere.local",
          "description" : "The Fully Qualified Domain Name of the Workspace ONE Access load balancer"
        },
        "loadBalancerIpAddress" : {
          "type" : "string",
          "example" : "10.0.0.15",
          "description" : "The IP address of the Workspace ONE Access load balancer"
        },
        "nodes" : {
          "type" : "array",
          "description" : "The nodes of the Workspace ONE Access instance",
          "items" : {
            "$ref" : "#/definitions/VrealizeProductNode"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "ACTIVE, ERROR",
          "description" : "The status of the Workspace ONE Access instance"
        },
        "version" : {
          "type" : "string",
          "example" : "8.1.0-13036238",
          "description" : "The version of the Workspace ONE Access instance"
        }
      },
      "description" : "Spec contains parameters of a vRealize Automation instance"
    },
    "PasswordDetails" : {
      "properties" : {
        "expiryDataRetrievalStatus" : {
          "type" : "string",
          "example" : "One among: SUCCEEDED, NO_DATA_AVAILABLE",
          "description" : "Expiry data retrieval status"
        },
        "numberOfDaysToExpiry" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of days to expiry, if data is available"
        },
        "validityStatus" : {
          "type" : "string",
          "example" : "One among: VALID, INVALID",
          "description" : "Validity status"
        }
      },
      "description" : "Represents password expiry and validity details"
    },
    "PageOfCredentialsTask" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/CredentialsTask"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "UnmanagedResourceCredential" : {
      "required" : [ "credentialType", "username" ],
      "properties" : {
        "credentialType" : {
          "type" : "string",
          "example" : "One among: SSH",
          "description" : "Credential type"
        },
        "password" : {
          "type" : "string",
          "description" : "Password"
        },
        "username" : {
          "type" : "string",
          "description" : "Username"
        }
      },
      "description" : "Represents credentials of am unmanaged resource (i.e a resource that is not managed by VCF)"
    },
    "NsxTCluster" : {
      "properties" : {
        "domains" : {
          "type" : "array",
          "description" : "Information about the domains associated with the cluster",
          "items" : {
            "$ref" : "#/definitions/DomainReference"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the cluster"
        },
        "isShareable" : {
          "type" : "boolean",
          "description" : "Boolean to identify if the NSX-T cluster can be shared to create a new workload domain"
        },
        "isShared" : {
          "type" : "boolean",
          "description" : "Boolean to identify if the NSX-T cluster is shared among workload domains"
        },
        "isVlcmCompatible" : {
          "type" : "boolean",
          "description" : "Boolean to identify if the NSX-T cluster is compatible with Vlcm"
        },
        "nodes" : {
          "type" : "array",
          "description" : "Information about the NSX-T managers associated with the cluster",
          "items" : {
            "$ref" : "#/definitions/NsxTManager"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "One among: INITIALIZING, STABLE, DEGRADED, UNSTABLE, UNAVAILABLE, UNIDENTIFIED, UNDEFINED",
          "description" : "NSX-T cluster status. To get NSX-T cluster status invoke nsxt-clusters query API with criterion NSXT_CLUSTERS_WITH_STATUS"
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the NSX-T managers associated with the cluster"
        },
        "vip" : {
          "type" : "string",
          "description" : "VIP (Virtual IP Address) of the cluster"
        },
        "vipFqdn" : {
          "type" : "string",
          "description" : "FQDN for VIP of the cluster"
        }
      },
      "description" : "NSX-T Cluster representation"
    },
    "CredentialsTask" : {
      "properties" : {
        "creationTimestamp" : {
          "type" : "string",
          "description" : "Credential task creation timestamp"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "Credential task ID"
        },
        "isAutoRotate" : {
          "type" : "boolean",
          "description" : "Is Credential task an auto rotate task"
        },
        "name" : {
          "type" : "string",
          "description" : "Credential task name"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED, USER_CANCELLED, INCONSISTENT",
          "description" : "Credential task status"
        },
        "subTasks" : {
          "type" : "array",
          "description" : "List of credential sub-tasks of the credential task",
          "items" : {
            "$ref" : "#/definitions/CredentialsSubTask"
          }
        },
        "type" : {
          "type" : "string",
          "example" : "One among: UPDATE, ROTATE, REMEDIATE, UPDATE_AUTO_ROTATE_POLICY",
          "description" : "Credential task type"
        }
      },
      "description" : "Represents the credentials task in the system"
    },
    "ResourceCredentials" : {
      "required" : [ "credentials", "resourceType" ],
      "properties" : {
        "credentials" : {
          "type" : "array",
          "description" : "Credentials of the resource",
          "items" : {
            "$ref" : "#/definitions/BaseCredential"
          }
        },
        "resourceId" : {
          "type" : "string",
          "description" : "Resource ID"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Resource name"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, BACKUP",
          "description" : "Authenticated Resource Type"
        }
      },
      "description" : "Represents a resource along with its list of credentials to be changed."
    },
    "PageOfCertificate" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Certificate"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "NetworkPool" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The ID of the network pool"
        },
        "name" : {
          "type" : "string",
          "description" : "User specified name of the network pool"
        },
        "networks" : {
          "type" : "array",
          "description" : "Representing the networks associated with the network pool",
          "items" : {
            "$ref" : "#/definitions/Network"
          }
        }
      },
      "description" : "Represents a network pool in the system"
    },
    "HostVmknicSpec" : {
      "required" : [ "portgroup" ],
      "properties" : {
        "ipAddress" : {
          "type" : "string",
          "description" : "Vmknic IP address",
          "minLength" : 7,
          "maxLength" : 15
        },
        "macAddress" : {
          "type" : "string",
          "description" : "Vmknic mac address",
          "minLength" : 18,
          "maxLength" : 18
        },
        "portgroup" : {
          "type" : "string",
          "example" : "One among:VSAN, VMOTION, MANAGEMENT",
          "description" : "Portgroup"
        }
      },
      "description" : "Spec contains parameters for ESXi Host Vmknic"
    },
    "ErrorCode" : {
      "type" : "object",
      "properties" : {
        "bundleName" : {
          "type" : "string"
        },
        "code" : {
          "type" : "string"
        },
        "component" : {
          "type" : "string"
        }
      }
    },
    "ClusterUpdateSpec" : {
      "properties" : {
        "clusterCompactionSpec" : {
          "description" : "Parameters required to perform cluster compaction, optional otherwise",
          "$ref" : "#/definitions/ClusterCompactionSpec"
        },
        "clusterExpansionSpec" : {
          "description" : "Parameters required to perform cluster expansion, optional otherwise",
          "$ref" : "#/definitions/ClusterExpansionSpec"
        },
        "clusterStretchSpec" : {
          "description" : "Parameters required to perform Stretch operation on cluster, optional otherwise",
          "$ref" : "#/definitions/ClusterStretchSpec"
        },
        "clusterUnstretchSpec" : {
          "description" : "Parameters required to perform Unstretch operation on cluster, optional otherwise",
          "$ref" : "#/definitions/ClusterUnstretchSpec"
        },
        "markForDeletion" : {
          "type" : "boolean",
          "description" : "Prepare the cluster for deletion"
        },
        "name" : {
          "type" : "string",
          "description" : "Cluster Name"
        },
        "prepareForStretch" : {
          "type" : "boolean",
          "description" : "Prepare the cluster for stretch"
        }
      },
      "description" : "This specification contains the parameters required to perform update operation on cluster"
    },
    "VersionAliasesForBundleComponentType" : {
      "required" : [ "bundleComponentType", "versionAliases" ],
      "properties" : {
        "bundleComponentType" : {
          "type" : "string",
          "example" : "One among: VCENTER, PSC, NSX_T_MANAGER, NSX_MANAGER, ESX_HOST, VCF_VRA_UPGRADE, VCF_VRLI_UPGRADE, VCF_VROPS_UPGRADE, VCF_VRSLCM_UPGRADE, SDDC_MANAGER_VCF, LCM, SDDC_MANAGER, SDDC_MANAGER_UI, OPERATIONS_MANAGER, COMMON_SERVICES, SOLUTIONS_MANAGER, MULTI_SITE_SERVICE, ",
          "description" : "Bundle Component Type"
        },
        "versionAliases" : {
          "type" : "array",
          "description" : "Version Aliases",
          "items" : {
            "$ref" : "#/definitions/BaseAlias"
          }
        }
      },
      "description" : "Version Alias representation"
    },
    "PageOfEdgeClusterNsxtEntityCriterion" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/EdgeClusterNsxtEntityCriterion"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "SddcClusterSpec" : {
      "required" : [ "clusterName" ],
      "properties" : {
        "clusterEvcMode" : {
          "type" : "string",
          "description" : "vCenter cluster EVC mode"
        },
        "clusterName" : {
          "type" : "string",
          "description" : "vCenter Cluster Name"
        },
        "hostFailuresToTolerate" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Host failures to tolerate",
          "minimum" : 0.0,
          "maximum" : 3.0
        },
        "hostProfileComplianceCheckHour" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Hour at which the scheduled compliance check runs",
          "minimum" : 0.0,
          "maximum" : 23.0
        },
        "hostProfileComplianceCheckMinute" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minute at which the scheduled compliance check runs",
          "minimum" : 0.0,
          "maximum" : 59.0
        },
        "hosts" : {
          "type" : "array",
          "description" : "vCenter Cluster Host IDs",
          "items" : {
            "type" : "string"
          }
        },
        "personalityName" : {
          "type" : "string",
          "description" : "Cluster Personality Name"
        },
        "resourcePoolSpecs" : {
          "type" : "array",
          "description" : "Resource Pool Specs",
          "items" : {
            "$ref" : "#/definitions/ResourcePoolSpec"
          }
        },
        "vmFolders" : {
          "type" : "object",
          "example" : "One among:MANAGEMENT, NETWORKING",
          "description" : "Virtual Machine folders map",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Spec contains parameters for vCenter Cluster"
    },
    "Vra" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The ID of the vRealize Automation instance"
        },
        "loadBalancerFqdn" : {
          "type" : "string",
          "example" : "vra-lb.vrack.vsphere.local",
          "description" : "The Fully Qualified Domain Name of the vRealize Automation load balancer"
        },
        "loadBalancerIpAddress" : {
          "type" : "string",
          "example" : "10.0.0.15",
          "description" : "The IP address of the vRealize Automation load balancer"
        },
        "nodes" : {
          "type" : "array",
          "description" : "The nodes of the vRealize Automation instance",
          "items" : {
            "$ref" : "#/definitions/VrealizeProductNode"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "ACTIVE, ERROR",
          "description" : "The status of the vRealize Automation instance"
        },
        "version" : {
          "type" : "string",
          "example" : "8.1.0-13036238",
          "description" : "The version of the vRealize Automation instance"
        }
      },
      "description" : "Spec contains parameters of a vRealize Automation instance"
    },
    "PageOfWsa" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Wsa"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "PageOfSupportBundle" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/SupportBundle"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "PageOfRelease" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Release"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ProductNode" : {
      "required" : [ "fqdn", "password", "username" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "example" : "vrops.vrack.vsphere.local",
          "description" : "The Fully Qualified Domain Name for the vRealize node (virtual appliance)"
        },
        "password" : {
          "type" : "string",
          "description" : "The password for a root user of vRealize appliance"
        },
        "type" : {
          "type" : "string",
          "example" : "MASTER, REPLICA, DATA, REMOTECOLLECTOR, WORKER",
          "description" : "The type of the vRealize product node",
          "enum" : [ "Oneamong:MASTER", "REPLICA", "DATA", "REMOTECOLLECTOR", "WORKER", "PRIMARY", "SECONDARY" ]
        },
        "username" : {
          "type" : "string",
          "description" : "The username for a root user of vRealize appliance"
        }
      },
      "description" : "Spec contains information for a vRealize product node"
    },
    "IpAddressPoolSubnetSpec" : {
      "required" : [ "cidr", "gateway", "ipAddressPoolRanges" ],
      "properties" : {
        "cidr" : {
          "type" : "string",
          "description" : "The subnet representation, contains the network address and the prefix length"
        },
        "gateway" : {
          "type" : "string",
          "description" : "The default gateway address of the network"
        },
        "ipAddressPoolRanges" : {
          "type" : "array",
          "description" : "List of the IP allocation ranges. Atleast 1 IP address range has to be specified",
          "items" : {
            "$ref" : "#/definitions/IpAddressPoolRangeSpec"
          }
        }
      },
      "description" : "This specification contains the parameters required to create an IP address pool subnet"
    },
    "NsxTEdgeUplinkNetwork" : {
      "required" : [ "uplinkInterfaceIP", "uplinkVlan" ],
      "properties" : {
        "asnPeer" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "[Deprecated] ASN of Peer (please use bgpPeers instead)"
        },
        "bgpPeerPassword" : {
          "type" : "string",
          "description" : "[Deprecated] BGP Peer Password (please use bgpPeers instead)"
        },
        "bgpPeers" : {
          "type" : "array",
          "description" : "List of BGP Peer configuration",
          "items" : {
            "$ref" : "#/definitions/BgpPeerSpec"
          }
        },
        "peerIP" : {
          "type" : "string",
          "description" : "[Deprecated] BGP Peer IP (please use bgpPeers instead)"
        },
        "uplinkInterfaceIP" : {
          "type" : "string",
          "description" : "Uplink IP"
        },
        "uplinkVlan" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Uplink Vlan"
        }
      },
      "description" : "This specification contains input  parameters required to configure  uplink network for NSX-T  edge node VM"
    },
    "PageOfDatastore" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Datastore"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "TagsForResource" : {
      "properties" : {
        "resource" : {
          "description" : "the resource",
          "$ref" : "#/definitions/TaggedResource"
        },
        "tags" : {
          "type" : "array",
          "description" : "List of associated tags",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        }
      },
      "description" : "Represents a taggable resource with its associations"
    },
    "VcIdentitySources" : {
      "properties" : {
        "domainNames" : {
          "type" : "array",
          "description" : "The Domains of the Identity Source",
          "items" : {
            "type" : "string"
          }
        },
        "ldap" : {
          "description" : "LDAP configuration details of the Identity Source",
          "$ref" : "#/definitions/LdapInfo"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the Identity Source."
        },
        "type" : {
          "type" : "string",
          "description" : "Type of the Identity Source."
        }
      },
      "description" : "Represents embedded Identity Sources and its attributes."
    },
    "PageOfIdentityProvider" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/IdentityProvider"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "SupportBundleScope" : {
      "properties" : {
        "domains" : {
          "type" : "array",
          "description" : "Domains and Clusters for SOS operation.",
          "items" : {
            "$ref" : "#/definitions/Domains"
          }
        },
        "includeFreeHosts" : {
          "type" : "boolean",
          "description" : "Include free hosts."
        }
      }
    },
    "StorageContainer" : {
      "required" : [ "name", "protocolType" ],
      "properties" : {
        "clusterId" : {
          "type" : "string",
          "description" : "ID of the cluster which is using the storage container"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the storage container"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the storage container"
        },
        "protocolType" : {
          "type" : "string",
          "example" : "One among: ISCSI, FC, NFS",
          "description" : "Storage protocol type"
        }
      },
      "description" : "Storage container representation"
    },
    "NsxtIpAddressPoolBlockSubnet" : {
      "properties" : {
        "cidr" : {
          "type" : "string",
          "description" : "The CIDR of the IP address subnet"
        },
        "gatewayAssigned" : {
          "type" : "boolean",
          "description" : "The boolean representing the state of the gateway assignment"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The size of the IP address block"
        }
      },
      "description" : "NSX-T IP address pool block subnet representation"
    },
    "ErrorCodePack" : {
      "type" : "object",
      "properties" : {
        "arguments" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        },
        "bundleName" : {
          "type" : "string"
        },
        "classLoader" : {
          "$ref" : "#/definitions/ClassLoader"
        },
        "code" : {
          "type" : "string"
        },
        "component" : {
          "type" : "string"
        },
        "errorCode" : {
          "$ref" : "#/definitions/ErrorCode"
        },
        "stringArguments" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "PhysicalNic" : {
      "properties" : {
        "deviceName" : {
          "type" : "string",
          "description" : "Device name of the physical NIC"
        },
        "macAddress" : {
          "type" : "string",
          "description" : "Mac address of the physical NIC"
        },
        "speed" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Speed in bytes of the physical NIC"
        },
        "unit" : {
          "type" : "string",
          "description" : "Unit of physical NIC speed",
          "enum" : [ "KB", "MB", "GB", "TB", "PB" ]
        }
      },
      "description" : "Represents a physical NIC"
    },
    "PartnerExtensionSpec" : {
      "properties" : {
        "partnerBundleMetadataFilePath" : {
          "type" : "string",
          "description" : "Path to the bundle metadata file. The metadata file can have details of multiple bundles"
        },
        "partnerBundleVersion" : {
          "type" : "string",
          "description" : "Version of partner bundle to be uploaded. Should match one of the bundle versions available in the partner bundle metadata file"
        }
      },
      "description" : "Specification for partner extensions. This specification is used in the Bundle Upload API"
    },
    "Ceip" : {
      "required" : [ "status" ],
      "properties" : {
        "instanceId" : {
          "type" : "string",
          "example" : "3f39d4a1-78d2-11e8-af85-f1cf26258cdc",
          "description" : "Instance Id of VCF"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: ENABLED, DISABLED, ENABLING, DISABLING, ENABLING_FAILED, DISABLING_FAILED",
          "description" : "CEIP status"
        }
      },
      "description" : "Defines VCF CEIP status and instance id"
    },
    "PageOfSddcManager" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/SddcManager"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "CertificateAuthority" : {
      "required" : [ "id" ],
      "properties" : {
        "commonName" : {
          "type" : "string",
          "example" : "OpenSSL CA",
          "description" : "OpenSSL CA domain name"
        },
        "country" : {
          "type" : "string",
          "example" : "IN",
          "description" : "ISO 3166 country code where company is legally registered"
        },
        "id" : {
          "type" : "string",
          "example" : "One among: OpenSSL, Microsoft",
          "description" : "CA type. Only supports Microsoft and OpenSSL CAs"
        },
        "locality" : {
          "type" : "string",
          "example" : "Bengaluru",
          "description" : "The city or locality where company is legally registered"
        },
        "organization" : {
          "type" : "string",
          "example" : "VMware Inc.",
          "description" : "The name under which company is legally registered"
        },
        "organizationUnit" : {
          "type" : "string",
          "example" : "VCF",
          "description" : "Organization with which the certificate is associated"
        },
        "serverUrl" : {
          "type" : "string",
          "example" : "https://sfo-ad.rainpole.io/certsrv",
          "description" : "Microsoft CA server url"
        },
        "state" : {
          "type" : "string",
          "example" : "Karnataka",
          "description" : "The full name of the state where company is legally registered"
        },
        "templateName" : {
          "type" : "string",
          "example" : "WebServer",
          "description" : "Microsoft CA server template name"
        },
        "username" : {
          "type" : "string",
          "example" : "Administrator",
          "description" : "Microsoft CA server username"
        }
      },
      "description" : "The Certificate Authority (CA) details"
    },
    "ValidationCheck" : {
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Description of the validation check"
        },
        "errorResponse" : {
          "description" : "Error response associated with the validation check",
          "$ref" : "#/definitions/Error"
        },
        "nestedValidationChecks" : {
          "type" : "array",
          "description" : "List of one or more validation checks that are performed as part of the validation",
          "items" : {
            "$ref" : "#/definitions/ValidationCheck"
          }
        },
        "resultStatus" : {
          "type" : "string",
          "example" : "One among: IN_PROGRESS, SUCCEEDED, FAILED, SKIPPED, CANCELLED, CANCELLATION_IN_PROGRESS",
          "description" : "Result status of the validation check after it has completed its execution"
        },
        "severity" : {
          "type" : "string",
          "example" : "One among: WARNING, ERROR, INFO",
          "description" : "Severity of the validation check"
        }
      },
      "description" : "Represents a validation check"
    },
    "PageOfBundle" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Bundle"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "VSANNetworkSpec" : {
      "properties" : {
        "vsanCidr" : {
          "type" : "string",
          "description" : "vSAN subnet cidr of the ESXi host"
        },
        "vsanGatewayIP" : {
          "type" : "string",
          "description" : "vSAN Gateway IP of the ESXi host"
        }
      },
      "description" : "Contains the vSAN Network details"
    },
    "IpRange" : {
      "required" : [ "endIpAddress", "startIpAddress" ],
      "properties" : {
        "endIpAddress" : {
          "type" : "string",
          "example" : "192.168.0.128",
          "description" : "End IP Address",
          "minLength" : 7,
          "maxLength" : 15
        },
        "startIpAddress" : {
          "type" : "string",
          "example" : "192.168.0.123",
          "description" : "Start IP Address",
          "minLength" : 7,
          "maxLength" : 15
        }
      },
      "description" : "Spec contains parameters for range of IP addresses"
    },
    "BundleUploadSpec" : {
      "required" : [ "bundleFilePath", "manifestFilePath" ],
      "properties" : {
        "bundleFilePath" : {
          "type" : "string",
          "description" : "Bundle Upload File Path"
        },
        "compatibilitySetsFilePath" : {
          "type" : "string",
          "description" : "Path to the software compatibility sets file"
        },
        "manifestFilePath" : {
          "type" : "string",
          "description" : "Bundle Upload Manifest File Path"
        },
        "partnerExtensionSpec" : {
          "description" : "Partner extensions for bundle upload",
          "$ref" : "#/definitions/PartnerExtensionSpec"
        },
        "signatureFilePath" : {
          "type" : "string",
          "description" : "Bundle Upload Signature File Path"
        }
      },
      "description" : "Bundle Upload Specification. This specification is used in the Bundle Upload API"
    },
    "PscSsoSpec" : {
      "properties" : {
        "ssoDomain" : {
          "type" : "string",
          "description" : "PSC SSO Domain"
        }
      },
      "description" : "Spec contains parameters for Platform Services Controller SSO"
    },
    "PageMetadata" : {
      "properties" : {
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Returns the current page number"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Returns the number of elements in the current page"
        },
        "totalElements" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Returns the total number of elements"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Returns the total number of pages"
        }
      },
      "description" : "Represents pageable elements pagination metadata"
    },
    "PageOfResourceFunctionalities" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/ResourceFunctionalities"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ReleaseUpdate" : {
      "required" : [ "baseProductVersion", "description", "id", "productName", "releaseDate" ],
      "properties" : {
        "baseProductVersion" : {
          "type" : "string",
          "description" : "Base product version for the release"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the release update"
        },
        "id" : {
          "type" : "string",
          "description" : "Release version"
        },
        "productName" : {
          "type" : "string",
          "description" : "Product name for which the release update is provided"
        },
        "releaseDate" : {
          "type" : "string",
          "description" : "Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format"
        },
        "releaseUpdateURL" : {
          "description" : "URL to the release update",
          "$ref" : "#/definitions/URL"
        }
      },
      "description" : "Update to a given release"
    },
    "MapOfstringAndMapOfstringAndVvsVersionAliases" : {
      "type" : "object",
      "additionalProperties" : {
        "$ref" : "#/definitions/Map"
      }
    },
    "NiocSpec" : {
      "required" : [ "trafficType", "value" ],
      "properties" : {
        "trafficType" : {
          "type" : "string",
          "example" : "One among:VSAN, VMOTION, VIRTUALMACHINE, MANAGEMENT, NFS, VDP, HBR, FAULTTOLERANCE, ISCSI",
          "description" : "Traffic Type"
        },
        "value" : {
          "type" : "string",
          "description" : "NIOC Value"
        }
      },
      "description" : "Spec contains parameters for Network IO Control"
    },
    "NsxTSpec" : {
      "required" : [ "nsxManagerSpecs", "vip", "vipFqdn" ],
      "properties" : {
        "formFactor" : {
          "type" : "string",
          "description" : "NSX manager form factor"
        },
        "ipAddressPoolSpec" : {
          "description" : "The IP address pool specification",
          "$ref" : "#/definitions/IpAddressPoolSpec"
        },
        "licenseKey" : {
          "type" : "string",
          "description" : "NSX license value"
        },
        "nsxManagerAdminPassword" : {
          "type" : "string",
          "description" : "NSX manager admin password (basic auth and SSH)"
        },
        "nsxManagerAuditPassword" : {
          "type" : "string",
          "description" : "NSX manager Audit password"
        },
        "nsxManagerSpecs" : {
          "type" : "array",
          "description" : "Specification details of the NSX Manager virtual machine",
          "items" : {
            "$ref" : "#/definitions/NsxManagerSpec"
          }
        },
        "vip" : {
          "type" : "string",
          "description" : "Virtual IP address which would act as proxy/alias for NSX-T Managers"
        },
        "vipFqdn" : {
          "type" : "string",
          "description" : "FQDN for VIP so that common SSL certificates can be installed across all managers"
        }
      },
      "description" : "This specification contains the parameters required to install and configure NSX-T in a workload domain"
    },
    "NsxTManager" : {
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the manager"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the manager"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP address of the manager"
        },
        "name" : {
          "type" : "string",
          "description" : "NSX-T Manager VM name in vCenter"
        }
      },
      "description" : "NSX-T Manager representation"
    },
    "StackTraceElement" : {
      "properties" : {
        "className" : {
          "type" : "string"
        },
        "fileName" : {
          "type" : "string"
        },
        "lineNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "methodName" : {
          "type" : "string"
        },
        "nativeMethod" : {
          "type" : "boolean"
        }
      }
    },
    "URL" : {
      "properties" : {
        "authority" : {
          "type" : "string"
        },
        "content" : {
          "type" : "object"
        },
        "defaultPort" : {
          "type" : "integer",
          "format" : "int32"
        },
        "file" : {
          "type" : "string"
        },
        "host" : {
          "type" : "string"
        },
        "path" : {
          "type" : "string"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "protocol" : {
          "type" : "string"
        },
        "query" : {
          "type" : "string"
        },
        "ref" : {
          "type" : "string"
        },
        "userInfo" : {
          "type" : "string"
        }
      }
    },
    "NsxTQueryResponse" : {
      "properties" : {
        "queryInfo" : {
          "description" : "Query info",
          "$ref" : "#/definitions/QueryInfo"
        },
        "result" : {
          "description" : "Query result",
          "$ref" : "#/definitions/PageOfNsxTCluster"
        }
      },
      "description" : "Represents a NSX-T cluster query response."
    },
    "NsxtEdgeCluster" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Edge cluster id"
        },
        "name" : {
          "type" : "string",
          "description" : "Edge cluster name"
        },
        "resourceHealth" : {
          "type" : "string",
          "description" : "Current resource health status"
        },
        "upgradeStatus" : {
          "type" : "string",
          "description" : "Upgrade status with respect to the bundle"
        },
        "version" : {
          "type" : "string",
          "description" : "The current version of the edge cluster.If a partial upgrade is done, this will be the least version among the edges in the edge cluster"
        }
      },
      "description" : "Nsxt Edge Cluster Upgrade Resource"
    },
    "HostReference" : {
      "properties" : {
        "azName" : {
          "type" : "string",
          "description" : "Fault domain name of the host"
        },
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the host"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the host"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP address of the host"
        },
        "vmNics" : {
          "type" : "array",
          "description" : "VM NICs of the host",
          "items" : {
            "$ref" : "#/definitions/VMNicInfo"
          }
        }
      },
      "description" : "Represents an ESXi host reference"
    },
    "NetworkSpec" : {
      "required" : [ "nsxClusterSpec", "vdsSpecs" ],
      "properties" : {
        "nsxClusterSpec" : {
          "description" : "NSX configuration to add to the cluster",
          "$ref" : "#/definitions/NsxClusterSpec"
        },
        "vdsSpecs" : {
          "type" : "array",
          "description" : "Distributed switches to add to the cluster",
          "items" : {
            "$ref" : "#/definitions/VdsSpec"
          }
        }
      },
      "description" : "This specification contains cluster network configuration"
    },
    "SddcHostSpec" : {
      "required" : [ "association", "credentials", "hostname", "ipAddressPrivate", "vSwitch" ],
      "properties" : {
        "association" : {
          "type" : "string",
          "description" : "Host Association: Location/Datacenter"
        },
        "credentials" : {
          "description" : "Host Credentials",
          "$ref" : "#/definitions/SddcCredentials"
        },
        "hostname" : {
          "type" : "string",
          "example" : "esx-1",
          "description" : "Host Hostname",
          "minLength" : 3,
          "maxLength" : 63
        },
        "ipAddressPrivate" : {
          "description" : "Host Private Management IP",
          "$ref" : "#/definitions/IpAllocation"
        },
        "key" : {
          "type" : "string",
          "description" : "Host key"
        },
        "serverId" : {
          "type" : "string",
          "description" : "Host server ID"
        },
        "sshThumbprint" : {
          "type" : "string",
          "description" : "Host SSH thumbprint (RSA SHA256)"
        },
        "sslThumbprint" : {
          "type" : "string",
          "description" : "Host SSL thumbprint (SHA256)"
        },
        "vSwitch" : {
          "type" : "string"
        },
        "vmknicSpecs" : {
          "type" : "array",
          "description" : "List of Host Vmknic Spec",
          "items" : {
            "$ref" : "#/definitions/HostVmknicSpec"
          }
        },
        "vswitch" : {
          "type" : "string"
        }
      },
      "description" : "Spec contains parameters for Host"
    },
    "CsrGenerationSpec" : {
      "required" : [ "country", "keyAlgorithm", "keySize", "locality", "organization", "organizationUnit", "state" ],
      "properties" : {
        "country" : {
          "type" : "string",
          "example" : "IN",
          "description" : "ISO 3166 country code where company is legally registered"
        },
        "email" : {
          "type" : "string",
          "example" : "admin@vmware.com",
          "description" : "Contact email address"
        },
        "keyAlgorithm" : {
          "type" : "string",
          "example" : "One among: RSA",
          "description" : "The public key algorithm of the certificate"
        },
        "keySize" : {
          "type" : "string",
          "example" : "One among: 2048, 3072, 4096",
          "description" : "Certificate public key size"
        },
        "locality" : {
          "type" : "string",
          "example" : "Bengaluru",
          "description" : "The city or locality where company is legally registered"
        },
        "organization" : {
          "type" : "string",
          "example" : "VMware Inc.",
          "description" : "The name under which company is legally registered"
        },
        "organizationUnit" : {
          "type" : "string",
          "example" : "VCF",
          "description" : "Organization with which the certificate is associated"
        },
        "state" : {
          "type" : "string",
          "example" : "Karnataka",
          "description" : "The full name of the state where company is legally registered"
        }
      },
      "description" : "This specification contains Certificate Signing Request (CSR) details"
    },
    "NsxtHostCluster" : {
      "properties" : {
        "availableHardwareSupportManagers" : {
          "type" : "array",
          "description" : "Available Hardware Support Managers for Firmware upgrade",
          "items" : {
            "$ref" : "#/definitions/HardwareSupportPackages"
          }
        },
        "configuredHardwareSupportManagers" : {
          "type" : "array",
          "description" : "Configured Hardware Support Managers for Firmware upgrade",
          "items" : {
            "$ref" : "#/definitions/HardwareSupportPackage"
          }
        },
        "domainId" : {
          "type" : "string",
          "description" : "Id of the domain the Host cluster belongs to"
        },
        "id" : {
          "type" : "string",
          "description" : "Host cluster VCF cluster id"
        },
        "name" : {
          "type" : "string",
          "description" : "Cluster name"
        },
        "primaryCluster" : {
          "type" : "boolean",
          "description" : "Flag to determine if primary cluster for vLCM"
        },
        "resourceHealth" : {
          "type" : "string",
          "description" : "Current resource health status"
        },
        "totalUnits" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total number of hosts in the Host cluster"
        },
        "upgradeStatus" : {
          "type" : "string",
          "description" : "Upgrade status with respect to the bundle"
        },
        "upgradedUnits" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of hosts which are already upgraded"
        },
        "version" : {
          "type" : "string",
          "description" : "The current version of the host node cluster.If a partial upgrade is done, this will be the least version among the hosts"
        },
        "vlcmEnabled" : {
          "type" : "boolean"
        }
      },
      "description" : "Nsxt Host Cluster Upgrade Resource"
    },
    "NsxTEdgeNodeSpec" : {
      "required" : [ "clusterId", "edgeNodeName", "edgeTep1IP", "edgeTep2IP", "edgeTepGateway", "edgeTepVlan", "interRackCluster", "managementGateway", "managementIP" ],
      "properties" : {
        "clusterId" : {
          "type" : "string",
          "description" : "Cluster on which the edge needs to be deployed"
        },
        "edgeNodeName" : {
          "type" : "string",
          "description" : "Edge Node Name"
        },
        "edgeTep1IP" : {
          "type" : "string",
          "description" : "Edge TEP 1 IP"
        },
        "edgeTep2IP" : {
          "type" : "string",
          "description" : "Edge TEP 2 IP"
        },
        "edgeTepGateway" : {
          "type" : "string",
          "description" : "Edge TEP Gateway IP"
        },
        "edgeTepVlan" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Edge TEP VLAN"
        },
        "firstNsxVdsUplink" : {
          "type" : "string",
          "example" : "One among: uplink1, uplink2, uplink3, uplink4",
          "description" : "First NSX enabled VDS uplink for the Edge node"
        },
        "interRackCluster" : {
          "type" : "boolean",
          "description" : "Is inter-rack cluster(true for L2 non-uniform and L3 : At least one of management, uplink, Edge and host TEP networks is different for hosts of the cluster, false for L2 uniform :   All hosts in cluster have identical management, uplink, Edge and host TEP networks)"
        },
        "managementGateway" : {
          "type" : "string",
          "description" : "Management Gateway IP"
        },
        "managementIP" : {
          "type" : "string",
          "description" : "Management Interface IP"
        },
        "secondNsxVdsUplink" : {
          "type" : "string",
          "example" : "One among: uplink1, uplink2, uplink3, uplink4",
          "description" : "Second NSX enabled VDS uplink for the Edge node"
        },
        "uplinkNetwork" : {
          "type" : "array",
          "description" : "Specifications of Tier0 uplinks for the Edge Node",
          "items" : {
            "$ref" : "#/definitions/NsxTEdgeUplinkNetwork"
          }
        }
      },
      "description" : "This specification contains configuration inputs required to deploy and configure an edge node"
    },
    "OidcInfo" : {
      "properties" : {
        "authEndpoint" : {
          "type" : "string",
          "description" : "Authentication endpoint of the Identity Provider"
        },
        "authMethod" : {
          "type" : "string",
          "example" : "One among: CLIENT_SECRET_BASIC, CLIENT_SECRET_POST, CLIENT_SECRET_JWT, PRIVATE_KEY_JWT",
          "description" : "Authentication method used by the Identity Provider"
        },
        "clientId" : {
          "type" : "string",
          "description" : "Client identifier to connect to the Identity Provider"
        },
        "discoveryEndpoint" : {
          "type" : "string",
          "description" : "Endpoint to retrieve the Identity Provider metadata"
        },
        "issuer" : {
          "type" : "string",
          "description" : "The Identity Provider namespace. It is used to validate the issuer in the acquired OAuth2 token"
        },
        "logoutEndpoint" : {
          "type" : "string",
          "description" : "The endpoint to use for terminating the user's session at the Identity Provider"
        },
        "publicKeyUri" : {
          "type" : "string",
          "description" : "Endpoint to retrieve the Identity Provider public key for validation"
        },
        "tokenEndpoint" : {
          "type" : "string",
          "description" : "Token endpoint of the Identity Provider"
        }
      },
      "description" : "Represents Identity management configuration when the provider is based on OIDC"
    },
    "NsxtIpAddressPoolRange" : {
      "properties" : {
        "end" : {
          "type" : "string",
          "description" : "The end of the IP address range"
        },
        "start" : {
          "type" : "string",
          "description" : "The start of the IP address range"
        }
      },
      "description" : "NSX-T IP address pool range representation"
    },
    "NsxtManagerCluster" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Manager cluster id"
        },
        "name" : {
          "type" : "string",
          "description" : "Manager cluster name"
        },
        "resourceHealth" : {
          "type" : "string",
          "description" : "Current resource health status"
        },
        "upgradeStatus" : {
          "type" : "string",
          "description" : "Upgrade status with respect to the bundle"
        },
        "version" : {
          "type" : "string",
          "description" : "The current version of the manager cluster.If a partial upgrade is done, this will be the least version among the managers in the manager cluster"
        }
      },
      "description" : "Nsxt Manager Cluster Upgrade Resource"
    },
    "LocalAccountPasswordInfo" : {
      "required" : [ "newPassword" ],
      "properties" : {
        "newPassword" : {
          "type" : "string",
          "description" : "The new password of the local account"
        },
        "oldPassword" : {
          "type" : "string",
          "description" : "The old password of the local account"
        }
      },
      "description" : "Represents local account and its attributes"
    },
    "ClusterStretchSpec" : {
      "required" : [ "hostSpecs", "secondaryAzOverlayVlanId", "witnessSpec" ],
      "properties" : {
        "hostSpecs" : {
          "type" : "array",
          "description" : "List of vSphere host information from the free pool to consume in the workload domain",
          "items" : {
            "$ref" : "#/definitions/HostSpec"
          }
        },
        "isEdgeClusterConfiguredForMultiAZ" : {
          "type" : "boolean",
          "description" : "Edge cluster configured for multi AZ"
        },
        "secondaryAzOverlayVlanId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Secondary AZ Overlay Vlan Id"
        },
        "vsanNetworkSpecs" : {
          "type" : "array",
          "description" : "vSAN Network Pool Specs",
          "items" : {
            "$ref" : "#/definitions/VSANNetworkSpec"
          }
        },
        "witnessSpec" : {
          "description" : "Witness host information",
          "$ref" : "#/definitions/WitnessSpec"
        },
        "witnessTrafficSharedWithVsanTraffic" : {
          "type" : "boolean",
          "description" : "Witness traffic to be shared with vSAN traffic"
        }
      },
      "description" : "This spec contains the parameters required to convert a Standard vSAN cluster to a Stretched cluster"
    },
    "CertificateOperationSpec" : {
      "required" : [ "operationType" ],
      "properties" : {
        "operationType" : {
          "type" : "string",
          "example" : "One among: INSTALL",
          "description" : "The Certificates operation type"
        },
        "resources" : {
          "type" : "array",
          "description" : "Resource(s) in a domain",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        }
      },
      "description" : "This specification contains certificate operation request details"
    },
    "PageOfVra" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Vra"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "PageOfHealthSummary" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/HealthSummary"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "HealthCheckResult" : {
      "required" : [ "description", "id", "name" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Health check description"
        },
        "id" : {
          "type" : "string",
          "description" : "Health Check id"
        },
        "name" : {
          "type" : "string",
          "description" : "Health Check name"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "ID of the resource, if the ResourceType is CLUSTER, then the resourceId == ClusterId"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Name of  resource, if the ResourceType is CLUSTER, then the resourceName == ClusterName"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: CLUSTER",
          "description" : "Type of the health status."
        },
        "status" : {
          "type" : "string",
          "example" : "One among: ENABLED, DISABLED",
          "description" : "Type of the health status."
        },
        "type" : {
          "type" : "string",
          "example" : "One among: VSAN",
          "description" : "Type of the health check."
        }
      },
      "description" : "HealthCheckResult"
    },
    "VcfService" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the service"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the service"
        },
        "status" : {
          "type" : "string",
          "description" : "Status of the service"
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the service"
        }
      },
      "description" : "VCF service representation"
    },
    "PageOfCredential" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Credential"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "Vrli" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The ID of the vRealize Log Insight instance"
        },
        "loadBalancerFqdn" : {
          "type" : "string",
          "example" : "load-balancer.vrack.vsphere.local",
          "description" : "The Fully Qualified Domain Name of the vRealize Log Insight load balancer"
        },
        "loadBalancerIpAddress" : {
          "type" : "string",
          "example" : "10.0.0.15",
          "description" : "The IP address of the vRealize Log Insight load balancer"
        },
        "nodes" : {
          "type" : "array",
          "description" : "The nodes of the vRealize Log Insight instance",
          "items" : {
            "$ref" : "#/definitions/VrealizeProductNode"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "ACTIVE, ERROR",
          "description" : "The status of the vRealize Log Insight instance"
        },
        "version" : {
          "type" : "string",
          "example" : "4.8.0-13036238",
          "description" : "The version of the vRealize Log Insight instance"
        }
      },
      "description" : "Spec contains parameters of a vRealize Log Insight instance"
    },
    "HardwareSupportPackage" : {
      "required" : [ "name", "pkg" ],
      "properties" : {
        "displayName" : {
          "type" : "string",
          "description" : "Hardware Support Manager display name"
        },
        "name" : {
          "type" : "string",
          "description" : "Hardware Support Manager Name"
        },
        "pkg" : {
          "description" : "Hardware Support Package",
          "$ref" : "#/definitions/PackageSpec"
        }
      },
      "description" : "Configured Hardware Support Manager details"
    },
    "ExpirationDetails" : {
      "properties" : {
        "connectivityStatus" : {
          "type" : "string",
          "example" : "One among: ACTIVE, ERROR, UNKNOWN",
          "description" : "Connectivity status"
        },
        "expiryDate" : {
          "type" : "string",
          "description" : "Expiration date"
        },
        "lastCheckedDate" : {
          "type" : "string",
          "description" : "Last checked date"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: ACTIVE, EXPIRING, EXPIRED, UNKNOWN",
          "description" : "Expiration status"
        }
      },
      "description" : "Represents expiration details of the credential"
    },
    "SupportBundle" : {
      "properties" : {
        "bundleAvailable" : {
          "type" : "string",
          "description" : "Indicate if bundle is available in file system."
        },
        "bundleName" : {
          "type" : "string",
          "description" : "Name of the Support Bundle."
        },
        "completionTimestamp" : {
          "type" : "string",
          "description" : "CompletionTimestamp."
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "CreationTimestamp."
        },
        "description" : {
          "type" : "string",
          "description" : "Name of the Operation."
        },
        "id" : {
          "type" : "string",
          "description" : "Id of the Support Bundle task."
        },
        "status" : {
          "type" : "string",
          "example" : "One among: IN_PROGRESS, PENDING, COMPLETED_WITH_SUCCESS, COMPLETED_WITH_FAILURE",
          "description" : "Support Bundle Status."
        }
      }
    },
    "VvolDatastoreSpec" : {
      "required" : [ "name", "vasaProviderSpec" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the datastore"
        },
        "vasaProviderSpec" : {
          "description" : "Vasa Provider spec",
          "$ref" : "#/definitions/VasaProviderSpec"
        }
      },
      "description" : "This specification contains cluster storage configuration for vVol"
    },
    "LicenseKeyValidity" : {
      "properties" : {
        "expiryDate" : {
          "type" : "string",
          "description" : "The license key expiry date"
        },
        "licenseKeyStatus" : {
          "type" : "string",
          "example" : "One among: EXPIRED, ACTIVE, NEVER_EXPIRES",
          "description" : "The validity status of the license key"
        }
      },
      "description" : "Defines license key validity details"
    },
    "LicenseKey" : {
      "required" : [ "description", "key", "productType" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Description of the license key"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the license key"
        },
        "isUnlimited" : {
          "type" : "boolean",
          "description" : "Indicates if the license key has unlimited usage"
        },
        "key" : {
          "type" : "string",
          "example" : "XX0XX-XX0XX-XX0XX-XX0XX-XX0XX ",
          "description" : "The 29 alpha numeric character license key with hyphens"
        },
        "licenseKeyUsage" : {
          "description" : "License key usage details",
          "$ref" : "#/definitions/LicenseKeyUsage"
        },
        "licenseKeyValidity" : {
          "description" : "License key validity details",
          "$ref" : "#/definitions/LicenseKeyValidity"
        },
        "productType" : {
          "type" : "string",
          "example" : "One among: VCENTER, VSAN, ESXI, NSXT, NSXIO, WCP, HORIZON_VIEW",
          "description" : "The type of the product to which the license key is applicable"
        }
      },
      "description" : "Defines a license key and its attributes"
    },
    "NsxtManagerSpec" : {
      "properties" : {
        "hostname" : {
          "type" : "string",
          "description" : "NSX-T Manager hostname"
        },
        "ip" : {
          "type" : "string",
          "description" : "NSX-T Manager IP Address"
        }
      },
      "description" : "Spec contains parameters for NSX-T manager"
    },
    "Task" : {
      "properties" : {
        "completionTimestamp" : {
          "type" : "string",
          "description" : "Task completion timestamp"
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "Task creation timestamp"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "Task ID"
        },
        "isCancellable" : {
          "type" : "boolean",
          "description" : "Represents task can be cancellable or not."
        },
        "localizableDescriptionPack" : {
          "description" : "Localizable Task description",
          "$ref" : "#/definitions/MessagePack"
        },
        "name" : {
          "type" : "string",
          "description" : "Task name"
        },
        "resolutionStatus" : {
          "type" : "string",
          "example" : "Can have only one of the two values: RESOLVED or UNRESOLVED",
          "description" : "Resolution state"
        },
        "resources" : {
          "type" : "array",
          "description" : "List of resources associated with task",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED, CANCELLED",
          "description" : "Task status"
        },
        "subTasks" : {
          "type" : "array",
          "description" : "List of sub-tasks of the task",
          "items" : {
            "$ref" : "#/definitions/SubTask"
          }
        },
        "type" : {
          "type" : "string",
          "example" : "Sample values: HOST_COMMISSION, HOST_DECOMMISSION",
          "description" : "Operation that is represented by the Task in machine readable format.  The value is controlled by the owners/producers of the Task. The convention is <resource>_<operation>"
        }
      },
      "description" : "Represents a task"
    },
    "PageOfVrops" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Vrops"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "Cpu" : {
      "properties" : {
        "cores" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of CPU cores"
        },
        "cpuCores" : {
          "type" : "array",
          "description" : "Information about each of the CPU cores",
          "items" : {
            "$ref" : "#/definitions/CpuCore"
          }
        },
        "frequencyMHz" : {
          "type" : "number",
          "format" : "double",
          "description" : "Total CPU frequency in MHz"
        },
        "usedFrequencyMHz" : {
          "type" : "number",
          "format" : "double",
          "description" : "Used CPU frequency in MHz"
        }
      },
      "description" : "Represents information about CPUs on a host"
    },
    "VxRailDetails" : {
      "properties" : {
        "adminCredentials" : {
          "description" : "VxRail Manager admin credentials",
          "$ref" : "#/definitions/UnmanagedResourceCredential"
        },
        "arrayContextWithKeyValuePair" : {
          "type" : "object",
          "description" : "Map of Context class with list of key and value pairs for array objects",
          "additionalProperties" : {
            "$ref" : "#/definitions/List"
          }
        },
        "contextWithKeyValuePair" : {
          "type" : "object",
          "description" : "Map of Context class with list of key and value pairs",
          "additionalProperties" : {
            "$ref" : "#/definitions/List"
          }
        },
        "dnsName" : {
          "type" : "string",
          "description" : "DNS Name/Hostname of the VxRail Manager"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP Address of the VxRail Manager"
        },
        "networks" : {
          "type" : "array",
          "description" : "Network details of the VxRail Manager",
          "items" : {
            "$ref" : "#/definitions/Network"
          }
        },
        "nicProfile" : {
          "type" : "string",
          "description" : "Nic Profile Type"
        },
        "rootCredentials" : {
          "description" : "VxRail Manager root credentials",
          "$ref" : "#/definitions/UnmanagedResourceCredential"
        },
        "sshThumbprint" : {
          "type" : "string",
          "description" : "SSH thumbprint of the VxRail Manager"
        },
        "sslThumbprint" : {
          "type" : "string",
          "description" : "SSL thumbprint of the VxRail Manager"
        }
      },
      "description" : "Contains the VxRail Manager details"
    },
    "LdapInfo" : {
      "properties" : {
        "domainAlias" : {
          "type" : "string",
          "description" : "The optional alias to associate the Domain name"
        },
        "domainName" : {
          "type" : "string",
          "description" : "The name to associate with the created Domain"
        },
        "sourceDetails" : {
          "description" : "Details of the Identity Source",
          "$ref" : "#/definitions/SourceDetails"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the LDAP Server"
        },
        "username" : {
          "type" : "string",
          "description" : "User name to connect to LDAP(s) server"
        }
      },
      "description" : "Represents Identity management configuration when the protocol is LDAP"
    },
    "MapOfstringAndVvsVersionAliases" : {
      "type" : "object",
      "additionalProperties" : {
        "$ref" : "#/definitions/VvsVersionAliases"
      }
    },
    "MapOfstringAndstring" : {
      "type" : "object",
      "additionalProperties" : {
        "type" : "string"
      }
    },
    "RefreshToken" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Refresh token id that can be used to request new access token"
        }
      },
      "description" : "This contains refresh token id for the user API access."
    },
    "Disk" : {
      "properties" : {
        "capacityMB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Total capacity of the disk in MB"
        },
        "diskType" : {
          "type" : "string",
          "example" : "One among: HDD, FLASH",
          "description" : "Type of the disk."
        },
        "manufacturer" : {
          "type" : "string",
          "description" : "Hardware manufacturer of the disk"
        },
        "model" : {
          "type" : "string",
          "description" : "Hardware model of the disk"
        }
      },
      "description" : "Represents a disk"
    },
    "TaggedResource" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the resource"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of the resource"
        }
      },
      "description" : "Specifies a resource with id and type"
    },
    "ClusterUnstretchSpec" : {
      "description" : "This spec contains the parameters required to convert a Stretched cluster to a Standard vSAN cluster"
    },
    "PageOfRole" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Role"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "BackupTask" : {
      "properties" : {
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "Backup task ID"
        },
        "name" : {
          "type" : "string",
          "description" : "Backup task name"
        },
        "resources" : {
          "type" : "array",
          "description" : "Backup resources, to get the backup details",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "One among: IN_PROGRESS",
          "description" : "Backup task status"
        }
      }
    },
    "DvsSpec" : {
      "required" : [ "dvsName", "networks", "vmnics" ],
      "properties" : {
        "dvsName" : {
          "type" : "string",
          "description" : "DVS Name"
        },
        "isUsedByNsxt" : {
          "type" : "boolean",
          "description" : "Flag indicating whether the DVS is used by NSX-T"
        },
        "mtu" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "DVS MTU (default value is 9000)",
          "minimum" : 1500.0,
          "maximum" : 9000.0
        },
        "networks" : {
          "type" : "array",
          "example" : "One among: VSAN, VMOTION, MANAGEMENT, VM_MANAGEMENT or any custom network types defined in networkSpecs",
          "description" : "Types of networks in this portgroup",
          "items" : {
            "type" : "string"
          }
        },
        "niocSpecs" : {
          "type" : "array",
          "description" : "List of NIOC specs for networks",
          "items" : {
            "$ref" : "#/definitions/NiocSpec"
          }
        },
        "vmnics" : {
          "type" : "array",
          "description" : "Vmnics to be attached to the DVS",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Spec contains parameters for DVS"
    },
    "PageOfEndpoint" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Endpoint"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ErrorCause" : {
      "properties" : {
        "message" : {
          "type" : "string",
          "description" : "The message describing the reason for the error"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the error cause"
        }
      },
      "description" : "Describes a single error cause"
    },
    "PageOfVcenter" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Vcenter"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "PageOfDomainIntegration" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/DomainIntegration"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "TagManagerModel" : {
      "properties" : {
        "tagManagerUrl" : {
          "type" : "string",
          "description" : "Tag Manager URL value"
        }
      },
      "description" : "Represents a Tag Manager Model"
    },
    "NsxtHostClusterUpgradeSpec" : {
      "required" : [ "hostClusterId" ],
      "properties" : {
        "hostClusterId" : {
          "type" : "string",
          "description" : "Resource ID of the host transport node cluster"
        },
        "hostParallelUpgrade" : {
          "type" : "boolean",
          "description" : "Flag for disabling/enabling parallel upgrade within the cluster"
        },
        "liveUpgrade" : {
          "type" : "boolean",
          "description" : "Flag for disabling/enabling live upgrade of hosts in the transportnode clusters"
        }
      },
      "description" : "Host trnasport node cluster upgrade input"
    },
    "Datastore" : {
      "properties" : {
        "datastoreType" : {
          "type" : "string",
          "description" : "Datastore Type"
        },
        "freeCapacityGB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Free storage capacity in GB"
        },
        "id" : {
          "type" : "string",
          "description" : "Id of the datastore"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the datastore"
        },
        "tags" : {
          "type" : "array",
          "description" : "List of assigned tags for the datastore",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        },
        "totalCapacityGB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Total storage capacity in GB"
        },
        "url" : {
          "type" : "string",
          "description" : "URL of the datastore"
        },
        "vcDatacenterName" : {
          "type" : "string",
          "description" : "Name of the vCenter datacenter that this datastore resides"
        },
        "vcInstanceUuid" : {
          "type" : "string",
          "description" : "Instance UUID of the vCenter that manages this datastore"
        },
        "vmCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of VMs on the datastore"
        }
      },
      "description" : "Represents a datastore in the system"
    },
    "Functionality" : {
      "properties" : {
        "errorMessage" : {
          "type" : "string",
          "description" : "The localized error message"
        },
        "isAllowed" : {
          "type" : "boolean",
          "example" : "True",
          "description" : "Flag indicating if a given functionality is allowed/disallowed"
        },
        "type" : {
          "type" : "string",
          "example" : "Sample values: HOST_COMMISSION, HOST_DECOMMISSION",
          "description" : "Operation that is represented in machine readable format. The convention is <resource>_<operation>"
        }
      },
      "description" : "Defines a functionality model"
    },
    "LicensingInfoReference" : {
      "properties" : {
        "daysRemainingToSubscribe" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of days remaining to subscribe"
        },
        "isRegistered" : {
          "type" : "boolean",
          "description" : "Flag indicating the resource is registered for subscription or not"
        },
        "isSubscribed" : {
          "type" : "boolean",
          "description" : "Flag indicating the resource is subscribed or not"
        },
        "licensingMode" : {
          "type" : "string",
          "example" : "One among: SUBSCRIPTION, PERPETUAL, MIXED",
          "description" : "Licensing mode"
        },
        "subscriptionStatus" : {
          "type" : "string",
          "example" : "One among: UNSUBSCRIBED, ACTIVE, EXPIRED",
          "description" : "Status of the subscription mode"
        }
      },
      "description" : "Licensing information of the resource"
    },
    "StorageInfo" : {
      "properties" : {
        "total" : {
          "description" : "Total value",
          "$ref" : "#/definitions/DataMetric"
        },
        "used" : {
          "description" : "Used value",
          "$ref" : "#/definitions/DataMetric"
        }
      },
      "description" : "Represents a storage metric with used and total for a resource"
    },
    "Throwable" : {
      "properties" : {
        "localizedMessage" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "stackTrace" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StackTraceElement"
          }
        },
        "suppressed" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Throwable"
          }
        }
      }
    },
    "EdgeCluster" : {
      "properties" : {
        "clusters" : {
          "type" : "array",
          "description" : "List of clusters associated with the edge cluster",
          "items" : {
            "$ref" : "#/definitions/ClusterReference"
          }
        },
        "edgeNodes" : {
          "type" : "array",
          "description" : "List of edge nodes associated with the edge cluster",
          "items" : {
            "$ref" : "#/definitions/EdgeNodeReference"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the egde cluster"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the edge cluster"
        },
        "nsxtCluster" : {
          "description" : "NSX-T cluster associated with the edge cluster",
          "$ref" : "#/definitions/NsxTClusterReference"
        }
      },
      "description" : "EdgeCluster representation"
    },
    "AutoRotateCredentialPolicy" : {
      "required" : [ "nextSchedule" ],
      "properties" : {
        "frequencyInDays" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Frequency in days"
        },
        "nextSchedule" : {
          "type" : "string",
          "description" : "The timestamp at which auto-rotate for credential will run"
        }
      },
      "description" : "Represents a auto-rotate policy for a credential"
    },
    "SoftwareComponent" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of Resource/Software Component"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of Resource/Software Component"
        }
      }
    },
    "SddcNsxtSpec" : {
      "required" : [ "nsxtManagerSize", "nsxtManagers", "rootNsxtManagerPassword", "vip", "vipFqdn" ],
      "properties" : {
        "ipAddressPoolSpec" : {
          "description" : "NSX-T IP address pool specification",
          "$ref" : "#/definitions/IpAddressPoolSpec"
        },
        "nsxtAdminPassword" : {
          "type" : "string",
          "description" : "NSX-T admin password. The password must be at least 12 characters long. Must contain at-least 1 uppercase, 1 lowercase, 1 special character and 1 digit. In addition, a character cannot be repeated 3 or more times consectively."
        },
        "nsxtAuditPassword" : {
          "type" : "string",
          "description" : "NSX-T audit password. The password must be at least 12 characters long. Must contain at-least 1 uppercase, 1 lowercase, 1 special character and 1 digit. In addition, a character cannot be repeated 3 or more times consectively."
        },
        "nsxtLicense" : {
          "type" : "string",
          "description" : "NSX-T Manager license"
        },
        "nsxtManagerSize" : {
          "type" : "string",
          "example" : "One among:medium, large",
          "description" : "NSX-T Manager size"
        },
        "nsxtManagers" : {
          "type" : "array",
          "description" : "NSX-T Managers",
          "items" : {
            "$ref" : "#/definitions/NsxtManagerSpec"
          }
        },
        "overLayTransportZone" : {
          "description" : "NSX-T OverLay Transport zone",
          "$ref" : "#/definitions/NsxtTransportZone"
        },
        "rootLoginEnabledForNsxtManager" : {
          "type" : "boolean",
          "description" : "If true, allow root login for NSX-T Manager and deny if false. Deprecated as of 4.5, the root login will be always enabled for NSX-T Data Center Appliance."
        },
        "rootNsxtManagerPassword" : {
          "type" : "string",
          "description" : "NSX-T Manager root password. Password should have 1) At least eight characters, 2) At least one lower-case letter, 3) At least one upper-case letter 4) At least one digit 5) At least one special character, 6) At least five different characters , 7) No dictionary words, 6) No palindromes"
        },
        "sshEnabledForNsxtManager" : {
          "type" : "boolean",
          "description" : "If true, enable SSH for NSX-T Manager and disable if false. Deprecated as of 4.5, the SSH connection will be always enabled for NSX-T Data Center Appliance."
        },
        "transportVlanId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Transport VLAN ID"
        },
        "vip" : {
          "type" : "string",
          "description" : "Virtual IP address which would act as proxy/alias for NSX-T Managers"
        },
        "vipFqdn" : {
          "type" : "string",
          "description" : "FQDN for VIP so that common SSL certificates can be installed across all managers"
        },
        "vlanTransportZone" : {
          "description" : "NSX-T VLAN transport zone. \nThis property is deprecated, and it is a no-operation",
          "$ref" : "#/definitions/NsxtTransportZone"
        }
      },
      "description" : "Spec contains parameters for NSX-T deployment and configurations"
    },
    "LicensingInfo" : {
      "required" : [ "resourceType" ],
      "properties" : {
        "daysRemainingToSubscribe" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of days remaining to subscribe"
        },
        "isRegistered" : {
          "type" : "boolean",
          "description" : "Flag indicating the resource is registered for subscription or not"
        },
        "isSubscribed" : {
          "type" : "boolean",
          "description" : "Flag indicating the resource is subscribed or not"
        },
        "licensingMode" : {
          "type" : "string",
          "example" : "One among: SUBSCRIPTION, PERPETUAL, MIXED",
          "description" : "Licensing mode"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "ID of the resource, need not be set for the resource of the type : SYSTEM"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: SYSTEM, DOMAIN",
          "description" : "Type of the resource"
        },
        "subscriptionStatus" : {
          "type" : "string",
          "example" : "One among: UNSUBSCRIBED, ACTIVE, EXPIRED",
          "description" : "Status of the subscription mode"
        }
      },
      "description" : "Licensing information of the resource"
    },
    "DataMetric" : {
      "properties" : {
        "unit" : {
          "type" : "string",
          "description" : "Unit of the metric",
          "enum" : [ "B", "KB", "MB", "GB", "TB", "PB" ]
        },
        "value" : {
          "type" : "number",
          "format" : "double",
          "description" : "Value of the metric"
        }
      },
      "description" : "Represents a single metric representing digital data"
    },
    "BackupConfiguration" : {
      "properties" : {
        "backupLocations" : {
          "type" : "array",
          "description" : "List of backup locations",
          "items" : {
            "$ref" : "#/definitions/BackupLocation"
          }
        },
        "backupSchedules" : {
          "type" : "array",
          "description" : "List of backup schedules",
          "items" : {
            "$ref" : "#/definitions/BackupSchedule"
          }
        },
        "encryption" : {
          "description" : "Encryption passphrase used to encrypt and decrypt backup file",
          "$ref" : "#/definitions/Encryption"
        },
        "isConfigured" : {
          "type" : "boolean",
          "description" : "Backup configuration status of both FTP server and passphrase "
        }
      },
      "description" : "Backup configuration used to configure backup of NSX and SDDC manager"
    },
    "VxManagerSpec" : {
      "required" : [ "defaultAdminUserCredentials", "defaultRootUserCredentials", "vxManagerHostName" ],
      "properties" : {
        "defaultAdminUserCredentials" : {
          "description" : "Default admin credentials VxManager",
          "$ref" : "#/definitions/SddcCredentials"
        },
        "defaultRootUserCredentials" : {
          "description" : "Default root credentials VxManager",
          "$ref" : "#/definitions/SddcCredentials"
        },
        "sshThumbprint" : {
          "type" : "string",
          "description" : "VxRail Manager SSH thumbprint (RSA SHA256)"
        },
        "sslThumbprint" : {
          "type" : "string",
          "description" : "VxRail Manager SSL thumbprint (SHA256)"
        },
        "vxManagerHostName" : {
          "type" : "string",
          "description" : "VxManager host name"
        }
      },
      "description" : "Spec contains parameters for VxManager"
    },
    "SupportBundleConfig" : {
      "properties" : {
        "force" : {
          "type" : "boolean",
          "description" : "Run SOS operations, even if there is a Workload running."
        },
        "skipKnownHostCheck" : {
          "type" : "boolean",
          "description" : "Skip known_hosts file for SupportBundle collection."
        }
      }
    },
    "HostNetworkSpec" : {
      "properties" : {
        "vmNics" : {
          "type" : "array",
          "description" : "List of the vSphere host vmNics",
          "items" : {
            "$ref" : "#/definitions/VmNic"
          }
        }
      },
      "description" : "This specification contains network details required when adding a vSphere host to a cluster"
    },
    "ClassLoader" : { },
    "BaseCredential" : {
      "required" : [ "username" ],
      "properties" : {
        "accountType" : {
          "type" : "string",
          "example" : "One among: USER, SYSTEM, SERVICE",
          "description" : "Account type"
        },
        "credentialType" : {
          "type" : "string",
          "example" : "One among: SSO, SSH, API, FTP, AUDIT",
          "description" : "Credential type"
        },
        "password" : {
          "type" : "string",
          "description" : "Password"
        },
        "username" : {
          "type" : "string",
          "description" : "Username"
        }
      },
      "description" : "Represents credentials of a resource in the system"
    },
    "IdentitySourceSpec" : {
      "required" : [ "ldap", "name" ],
      "properties" : {
        "ldap" : {
          "description" : "The LDAP specification when the protocol is LDAP",
          "$ref" : "#/definitions/LdapSpec"
        },
        "name" : {
          "type" : "string",
          "description" : "The user-friendly name for the identity Source"
        }
      },
      "description" : "Represents Identity Source specification"
    },
    "CustomISOSpec" : {
      "required" : [ "id" ],
      "properties" : {
        "hostIds" : {
          "type" : "array",
          "description" : "List of host IDs",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "Custom ISO Id for VUM Clusters Upgrade"
        }
      },
      "description" : "Custom ISO Specifications for VUM Clusters Upgrade with Custom ISO"
    },
    "BundleUpdateSpec" : {
      "properties" : {
        "bundleDownloadSpec" : {
          "description" : "Bundle Download Specification.",
          "$ref" : "#/definitions/BundleDownloadSpec"
        },
        "compatibilitySetsFilePath" : {
          "type" : "string",
          "description" : "Path to the software compatibility sets file"
        }
      },
      "description" : "Bundle Update Specification."
    },
    "IdentityProviderSpec" : {
      "required" : [ "ldap", "name", "oidc", "type" ],
      "properties" : {
        "certChain" : {
          "type" : "array",
          "description" : "The root certificate chain required to connect to the external server",
          "items" : {
            "type" : "string"
          }
        },
        "ldap" : {
          "description" : "The LDAP specification when the protocol is LDAP",
          "$ref" : "#/definitions/LdapSpec"
        },
        "name" : {
          "type" : "string",
          "description" : "The user-friendly name for the Identity Provider"
        },
        "oidc" : {
          "description" : "The identity management configuration when the provider is based on oidc",
          "$ref" : "#/definitions/OidcSpec"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of Identity Identity Provider"
        }
      },
      "description" : "Represents Identity provider configuration"
    },
    "MapOfstringAndListOfVxRailCustomArrayContext" : {
      "type" : "object",
      "additionalProperties" : {
        "$ref" : "#/definitions/List"
      }
    },
    "Csr" : {
      "required" : [ "csrDecodedContent", "csrEncodedContent", "resource" ],
      "properties" : {
        "csrDecodedContent" : {
          "type" : "string",
          "example" : "DECODED CSR AS STRING",
          "description" : "The CSR decoded content"
        },
        "csrEncodedContent" : {
          "type" : "string",
          "example" : "-----BEGIN CERTIFICATE REQUEST-----\nMIIEH...\n-----END CERTIFICATE REQUEST-----",
          "description" : "The CSR encoded content"
        },
        "resource" : {
          "description" : "Resource associated with CSR",
          "$ref" : "#/definitions/Resource"
        }
      },
      "description" : "The Certificate Signing Request (CSR) details"
    },
    "PatchBundle" : {
      "required" : [ "bundleElements", "bundleId", "bundleType", "cumulativeFromVcfVersion" ],
      "properties" : {
        "bundleElements" : {
          "type" : "array",
          "description" : "Bundle elements of the patch bundle",
          "items" : {
            "type" : "string"
          }
        },
        "bundleId" : {
          "type" : "string",
          "description" : "Bundle ID of the patch bundle"
        },
        "bundleType" : {
          "type" : "string",
          "description" : "Bundle type of the patch bundle"
        },
        "cumulativeFromVcfVersion" : {
          "type" : "string",
          "description" : "Minimum VCF version that this patch bundle can be directly applied on"
        }
      },
      "description" : "Model for patch bundle in a release"
    },
    "Error" : {
      "properties" : {
        "arguments" : {
          "type" : "array",
          "description" : "The arguments used to localize the message, Can be used by scripts to automate the error processing.",
          "items" : {
            "type" : "string"
          }
        },
        "causes" : {
          "type" : "array",
          "description" : "The underlying cause exceptions.",
          "items" : {
            "$ref" : "#/definitions/ErrorCause"
          }
        },
        "context" : {
          "type" : "object",
          "description" : "The error context (e.g. the component where it occurred).",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "errorCode" : {
          "type" : "string",
          "description" : "The minor error code",
          "readOnly" : true
        },
        "errorType" : {
          "type" : "string",
          "description" : "The error type",
          "readOnly" : true
        },
        "message" : {
          "type" : "string",
          "description" : "The localized error message"
        },
        "nestedErrors" : {
          "type" : "array",
          "description" : "The nested errors when the error is a composite one",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "referenceToken" : {
          "type" : "string",
          "description" : "A reference token correlating the error with the relevant detailed error logs. Should be sent to the service provider when reporting issues."
        },
        "remediationMessage" : {
          "type" : "string",
          "description" : "The localized remediation error message"
        }
      },
      "description" : "Error response containing a minor error code, a localized error message, a localized remediation message and optionally a reference token to correlate the error with the logs "
    },
    "Host" : {
      "properties" : {
        "bundleRepoDatastore" : {
          "type" : "string",
          "description" : "Bundle repositry datastore for this host"
        },
        "cluster" : {
          "description" : "Information about the cluster this host is part of",
          "$ref" : "#/definitions/ClusterReference"
        },
        "compatibleStorageType" : {
          "type" : "string",
          "description" : "Information about the host compatible storage type"
        },
        "cpu" : {
          "description" : "Information about CPUs on the host",
          "$ref" : "#/definitions/Cpu"
        },
        "domain" : {
          "description" : "Information about the domain this host is part of",
          "$ref" : "#/definitions/DomainReference"
        },
        "esxiVersion" : {
          "type" : "string",
          "description" : "ESXi software version of the host"
        },
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the host"
        },
        "hardwareModel" : {
          "type" : "string",
          "description" : "Hardware model of the host"
        },
        "hardwareVendor" : {
          "type" : "string",
          "description" : "Hardware vendor of the host"
        },
        "hybrid" : {
          "type" : "boolean",
          "description" : "Information about the storage type of the host, true if the host is hybrid."
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the host"
        },
        "ipAddresses" : {
          "type" : "array",
          "description" : "Information about IP addresses assigned to the host",
          "items" : {
            "$ref" : "#/definitions/IpAddress"
          }
        },
        "isPrimary" : {
          "type" : "boolean",
          "description" : "Is the host a primary host in VxRail HCI Context"
        },
        "memory" : {
          "description" : "Information about memory on the host",
          "$ref" : "#/definitions/Memory"
        },
        "networkpool" : {
          "description" : "Information about the network pool this host is part of",
          "$ref" : "#/definitions/NetworkPoolReference"
        },
        "physicalNics" : {
          "type" : "array",
          "description" : "Information about physical NICs on the host",
          "items" : {
            "$ref" : "#/definitions/PhysicalNic"
          }
        },
        "serialNumber" : {
          "description" : "Serial Number of the host",
          "$ref" : "#/definitions/OptionalOfstring"
        },
        "sshThumbprint" : {
          "description" : "SSH Thumbprint of the host",
          "$ref" : "#/definitions/OptionalOfstring"
        },
        "sslThumbprint" : {
          "description" : "SSL Thumbprint of the host",
          "$ref" : "#/definitions/OptionalOfstring"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: ASSIGNED, UNASSIGNED_USEABLE, UNASSIGNED_UNUSEABLE",
          "description" : "Status of the host"
        },
        "storage" : {
          "description" : "Information about storage on the host",
          "$ref" : "#/definitions/Storage"
        },
        "tags" : {
          "type" : "array",
          "description" : "Deprecated, this list will always be returned empty",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        }
      },
      "description" : "Represents an Esxi host in the system"
    },
    "VmfsDatastoreSpec" : {
      "properties" : {
        "fcSpec" : {
          "type" : "array",
          "description" : "Cluster storage configuration for VMFS on FC",
          "items" : {
            "$ref" : "#/definitions/FcSpec"
          }
        }
      },
      "description" : "Cluster storage configuration for VMFS"
    },
    "Logs" : {
      "properties" : {
        "apiLogs" : {
          "type" : "boolean",
          "description" : "Collect API Logs."
        },
        "esxLogs" : {
          "type" : "boolean",
          "description" : "Collect ESX Logs."
        },
        "nsxLogs" : {
          "type" : "boolean",
          "description" : "Collect NSX Logs."
        },
        "sddcManagerLogs" : {
          "type" : "boolean",
          "description" : "Collect SDDC Manager Logs."
        },
        "systemDebugLogs" : {
          "type" : "boolean",
          "description" : "Collect SystemDebug Logs."
        },
        "vcLogs" : {
          "type" : "boolean",
          "description" : "Collect vCenter Logs."
        },
        "vmScreenshots" : {
          "type" : "boolean",
          "description" : "Collect VMScreenshots."
        },
        "vraLogs" : {
          "type" : "boolean",
          "description" : "Collect VRA Logs."
        },
        "vrliLogs" : {
          "type" : "boolean",
          "description" : "Collect VRLi Logs."
        },
        "vropsLogs" : {
          "type" : "boolean",
          "description" : "Collect VROps Logs."
        },
        "vrslcmLogs" : {
          "type" : "boolean",
          "description" : "Collect VRSLCM Logs."
        },
        "vxrailManagerLogs" : {
          "type" : "boolean",
          "description" : "Collect VXRailManager Logs."
        },
        "wcpLogs" : {
          "type" : "boolean",
          "description" : "Collect WCP Logs."
        }
      }
    },
    "CertificatesGenerationSpec" : {
      "required" : [ "caType" ],
      "properties" : {
        "caType" : {
          "type" : "string",
          "example" : "One among: OpenSSL, Microsoft",
          "description" : "CA type. Only supports Microsoft and OpenSSL CAs"
        },
        "resources" : {
          "type" : "array",
          "description" : "Resource(s) in a domain",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        }
      },
      "description" : "This specification contains certificates generation request details"
    },
    "Manifest" : {
      "required" : [ "creationTime", "publishedDate", "releases", "sequenceNumber", "version" ],
      "properties" : {
        "asyncPatches" : {
          "type" : "object",
          "description" : "Async patches used by async patch tool",
          "additionalProperties" : {
            "$ref" : "#/definitions/List"
          }
        },
        "creationTime" : {
          "type" : "string",
          "description" : "Creation time for the manifest e.g. 2020-06-08T02:20:15.844Z, in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format"
        },
        "publishedDate" : {
          "type" : "string",
          "description" : "Date of publish of the manifest e.g. 2020-06-08T02:20:15.844Z, in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format"
        },
        "recalledBundles" : {
          "type" : "array",
          "description" : "Collection of bundles that are recalled and their replacements, if applicable",
          "items" : {
            "$ref" : "#/definitions/BundleRecall"
          }
        },
        "releases" : {
          "type" : "array",
          "description" : "Releases of VCF in the ascending order of product version",
          "items" : {
            "$ref" : "#/definitions/Release"
          }
        },
        "sequenceNumber" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Manifest sequence number which signifies an update in manifest"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Manifest version supported by VCF"
        },
        "vvsMappings" : {
          "type" : "object",
          "description" : "VVS product release Id to VCF version mapping",
          "additionalProperties" : {
            "$ref" : "#/definitions/MapOfstringAndVvsVersionAliases"
          }
        }
      },
      "description" : "LCM 2.0 Manifest model that represents the metadata of the VMware Cloud foundation components and releases that Lyfe cycle manager utilises."
    },
    "DomainReference" : {
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the domain"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the domain"
        }
      },
      "description" : "Represents a domain reference"
    },
    "PageOfEdgeCluster" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/EdgeCluster"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "NsxtResources" : {
      "properties" : {
        "bundleId" : {
          "type" : "string",
          "description" : "Bundle id used to compute the upgradability"
        },
        "domainId" : {
          "type" : "string",
          "description" : "Domain id associated with the NSX-T cluster"
        },
        "nsxtEdgeClusters" : {
          "type" : "array",
          "description" : "List of edge clusters that are candidates for upgrade",
          "items" : {
            "$ref" : "#/definitions/NsxtEdgeCluster"
          }
        },
        "nsxtHostClusters" : {
          "type" : "array",
          "description" : "List of host clusters that are candidates for upgrade",
          "items" : {
            "$ref" : "#/definitions/NsxtHostCluster"
          }
        },
        "nsxtManagerCluster" : {
          "description" : "Manager cluster that is a candidate for upgrade",
          "$ref" : "#/definitions/NsxtManagerCluster"
        },
        "nsxtUpgradeCoordinator" : {
          "description" : "Upgrade coordinator pertaining to the NSX-T instance",
          "$ref" : "#/definitions/NsxtUpgradeCoordinator"
        }
      },
      "description" : "Nsxt Upgrade Resources for an NSXT instance"
    },
    "PageOfTrustedCertificate" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/TrustedCertificate"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "MapOfstringAndHardwareSupportPackageInfo" : {
      "type" : "object",
      "additionalProperties" : {
        "$ref" : "#/definitions/HardwareSupportPackageInfo"
      }
    },
    "CeipUpdateSpec" : {
      "required" : [ "status" ],
      "properties" : {
        "status" : {
          "type" : "string",
          "example" : "One among: ENABLE, DISABLE",
          "description" : "User provided CEIP operation"
        }
      },
      "description" : "Specification for CEIP state change"
    },
    "MessagePack" : {
      "required" : [ "messageKey" ],
      "properties" : {
        "arguments" : {
          "type" : "array",
          "description" : "The arguments used to localize the message. Can be used by scripts to automate the response processing. ",
          "items" : {
            "type" : "string"
          }
        },
        "component" : {
          "type" : "string",
          "description" : "The component the message belongs to"
        },
        "message" : {
          "type" : "string",
          "description" : "The localized message (if not provided by another property)"
        },
        "messageKey" : {
          "type" : "string",
          "description" : "The machine-readable key of the message"
        }
      },
      "description" : "A message pack representing a localizable message and suitable for machine processing. Contains a message key unique in the scope of the specified component, as well as the arguments needed to generate the localized message."
    },
    "DomainCreationSpec" : {
      "required" : [ "computeSpec", "domainName", "vcenterSpec" ],
      "properties" : {
        "computeSpec" : {
          "description" : "Specification representing the clusters to be added to the workload domain",
          "$ref" : "#/definitions/ComputeSpec"
        },
        "domainName" : {
          "type" : "string",
          "description" : "Name of the workload domain"
        },
        "nsxTSpec" : {
          "description" : "Specification details for NSX-T configuration",
          "$ref" : "#/definitions/NsxTSpec"
        },
        "orgName" : {
          "type" : "string",
          "description" : "Organization name of the workload domain"
        },
        "vcenterSpec" : {
          "description" : "Specification details for vCenter",
          "$ref" : "#/definitions/VcenterSpec"
        }
      },
      "description" : "This specification contains the parameters required to create a new workload domain"
    },
    "PageOfDomain" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Domain"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "NsxtUpgradeCoordinator" : {
      "properties" : {
        "enabledOn" : {
          "type" : "string",
          "description" : "The IP of the manager on which UC is enabled"
        },
        "id" : {
          "type" : "string",
          "description" : "Upgrade coordinator id"
        },
        "resourceHealth" : {
          "type" : "string",
          "description" : "Current resource health status"
        },
        "upgradeStatus" : {
          "type" : "string",
          "description" : "Upgrade status with respect to the bundle"
        },
        "version" : {
          "type" : "string",
          "description" : "The current version of the UC"
        }
      },
      "description" : "NSXT Upgrade coordinator Upgrade Resource"
    },
    "OptionalOfstring" : {
      "properties" : {
        "present" : {
          "type" : "boolean"
        }
      }
    },
    "Fips" : {
      "required" : [ "enabled" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "VCF FIPS mode status"
        }
      },
      "description" : "Represents VCF FIPS mode status (enabled/disabled)"
    },
    "HardwareSupportPackages" : {
      "required" : [ "displayName", "name", "packages" ],
      "properties" : {
        "displayName" : {
          "type" : "string",
          "description" : "Hardware Support Manager display name"
        },
        "name" : {
          "type" : "string",
          "description" : "Hardware Support Manager Name"
        },
        "packages" : {
          "type" : "array",
          "description" : "Hardware Support Packages",
          "items" : {
            "$ref" : "#/definitions/PackageSpec"
          }
        }
      },
      "description" : "Available Hardware Support Manager details"
    },
    "Endpoint" : {
      "required" : [ "type", "url" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "One among: PSC, VCENTER, NSX_MANAGER, NSX_T_MANAGER, VRLI, VRA, VROPS, WSA, VRSLCM",
          "description" : "Type of the Endpoint"
        },
        "url" : {
          "type" : "string",
          "description" : "Url of the Endpoint"
        }
      },
      "description" : "Represents an Endpoint in a Domain"
    },
    "SupportBundleOption" : {
      "properties" : {
        "config" : {
          "description" : "SupportBundle config.",
          "$ref" : "#/definitions/SupportBundleConfig"
        },
        "include" : {
          "description" : "Sos Additional Reports for Support Bundle.",
          "$ref" : "#/definitions/SupportBundleIncludeItems"
        }
      }
    },
    "DnsConfiguration" : {
      "required" : [ "dnsServers" ],
      "properties" : {
        "dnsServers" : {
          "type" : "array",
          "description" : "List of DNS servers",
          "items" : {
            "$ref" : "#/definitions/DnsServer"
          }
        }
      },
      "description" : "DNS Configuration"
    },
    "Stage" : {
      "properties" : {
        "completionTimestamp" : {
          "type" : "string"
        },
        "creationTimestamp" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "description" : "Stage description"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "Stage name"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED",
          "description" : "Stage status"
        },
        "type" : {
          "type" : "string",
          "description" : "Stage type"
        }
      },
      "description" : "Represents a Stage"
    },
    "NfsDatastoreSpec" : {
      "required" : [ "datastoreName" ],
      "properties" : {
        "datastoreName" : {
          "type" : "string",
          "description" : "Datastore name used for cluster creation"
        },
        "nasVolume" : {
          "description" : "NAS volume configuration for NFS based cluster",
          "$ref" : "#/definitions/NasVolumeSpec"
        }
      },
      "description" : "This specification contains cluster storage configuration for NFS"
    },
    "PageOfNsxTCriterion" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/NsxTCriterion"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ClusterReference" : {
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the cluster"
        }
      },
      "description" : "Represents a reference to the cluster"
    },
    "PageOfCertificateAuthority" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/CertificateAuthority"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "VxRailContext" : {
      "properties" : {
        "attributeName" : {
          "type" : "string",
          "description" : "Attribute name"
        },
        "datatype" : {
          "type" : "string",
          "description" : "Datatype of attribute value",
          "enum" : [ "INTEGER", "BOOLEAN", "STRING" ]
        },
        "value" : {
          "type" : "string",
          "description" : "Attribute value"
        }
      },
      "description" : "Contains VxRail Specific properties"
    },
    "SharesInfo" : {
      "properties" : {
        "level" : {
          "type" : "string",
          "example" : "One among: low, normal, high, custom",
          "description" : "The allocation level"
        },
        "shares" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of shares allocated"
        }
      },
      "description" : "Specify relative allocation between resource consumers"
    },
    "LocalUser" : {
      "required" : [ "name", "role", "type" ],
      "properties" : {
        "apiKey" : {
          "type" : "string",
          "description" : "The API key of the user"
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "The timestamp at which the user was created"
        },
        "domain" : {
          "type" : "string",
          "description" : "The domain of the user"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the user"
        },
        "isConfigured" : {
          "type" : "boolean",
          "description" : "Flag indicating whether or not local account is configured"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the user"
        },
        "role" : {
          "description" : "The role of the user",
          "$ref" : "#/definitions/RoleReference"
        },
        "type" : {
          "type" : "string",
          "example" : "One among: USER, GROUP, SERVICE",
          "description" : "The type of the user"
        }
      },
      "description" : "Represents Local User and its attributes"
    },
    "NsxtEdgeClusterUpgradeSpec" : {
      "required" : [ "edgeClusterId" ],
      "properties" : {
        "edgeClusterId" : {
          "type" : "string",
          "description" : "Resource ID of the edge transport node cluster"
        },
        "edgeParallelUpgrade" : {
          "type" : "boolean",
          "description" : "disable/enable parallel upgrade of edges within the cluster"
        }
      },
      "description" : "Host transport node cluster upgrade input"
    },
    "URLStreamHandler" : { },
    "NsxtIpAddressPoolStaticSubnet" : {
      "properties" : {
        "cidr" : {
          "type" : "string",
          "description" : "The CIDR of the IP address subnet"
        },
        "gateway" : {
          "type" : "string",
          "description" : "The gateway IP address"
        },
        "ipAddressPoolRanges" : {
          "type" : "array",
          "description" : "The list of IP address ranges",
          "items" : {
            "$ref" : "#/definitions/NsxtIpAddressPoolRange"
          }
        }
      },
      "description" : "NSX-T IP address pool static subnet representation"
    },
    "CredentialsExpiration" : {
      "properties" : {
        "completionTimestamp" : {
          "type" : "string",
          "description" : "Completion timestamp"
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "Creation timestamp"
        },
        "elements" : {
          "type" : "array",
          "description" : "List of one or more expiration checks that are performed as part of the credentials expiration task",
          "items" : {
            "$ref" : "#/definitions/CredentialExpirationCheck"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "ID of expiration task"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: COMPLETED, FAILED, IN_PROGRESS",
          "description" : "Execution status of the expiration"
        }
      },
      "description" : "Represents a credentials expiration task response"
    },
    "PageOfUser" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/User"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "EdgeClusterNsxtEntityCriterion" : {
      "properties" : {
        "arguments" : {
          "type" : "object",
          "description" : "Arguments required for a particular criterion",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the criterion"
        },
        "name" : {
          "type" : "string",
          "example" : "One among: TIER_0_GATEWAY_ASSOCIATED_WITH_EDGE_CLUSTER, TIER_1_GATEWAY_ASSOCIATED_WITH_EDGE_CLUSTER",
          "description" : "Name of the criterion"
        }
      },
      "description" : "Represents a criterion for querying the Edge Cluster"
    },
    "SddcManagerInfo" : {
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the SDDC Manager"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the SDDC Manager"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP Address of the SDDC Manager"
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the SDDC Manager"
        }
      },
      "description" : "SDDC Manager Information"
    },
    "IpAddressPoolSpec" : {
      "required" : [ "name" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Description of the IP address pool"
        },
        "ignoreUnavailableNsxtCluster" : {
          "type" : "boolean",
          "description" : "Ignore unavailable NSX-T cluster(s) during IP pool spec validation"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the IP address pool"
        },
        "subnets" : {
          "type" : "array",
          "description" : "List of IP address pool subnet specification",
          "items" : {
            "$ref" : "#/definitions/IpAddressPoolSubnetSpec"
          }
        }
      },
      "description" : "This specification contains the parameters required to create or reuse an IP address pool."
    },
    "ClusterQueryResponse" : {
      "properties" : {
        "queryInfo" : {
          "description" : "Query info",
          "$ref" : "#/definitions/QueryInfo"
        },
        "result" : {
          "description" : "Query result",
          "$ref" : "#/definitions/PageOfCluster"
        }
      },
      "description" : "Represents a cluster query response."
    },
    "CertificateValidation" : {
      "required" : [ "resourceFqdn", "resourceId", "startTimestamp", "validationStatus" ],
      "properties" : {
        "endTimestamp" : {
          "type" : "string",
          "example" : "2021-02-02T00:00:00.000Z",
          "description" : "End Timestamp"
        },
        "resourceFqdn" : {
          "type" : "string",
          "example" : "sfo-vc01.rainpole.io",
          "description" : "Resource FQDN"
        },
        "resourceId" : {
          "type" : "string",
          "example" : "BE8A5E04-92A0-43F6-A166-AA041F4327CC",
          "description" : "Resource ID"
        },
        "startTimestamp" : {
          "type" : "string",
          "example" : "2020-01-01T00:00:00.000Z",
          "description" : "Start Timestamp"
        },
        "validationMessage" : {
          "type" : "string",
          "example" : "Certificate Expired",
          "description" : "Validation Message"
        },
        "validationStatus" : {
          "type" : "string",
          "example" : "One among: INPROGRESS, SUCCESSFUL, FAILED",
          "description" : "Validation Status"
        }
      },
      "description" : "The Certificate Validation details."
    },
    "VvsVersionAliases" : {
      "required" : [ "version" ],
      "properties" : {
        "aliases" : {
          "type" : "array",
          "description" : "Product version aliases",
          "items" : {
            "type" : "string"
          }
        },
        "version" : {
          "type" : "string",
          "description" : "Product version"
        }
      },
      "description" : "Vvs Mapping rest model that is located in the 2.0 manifest, these models are consumed by AP tool to determine the release Id to vcf version mapping in VVS compatibility data."
    },
    "CredentialValidationCheck" : {
      "required" : [ "credentialType", "resourceType", "username" ],
      "properties" : {
        "credentialType" : {
          "type" : "string",
          "example" : "One among: SSO, SSH, API, FTP, AUDIT",
          "description" : "Credential type"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the resource validation"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "passwordDetails" : {
          "description" : "Password details with validity and expiry info",
          "$ref" : "#/definitions/PasswordDetails"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "Resource ID"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Resource name"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, BACKUP",
          "description" : "Authenticated Resource Type"
        },
        "resultStatus" : {
          "type" : "string",
          "example" : "One among: SUCCEEDED, FAILED",
          "description" : "Result status of the validation check"
        },
        "username" : {
          "type" : "string",
          "description" : "Username"
        }
      },
      "description" : "Represents the validation check"
    },
    "BaseImageInfo" : {
      "required" : [ "version" ],
      "properties" : {
        "details" : {
          "description" : "BaseImage details",
          "$ref" : "#/definitions/BaseImageDetails"
        },
        "version" : {
          "type" : "string",
          "example" : "7.0.0-0.0.30340198",
          "description" : "BaseImage Version"
        }
      },
      "description" : "BaseImage contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "CsrsGenerationSpec" : {
      "required" : [ "csrGenerationSpec" ],
      "properties" : {
        "csrGenerationSpec" : {
          "description" : "The CSR specification to generate CSR for resource(s)",
          "$ref" : "#/definitions/CsrGenerationSpec"
        },
        "resources" : {
          "type" : "array",
          "description" : "Resource(s) in a domain",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        }
      },
      "description" : "This specification contains CSR Generation request details"
    },
    "TokenCreationSpec" : {
      "properties" : {
        "apiKey" : {
          "type" : "string",
          "description" : "API Key"
        },
        "password" : {
          "type" : "string",
          "description" : "User Password"
        },
        "username" : {
          "type" : "string",
          "description" : "Username"
        }
      },
      "description" : "This specification contains user details to create authentication token."
    },
    "Credential" : {
      "required" : [ "accountType", "creationTimestamp", "credentialType", "id", "modificationTimestamp", "resource", "username" ],
      "properties" : {
        "accountType" : {
          "type" : "string",
          "example" : "One among: USER, SYSTEM, SERVICE",
          "description" : "Account type"
        },
        "autoRotatePolicy" : {
          "description" : "Configured auto-rotate policy of a credential. Empty if not configured",
          "$ref" : "#/definitions/AutoRotateCredentialPolicy"
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "The timestamp at which credential was created"
        },
        "credentialType" : {
          "type" : "string",
          "example" : "One among: SSO, SSH, API, FTP, AUDIT",
          "description" : "Credential type"
        },
        "expiry" : {
          "description" : "Password expiration details",
          "$ref" : "#/definitions/ExpirationDetails"
        },
        "id" : {
          "type" : "string",
          "description" : "Credential ID"
        },
        "modificationTimestamp" : {
          "type" : "string",
          "description" : "The timestamp at which credential was last modified"
        },
        "password" : {
          "type" : "string",
          "description" : "Password"
        },
        "resource" : {
          "description" : "The resource which owns the credential",
          "$ref" : "#/definitions/AuthenticatedResource"
        },
        "username" : {
          "type" : "string",
          "description" : "Username"
        }
      },
      "description" : "Represents a credential and the resource to which it is associated with"
    },
    "Calendar" : {
      "properties" : {
        "calendarType" : {
          "type" : "string"
        },
        "firstDayOfWeek" : {
          "type" : "integer",
          "format" : "int32"
        },
        "lenient" : {
          "type" : "boolean"
        },
        "minimalDaysInFirstWeek" : {
          "type" : "integer",
          "format" : "int32"
        },
        "time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "timeInMillis" : {
          "type" : "integer",
          "format" : "int64"
        },
        "timeZone" : {
          "$ref" : "#/definitions/TimeZone"
        },
        "weekDateSupported" : {
          "type" : "boolean"
        },
        "weekYear" : {
          "type" : "integer",
          "format" : "int32"
        },
        "weeksInWeekYear" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "VsanSpec" : {
      "required" : [ "datastoreName", "vsanName" ],
      "properties" : {
        "datastoreName" : {
          "type" : "string",
          "description" : "Datastore Name"
        },
        "hclFile" : {
          "type" : "string",
          "description" : "HCL File"
        },
        "licenseFile" : {
          "type" : "string",
          "description" : "License File"
        },
        "vsanDedup" : {
          "type" : "boolean",
          "description" : "VSAN feature Deduplication and Compression flag, one flag for both features"
        },
        "vsanName" : {
          "type" : "string",
          "description" : "Virtual SAN config name"
        }
      },
      "description" : "Spec contains parameters of Virtual SAN"
    },
    "HighAvailability" : {
      "required" : [ "enabled" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        }
      },
      "description" : "This specification contains high availability settings"
    },
    "SddcVcenterSpec" : {
      "required" : [ "rootVcenterPassword", "vcenterHostname" ],
      "properties" : {
        "licenseFile" : {
          "type" : "string",
          "description" : "License File"
        },
        "rootVcenterPassword" : {
          "type" : "string",
          "description" : "vCenter root password. The password must be between 8 characters and 20 characters long. It must also contain at least one uppercase and lowercase letter, one number, and one character from '! \" # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\ ] ^ _ ` { &Iota; } ~' and all characters must be ASCII. Space is not allowed in password.",
          "minLength" : 8,
          "maxLength" : 20
        },
        "sshThumbprint" : {
          "type" : "string",
          "description" : "vCenter Server SSH thumbprint (RSA SHA256)"
        },
        "sslThumbprint" : {
          "type" : "string",
          "description" : "vCenter Server SSL thumbprint (SHA256)"
        },
        "storageSize" : {
          "type" : "string",
          "example" : "One among:lstorage, xlstorage",
          "description" : "vCenter VM storage size"
        },
        "vcenterHostname" : {
          "type" : "string",
          "description" : "vCenter hostname address"
        },
        "vcenterIp" : {
          "type" : "string",
          "description" : "vCenter IP address",
          "minLength" : 7,
          "maxLength" : 15
        },
        "vcenterNetmask" : {
          "type" : "string",
          "description" : "vCenter Netmask",
          "minLength" : 7,
          "maxLength" : 15
        },
        "vmSize" : {
          "type" : "string",
          "example" : "One among:xlarge, large, medium, small, tiny",
          "description" : "vCenter VM size"
        }
      },
      "description" : "Spec contains parameters for vCenter"
    },
    "SddcSubTask" : {
      "properties" : {
        "creationTimestamp" : {
          "type" : "string",
          "description" : "Sub-Task Creation Time"
        },
        "description" : {
          "type" : "string",
          "description" : "Sub-Task Description"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "localizableDescriptionPack" : {
          "description" : "Localizable SDDC Task description",
          "$ref" : "#/definitions/MessagePack"
        },
        "localizableNamePack" : {
          "description" : "Localizable SDDC Task name",
          "$ref" : "#/definitions/MessagePack"
        },
        "name" : {
          "type" : "string",
          "description" : "Sub-Task Name"
        },
        "processingStateDescription" : {
          "type" : "string",
          "description" : "Processing category description, e.g., VC Deployment, VSAN configuration etc"
        },
        "processingStateName" : {
          "type" : "string",
          "description" : "Processing category name, e.g., VC Deployment, VSAN configuration etc"
        },
        "sddcId" : {
          "type" : "string",
          "example" : "123e4567-e89b-42d3-a456-556642440000",
          "description" : "SDDC ID"
        },
        "status" : {
          "type" : "string",
          "example" : "INITIALIZED, COMPLETED_WITH_SUCCESS, COMPLETED_WITH_FAILURE, PREVALIDATION_COMPLETED_WITH_SUCCESS, PREVALIDATION_COMPLETED_WITH_FAILURE, POSTVALIDATION_COMPLETED_WITH_SUCCESS, POSTVALIDATION_COMPLETED_WITH_FAILURE,IN_PROGRESS, PREVALIDATION_IN_PROGRESS, POSTVALIDATION_IN_PROGRESS, INTERNAL_ERROR",
          "description" : "Task Status"
        },
        "updateTimestamp" : {
          "type" : "string",
          "description" : "Last Update Time of Sub-Task"
        }
      },
      "description" : "Represents a SDDC sub-task"
    },
    "BundleComponent" : {
      "required" : [ "imageType" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Bundle Component Description"
        },
        "fromVersion" : {
          "type" : "string",
          "description" : "Bundle Component's from/source version before Upgrade"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of Resource/Software Component"
        },
        "imageType" : {
          "type" : "string",
          "example" : "One among: PATCH, INSTALL",
          "description" : "Bundle Component Image Type"
        },
        "releasedDate" : {
          "type" : "string",
          "description" : "Bundle Component Release Date"
        },
        "toVersion" : {
          "type" : "string",
          "description" : "Bundle Component's to/target version after Upgrade"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of Resource/Software Component"
        },
        "vendor" : {
          "type" : "string",
          "description" : "Bundle Component Vendor"
        }
      },
      "description" : "Bundle Software Component"
    },
    "NsxtIpAddressPool" : {
      "properties" : {
        "availableIpAddresses" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of IP addresses available in the IP address pool"
        },
        "blockSubnets" : {
          "type" : "array",
          "description" : "The list of IP address pool block subnets",
          "items" : {
            "$ref" : "#/definitions/NsxtIpAddressPoolBlockSubnet"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the IP address pool"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the IP address pool"
        },
        "staticSubnets" : {
          "type" : "array",
          "description" : "The list of IP address pool static subnets",
          "items" : {
            "$ref" : "#/definitions/NsxtIpAddressPoolStaticSubnet"
          }
        },
        "totalIpAddresses" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total number of IP addresses in the IP address pool"
        }
      },
      "description" : "NSX-T IP address pool representation"
    },
    "DnsServer" : {
      "required" : [ "ipAddress", "isPrimary" ],
      "properties" : {
        "ipAddress" : {
          "type" : "string",
          "example" : "10.0.0.250",
          "description" : "IP address/FQDN of DNS server"
        },
        "isPrimary" : {
          "type" : "boolean",
          "description" : "Is DNS server primary"
        }
      },
      "description" : "DNS server details"
    },
    "VersionAliasesForBundleComponentTypeSpec" : {
      "properties" : {
        "forceUpdate" : {
          "type" : "boolean",
          "description" : "Flag for force update version alias configuration."
        },
        "targetVcfVersion" : {
          "type" : "string",
          "description" : "If this field is set, LCM will calculate and update version aliases based on current deployment VCF version and the provided target VCF version"
        },
        "versionAliasesForBundleComponentTypes" : {
          "type" : "array",
          "description" : "List of version aliases for bundle component types.",
          "items" : {
            "$ref" : "#/definitions/VersionAliasesForBundleComponentType"
          }
        }
      },
      "description" : "Version Alias update Specification. This specification gets used in the Version Alias Update API."
    },
    "NsxTCriterion" : {
      "properties" : {
        "arguments" : {
          "type" : "object",
          "description" : "Arguments required for a particular criterion",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the criterion"
        },
        "name" : {
          "type" : "string",
          "example" : "NSXT_CLUSTERS_WITH_STATUS",
          "description" : "Name of the criterion"
        }
      },
      "description" : "Represents a criterion for querying the NSX-T cluster"
    },
    "ComponentInfo" : {
      "required" : [ "details", "version" ],
      "properties" : {
        "details" : {
          "description" : "Component details",
          "$ref" : "#/definitions/ComponentDetails"
        },
        "version" : {
          "type" : "string",
          "example" : "1.3.2.8-1OEM.650.0.0.4598673",
          "description" : "Component Version"
        }
      },
      "description" : "Component contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "PageOfCluster" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Cluster"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "PageOfLicenseKey" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/LicenseKey"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ComponentDetails" : {
      "required" : [ "displayName", "vendor" ],
      "properties" : {
        "displayName" : {
          "type" : "string",
          "description" : "Component display name"
        },
        "displayVersion" : {
          "type" : "string",
          "description" : "Component display version"
        },
        "vendor" : {
          "type" : "string",
          "example" : "intel",
          "description" : "Component vendor"
        }
      },
      "description" : "Component contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "DepotSettings" : {
      "properties" : {
        "dellEmcSupportAccount" : {
          "description" : "Dell EMC Support Account",
          "$ref" : "#/definitions/DepotAccount"
        },
        "vmwareAccount" : {
          "description" : "VMware Depot Account",
          "$ref" : "#/definitions/DepotAccount"
        }
      },
      "description" : "VMware Depot Settings. At least one of vmwareAccount or dellEmcSupportAccount value must be provided"
    },
    "OidcSpec" : {
      "required" : [ "clientId", "clientSecret", "discoveryEndpoint" ],
      "properties" : {
        "clientId" : {
          "type" : "string",
          "description" : "Client identifier to connect to the provider"
        },
        "clientSecret" : {
          "type" : "string",
          "description" : "The secret shared between the client and the provider"
        },
        "discoveryEndpoint" : {
          "type" : "string",
          "description" : "Endpoint to retrieve the provider metadata"
        }
      },
      "description" : "Identity management configuration when the Identity Provider is based on oidc"
    },
    "ResourceFunctionalitiesGlobalConfiguration" : {
      "properties" : {
        "errorMessage" : {
          "type" : "string",
          "description" : "The localized error message"
        },
        "isAllowed" : {
          "type" : "boolean",
          "description" : "Global flag representing if all of the VMware Cloud Foundation operations are allowed or not"
        }
      },
      "description" : "Defines a resource functionality caller specification"
    },
    "CredentialsSubTask" : {
      "properties" : {
        "creationTimestamp" : {
          "type" : "string",
          "description" : "Credential sub-task creation timestamp"
        },
        "credentialType" : {
          "type" : "string",
          "description" : "Credential sub-task credential type"
        },
        "dependentSubTasks" : {
          "type" : "array",
          "description" : "List of dependent sub-tasks of the credential sub-task",
          "items" : {
            "$ref" : "#/definitions/CredentialsSubTask"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Credential sub-task description"
        },
        "entityType" : {
          "type" : "string",
          "description" : "Credential sub-task entity type"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "Credential sub-task ID"
        },
        "name" : {
          "type" : "string",
          "description" : "Credential sub-task name"
        },
        "newPassword" : {
          "type" : "string",
          "description" : "Credential sub-task new password"
        },
        "oldPassword" : {
          "type" : "string",
          "description" : "Credential sub-task old password"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Resource name"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED, USER_CANCELLED, INCONSISTENT",
          "description" : "Credential sub-task status"
        },
        "username" : {
          "type" : "string",
          "description" : "Credential sub-task username"
        }
      },
      "description" : "Represents the credentials sub-task in the system"
    },
    "AssociatedTask" : {
      "required" : [ "taskId" ],
      "properties" : {
        "subTaskId" : {
          "type" : "string",
          "description" : "ID of the subtask where the warning for the resource occurred"
        },
        "taskId" : {
          "type" : "string",
          "description" : "ID of the task where the warning for the resource occurred"
        }
      },
      "description" : "Task association for a resource warning. Indicates in which task the resource warning occurred"
    },
    "Page" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "type" : "object"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "HealthSummaryConfig" : {
      "properties" : {
        "force" : {
          "type" : "boolean",
          "description" : "Run SOS operations, even if there is a Workload running."
        },
        "skipKnownHostCheck" : {
          "type" : "boolean",
          "description" : "Skip known_hosts file for HealthSummary."
        }
      }
    },
    "RoleReference" : {
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the role"
        }
      },
      "description" : "Represents a role reference"
    },
    "NetworkPoolUpdateSpec" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the Network Pool"
        }
      },
      "description" : "Represents a network pool update spec"
    },
    "AvnsCreationSpec" : {
      "required" : [ "avns", "edgeClusterId" ],
      "properties" : {
        "avns" : {
          "type" : "array",
          "description" : "The list of AVNs to be created",
          "items" : {
            "$ref" : "#/definitions/Avn"
          }
        },
        "edgeClusterId" : {
          "type" : "string",
          "example" : "3f39d4a1-78d2-11e8-af85-f1cf26258cdc",
          "description" : "The UUID of the Edge Cluster to associate AVNs"
        }
      },
      "description" : "Defines the spec to create Application virtual Networks (AVNs) and its attributes"
    },
    "UpgradeSpec" : {
      "required" : [ "bundleId", "resourceType", "resourceUpgradeSpecs" ],
      "properties" : {
        "bundleId" : {
          "type" : "string",
          "description" : "Bundle ID for Upgrade"
        },
        "draftMode" : {
          "type" : "boolean",
          "description" : "Boolean to represent upgrade will be created in DRAFT mode. This allows to run prechecks before user confirm/commit the upgrade."
        },
        "nsxtUpgradeUserInputSpecs" : {
          "type" : "array",
          "description" : "Resource Upgrade Specifications for NSXT upgrade",
          "items" : {
            "$ref" : "#/definitions/NsxtUpgradeUserInputSpec"
          }
        },
        "parallelUpgrade" : {
          "type" : "boolean",
          "description" : "Boolean to represent components will be upgraded in parallel on not"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: DOMAIN, CLUSTER, UNASSIGNED_HOST",
          "description" : "Resource Type for Upgrade"
        },
        "resourceUpgradeSpecs" : {
          "type" : "array",
          "description" : "Resource Upgrade Specifications",
          "items" : {
            "$ref" : "#/definitions/ResourceUpgradeSpec"
          }
        }
      },
      "description" : "Upgrade Specification"
    },
    "Psc" : {
      "properties" : {
        "domain" : {
          "description" : "Information about the domain this PSC is part of",
          "$ref" : "#/definitions/DomainReference"
        },
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the Psc"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the Psc"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP Address of the Psc"
        },
        "isReplica" : {
          "type" : "boolean",
          "description" : "Indicates if the Psc is a replica"
        },
        "ssoDomainName" : {
          "type" : "string",
          "description" : "SSO Domain name of the Psc"
        },
        "ssoSubDomainName" : {
          "type" : "string",
          "description" : "SSO sub domain name of the Psc"
        }
      },
      "description" : "Psc representation"
    },
    "PageOfNsxTCluster" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/NsxTCluster"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "SddcSpec" : {
      "required" : [ "clusterSpec", "dnsSpec", "dvsSpecs", "hostSpecs", "networkSpecs", "ntpServers", "sddcId", "taskName", "vcenterSpec" ],
      "properties" : {
        "ceipEnabled" : {
          "type" : "boolean",
          "example" : "true",
          "description" : "Enable VCF Customer Experience Improvement Program"
        },
        "certificatesPassphrase" : {
          "type" : "string",
          "description" : "Passphrase for the vCenter / NSX certificates"
        },
        "clusterSpec" : {
          "description" : "Cluster Spec",
          "$ref" : "#/definitions/SddcClusterSpec"
        },
        "dnsSpec" : {
          "description" : "DNS Spec",
          "$ref" : "#/definitions/DnsSpec"
        },
        "dvSwitchVersion" : {
          "type" : "string",
          "example" : "One among:7.0.0, 7.0.2, 7.0.3",
          "description" : "The version of the distributed virtual switches to be used"
        },
        "dvsSpecs" : {
          "type" : "array",
          "description" : "List of Dvs Specs",
          "items" : {
            "$ref" : "#/definitions/DvsSpec"
          }
        },
        "esxLicense" : {
          "type" : "string",
          "description" : "License for the ESXi hosts"
        },
        "excludedComponents" : {
          "type" : "array",
          "example" : "One among:NSX, VSAN, EsxThumbprintValidation, CEIP, Backup",
          "description" : "Components to be excluded",
          "items" : {
            "type" : "string"
          }
        },
        "fipsEnabled" : {
          "type" : "boolean",
          "example" : "true",
          "description" : "Enable Federal Information Processing Standards"
        },
        "hostSpecs" : {
          "type" : "array",
          "description" : "List of Host Specs",
          "items" : {
            "$ref" : "#/definitions/SddcHostSpec"
          }
        },
        "managementPoolName" : {
          "type" : "string",
          "description" : "A String identifying the network pool associated with the management domain"
        },
        "networkSpecs" : {
          "type" : "array",
          "description" : "List of Network Specs",
          "items" : {
            "$ref" : "#/definitions/SddcNetworkSpec"
          }
        },
        "nsxtSpec" : {
          "description" : "NSX-T Spec",
          "$ref" : "#/definitions/SddcNsxtSpec"
        },
        "ntpServers" : {
          "type" : "array",
          "description" : "List of NTP servers",
          "items" : {
            "type" : "string"
          }
        },
        "pscSpecs" : {
          "type" : "array",
          "description" : "PSC VM spec",
          "items" : {
            "$ref" : "#/definitions/PscSpec"
          }
        },
        "remoteSiteSpec" : {
          "description" : "Remote site spec. \nThis field is deprecated and will be removed in a future release.",
          "$ref" : "#/definitions/RemoteSiteSpec"
        },
        "sddcId" : {
          "type" : "string",
          "example" : "sfo01-m01",
          "description" : "Client string that identifies an SDDC by name or instance name. Used for management domain name. Can contain only letters, numbers and the following symbols: '-'.",
          "minLength" : 3,
          "maxLength" : 20
        },
        "sddcManagerSpec" : {
          "description" : "SDDC Manager Virtual Machine spec",
          "$ref" : "#/definitions/SddcManagerSpec"
        },
        "securitySpec" : {
          "description" : "Security spec",
          "$ref" : "#/definitions/SecuritySpec"
        },
        "shouldCleanupVsan" : {
          "type" : "boolean",
          "example" : "false",
          "description" : "Flag indicating whether cleanup vSAN should be ran"
        },
        "skipEsxThumbprintValidation" : {
          "type" : "boolean",
          "description" : "Skip ESXi thumbprint validation"
        },
        "skipGatewayPingValidation" : {
          "type" : "boolean",
          "description" : "Skip VSAN / VMOTION networks gateway connectivity validation"
        },
        "taskName" : {
          "type" : "string",
          "example" : "workflowconfig/workflowspec-ems.json",
          "description" : "Name of the task to execute"
        },
        "vcenterSpec" : {
          "description" : "vCenter Spec",
          "$ref" : "#/definitions/SddcVcenterSpec"
        },
        "vsanSpec" : {
          "description" : "VSAN Spec",
          "$ref" : "#/definitions/VsanSpec"
        },
        "vxManagerSpec" : {
          "description" : "VxManager Spec",
          "$ref" : "#/definitions/VxManagerSpec"
        }
      },
      "description" : "Spec contains parameters for creating/bringing up an SDDC"
    },
    "EdgeClusterShrinkageSpec" : {
      "required" : [ "edgeNodeIds" ],
      "properties" : {
        "edgeNodeIds" : {
          "type" : "array",
          "description" : "List of VCF Edge Node ID's to be removed for shrinkage.",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "This specification contains the parameters required to shrink a NSX-T edge cluster."
    },
    "Vrops" : {
      "required" : [ "id", "loadBalancerFqdn", "loadBalancerIp", "nodes", "status", "version" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The ID of the vRealize Operations instance"
        },
        "loadBalancerFqdn" : {
          "type" : "string",
          "description" : "Fully Qualified Domain Name for the vRealize Operations load balancer "
        },
        "loadBalancerIp" : {
          "type" : "string",
          "description" : "IP for the vRealize Operations load balancer "
        },
        "nodes" : {
          "type" : "array",
          "description" : "The nodes of the vRealize Operations instance",
          "items" : {
            "$ref" : "#/definitions/VropsNode"
          }
        },
        "status" : {
          "type" : "string",
          "description" : "The state of the current product instance"
        },
        "version" : {
          "type" : "string",
          "description" : "The version of the vRealize Operations instance"
        }
      },
      "description" : "This specification contains information related to the existing vRealize Operations instance deployment"
    },
    "NsxClusterSpec" : {
      "properties" : {
        "nsxTClusterSpec" : {
          "description" : "NSX-T spec for the new cluster, required for NSX-T based workload domains, optional otherwise",
          "$ref" : "#/definitions/NsxTClusterSpec"
        }
      },
      "description" : "This specification contains NSX configuration for cluster"
    },
    "PageOfNetworkPool" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/NetworkPool"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "HealthChecks" : {
      "properties" : {
        "certificateHealth" : {
          "type" : "boolean",
          "description" : "Performs Certificate health checks."
        },
        "composabilityHealth" : {
          "type" : "boolean",
          "description" : "Performs Composability Health checks."
        },
        "computeHealth" : {
          "type" : "boolean",
          "description" : "Performs Compute Health checks."
        },
        "connectivityHealth" : {
          "type" : "boolean",
          "description" : "Performs Connectivity health checks."
        },
        "dnsHealth" : {
          "type" : "boolean",
          "description" : "Performs DNS Health checks."
        },
        "generalHealth" : {
          "type" : "boolean",
          "description" : "Performs some generic health checks."
        },
        "hardwareCompatibilityHealth" : {
          "type" : "boolean",
          "description" : "Performs HardwareCompatibilityHealth Health checks."
        },
        "ntpHealth" : {
          "type" : "boolean",
          "description" : "Performs NTP checks for components."
        },
        "passwordHealth" : {
          "type" : "boolean",
          "description" : "Performs Password Expiry checks."
        },
        "servicesHealth" : {
          "type" : "boolean",
          "description" : "Performs checks on Services health."
        },
        "storageHealth" : {
          "type" : "boolean",
          "description" : "Performs Storage Health checks."
        },
        "versionHealth" : {
          "type" : "boolean",
          "description" : "Perform version checks for VCF components."
        }
      }
    },
    "VdsSpec" : {
      "required" : [ "name" ],
      "properties" : {
        "isUsedByNsxt" : {
          "type" : "boolean",
          "description" : "Boolean to identify if the vSphere distributed switch is used by NSX-T"
        },
        "name" : {
          "type" : "string",
          "description" : "vSphere Distributed Switch name"
        },
        "niocBandwidthAllocationSpecs" : {
          "type" : "array",
          "description" : "List of Network I/O Control Bandwidth Allocations for System Traffic",
          "items" : {
            "$ref" : "#/definitions/NiocBandwidthAllocationSpec"
          }
        },
        "portGroupSpecs" : {
          "type" : "array",
          "description" : "List of portgroups to be associated with the vSphere Distributed Switch",
          "items" : {
            "$ref" : "#/definitions/PortgroupSpec"
          }
        }
      },
      "description" : "This specification contains vSphere distributed switch configurations"
    },
    "Avn" : {
      "required" : [ "gateway", "mtu", "name", "regionType", "subnet", "subnetMask" ],
      "properties" : {
        "domainName" : {
          "type" : "string",
          "example" : "rainpole.io",
          "description" : "AVN search domain"
        },
        "gateway" : {
          "type" : "string",
          "example" : "192.168.31.1",
          "description" : "Gateway of the AVN subnet"
        },
        "id" : {
          "type" : "string",
          "example" : "3f39d4a1-78d2-11e8-af85-f1cf26258cdc",
          "description" : "The UUID of the AVN"
        },
        "mtu" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1600",
          "description" : "MTU for the AVN"
        },
        "name" : {
          "type" : "string",
          "example" : "vRealize-AVN",
          "description" : "User provided name of the AVN"
        },
        "portGroupName" : {
          "type" : "string",
          "example" : "sfo-m01-seg01-pg",
          "description" : "Port group name identifying the AVN on the distributed switch"
        },
        "regionType" : {
          "type" : "string",
          "example" : "REGION_A",
          "description" : "The region type of AVN; X_REGION or REGION_A"
        },
        "routerName" : {
          "type" : "string",
          "example" : "sfo-m01-ec01-t1-gw01",
          "description" : "Name of Tier-1 Gateway AVN is connected to"
        },
        "subnet" : {
          "type" : "string",
          "example" : "192.168.31.0",
          "description" : "Subnet assigned to the AVN"
        },
        "subnetMask" : {
          "type" : "string",
          "example" : "255.255.255.0",
          "description" : "Subnet mask for the network assigned to the AVN"
        },
        "vlanId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "30",
          "description" : "VLAN ID for the VLAN backed AVN"
        }
      },
      "description" : "Defines an Application virtual Network (AVN) and its attributes"
    },
    "Domain" : {
      "properties" : {
        "capacity" : {
          "description" : "Capacity information for the workload domain",
          "$ref" : "#/definitions/Capacity"
        },
        "clusters" : {
          "type" : "array",
          "description" : "List of clusters associated with the workload domain",
          "items" : {
            "$ref" : "#/definitions/ClusterReference"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the workload domain"
        },
        "isManagementSsoDomain" : {
          "type" : "boolean",
          "description" : "Shows whether the workload domain is joined to the Management domain SSO"
        },
        "licensingInfo" : {
          "description" : "Licensing information of the workload domain",
          "$ref" : "#/definitions/LicensingInfoReference"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the workload domain"
        },
        "nsxtCluster" : {
          "description" : "NSX-T cluster associated with the workload domain",
          "$ref" : "#/definitions/NsxTClusterReference"
        },
        "ssoId" : {
          "type" : "string",
          "description" : "ID of the SSO domain associated with the workload domain"
        },
        "ssoName" : {
          "type" : "string",
          "description" : "Name of the SSO domain associated with the workload domain"
        },
        "status" : {
          "type" : "string",
          "description" : "Status of the workload domain"
        },
        "tags" : {
          "type" : "array",
          "description" : "Deprecated, this list will always be returned empty",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        },
        "type" : {
          "type" : "string",
          "description" : "Type of the workload domain"
        },
        "vcenters" : {
          "type" : "array",
          "description" : "List of vCenters associated with the workload domain",
          "items" : {
            "$ref" : "#/definitions/VcenterReference"
          }
        }
      },
      "description" : "Represents a domain"
    },
    "Certificate" : {
      "required" : [ "domain", "expirationStatus", "getCertificateError", "isInstalled", "issuedBy", "issuedTo", "keySize", "notAfter", "notBefore", "numberOfDaysToExpire", "pemEncoded", "publicKey", "publicKeyAlgorithm", "serialNumber", "signatureAlgorithm", "subject", "subjectAlternativeName", "thumbprint", "thumbprintAlgorithm", "version" ],
      "properties" : {
        "caChain" : {
          "type" : "array",
          "description" : "Certificate chain ordered from intermediate to root certificates",
          "items" : {
            "$ref" : "#/definitions/Certificate"
          }
        },
        "domain" : {
          "type" : "string",
          "example" : "3E86FBAD-8984-4D4B-992D-F0C49857572A",
          "description" : "Domain of the resource certificate"
        },
        "expirationStatus" : {
          "type" : "string",
          "example" : "One among: ACTIVE, ABOUT_TO_EXPIRE, EXPIRED",
          "description" : "Certificate expiry status"
        },
        "getCertificateError" : {
          "type" : "string",
          "example" : "Status : NOT_TRUSTED, Message : Certificate Expired",
          "description" : "Error if certificate cannot be fetched"
        },
        "isInstalled" : {
          "type" : "boolean",
          "example" : "One among: true, false",
          "description" : "Whether the certificate is installed or not"
        },
        "issuedBy" : {
          "type" : "string",
          "example" : "CN=OpenSSL CA, OU=VCF, O=VMware, L=Bengaluru, ST=Karnataka, C=IN",
          "description" : "The certificate authority that issued the certificate"
        },
        "issuedTo" : {
          "type" : "string",
          "example" : "sfo-vc01.rainpole.io",
          "description" : "To whom the certificate is issued"
        },
        "keySize" : {
          "type" : "string",
          "example" : "One among: 2048, 3072, 4096",
          "description" : "The key size of the certificate"
        },
        "notAfter" : {
          "type" : "string",
          "example" : "2021-02-02T00:00:00.000Z",
          "description" : "The timestamp after which certificate is not valid"
        },
        "notBefore" : {
          "type" : "string",
          "example" : "2020-01-01T00:00:00.000Z",
          "description" : "The timestamp before which certificate is not valid"
        },
        "numberOfDaysToExpire" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "398",
          "description" : "Number of days left for the certificate to expire"
        },
        "pemEncoded" : {
          "type" : "string",
          "example" : "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----",
          "description" : "The PEM encoded certificate content"
        },
        "publicKey" : {
          "type" : "string",
          "example" : "D6:FD:DF:33:F1:...",
          "description" : "The public key of the certificate"
        },
        "publicKeyAlgorithm" : {
          "type" : "string",
          "example" : "One among: RSA",
          "description" : "The public key algorithm of the certificate"
        },
        "serialNumber" : {
          "type" : "string",
          "example" : "46:85:19:77:36:12:67:26",
          "description" : "The serial number of the certificate"
        },
        "signatureAlgorithm" : {
          "type" : "string",
          "example" : "SHA256withRSA",
          "description" : "Algorithm used to sign the certificate"
        },
        "subject" : {
          "type" : "string",
          "example" : "CN=sfo-vc01.rainpole.io, OU=VCF, O=VMware, L=Bengaluru, ST=Karnataka, C=IN",
          "description" : "Complete distinguished name to which the certificate is issued"
        },
        "subjectAlternativeName" : {
          "type" : "array",
          "example" : "sfo-vc01.rainpole.io",
          "description" : "The alternative names to which the certificate is issued",
          "items" : {
            "type" : "string"
          }
        },
        "thumbprint" : {
          "type" : "string",
          "example" : "59:24:D5:18:04:A0:26:B0:A4:05:EA:82:60:95:82:A2:4B:F6:31:FB:81:93:01:F3:29:7D:34:9C:D3:05:39:90",
          "description" : "Thumbprint generated using certificate content"
        },
        "thumbprintAlgorithm" : {
          "type" : "string",
          "example" : "SHA-256",
          "description" : "Algorithm used to generate thumbprint"
        },
        "version" : {
          "type" : "string",
          "example" : "V3",
          "description" : "The X.509 version of the certificate"
        }
      },
      "description" : "Represents certificate and its attributes"
    },
    "RemoteSiteSpec" : {
      "properties" : {
        "pscAddress" : {
          "type" : "string",
          "description" : "Remote region vCenter address"
        },
        "sslThumbprint" : {
          "type" : "string",
          "description" : "Remote region vCenter SSL thumbprint (SHA256)"
        },
        "vcCredentials" : {
          "description" : "Remote region vCenter credentials",
          "$ref" : "#/definitions/SddcCredentials"
        }
      },
      "description" : "Spec contains parameters for Remote site products"
    },
    "HealthCheckQueryResult" : {
      "required" : [ "resultId", "status" ],
      "properties" : {
        "result" : {
          "type" : "array",
          "description" : "result",
          "items" : {
            "$ref" : "#/definitions/HealthCheckResult"
          }
        },
        "resultId" : {
          "type" : "string",
          "description" : "Result id"
        },
        "status" : {
          "type" : "string",
          "description" : "status"
        }
      },
      "description" : "HealthCheckQueryResult"
    },
    "NiocTrafficResourceAllocation" : {
      "required" : [ "limit", "reservation", "sharesInfo" ],
      "properties" : {
        "limit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "reservation" : {
          "type" : "integer",
          "format" : "int64"
        },
        "sharesInfo" : {
          "$ref" : "#/definitions/SharesInfo"
        }
      },
      "description" : "Specify network traffic allocation for a resource"
    },
    "CredentialsSpec" : {
      "required" : [ "password", "username" ],
      "properties" : {
        "password" : {
          "type" : "string",
          "description" : "Password"
        },
        "username" : {
          "type" : "string",
          "description" : "Username"
        }
      },
      "description" : "This specification contains information about credentials."
    },
    "SecuritySpec" : {
      "properties" : {
        "esxiCertsMode" : {
          "type" : "string",
          "example" : "One among:Custom, VMCA",
          "description" : "ESXi certificates mode"
        },
        "rootCaCerts" : {
          "type" : "array",
          "description" : "Root Certificate Authority certificate list",
          "items" : {
            "$ref" : "#/definitions/RootCaCerts"
          }
        }
      },
      "description" : "Spec contains security settings"
    },
    "QueryInfo" : {
      "properties" : {
        "completed" : {
          "type" : "boolean"
        },
        "errorResponse" : {
          "description" : "Error response if the query has failed",
          "$ref" : "#/definitions/Error"
        },
        "failure" : {
          "type" : "boolean"
        },
        "processing" : {
          "type" : "boolean"
        },
        "queryId" : {
          "type" : "string",
          "description" : "ID of the query to retrieve"
        },
        "status" : {
          "type" : "string",
          "description" : "Status of the query"
        }
      },
      "description" : "Represents the query info."
    },
    "System" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The identifier of the system"
        },
        "maxAllowedDomainsInSubscription" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The maximum number of domains allowed in subscription mode"
        }
      },
      "description" : "Represents a system"
    },
    "HardwareSupportPackageInfo" : {
      "required" : [ "pkg", "version" ],
      "properties" : {
        "pkg" : {
          "type" : "string",
          "description" : "Hardware support package name"
        },
        "version" : {
          "type" : "string",
          "description" : "Hardware support package version"
        }
      },
      "description" : "Hardware Support Package contains metadata regarding the package, version to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "HostQueryResponse" : {
      "properties" : {
        "queryInfo" : {
          "description" : "Query info",
          "$ref" : "#/definitions/QueryInfo"
        },
        "result" : {
          "description" : "Query result",
          "$ref" : "#/definitions/PageOfHost"
        }
      },
      "description" : "Represents a host query response."
    },
    "DatastoreSpec" : {
      "properties" : {
        "nfsDatastoreSpecs" : {
          "type" : "array",
          "description" : "Cluster storage configuration for NFS",
          "items" : {
            "$ref" : "#/definitions/NfsDatastoreSpec"
          }
        },
        "vmfsDatastoreSpec" : {
          "description" : "Cluster storage configuration for VMFS",
          "$ref" : "#/definitions/VmfsDatastoreSpec"
        },
        "vsanDatastoreSpec" : {
          "description" : "Cluster storage configuration for vSAN",
          "$ref" : "#/definitions/VsanDatastoreSpec"
        },
        "vsanRemoteDatastoreClusterSpec" : {
          "description" : "Cluster storage configuration for vSAN Remote Datastore",
          "$ref" : "#/definitions/VsanRemoteDatastoreClusterSpec"
        },
        "vvolDatastoreSpecs" : {
          "type" : "array",
          "description" : "Cluster storage configuration for VVOL",
          "items" : {
            "$ref" : "#/definitions/VvolDatastoreSpec"
          }
        }
      },
      "description" : "This specification contains cluster storage configuration"
    },
    "PageOfResourceWarning" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/ResourceWarning"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "HealthSummaryScope" : {
      "properties" : {
        "domains" : {
          "type" : "array",
          "description" : "Domains and Clusters for SOS operation.",
          "items" : {
            "$ref" : "#/definitions/Domains"
          }
        },
        "includeAllDomains" : {
          "type" : "boolean",
          "description" : "Include all domains for SOS operation."
        },
        "includeFreeHosts" : {
          "type" : "boolean",
          "description" : "Include free hosts."
        }
      }
    },
    "Cluster" : {
      "properties" : {
        "hosts" : {
          "type" : "array",
          "description" : "List of hosts associated with the cluster",
          "items" : {
            "$ref" : "#/definitions/HostReference"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the cluster"
        },
        "isDefault" : {
          "type" : "boolean",
          "description" : "Status of the cluster if default or not"
        },
        "isStretched" : {
          "type" : "boolean",
          "description" : "Status of the cluster if Stretched or not"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the cluster"
        },
        "primaryDatastoreName" : {
          "type" : "string",
          "description" : "Name of the primary datastore"
        },
        "primaryDatastoreType" : {
          "type" : "string",
          "example" : "One among: VSAN, NFS, FC, VVOL_FC, VVOL_ISCSI, VVOL_NFS, VSAN_REMOTE",
          "description" : "Storage type of the primary datastore"
        },
        "tags" : {
          "type" : "array",
          "description" : "Deprecated, this list will always be returned empty",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        },
        "vdsSpecs" : {
          "type" : "array",
          "description" : "Distributed switches to added to the cluster",
          "items" : {
            "$ref" : "#/definitions/VdsSpec"
          }
        }
      },
      "description" : "Cluster representation"
    },
    "HealthCheckTask" : {
      "required" : [ "id", "resourceStatus", "status" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Health Check task id"
        },
        "resourceStatus" : {
          "type" : "object",
          "description" : "Health Check resource status",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "status" : {
          "type" : "string",
          "description" : "Health Check task status"
        }
      },
      "description" : "HealthCheckTask"
    },
    "PageOfTagsForResource" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/TagsForResource"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "IdentityProvider" : {
      "properties" : {
        "domainNames" : {
          "type" : "array",
          "description" : "The Domains of the Identity Provider",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the Identity Provider"
        },
        "identitySources" : {
          "type" : "array",
          "description" : "The Identity Sources of the Identity Provider",
          "items" : {
            "$ref" : "#/definitions/VcIdentitySources"
          }
        },
        "ldap" : {
          "description" : "The LDAP configuration of the Identity Provider",
          "$ref" : "#/definitions/LdapInfo"
        },
        "name" : {
          "type" : "string",
          "description" : "The user-friendly name for the Identity Provider"
        },
        "oidc" : {
          "description" : "Identity management configuration when the Identity Provider is based on OIDC",
          "$ref" : "#/definitions/OidcInfo"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: ACTIVE, INACTIVE",
          "description" : "The status of the Identity Provider (set as ACTIVE for currently enabled Identity Provider)"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the Identity Provider"
        }
      },
      "description" : "Represents Identity Provider and its attributes"
    },
    "PortgroupSpec" : {
      "required" : [ "name", "transportType" ],
      "properties" : {
        "activeUplinks" : {
          "type" : "array",
          "description" : "List of active uplinks associated with portgroup. This is only supported for VxRail.",
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "Port group name"
        },
        "transportType" : {
          "type" : "string",
          "example" : "One among: VSAN, VMOTION, MANAGEMENT, PUBLIC, NFS, VREALIZE, ISCSI, EDGE_INFRA_OVERLAY_UPLINK",
          "description" : "Port group transport type"
        }
      },
      "description" : "This specification contains vCenter port group configurations"
    },
    "BundleDownloadSpec" : {
      "properties" : {
        "downloadNow" : {
          "type" : "boolean",
          "description" : "Flag for enabling Download Now. If true, scheduledTimestamp is ignored"
        },
        "scheduledTimestamp" : {
          "type" : "string",
          "description" : "Bundle Download Scheduled Time"
        }
      },
      "description" : "Bundle Download Specification. This specification gets used in the Bundle Download API"
    },
    "SkuBomDetails" : {
      "required" : [ "bom" ],
      "properties" : {
        "bom" : {
          "type" : "array",
          "description" : "Sku specific bill of materials",
          "items" : {
            "$ref" : "#/definitions/ProductVersion"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description to be shown in release page"
        },
        "name" : {
          "type" : "string",
          "description" : "SKU name"
        },
        "skuSpecificPatchBundles" : {
          "type" : "array",
          "description" : "List of patch bundles in this release",
          "items" : {
            "$ref" : "#/definitions/PatchBundle"
          }
        }
      },
      "description" : "Model for sku with their name, description, patchBundles and bom"
    },
    "PageOfVersionAliasesForBundleComponentType" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/VersionAliasesForBundleComponentType"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "HealthSummaryOption" : {
      "properties" : {
        "config" : {
          "description" : "HealthSummary config",
          "$ref" : "#/definitions/HealthSummaryConfig"
        },
        "include" : {
          "description" : "Sos Additional Reports for Health Checks.",
          "$ref" : "#/definitions/HealthSummaryIncludeItems"
        }
      }
    },
    "IpAddressPoolRangeSpec" : {
      "required" : [ "end", "start" ],
      "properties" : {
        "end" : {
          "type" : "string",
          "description" : "The last IP Address of the IP Address Range"
        },
        "start" : {
          "type" : "string",
          "description" : "The first IP Address of the IP Address Range"
        }
      },
      "description" : "This specification contains the parameters required to create an IP address range"
    },
    "PageOfSddcTask" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/SddcTask"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "CredentialsExpirationSpec" : {
      "required" : [ "resourceType" ],
      "properties" : {
        "credentialIds" : {
          "type" : "array",
          "description" : "List of credential ids",
          "items" : {
            "type" : "string"
          }
        },
        "domainName" : {
          "type" : "string",
          "description" : "Domain name"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, BACKUP",
          "description" : "Authenticated Resource Type"
        }
      },
      "description" : "This specification contains password expiration fetch request details"
    },
    "ResourceWarning" : {
      "properties" : {
        "associatedTask" : {
          "description" : "Optional associated task where the warning occurred",
          "$ref" : "#/definitions/AssociatedTask"
        },
        "context" : {
          "type" : "object",
          "description" : "Optional additional context information in a key value form",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the resource warning"
        },
        "message" : {
          "type" : "string",
          "description" : "The localized warning message"
        },
        "occurredAtTimestamp" : {
          "type" : "string",
          "description" : "Timestamp when the warning occurred"
        },
        "referenceToken" : {
          "type" : "string",
          "description" : "A reference token correlating the warning with the relevant detailed logs. Should be sent to the service provider when reporting issues"
        },
        "remediationMessage" : {
          "type" : "string",
          "description" : "The localized remediation warning message"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "ID of the associated resource"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Name of the associated resource"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: HOST, CLUSTER, DOMAIN",
          "description" : "Type of the associated resource"
        },
        "severity" : {
          "type" : "string",
          "example" : "One among: MINOR, MAJOR",
          "description" : "Severity of the warning"
        },
        "warningCode" : {
          "type" : "string",
          "description" : "The warning code"
        },
        "warningType" : {
          "type" : "string",
          "example" : "One among: SKIPPED_RESOURCE, VALIDATION, CONFIGURATION, OTHER",
          "description" : "Type of the warning"
        }
      },
      "description" : "Represents a warning associated to a specific resource"
    },
    "ClusterCompactionSpec" : {
      "properties" : {
        "force" : {
          "type" : "boolean",
          "description" : "Force removal of vSphere host"
        },
        "forceByPassingSafeMinSize" : {
          "type" : "boolean",
          "description" : "Remove dead hosts from cluster, bypassing validations. Forced removal may result in permanent data loss. Review recovery plan with VMware Support before using."
        },
        "hosts" : {
          "type" : "array",
          "description" : "List of vSphere hosts to be removed",
          "items" : {
            "$ref" : "#/definitions/HostReference"
          }
        }
      },
      "description" : "This specification contains the parameters required to remove one or more vSphere hosts from existing cluster in a workload domain"
    },
    "HealthSummary" : {
      "properties" : {
        "bundleAvailable" : {
          "type" : "string",
          "description" : "Indicate if bundle is available in file system."
        },
        "bundleName" : {
          "type" : "string",
          "description" : "Name of the Support Bundle."
        },
        "completionTimestamp" : {
          "type" : "string",
          "description" : "CompletionTimestamp."
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "CreationTimestamp."
        },
        "description" : {
          "type" : "string",
          "description" : "Name of the Operation."
        },
        "id" : {
          "type" : "string",
          "description" : "Id of the Support Bundle task."
        },
        "status" : {
          "type" : "string",
          "example" : "One among: IN_PROGRESS, PENDING, COMPLETED_WITH_SUCCESS, COMPLETED_WITH_FAILURE",
          "description" : "Health summary collection status."
        }
      }
    },
    "Encryption" : {
      "required" : [ "passphrase" ],
      "properties" : {
        "passphrase" : {
          "type" : "string",
          "description" : "Passphrase"
        }
      },
      "description" : "Restore Specification"
    },
    "IpAllocation" : {
      "required" : [ "ipAddress" ],
      "properties" : {
        "cidr" : {
          "type" : "string",
          "example" : "172.0.0.0/24",
          "description" : "Classless Inter-Domain Routing (CIDR)",
          "minLength" : 10,
          "maxLength" : 18
        },
        "gateway" : {
          "type" : "string",
          "example" : "192.168.0.1",
          "description" : "Gateway",
          "minLength" : 7,
          "maxLength" : 15
        },
        "ipAddress" : {
          "type" : "string",
          "example" : "192.168.0.123",
          "description" : "IP Address",
          "minLength" : 7,
          "maxLength" : 15
        },
        "subnet" : {
          "type" : "string",
          "example" : "255.255.255.252",
          "description" : "Subnet",
          "minLength" : 7,
          "maxLength" : 15
        }
      },
      "description" : "Defines an IP address with gateway and subnet"
    },
    "Capacity" : {
      "properties" : {
        "cpu" : {
          "description" : "Cpu metrics of the resource",
          "$ref" : "#/definitions/CpuInfo"
        },
        "memory" : {
          "description" : "Memory metrics of the resource",
          "$ref" : "#/definitions/MemoryInfo"
        },
        "storage" : {
          "description" : "Storage metrics of the resource",
          "$ref" : "#/definitions/StorageInfo"
        }
      },
      "description" : "Represents a usage and capacity information of a Resource"
    },
    "Network" : {
      "properties" : {
        "freeIps" : {
          "type" : "array",
          "description" : "List of free IPs to use",
          "items" : {
            "type" : "string"
          }
        },
        "gateway" : {
          "type" : "string",
          "description" : "Gateway for the network"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the network"
        },
        "ipPools" : {
          "type" : "array",
          "description" : "List of IP pool ranges to use",
          "items" : {
            "$ref" : "#/definitions/IpPool"
          }
        },
        "mask" : {
          "type" : "string",
          "description" : "Subnet mask for the subnet of the network"
        },
        "mtu" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "MTU of the network"
        },
        "subnet" : {
          "type" : "string",
          "description" : "Subnet associated with the network"
        },
        "type" : {
          "type" : "string",
          "description" : "Network Type of the network"
        },
        "usedIps" : {
          "type" : "array",
          "description" : "List of used IPs",
          "items" : {
            "type" : "string"
          }
        },
        "vlanId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "VLAN ID associated with the network"
        }
      },
      "description" : "Represents a network in a network pool"
    },
    "SupportBundleIncludeItems" : {
      "properties" : {
        "healthCheck" : {
          "type" : "boolean",
          "description" : "Perform SOS Health checks."
        },
        "summaryReport" : {
          "type" : "boolean",
          "description" : "Collect Vcf Summary Reports."
        }
      }
    },
    "NsxtUpgradeOptions" : {
      "properties" : {
        "isEdgeClustersUpgradeParallel" : {
          "type" : "boolean",
          "description" : "Flag for disabling/enabling parallel upgrade of edge transportnode clusters"
        },
        "isEdgeOnlyUpgrade" : {
          "type" : "boolean",
          "description" : "Flag for performing edge-only upgrade"
        },
        "isHostClustersUpgradeParallel" : {
          "type" : "boolean",
          "description" : "Flag for disabling/enabling parallel upgrade of host transportnode clusters"
        }
      },
      "description" : "NSXT Upgrade options"
    },
    "ResourceUpgradeSpec" : {
      "required" : [ "resourceId" ],
      "properties" : {
        "customISOSpec" : {
          "description" : "Custom ISO Specifications for VUM Clusters Upgrade with Custom ISO",
          "$ref" : "#/definitions/CustomISOSpec"
        },
        "enableQuickboot" : {
          "type" : "boolean",
          "description" : "Flag for requesting Quick Boot for ESXi upgrade"
        },
        "personalitySpec" : {
          "description" : "Personality Specifications for vLCM based upgrade",
          "$ref" : "#/definitions/PersonalitySpec"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "Resource ID for Upgrade"
        },
        "scheduledTimestamp" : {
          "type" : "string",
          "description" : "Upgrade Scheduled Time"
        },
        "shutdownVms" : {
          "type" : "boolean",
          "description" : "If Resource Type is UNASSIGNED_HOST, set flag for enabling shutting down VM's before Upgrade"
        },
        "toVersion" : {
          "type" : "string",
          "description" : "If Resource Type is UNASSIGNED_HOST, set the target version for Upgrade"
        },
        "upgradeNow" : {
          "type" : "boolean",
          "description" : "Flag for enabling Upgrade Now. If true, scheduledTimestamp is ignored"
        }
      },
      "description" : "Resource Upgrade Specification"
    },
    "PageOfHostCriterion" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/HostCriterion"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "VasaProviderUpdateSpec" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the VASA Provider"
        },
        "url" : {
          "type" : "string",
          "description" : "URL of the VASA Provider"
        }
      },
      "description" : "Represents a VASA Provider update specification"
    },
    "WsaProductSpec" : {
      "required" : [ "adminCredentials", "defaultAdminCredentials", "loadBalancerFqdn", "nodes", "type", "version" ],
      "properties" : {
        "adminCredentials" : {
          "description" : "The credentials of the vRealize product Admin",
          "$ref" : "#/definitions/CredentialsSpec"
        },
        "certificateChain" : {
          "type" : "string",
          "description" : "The certificate chain of the vRealize product."
        },
        "defaultAdminCredentials" : {
          "description" : "Default admin credentials for Workspace ONE Access",
          "$ref" : "#/definitions/CredentialsSpec"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the product"
        },
        "loadBalancerFqdn" : {
          "type" : "string",
          "description" : "Fully Qualified Domain Name for the vRealize product load balancer "
        },
        "nodes" : {
          "type" : "array",
          "description" : "The nodes of the vRealize product instance",
          "items" : {
            "$ref" : "#/definitions/ProductNode"
          }
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the Workspace ONE Access instance"
        },
        "version" : {
          "type" : "string",
          "description" : "The version of the vRealize product instance"
        }
      },
      "description" : "Spec contains information for a vRealize product"
    },
    "PageOfValidation" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Validation"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ResourceFunctionalities" : {
      "properties" : {
        "functionalities" : {
          "type" : "array",
          "description" : "List of functionalities associated with the resource",
          "items" : {
            "$ref" : "#/definitions/Functionality"
          }
        },
        "resourceId" : {
          "type" : "string",
          "description" : "ID of the resource"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: SYSTEM, HOST, CLUSTER, DOMAIN, EDGE_CLUSTER",
          "description" : "Type of the resource"
        }
      },
      "description" : "Defines a resource functionality specification"
    },
    "BackupResource" : {
      "required" : [ "resourceType" ],
      "properties" : {
        "resourceType" : {
          "type" : "string",
          "example" : "SDDC_MANAGER",
          "description" : "Resource type"
        }
      },
      "description" : "Element specification to trigger backup"
    },
    "MapOfstringAndListOfAsyncPatch" : {
      "type" : "object",
      "additionalProperties" : {
        "$ref" : "#/definitions/List"
      }
    },
    "FcSpec" : {
      "required" : [ "datastoreName" ],
      "properties" : {
        "datastoreName" : {
          "type" : "string",
          "description" : "Datastore name used for cluster creation"
        }
      },
      "description" : "Cluster storage configuration for VMFS on FC"
    },
    "DepotAccount" : {
      "required" : [ "password", "username" ],
      "properties" : {
        "message" : {
          "type" : "string",
          "description" : "Message explaining depot status"
        },
        "password" : {
          "type" : "string",
          "description" : "Depot Password for Access"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: DEPOT_UNKNOWN_HOST, DEPOT_NOT_AVAILABLE, DEPOT_USER_NOT_SET, DEPOT_INVALID_CREDENTIAL, UNKNOWN_FAILURE, DEPOT_CONNECTION_SUCCESSFUL",
          "description" : "Depot Status"
        },
        "username" : {
          "type" : "string",
          "description" : "Depot Username for Access"
        }
      },
      "description" : "VMware Depot Account Information"
    },
    "Package" : {
      "required" : [ "name", "version" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Package name"
        },
        "version" : {
          "type" : "string",
          "description" : "Package version"
        }
      },
      "description" : "Hardware Support Package Specification"
    },
    "DnsSpec" : {
      "required" : [ "domain", "subdomain" ],
      "properties" : {
        "domain" : {
          "type" : "string",
          "example" : "vmware.com",
          "description" : "Tenant domain"
        },
        "nameserver" : {
          "type" : "string",
          "example" : "172.0.0.4",
          "description" : "Primary nameserver to be configured for vCenter/PSC/ESXi's/NSX"
        },
        "secondaryNameserver" : {
          "type" : "string",
          "example" : "172.0.0.5",
          "description" : "Secondary nameserver to be configured for vCenter/PSC/ESXi's/NSX"
        },
        "subdomain" : {
          "type" : "string",
          "example" : "vcf.vmware.com",
          "description" : "Tenant Sub domain"
        }
      },
      "description" : "Spec contains parameters of Domain Name System"
    },
    "DatastoreMountSpec" : {
      "required" : [ "datastoreSpec" ],
      "properties" : {
        "datastoreSpec" : {
          "description" : "Cluster storage configuration; e.g. HCI Mesh remote vSAN",
          "$ref" : "#/definitions/DatastoreSpec"
        }
      },
      "description" : "Specification for datastore mount configuration."
    },
    "NsxTEdgeClusterProfileSpec" : {
      "required" : [ "bfdAllowedHop", "bfdDeclareDeadMultiple", "bfdProbeInterval", "edgeClusterProfileName", "standbyRelocationThreshold" ],
      "properties" : {
        "bfdAllowedHop" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "BFD allowed Hop"
        },
        "bfdDeclareDeadMultiple" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "BFD Declare Dead Multiple"
        },
        "bfdProbeInterval" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "BFD Probe"
        },
        "edgeClusterProfileName" : {
          "type" : "string",
          "description" : "Name for the edge cluster profile."
        },
        "standbyRelocationThreshold" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Standby Relocation Threshold"
        }
      },
      "description" : "This specification contains edge cluster profile configurations"
    },
    "VsanRemoteDatastoreSpec" : {
      "required" : [ "datastoreUuid" ],
      "properties" : {
        "datastoreUuid" : {
          "type" : "string",
          "description" : "vSAN Remote Datastore UUID"
        }
      },
      "description" : "This specification contains cluster storage configuration for vSAN"
    },
    "BackupSchedule" : {
      "required" : [ "frequency", "resourceType" ],
      "properties" : {
        "daysOfWeek" : {
          "type" : "array",
          "example" : "One among: SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY",
          "description" : "List of days of the week to schedule backup",
          "items" : {
            "type" : "string"
          }
        },
        "frequency" : {
          "type" : "string",
          "example" : "One among: WEEKLY, HOURLY",
          "description" : "Backup frequency"
        },
        "hourOfDay" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Hour of the day to schedule backup"
        },
        "minuteOfHour" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minute of the hour to schedule backup"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "SDDC_MANAGER",
          "description" : "Resource type to configure backup schedule"
        },
        "retentionPolicy" : {
          "description" : "Backup retention policy",
          "$ref" : "#/definitions/BackupRetentionPolicy"
        },
        "takeBackupOnStateChange" : {
          "type" : "boolean",
          "example" : "True",
          "description" : "Enable/disable backups on state change. If enabled, SDDC Manager will take a backup after the successful completion of an operation that changes its state. This mode requires that scheduled backups be enabled."
        },
        "takeScheduledBackups" : {
          "type" : "boolean",
          "example" : "True",
          "description" : "Enable/disable scheduled backups"
        }
      },
      "description" : "Backup schedule configuration"
    },
    "AddOnInfo" : {
      "required" : [ "name", "vendor", "version" ],
      "properties" : {
        "displayName" : {
          "type" : "string",
          "description" : "Add On display name"
        },
        "displayVersion" : {
          "type" : "string",
          "description" : "Add On display version"
        },
        "name" : {
          "type" : "string",
          "example" : "DELL-sample-Addon",
          "description" : "Component name"
        },
        "vendor" : {
          "type" : "string",
          "example" : "Dell",
          "description" : "vendor"
        },
        "version" : {
          "type" : "string",
          "example" : "2.0-1",
          "description" : "Add on software version"
        }
      },
      "description" : "AddOn contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "PageOfClusterCriterion" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/ClusterCriterion"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "SddcManagerSpec" : {
      "required" : [ "hostname", "ipAddress", "rootUserCredentials", "secondUserCredentials" ],
      "properties" : {
        "hostname" : {
          "type" : "string",
          "description" : "SDDC Manager Hostname",
          "minLength" : 3,
          "maxLength" : 63
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "SDDC Manager ip address",
          "minLength" : 7,
          "maxLength" : 15
        },
        "licenseKey" : {
          "type" : "string",
          "description" : "SDDC Manager license key"
        },
        "localUserPassword" : {
          "type" : "string",
          "description" : "The local account is a built-in admin account in VCF that can be used in emergency scenarios. The password of this account must be at least 12 characters long. It also must contain at-least 1 uppercase, 1 lowercase, 1 special character specified in braces [!%@$^#?] and 1 digit. In addition, a character cannot be repeated more than 3 times consecutively."
        },
        "netmask" : {
          "type" : "string",
          "description" : "SDDC Manager netmask"
        },
        "rootUserCredentials" : {
          "description" : "Root user credentials for the SDDC Manager VM, UserName must be root. Password needs to be a strong password with at least one alphabet and one special character and at least 8 characters in length.",
          "$ref" : "#/definitions/SddcCredentials"
        },
        "secondUserCredentials" : {
          "description" : "Second user credentials for the SDDC Manager VM, UserName must be vcf. Password needs to be a strong password with at least one alphabet and one special character and at least 8 characters in length.",
          "$ref" : "#/definitions/SddcCredentials"
        }
      },
      "description" : "Client input parameters for SDDC Manager Virtual Machine"
    },
    "VasaProvider" : {
      "required" : [ "name", "storageContainers", "url", "users" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the VASA Provider"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the VASA Provider"
        },
        "storageContainers" : {
          "type" : "array",
          "description" : "List of storage containers associated with the VASA Provider",
          "items" : {
            "$ref" : "#/definitions/StorageContainer"
          }
        },
        "url" : {
          "type" : "string",
          "description" : "URL of the VASA Provider"
        },
        "users" : {
          "type" : "array",
          "description" : "List of users associated with the VASA Provider",
          "items" : {
            "$ref" : "#/definitions/VasaUser"
          }
        }
      },
      "description" : "VASA Provider representation"
    },
    "VasaUser" : {
      "required" : [ "password", "username" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the VASA User"
        },
        "password" : {
          "type" : "string",
          "description" : "Password"
        },
        "username" : {
          "type" : "string",
          "description" : "VASA User name"
        }
      },
      "description" : "VASA User representation"
    },
    "HardwareSupportSpec" : {
      "required" : [ "name", "packageSpec" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Hardware Support Manager name"
        },
        "packageSpec" : {
          "description" : "Package for Hardware Support Managers",
          "$ref" : "#/definitions/PackageSpec"
        }
      },
      "description" : "Hardware Support Specification for Firmware Upgrade"
    },
    "SddcNetworkSpec" : {
      "required" : [ "networkType", "vlanId" ],
      "properties" : {
        "activeUplinks" : {
          "type" : "array",
          "description" : "Active Uplinks for teaming policy, specify uplink1 for failover_explicit VSAN Teaming Policy",
          "items" : {
            "type" : "string"
          }
        },
        "excludeIpAddressRanges" : {
          "type" : "array",
          "description" : "IP Addresse ranges to be excluded",
          "items" : {
            "type" : "string"
          }
        },
        "excludeIpaddresses" : {
          "type" : "array",
          "description" : "IP Addresses to be excluded",
          "items" : {
            "type" : "string"
          }
        },
        "gateway" : {
          "type" : "string",
          "description" : "Gateway",
          "minLength" : 7,
          "maxLength" : 15
        },
        "includeIpAddress" : {
          "type" : "array",
          "description" : "IP Addresses to be included",
          "items" : {
            "type" : "string"
          }
        },
        "includeIpAddressRanges" : {
          "type" : "array",
          "description" : "IP Addresse ranges to be included",
          "items" : {
            "$ref" : "#/definitions/IpRange"
          }
        },
        "mtu" : {
          "type" : "string",
          "description" : "MTU size",
          "minLength" : 4,
          "maxLength" : 4
        },
        "networkType" : {
          "type" : "string",
          "example" : "One among: VSAN, VMOTION, MANAGEMENT, VM_MANAGEMENT or any custom network type",
          "description" : "Network Type"
        },
        "portGroupKey" : {
          "type" : "string",
          "description" : "Portgroup key name"
        },
        "standbyUplinks" : {
          "type" : "array",
          "description" : "Standby Uplinks for teaming policy, specify uplink2 for failover_explicit VSAN Teaming Policy",
          "items" : {
            "type" : "string"
          }
        },
        "subnet" : {
          "type" : "string",
          "description" : "Subnet",
          "minLength" : 7,
          "maxLength" : 15
        },
        "subnetMask" : {
          "type" : "string",
          "description" : "Subnet Mask",
          "minLength" : 7,
          "maxLength" : 15
        },
        "teamingPolicy" : {
          "type" : "string",
          "example" : "One among:loadbalance_ip, loadbalance_srcmac, loadbalance_srcid, failover_explicit, loadbalance_loadbased",
          "description" : "Teaming Policy for VSAN and VMOTION network types, Default is loadbalance_loadbased"
        },
        "vlanId" : {
          "type" : "string",
          "description" : "VLAN Id",
          "minLength" : 1,
          "maxLength" : 4
        }
      },
      "description" : "Defines a network spec"
    },
    "WitnessSpec" : {
      "required" : [ "fqdn", "vsanCidr", "vsanIp" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "description" : "Management ip of the witness host"
        },
        "vsanCidr" : {
          "type" : "string",
          "description" : "vSAN subnet cidr of the witness host"
        },
        "vsanIp" : {
          "type" : "string",
          "description" : "vSAN IP of the witness host"
        }
      },
      "description" : "Spec contains the Witness host parameters that are part of each stretched cluster"
    },
    "VmNic" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "VmNic ID of vSphere host to be associated with VDS, once added to cluster"
        },
        "moveToNvds" : {
          "type" : "boolean",
          "description" : "This flag determines if the vmnic must be on N-VDS"
        },
        "uplink" : {
          "type" : "string",
          "description" : "Uplink to be associated with vmnic"
        },
        "vdsName" : {
          "type" : "string",
          "description" : "VDS name to associate with vSphere host"
        }
      },
      "description" : "This specification contains vmnic configurations for vSphere host"
    },
    "ClusterCriterion" : {
      "properties" : {
        "arguments" : {
          "type" : "object",
          "description" : "Arguments required for a particular criterion",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the criterion"
        },
        "name" : {
          "type" : "string",
          "example" : "One among: UNMANAGED_CLUSTERS_IN_VCENTER, UNMANAGED_CLUSTER_IN_VCENTER",
          "description" : "Name of the criterion"
        }
      },
      "description" : "Represents a criterion for querying the cluster"
    },
    "MapOfstringAndComponentInfo" : {
      "type" : "object",
      "additionalProperties" : {
        "$ref" : "#/definitions/ComponentInfo"
      }
    },
    "Vds" : {
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "vSphere Distributed Switch id"
        },
        "isUsedByNsxt" : {
          "type" : "boolean",
          "description" : "Boolean to identify if the vSphere distributed switch is used by NSX-T"
        },
        "mtu" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Maximum Transmission Unit"
        },
        "name" : {
          "type" : "string",
          "description" : "vSphere Distributed Switch name"
        },
        "niocBandwidthAllocations" : {
          "type" : "array",
          "description" : "List of Network I/O Control Bandwidth Allocations for System Traffic",
          "items" : {
            "$ref" : "#/definitions/NiocBandwidthAllocation"
          }
        },
        "portGroups" : {
          "type" : "array",
          "description" : "List of portgroups associated with the vSphere Distributed Switch",
          "items" : {
            "$ref" : "#/definitions/Portgroup"
          }
        },
        "version" : {
          "type" : "string",
          "description" : "vSphere Distributed Switch version"
        }
      },
      "description" : "vSphere distributed switch"
    },
    "DomainFutureRelease" : {
      "required" : [ "bom", "description", "minCompatibleVcfVersion", "product", "releaseDate", "version" ],
      "properties" : {
        "applicabilityStatus" : {
          "type" : "string",
          "example" : "One among: APPLICABLE, NOT_APPLICABLE",
          "description" : "Whether bundle is applicable or not."
        },
        "bom" : {
          "type" : "array",
          "description" : "Release bill of materials",
          "items" : {
            "$ref" : "#/definitions/ProductVersion"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Release description with all major features. "
        },
        "eol" : {
          "type" : "string",
          "description" : "Release eol information e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format"
        },
        "isApplicable" : {
          "type" : "boolean",
          "description" : "[Deprecated] Whether bundle is applicable or not."
        },
        "knownIssuesDescription" : {
          "type" : "string",
          "description" : "know issues of the release, used to display KB link for known issues of the release"
        },
        "knownIssuesUrl" : {
          "type" : "string",
          "description" : "know issues of the release, used to display description for known issues of the release"
        },
        "maxCompatibleVcfVersion" : {
          "type" : "string",
          "description" : "Maximum compatible VCF version, used to represent compatibility of SDDC Manager and VMware BOM components"
        },
        "minCompatibleVcfVersion" : {
          "type" : "string",
          "description" : "Minimum compatible VCF version, used to represent compatibility of SDDC Manager and VMware BOM components"
        },
        "notApplicableReason" : {
          "type" : "string",
          "description" : "[Deprecated] Incompatibility reason for not applicable."
        },
        "patchBundles" : {
          "type" : "array",
          "description" : "List of patch bundles in this release",
          "items" : {
            "$ref" : "#/definitions/PatchBundle"
          }
        },
        "product" : {
          "type" : "string",
          "description" : "Name of the product e.g. \"VCF\""
        },
        "reasonNotApplicable" : {
          "description" : "Incompatibility details for not applicable",
          "$ref" : "#/definitions/MessagePack"
        },
        "releaseDate" : {
          "type" : "string",
          "description" : "Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format"
        },
        "sku" : {
          "type" : "array",
          "description" : "Release sku specific patch and bill of materials",
          "items" : {
            "$ref" : "#/definitions/SkuBomDetails"
          }
        },
        "updates" : {
          "type" : "array",
          "description" : "Collection of release updates",
          "items" : {
            "$ref" : "#/definitions/ReleaseUpdate"
          }
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the release"
        }
      },
      "description" : "Model for releases with details if applicable to current domain version or not."
    },
    "VrslcmDeploymentSpec" : {
      "required" : [ "apiPassword", "fqdn", "nsxtStandaloneTier1Ip", "sshPassword" ],
      "properties" : {
        "apiPassword" : {
          "type" : "string",
          "description" : "The password for an admin API/UI user of vRealize Suite Lifecycle Manager"
        },
        "fqdn" : {
          "type" : "string",
          "example" : "vrslcm.vrack.vsphere.local",
          "description" : "Fully Qualified Domain Name"
        },
        "nsxtStandaloneTier1Ip" : {
          "type" : "string",
          "description" : "The IP to use for deploying a new standalone Tier-1 router in NSX-T. This router will be used subsequently for vrealize load balancers."
        },
        "sshPassword" : {
          "type" : "string",
          "description" : "The password for a root user of vRealize Suite Lifecycle Manager appliance"
        }
      },
      "description" : "Spec contains parameters for creating a new vRealize Suite Lifecycle Manager instance"
    },
    "QueryResponseOfobject" : {
      "properties" : {
        "queryInfo" : {
          "description" : "Query info",
          "$ref" : "#/definitions/QueryInfo"
        },
        "result" : {
          "description" : "Query result",
          "$ref" : "#/definitions/PageOfobject"
        }
      },
      "description" : "Represents the concrete query response."
    },
    "DomainIntegration" : {
      "required" : [ "status" ],
      "properties" : {
        "domainId" : {
          "type" : "string",
          "description" : "The ID of the workload domain"
        },
        "status" : {
          "type" : "string",
          "example" : "ENABLED, DISABLED, IN_PROGRESS",
          "description" : "The association status of the workload domain",
          "enum" : [ "ENABLED", "DISABLED" ]
        }
      },
      "description" : "This specification contains information related to the existing vRealize Operations instance deployment"
    },
    "DomainUpdateSpec" : {
      "properties" : {
        "clusterSpec" : {
          "description" : "Cluster Specification for the domain",
          "$ref" : "#/definitions/ClusterSpec"
        },
        "markForDeletion" : {
          "type" : "boolean",
          "description" : "Enable deletion for the domain"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the domain"
        },
        "nsxTSpec" : {
          "description" : "NSX-T Specification for the domain",
          "$ref" : "#/definitions/NsxTSpec"
        }
      },
      "description" : "Contains the parameters required to perform update operation on domain"
    },
    "MapOfstringAndListOfVxRailContext" : {
      "type" : "object",
      "additionalProperties" : {
        "$ref" : "#/definitions/List"
      }
    },
    "SystemUpdateSpec" : {
      "properties" : {
        "maxAllowedDomainsInSubscription" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "new limit of amount of domains in subscription mode"
        }
      },
      "description" : "Contains the parameters required to perform update operation on system"
    },
    "Tag" : {
      "properties" : {
        "categoryId" : {
          "type" : "string",
          "description" : "ID of the tag category"
        },
        "categoryName" : {
          "type" : "string",
          "description" : "Category name of the tag"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the tag"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the tag"
        }
      },
      "description" : "Represents a tag"
    },
    "BackupLocation" : {
      "required" : [ "password", "protocol" ],
      "properties" : {
        "directoryPath" : {
          "type" : "string",
          "description" : "Full directory path to save the backup files"
        },
        "password" : {
          "type" : "string",
          "description" : "Backup server password"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Port number for the backup server to connect"
        },
        "protocol" : {
          "type" : "string",
          "example" : "SFTP",
          "description" : "Protocol to be used for transferring files"
        },
        "server" : {
          "type" : "string",
          "description" : "IP address or FQDN  of the backup server"
        },
        "sshFingerprint" : {
          "type" : "string",
          "description" : "SSH fingerprint of the backup server"
        },
        "username" : {
          "type" : "string",
          "description" : "Password for backup server username"
        }
      },
      "description" : "Backup location to backup VCF resources"
    },
    "CredentialsValidation" : {
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Description of the validation"
        },
        "executionStatus" : {
          "type" : "string",
          "example" : "One among: COMPLETED, FAILED, IN_PROGRESS",
          "description" : "Execution status of the validation"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the validation"
        },
        "validationChecks" : {
          "type" : "array",
          "description" : "List of one or more validation checks that are performed as part of the validation",
          "items" : {
            "$ref" : "#/definitions/CredentialValidationCheck"
          }
        }
      },
      "description" : "Represents a validation with a list of one or more validation checks that are performed as part of the validation"
    },
    "HealthSummarySpec" : {
      "properties" : {
        "healthChecks" : {
          "description" : "Sos Health Checks.",
          "$ref" : "#/definitions/HealthChecks"
        },
        "options" : {
          "description" : "Sos options for support health checks.",
          "$ref" : "#/definitions/HealthSummaryOption"
        },
        "scope" : {
          "description" : "Domain and cluster under which logs should be collected.",
          "$ref" : "#/definitions/HealthSummaryScope"
        }
      }
    },
    "LicenseKeyUsage" : {
      "properties" : {
        "licenseUnit" : {
          "type" : "string",
          "example" : "One among: CPUPACKAGE, INSTANCE, VMS, CCU, PLU, DESKTOPVM, SERVERVM, VM, SERVER, CORES, CONCURRENTUSER, NAMEDUSER",
          "description" : "Units of the license key"
        },
        "remaining" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The remaining/free units of the license key"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total units of the license key"
        },
        "used" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The consumed/used units of the license key"
        }
      },
      "description" : "Defines license key usage"
    },
    "TokenPair" : {
      "properties" : {
        "accessToken" : {
          "type" : "string",
          "description" : "Bearer token that can be used to make public API calls"
        },
        "refreshToken" : {
          "description" : "Refresh token that can be used to request new access token",
          "$ref" : "#/definitions/RefreshToken"
        }
      },
      "description" : "This contains the access token and the refresh token for the user API access."
    },
    "DatastoreCriterion" : {
      "properties" : {
        "arguments" : {
          "type" : "object",
          "description" : "Arguments required for a particular criterion",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the criterion"
        },
        "name" : {
          "type" : "string",
          "example" : "One among: VSAN_REMOTE_DATASTORES",
          "description" : "Name of the criterion for querying datastores"
        }
      },
      "description" : "Represents a criterion for querying the datastores"
    },
    "AdvancedOptions" : {
      "properties" : {
        "evcMode" : {
          "type" : "string",
          "example" : "One among: INTEL_MEROM, INTEL_PENRYN, INTEL_NEALEM, INTEL_WESTMERE, INTEL_SANDYBRIDGE, INTEL_IVYBRIDGE, INTEL_HASWELL, INTEL_BROADWELL, INTEL_SKYLAKE, INTEL_CASCADELAKE, AMD_REV_E, AMD_REV_F, AMD_GREYHOUND_NO3DNOW, AMD_GREYHOUND, AMD_BULLDOZER, AMD_PILEDRIVER, AMD_STREAMROLLER, AMD_ZEN",
          "description" : "EVC mode for new cluster, if needed"
        },
        "highAvailability" : {
          "description" : "High availability settings for the cluster",
          "$ref" : "#/definitions/HighAvailability"
        }
      },
      "description" : "Advanced Options used to add Cluster"
    },
    "EdgeClusterUpdateSpec" : {
      "required" : [ "operation" ],
      "properties" : {
        "edgeClusterExpansionSpec" : {
          "description" : "Parameters required to perform edge cluster expansion, optional otherwise",
          "$ref" : "#/definitions/EdgeClusterExpansionSpec"
        },
        "edgeClusterShrinkageSpec" : {
          "description" : "Parameters required to perform edge cluster shrinkage, optional otherwise",
          "$ref" : "#/definitions/EdgeClusterShrinkageSpec"
        },
        "operation" : {
          "type" : "string",
          "example" : "One among: EXPANSION, SHRINKAGE",
          "description" : "Edge cluster operation Type."
        }
      },
      "description" : "This specification contains the parameters required to perform an update operation on an NSX-T edge cluster. The nested expansion and shrinkage specifications need to be populated in a mutually exclusive manner"
    },
    "PageOfUpgradablesClusterResource" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of Upgradables Cluster Resource elements included in this page",
          "items" : {
            "$ref" : "#/definitions/UpgradablesClusterResource"
          }
        }
      },
      "description" : "Represents a page of elements of a Upgradables Cluster Resource"
    },
    "EdgeNodeReference" : {
      "required" : [ "hostName", "id" ],
      "properties" : {
        "hostName" : {
          "type" : "string",
          "description" : "Hostname of the edge node"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the edge node"
        }
      },
      "description" : "Represents a reference to the edge node"
    },
    "BackupSpec" : {
      "required" : [ "elements" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "List of elements to be backed up",
          "items" : {
            "$ref" : "#/definitions/BackupResource"
          }
        }
      },
      "description" : "Backup Specification"
    },
    "VrealizeProductNode" : {
      "required" : [ "fqdn", "ipAddress", "type" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "example" : "vrealize.node.vrack.vsphere.local",
          "description" : "The Fully Qualified Domain Name for the vRealize node (virtual appliance)"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the node"
        },
        "ipAddress" : {
          "type" : "string",
          "example" : "10.0.0.17",
          "description" : "IP Address of vRealize product appliance"
        },
        "type" : {
          "type" : "string",
          "example" : "MASTER, REPLICA, DATA, REMOTE_COLLECTOR, WORKER",
          "description" : "The type of the vRealize product node",
          "enum" : [ "MASTER", "REPLICA", "DATA", "REMOTE_COLLECTOR", "WORKER" ]
        }
      },
      "description" : "Spec contains information for a vRealize product node"
    },
    "SourceDetails" : {
      "required" : [ "groupsBaseDn", "serverEndpoints", "usersBaseDn" ],
      "properties" : {
        "certChain" : {
          "type" : "array",
          "description" : "SSL certificate chain in base64 encoding. This field can be unset only, if all the active directory server endpoints use the LDAP (not LDAPS) protocol",
          "items" : {
            "type" : "string"
          }
        },
        "groupsBaseDn" : {
          "type" : "string",
          "description" : "Base distinguished name for groups"
        },
        "serverEndpoints" : {
          "type" : "array",
          "description" : "Active directory server endpoints. At least one active directory server endpoint must be set",
          "items" : {
            "type" : "string"
          }
        },
        "usersBaseDn" : {
          "type" : "string",
          "description" : "Base distinguished name for users"
        }
      },
      "description" : "Details of the Identity Source"
    },
    "ResourceCertificateSpec" : {
      "properties" : {
        "caCertificate" : {
          "type" : "string",
          "example" : "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----",
          "description" : "CA Certificate"
        },
        "certificateChain" : {
          "type" : "string",
          "example" : "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----",
          "description" : "Certificate Chain"
        },
        "resourceCertificate" : {
          "type" : "string",
          "example" : "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----",
          "description" : "Resource Certificate"
        },
        "resourceFqdn" : {
          "type" : "string",
          "example" : "sfo-vc01.rainpole.io",
          "description" : "Resource FQDN"
        },
        "resourceId" : {
          "type" : "string",
          "example" : "BE8A5E04-92A0-43F6-A166-AA041F4327CC",
          "description" : "Resource ID"
        }
      },
      "description" : "This specification contains resource certificate details. Either resourceId or resourceFqdn should be provided. Either certificateChain or both resourceCertificate and caCertificate should be provided."
    },
    "HardwareSupportInfo" : {
      "required" : [ "packages" ],
      "properties" : {
        "packages" : {
          "type" : "object",
          "description" : "Hardware support packages",
          "additionalProperties" : {
            "$ref" : "#/definitions/HardwareSupportPackageInfo"
          }
        }
      },
      "description" : "Hardware support contains base os, components, hardware support, addOn metadata to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "UpgradeCommitSpec" : {
      "properties" : {
        "scheduledTimestamp" : {
          "type" : "string",
          "description" : "Upgrade Scheduled Time"
        },
        "upgradeNow" : {
          "type" : "boolean",
          "description" : "Flag for enabling Upgrade Now. If true, scheduledTimestamp is ignored"
        }
      },
      "description" : "Upgrade Commit Specification"
    },
    "CpuInfo" : {
      "properties" : {
        "total" : {
          "description" : "Total value",
          "$ref" : "#/definitions/FrequencyMetric"
        },
        "used" : {
          "description" : "Used value",
          "$ref" : "#/definitions/FrequencyMetric"
        }
      },
      "description" : "Represents a cpu metric with used and total for a resource"
    },
    "VxRailCustomArrayContext" : {
      "properties" : {
        "arrayAssociationContext" : {
          "description" : "Details that holds the mapping between the custom attributes to the array item",
          "$ref" : "#/definitions/VxRailArrayAssociationContext"
        },
        "simpleAttributes" : {
          "type" : "array",
          "description" : "Collection of simple attributes that contains name, value and type for each attribute.",
          "items" : {
            "$ref" : "#/definitions/VxRailContext"
          }
        }
      },
      "description" : "Contains the details of simple/complex custom attribute on an array item object."
    },
    "BaseImageDetails" : {
      "required" : [ "displayName", "displayVersion" ],
      "properties" : {
        "displayName" : {
          "type" : "string",
          "example" : "7.0.0-0.0.30340198",
          "description" : "BaseImage display name"
        },
        "displayVersion" : {
          "type" : "string",
          "description" : "BaseImage display version"
        },
        "releaseDate" : {
          "description" : "BaseImage release date",
          "$ref" : "#/definitions/Calendar"
        }
      },
      "description" : "BaseImage contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "Resource" : {
      "required" : [ "resourceId", "type" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "example" : "sfo-vc01.rainpole.io",
          "description" : "Resource FQDN"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the resource"
        },
        "resourceId" : {
          "type" : "string",
          "example" : "BE8A5E04-92A0-43F6-A166-AA041F4327CC",
          "description" : "Resource ID"
        },
        "sans" : {
          "type" : "array",
          "example" : "sfo-vc01.rainpole.io",
          "description" : "Subject alternative name(s)",
          "items" : {
            "type" : "string"
          }
        },
        "type" : {
          "type" : "string",
          "example" : "One among: SDDC_MANAGER, PSC, VCENTER, NSX_MANAGER, NSXT_MANAGER, VRA, VRLI, VROPS, VRSLCM, VXRAIL_MANAGER",
          "description" : "Resource type"
        }
      },
      "description" : "Represents the resource in the system"
    },
    "TagAssignmentResult" : {
      "properties" : {
        "defaultErrorMessages" : {
          "type" : "array",
          "description" : "Default Error messages for Assign/Detach Tags operation",
          "items" : {
            "type" : "string"
          }
        },
        "success" : {
          "type" : "boolean",
          "description" : "Success value of Assign/Detach Tags operation"
        }
      },
      "description" : "Represents a Tag Assignment Result"
    },
    "PscSpec" : {
      "required" : [ "adminUserSsoPassword" ],
      "properties" : {
        "adminUserSsoPassword" : {
          "type" : "string",
          "description" : "Admin user sso passwordPassword needs to be a strong password with at least one Uppercase alphabet, one lowercase alphabet, one digit and one special character specified in braces [!$%^] and 8-20 characters in length,and 3 maximum identical adjacent characters!",
          "minLength" : 8,
          "maxLength" : 20
        },
        "pscId" : {
          "type" : "string",
          "description" : "PSC Name"
        },
        "pscSsoSpec" : {
          "description" : "PSC SSO Domain",
          "$ref" : "#/definitions/PscSsoSpec"
        }
      },
      "description" : "Spec contains parameters for deployment/configuration of Platform Services Controller"
    },
    "PageOfstring" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "type" : "string"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ProxyConfiguration" : {
      "properties" : {
        "host" : {
          "type" : "string",
          "example" : "10.0.0.250",
          "description" : "IP address/FQDN of proxy server"
        },
        "isConfigured" : {
          "type" : "boolean",
          "description" : "Is proxy configured"
        },
        "isEnabled" : {
          "type" : "boolean",
          "description" : "Is proxy enabled"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "3128",
          "description" : "Port of proxy server"
        }
      },
      "description" : "Proxy Configuration"
    },
    "NsxTClusterReference" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the NSX-T cluster"
        },
        "vip" : {
          "type" : "string",
          "description" : "VIP (Virtual IP Address) of the NSX-T cluster"
        },
        "vipFqdn" : {
          "type" : "string",
          "description" : "FQDN for VIP of the NSX-T cluster"
        }
      },
      "description" : "Represents an NSX-T Cluster reference"
    },
    "NetworkDetailsSpec" : {
      "required" : [ "ipAddress" ],
      "properties" : {
        "dnsName" : {
          "type" : "string",
          "description" : "DNS name of the virtual machine, e.g., vc-1.domain1.vsphere.local"
        },
        "gateway" : {
          "type" : "string",
          "description" : "IPv4 gateway the VM can use to connect to the outside world"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IPv4 address of the virtual machine"
        },
        "subnetMask" : {
          "type" : "string",
          "description" : "Subnet mask"
        }
      },
      "description" : "This specification contains network parameters required for new virtual machines being added to a workload domain"
    },
    "User" : {
      "required" : [ "name", "role", "type" ],
      "properties" : {
        "apiKey" : {
          "type" : "string",
          "description" : "The API key of the user"
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "The timestamp at which the user was created"
        },
        "domain" : {
          "type" : "string",
          "description" : "The domain of the user"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the user"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the user"
        },
        "role" : {
          "description" : "The role of the user",
          "$ref" : "#/definitions/RoleReference"
        },
        "type" : {
          "type" : "string",
          "example" : "One among: USER, GROUP, SERVICE",
          "description" : "The type of the user"
        }
      },
      "description" : "Represents user and its attributes"
    },
    "Upgradable" : {
      "properties" : {
        "bundleId" : {
          "type" : "string",
          "description" : "Bundle ID"
        },
        "bundleType" : {
          "type" : "string",
          "description" : "Bundle Type"
        },
        "resource" : {
          "description" : "Resource which is upgradable",
          "$ref" : "#/definitions/Resource"
        },
        "softwareComponents" : {
          "type" : "array",
          "description" : "Software Components which are Upgradable",
          "items" : {
            "$ref" : "#/definitions/SoftwareComponent"
          }
        },
        "status" : {
          "type" : "string",
          "description" : "Upgradable Status"
        }
      },
      "description" : "Upgradable represents the upgrade capability of resources. It contains the bundle(using what), resource(on which) and its associated resources/software components that can be upgraded."
    },
    "ClusterCreationSpec" : {
      "required" : [ "computeSpec", "domainId" ],
      "properties" : {
        "computeSpec" : {
          "description" : "Cluster specification to be added to the domain ",
          "$ref" : "#/definitions/ComputeSpec"
        },
        "domainId" : {
          "type" : "string",
          "description" : "ID of the domain to which the clusters will be added"
        }
      },
      "description" : "This specification contains the parameters required to add a cluster to an existing workload Domain"
    },
    "PersonalityUploadSpecRaw" : {
      "required" : [ "personalityInfoJSONFilePath", "personalityJSONFilePath", "personalityZIPFilePath" ],
      "properties" : {
        "personalityISOFilePath" : {
          "type" : "string",
          "description" : "Personality ISO File Path"
        },
        "personalityInfoJSONFilePath" : {
          "type" : "string",
          "description" : "Personality Info JSON File Path"
        },
        "personalityJSONFilePath" : {
          "type" : "string",
          "description" : "Personality JSON File Path"
        },
        "personalityZIPFilePath" : {
          "type" : "string",
          "description" : "Personality Zip File Path"
        }
      },
      "description" : "Personality upload specification for uploading the personality from raw files exported from avCenter cluster. This mode of uplaoding personality is useful when the source vCenter cluster isoutside the target VCF deployment."
    },
    "PrecheckSpec" : {
      "required" : [ "resources" ],
      "properties" : {
        "bundleId" : {
          "type" : "string",
          "description" : " If specified, indicate the bundle applicability in the result"
        },
        "mode" : {
          "type" : "string",
          "description" : " If specified, indicates the mode of the execution. Supported modes are UPGRADE and RECOVERY. UPGRADE is default mode. Specify RECOVERY for the Inventory Consistency Checks"
        },
        "resources" : {
          "type" : "array",
          "description" : "List of resources for Precheck supported type DOMAIN, CLUSTER",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        }
      },
      "description" : "Precheck Specification. This specification gets used in the Precheck API"
    },
    "VropsNode" : {
      "required" : [ "fqdn", "ipAddress", "status", "type" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "example" : "vrealize.node.vrack.vsphere.local",
          "description" : "The Fully Qualified Domain Name for the vRealize node (virtual appliance)"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the node"
        },
        "ipAddress" : {
          "type" : "string",
          "example" : "10.0.0.17",
          "description" : "IP Address of vRealize product appliance"
        },
        "password" : {
          "type" : "string",
          "description" : "The password for a root user of vRealize appliance"
        },
        "status" : {
          "type" : "string",
          "example" : "ACTIVE",
          "description" : "The status of the vRealize product node"
        },
        "type" : {
          "type" : "string",
          "example" : "MASTER, REPLICA, DATA, REMOTE_COLLECTOR, WORKER",
          "description" : "The type of the vRealize product node",
          "enum" : [ "MASTER", "REPLICA", "DATA", "REMOTE_COLLECTOR", "WORKER" ]
        },
        "username" : {
          "type" : "string",
          "example" : "user",
          "description" : "The username for a root user of vRealize appliance"
        }
      },
      "description" : "Spec contains information for a vRealize product node"
    },
    "ClusterExpansionSpec" : {
      "required" : [ "hostSpecs" ],
      "properties" : {
        "forceHostAdditionInPresenceofDeadHosts" : {
          "type" : "boolean",
          "description" : "Use to add host to a cluster with dead host(s). Bypasses validation of disconnected hosts and vSAN cluster health. Review recovery plan VMware Support before using. False if omitted. This property is deprecated and it has no effect when using it."
        },
        "hostSpecs" : {
          "type" : "array",
          "description" : "List of vSphere host information from the free pool to consume in the workload domain",
          "items" : {
            "$ref" : "#/definitions/HostSpec"
          }
        },
        "interRackExpansion" : {
          "type" : "boolean",
          "description" : "Is inter-rack cluster(true for L2 non-uniform and L3 : At least one of management, uplink, Edge and host TEP networks is different for hosts of the cluster, false for L2 uniform :  All hosts in cluster have identical management, uplink, Edge and host TEP networks) expansion. Required, only if Cluster contains NSX-T Edge Cluster"
        },
        "skipThumbprintValidation" : {
          "type" : "boolean",
          "description" : "Skip thumbprint validation for ESXi hosts during add host operation. \nThis property is deprecated."
        },
        "vsanNetworkSpecs" : {
          "type" : "array",
          "description" : "vSAN Network Pool Spec",
          "items" : {
            "$ref" : "#/definitions/VSANNetworkSpec"
          }
        },
        "witnessSpec" : {
          "description" : "Witness host Info",
          "$ref" : "#/definitions/WitnessSpec"
        },
        "witnessTrafficSharedWithVsanTraffic" : {
          "type" : "boolean",
          "description" : "Witness traffic to be shared with vSAN traffic"
        }
      },
      "description" : "This specification contains the parameters required to add one or more vSphere hosts to an existing cluster in a workload domain"
    },
    "RootCaCerts" : {
      "properties" : {
        "alias" : {
          "type" : "string",
          "description" : "Certificate alias"
        },
        "certChain" : {
          "type" : "array",
          "description" : "List of Base64 encoded certificates",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Spec contains Root Certificate Authority parameters"
    },
    "Release" : {
      "required" : [ "bom", "description", "minCompatibleVcfVersion", "product", "releaseDate", "version" ],
      "properties" : {
        "bom" : {
          "type" : "array",
          "description" : "Release bill of materials",
          "items" : {
            "$ref" : "#/definitions/ProductVersion"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Release description with all major features. "
        },
        "eol" : {
          "type" : "string",
          "description" : "Release eol information e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format"
        },
        "isApplicable" : {
          "type" : "boolean",
          "description" : "[Deprecated] Whether bundle is applicable or not."
        },
        "knownIssuesDescription" : {
          "type" : "string",
          "description" : "know issues of the release, used to display KB link for known issues of the release"
        },
        "knownIssuesUrl" : {
          "type" : "string",
          "description" : "know issues of the release, used to display description for known issues of the release"
        },
        "maxCompatibleVcfVersion" : {
          "type" : "string",
          "description" : "Maximum compatible VCF version, used to represent compatibility of SDDC Manager and VMware BOM components"
        },
        "minCompatibleVcfVersion" : {
          "type" : "string",
          "description" : "Minimum compatible VCF version, used to represent compatibility of SDDC Manager and VMware BOM components"
        },
        "notApplicableReason" : {
          "type" : "string",
          "description" : "[Deprecated] Incompatibility reason for not applicable."
        },
        "patchBundles" : {
          "type" : "array",
          "description" : "List of patch bundles in this release",
          "items" : {
            "$ref" : "#/definitions/PatchBundle"
          }
        },
        "product" : {
          "type" : "string",
          "description" : "Name of the product e.g. \"VCF\""
        },
        "releaseDate" : {
          "type" : "string",
          "description" : "Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format"
        },
        "sku" : {
          "type" : "array",
          "description" : "Release sku specific patch and bill of materials",
          "items" : {
            "$ref" : "#/definitions/SkuBomDetails"
          }
        },
        "updates" : {
          "type" : "array",
          "description" : "Collection of release updates",
          "items" : {
            "$ref" : "#/definitions/ReleaseUpdate"
          }
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the release"
        }
      },
      "description" : "Model for releases with their description and product version"
    },
    "Bundle" : {
      "required" : [ "downloadStatus", "type" ],
      "properties" : {
        "applicabilityOrder" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1",
          "description" : "Bundle Applicability Order"
        },
        "applicabilityStatus" : {
          "type" : "string",
          "example" : "One among: SUCCESS, IN_PROGRESS, FAILED, AVAILABLE, PENDING",
          "description" : "Bundle Applicability Status"
        },
        "components" : {
          "type" : "array",
          "description" : "Bundle Components",
          "items" : {
            "$ref" : "#/definitions/BundleComponent"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Bundle Description"
        },
        "downloadStatus" : {
          "type" : "string",
          "example" : "One among: PENDING, SCHEDULED, IN_PROGRESS, SUCCESSFUL, FAILED, RECALLED",
          "description" : "Bundle Download Status"
        },
        "id" : {
          "type" : "string",
          "description" : "Bundle ID"
        },
        "isCompliant" : {
          "type" : "boolean",
          "description" : "Is compliant with the current VCF version"
        },
        "isCumulative" : {
          "type" : "boolean",
          "description" : "Is Bundle Cumulative"
        },
        "isPartiallyUpgraded" : {
          "type" : "boolean",
          "example" : "true",
          "description" : "Is Bundle partially upgraded"
        },
        "releasedDate" : {
          "type" : "string",
          "description" : "Bundle Release Date"
        },
        "severity" : {
          "type" : "string",
          "example" : "One among: CRITICAL, IMPORTANT, MODERATE, LOW",
          "description" : "Bundle Severity"
        },
        "sizeMB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Bundle Size in MB"
        },
        "type" : {
          "type" : "string",
          "example" : "One among: SDDC_MANAGER, VMWARE_SOFTWARE, VXRAIL",
          "description" : "Bundle Type"
        },
        "vendor" : {
          "type" : "string",
          "description" : "Bundle Vendor"
        },
        "version" : {
          "type" : "string",
          "description" : "Bundle Version"
        }
      },
      "description" : "Bundle contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "HealthSummaryIncludeItems" : {
      "properties" : {
        "precheckReport" : {
          "type" : "boolean",
          "description" : "Collect VCF LCM Upgrade Pre-check Reports, Default value is False"
        },
        "summaryReport" : {
          "type" : "boolean",
          "description" : "Collect Vcf Summary Reports"
        }
      }
    },
    "PageOfVrslcm" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Vrslcm"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "AutoRotateCredentialPolicyInputSpec" : {
      "required" : [ "enableAutoRotatePolicy" ],
      "properties" : {
        "enableAutoRotatePolicy" : {
          "type" : "boolean",
          "description" : " Enable or disable  auto rotate policy"
        },
        "frequencyInDays" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Frequency in days"
        }
      },
      "description" : "Represents password auto rotate config details"
    },
    "ClusterSpec" : {
      "required" : [ "datastoreSpec", "hostSpecs", "name", "networkSpec" ],
      "properties" : {
        "advancedOptions" : {
          "description" : "Advanced options used for cluster creation",
          "$ref" : "#/definitions/AdvancedOptions"
        },
        "clusterImageId" : {
          "type" : "string",
          "description" : "ID of the Cluster Image to be used with the Cluster"
        },
        "datastoreSpec" : {
          "description" : "Cluster storage configuration; e.g. VSAN, NFS, vVol(nfs/iscsi/fc), vSAN Remote",
          "$ref" : "#/definitions/DatastoreSpec"
        },
        "hostSpecs" : {
          "type" : "array",
          "description" : "List of vSphere host information from the free pool to consume in the workload domain",
          "items" : {
            "$ref" : "#/definitions/HostSpec"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the new cluster that will be added to the specified workload domain"
        },
        "networkSpec" : {
          "description" : "Network configuration for the cluster",
          "$ref" : "#/definitions/NetworkSpec"
        },
        "skipThumbprintValidation" : {
          "type" : "boolean",
          "description" : "Skip thumbprint validation for ESXi and VxRail Manager during add cluster/host operation. \nThis property is deprecated."
        },
        "vxRailDetails" : {
          "description" : "Contains the VxRail Manager details",
          "$ref" : "#/definitions/VxRailDetails"
        }
      },
      "description" : "This specification contains the parameters required to add a cluster to a workload domain"
    },
    "PageOfTag" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ClusterProductSpec" : {
      "required" : [ "adminCredentials", "loadBalancerFqdn", "nodes", "version" ],
      "properties" : {
        "adminCredentials" : {
          "description" : "The credentials of the vRealize product Admin",
          "$ref" : "#/definitions/CredentialsSpec"
        },
        "certificateChain" : {
          "type" : "string",
          "description" : "The certificate chain of the vRealize product."
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the product"
        },
        "loadBalancerFqdn" : {
          "type" : "string",
          "description" : "Fully Qualified Domain Name for the vRealize product load balancer "
        },
        "nodes" : {
          "type" : "array",
          "description" : "The nodes of the vRealize product instance",
          "items" : {
            "$ref" : "#/definitions/ProductNode"
          }
        },
        "version" : {
          "type" : "string",
          "description" : "The version of the vRealize product instance"
        }
      },
      "description" : "Spec contains information for a vRealize product"
    },
    "PageOfUpgradable" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Upgradable"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "PageOfPersonality" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Personality"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "BackupRetentionPolicy" : {
      "required" : [ "numberOfMostRecentBackups" ],
      "properties" : {
        "numberOfDaysOfDailyBackups" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "20",
          "description" : "This attribute controls the number of daily backup files to retain, measured in days. Range 0 to 30 days. The system will filter the existing backup files, and retain one for every day for the specified number of days, counting back from the most recent backup."
        },
        "numberOfDaysOfHourlyBackups" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "10",
          "description" : "This attribute controls the number of hourly backup files to retain, measured in days. Range 0 to 14 days. The system will filter the existing backup files, and retain one for every hour for the specified number of days, counting back from the most recent backup."
        },
        "numberOfMostRecentBackups" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "15",
          "description" : "This attribute controls the number of recent backup files to retain. Range 1 to 600 backup files."
        }
      },
      "description" : "Backup retention policy for SDDC Manager comprising three attributes. Backup files are deleted if they do not satisfy any of the three attributes."
    }
  }
}