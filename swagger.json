{
  "swagger" : "2.0",
  "info" : {
    "description" : "VMware Cloud Foundation is an integrated software stack that bundles the VMware virtualization and management components like compute virtualization (vSphere), storage virtualization (vSAN), network virtualization (NSX), and cloud management (VMware Aria Suite). VCF consists of Cloud Builder - that automates the bringup of the management infrastructure and SDDC Manager - that automates the workload domain management, lifecycle and operations. This API reference guide covers APIs of both Cloud Builder and SDDC Manager",
    "version" : "5.1.0-SNAPSHOT",
    "title" : "VMware Cloud Foundation API Reference Guide",
    "termsOfService" : "http://www.vmware.com/",
    "contact" : {
      "name" : "http://www.vmware.com/"
    },
    "license" : {
      "name" : "VMware Cloud Foundation"
    }
  },
  "host" : "sfo-vcf01.rainpole.io",
  "basePath" : "/",
  "tags" : [ {
    "name" : "Network Pools",
    "description" : "APIs for managing Network Pools"
  }, {
    "name" : "CEIP",
    "description" : "APIs for managing CEIP status"
  }, {
    "name" : "ConfigReconciler",
    "description" : "APIs for managing configs"
  }, {
    "name" : "Upgrades",
    "description" : "APIs for managing Upgrades"
  }, {
    "name" : "vCenters",
    "description" : "APIs for managing vCenters"
  }, {
    "name" : "Releases",
    "description" : "APIs for managing Releases"
  }, {
    "name" : "CheckSets",
    "description" : "APIs to trigger check-set runs"
  }, {
    "name" : "Manifests",
    "description" : "APIs for managing LCM Manifests"
  }, {
    "name" : "VcfServices",
    "description" : "APIs for managing VCF Services"
  }, {
    "name" : "Clusters",
    "description" : "APIs for managing Clusters"
  }, {
    "name" : "Tokens",
    "description" : "APIs for managing Access and Refresh Token"
  }, {
    "name" : "CompatibilityMatrix",
    "description" : "Compatibility Matrix Api"
  }, {
    "name" : "Domains",
    "description" : "APIs for managing Domains"
  }, {
    "name" : "PSCs",
    "description" : "APIs for managing PSCs"
  }, {
    "name" : "WSA",
    "description" : "APIs for managing Workspace ONE Access for VMware Aria Suite Lifecycle"
  }, {
    "name" : "SddcManagers",
    "description" : "APIs for managing SDDC Managers"
  }, {
    "name" : "NSX-T Clusters",
    "description" : "APIs for managing NSX Clusters"
  }, {
    "name" : "vSANHealthCheck",
    "description" : "APIs for managing vSAN health checks"
  }, {
    "name" : "SDDC",
    "description" : "APIs for managing SDDC. The /v1/sddcs APIs are available only on the Cloud Builder appliance."
  }, {
    "name" : "Certificates",
    "description" : "APIs for managing Certificates"
  }, {
    "name" : "ProxyConfiguration",
    "description" : "APIs for managing Proxy Configuration"
  }, {
    "name" : "Suite Lifecycle",
    "description" : "APIs for managing VMware Aria Suite Lifecycle"
  }, {
    "name" : "Trusted Certificates",
    "description" : "APIs for managing Trusted Certificates"
  }, {
    "name" : "Tasks",
    "description" : "APIs for managing Tasks"
  }, {
    "name" : "System",
    "description" : "APIs for managing System"
  }, {
    "name" : "Users",
    "description" : "APIs for managing Users"
  }, {
    "name" : "Operations for Logs",
    "description" : "APIs for managing VMware Aria Operations for Logs"
  }, {
    "name" : "VersionAliasesForBundleComponentType",
    "description" : "APIs for managing Version Alias Configuration"
  }, {
    "name" : "Upgradables",
    "description" : "APIs for managing Upgradables"
  }, {
    "name" : "system",
    "description" : "APIs for managing DNS & NTP configuration"
  }, {
    "name" : "Hosts",
    "description" : "APIs for managing Hosts"
  }, {
    "name" : "DepotSettings",
    "description" : "APIs for managing Depot Settings"
  }, {
    "name" : "VasaProviders",
    "description" : "APIs for managing VASA Providers"
  }, {
    "name" : "AVNs",
    "description" : "APIs for managing Solutions Networking (Application Virtual Networks)"
  }, {
    "name" : "Target upgrade version",
    "description" : "APIs for managing domains target upgrade versions"
  }, {
    "name" : "Operations",
    "description" : "APIs for managing VMware Aria Operations"
  }, {
    "name" : "Resource Functionalities",
    "description" : "APIs for managing Resource Functionalities"
  }, {
    "name" : "BackupRestore",
    "description" : "APIs for managing Backups and Restore"
  }, {
    "name" : "Resource Warnings",
    "description" : "APIs for managing Resource Warnings"
  }, {
    "name" : "Bundles",
    "description" : "APIs for managing Bundles"
  }, {
    "name" : "NsxTEdgeClusters",
    "description" : "APIs for managing NSX Edge Clusters"
  }, {
    "name" : "FIPS mode details",
    "description" : "APIs for getting FIPS mode details"
  }, {
    "name" : "SOS",
    "description" : "APIs for managing SOS"
  }, {
    "name" : "Credentials",
    "description" : "APIs for managing Credentials"
  }, {
    "name" : "License Keys",
    "description" : "APIs for managing License Keys"
  }, {
    "name" : "Personalities",
    "description" : "APIs for managing Personalities"
  }, {
    "name" : "SystemPrechecks",
    "description" : "APIs for managing System Prechecks"
  }, {
    "name" : "Identity Providers",
    "description" : "APIs for managing Identity Providers"
  }, {
    "name" : "Identity Provider Precheck",
    "description" : "APIs for IDP precheck"
  }, {
    "name" : "Automation",
    "description" : "APIs for managing VMware Aria Automation"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/v1/avns" : {
      "get" : {
        "tags" : [ "AVNs" ],
        "summary" : "Retrieve Application Virtual Network (AVN) details",
        "description" : "Returns all matching AVNs",
        "operationId" : "getAvns",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "regionType",
          "in" : "query",
          "description" : "Pass an optional AVN region type matching either Region-A or X-Region",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the list of all matching AVNs",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Avn"
              }
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AVNs" ],
        "summary" : "Create Application Virtual Networks (AVN)",
        "operationId" : "createAvns",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "avnsCreationSpec",
          "description" : "Avn creation data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AvnsCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/avns/validations" : {
      "post" : {
        "tags" : [ "AVNs" ],
        "summary" : "Perform validation of the AvnsCreationSpec specification",
        "description" : "Returns Validation report",
        "operationId" : "validateAvnSpec",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "avnsCreationSpec",
          "description" : "Provide the spec to create the AVNs",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AvnsCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Validation of AVN Creation spec completed",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/backups/tasks" : {
      "post" : {
        "tags" : [ "BackupRestore" ],
        "summary" : "Start a backup operation",
        "operationId" : "startBackup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "backupsSpec",
          "description" : "backupsSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BackupSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/BackupTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/BackupTask"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/bundles" : {
      "get" : {
        "tags" : [ "Bundles" ],
        "summary" : "Retrieve a list of bundles",
        "description" : "Get all Bundles i.e uploaded bundles and also bundles available via depot access.",
        "operationId" : "getBundles",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "productType",
          "in" : "query",
          "description" : "The type of the product",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isCompliant",
          "in" : "query",
          "description" : "Is compliant with the current VCF version",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "bundleType",
          "in" : "query",
          "description" : "The type of the bundle",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfBundle"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Bundles" ],
        "summary" : "Upload a bundle to SDDC Manager",
        "description" : "Upload Bundle to SDDC Manager. Used when you do not have internet connectivity for downloading bundles from VMWare/VxRail to SDDC Manager. The Bundles are manually downloaded from Depot using Bundle Transfer utility",
        "operationId" : "uploadBundle",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "bundleUploadSpec",
          "description" : "Bundle Upload Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BundleUploadSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/bundles/" : {
      "patch" : {
        "tags" : [ "Bundles" ],
        "summary" : "Update the software compatability set for all bundles",
        "description" : "Update software compatibility sets for Bundles",
        "operationId" : "updateBundleCompatibilitySets",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "bundleUpdateSpec",
          "description" : "Bundle Update Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BundleUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v1/bundles/domains/{id}" : {
      "get" : {
        "tags" : [ "Bundles" ],
        "summary" : "Retrieve a list of bundles for skip upgrade by domain ID",
        "description" : "Get bundles for skip upgrade a domain from current version to target version.",
        "operationId" : "getBundlesForSkipUpgrade",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "targetVersion",
          "in" : "query",
          "description" : "[Deprecated] Target domain VCF version",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfBundle"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Domain not found with given ID.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/bundles/{id}" : {
      "get" : {
        "tags" : [ "Bundles" ],
        "summary" : "Retrieve a bundle by its ID",
        "description" : "Get a Bundle",
        "operationId" : "getBundle",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Bundle ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Bundle"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Bundle Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Bundles" ],
        "summary" : "Start immediate download or schedule download of a bundle by ID",
        "description" : "Update a Bundle for scheduling/triggering download. Only one download can triggered for a Bundle.",
        "operationId" : "startBundleDownloadByID",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Bundle ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "bundleUpdateSpec",
          "description" : "Bundle Update Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BundleUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/certificate-authorities" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Retrieve a list of Certificate Authorities",
        "description" : "Get certificate authorities information",
        "operationId" : "getCertificateAuthorities",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfCertificateAuthority"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Certificates" ],
        "summary" : "Configure integration with a Certificate Authority",
        "description" : "Creates a certificate authority. This is required to generate signed certificates by supporting CAs.",
        "operationId" : "createCertificateAuthority",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "certificateAuthorityCreationSpec",
          "description" : "certificateAuthorityCreationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CertificateAuthorityCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Certificates" ],
        "summary" : "Update the configuration of a Certificate Authority",
        "description" : "Update the configuration of a Certificate Authority",
        "operationId" : "configureCertificateAuthority",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "certificateAuthoritySpec",
          "description" : "certificateAuthoritySpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CertificateAuthorityCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/certificate-authorities/{id}" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Retrive the details of a Certificate Authority by ID",
        "description" : "Get certificate authority information",
        "operationId" : "getCertificateAuthorityById",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The CA type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CertificateAuthority"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Certificates" ],
        "summary" : "Remove the configuration of a Certificate Authority",
        "description" : "Deletes CA configuration file",
        "operationId" : "removeCertificateAuthority",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The CA type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Retrieve a list of clusters",
        "operationId" : "getClusters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "isStretched",
          "in" : "query",
          "description" : "isStretched",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfCluster"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Create a cluster and add to an existing domain",
        "operationId" : "createCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "clusterCreationSpec",
          "description" : "Cluster Creation Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClusterCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/tags" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get tags assigned to clusters",
        "operationId" : "getTagsAssignedToClusters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTagsForResource"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/validations" : {
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Perform validation of the ClusterCreationSpec specification",
        "operationId" : "validateClusterCreationSpec",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "clusterCreationSpec",
          "description" : "Cluster creation specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClusterCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{clusterId}/datastores/queries/{queryId}" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get Datastore query response",
        "operationId" : "getDatastoreQueryResponse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "description" : "Query ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DatastoreQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Query Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{clusterId}/datastores/validation" : {
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Perform validation of the DatastoreMountSpec specification",
        "operationId" : "validateVsanRemoteDatastoreSpec",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "datastoreMountSpec",
          "description" : "Datastore Mount Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DatastoreMountSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{clusterId}/hosts/queries/{queryId}" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get query response",
        "operationId" : "getHostQueryResponse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "description" : "Query ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HostQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Query Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{clusterId}/vdses" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get the list of VDSes of a cluster.",
        "operationId" : "getVdses",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Vds"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Cluster Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Import Vds to inventory for the given cluster",
        "operationId" : "importVdsToInventory",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "importVdsSpec",
          "description" : "Import Vds Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ImportVdsSpec"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Task"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get a cluster by its ID",
        "operationId" : "getCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Cluster"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Cluster not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Clusters" ],
        "summary" : "Delete a cluster from a domain if it has been previously initialized for deletion",
        "operationId" : "deleteCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Clusters" ],
        "summary" : "Update a Cluster by adding or removing Hosts, Stretching a standard vSAN cluster, Unstretching a stretched cluster or by marking for deletion",
        "operationId" : "updateCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "clusterUpdateSpec",
          "description" : "Cluster Update Data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClusterUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/datastores" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get the list of all datastores associated with the cluster.",
        "operationId" : "getClusterDatastores",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Datastore"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Cluster Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Mount a datastore to a cluster",
        "operationId" : "addDatastoreToCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "datastoreMountSpec",
          "description" : "Datastore Mount Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DatastoreMountSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/datastores/criteria" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get all datastore criteria",
        "operationId" : "getDatastoresCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfDatastoreCriterion"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/datastores/criteria/{name}" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get a criterion to query for datastore",
        "operationId" : "getDatastoreCriterion",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Criteria Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DatastoreCriterion"
            }
          },
          "404" : {
            "description" : "Criterion Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/datastores/queries" : {
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Post a datastore query",
        "operationId" : "postDatastoreQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "dsCriterion",
          "description" : "dsCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DatastoreCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DatastoreQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/datastores/{datastoreId}" : {
      "delete" : {
        "tags" : [ "Clusters" ],
        "summary" : "Unmount a datastore from a cluster",
        "operationId" : "removeDatastoreFromCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "datastoreId",
          "in" : "path",
          "description" : "Datastore ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/hosts/criteria" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get all host criteria",
        "operationId" : "getHostCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfHostCriterion"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/hosts/criteria/{name}" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get a criterion to query for host",
        "operationId" : "getHostCriterion",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Criteria Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HostCriterion"
            }
          },
          "404" : {
            "description" : "Criterion Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/hosts/queries" : {
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Post a host query",
        "operationId" : "postHostQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "hostCriterion",
          "description" : "hostCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HostCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HostQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/tags" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get tags assigned to a cluster by its ID",
        "operationId" : "getTagsAssignedToCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTag"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Clusters" ],
        "summary" : "Assign Tags to Cluster",
        "operationId" : "assignTagsToCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "tagsSpec",
          "description" : "Tags Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagsSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagAssignmentResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Clusters" ],
        "summary" : "Remove tags from a cluster",
        "operationId" : "removeTagsFromCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "tagsSpec",
          "description" : "Tags Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagsSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagAssignmentResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/tags/assignable-tags" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get tags assignable to a cluster",
        "operationId" : "getTagAssignableForCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTag"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/tags/tag-manager" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get Cluster Tag Manager Url",
        "operationId" : "getClusterTagManagerUrl",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagManagerModel"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/validations" : {
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Perform validation of the ClusterUpdateSpec specification",
        "operationId" : "validateClusterUpdateSpec",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "clusterUpdateSpec",
          "description" : "clusterUpdateSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClusterUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/network/criteria" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get cluster network configuration criteria",
        "operationId" : "getClusterNetworkConfigurationCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfClusterNetworkConfigurationCriterion"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/network/queries" : {
      "post" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get cluster network configuration",
        "operationId" : "getClusterNetworkConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "clusterNetworkConfigurationCriterion",
          "description" : "clusterNetworkConfigurationCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClusterNetworkConfigurationCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ClusterNetworkConfigurationQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/clusters/{id}/network/queries/{queryId}" : {
      "get" : {
        "tags" : [ "Clusters" ],
        "summary" : "Get cluster network configuration query response",
        "operationId" : "getClusterNetworkConfigurationQueryResponse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "description" : "Query ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ClusterNetworkConfigurationQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/compatibility-matrices" : {
      "get" : {
        "tags" : [ "CompatibilityMatrix" ],
        "summary" : "Get Compatibility Matrices",
        "description" : "Get Compatibility Matrices",
        "operationId" : "getCompatibilityMatrices",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/PageOfCompatibilityMatrix"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Resource Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "CompatibilityMatrix" ],
        "summary" : "Update CompatibilityMatrix for a source with JSON file",
        "description" : "Update CompatibilityMatrix content for a source using a JSON file",
        "operationId" : "updateCompatibilityMatrix",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "compatibilityMatrixSource",
          "in" : "query",
          "description" : "Compatibility Matrix Source (VMWARE_COMPAT, VXRAIL_COMPAT)",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "compatibilityMatrixContent",
          "in" : "formData",
          "description" : "Compatibility Matrix Content in JSON File format",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/compatibility-matrices/{compatibilityMatrixSource}" : {
      "get" : {
        "tags" : [ "CompatibilityMatrix" ],
        "summary" : "Get Compatibility Matrix",
        "description" : "Get Compatibility Matrix",
        "operationId" : "getCompatibilityMatrix",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "compatibilityMatrixSource",
          "in" : "path",
          "description" : "compatibilityMatrixSource of compatibility data",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/CompatibilityMatrix"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Resource Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/compatibility-matrices/{compatibilityMatrixSource}/content" : {
      "get" : {
        "tags" : [ "CompatibilityMatrix" ],
        "summary" : "Get Compatibility Matrix content",
        "description" : "Get Compatibility Matrix content",
        "operationId" : "getCompatibilityMatrixContent",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "compatibilityMatrixSource",
          "in" : "path",
          "description" : "compatibilityMatrixSource of compatibility data",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "string"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Resource Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/compatibility-matrices/{compatibilityMatrixSource}/metadata" : {
      "get" : {
        "tags" : [ "CompatibilityMatrix" ],
        "summary" : "Get Compatibility Matrix Metadata",
        "description" : "Get Compatibility Matrix Metadata",
        "operationId" : "getCompatibilityMatrixMetadata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "compatibilityMatrixSource",
          "in" : "path",
          "description" : "compatibilityMatrixSource of compatibility data",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/CompatibilityMatrixMetadata"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Resource Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/config-drift-reconciliations" : {
      "post" : {
        "tags" : [ "ConfigReconciler" ],
        "summary" : "Reconcile configs",
        "description" : "For selective reconciliation, provide a config spec.",
        "operationId" : "reconcileConfigs",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "configDriftApplySpec",
          "description" : "configDriftApplySpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ConfigDriftApplySpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/config-drift-reconciliations/{taskId}" : {
      "get" : {
        "tags" : [ "ConfigReconciler" ],
        "summary" : "Get config reconciliation task associated with the given task Id",
        "description" : "Get config reconciliation task associated with the given task Id",
        "operationId" : "getReconciliationTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "description" : "Task Id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Reconciliation task not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/config-drifts" : {
      "get" : {
        "tags" : [ "ConfigReconciler" ],
        "summary" : "Get configs associated with the given criteria",
        "description" : "Get configs associated with the given criteria, all if no criteria is provided",
        "operationId" : "getConfigs",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "query",
          "description" : "Resource Id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceType",
          "in" : "query",
          "description" : "Resource Type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "configId",
          "in" : "query",
          "description" : "Config Id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "driftType",
          "in" : "query",
          "description" : "Drift Type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Size of the page to retrieve. Default page size is 10. Optional",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to retrieve. Default page 0 will retrieve all elements. Optional",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfConfigDriftSpec"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Internal Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials" : {
      "get" : {
        "tags" : [ "Credentials" ],
        "summary" : "Retrieve a list of credentials",
        "description" : "Retrieve a list of credentials",
        "operationId" : "getCredentials",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceName",
          "in" : "query",
          "description" : "The name of the resource",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceIp",
          "in" : "query",
          "description" : "The IP address of the resource",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceType",
          "in" : "query",
          "description" : "The type of the resource. One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, BACKUP",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "domainName",
          "in" : "query",
          "description" : "The name of the domain to which the resource belongs to (may be null in case there is no associated domain)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number (must be a positive number), starts with 0",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The page size (must be a positive number, 0 as page size returns all records in one page",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountType",
          "in" : "query",
          "description" : "Type of the account that needs to be fetched by filtering",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfCredential"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Credentials" ],
        "summary" : "Update or rotate passwords for a list of resources",
        "description" : "Update passwords for given list of resources by supplying new passwords or rotate the passwords using system generated passwords",
        "operationId" : "updateOrRotatePasswords",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "credentialsUpdateSpec",
          "description" : "credentialsUpdateSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CredentialsUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials/expirations" : {
      "post" : {
        "tags" : [ "Credentials" ],
        "summary" : "Fetch expiration details of passwords for a list of credentials",
        "description" : "Fetch expiration details of passwords for a list of credentials",
        "operationId" : "getPasswordExpiration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "credentialsExpirationSpec",
          "description" : "credentialsExpirationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CredentialsExpirationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CredentialsExpiration"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Too many requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials/expirations/{id}" : {
      "get" : {
        "tags" : [ "Credentials" ],
        "summary" : "Retrive a password expiration task by ID",
        "description" : "Retrive a password expiration task by ID",
        "operationId" : "getPasswordExpirationByTaskID",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The expiration fetch workflow ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CredentialsValidation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials/tasks" : {
      "get" : {
        "tags" : [ "Credentials" ],
        "summary" : "Retrieve a list of credential tasks",
        "description" : "Retrieve a list of credential tasks",
        "operationId" : "getCredentialsTasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of elements to be returned in the result",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfCredentialsTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials/tasks/{id}" : {
      "get" : {
        "tags" : [ "Credentials" ],
        "summary" : "Retrieve a credential task by ID",
        "description" : "Retrieve a credential task by ID",
        "operationId" : "getCredentialsTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the credentials task",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CredentialsTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Credentials" ],
        "summary" : "Cancel a failed credential task by its ID",
        "description" : "Cancel a failed credential task by its ID",
        "operationId" : "cancelCredentialsTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Task ID of the failed operation required to be cancelled",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Credentials" ],
        "summary" : "Retry a failed credentials task for a given ID",
        "description" : "Retry a failed credentials task for a given ID",
        "operationId" : "retryCredentialsTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "credentialsUpdateSpec",
          "description" : "credentialsUpdateSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CredentialsUpdateSpec"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Task ID of the failed operation that is to be retried",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials/tasks/{id}/resource-credentials" : {
      "get" : {
        "tags" : [ "Credentials" ],
        "summary" : "Retriece a credential taks by resource ID",
        "description" : "Retriece a credential taks by resource ID",
        "operationId" : "getCredentialTaskByResourceID",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the credentials task",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ResourceCredentials"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials/tasks/{id}/subtasks/{subtaskId}" : {
      "get" : {
        "tags" : [ "Credentials" ],
        "summary" : "Retrieve a credential sub task by its ID",
        "description" : "Retrieve a credential sub task by its ID",
        "operationId" : "getCredentialsSubTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the credentials task",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subtaskId",
          "in" : "path",
          "description" : "The ID of the credentials sub-task",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CredentialsTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/credentials/{id}" : {
      "get" : {
        "tags" : [ "Credentials" ],
        "summary" : "Retrieve a credential by its ID",
        "description" : "Retrieve a credential by its ID",
        "operationId" : "getCredential",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the credential",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Credential"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Retrieve a list of domains",
        "operationId" : "getDomains",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "The type of the domain",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfDomain"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "Create a domain",
        "operationId" : "createDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "domainCreationSpec",
          "description" : "Domain creation data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DomainCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/tags" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get tags assigned to all domains",
        "operationId" : "getTagsAssignedToDomains",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTagsForResource"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/validations" : {
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "Perform validation of the DomainCreationSpec specification",
        "operationId" : "validateDomainCreationSpec",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "domainCreationSpec",
          "description" : "Domain Creation Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DomainCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/clusters/criteria" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get all cluster criteria",
        "operationId" : "getClusterCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfClusterCriterion"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/clusters/criteria/{name}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get a criterion to query for cluster",
        "operationId" : "getClusterCriterion",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Criteria Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ClusterCriterion"
            }
          },
          "404" : {
            "description" : "Criterion Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/clusters/queries" : {
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "Post clusters query",
        "operationId" : "postClustersQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "clusterCriterion",
          "description" : "clusterCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClusterCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ClusterQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/clusters/queries/{queryId}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get clusters query response",
        "operationId" : "getClustersQueryResponse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "description" : "Query ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ClusterQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Query Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/clusters/{clusterName}/queries" : {
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "Post a cluster query",
        "operationId" : "postClusterQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "clusterName",
          "in" : "path",
          "description" : "Cluster Name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "clusterCriterion",
          "description" : "clusterCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClusterCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ClusterQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/clusters/{clusterName}/queries/{queryId}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get cluster query response",
        "operationId" : "getClusterQueryResponse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "clusterName",
          "in" : "path",
          "description" : "Cluster Name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "description" : "Query ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ClusterQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Query Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/datastores/criteria" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get all datastore criteria",
        "operationId" : "getDatastoresCriteria_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfDatastoreCriterion"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/datastores/criteria/{name}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get a criterion to query for datastore",
        "operationId" : "getDatastoreCriterion_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Criteria Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DatastoreCriterion"
            }
          },
          "404" : {
            "description" : "Criterion Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/datastores/queries" : {
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "Post a datastore query",
        "operationId" : "postDatastoreQuery_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "dsCriterion",
          "description" : "dsCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DatastoreCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DatastoreQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/datastores/queries/{queryId}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get Datastore query response",
        "operationId" : "getDatastoreQueryResponse_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "description" : "Query ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DatastoreQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Query Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/health-checks" : {
      "get" : {
        "tags" : [ "vSANHealthCheck" ],
        "summary" : "Retrieve vSAN Health Check status for a domain by its ID",
        "description" : "Get vSAN health check status for all cluster on the domain",
        "operationId" : "getVsanHealthCheckByDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Status of health check to filter by",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/HealthCheckQueryResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/HealthCheckQueryResult"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "vSANHealthCheck" ],
        "summary" : "Update the vSAN Health Check status for a domain",
        "description" : "Update vSAN health check status for domain",
        "operationId" : "updateVsanHealthCheckByDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "healthCheckUpdateSpec",
          "description" : "Health check update spec",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/HealthCheckSpec"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/HealthCheckTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/HealthCheckTask"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/health-checks/queries/{queryId}" : {
      "get" : {
        "tags" : [ "vSANHealthCheck" ],
        "summary" : "Retrieve vSAN Health Check status for a domain and query ID",
        "description" : "Get vSAN health check status for a given Query Id",
        "operationId" : "getVsanHealthCheckByQueryID",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "description" : "Query ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HealthCheckQueryResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{domainId}/health-checks/tasks/{taskId}" : {
      "get" : {
        "tags" : [ "vSANHealthCheck" ],
        "summary" : "Retrieve a vSAN Health Check by task ID",
        "description" : "Get vSAN health check update task status for a given task Id",
        "operationId" : "getVsanHealthCheckByTaskID",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "taskId",
          "in" : "path",
          "description" : "Health check task id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HealthCheckTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get a domain by its ID",
        "operationId" : "getDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Domain"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Domain not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Domains" ],
        "summary" : "Remove a domain if it has been previously initialized for deletion",
        "operationId" : "deleteDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Domains" ],
        "summary" : "Update a Domain",
        "operationId" : "updateDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "domainUpdateSpec",
          "description" : "Domain Update Data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DomainUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/certificates" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Retrieve the latest generated certificates for a domain by its ID",
        "description" : "Get latest generated certificate(s) in a domain.",
        "operationId" : "getDomainCertificates",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfCertificate"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Certificates" ],
        "summary" : "Request the creation of signed certificate for resources of a domain",
        "description" : "Generate certificate(s) for the selected resource(s) in a domain. CA must be configured and CSR must be generated beforehand.",
        "operationId" : "generateCertificates",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "certificateGenerationSpec",
          "description" : "certificateGenerationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CertificatesGenerationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Certificates" ],
        "summary" : "Replace certificate(s) for the selected resource(s) in a domain",
        "description" : "Replace certificate(s) for the selected resource(s) in a domain",
        "operationId" : "replaceCertificates",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "certificateOperationSpec",
          "description" : "certificateOperationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CertificateOperationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v1/domains/{id}/certificates/uploads" : {
      "put" : {
        "tags" : [ "Certificates" ],
        "summary" : "Import certificate(s) to the certificate store for a domain",
        "description" : "Upload certificates to the certificate store",
        "operationId" : "uploadCertificates",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "file",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad request.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v1/domains/{id}/csrs" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Request available CSR(s) in JSON format for a domain",
        "description" : "Get available CSR(s) in json format",
        "operationId" : "getCSRs",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfCsr"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Certificates" ],
        "summary" : "Request the creation of certificate signing request (CSR) files for resources of a domain",
        "description" : "Generate CSR(s) for the selected resource(s) in the domain.\n\n*Warning:*\n_Avoid using wildcard certificates. Instead, use subdomain-specific certificates that are rotated often. A compromised wildcard certificate can lead to security repercussions_",
        "operationId" : "generatesCSRs",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "csrsGenerationSpec",
          "description" : "csrsGenerationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CsrsGenerationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/csrs/downloads" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Request the download of CSR(s) for a domain in tar.gz format",
        "description" : "Download available CSR(s) in tar.gz format",
        "operationId" : "downloadCSR",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v1/domains/{id}/endpoints" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Retrieve a list of endpoints or URLs for a domain by its ID",
        "operationId" : "getDomainEndpoints",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfEndpoint"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Domain not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/resource-certificates" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Retrieve the certificate details for all resources in a domain",
        "description" : "View detailed metadata about the certificate(s) of all the resources in a domain",
        "operationId" : "getCertificatesByDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID or Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfCertificate"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Certificates" ],
        "summary" : "Replace the certificate(s) for selected resources of a domain",
        "description" : "Replace resource certificates",
        "operationId" : "replaceResourceCertificates",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "resourceCertificateSpecs",
          "description" : "resourceCertificateSpecs",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ResourceCertificateSpec"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/resource-certificates/validations" : {
      "put" : {
        "tags" : [ "Certificates" ],
        "summary" : "Perform validation of the ResourceCertificateSpec specification",
        "description" : "Validate resource certificates",
        "operationId" : "validateResourceCertificates",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "resourceCertificateSpecs",
          "description" : "resourceCertificateSpecs",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ResourceCertificateSpec"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CertificateValidationTask"
            }
          },
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/CertificateValidationTask"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/resource-certificates/validations/{validationId}" : {
      "get" : {
        "tags" : [ "Certificates" ],
        "summary" : "Retrieve the results of a certificate validation by its ID",
        "description" : "Get the resource certificate validation result",
        "operationId" : "getResourceCertificatesValidationByID",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "validationId",
          "in" : "path",
          "description" : "Validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CertificateValidationTask"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/tags" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get tags assigned to a domain",
        "operationId" : "getTagsAssignedToDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTag"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Domains" ],
        "summary" : "Assign tags to a domain",
        "operationId" : "assignTagsToDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "tagsSpec",
          "description" : "Tags Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagsSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagAssignmentResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Domains" ],
        "summary" : "remove Tags From Domain",
        "operationId" : "removeTagsFromDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "tagsSpec",
          "description" : "Tags Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagsSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagAssignmentResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/tags/assignable-tags" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get tags assignable to a domain",
        "operationId" : "getAssignableTagsForDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTag"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/domains/{id}/tags/tag-manager" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get Domain Tag Manager Url",
        "operationId" : "getDomainTagManagerUrl",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagManagerModel"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/edge-clusters" : {
      "get" : {
        "tags" : [ "NsxTEdgeClusters" ],
        "summary" : "Retrieve a list of NSX Edge Clusters",
        "operationId" : "getEdgeClusters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "query",
          "description" : "Pass an optional vSphere Cluster ID to fetch edge clusters associated with the vSphere Cluster",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfEdgeCluster"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "NsxTEdgeClusters" ],
        "summary" : "Create an NSX Edge Cluster",
        "operationId" : "createEdgeCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "edgeCreationSpec",
          "description" : "NSX Edge cluster creation data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EdgeClusterCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/edge-clusters/validations" : {
      "post" : {
        "tags" : [ "NsxTEdgeClusters" ],
        "summary" : "Perform validiation of the EdgeClusterCreationSpec specification",
        "operationId" : "validateEdgeClusterCreationSpec",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "edgeCreationSpec",
          "description" : "NSX Edge cluster creation data to be validated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EdgeClusterCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/edge-clusters/validations/{id}" : {
      "get" : {
        "tags" : [ "NsxTEdgeClusters" ],
        "summary" : "Retrieve the results of a NSX Edge Cluster validation by its ID",
        "operationId" : "getEdgeClusterValidationByID",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/edge-clusters/{id}" : {
      "get" : {
        "tags" : [ "NsxTEdgeClusters" ],
        "summary" : "Retrieve an NSX Edge Cluster by its ID",
        "operationId" : "getEdgeCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Edge Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/EdgeCluster"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Edge Cluster not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "NsxTEdgeClusters" ],
        "summary" : "Expand or shrink an NSX Edge Cluster",
        "operationId" : "updateEdgeCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "edgeClusterUpdateSpec",
          "description" : "NSX Edge cluster update specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EdgeClusterUpdateSpec"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Edge Cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "501" : {
            "description" : "Not Implemented",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/edge-clusters/{id}/validations" : {
      "post" : {
        "tags" : [ "NsxTEdgeClusters" ],
        "summary" : "Perform validation of the EdgeClusterUpdateSpec specification",
        "operationId" : "validateEdgeClusterUpdateSpec",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "edgeClusterUpdateSpec",
          "description" : "NSX Edge Cluster Update spec to be validated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EdgeClusterUpdateSpec"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "NSX Edge cluster id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get all hosts",
        "operationId" : "getHosts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status of the Host.One among: ASSIGNED, UNASSIGNED_USEABLE, UNASSIGNED_UNUSEABLE",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "domainId",
          "in" : "query",
          "description" : "ID of the Domain",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clusterId",
          "in" : "query",
          "description" : "ID of the Cluster",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "networkpoolId",
          "in" : "query",
          "description" : "ID of the Network pool",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storageType",
          "in" : "query",
          "description" : "Type of the Storage.VMFS_FC",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "datastoreName",
          "in" : "query",
          "description" : "Name of the datastore",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfHost"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Hosts" ],
        "summary" : "Commission the Hosts",
        "operationId" : "commissionHosts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "hostCommissionSpecs",
          "description" : "hostCommissionSpecs",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/HostCommissionSpec"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Hosts" ],
        "summary" : "Decommission the Hosts",
        "operationId" : "decommissionHosts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "hostDecommissionSpecs",
          "description" : "hostDecommissionSpecs",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/HostDecommissionSpec"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/hosts/criteria" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get all criteria",
        "operationId" : "getCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfHostCriterion"
            }
          }
        }
      }
    },
    "/v1/hosts/criteria/{name}" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get a criterion",
        "operationId" : "getCriterion",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HostCriterion"
            }
          },
          "404" : {
            "description" : "Criterion Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts/queries" : {
      "post" : {
        "tags" : [ "Hosts" ],
        "summary" : "Post a query",
        "operationId" : "postQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "hostCriterion",
          "description" : "hostCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HostCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HostQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts/queries/{id}" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get query response",
        "operationId" : "getHostQueryResponse_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HostQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Query Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts/tags" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get Tags assigned to Hosts",
        "operationId" : "getTagsAssignedToHosts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTagsForResource"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts/validations" : {
      "post" : {
        "tags" : [ "Hosts" ],
        "summary" : "Perform validation of the  HostCommissionSpec specification",
        "operationId" : "validateHostCommissionSpec",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "hostCommissionSpecs",
          "description" : "hostCommissionSpecs",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/HostCommissionSpec"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/hosts/validations/{id}" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Retrieve the results of a host commission validation by its ID",
        "operationId" : "getHostCommissionValidationByID",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/hosts/{id}" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get a host by its ID",
        "operationId" : "getHost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Host"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Host Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts/{id}/tags" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get Tags assigned to Host",
        "operationId" : "getTagsAssignedToHost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Host ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTag"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Hosts" ],
        "summary" : "Assign tags to a host",
        "operationId" : "assignTagsToHost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Host ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "tagsSpec",
          "description" : "Tags Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagsSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagAssignmentResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Hosts" ],
        "summary" : "Remove Tags From Host",
        "operationId" : "removeTagsFromHost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Host ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "tagsSpec",
          "description" : "Tags Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagsSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagAssignmentResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts/{id}/tags/assignable-tags" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get tags assignable to a host",
        "operationId" : "getAssignableTagForHost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Host ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfTag"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/hosts/{id}/tags/tag-manager" : {
      "get" : {
        "tags" : [ "Hosts" ],
        "summary" : "Get Host Tag Manager Url",
        "operationId" : "getHostTagManagerUrl",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Host ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/TagManagerModel"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/identity-broker/prechecks" : {
      "get" : {
        "tags" : [ "Identity Provider Precheck" ],
        "summary" : "Get Identity Provider Federation Precheck Result",
        "description" : "Get a list precheck result with warnings/errors",
        "operationId" : "getIdentityPrecheckResult",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/IdentityProviderPrecheckResult"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/identity-providers" : {
      "get" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Get all identity providers",
        "description" : "Get a list of all identity providers",
        "operationId" : "getIdentityProviders",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfIdentityProvider"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Add a new external identity provider",
        "description" : "Add a new external identity provider",
        "operationId" : "addExternalIdentityProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "identityProviderSpec",
          "description" : "Identity Provider Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IdentityProviderSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : "Created",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/identity-providers/{id}" : {
      "get" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Get an identity provider by its id",
        "description" : "Get a specific identity irovider using its id",
        "operationId" : "getIdentityProviderById",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the Identity Provider",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/IdentityProvider"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Remove an identity provider",
        "description" : "Delete an Identity Provider by its identifier, if it exists",
        "operationId" : "deleteExternalIdentityProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Identity Provider",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "Identity Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Update an identity provider",
        "description" : "Update the identity provider by its identifier, if it exists",
        "operationId" : "updateExternalIdentityProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "identityProviderSpec",
          "description" : "Identity Provider Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IdentityProviderSpec"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Identity Provider",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "Identity Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/identity-providers/{id}/identity-sources" : {
      "post" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Add a new identity source to the embedded identity provider",
        "description" : "Add an identity source to an embedded IDP by id, if it exists",
        "operationId" : "addEmbeddedIdentitySource",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Identity Provider",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "identitySourceSpec",
          "description" : "Identity Source Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IdentitySourceSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "Identity Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/identity-providers/{id}/identity-sources/{domainName}" : {
      "delete" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Delete an Identity Source",
        "description" : "Delete an Identity Source by domain name, if it exists",
        "operationId" : "deleteIdentitySource",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Identity Provider",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "domainName",
          "in" : "path",
          "description" : "Domain Name associated with the identity source",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "Identity Source not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Update an identity source",
        "description" : "Update the identity source associated with the embedded IDP by name, if it exists",
        "operationId" : "updateEmbeddedIdentitySource",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "identitySourceSpec",
          "description" : "Identity Source Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IdentitySourceSpec"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Identity Provider",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "domainName",
          "in" : "path",
          "description" : "Domain Name associated with the identity source",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "Identity Source not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/identity-providers/{id}/sync-client" : {
      "post" : {
        "tags" : [ "Identity Providers" ],
        "summary" : "Generate new sync client token",
        "description" : "Generates a new sync client token",
        "operationId" : "generateSyncClientToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Identity Provider",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SyncClientTokenInfo"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "IDP is not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/license-keys" : {
      "get" : {
        "tags" : [ "License Keys" ],
        "summary" : "Retrieve a list of license keys",
        "operationId" : "getLicenseKeys",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "productType",
          "in" : "query",
          "description" : "Type of a Product",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "licenseKeyStatus",
          "in" : "query",
          "description" : "Status of a License Key",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "productVersion",
          "in" : "query",
          "description" : "Product Version, gets the license keys matching the major version of the product version",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "schema" : {
              "$ref" : "#/definitions/PageOfLicenseKey"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "License Keys" ],
        "summary" : "Add a a new license key",
        "operationId" : "addLicenseKey",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "licenseKey",
          "description" : "License key with other attributes",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LicenseKey"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/LicenseKey"
            }
          },
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/LicenseKey"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/license-keys/{key}" : {
      "get" : {
        "tags" : [ "License Keys" ],
        "summary" : "Retrieve a license key",
        "operationId" : "getLicenseKey",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The 29 alpha numeric character license key with hyphens",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "schema" : {
              "$ref" : "#/definitions/LicenseKey"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "License key not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "License Keys" ],
        "summary" : "Remove a license key",
        "operationId" : "removeLicenseKey",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The 29 alpha numeric character license key with hyphens",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content"
          },
          "404" : {
            "description" : "License key not found"
          }
        }
      }
    },
    "/v1/licensing-info" : {
      "get" : {
        "tags" : [ "License Keys" ],
        "summary" : "Retrieve licensing information",
        "operationId" : "getLicenseInformation",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "resourceType",
          "in" : "query",
          "description" : "Resource type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceIds",
          "in" : "query",
          "description" : "Resource IDs",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/LicensingInfo"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/manifests" : {
      "get" : {
        "tags" : [ "Manifests" ],
        "summary" : "Get manifest",
        "description" : "Get manifest. There should be only one valid manifest in the System.",
        "operationId" : "getManifest",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Manifest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Manifest Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Manifests" ],
        "summary" : "Save/Load manifest",
        "description" : "Save/Load manifest. Make sure manifest is a valid one. If manifest already exists, it gets overridden.",
        "operationId" : "saveManifest",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "manifest",
          "description" : "manifest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Manifest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/network-pools" : {
      "get" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Get the list of all Network Pools",
        "description" : "Get the Network Pools",
        "operationId" : "getNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Referenced network pool",
            "schema" : {
              "$ref" : "#/definitions/PageOfNetworkPool"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Referenced network pool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Create a Network Pool",
        "description" : "Create a Network Pool",
        "operationId" : "createNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "networkPool",
          "description" : "Specification of the Network pool to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NetworkPool"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/NetworkPool"
            }
          },
          "201" : {
            "description" : "The newly created network pool",
            "schema" : {
              "$ref" : "#/definitions/NetworkPool"
            }
          },
          "400" : {
            "description" : "Errors due to network pool validations failures",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/network-pools/{id}" : {
      "get" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Get a Network Pool",
        "description" : "Get a Network Pool by ID, if it exists",
        "operationId" : "getNetworkPoolByID",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the network pool to fetch",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Referenced network pool",
            "schema" : {
              "$ref" : "#/definitions/NetworkPool"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Referenced network pool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Delete a Network Pool",
        "description" : "Delete the Network Pool by the ID, if it exists and is unused",
        "operationId" : "deleteNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the network pool",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Hosts are still associated with NetworkPool",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "The specification of the deleted network pool"
          },
          "404" : {
            "description" : "Referenced network pool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Update Network Pool",
        "description" : "Update a Network Pool by ID, if it exists",
        "operationId" : "updateNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Network Pool ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "networkPoolUpdateSpec",
          "description" : "Network Pool update data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NetworkPoolUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Network Pool update completed",
            "schema" : {
              "$ref" : "#/definitions/NetworkPool"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Network Pool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/network-pools/{id}/networks" : {
      "get" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Get the Networks of a Network Pool",
        "description" : "Get the Networks that are part of a Network Pool",
        "operationId" : "getNetworksOfNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID for Networkpool to get the networks from",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Networks for referenced network pool",
            "schema" : {
              "$ref" : "#/definitions/PageOfNetwork"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Network pool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/network-pools/{id}/networks/{networkId}" : {
      "get" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Get a Network of a Network Pool",
        "description" : "Get a Network that is part of a Network Pool",
        "operationId" : "getNetworkOfNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the Network pool",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "networkId",
          "in" : "path",
          "description" : "Id of the Network",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Network for referenced network pool",
            "schema" : {
              "$ref" : "#/definitions/Network"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Networkpool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/network-pools/{id}/networks/{networkId}/ip-pools" : {
      "post" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Add an IP Pool to a Network of a Network Pool",
        "description" : "Add an IP Pool to a Network of a Network Pool",
        "operationId" : "addIpPoolToNetworkOfNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the networkpoolk",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "networkId",
          "in" : "path",
          "description" : "Id of the network",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "ipPool",
          "description" : "ipPool",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IpPool"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Add the IP Pool associated with a Network of a Network Pool",
            "schema" : {
              "$ref" : "#/definitions/Network"
            }
          },
          "400" : {
            "description" : "IP range validation failed error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Either Network Pool ID or Network ID not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Network Pools" ],
        "summary" : "Delete an IP Pool from a Network of a Network Pool",
        "description" : "Delete an IP Pool from a Network of a Network Pool",
        "operationId" : "deleteIpPoolFromNetworkOfNetworkPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the networkpool",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "networkId",
          "in" : "path",
          "description" : "ID of the network",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "ipPool",
          "description" : "ipPool",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IpPool"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Errors due to network/networkpool validations failures",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Either network or Network pool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Retrieve a list of NSX clusters",
        "operationId" : "getNsxClusters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "isShareable",
          "in" : "query",
          "description" : "filter NSX clusters which can be shared for domain creation",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfNsxTCluster"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/criteria" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Get all NSX criteria",
        "operationId" : "getNsxCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfNsxTCriterion"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/criteria/{name}" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Get a NSX criterion",
        "operationId" : "getNsxCriterion",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/NsxTCriterion"
            }
          },
          "404" : {
            "description" : "Criterion Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/ip-address-pools/validations" : {
      "post" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "validateIpPool",
        "operationId" : "validateIpPoolUsingPOST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nsxtIpAddressPoolValidationSpec",
          "description" : "nsxtIpAddressPoolValidationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NsxtIpAddressPoolValidationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/ip-address-pools/validations/{id}" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "getValidationResult",
        "operationId" : "getValidationResultUsingGET",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/queries" : {
      "post" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Start a query with NSX Criteria",
        "operationId" : "startNsxCriteriaQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nsxtCriterion",
          "description" : "nsxtCriterion",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NsxTCriterion"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/NsxTQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/NsxTQueryResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/queries/{id}" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Get NSX cluster query response",
        "operationId" : "getNsxClusterQueryResponse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/NsxTQueryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/NsxTQueryResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Query Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/{id}" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Retrieve the details of an NSX cluster by its ID",
        "operationId" : "getNsxCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "NSX cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/NsxTCluster"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "NSX cluster not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Retrive a list of NSX IP Address Pools by the NSX cluster ID",
        "operationId" : "getNsxIpAddressPools",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nsxt-cluster-id",
          "in" : "path",
          "description" : "NSX cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/NsxtIpAddressPool"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "IP address pools not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools/{name}" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Retrieve an NSX IP Address Pool by its name",
        "operationId" : "getNsxIpAddressPool",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nsxt-cluster-id",
          "in" : "path",
          "description" : "NSX cluster ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "IP address pool name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/NsxtIpAddressPool"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "IP address pool not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/nsxt-clusters/{nsxt-cluster-id}/transport-zones" : {
      "get" : {
        "tags" : [ "NSX-T Clusters" ],
        "summary" : "Retrieve list of all NSX transport zones",
        "operationId" : "getNsxTransportZones",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nsxt-cluster-id",
          "in" : "path",
          "description" : "NSX cluster ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfNsxtTransportZoneInfo"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/v1/personalities" : {
      "get" : {
        "tags" : [ "Personalities" ],
        "summary" : "Get the Personalities",
        "description" : "Get the Personalities which are available via depot access.",
        "operationId" : "getPersonalities",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "baseOSVersion",
          "in" : "query",
          "description" : "The base OS version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "addOnName",
          "in" : "query",
          "description" : "The add on name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "addOnVendorName",
          "in" : "query",
          "description" : "The add on vendor name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "componentName",
          "in" : "query",
          "description" : "The component name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "componentVendorName",
          "in" : "query",
          "description" : "The component vendor name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "personalityName",
          "in" : "query",
          "description" : "personalityName",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Personality"
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Personalities" ],
        "summary" : "Upload a Personality",
        "description" : "Upload Personality to SDDC Manager.",
        "operationId" : "uploadPersonality",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "personalityUploadSpec",
          "description" : "Personality Upload Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PersonalityUploadSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Personalities" ],
        "summary" : "Delete the personality based on either name or id",
        "description" : "Delete the personality based on either name or id",
        "operationId" : "deletePersonality",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "personalityId",
          "in" : "query",
          "description" : "The personality id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "personalityName",
          "in" : "query",
          "description" : "The personality name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Personality by name or id not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/personalities/files" : {
      "put" : {
        "tags" : [ "Personalities" ],
        "summary" : "Upload personality files to SDDC Manager",
        "description" : "Upload personality files to SDDC Manager",
        "operationId" : "uploadPersonalityFiles",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "files",
          "in" : "query",
          "description" : "files",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "file"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Bad request.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/personalities/{personalityId}" : {
      "get" : {
        "tags" : [ "Personalities" ],
        "summary" : "Get a Personality by its id",
        "description" : "Get the Personality for id",
        "operationId" : "getPersonality",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "personalityId",
          "in" : "path",
          "description" : "Personality ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Personality"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Personality not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Personalities" ],
        "summary" : "Rename personality based on ID",
        "description" : "Rename personality with the ID passed in the URL",
        "operationId" : "renamePersonalityById",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "personalityId",
          "in" : "path",
          "description" : "The personality id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "personality",
          "description" : "personality",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Personality"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Personality"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/pscs" : {
      "get" : {
        "tags" : [ "PSCs" ],
        "summary" : "Retrieve a list of Platform Service Controller (PSC)",
        "operationId" : "getPscs",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfPsc"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/pscs/{id}" : {
      "get" : {
        "tags" : [ "PSCs" ],
        "summary" : "Retrieve details of a Platform Service Controller (PSC)",
        "operationId" : "getPsc",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "PSC ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Psc"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Psc not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/releases" : {
      "get" : {
        "tags" : [ "Releases" ],
        "summary" : "Retrieve a list of release including current and target versions",
        "description" : "Get all Releases, with option to get current release for a domain, get release by version or get future releases for a versionor get all the applicable target release.",
        "operationId" : "getReleases",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "query",
          "description" : "Domain ID to get current release of the domain",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionEq",
          "in" : "query",
          "description" : "Release version to get its release",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "vxRailVersionEq",
          "in" : "query",
          "description" : "Release VxRail version to get its release",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionGt",
          "in" : "query",
          "description" : "Release version to get its future releases",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "vxRailVersionGt",
          "in" : "query",
          "description" : "Release vxrail version to get its future releases",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "applicableForVersion",
          "in" : "query",
          "description" : "Release version to get applicable releases",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "applicableForVxRailVersion",
          "in" : "query",
          "description" : "Release VxRail version to get applicable releases",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getFutureReleases",
          "in" : "query",
          "description" : "[Deprecated] Get all future releases for a given domain",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfRelease"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Release not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/releases/domains" : {
      "get" : {
        "tags" : [ "Target upgrade version" ],
        "summary" : "Retrieve a release view for all domains",
        "description" : "Get last selected upgrade version for WLDs.",
        "operationId" : "getReleaseByDomain_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfDomainReleaseView"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/releases/domains/{domainId}" : {
      "get" : {
        "tags" : [ "Target upgrade version" ],
        "summary" : "Retrieve a release view for a domain by its ID",
        "description" : "Get last selected upgrade version for the domain.",
        "operationId" : "getReleaseByDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID to get target version of the domain",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DomainReleaseView"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Domain not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Target upgrade version" ],
        "summary" : "Modify the target upgrade release for a domain by its ID",
        "description" : "Update last selected upgrade version for the domain",
        "operationId" : "updateReleaseByDomainID",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "domainRelease",
          "description" : "Target domain VCF version",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DomainRelease"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Domain or VCF target release not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/releases/domains/{domainId}/future-releases" : {
      "get" : {
        "tags" : [ "Releases" ],
        "summary" : "Retrive a list of future release by domain ID",
        "description" : "Returns all known to the system future target versions for a domain. If some of them are not allowed (e.g. stepping stone) includes message why.",
        "operationId" : "getFutureReleases",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID to get all feature target versions",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfDomainFutureRelease"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Domain not found with given ID.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/releases/system" : {
      "get" : {
        "tags" : [ "Releases" ],
        "summary" : "Retrieve the lowest deployed release of VMware Cloud Foundation",
        "description" : "Returns release for the lowest deployed VCF version for a domain on the environment.If Management domain is ahead of WLD domain, VCF BOM version for the WLDdomain will be returned.",
        "operationId" : "getSystemRelease",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Release"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Release not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/resource-functionalities" : {
      "get" : {
        "tags" : [ "Resource Functionalities" ],
        "summary" : "Get Resource Functionalities",
        "operationId" : "getResourceFunctionalities",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceType",
          "in" : "query",
          "description" : "Resource type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionalityType",
          "in" : "query",
          "description" : "Functionality type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceIds",
          "in" : "query",
          "description" : "Resource IDs",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "isAllowed",
          "in" : "query",
          "description" : "Allowed or disallowed resource functionalities",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentResourceType",
          "in" : "query",
          "description" : "Parent resource type",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfResourceFunctionalities"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/resource-functionalities/global" : {
      "get" : {
        "tags" : [ "Resource Functionalities" ],
        "summary" : "Get Resource Functionalities Allowed Global Configuration",
        "operationId" : "getResourcesFunctionalitiesAllowedGlobal",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ResourceFunctionalitiesGlobalConfiguration"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/resource-warnings" : {
      "get" : {
        "tags" : [ "Resource Warnings" ],
        "summary" : "Get Resource Warnings",
        "operationId" : "getResourceWarnings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceType",
          "in" : "query",
          "description" : "Resource type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceIds",
          "in" : "query",
          "description" : "Resource IDs",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "resourceNames",
          "in" : "query",
          "description" : "Resource Names",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfResourceWarning"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/resource-warnings/{id}" : {
      "get" : {
        "tags" : [ "Resource Warnings" ],
        "summary" : "Get a Resource Warning by ID",
        "operationId" : "getResourceWarning",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ResourceWarning"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Resource Warning not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/resources/license-checks" : {
      "post" : {
        "tags" : [ "License Keys" ],
        "summary" : "Start a license check for a resource",
        "operationId" : "startLicenseCheckByResource",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "resourcesLicenseCheckSpec",
          "description" : "Resources license check spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResourcesLicenseCheckSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ResourcesLicenseCheckResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/ResourcesLicenseCheckResult"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/resources/license-checks/{id}" : {
      "get" : {
        "tags" : [ "License Keys" ],
        "summary" : "Retrieve the results of a license check by its ID",
        "operationId" : "getLicenseCheckResultByID",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resources license check ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "schema" : {
              "$ref" : "#/definitions/ResourcesLicenseCheckResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/resources/licensing-infos" : {
      "put" : {
        "tags" : [ "License Keys" ],
        "summary" : "Update a license key for a resource",
        "operationId" : "setLicenseKeyForResource",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "licensingSpec",
          "description" : "License Information of resources",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LicensingSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/restores/tasks" : {
      "post" : {
        "tags" : [ "BackupRestore" ],
        "summary" : "Start a restore operation",
        "operationId" : "startRestore",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "restoreSpec",
          "description" : "restoreSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RestoreSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/restores/tasks/{id}" : {
      "get" : {
        "tags" : [ "BackupRestore" ],
        "summary" : "Retrieve the restore task",
        "operationId" : "getRestoreTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The restore task ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/roles" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Retrieve a list of roles from SDDC Manager",
        "description" : "Get a list of all roles",
        "operationId" : "getRoles",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfRole"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sddc-manager/trusted-certificates" : {
      "get" : {
        "tags" : [ "Trusted Certificates" ],
        "summary" : "Retrieve all trusted certificates from SDDC Manager",
        "description" : "Retrieve all trusted certificates from SDDC Manager",
        "operationId" : "getTrustedCertificates",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfTrustedCertificate"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Trusted Certificates" ],
        "summary" : "Add a trusted certificate to the SDDC Manager",
        "description" : "Add a trusted certificate to the SDDC Manager",
        "operationId" : "addTrustedCertificate",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "trustedCertificateSpec",
          "description" : "trustedCertificateSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TrustedCertificateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Trusted certificate already exists",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/sddc-manager/trusted-certificates/{alias}" : {
      "delete" : {
        "tags" : [ "Trusted Certificates" ],
        "summary" : "Delete a trusted certificate from the SDDC Manager",
        "description" : "Delete a trusted certificate from the SDDC Manager. Restart the services to reflect the changes.",
        "operationId" : "deleteTrustedCertificate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "alias",
          "in" : "path",
          "description" : "Certificate Alias",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v1/sddc-managers" : {
      "get" : {
        "tags" : [ "SddcManagers" ],
        "summary" : "Retrieve a list of SDDC Managers",
        "operationId" : "getSddcManagers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfSddcManager"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/sddc-managers/{id}" : {
      "get" : {
        "tags" : [ "SddcManagers" ],
        "summary" : "Retrieve the details of an SDDC Manager by its id",
        "operationId" : "getSddcManager",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Sddc Manager ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/SddcManager"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Sddc Manager not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/sddc-manager/local-os-user-accounts" : {
      "get" : {
        "tags" : [ "SddcManagers" ],
        "summary" : "Get local OS user accounts from the SDDC Manager appliance",
        "operationId" : "getLocalOsUserAccounts",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/sddcs" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Retrieve all bringup tasks",
        "operationId" : "getBringupTasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/PageOfSddcTask"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "SDDC" ],
        "summary" : "Deploy a management domain",
        "operationId" : "startBringup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "sddcSpec",
          "description" : "SDDC specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SddcSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SddcTask"
            }
          },
          "400" : {
            "description" : "SDDC already exists, Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/SddcTask"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/sddcs/about" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Get information about the bringup application",
        "description" : "GET Method to retrieve information about Bringup app",
        "operationId" : "getBringupAppInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VcfService"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          },
          "501" : {
            "description" : "Not Implemented"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v1/sddcs/validations" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Retrieve a list of bringup validations",
        "operationId" : "getBringupValidations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/PageOfValidation"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "501" : {
            "description" : "Not Implemented",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "SDDC" ],
        "summary" : "Perform validation of the SddcSpec specification",
        "description" : "SDDC specification incorporates all the client inputs regarding VMW component parameters constituting the SDDC: NTP, DNS spec, ESXi, VC, VSAN, NSX spec et al.",
        "operationId" : "validateBringupSpec",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "sddcSpec",
          "description" : "SDDC specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SddcSpec"
          }
        }, {
          "name" : "redo",
          "in" : "query",
          "description" : "redo",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Validation name\nDeprecated: ESXI_VERSION_VALIDATION",
          "required" : false,
          "type" : "string",
          "enum" : [ "JSON_SPEC_VALIDATION", "SECURE_PLATFORM_AUDIT", "LICENSE_KEY_VALIDATION", "TIME_SYNC_VALIDATION", "NETWORK_IP_POOLS_VALIDATION", "NETWORK_CONFIG_VALIDATION", "NETWORK_CONNECTIVITY_VALIDATION", "ESXI_HOST_READINESS_VALIDATION", "PASSWORDS_VALIDATION", "HOST_IP_DNS_VALIDATION", "CLOUDBUILDER_READY_VALIDATION", "VSAN_AVAILABILITY_VALIDATION", "NSXT_NETWORKS_VALIDATION", "MANAGEMENT_NETWORKS_VALIDATION" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "202" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/sddcs/validations/{id}" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Retrieve the results of a bringup validation by its ID",
        "operationId" : "getBringupValidation",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SDDC validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "501" : {
            "description" : "Not Implemented",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "SDDC" ],
        "summary" : "Retry bringup validation",
        "description" : "Retry a completed SDDC validation",
        "operationId" : "retryBringupValidation",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SDDC validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Completed",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          },
          "405" : {
            "description" : "Method Not Allowed"
          }
        }
      }
    },
    "/v1/sddcs/validations/{validationId}/report" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Get validation report by ID",
        "description" : "Returns the bringup report for a validation. Reports are generated in PDF format.",
        "operationId" : "exportBringupValidationReport",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/pdf" ],
        "parameters" : [ {
          "name" : "validationId",
          "in" : "path",
          "description" : "Bringup validation ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "description" : "Start time of validation to be put in the report",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "curClientTime",
          "in" : "query",
          "description" : "Current client local time of the the report generation",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          },
          "501" : {
            "description" : "Not Implemented"
          }
        }
      }
    },
    "/v1/sddcs/{id}" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Get a bringup task by its id",
        "operationId" : "getBringupTaskByID",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SDDC ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SddcTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "SDDC" ],
        "summary" : "Retry failed SDDC creation",
        "operationId" : "retrySddc",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SDDC ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "sddcSpec",
          "description" : "sddcSpec",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SddcSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SddcTask"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/SddcTask"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "405" : {
            "description" : "Not allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/sddcs/{id}/detail-report" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Get bringup report by ID",
        "description" : "Returns the bringup report. Reports are generated in PDF and CSV formats.",
        "operationId" : "exportBringupDetailReport",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/pdf", "text/csv" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SDDC ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "One among: PDF, CSV",
          "required" : false,
          "type" : "string",
          "default" : "pdf",
          "enum" : [ "PDF", "CSV" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          },
          "501" : {
            "description" : "Not Implemented"
          },
          "204" : {
            "description" : "No content",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/v1/sddcs/{id}/sddc-manager" : {
      "get" : {
        "tags" : [ "SDDC" ],
        "summary" : "Retrieve SDDC Manager VM details",
        "description" : "Retrieves the details of SDDC Manager VM",
        "operationId" : "getSddcManagerInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SDDC ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SddcManagerInfo"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          },
          "501" : {
            "description" : "Not Implemented"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v1/sso-domains" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Retrieive a list of domains from  vCenter Single Sign-On",
        "description" : "Get a list of all SSO domains",
        "operationId" : "getSSODomains",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfstring"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sso-domains/{sso-domain}/entities" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Retrieve a list of users and groups from a domain in vCenter Single Sign-On",
        "description" : "Get a list of all entities in the SSO domain",
        "operationId" : "getSSODomainEntities",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sso-domain",
          "in" : "path",
          "description" : "SSO Domain Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfSsoDomainEntity"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/system" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Retrieve the system configuration",
        "description" : "Retrieve the system configuration",
        "operationId" : "getSystemConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/System"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "System" ],
        "summary" : "Updates paramters of the system configuration",
        "description" : "Updates paramters of the system configuration",
        "operationId" : "updateSystemConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "updateSpec",
          "description" : "updateSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SystemUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/system/backup-configuration" : {
      "get" : {
        "tags" : [ "BackupRestore" ],
        "summary" : "Retrieve the backup configuration for SDDC Manager and NSX Manager",
        "operationId" : "getBackupConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/BackupConfiguration"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "BackupRestore" ],
        "summary" : "Configure the backup configuration for SDDC Manager and NSX Manager",
        "operationId" : "setBackupConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "backupConfigurationSpec",
          "description" : "backupConfigurationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BackupConfigurationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "BackupRestore" ],
        "summary" : "Update the backup configuration for SDDC Manager and NSX Manager",
        "operationId" : "updateBackupConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "backupConfigurationSpec",
          "description" : "backupConfigurationSpec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BackupConfigurationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/ceip" : {
      "get" : {
        "tags" : [ "CEIP" ],
        "summary" : "Retrieve the CEIP status",
        "description" : "Get CEIP status and instance id",
        "operationId" : "getCeipStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Ceip"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "CEIP" ],
        "summary" : "Configure CEIP to Opt-In or Opt-Out",
        "description" : "Opt-in or Opt-out of CEIP",
        "operationId" : "setCeipStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "ceipUpdateSpec",
          "description" : "Required action for CEIP.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CeipUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "The request could not be completed due to a conflict with the current state",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/check-sets" : {
      "get" : {
        "tags" : [ "CheckSets" ],
        "summary" : "Get information about the last assessment run",
        "description" : "Get information about the last assessment run",
        "operationId" : "getLastAssessmentRunInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "query",
          "description" : "Id of the domain to filter tasks for",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AssessmentTaskInfo"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "CheckSets" ],
        "summary" : "Trigger a run of the selected checks",
        "description" : "Trigger a run of the selected checks",
        "operationId" : "triggerCheckRun",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "checkSetRunInputRest",
          "description" : "Check-set selection for resources",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CheckSetRunInput"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/check-sets/queries" : {
      "post" : {
        "tags" : [ "CheckSets" ],
        "summary" : "Query for check-sets for the given resources",
        "description" : "Query for check-sets for the given resources",
        "operationId" : "queryCheckSets",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "checkSetQueryInputRest",
          "description" : "Check-set query input",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CheckSetQueryInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CheckSetQueryResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/check-sets/{runId}" : {
      "get" : {
        "tags" : [ "CheckSets" ],
        "summary" : "Get the result for a given check run",
        "description" : "Get the result for a given check run",
        "operationId" : "getResult",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "runId",
          "in" : "path",
          "description" : "UUID of the task",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "obfuscate",
          "in" : "query",
          "description" : "Obfuscate. Only for internal use.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "returnAllArtefacts",
          "in" : "query",
          "description" : "Returns all artefacts. Only for internal use.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AssessmentOutput"
            }
          },
          "400" : {
            "description" : "Invalid task for this UUID",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "No task for this UUID",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "CheckSets" ],
        "summary" : "Trigger partial retry of a completed check run",
        "description" : "Trigger partial retry of a completed check run",
        "operationId" : "triggerPartialRetryOfCheckRun",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "runId",
          "in" : "path",
          "description" : "UUID of the assessment to retry",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "assessmentPartialRetryInputRest",
          "description" : "Spec for assessment retry",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AssessmentPartialRetryInput"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/dns-configuration" : {
      "get" : {
        "tags" : [ "system" ],
        "summary" : "Retrieve the DNS configuration",
        "operationId" : "getDnsConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DnsConfiguration"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "system" ],
        "summary" : "Update the DNS configuration",
        "operationId" : "configureDns",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "dnsConfiguration",
          "description" : "dnsConfiguration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DnsConfiguration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/dns-configuration/validations" : {
      "get" : {
        "tags" : [ "system" ],
        "summary" : "Retrieve a list of DNS configuation validations",
        "operationId" : "getValidationsOfDNSConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "executionStatus",
          "in" : "query",
          "description" : "executionStatus",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "system" ],
        "summary" : "Perform validation of the DnsConfiguration specification",
        "operationId" : "validateDnsConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "dnsConfiguration",
          "description" : "dnsConfiguration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DnsConfiguration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/v1/system/dns-configuration/validations/{id}" : {
      "get" : {
        "tags" : [ "system" ],
        "summary" : "Retrieve the results of a DNS configuration validation by its ID",
        "operationId" : "getValidationOfDnsConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/system/health-summary" : {
      "get" : {
        "tags" : [ "SOS" ],
        "summary" : "Retieve a list of Health Check tasks",
        "operationId" : "getHealthCheckTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfHealthSummary"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "SOS" ],
        "summary" : "Start a Health Check operation using SoS",
        "operationId" : "startHealthCheck",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "healthsummaryspec",
          "description" : "healthsummaryspec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HealthSummarySpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/HealthSummary"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/HealthSummary"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Operation is in progress for Id {id}. Wait for the operation to complete.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/health-summary/{id}" : {
      "get" : {
        "tags" : [ "SOS" ],
        "summary" : "Retrieve the status of the Health Check operations",
        "operationId" : "getHealthCheckStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Health Summary Id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HealthSummary"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/health-summary/{id}/data" : {
      "get" : {
        "tags" : [ "SOS" ],
        "summary" : "Download a Health Check tar.gz by its ID",
        "operationId" : "exportHealthCheckByID",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Health Summary Id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Bundle not found or not available for download. Id:{id}. ",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/ntp-configuration" : {
      "get" : {
        "tags" : [ "system" ],
        "summary" : "Retrieve the NTP configuration",
        "operationId" : "getNtpConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/NtpConfiguration"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "system" ],
        "summary" : "Update the NTP configuration",
        "operationId" : "configureNtp",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "ntpConfiguration",
          "description" : "ntpConfiguration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NtpConfiguration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/ntp-configuration/validations" : {
      "get" : {
        "tags" : [ "system" ],
        "summary" : "Retrieve a list of NTP configuation validations",
        "operationId" : "getValidationsOfNtpConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "executionStatus",
          "in" : "query",
          "description" : "executionStatus",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "system" ],
        "summary" : "Perform validation of the NtpConfiguration specification",
        "operationId" : "validateNtpConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "ntpConfiguration",
          "description" : "ntpConfiguration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NtpConfiguration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/v1/system/ntp-configuration/validations/{id}" : {
      "get" : {
        "tags" : [ "system" ],
        "summary" : "Retrieve the results of a NTP configuration  validation by its ID",
        "operationId" : "getValidationOfNtpConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/system/prechecks" : {
      "post" : {
        "tags" : [ "SystemPrechecks" ],
        "summary" : "Start a system precheck",
        "description" : "Perform precheck of resource(ex: Domain, Cluster). If only resource is specified, all resources/software components under it are included. If resource(Domain, Cluster etc) and specific resources/software components are provided, only those are included in precheck. As this API is deprecated, please use the new LCM Prechecks API - /v1/system/check-sets/queries and /v1/system/check-sets",
        "operationId" : "startPrecheck",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "precheckSpec",
          "description" : "Precheck System Spec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PrecheckSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v1/system/prechecks/tasks/{id}" : {
      "get" : {
        "tags" : [ "SystemPrechecks" ],
        "summary" : "Retrieve a precheck task by its id",
        "description" : "Monitor the progress of precheck task by the precheck task ID. As this API is deprecated, please use the new LCM Prechecks API - /v1/system/check-sets/{taskId}",
        "operationId" : "getPrecheckTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Precheck Task ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Precheck Task Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v1/system/proxy-configuration" : {
      "get" : {
        "tags" : [ "ProxyConfiguration" ],
        "summary" : "Get the current Proxy configuration",
        "description" : "Get the current Proxy configuration",
        "operationId" : "getProxyConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ProxyConfiguration"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "patch" : {
        "tags" : [ "ProxyConfiguration" ],
        "summary" : "Update Proxy configuration",
        "description" : "Update Proxy configuration",
        "operationId" : "updateProxyConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "proxyConfig",
          "description" : "proxyConfig",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProxyConfiguration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/system/sddc-spec-converter" : {
      "post" : {
        "tags" : [ "SDDC" ],
        "summary" : "Convert SDDC specification Json/Excel File",
        "description" : "SDDC specification incorporates all the client inputs regarding VMW component parameters constituting the SDDC: NTP, DNS spec, ESXi, VC, VSAN, NSX spec et al.",
        "operationId" : "startBringupSpecConversion",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "specFile",
          "in" : "formData",
          "description" : "SDDC specification file which is either a JSON or xls file",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "design",
          "in" : "query",
          "description" : "Supported bringup designs - EMS, VXRAIL",
          "required" : false,
          "type" : "string",
          "default" : "ems",
          "enum" : [ "EMS", "VXRAIL" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SddcSpec"
            }
          },
          "400" : {
            "description" : "Converting SDDC specification failed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "501" : {
            "description" : "Not Implemented",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/security/fips" : {
      "get" : {
        "tags" : [ "FIPS mode details" ],
        "summary" : "Retrieve the FIPS configration mode",
        "description" : "Retrieve VCF security FIPS mode.",
        "operationId" : "getFIPSConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Fips"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/v1/system/settings/depot" : {
      "get" : {
        "tags" : [ "DepotSettings" ],
        "summary" : "Retrieve the depot configuration",
        "description" : "Get the depot configuration. In a fresh setup, this would be empty.",
        "operationId" : "getDepotSettings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DepotSettings"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "DepotSettings" ],
        "summary" : "Configure the depot credentials",
        "description" : "Update depot settings. Depot settings can be updated with VMware Depot account",
        "operationId" : "updateDepotSettings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "depotSettings",
          "description" : "Depot Settings",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DepotSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DepotSettings"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DepotSettings"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/settings/version-aliases" : {
      "get" : {
        "tags" : [ "VersionAliasesForBundleComponentType" ],
        "summary" : "Retrieve Version Alias Configuration",
        "description" : "Get the Version Alias Configuration.",
        "operationId" : "getVersionAliasConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfVersionAliasesForBundleComponentType"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "VersionAliasesForBundleComponentType" ],
        "summary" : "Update Version Alias Configurations",
        "description" : "Update Version Alias Configurations.",
        "operationId" : "updateVersionAliasConfigurations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "versionAliasesForBundleComponentTypeSpec",
          "description" : "Version Alias Configuration Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VersionAliasesForBundleComponentTypeSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfVersionAliasesForBundleComponentType"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/settings/version-aliases/{bundleComponentType}" : {
      "delete" : {
        "tags" : [ "VersionAliasesForBundleComponentType" ],
        "summary" : "Removes Version Alias Configuration by component type",
        "description" : "Removes Version Alias Configuration by component type",
        "operationId" : "deleteVersionAliasBySoftwareType",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bundleComponentType",
          "in" : "path",
          "description" : "Bundle Component Type",
          "required" : true,
          "type" : "string",
          "enum" : [ "VCENTER", "PSC", "NSX_T_MANAGER", "NSX_MANAGER", "ESX_HOST", "VCF_VRA_UPGRADE", "VCF_VRLI_UPGRADE", "VCF_VROPS_UPGRADE", "VCF_VRSLCM_UPGRADE", "SDDC_MANAGER_VCF", "LCM", "SDDC_MANAGER", "SDDC_MANAGER_UI", "OPERATIONS_MANAGER", "COMMON_SERVICES", "SOLUTIONS_MANAGER", "MULTI_SITE_SERVICE" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/v1/system/settings/version-aliases/{bundleComponentType}/{version}" : {
      "put" : {
        "tags" : [ "VersionAliasesForBundleComponentType" ],
        "summary" : "Update the Version Alias Configuration by component type",
        "description" : "Update Version Alias Configuration.",
        "operationId" : "updateVersionAliasConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bundleComponentType",
          "in" : "path",
          "description" : "Bundle Component Type",
          "required" : true,
          "type" : "string",
          "enum" : [ "VCENTER", "PSC", "NSX_T_MANAGER", "NSX_MANAGER", "ESX_HOST", "VCF_VRA_UPGRADE", "VCF_VRLI_UPGRADE", "VCF_VROPS_UPGRADE", "VCF_VRSLCM_UPGRADE", "SDDC_MANAGER_VCF", "LCM", "SDDC_MANAGER", "SDDC_MANAGER_UI", "OPERATIONS_MANAGER", "COMMON_SERVICES", "SOLUTIONS_MANAGER", "MULTI_SITE_SERVICE" ]
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Version",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "aliasSpec",
          "description" : "Alias Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AliasSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfVersionAliasesForBundleComponentType"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "VersionAliasesForBundleComponentType" ],
        "summary" : "Removes Version Alias Configuration by component type and version",
        "description" : "Delete Version Alias Configuration by bundle component type, version, and aliases.",
        "operationId" : "deleteAliasVersionsBySoftwareTypeAndBaseVersion",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "bundleComponentType",
          "in" : "path",
          "description" : "Bundle Component Type",
          "required" : true,
          "type" : "string",
          "enum" : [ "VCENTER", "PSC", "NSX_T_MANAGER", "NSX_MANAGER", "ESX_HOST", "VCF_VRA_UPGRADE", "VCF_VRLI_UPGRADE", "VCF_VROPS_UPGRADE", "VCF_VRSLCM_UPGRADE", "SDDC_MANAGER_VCF", "LCM", "SDDC_MANAGER", "SDDC_MANAGER_UI", "OPERATIONS_MANAGER", "COMMON_SERVICES", "SOLUTIONS_MANAGER", "MULTI_SITE_SERVICE" ]
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Version",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "aliasVersions",
          "description" : "List of alias versions",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/v1/system/support-bundles" : {
      "get" : {
        "tags" : [ "SOS" ],
        "summary" : "Retrieve a list of Support Bundle tasks",
        "operationId" : "getSupportBundleTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfSupportBundle"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "SOS" ],
        "summary" : "Start a Support Bundle operation using SoS",
        "operationId" : "startSupportBundle",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "supportbundlespec",
          "description" : "supportbundlespec",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SupportBundleSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SupportBundle"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/SupportBundle"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Operation is in progress for Id {id}. Wait for the operation to complete.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/support-bundles/{id}" : {
      "get" : {
        "tags" : [ "SOS" ],
        "summary" : "Retrive the status of the Support Bundle operation",
        "operationId" : "getSupportBundleStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Support Bundle ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/SupportBundle"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/support-bundles/{id}/data" : {
      "get" : {
        "tags" : [ "SOS" ],
        "summary" : "Download a Support Bundle tar.gz by ID",
        "operationId" : "exportSupportBundleByID",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Support Bundle ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "400" : {
            "description" : "Bad request! Invalid Headers or Data. Error: {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Bad request! Authorization Header is missing or not in correct format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Something went wrong. Internal server error occurred. Error {error}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Bundle not found or not available for download. Id:{id}",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/upgradables" : {
      "get" : {
        "tags" : [ "Upgradables" ],
        "summary" : "Retrieve a list of all upgradable resources",
        "description" : "Fetches the list of Upgradables in the System. Only one Upgradable becomes AVAILABLE for Upgrade. The Upgradables provides information that can be use for Precheck API and also in the actual Upgrade API call.",
        "operationId" : "getUpgradables",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfUpgradable"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/system/upgradables/compliance" : {
      "get" : {
        "tags" : [ "Upgradables" ],
        "summary" : "Get the Upgradables and Resource Errors",
        "description" : "Fetches a class containing the list of Upgradables and list of Resource Upgradable Errors in the System. Only one Upgradable becomes AVAILABLE for Upgrade. The Upgradables provides information that can be use for Precheck API and also in the actual Upgrade API call. Resource Upgradable Errors are the errors collected related to upgrades for corresponding resources.",
        "operationId" : "getUpgradablesAndResourceErrors",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/UpgradablesResource"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/tasks" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retrieve a list of all tasks",
        "description" : "Get the tasks",
        "operationId" : "getTasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of elements to be returned in the result",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "taskStatus",
          "in" : "query",
          "description" : "taskStatus",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "taskType",
          "in" : "query",
          "description" : "taskType",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceId",
          "in" : "query",
          "description" : "resourceId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceType",
          "in" : "query",
          "description" : "resourceType",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "completedAfter",
          "in" : "query",
          "description" : "A time based filter to get tasks which are completed after the given timestamp. A task is completed if its status is 'Successsful' or 'Failed'. Time is in milliseconds.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Size of the page you want to retrieve. Max page size allowed is 100.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "orderDirection",
          "in" : "query",
          "description" : "orderDirection",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "orderBy",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "taskName",
          "in" : "query",
          "description" : "Search filter when task name contains text.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the list of tasks.",
            "schema" : {
              "$ref" : "#/definitions/PageOfTask"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/tasks/{id}" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retrieve a task by its ID",
        "description" : "Get a Task by ID, if it exists",
        "operationId" : "getTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Task id to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A task object.",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Task not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Tasks" ],
        "summary" : "Cancel a Task",
        "description" : "Cancel a Task by ID, if it exists",
        "operationId" : "cancelTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Task id for cancelling",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Task was cancelled successfully."
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Task not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Task can not be cancelled. Only a IN_PROGRESS task can be cancelled.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retry a Task",
        "description" : "Retry a failed Task by ID, if it exists",
        "operationId" : "retryTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Task id retry",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Task was retried successfully."
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Task not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Task can not be retried. Only a failed Task can be retried.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/tokens" : {
      "post" : {
        "tags" : [ "Tokens" ],
        "summary" : "Create Token Pair",
        "description" : "Creates access token and refresh token for user access",
        "operationId" : "createToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "tokenCreationSpec",
          "description" : "The spec used to sign the token",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TokenCreationSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/TokenPair"
            }
          },
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/TokenPair"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/tokens/access-token/refresh" : {
      "patch" : {
        "tags" : [ "Tokens" ],
        "summary" : "Refresh Access Token",
        "description" : "Refresh the access token associated with the given refresh token",
        "operationId" : "refreshAccessToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "refreshToken",
          "description" : "ID of the refresh token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/tokens/refresh-token" : {
      "delete" : {
        "tags" : [ "Tokens" ],
        "summary" : "Invalidate Refresh Token",
        "description" : "Invalidate the provided refresh token",
        "operationId" : "invalidateRefreshToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "refreshToken",
          "description" : "ID of the refresh token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          }
        }
      }
    },
    "/v1/upgradables/domains/{domainId}" : {
      "get" : {
        "tags" : [ "Upgradables" ],
        "summary" : "Retrieve a list of all upgradable resources for a domain by its ID",
        "description" : "Fetches the list of Upgradables for a given domain. If a target version is provided, Upgradables that are required for given target version become Available. The Upgradables providesinformation that can be use for Precheck API and also in the actual Upgrade API call.This API is used only for management domain, for all cases please use v1/system/upgradables.",
        "operationId" : "getUpgradablesByDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "targetVersion",
          "in" : "query",
          "description" : "Target Version to get Upgradables for a given Target Release",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfUpgradable"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Domain not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/upgradables/domains/{domainId}/clusters" : {
      "get" : {
        "tags" : [ "Upgradables" ],
        "summary" : "Retrieve a list of upgradable packages details from HSM for a domain by its ID",
        "description" : "Fetches the list of available hardware support managers and configured hardware support managers for the give resource along with the hardware support packages and Software details.",
        "operationId" : "getUpgradablesClusters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfUpgradablesClusterResource"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Domain Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/upgradables/domains/{domainId}/nsxt" : {
      "get" : {
        "tags" : [ "Upgradables" ],
        "summary" : "Retrieve a list of all upgradable NSX resources for a domain by its ID",
        "description" : "Get the list NSX upgradable reosurce with resource metadata info",
        "operationId" : "getNsxUpgradeResources",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "Domain ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "bundleId",
          "in" : "query",
          "description" : "bundle Id of the upgrade bundle applicable on the domain",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/NsxtResources"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Bundle not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/upgrades" : {
      "get" : {
        "tags" : [ "Upgrades" ],
        "summary" : "Retrieve a list of upgrades",
        "description" : "Retrieve a list of upgrades",
        "operationId" : "getUpgrades",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status of the upgrades you want to retrieve",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bundleId",
          "in" : "query",
          "description" : "Bundle Id for the upgrade",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfUpgrade"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Upgrade not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Upgrades" ],
        "summary" : "Start an upgrade operation",
        "description" : "Schedule/Trigger Upgrade of a Resource. Ex: Resource can be DOMAIN, CLUSTER, UNMANAGED_HOST etc. Performing upgrades are supported on VMware Cloud Foundation 3.5 BOM resources and above. ",
        "operationId" : "performUpgrade",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "upgradeSpec",
          "description" : "Upgrade Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpgradeSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "424" : {
            "description" : "Failed Dependency",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Operation not allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/upgrades/{upgradeId}" : {
      "get" : {
        "tags" : [ "Upgrades" ],
        "summary" : "Retrieve an upgrade by ID",
        "description" : "Retrieve an upgrade by ID",
        "operationId" : "getUpgradeById",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "upgradeId",
          "in" : "path",
          "description" : "upgradeId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Upgrade"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Upgrade not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Upgrades" ],
        "summary" : "Change a DRAFT upgrade to a SCHEDULED state",
        "description" : "Commit/Reschedule an existing upgrade. It moves the upgrade from DRAFT state to SCHEDULED state and/or changes the upgrade scheduled date/time.",
        "operationId" : "updateUpgradeSchedule",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "upgradeId",
          "in" : "path",
          "description" : "upgradeId",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "upgradeCommitSpec",
          "description" : "Upgrade Commit/Reschedule Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpgradeCommitSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Upgrade not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/upgrades/{upgradeId}/prechecks" : {
      "post" : {
        "tags" : [ "Upgrades" ],
        "summary" : "Start an upgrade precheck operation",
        "description" : "Perform Upgrade Prechecks",
        "operationId" : "startUpgradePrecheck",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "upgradeId",
          "in" : "path",
          "description" : "upgradeId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Operation not allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/upgrades/{upgradeId}/prechecks/{precheckId}" : {
      "get" : {
        "tags" : [ "Upgrades" ],
        "summary" : "Retrieve an upgrade precheck task by ID",
        "description" : "Gets upgrade precheck details",
        "operationId" : "getUpgradePrecheckByID",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "upgradeId",
          "in" : "path",
          "description" : "upgradeId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "precheckId",
          "in" : "path",
          "description" : "precheckId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Operation not allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/users" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Retrieve a list of users from SDDC Manager",
        "description" : "Get a list of all users",
        "operationId" : "getUsers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfUser"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Assign access to users in SDDC Manager",
        "description" : "Add list of users",
        "operationId" : "addUsers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "users",
          "description" : "User data collection",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/User"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfUser"
            }
          },
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/PageOfUser"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/users/local/admin" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get local account details",
        "description" : "Get information on the local account",
        "operationId" : "getLocalAccount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/LocalUser"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Users" ],
        "summary" : "Update password for local account",
        "description" : "Update the password for local account only if the old password is correct, or if user configures the local account for the first time",
        "operationId" : "updateLocalUserPassword",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "locaUserPassword",
          "description" : "Local user password details",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LocalAccountPasswordInfo"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "204" : {
            "description" : "No content"
          }
        }
      }
    },
    "/v1/users/ui" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Retrieve a list of users assigned access via SDDC Manager",
        "description" : "Retrieve a list of users assigned access via SDDC Manager",
        "operationId" : "getUiUsers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfUser"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/users/{id}" : {
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Remove access for a user in SDDC Manager",
        "description" : "Delete the user by the ID, if it exists",
        "operationId" : "removeUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the user",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No content"
          },
          "404" : {
            "description" : "User not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vasa-providers" : {
      "get" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Get the VASA Providers",
        "operationId" : "getVasaProviders",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfVasaProvider"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Add a VASA Provider",
        "operationId" : "addVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "vasaProvider",
          "description" : "VASA Provider data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VasaProvider"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/VasaProvider"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vasa-providers/validations" : {
      "post" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Validate VasaProvider input specification",
        "operationId" : "validateVasaProviderSpec",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "vasaProvider",
          "description" : "vasaProvider",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VasaProvider"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/v1/vasa-providers/validations/{id}" : {
      "get" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Get the status of the validation of the VASA Provider",
        "operationId" : "getVasaProviderValidation",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The validation ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal server error"
          },
          "404" : {
            "description" : "Validation ID not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vasa-providers/{id}" : {
      "get" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Get a VASA Provider",
        "operationId" : "getVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/VasaProvider"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "VASA Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Delete a VASA Provider",
        "operationId" : "removeVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "VASA Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Update a VASA Provider",
        "operationId" : "updateVasaProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "vasaProvider",
          "description" : "VASA Provider update data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VasaProviderUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/VasaProvider"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "VASA Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vasa-providers/{id}/storage-containers" : {
      "get" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Get the storage containers of a VASA Provider",
        "operationId" : "getVasaProviderStorageContainers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "protocolType",
          "in" : "query",
          "description" : "Pass an optional Storage Protocol type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/StorageContainer"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "VASA Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Add the storage containers to a VASA Provider",
        "operationId" : "addVasaProviderStorageContainer",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "storageContainers",
          "description" : "Storage containers data",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/StorageContainer"
            }
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/VasaProvider"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "VASA Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vasa-providers/{id}/storage-containers/{storageContainerId}" : {
      "delete" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Delete a storage container of a VASA Provider",
        "operationId" : "removeVasaProviderStorageContainer",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "storageContainerId",
          "in" : "path",
          "description" : "Storage container ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Storage container not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Update the storage container of a VASA Provider",
        "operationId" : "updateVasaProviderStorageContainer",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "storageContainerId",
          "in" : "path",
          "description" : "Storage container ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "storageContainer",
          "description" : "Storage container update data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/StorageContainerUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/VasaProvider"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Storage container not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vasa-providers/{id}/users" : {
      "get" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Get the users of a VASA Provider",
        "operationId" : "getVasaProviderUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/VasaUser"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "VASA Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Add the users to a VASA Provider",
        "operationId" : "addVasaProviderUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "vasaUsers",
          "description" : "VASA Users data",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/VasaUser"
            }
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/VasaProvider"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "VASA Provider not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vasa-providers/{id}/users/{userId}" : {
      "patch" : {
        "tags" : [ "VasaProviders" ],
        "summary" : "Update the user of a VASA Provider",
        "operationId" : "updateVasaProviderUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VASA Provider ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "vasaUser",
          "description" : "User update data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VasaUserUpdateSpec"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/VasaProvider"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "User not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vcenters" : {
      "get" : {
        "tags" : [ "vCenters" ],
        "summary" : "Retrieve a list of vCenter Servers",
        "operationId" : "getVcenters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "domainId",
          "in" : "query",
          "description" : "ID of the domain",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfVcenter"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vcenters/{id}" : {
      "get" : {
        "tags" : [ "vCenters" ],
        "summary" : "Retrieve a vCenter Server by its ID",
        "operationId" : "getVcenter",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "vCenter ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Vcenter"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "vCenter not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vcf-services" : {
      "get" : {
        "tags" : [ "VcfServices" ],
        "summary" : "Retrieve a list of SDDC Manager services",
        "operationId" : "getVcfServices",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/PageOfVcfService"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vcf-services/{id}" : {
      "get" : {
        "tags" : [ "VcfServices" ],
        "summary" : "Retrieve an SDDC Manager service by its ID",
        "operationId" : "getVcfService",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VcfService ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/VcfService"
            }
          },
          "500" : {
            "description" : "InternalServerError",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "VcfService not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vras" : {
      "get" : {
        "tags" : [ "Automation" ],
        "summary" : "Retrieve a list of VMware Aria Automation instances",
        "operationId" : "getVras",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfVra"
            }
          }
        }
      }
    },
    "/v1/vrli/domains" : {
      "get" : {
        "tags" : [ "Operations for Logs" ],
        "summary" : "Retrieve a list of VMware Aria Operations for Logs integration status for domains",
        "operationId" : "getVrliIntegratedDomains",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfDomainIntegration"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Operations for Logs" ],
        "summary" : "Connect or disconnect a domain with VMware Aria Operations for Logs",
        "operationId" : "connectVrliWithDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "domainIntegration",
          "description" : "Domain Integration Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DomainIntegration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          }
        }
      }
    },
    "/v1/vrlis" : {
      "get" : {
        "tags" : [ "Operations for Logs" ],
        "summary" : "Retrieve a list of VMware Aria Operations for Logs instances",
        "operationId" : "getVrlis",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfVrli"
            }
          }
        }
      }
    },
    "/v1/vrops/domains" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Retrieve a list of VMware Aria Operations integration status for domains",
        "description" : "Retrieves the existing  domains and their connection status with VMware Aria Operations.",
        "operationId" : "getVropsIntegratedDomains",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfDomainIntegration"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Operations" ],
        "summary" : "Connect or disconnect a domain with VMware Aria Operations",
        "description" : "Connects/disconnects a workload domains with VMware Aria Operations",
        "operationId" : "connectVropsWithDomain",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "domainIntegration",
          "description" : "Domain Integration Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DomainIntegration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vropses" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Retrieve a list of VMware Aria Operations instances",
        "operationId" : "getVropses",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfVrops"
            }
          }
        }
      }
    },
    "/v1/vrslcm" : {
      "get" : {
        "tags" : [ "Suite Lifecycle" ],
        "summary" : "Retrive information about VMware Aria Suite Lifecycle",
        "description" : "Gets the complete information about the existing VMware Aria Suite Lifecycle instance.",
        "operationId" : "getVrslcm",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Vrslcm"
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "Suite Lifecycle" ],
        "summary" : "Update the version of VMware Aria Suite Lifecycle",
        "description" : "Updates VMware Aria Suite Lifecycle version in VCF inventory.",
        "operationId" : "updateVrslcmVersionInInventory",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "vrslcmDto",
          "description" : "vrslcmDto",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Vrslcm"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string",
              "enum" : [ "100 CONTINUE", "101 SWITCHING_PROTOCOLS", "102 PROCESSING", "103 CHECKPOINT", "200 OK", "201 CREATED", "202 ACCEPTED", "203 NON_AUTHORITATIVE_INFORMATION", "204 NO_CONTENT", "205 RESET_CONTENT", "206 PARTIAL_CONTENT", "207 MULTI_STATUS", "208 ALREADY_REPORTED", "226 IM_USED", "300 MULTIPLE_CHOICES", "301 MOVED_PERMANENTLY", "302 FOUND", "302 MOVED_TEMPORARILY", "303 SEE_OTHER", "304 NOT_MODIFIED", "305 USE_PROXY", "307 TEMPORARY_REDIRECT", "308 PERMANENT_REDIRECT", "400 BAD_REQUEST", "401 UNAUTHORIZED", "402 PAYMENT_REQUIRED", "403 FORBIDDEN", "404 NOT_FOUND", "405 METHOD_NOT_ALLOWED", "406 NOT_ACCEPTABLE", "407 PROXY_AUTHENTICATION_REQUIRED", "408 REQUEST_TIMEOUT", "409 CONFLICT", "410 GONE", "411 LENGTH_REQUIRED", "412 PRECONDITION_FAILED", "413 PAYLOAD_TOO_LARGE", "413 REQUEST_ENTITY_TOO_LARGE", "414 URI_TOO_LONG", "414 REQUEST_URI_TOO_LONG", "415 UNSUPPORTED_MEDIA_TYPE", "416 REQUESTED_RANGE_NOT_SATISFIABLE", "417 EXPECTATION_FAILED", "418 I_AM_A_TEAPOT", "419 INSUFFICIENT_SPACE_ON_RESOURCE", "420 METHOD_FAILURE", "421 DESTINATION_LOCKED", "422 UNPROCESSABLE_ENTITY", "423 LOCKED", "424 FAILED_DEPENDENCY", "426 UPGRADE_REQUIRED", "428 PRECONDITION_REQUIRED", "429 TOO_MANY_REQUESTS", "431 REQUEST_HEADER_FIELDS_TOO_LARGE", "451 UNAVAILABLE_FOR_LEGAL_REASONS", "500 INTERNAL_SERVER_ERROR", "501 NOT_IMPLEMENTED", "502 BAD_GATEWAY", "503 SERVICE_UNAVAILABLE", "504 GATEWAY_TIMEOUT", "505 HTTP_VERSION_NOT_SUPPORTED", "506 VARIANT_ALSO_NEGOTIATES", "507 INSUFFICIENT_STORAGE", "508 LOOP_DETECTED", "509 BANDWIDTH_LIMIT_EXCEEDED", "510 NOT_EXTENDED", "511 NETWORK_AUTHENTICATION_REQUIRED" ]
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "405" : {
            "description" : "Method Not Allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Suite Lifecycle" ],
        "summary" : "Remove VMware Aria Suite Lifecycle after an unsuccessful deployment",
        "description" : "Triggers the VMware Aria Suite Lifecycle rollback operation and returns an URL in the headers to track the operation status.",
        "operationId" : "rollbackVrslcm",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "405" : {
            "description" : "Method Not Allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vrslcms" : {
      "get" : {
        "tags" : [ "Suite Lifecycle" ],
        "summary" : "Get all existing VMware Aria Suite Lifecycle instances",
        "operationId" : "getVrslcms",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfVrslcm"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Suite Lifecycle" ],
        "summary" : "Deploy VMware Aria Suite Lifecycle",
        "description" : "Triggers the VMware Aria Suite Lifecycle deployment operation and returns an URL in the headers to track the operation status.",
        "operationId" : "deployVrslcm",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "vrslcmPublicDeploymentSpec",
          "description" : "VMware Aria Suite Lifecycle Deployment Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VrslcmDeploymentSpec"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "405" : {
            "description" : "Method Not Allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vrslcms/validations" : {
      "post" : {
        "tags" : [ "Suite Lifecycle" ],
        "summary" : "Perform validation of the VrslcmDeploymentSpec specification",
        "description" : "Triggers VMware Aria Suite Lifecycle deployment specification validation workflow",
        "operationId" : "validateVrslcm",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "vrslcmPublicDeploymentSpec",
          "description" : "VMware Aria Suite Lifecycle Deployment Specification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VrslcmDeploymentSpec"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "202" : {
            "description" : "Accepted",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          }
        }
      }
    },
    "/v1/vrslcms/validations/{id}" : {
      "get" : {
        "tags" : [ "Suite Lifecycle" ],
        "summary" : "Retrieve the results of a VMware Aria Suite Lifecycle validation by its ID",
        "description" : "Gets the status of given VMware Aria Suite Lifecycle validation workflow by given validation id",
        "operationId" : "getVrslcmValidation",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "VMware Aria Suite Lifecycle validation id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Validation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/vrslcms/{id}" : {
      "put" : {
        "tags" : [ "Suite Lifecycle" ],
        "summary" : "Update the version of VMware Aria Suite Lifecycle based on its ID",
        "description" : "Updates VMware Aria Suite Lifecycle version",
        "operationId" : "updateVrslcmVersionByIdInInventory",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the ID of VMware Aria Suite Lifecycle instance",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "vrslcmDto",
          "description" : "vrslcmDto",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Vrslcm"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string",
              "enum" : [ "100 CONTINUE", "101 SWITCHING_PROTOCOLS", "102 PROCESSING", "103 CHECKPOINT", "200 OK", "201 CREATED", "202 ACCEPTED", "203 NON_AUTHORITATIVE_INFORMATION", "204 NO_CONTENT", "205 RESET_CONTENT", "206 PARTIAL_CONTENT", "207 MULTI_STATUS", "208 ALREADY_REPORTED", "226 IM_USED", "300 MULTIPLE_CHOICES", "301 MOVED_PERMANENTLY", "302 FOUND", "302 MOVED_TEMPORARILY", "303 SEE_OTHER", "304 NOT_MODIFIED", "305 USE_PROXY", "307 TEMPORARY_REDIRECT", "308 PERMANENT_REDIRECT", "400 BAD_REQUEST", "401 UNAUTHORIZED", "402 PAYMENT_REQUIRED", "403 FORBIDDEN", "404 NOT_FOUND", "405 METHOD_NOT_ALLOWED", "406 NOT_ACCEPTABLE", "407 PROXY_AUTHENTICATION_REQUIRED", "408 REQUEST_TIMEOUT", "409 CONFLICT", "410 GONE", "411 LENGTH_REQUIRED", "412 PRECONDITION_FAILED", "413 PAYLOAD_TOO_LARGE", "413 REQUEST_ENTITY_TOO_LARGE", "414 URI_TOO_LONG", "414 REQUEST_URI_TOO_LONG", "415 UNSUPPORTED_MEDIA_TYPE", "416 REQUESTED_RANGE_NOT_SATISFIABLE", "417 EXPECTATION_FAILED", "418 I_AM_A_TEAPOT", "419 INSUFFICIENT_SPACE_ON_RESOURCE", "420 METHOD_FAILURE", "421 DESTINATION_LOCKED", "422 UNPROCESSABLE_ENTITY", "423 LOCKED", "424 FAILED_DEPENDENCY", "426 UPGRADE_REQUIRED", "428 PRECONDITION_REQUIRED", "429 TOO_MANY_REQUESTS", "431 REQUEST_HEADER_FIELDS_TOO_LARGE", "451 UNAVAILABLE_FOR_LEGAL_REASONS", "500 INTERNAL_SERVER_ERROR", "501 NOT_IMPLEMENTED", "502 BAD_GATEWAY", "503 SERVICE_UNAVAILABLE", "504 GATEWAY_TIMEOUT", "505 HTTP_VERSION_NOT_SUPPORTED", "506 VARIANT_ALSO_NEGOTIATES", "507 INSUFFICIENT_STORAGE", "508 LOOP_DETECTED", "509 BANDWIDTH_LIMIT_EXCEEDED", "510 NOT_EXTENDED", "511 NETWORK_AUTHENTICATION_REQUIRED" ]
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "405" : {
            "description" : "Method Not Allowed",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/wsas" : {
      "get" : {
        "tags" : [ "WSA" ],
        "summary" : "Retrieve a list of Workspace ONE Access instances",
        "operationId" : "getWsas",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageOfWsa"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "VcenterReference" : {
      "required" : [ "id" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the vCenter"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the vCenter"
        }
      },
      "description" : "Represents a vCenter reference"
    },
    "PageOfCsr" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Csr"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "Memory" : {
      "properties" : {
        "totalCapacityMB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Total memory in MB"
        },
        "usedCapacityMB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Used memory in MB"
        }
      },
      "description" : "Represents information about memory on a host"
    },
    "OpenSSLCertificateAuthoritySpec" : {
      "required" : [ "commonName", "country", "locality", "organization", "organizationUnit", "state" ],
      "properties" : {
        "commonName" : {
          "type" : "string",
          "example" : "OpenSSL CA",
          "description" : "OpenSSL CA domain name"
        },
        "country" : {
          "type" : "string",
          "example" : "IN",
          "description" : "ISO 3166 country code where company is legally registered"
        },
        "locality" : {
          "type" : "string",
          "example" : "Bengaluru",
          "description" : "The city or locality where company is legally registered"
        },
        "organization" : {
          "type" : "string",
          "example" : "VMware Inc.",
          "description" : "The name under which company is legally registered"
        },
        "organizationUnit" : {
          "type" : "string",
          "example" : "VCF",
          "description" : "Organization with which the certificate is associated"
        },
        "state" : {
          "type" : "string",
          "example" : "Karnataka",
          "description" : "The full name of the state where company is legally registered"
        }
      },
      "description" : "This specification contains OpenSSL CA configuration details"
    },
    "AsyncPatch" : {
      "required" : [ "productVersion", "supportedSkuTypes" ],
      "properties" : {
        "inputSpecUrl" : {
          "type" : "string",
          "description" : "Input spec URL of the async patch bundle"
        },
        "productVersion" : {
          "type" : "string",
          "description" : "Product version of the async patch bundle"
        },
        "sddcHotPatchInfo" : {
          "type" : "object",
          "description" : "Sddc hot patch info for each sddc manager service (lcm, dm, om, commonsvc)",
          "additionalProperties" : {
            "$ref" : "#/definitions/MapOfstringAndListOfSddcHotPatchInfo"
          }
        },
        "supportedSkuTypes" : {
          "type" : "array",
          "example" : "One among: VXRAIL, VSAN",
          "description" : "Supported SKU types of the async patch bundle",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Async patch bundle rest model that is located in the 2.0 manifest, these models are consumed by LCM's async patch workflows to determine if customer can download patch in list and apply."
    },
    "PageOfNsxtIpAddressPool" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/NsxtIpAddressPool"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "VsanRemoteDatastoreClusterSpec" : {
      "properties" : {
        "vsanRemoteDatastoreSpec" : {
          "type" : "array",
          "description" : "List of Remote vSAN datastore configuration for HCI Mesh compute client cluster",
          "items" : {
            "$ref" : "#/definitions/VsanRemoteDatastoreSpec"
          }
        }
      },
      "description" : "vSAN remote datastore configuration for the cluster"
    },
    "ClusterExpansionNetworkSpec" : {
      "properties" : {
        "networkProfiles" : {
          "type" : "array",
          "description" : "The list of network profiles",
          "items" : {
            "$ref" : "#/definitions/ClusterExpansionNetworkProfile"
          }
        },
        "nsxClusterSpec" : {
          "description" : "NSX configuration required for cluster expansion",
          "$ref" : "#/definitions/ClusterExpansionNsxSpec"
        }
      },
      "description" : "This specification contains cluster's network configuration."
    },
    "HostDecommissionSpec" : {
      "required" : [ "fqdn" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the host"
        }
      },
      "description" : "This specification contains host details required to decommission a host from VMware Cloud Foundation"
    },
    "AuthenticatedResource" : {
      "required" : [ "domainName", "resourceId", "resourceIp", "resourceName", "resourceType" ],
      "properties" : {
        "domainName" : {
          "type" : "string",
          "description" : "Domain name"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "Resource ID"
        },
        "resourceIp" : {
          "type" : "string",
          "description" : "Resource IP address"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Resource name"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, BACKUP",
          "description" : "Resource type"
        }
      },
      "description" : "Represents the credential resource in the system"
    },
    "NetworkConfigProfile" : {
      "description" : "This model contains network configuration to be applied on a cluster."
    },
    "EdgeClusterExpansionSpec" : {
      "required" : [ "edgeNodeAdminPassword", "edgeNodeAuditPassword", "edgeNodeRootPassword", "edgeNodeSpecs" ],
      "properties" : {
        "additionalTier1Names" : {
          "type" : "array",
          "description" : "List of names for the additional Tier-1(s) to be created during expansion",
          "items" : {
            "type" : "string"
          }
        },
        "edgeNodeAdminPassword" : {
          "type" : "string",
          "description" : "Edge Password for admin user"
        },
        "edgeNodeAuditPassword" : {
          "type" : "string",
          "description" : "Edge Password for audit user"
        },
        "edgeNodeRootPassword" : {
          "type" : "string",
          "description" : "Edge Password for root user."
        },
        "edgeNodeSpecs" : {
          "type" : "array",
          "description" : "Specifications for Edge Node",
          "items" : {
            "$ref" : "#/definitions/NsxTEdgeNodeSpec"
          }
        },
        "newIpAddressPoolSpecs" : {
          "type" : "array",
          "description" : "Specifications for new NSX IP address pool(s)",
          "items" : {
            "$ref" : "#/definitions/IpAddressPoolSpec"
          }
        },
        "skipTepRoutabilityCheck" : {
          "type" : "boolean",
          "description" : "Set to true to bypass normal ICMP-based check of Edge TEP / host TEP routability (default is false, meaning do check)"
        },
        "tier1Unhosted" : {
          "type" : "boolean",
          "description" : "Select whether all Tier-1(s) being created per this spec are hosted on the Edge cluster or not (default is false, meaning hosted)"
        }
      },
      "description" : "This specification contains the parameters required to expand a NSX edge cluster."
    },
    "NsxTClusterSpec" : {
      "properties" : {
        "geneveVlanId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Vlan id of Geneve. (This field is deprecated, instead please use transportVlan in uplinkProfiles)",
          "deprecated" : true
        },
        "ipAddressPoolSpec" : {
          "description" : "The IP address pool specification. (This field is deprecated. Please use ipAddressPoolsSpec instead for providing IP address pools)",
          "$ref" : "#/definitions/IpAddressPoolSpec"
        },
        "ipAddressPoolsSpec" : {
          "type" : "array",
          "description" : "The list of IP address pools specification",
          "items" : {
            "$ref" : "#/definitions/IpAddressPoolSpec"
          }
        },
        "uplinkProfiles" : {
          "type" : "array",
          "description" : "The list of uplink profile specifications.",
          "items" : {
            "$ref" : "#/definitions/UplinkProfile"
          }
        }
      },
      "description" : "This specification contains NSX configuration for a new cluster."
    },
    "EntityRest" : {
      "properties" : {
        "childEntities" : {
          "type" : "array",
          "description" : "Child entities of this entity",
          "items" : {
            "$ref" : "#/definitions/EntityRest"
          }
        },
        "classifications" : {
          "type" : "array",
          "description" : "Classifications of the entity",
          "items" : {
            "$ref" : "#/definitions/Classification"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the entity"
        },
        "id" : {
          "type" : "string",
          "description" : "Id of the entity"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the entity"
        },
        "properties" : {
          "type" : "object",
          "description" : "Properties for this entity"
        },
        "sourceAddress" : {
          "type" : "string",
          "description" : "The address of the source"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of the entity"
        }
      },
      "description" : "Entity model representing the physical data output of the assessment workflow."
    },
    "SubTask" : {
      "properties" : {
        "completionTimestamp" : {
          "type" : "string",
          "description" : "Sub-task completion timestamp"
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "Sub-task creation timestamp"
        },
        "description" : {
          "type" : "string",
          "description" : "Sub-task description"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "Sub-task name"
        },
        "resources" : {
          "type" : "array",
          "description" : "List of resources associated with sub-task",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        },
        "stages" : {
          "type" : "array",
          "description" : "List of stages of the sub-task",
          "items" : {
            "$ref" : "#/definitions/Stage"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED, NOT_APPLICABLE",
          "description" : "Sub-task status"
        },
        "subTasks" : {
          "type" : "array",
          "description" : "List of child subtasks associated with this subtask",
          "items" : {
            "$ref" : "#/definitions/SubTask"
          }
        },
        "type" : {
          "type" : "string",
          "description" : "Sub-task type"
        }
      },
      "description" : "Represents a sub-task"
    },
    "Portgroup" : {
      "required" : [ "name", "transportType" ],
      "properties" : {
        "activeUplinks" : {
          "type" : "array",
          "description" : "List of active uplinks",
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "Port group name"
        },
        "portBindingType" : {
          "type" : "string",
          "example" : "One among: STATIC, DYNAMIC, EPHEMERAL",
          "description" : "Port binding type"
        },
        "standbyUplinks" : {
          "type" : "array",
          "description" : "List of standby uplinks",
          "items" : {
            "type" : "string"
          }
        },
        "transportType" : {
          "type" : "string",
          "example" : "One among: VSAN, VMOTION, MANAGEMENT, PUBLIC, NFS, VREALIZE, ISCSI, EDGE_INFRA_OVERLAY_UPLINK, VM_MANAGEMENT",
          "description" : "Port group transport type"
        },
        "vlanId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "VLAN ID"
        }
      },
      "description" : "Portgroup associated with the vSphere Distributed Switch"
    },
    "Vcenter" : {
      "properties" : {
        "domain" : {
          "description" : "Information about the domain this vCenter is part of",
          "$ref" : "#/definitions/DomainReference"
        },
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the vCenter"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the vCenter"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP address of the vCenter"
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the vCenter"
        }
      },
      "description" : "vCenter representation"
    },
    "PersonalitySpec" : {
      "required" : [ "personalityId" ],
      "properties" : {
        "hardwareSupportSpecs" : {
          "type" : "array",
          "description" : "Hardware Support Specifications for Firmware upgrade",
          "items" : {
            "$ref" : "#/definitions/HardwareSupportSpec"
          }
        },
        "personalityId" : {
          "type" : "string",
          "description" : "Personality ID for vLCM based Upgrade"
        }
      },
      "description" : "Personality Specification for vLCM based upgrade"
    },
    "NasVolumeSpec" : {
      "required" : [ "path", "readOnly", "serverName" ],
      "properties" : {
        "path" : {
          "type" : "string",
          "description" : "Shared directory path used for NFS based cluster creation"
        },
        "readOnly" : {
          "type" : "boolean",
          "description" : "Readonly is used to identify whether to mount the directory as readOnly or not"
        },
        "serverName" : {
          "type" : "array",
          "description" : "NFS Server name used for cluster creation",
          "items" : {
            "type" : "string"
          }
        },
        "userTag" : {
          "type" : "string",
          "description" : "User tag used to annotate NFS share"
        }
      },
      "description" : "NAS configuration for NFS based cluster"
    },
    "NtpServer" : {
      "required" : [ "ipAddress" ],
      "properties" : {
        "ipAddress" : {
          "type" : "string",
          "example" : "10.0.0.250",
          "description" : "IP address/FQDN of NTP server"
        }
      },
      "description" : "NTP server details"
    },
    "TimeZone" : {
      "properties" : {
        "displayName" : {
          "type" : "string"
        },
        "dstsavings" : {
          "type" : "integer",
          "format" : "int32"
        },
        "id" : {
          "type" : "string"
        },
        "rawOffset" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ProxySpec" : {
      "properties" : {
        "host" : {
          "type" : "string",
          "example" : "10.0.0.250",
          "description" : "IP address/FQDN of proxy server"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "3128",
          "description" : "Port of proxy server"
        }
      },
      "description" : "Spec contains parameters for proxy settings"
    },
    "CertificateAuthorityCreationSpec" : {
      "properties" : {
        "microsoftCertificateAuthoritySpec" : {
          "description" : "Microsoft Certificate Authority specification",
          "$ref" : "#/definitions/MicrosoftCertificateAuthoritySpec"
        },
        "openSSLCertificateAuthoritySpec" : {
          "description" : "OpenSSL Certificate Authority specification",
          "$ref" : "#/definitions/OpenSSLCertificateAuthoritySpec"
        }
      },
      "description" : "This specification contains Certificate Authority (CA) creation details. Either openSSLCertificateAuthoritySpec or microsoftCertificateAuthoritySpec should be specified."
    },
    "Applicability" : {
      "required" : [ "versionApplicability", "skuType" ],
      "properties" : {
        "versionApplicability" : {
          "type" : "array",
          "description" : "List of product version related applicability",
          "items" : {
            "$ref" : "#/definitions/VersionApplicability"
          }
        },
        "skuType" : {
          "type" : "string",
          "example" : "One among: VXRAIL, VSAN, VSRN_VXRAIL",
          "description" : "Product's SkuType for Configuration Drift"
        }
      },
      "description" : "Represents all applicability requirements for a Configuration Drift"
    },
    "SsoDomainEntity" : {
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The ID of the SSO domain entity"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the SSO domain entity"
        },
        "type" : {
          "type" : "string",
          "example" : "One among: USER, GROUP",
          "description" : "The type of the SSO domain entity"
        }
      },
      "description" : "Represents SSO domain entity"
    },
    "SoftwareInfo" : {
      "required" : [ "baseImage" ],
      "properties" : {
        "addOn" : {
          "description" : "Personality addOn",
          "$ref" : "#/definitions/AddOnInfo"
        },
        "baseImage" : {
          "description" : "Personality base image",
          "$ref" : "#/definitions/BaseImageInfo"
        },
        "components" : {
          "type" : "object",
          "description" : "Personality components",
          "additionalProperties" : {
            "$ref" : "#/definitions/ComponentInfo"
          }
        },
        "hardwareSupport" : {
          "description" : "Personality hardware support",
          "$ref" : "#/definitions/HardwareSupportInfo"
        }
      },
      "description" : "SoftwareSpec contains base os, components, hardware support, addOn metadata to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "UpgradablesResource" : {
      "properties" : {
        "resourceUpgradableErrors" : {
          "type" : "array",
          "description" : "Set of resources with their corresponding upgradable errors.",
          "items" : {
            "$ref" : "#/definitions/ResourceUpgradableError"
          }
        },
        "upgradables" : {
          "type" : "array",
          "description" : "Set of upgradables representing the upgrade capability of resources.",
          "items" : {
            "$ref" : "#/definitions/Upgradable"
          }
        }
      },
      "description" : "Upgradables resource represents the upgrade capability of resources along with resource specific upgradable errors. Upgradable contains the bundle(using what), resource(on which) and its associated resources/software components that can be upgraded. ResourceUpgradableError contains the upgradable calculated errors for a resource while determining its upgradables."
    },
    "PageOfNetwork" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Network"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "NsxtTransportZone" : {
      "required" : [ "networkName", "zoneName" ],
      "properties" : {
        "networkName" : {
          "type" : "string",
          "description" : "Transport zone network name"
        },
        "zoneName" : {
          "type" : "string",
          "description" : "Transport zone name"
        }
      },
      "description" : "Spec contains required parameters for NSX Transport Zone",
      "deprecated" : true
    },
    "BundleRecall" : {
      "required" : [ "recalledBundleIds", "replacementBundleStatus" ],
      "properties" : {
        "recalledBundleIds" : {
          "type" : "array",
          "description" : "List of Bundle IDs that are recalled",
          "items" : {
            "type" : "string"
          }
        },
        "replacementBundleIds" : {
          "type" : "array",
          "description" : "List of Bundle IDs that act as replacement",
          "items" : {
            "type" : "string"
          }
        },
        "replacementBundleStatus" : {
          "type" : "string",
          "example" : "One among: NONE, PENDING, READY",
          "description" : "Status of bundle replacement."
        }
      },
      "description" : "Bundle Recall model for collection of bundles that are recalled with their replacements if applicable."
    },
    "ComputeSpec" : {
      "required" : [ "clusterSpecs" ],
      "properties" : {
        "clusterSpecs" : {
          "type" : "array",
          "description" : "List of clusters to be added to workload domain",
          "items" : {
            "$ref" : "#/definitions/ClusterSpec"
          }
        },
        "skipFailedHosts" : {
          "type" : "boolean",
          "example" : "false",
          "description" : "Skip failed ESXi Hosts and proceed with the rest of the ESXi Hosts during add Cluster. This is not supported for VCF VxRail."
        }
      },
      "description" : "This specification contains the parameters required to add each cluster to a workload domain"
    },
    "PageOfVasaProvider" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/VasaProvider"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ProductVersion" : {
      "required" : [ "name", "publicName", "version" ],
      "properties" : {
        "additionalMetadata" : {
          "type" : "string",
          "description" : "any additional metadata"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the product. e.g ESX"
        },
        "publicName" : {
          "type" : "string",
          "description" : "Public name of the product, e.g VMware ESXi"
        },
        "releaseURL" : {
          "type" : "string",
          "description" : "URL for the release."
        },
        "version" : {
          "type" : "string",
          "description" : "Version for the product, e.g 6.7.0-11675023"
        }
      },
      "description" : "Details of the product/component for the release."
    },
    "HostSpec" : {
      "required" : [ "id" ],
      "properties" : {
        "azName" : {
          "type" : "string",
          "description" : "Availability Zone Name \n(This is required while performing a stretched cluster expand operation)"
        },
        "hostName" : {
          "type" : "string",
          "description" : "Host name of the vSphere host"
        },
        "hostNetworkSpec" : {
          "description" : "Network Details of the vSphere host",
          "$ref" : "#/definitions/HostNetworkSpec"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of a vSphere host in the free pool"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP address of the vSphere host"
        },
        "licenseKey" : {
          "type" : "string",
          "description" : "License key of a vSphere host in the free pool \n(This is required except in cases where the ESXi host has already been licensed outside of the VMware Cloud Foundation system)"
        },
        "password" : {
          "type" : "string",
          "description" : "SSH password of the vSphere host "
        },
        "serialNumber" : {
          "type" : "string",
          "description" : "Serial Number of the vSphere host"
        },
        "sshThumbprint" : {
          "type" : "string",
          "description" : "SSH thumbprint(fingerprint) of the vSphere host \nNote:This field will be mandatory in future releases."
        },
        "username" : {
          "type" : "string",
          "description" : "Username of the vSphere host"
        }
      },
      "description" : "This specification contains information required to add vSphere host to a cluster"
    },
    "PageOfVcfService" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/VcfService"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "VersionApplicability" : {
      "properties" : {
        "maxVersion" : {
          "type" : "string",
          "description" : "The maximum version for current product to apply current Configuration Drift"
        },
        "minVersion" : {
          "type" : "string",
          "description" : "The minimum version for current product to apply current Configuration Drift"
        },
        "productType" : {
          "type" : "string",
          "example" : "SDDC_MANAGER|VCENTER|ESXI|NSXT_MANAGER|VXRAIL",
          "description" : "Product type"
        }
      },
      "description" : "Represents the version applicability of a Configuration Drift for a product"
    },
    "SupportBundleSpec" : {
      "properties" : {
        "logs" : {
          "description" : "Logs of different components.",
          "$ref" : "#/definitions/Logs"
        },
        "options" : {
          "description" : "Sos options for support bundle collection.",
          "$ref" : "#/definitions/SupportBundleOption"
        },
        "scope" : {
          "description" : "Domain and cluster under which logs should be collected.",
          "$ref" : "#/definitions/SupportBundleScope"
        }
      }
    },
    "PageOfobject" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "type" : "object"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "NiocBandwidthAllocationSpec" : {
      "required" : [ "type" ],
      "properties" : {
        "niocTrafficResourceAllocation" : {
          "description" : "DvsHostInfrastructureTrafficResourceAllocation",
          "$ref" : "#/definitions/NiocTrafficResourceAllocation"
        },
        "type" : {
          "type" : "string",
          "description" : "DvsHostInfrastructureTrafficResource resource type"
        }
      },
      "description" : "This specification contains network traffic per resource type"
    },
    "RestoreSpec" : {
      "required" : [ "backupFile", "elements", "encryption" ],
      "properties" : {
        "backupFile" : {
          "type" : "string",
          "description" : "Backup file name"
        },
        "elements" : {
          "type" : "array",
          "description" : "List of elements to be restored",
          "items" : {
            "$ref" : "#/definitions/BackupResource"
          }
        },
        "encryption" : {
          "description" : "Encryption",
          "$ref" : "#/definitions/Encryption"
        }
      },
      "description" : "Restore Specification"
    },
    "VsanDatastoreSpec" : {
      "required" : [ "datastoreName" ],
      "properties" : {
        "datastoreName" : {
          "type" : "string",
          "description" : "Datastore name used for cluster creation"
        },
        "dedupAndCompressionEnabled" : {
          "type" : "boolean",
          "description" : "Enable vSAN deduplication and compression"
        },
        "esaConfig" : {
          "description" : "Enable vSAN ESA configuration.",
          "$ref" : "#/definitions/EsaConfig"
        },
        "failuresToTolerate" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of vSphere host failures to tolerate in the vSAN cluster"
        },
        "licenseKey" : {
          "type" : "string",
          "description" : "License key for the vSAN data store to be applied in vCenter"
        }
      },
      "description" : "This specification contains cluster storage configuration for vSAN"
    },
    "VxRailArrayAssociationContext" : {
      "properties" : {
        "arrayAttributeIdsKeyValue" : {
          "type" : "object",
          "description" : "Key, Value map that holds the simple attributes on the array item that are currently supported.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "parent" : {
          "description" : "Details that holds the association with the parent for nested objects",
          "$ref" : "#/definitions/VxRailArrayAssociationContext"
        }
      },
      "description" : "Contains the mapping between custom attributes and the supported attributes on the array item object."
    },
    "CheckSetRunInput" : {
      "required" : [ "queryId", "resources" ],
      "properties" : {
        "queryId" : {
          "type" : "string",
          "description" : "Id of the query the selection was based on"
        },
        "resources" : {
          "type" : "array",
          "description" : "Information about the resource and its selection",
          "items" : {
            "$ref" : "#/definitions/CheckSetResourceSelection"
          }
        }
      },
      "description" : "Input to start a check run over a selection of check-sets and resources"
    },
    "TrustedCertificate" : {
      "required" : [ "alias", "certificate" ],
      "properties" : {
        "alias" : {
          "type" : "string",
          "example" : "vcf_59:24:D5:18:04:A0:26:B0:A4:05:EA:82:60:95:82:A2:4B:F6:31:FB:81:93:01:F3:29:7D:34:9C:D3:05:39:90",
          "description" : "Certificate alias"
        },
        "certificate" : {
          "type" : "string",
          "example" : "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----",
          "description" : "Certificate in PEM format"
        }
      },
      "description" : "The Trusted Certificate details."
    },
    "BaseAlias" : {
      "required" : [ "aliases", "version" ],
      "properties" : {
        "aliases" : {
          "type" : "array",
          "description" : "List of Alias versions",
          "items" : {
            "type" : "string"
          }
        },
        "version" : {
          "type" : "string",
          "description" : "Base version"
        }
      },
      "description" : "Base Alias representation"
    },
    "MapOfstringAndListOfSddcHotPatchInfo" : {
      "type" : "object",
      "additionalProperties" : {
        "items" : {
          "$ref" : "#/definitions/SddcHotPatchInfo"
        },
        "type" : "array"
      }
    },
    "PersonalityUploadSpecReferred" : {
      "required" : [ "clusterId", "vCenterId" ],
      "properties" : {
        "clusterId" : {
          "type" : "string",
          "description" : "Source cluster UUID from VCF inventory"
        },
        "vCenterId" : {
          "type" : "string"
        },
        "vcenterId" : {
          "type" : "string"
        }
      },
      "description" : "Personality upload specification for uploading the personality from a referred vCentercluster. This mode of uploading personality is useful when the source vCenter cluster is internal to the target VCF deployment."
    },
    "ProductInfo" : {
      "properties" : {
        "errorResponse" : {
          "description" : "Error Response while fetching product info",
          "$ref" : "#/definitions/Error"
        },
        "licenseKey" : {
          "type" : "string",
          "example" : "XXXXX-XXXXX-XXXXX-XXXXX-XXXXX",
          "description" : "License key of product"
        },
        "licenseKeyExpirationDate" : {
          "type" : "string",
          "example" : "2021-04-08T04:37:51.662Z",
          "description" : "License key expiration date"
        },
        "licenseKeyStatus" : {
          "type" : "string",
          "example" : "One among: EXPIRED, ACTIVE, NEVER_EXPIRES",
          "description" : "License key status"
        },
        "licensingMode" : {
          "type" : "string",
          "example" : "One among: SUBSCRIPTION, PERPETUAL",
          "description" : "Licensing Mode"
        },
        "type" : {
          "type" : "string",
          "example" : "One among: VCENTER, NSXT, VSAN, WCP, ESXI",
          "description" : "Product type"
        }
      },
      "description" : "Product Info and License Key Info"
    },
    "TrustedCertificateSpec" : {
      "required" : [ "certificate", "certificateUsageType" ],
      "properties" : {
        "certificate" : {
          "type" : "string",
          "example" : "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----",
          "description" : "Certificate in PEM format"
        },
        "certificateUsageType" : {
          "type" : "string",
          "example" : "TRUSTED_FOR_OUTBOUND",
          "description" : "Certificate usage"
        }
      },
      "description" : "This specification contains certificate & certificate usage"
    },
    "Vrslcm" : {
      "required" : [ "fqdn", "id", "ipAddress", "status", "version" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "description" : "Fully Qualified Domain Name"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the VMware Aria Suite Lifecycle instance"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP Address of VMware Aria Suite Lifecycle appliance"
        },
        "status" : {
          "type" : "string",
          "description" : "The state of the current product instance"
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the product that is currently running on the environment"
        }
      },
      "description" : "This specification contains information related to the existing VMware Aria Suite Lifecycle instance deployment"
    },
    "CheckSetCandidates" : {
      "properties" : {
        "checkSetId" : {
          "type" : "string",
          "description" : "Id of the check-set"
        },
        "checkSetName" : {
          "type" : "string",
          "description" : "Name of the check-set"
        },
        "checkSetType" : {
          "type" : "string",
          "description" : "Type of the check-set"
        }
      },
      "description" : "Represents a check-set id that can be used to run checks for a resource"
    },
    "SddcTask" : {
      "properties" : {
        "creationTimestamp" : {
          "type" : "string",
          "description" : "SDDC Task creation timestamp"
        },
        "id" : {
          "type" : "string",
          "description" : "SDDC ID",
          "minLength" : 3,
          "maxLength" : 256
        },
        "localizableNamePack" : {
          "description" : "Localizable SDDC Task name",
          "$ref" : "#/definitions/MessagePack"
        },
        "name" : {
          "type" : "string",
          "description" : "Task name"
        },
        "sddcSubTasks" : {
          "type" : "array",
          "description" : "All SDDC Sub-Tasks",
          "items" : {
            "$ref" : "#/definitions/SddcSubTask"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "One among: IN_PROGRESS, COMPLETED_WITH_SUCCESS, ROLLBACK_SUCCESS, COMPLETED_WITH_FAILURE",
          "description" : "SDDC Task status"
        }
      },
      "description" : "Represents a SDDC task"
    },
    "BgpPeerSpec" : {
      "required" : [ "asn", "ip", "password" ],
      "properties" : {
        "asn" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "ASN of Peer"
        },
        "ip" : {
          "type" : "string",
          "description" : "BGP Peer IP"
        },
        "password" : {
          "type" : "string",
          "description" : "BGP Peer Password"
        }
      },
      "description" : "This specification contains configuration inputs required for BGP configuration for an uplink"
    },
    "SddcCredentials" : {
      "required" : [ "password", "username" ],
      "properties" : {
        "password" : {
          "type" : "string",
          "description" : "Password"
        },
        "username" : {
          "type" : "string",
          "example" : "root",
          "description" : "Username"
        }
      },
      "description" : "Credentials contains the username and password"
    },
    "NiocBandwidthAllocation" : {
      "properties" : {
        "niocTrafficResourceAllocation" : {
          "description" : "Specify network traffic allocation for a resource",
          "$ref" : "#/definitions/NiocTrafficResourceAllocation"
        },
        "type" : {
          "type" : "string",
          "example" : "Example: management, faultTolerance, vmotion, virtualMachine, iSCSI, nfs, hbr, vsan, vdp etc.",
          "description" : "Host infrastructure traffic type"
        }
      },
      "description" : "Network traffic per resource type"
    },
    "PageOfTask" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Task"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "Personality" : {
      "required" : [ "description", "displayName", "imageChecksum", "imageSize", "personalityId", "personalityName", "softwareInfo", "version", "vsphereExportedIsoPath", "vsphereExportedJsonPath", "vsphereExportedZipPath" ],
      "properties" : {
        "createdBy" : {
          "type" : "string",
          "description" : "Personality created by"
        },
        "description" : {
          "type" : "string",
          "example" : "ESXi 7.0 Dell Personality",
          "description" : "Personality description"
        },
        "displayName" : {
          "type" : "string",
          "example" : "ESXi 7.0 Dell Personality",
          "description" : "Personality displayName"
        },
        "imageChecksum" : {
          "type" : "string",
          "description" : "Personality image checksum"
        },
        "imageSize" : {
          "type" : "string",
          "description" : "Personality image size"
        },
        "kbArticles" : {
          "description" : "Personality kb articles",
          "$ref" : "#/definitions/URL"
        },
        "personalityId" : {
          "type" : "string",
          "description" : "Personality id"
        },
        "personalityName" : {
          "type" : "string",
          "description" : "Personality name"
        },
        "releaseDate" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Personality Release date"
        },
        "softwareInfo" : {
          "description" : "Personality software spec",
          "$ref" : "#/definitions/SoftwareInfo"
        },
        "tags" : {
          "type" : "array",
          "description" : "Personality tags",
          "items" : {
            "type" : "string"
          }
        },
        "version" : {
          "type" : "string",
          "description" : "Personality Version"
        },
        "vsphereExportedIsoPath" : {
          "type" : "string",
          "description" : "Personality depot path"
        },
        "vsphereExportedJsonPath" : {
          "type" : "string",
          "description" : "Personality depot path"
        },
        "vsphereExportedZipPath" : {
          "type" : "string",
          "description" : "Personality depot path"
        }
      },
      "description" : "Personality contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "PageOfNsxtTransportZoneInfo" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/NsxtTransportZoneInfo"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ErrorResponse" : {
      "properties" : {
        "arguments" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "cause" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ErrorCause"
          }
        },
        "context" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "errorCode" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "nestedErrors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ErrorResponse"
          }
        },
        "referenceToken" : {
          "type" : "string"
        },
        "remediationMessage" : {
          "type" : "string"
        }
      }
    },
    "MemoryInfo" : {
      "properties" : {
        "total" : {
          "description" : "Total value",
          "$ref" : "#/definitions/DataMetric"
        },
        "used" : {
          "description" : "Used value",
          "$ref" : "#/definitions/DataMetric"
        }
      },
      "description" : "Represents a memory metric with used and total for a resource"
    },
    "PageOfHost" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Host"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "NtpConfiguration" : {
      "required" : [ "ntpServers" ],
      "properties" : {
        "ntpServers" : {
          "type" : "array",
          "description" : "List of NTP servers",
          "items" : {
            "$ref" : "#/definitions/NtpServer"
          }
        }
      },
      "description" : "NTP Configuration"
    },
    "IpAddress" : {
      "properties" : {
        "ipAddress" : {
          "type" : "string",
          "description" : "IP address"
        },
        "type" : {
          "type" : "string",
          "example" : "One among: MANAGEMENT, VSAN, VMOTION, NFS",
          "description" : "Type of IP addresss"
        }
      },
      "description" : "Represents IP address"
    },
    "SddcManager" : {
      "properties" : {
        "basicAuthDetails" : {
          "description" : "Basic auth details",
          "$ref" : "#/definitions/BasicAuthDetails"
        },
        "domain" : {
          "description" : "Information about the domain this SDDC Manager is part of",
          "$ref" : "#/definitions/DomainReference"
        },
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the SDDC Manager"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the SDDC Manager"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP Address of the SDDC Manager"
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the SDDC Manager"
        }
      },
      "description" : "SDDC Manager representation"
    },
    "VasaProviderSpec" : {
      "required" : [ "storageContainerId", "storageProtocolType", "userId", "vasaProviderId" ],
      "properties" : {
        "storageContainerId" : {
          "type" : "string",
          "description" : "UUID of the VASA storage container"
        },
        "storageProtocolType" : {
          "type" : "string",
          "example" : "One among: ISCSI, NFS, FC",
          "description" : "Type of the VASA storage protocol"
        },
        "userId" : {
          "type" : "string",
          "description" : "UUID of the VASA storage user"
        },
        "vasaProviderId" : {
          "type" : "string",
          "description" : "UUID of the VASA storage provider"
        }
      },
      "description" : "This specification contains cluster storage configuration for vVol"
    },
    "HostCriterion" : {
      "properties" : {
        "arguments" : {
          "type" : "object",
          "description" : "Arguments required for a particular criterion",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the criterion"
        },
        "name" : {
          "type" : "string",
          "example" : "One among: HOST_COMPATIBLE_WITH_CLUSTER_USING_PNICS, UNMANAGED_HOSTS_IN_VCENTER, UNMANAGED_HOSTS_IN_HCIMGR",
          "description" : "Name of the criterion"
        }
      },
      "description" : "Represents a criterion for querying the host"
    },
    "PageOfSsoDomainEntity" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/SsoDomainEntity"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "LdapSpec" : {
      "required" : [ "domainName", "password", "sourceDetails", "type", "username" ],
      "properties" : {
        "domainAlias" : {
          "type" : "string",
          "description" : "The optional alias to associate the domain name"
        },
        "domainName" : {
          "type" : "string",
          "description" : "The name to associate with the created domain"
        },
        "password" : {
          "type" : "string",
          "description" : "Password to connect to the ldap(s) server"
        },
        "sourceDetails" : {
          "description" : "Details of the Identity Source",
          "$ref" : "#/definitions/SourceDetails"
        },
        "type" : {
          "type" : "string",
          "example" : "One among: OpenLdap, ActiveDirectory",
          "description" : "The type of the LDAP Server"
        },
        "username" : {
          "type" : "string",
          "description" : "User name to connect to ldap(s) server"
        }
      },
      "description" : "The LDAP specification when the protocol is LDAP"
    },
    "NetworkPoolReference" : {
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the network pool"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the network pool"
        }
      },
      "description" : "Represents a network pool reference"
    },
    "PersonalityUploadSpec" : {
      "required" : [ "uploadMode" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Personality name"
        },
        "uploadMode" : {
          "type" : "string",
          "example" : "RAW, RAW_WITH_FILE_UPLOAD_ID, REFERRED",
          "description" : "Personality upload mode"
        },
        "uploadSpecRawMode" : {
          "description" : "Personality upload spec for upload from RAW files",
          "$ref" : "#/definitions/PersonalityUploadSpecRaw"
        },
        "uploadSpecRawWithFileUploadIdMode" : {
          "description" : "Personality upload spec for upload using file upload id",
          "$ref" : "#/definitions/PersonalityUploadSpecRawWithFileUploadId"
        },
        "uploadSpecReferredMode" : {
          "description" : "Personality upload spec for upload from REFERRED vcenter cluster",
          "$ref" : "#/definitions/PersonalityUploadSpecReferred"
        }
      },
      "description" : "Personality upload specification. This spec is used in personality upload API."
    },
    "BasicAuthDetails" : {
      "required" : [ "status" ],
      "properties" : {
        "status" : {
          "type" : "string",
          "example" : "One among: ENABLED, DISABLED",
          "description" : "Basic auth status"
        },
        "username" : {
          "type" : "string",
          "description" : "Basic auth username"
        }
      },
      "description" : "Basic auth details"
    },
    "Upgrade" : {
      "required" : [ "bundleId", "id", "resourceType", "resourceUpgradeSpecs", "status", "taskId" ],
      "properties" : {
        "bundleId" : {
          "type" : "string",
          "description" : "Bundle ID for Upgrade"
        },
        "id" : {
          "type" : "string",
          "description" : "ID for Upgrade"
        },
        "nsxtUpgradeUserInputSpec" : {
          "description" : "NSX upgrade specifications",
          "$ref" : "#/definitions/NsxtUpgradeUserInputSpec"
        },
        "parallelUpgrade" : {
          "type" : "boolean",
          "description" : "Boolean to represent components will be upgraded in parallel on not"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: DOMAIN, CLUSTER, UNASSIGNED_HOST",
          "description" : "Resource Type for Upgrade"
        },
        "resourceUpgradeSpecs" : {
          "type" : "array",
          "description" : "Resource Upgrade Specifications",
          "items" : {
            "$ref" : "#/definitions/ResourceUpgradeSpec"
          }
        },
        "status" : {
          "type" : "string",
          "description" : "Overall upgrade status"
        },
        "taskId" : {
          "type" : "string",
          "description" : "Task ID associated with upgrade"
        }
      },
      "description" : "Upgrade object which contain details regarding the upgrade"
    },
    "VcenterSpec" : {
      "required" : [ "datacenterName", "name", "networkDetailsSpec", "rootPassword" ],
      "properties" : {
        "datacenterName" : {
          "type" : "string",
          "description" : "vCenter datacenter name"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the vCenter virtual machine"
        },
        "networkDetailsSpec" : {
          "description" : "Network spec details of the vCenter virtual machine",
          "$ref" : "#/definitions/NetworkDetailsSpec"
        },
        "rootPassword" : {
          "type" : "string",
          "description" : "vCenter root shell password"
        },
        "storageSize" : {
          "type" : "string",
          "example" : "One among:lstorage, xlstorage",
          "description" : "VCenter storage size"
        },
        "vmSize" : {
          "type" : "string",
          "example" : "One among:xlarge, large, medium, small, tiny",
          "description" : "VCenter VM size"
        }
      },
      "description" : "This specification contains the installation and configuration of vCenter in a workload domain"
    },
    "SddcHotPatchInfo" : {
      "required" : [ "sddcHotPatchMinTargetVcfVersion", "version" ],
      "properties" : {
        "sddcHotPatchMinTargetVcfVersion" : {
          "type" : "string",
          "description" : "Sddc Hot patch min target version"
        },
        "version" : {
          "type" : "string",
          "description" : "Product version"
        }
      },
      "description" : "Sddc Hot patch info rest model that is located in the 2.0 manifest, as part of the async patch catalog."
    },
    "MicrosoftCertificateAuthoritySpec" : {
      "required" : [ "secret", "serverUrl", "templateName", "username" ],
      "properties" : {
        "secret" : {
          "type" : "string",
          "example" : "********",
          "description" : "CA server password"
        },
        "serverUrl" : {
          "type" : "string",
          "example" : "https://sfo-ad.rainpole.io/certsrv",
          "description" : "CA server url"
        },
        "templateName" : {
          "type" : "string",
          "example" : "WebServer",
          "description" : "CA server template name"
        },
        "username" : {
          "type" : "string",
          "example" : "Administrator",
          "description" : "CA server username"
        }
      },
      "description" : "This specification contains Microsoft CA configuration details"
    },
    "StretchClusterNetworkProfile" : {
      "required" : [ "name", "nsxtHostSwitchConfigs" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "The network profile description"
        },
        "name" : {
          "type" : "string",
          "description" : "The network profile name"
        },
        "nsxtHostSwitchConfigs" : {
          "type" : "array",
          "description" : "The list of NSX host switch configurations",
          "items" : {
            "$ref" : "#/definitions/NsxtHostSwitchConfig"
          }
        }
      },
      "description" : "This specification contains the host switch configurations for the NSX transport nodes belonging to Secondary AZ."
    },
    "CredentialExpirationCheck" : {
      "properties" : {
        "completionTimestamp" : {
          "type" : "string",
          "description" : "Completion timestamp"
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "Creation timestamp"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "expiry" : {
          "description" : "Expiration details of credential",
          "$ref" : "#/definitions/ExpirationDetails"
        },
        "id" : {
          "type" : "string",
          "description" : "Credential ID"
        },
        "resource" : {
          "description" : "The resource which owns the credential",
          "$ref" : "#/definitions/AuthenticatedResource"
        },
        "username" : {
          "type" : "string",
          "description" : "Username"
        }
      },
      "description" : "Represents credential expiration check details"
    },
    "PackageSpec" : {
      "required" : [ "name", "version" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Package name"
        },
        "version" : {
          "type" : "string",
          "description" : "Package version"
        }
      },
      "description" : "Hardware Support Package Specification"
    },
    "ResourcePoolSpec" : {
      "required" : [ "memoryReservationExpandable", "name" ],
      "properties" : {
        "cpuLimit" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "CPU limit, default -1 (unlimited)"
        },
        "cpuReservationExpandable" : {
          "type" : "boolean",
          "description" : "Is CPU reservation expandable, default true"
        },
        "cpuReservationMhz" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "CPU reservation in Mhz"
        },
        "cpuReservationPercentage" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "CPU reservation percentage, from 0 to 100, default 0",
          "minimum" : 0.0,
          "maximum" : 100.0
        },
        "cpuSharesLevel" : {
          "type" : "string",
          "description" : "CPU shares level, default 'normal'",
          "enum" : [ "custom", "high", "low", "normal" ]
        },
        "cpuSharesValue" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "CPU shares value, only required when shares level is 'normal'"
        },
        "memoryLimit" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Memory limit, default -1 (unlimited)"
        },
        "memoryReservationExpandable" : {
          "type" : "boolean",
          "description" : "Is Memory reservation expandable, default true"
        },
        "memoryReservationMb" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Memory reservation in MB"
        },
        "memoryReservationPercentage" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Memory reservation percentage, from 0 to 100, default 0",
          "minimum" : 0.0,
          "maximum" : 100.0
        },
        "memorySharesLevel" : {
          "type" : "string",
          "description" : "Memory shares level. default 'normal'",
          "enum" : [ "custom", "high", "low", "normal" ]
        },
        "memorySharesValue" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Memory shares value, only required when shares level is '0'"
        },
        "name" : {
          "type" : "string",
          "description" : "Resource Pool name"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of resource pool",
          "enum" : [ "management", "compute", "network" ]
        }
      },
      "description" : "Spec contains parameters for Resource Pool"
    },
    "Validation" : {
      "properties" : {
        "additionalProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the validation"
        },
        "executionStatus" : {
          "type" : "string",
          "example" : "One among: IN_PROGRESS, FAILED, COMPLETED, SKIPPED, CANCELLED, CANCELLATION_IN_PROGRESS",
          "description" : "Execution status of the validation"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the validation"
        },
        "resultStatus" : {
          "type" : "string",
          "example" : "One among: SUCCEEDED, FAILED, FAILED_WITH_WARNINGS, CANCELLATION_IN_PROGRESS",
          "description" : "Result status of the validation after it has completed its execution"
        },
        "validationChecks" : {
          "type" : "array",
          "description" : "List of one or more validation checks that are performed as part of the validation",
          "items" : {
            "$ref" : "#/definitions/ValidationCheck"
          }
        }
      },
      "description" : "Represents a validation with a list of one or more validation checks that are performed as part of the validation"
    },
    "NetworkConfigProfileSpec" : {
      "description" : "This specification contains the parameters required to generate Network Configuration Profiles for the given hosts to create a new cluster."
    },
    "NsxManagerSpec" : {
      "required" : [ "name", "networkDetailsSpec" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the NSX Manager virtual machine"
        },
        "networkDetailsSpec" : {
          "description" : "Network speciication details of the NSX Manager virtual machine",
          "$ref" : "#/definitions/NetworkDetailsSpec"
        }
      },
      "description" : "This specification contains the parameters required to install and configure NSX Manager in a workload domain"
    },
    "PageOfDomainFutureRelease" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/DomainFutureRelease"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "VasaUserUpdateSpec" : {
      "properties" : {
        "password" : {
          "type" : "string",
          "description" : "Password"
        },
        "username" : {
          "type" : "string",
          "description" : "VASA User name"
        }
      },
      "description" : "Represents a VASA User update specification"
    },
    "ClusterComplianceCheckSpec" : {
      "properties" : {
        "clusterImageId" : {
          "type" : "string",
          "description" : "ID of the Cluster Image to be used with the Cluster"
        }
      },
      "description" : "This specification contains parameters required to check compliance of a Cluster before transition to vSphere Lifecycle Manager Images"
    },
    "Domains" : {
      "properties" : {
        "clusterNames" : {
          "type" : "array",
          "description" : "Clusters for the operation",
          "items" : {
            "type" : "string"
          }
        },
        "domainName" : {
          "type" : "string",
          "description" : "Domain name"
        }
      }
    },
    "Role" : {
      "required" : [ "description", "id", "name" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "The description of the role"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the role"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the role"
        }
      },
      "description" : "Represents role and its attributes"
    },
    "Storage" : {
      "properties" : {
        "disks" : {
          "type" : "array",
          "description" : "Information about disks",
          "items" : {
            "$ref" : "#/definitions/Disk"
          }
        },
        "totalCapacityMB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Total storage capacity in MB"
        },
        "usedCapacityMB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Used storage capacity in MB"
        }
      },
      "description" : "Represents information about storage on a host"
    },
    "NetworkSeparationSpec" : {
      "required" : [ "segmentSpec" ],
      "properties" : {
        "enableSecurity" : {
          "type" : "boolean",
          "description" : "enable/disable distributed firewall rules for the Isolated WLD"
        },
        "segmentSpec" : {
          "description" : "The NSX segment specification",
          "$ref" : "#/definitions/SegmentSpec"
        }
      },
      "description" : "This specification contains the parameters required to provide network separation for the Isolated WLD"
    },
    "StorageContainerUpdateSpec" : {
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the storage container"
        }
      },
      "description" : "Represents a storage container update specification"
    },
    "CpuCore" : {
      "properties" : {
        "frequencyMHz" : {
          "type" : "number",
          "format" : "double",
          "description" : "CPU frequency in MHz"
        },
        "manufacturer" : {
          "type" : "string",
          "description" : "Hardware manufacturer of the CPU"
        },
        "model" : {
          "type" : "string",
          "description" : "Hardware model of the CPU"
        }
      },
      "description" : "Represents a CPU core"
    },
    "PageOfDatastoreCriterion" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/DatastoreCriterion"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "NsxtIpAddressPoolValidationSpec" : {
      "required" : [ "ipAddressPoolSpec", "nsxtClusterId" ],
      "properties" : {
        "ipAddressPoolSpec" : {
          "$ref" : "#/definitions/IpAddressPoolSpec"
        },
        "nsxtClusterId" : {
          "type" : "string"
        }
      }
    },
    "SelectedCheckSetCandidate" : {
      "required" : [ "checkSetId" ],
      "properties" : {
        "checkSetId" : {
          "type" : "string",
          "description" : "Id of the selected check-set"
        }
      },
      "description" : "Selected check-set candidate"
    },
    "HostCommissionSpec" : {
      "required" : [ "fqdn", "networkPoolId", "password", "storageType", "username" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the host"
        },
        "networkPoolId" : {
          "type" : "string",
          "description" : "ID of the network pool to associate the host with"
        },
        "networkPoolName" : {
          "type" : "string",
          "description" : "Name of the network pool to associate the host with"
        },
        "password" : {
          "type" : "string",
          "description" : "Password of the host"
        },
        "sshThumbprint" : {
          "type" : "string",
          "description" : "SSH thumbprint of the host"
        },
        "sslThumbprint" : {
          "type" : "string",
          "description" : "SSL thumbprint of the host"
        },
        "storageType" : {
          "type" : "string",
          "example" : "One among: VSAN, VSAN_ESA, VSAN_REMOTE, NFS, VMFS_FC, VVOL",
          "description" : "Storage Type"
        },
        "username" : {
          "type" : "string",
          "description" : "Username of the host"
        },
        "vvolStorageProtocolType" : {
          "type" : "string",
          "example" : "One among: ISCSI, NFS, FC",
          "description" : "vVol Storage Protocol Type"
        }
      },
      "description" : " This specification contains the input to commission a host to VMware Cloud Foundation"
    },
    "VMNicInfo" : {
      "properties" : {
        "isActive" : {
          "type" : "boolean",
          "description" : "Status of VMNic if active or inactive"
        },
        "isAutoNegotiateSupported" : {
          "type" : "boolean",
          "description" : "Status of VMNic if auto negotiate is supported or not"
        },
        "isInUse" : {
          "type" : "boolean",
          "description" : "Status of VMNic if in use or available"
        },
        "linkSpeedMB" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "VMNic link speed in MB"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the VMNic"
        }
      },
      "description" : "VMNics attached to an ESXi host reference"
    },
    "HealthCheckSpec" : {
      "required" : [ "id", "name", "resourceType", "status" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Health Check id"
        },
        "name" : {
          "type" : "string",
          "description" : "Health Check name"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Name of the resource, if the ResourceType is CLUSTER, then the resourceName == ClusterName"
        },
        "resourceType" : {
          "type" : "string",
          "description" : "Resource Type"
        },
        "status" : {
          "type" : "string",
          "description" : "Health check status"
        }
      },
      "description" : "HealthCheck"
    },
    "DatastoreQueryResponse" : {
      "properties" : {
        "queryInfo" : {
          "description" : "Query info",
          "$ref" : "#/definitions/QueryInfo"
        },
        "result" : {
          "description" : "Query result",
          "$ref" : "#/definitions/PageOfDatastore"
        }
      },
      "description" : "Represents a datastore query response."
    },
    "PageOfPsc" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Psc"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "AliasSpec" : {
      "required" : [ "aliases" ],
      "properties" : {
        "aliases" : {
          "type" : "array",
          "description" : "Aliases for bundle component type and version.",
          "items" : {
            "type" : "string"
          }
        },
        "forceUpdate" : {
          "type" : "boolean",
          "description" : "Flag for force update version alias configuration."
        }
      },
      "description" : "Version Alias update Specification. This specification gets used in the Version Alias Update API."
    },
    "CredentialsUpdateSpec" : {
      "required" : [ "elements", "operationType" ],
      "properties" : {
        "autoRotatePolicy" : {
          "description" : "Auto Rotate policy for set of credentials",
          "$ref" : "#/definitions/AutoRotateCredentialPolicyInputSpec"
        },
        "elements" : {
          "type" : "array",
          "description" : "List of resource credentials to be changed",
          "items" : {
            "$ref" : "#/definitions/ResourceCredentials"
          }
        },
        "operationType" : {
          "type" : "string",
          "example" : "One among: UPDATE, ROTATE, REMEDIATE, UPDATE_AUTO_ROTATE_POLICY",
          "description" : "Operation type"
        }
      },
      "description" : "This specification contains password operation request details"
    },
    "AssessmentOutput" : {
      "properties" : {
        "completionTimestamp" : {
          "type" : "string",
          "description" : "Assessment task completion timestamp"
        },
        "discoveryProgress" : {
          "description" : "Progress messages",
          "$ref" : "#/definitions/DiscoveryProgress"
        },
        "inputValidationErrors" : {
          "type" : "array",
          "description" : "Set of the input validation errors",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "physicalPresentedData" : {
          "description" : "The root entity with its child entities effectively representing the complete assessed environment tree",
          "$ref" : "#/definitions/EntityRest"
        },
        "presentedArtifactsMap" : {
          "type" : "object",
          "description" : "Extra assessment artefacts produced by the workflow"
        },
        "relatedAssessmentId" : {
          "type" : "string",
          "description" : "Related assessment run id"
        },
        "status" : {
          "type" : "string",
          "description" : "Execution status",
          "enum" : [ "IN_PROGRESS", "COMPLETED_WITH_SUCCESS", "COMPLETED_WITH_FAILURE" ]
        },
        "timestamp" : {
          "type" : "string",
          "description" : "Assessment task creation timestamp"
        },
        "validationResult" : {
          "description" : "Result from the assessed validation rules",
          "$ref" : "#/definitions/Error"
        }
      },
      "description" : "Result from the baseliner assessment run (execution result, presented artifacts or ask for extra info)."
    },
    "VcenterUpgradeUserInputSpec" : {
      "required" : [ "temporaryNetwork" ],
      "properties" : {
        "temporaryNetwork" : {
          "description" : "Temporary Network for vCenter Upgrade",
          "$ref" : "#/definitions/TemporaryNetwork"
        }
      },
      "description" : "vCenter Upgrade User Input Specification"
    },
    "TagsSpec" : {
      "required" : [ "tagIds" ],
      "properties" : {
        "tagIds" : {
          "type" : "array",
          "description" : "Tag IDs",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Represents tags spec"
    },
    "BackupConfigurationSpec" : {
      "properties" : {
        "backupLocations" : {
          "type" : "array",
          "description" : "List of backup locations",
          "items" : {
            "$ref" : "#/definitions/BackupLocation"
          }
        },
        "backupSchedules" : {
          "type" : "array",
          "description" : "List of backup schedules",
          "items" : {
            "$ref" : "#/definitions/BackupSchedule"
          }
        },
        "encryption" : {
          "description" : "Encryption passphrase to encrypt and decrypt backup file",
          "$ref" : "#/definitions/Encryption"
        }
      },
      "description" : "Backup configuration Specification"
    },
    "UpgradablesClusterResource" : {
      "required" : [ "resourceId", "resourceType" ],
      "properties" : {
        "availableHardwareSupportManagers" : {
          "type" : "array",
          "description" : "Available Hardware Support Managers for Firmware upgrade",
          "items" : {
            "$ref" : "#/definitions/HardwareSupportPackages"
          }
        },
        "configuredHardwareSupportManagers" : {
          "type" : "array",
          "description" : "Configured Hardware Support Managers for Firmware upgrade",
          "items" : {
            "$ref" : "#/definitions/HardwareSupportPackage"
          }
        },
        "primaryCluster" : {
          "type" : "boolean",
          "description" : "Flag for primary cluster"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "Resource Id"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "CLUSTER",
          "description" : "Resource Type"
        },
        "softwareInfo" : {
          "description" : "Software Spec contains base image, addOn, and components details",
          "$ref" : "#/definitions/SoftwareInfo"
        },
        "vlcmEnabled" : {
          "type" : "boolean",
          "description" : "Flag to determine if vLCM enabled on the cluster"
        }
      },
      "description" : "Upgradables clusters details with hardware support managers"
    },
    "PageOfUpgrade" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Upgrade"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ResourcesLicenseCheckSpec" : {
      "properties" : {
        "forAllDomains" : {
          "type" : "boolean",
          "description" : "Value that defines whether to get license check for all domains or not"
        },
        "licenseCheckResources" : {
          "type" : "array",
          "description" : "A list of resources for which license check needs to be performed",
          "items" : {
            "$ref" : "#/definitions/LicenseCheckResource"
          }
        }
      },
      "description" : "Resource license check specification"
    },
    "EdgeClusterCreationSpec" : {
      "required" : [ "edgeAdminPassword", "edgeAuditPassword", "edgeClusterName", "edgeClusterProfileSpec", "edgeClusterProfileType", "edgeClusterType", "edgeFormFactor", "edgeNodeSpecs", "edgeRootPassword", "mtu" ],
      "properties" : {
        "asn" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "ASN to be used for the edge cluster"
        },
        "edgeAdminPassword" : {
          "type" : "string",
          "description" : "Edge Password for admin user"
        },
        "edgeAuditPassword" : {
          "type" : "string",
          "description" : "Edge Password for audit"
        },
        "edgeClusterName" : {
          "type" : "string",
          "description" : "Name for the edge cluster."
        },
        "edgeClusterProfileSpec" : {
          "description" : "Specifications for Edge Node",
          "$ref" : "#/definitions/NsxTEdgeClusterProfileSpec"
        },
        "edgeClusterProfileType" : {
          "type" : "string",
          "example" : "One among: DEFAULT, CUSTOM",
          "description" : "Type of edge cluster profile"
        },
        "edgeClusterType" : {
          "type" : "string",
          "example" : "One among: NSX-T",
          "description" : "Type of edge cluster"
        },
        "edgeFormFactor" : {
          "type" : "string",
          "example" : "One among: XLARGE, LARGE, MEDIUM, SMALL",
          "description" : "Edge Form Factor"
        },
        "edgeNodeSpecs" : {
          "type" : "array",
          "description" : "Specifications for Edge Node. Number of Edge Nodes cannot exceed 8 if HA mode is ACTIVE-ACTIVE and can not exceed 2 if HA mode is ACTIVE-STANDBY",
          "items" : {
            "$ref" : "#/definitions/NsxTEdgeNodeSpec"
          }
        },
        "newIpAddressPoolSpecs" : {
          "type" : "array",
          "description" : "Specifications for new NSX IP address pool(s)",
          "items" : {
            "$ref" : "#/definitions/IpAddressPoolSpec"
          }
        },
        "edgeRootPassword" : {
          "type" : "string",
          "description" : "Edge Password for root user."
        },
        "internalTransitSubnets" : {
          "type" : "array",
          "description" : "Subnet addresses in CIDR notation that are used to assign addresses to logical links connecting service routers and distributed routers",
          "items" : {
            "type" : "string"
          }
        },
        "mtu" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Maximum transmission unit"
        },
        "skipTepRoutabilityCheck" : {
          "type" : "boolean",
          "description" : "Set to true to bypass normal ICMP-based check of Edge TEP / host TEP routability (default is false, meaning do check)"
        },
        "tier0Name" : {
          "type" : "string",
          "description" : "Name for the Tier-0"
        },
        "tier0RoutingType" : {
          "type" : "string",
          "example" : "One among: EBGP, STATIC",
          "description" : "Tier 0 Routing type -eg eBGP, Static"
        },
        "tier0ServicesHighAvailability" : {
          "type" : "string",
          "example" : "One among: ACTIVE_ACTIVE, ACTIVE_STANDBY",
          "description" : "High-availability Mode for Tier-0"
        },
        "tier1Name" : {
          "type" : "string",
          "description" : "Name for the Tier-1"
        },
        "tier1Unhosted" : {
          "type" : "boolean",
          "description" : "Select whether Tier-1 being created per this spec is hosted on the new Edge cluster or not (default value is false, meaning hosted)"
        },
        "transitSubnets" : {
          "type" : "array",
          "description" : "Transit subnet addresses in CIDR notation that are used to assign addresses to logical links connecting Tier-0 and Tier-1s",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "This specification contains the parameters required to add a NSX edge cluster spanning multiple VI clusters."
    },
    "PersonalityUploadSpecRawWithFileUploadId" : {
      "properties" : {
        "fileUploadId" : {
          "type" : "string",
          "description" : "Personality file upload id. This id is obtained by calling v1/personalities/files and uploading files into SDDC Manager"
        }
      },
      "description" : "Personality upload specification for uploading the personality from raw files exported from a vCenter cluster. This mode of uploading personality is useful when the source vCenter cluster is outside the target VCF deployment. User can upload files from a source location to SDDC Manager using v1/personalities/files API, which returns a file upload id. The id is then passed in this spec with Personality Upload Mode RAW_WITH_FILE_UPLOAD_ID."
    },
    "NsxtUpgradeUserInputSpec" : {
      "properties" : {
        "nsxtEdgeClusterUpgradeSpecs" : {
          "type" : "array",
          "description" : "List of edge clusters information if explicit selection is to be made",
          "items" : {
            "$ref" : "#/definitions/NsxtEdgeClusterUpgradeSpec"
          }
        },
        "nsxtHostClusterUpgradeSpecs" : {
          "type" : "array",
          "description" : "List of host clusters information if explicit selection is to be made",
          "items" : {
            "$ref" : "#/definitions/NsxtHostClusterUpgradeSpec"
          }
        },
        "nsxtId" : {
          "type" : "string",
          "description" : "Identifier of the NSX instance"
        },
        "nsxtUpgradeOptions" : {
          "description" : "List of host clusters information if explicit selection is to be made",
          "$ref" : "#/definitions/NsxtUpgradeOptions"
        }
      },
      "description" : "NSX Upgrade User Input Specification"
    },
    "FrequencyMetric" : {
      "properties" : {
        "unit" : {
          "type" : "string",
          "description" : "Unit of the metric",
          "enum" : [ "Hz", "KHz", "MHz", "GHz", "THz" ]
        },
        "value" : {
          "type" : "number",
          "format" : "double",
          "description" : "Value of the metric"
        }
      },
      "description" : "Represents a single metric representing frequency"
    },
    "PageOfVrli" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Vrli"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "IpPool" : {
      "properties" : {
        "end" : {
          "type" : "string",
          "description" : "End IP address of the IP pool"
        },
        "start" : {
          "type" : "string",
          "description" : "Start IP address of the IP pool"
        }
      },
      "description" : "Represents an IP Pool of a network in a network pool"
    },
    "CertificateValidationTask" : {
      "required" : [ "completed", "validationId", "validations" ],
      "properties" : {
        "completed" : {
          "type" : "boolean",
          "example" : "One among: true, false",
          "description" : "Validation Task Completed"
        },
        "endTimestamp" : {
          "type" : "string",
          "example" : "2021-02-02T00:00:00.000Z",
          "description" : "Validation Task End Time"
        },
        "startTimestamp" : {
          "type" : "string",
          "example" : "2021-02-02T00:00:00.000Z",
          "description" : "Validation Task Start Time"
        },
        "validationId" : {
          "type" : "string",
          "example" : "B1930850-7D1A-4BAA-89D7-52FD5DAD196A",
          "description" : "Validation ID"
        },
        "validations" : {
          "type" : "array",
          "description" : "Resource Certificate Validations",
          "items" : {
            "$ref" : "#/definitions/CertificateValidation"
          }
        }
      },
      "description" : "The Certificate Validation Task."
    },
    "Wsa" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The ID of the Workspace ONE Access instance"
        },
        "loadBalancerFqdn" : {
          "type" : "string",
          "example" : "wsa-lb.vrack.vsphere.local",
          "description" : "The Fully Qualified Domain Name of the Workspace ONE Access load balancer"
        },
        "loadBalancerIpAddress" : {
          "type" : "string",
          "example" : "10.0.0.15",
          "description" : "The IP address of the Workspace ONE Access load balancer"
        },
        "nodes" : {
          "type" : "array",
          "description" : "The nodes of the Workspace ONE Access instance",
          "items" : {
            "$ref" : "#/definitions/VrealizeProductNode"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "ACTIVE, ERROR",
          "description" : "The status of the Workspace ONE Access instance"
        },
        "version" : {
          "type" : "string",
          "example" : "8.1.0-13036238",
          "description" : "The version of the Workspace ONE Access instance"
        }
      },
      "description" : "Spec contains parameters of a VMware Aria Automation instance"
    },
    "PasswordDetails" : {
      "properties" : {
        "expiryDataRetrievalStatus" : {
          "type" : "string",
          "example" : "One among: SUCCEEDED, NO_DATA_AVAILABLE",
          "description" : "Expiry data retrieval status"
        },
        "numberOfDaysToExpiry" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of days to expiry, if data is available"
        },
        "validityStatus" : {
          "type" : "string",
          "example" : "One among: VALID, INVALID",
          "description" : "Validity status"
        }
      },
      "description" : "Represents password expiry and validity details"
    },
    "PageOfCredentialsTask" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/CredentialsTask"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "PageOfDomainReleaseView" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/DomainReleaseView"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "UnmanagedResourceCredential" : {
      "required" : [ "credentialType", "username" ],
      "properties" : {
        "credentialType" : {
          "type" : "string",
          "example" : "One among: SSH",
          "description" : "Credential type"
        },
        "password" : {
          "type" : "string",
          "description" : "Password"
        },
        "username" : {
          "type" : "string",
          "description" : "Username"
        }
      },
      "description" : "Represents credentials of am unmanaged resource (i.e a resource that is not managed by VCF)"
    },
    "NsxTCluster" : {
      "properties" : {
        "domains" : {
          "type" : "array",
          "description" : "Information about the domains associated with the cluster",
          "items" : {
            "$ref" : "#/definitions/DomainReference"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the cluster"
        },
        "isShareable" : {
          "type" : "boolean",
          "description" : "Boolean to identify if the NSX cluster can be shared to create a new workload domain"
        },
        "isShared" : {
          "type" : "boolean",
          "description" : "Boolean to identify if the NSX cluster is shared among workload domains"
        },
        "isVlcmCompatible" : {
          "type" : "boolean",
          "description" : "Boolean to identify if the NSX cluster is compatible with Vlcm"
        },
        "nodes" : {
          "type" : "array",
          "description" : "Information about the NSX managers associated with the cluster",
          "items" : {
            "$ref" : "#/definitions/NsxTManager"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "One among: INITIALIZING, STABLE, DEGRADED, UNSTABLE, UNAVAILABLE, UNIDENTIFIED, UNDEFINED",
          "description" : "NSX cluster status. To get NSX cluster status invoke nsxt-clusters query API with criterion NSXT_CLUSTERS_WITH_STATUS"
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the NSX managers associated with the cluster"
        },
        "vip" : {
          "type" : "string",
          "description" : "VIP (Virtual IP Address) of the cluster"
        },
        "vipFqdn" : {
          "type" : "string",
          "description" : "FQDN for VIP of the cluster"
        },
        "nativeId" : {
          "type" : "string",
          "description" : "Native ID of the NSX cluster"
        }
      },
      "description" : "NSX Cluster representation"
    },
    "CredentialsTask" : {
      "properties" : {
        "creationTimestamp" : {
          "type" : "string",
          "description" : "Credential task creation timestamp"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "Credential task ID"
        },
        "isAutoRotate" : {
          "type" : "boolean",
          "description" : "Is Credential task an auto rotate task"
        },
        "name" : {
          "type" : "string",
          "description" : "Credential task name"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED, USER_CANCELLED, INCONSISTENT",
          "description" : "Credential task status"
        },
        "subTasks" : {
          "type" : "array",
          "description" : "List of credential sub-tasks of the credential task",
          "items" : {
            "$ref" : "#/definitions/CredentialsSubTask"
          }
        },
        "type" : {
          "type" : "string",
          "example" : "One among: UPDATE, ROTATE, REMEDIATE, UPDATE_AUTO_ROTATE_POLICY",
          "description" : "Credential task type"
        }
      },
      "description" : "Represents the credentials task in the system"
    },
    "SsoDomainSpec" : {
      "properties" : {
        "ssoDomainName" : {
          "type" : "string",
          "description" : "SSO domain name to be created"
        },
        "ssoDomainPassword" : {
          "type" : "string",
          "description" : "New SSO domain password"
        }
      },
      "description" : "Spec for the SSO configuration in a VMware Cloud Foundation Domain"
    },
    "ResourceCredentials" : {
      "required" : [ "credentials", "resourceType" ],
      "properties" : {
        "credentials" : {
          "type" : "array",
          "description" : "Credentials of the resource",
          "items" : {
            "$ref" : "#/definitions/BaseCredential"
          }
        },
        "resourceId" : {
          "type" : "string",
          "description" : "Resource ID"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Resource name"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, BACKUP",
          "description" : "Authenticated Resource Type"
        }
      },
      "description" : "Represents a resource along with its list of credentials to be changed."
    },
    "PageOfCertificate" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Certificate"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "IdentityProviderDirectory" : {
      "required" : [ "defaultDomain", "domains", "name" ],
      "properties" : {
        "defaultDomain" : {
          "type" : "string",
          "description" : "The trusted default domain of the directory"
        },
        "directoryId" : {
          "type" : "string",
          "description" : "The id of the directory"
        },
        "domains" : {
          "type" : "array",
          "description" : "The set of trusted domains of the directory",
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "The user-friendly name for the directory"
        }
      },
      "description" : "The directory configuration when the provider is via broker federation"
    },
    "NetworkPool" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The ID of the network pool"
        },
        "name" : {
          "type" : "string",
          "description" : "User specified name of the network pool"
        },
        "networks" : {
          "type" : "array",
          "description" : "Representing the networks associated with the network pool",
          "items" : {
            "$ref" : "#/definitions/Network"
          }
        }
      },
      "description" : "Represents a network pool in the system"
    },
    "ErrorCode" : {
      "type" : "object",
      "properties" : {
        "bundleName" : {
          "type" : "string"
        },
        "code" : {
          "type" : "string"
        },
        "component" : {
          "type" : "string"
        }
      }
    },
    "ClusterUpdateSpec" : {
      "properties" : {
        "clusterCompactionSpec" : {
          "description" : "Parameters required to perform cluster compaction, optional otherwise",
          "$ref" : "#/definitions/ClusterCompactionSpec"
        },
        "clusterComplianceCheckSpec" : {
          "description" : "Parameters required to check complaince of a cluster before transition to vSphere Lifecycle Manager Images, optional otherwise",
          "$ref" : "#/definitions/ClusterComplianceCheckSpec"
        },
        "clusterComplianceCleanupSpec" : {
          "description" : "Parameters required to cleanup compliance results of a cluster before transition to vSphere Lifecycle Manager Images, optional otherwise",
          "$ref" : "#/definitions/ClusterComplianceCleanupSpec"
        },
        "clusterExpansionSpec" : {
          "description" : "Parameters required to perform cluster expansion, optional otherwise",
          "$ref" : "#/definitions/ClusterExpansionSpec"
        },
        "clusterRemediationSpec" : {
          "description" : "Parameters required to remediate a cluster after transition to vSphere Lifecycle Manager Images, optional otherwise",
          "$ref" : "#/definitions/ClusterRemediationSpec"
        },
        "clusterStretchSpec" : {
          "description" : "Parameters required to perform Stretch operation on cluster, optional otherwise",
          "$ref" : "#/definitions/ClusterStretchSpec"
        },
        "clusterTransitionSpec" : {
          "description" : "Parameters required to transition a cluster to vSphere Lifecycle Manager Images, optional otherwise",
          "$ref" : "#/definitions/ClusterTransitionSpec"
        },
        "clusterUnstretchSpec" : {
          "description" : "Parameters required to perform Unstretch operation on cluster, optional otherwise",
          "$ref" : "#/definitions/ClusterUnstretchSpec"
        },
        "markForDeletion" : {
          "type" : "boolean",
          "description" : "Prepare the cluster for deletion"
        },
        "name" : {
          "type" : "string",
          "description" : "Cluster Name"
        },
        "prepareForStretch" : {
          "type" : "boolean",
          "description" : "Prepare the cluster for stretch"
        }
      },
      "description" : "This specification contains the parameters required to perform update operation on cluster"
    },
    "VersionAliasesForBundleComponentType" : {
      "required" : [ "bundleComponentType", "versionAliases" ],
      "properties" : {
        "bundleComponentType" : {
          "type" : "string",
          "example" : "One among: VCENTER, PSC, NSX_T_MANAGER, NSX_MANAGER, ESX_HOST, VCF_VRA_UPGRADE, VCF_VRLI_UPGRADE, VCF_VROPS_UPGRADE, VCF_VRSLCM_UPGRADE, SDDC_MANAGER_VCF, LCM, SDDC_MANAGER, SDDC_MANAGER_UI, OPERATIONS_MANAGER, COMMON_SERVICES, SOLUTIONS_MANAGER, MULTI_SITE_SERVICE, ",
          "description" : "Bundle Component Type"
        },
        "versionAliases" : {
          "type" : "array",
          "description" : "Version Aliases",
          "items" : {
            "$ref" : "#/definitions/BaseAlias"
          }
        }
      },
      "description" : "Version Alias representation"
    },
    "PageOfEdgeClusterNsxtEntityCriterion" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/EdgeClusterNsxtEntityCriterion"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "SddcClusterSpec" : {
      "required" : [ "clusterName" ],
      "properties" : {
        "clusterEvcMode" : {
          "type" : "string",
          "description" : "vCenter cluster EVC mode"
        },
        "clusterImageEnabled" : {
          "type" : "boolean",
          "description" : "Enable vSphere Lifecycle Manager Images for cluster creation"
        },
        "clusterName" : {
          "type" : "string",
          "description" : "vCenter Cluster Name"
        },
        "hostFailuresToTolerate" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Host failures to tolerate",
          "minimum" : 0.0,
          "maximum" : 3.0
        },
        "personalityName" : {
          "type" : "string",
          "description" : "Cluster Personality Name"
        },
        "resourcePoolSpecs" : {
          "type" : "array",
          "description" : "Resource Pool Specs",
          "items" : {
            "$ref" : "#/definitions/ResourcePoolSpec"
          }
        },
        "vmFolders" : {
          "type" : "object",
          "example" : "One among:MANAGEMENT, NETWORKING",
          "description" : "Virtual Machine folders map",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Spec contains parameters for vCenter Cluster"
    },
    "Vra" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The ID of the VMware Aria Automation instance"
        },
        "loadBalancerFqdn" : {
          "type" : "string",
          "example" : "vra-lb.vrack.vsphere.local",
          "description" : "The Fully Qualified Domain Name of the VMware Aria Automation load balancer"
        },
        "loadBalancerIpAddress" : {
          "type" : "string",
          "example" : "10.0.0.15",
          "description" : "The IP address of the VMware Aria Automation load balancer"
        },
        "nodes" : {
          "type" : "array",
          "description" : "The nodes of the VMware Aria Automation instance",
          "items" : {
            "$ref" : "#/definitions/VrealizeProductNode"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "ACTIVE, ERROR",
          "description" : "The status of the VMware Aria Automation instance"
        },
        "version" : {
          "type" : "string",
          "example" : "8.1.0-13036238",
          "description" : "The version of the VMware Aria Automation instance"
        }
      },
      "description" : "Spec contains parameters of a VMware Aria Automation instance"
    },
    "PageOfWsa" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Wsa"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "PageOfSupportBundle" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/SupportBundle"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "PageOfRelease" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Release"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ProductNode" : {
      "required" : [ "fqdn", "password", "username" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "example" : "vrops.vrack.vsphere.local",
          "description" : "The Fully Qualified Domain Name for the VMware Aria node (virtual appliance)"
        },
        "password" : {
          "type" : "string",
          "description" : "The password for a root user of VMware Aria appliance"
        },
        "type" : {
          "type" : "string",
          "example" : "MASTER, REPLICA, DATA, REMOTECOLLECTOR, WORKER",
          "description" : "The type of the VMware Aria product node",
          "enum" : [ "Oneamong:MASTER", "REPLICA", "DATA", "REMOTECOLLECTOR", "WORKER", "PRIMARY", "SECONDARY" ]
        },
        "username" : {
          "type" : "string",
          "description" : "The username for a root user of VMware Aria appliance"
        }
      },
      "description" : "Spec contains information for a VMware Aria product node"
    },
    "IpAddressPoolSubnetSpec" : {
      "required" : [ "cidr", "gateway", "ipAddressPoolRanges" ],
      "properties" : {
        "cidr" : {
          "type" : "string",
          "description" : "The subnet representation, contains the network address and the prefix length"
        },
        "gateway" : {
          "type" : "string",
          "description" : "The default gateway address of the network"
        },
        "ipAddressPoolRanges" : {
          "type" : "array",
          "description" : "List of the IP allocation ranges. Atleast 1 IP address range has to be specified",
          "items" : {
            "$ref" : "#/definitions/IpAddressPoolRangeSpec"
          }
        }
      },
      "description" : "This specification contains the parameters required to create an IP address pool subnet"
    },
    "NsxTEdgeUplinkNetwork" : {
      "required" : [ "uplinkInterfaceIP", "uplinkVlan" ],
      "properties" : {
        "asnPeer" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "[Deprecated] ASN of Peer (please use bgpPeers instead)"
        },
        "bgpPeerPassword" : {
          "type" : "string",
          "description" : "[Deprecated] BGP Peer Password (please use bgpPeers instead)"
        },
        "bgpPeers" : {
          "type" : "array",
          "description" : "List of BGP Peer configuration",
          "items" : {
            "$ref" : "#/definitions/BgpPeerSpec"
          }
        },
        "peerIP" : {
          "type" : "string",
          "description" : "[Deprecated] BGP Peer IP (please use bgpPeers instead)"
        },
        "uplinkInterfaceIP" : {
          "type" : "string",
          "description" : "Uplink IP"
        },
        "uplinkVlan" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Uplink Vlan"
        }
      },
      "description" : "This specification contains input  parameters required to configure  uplink network for NSX  edge node VM"
    },
    "PageOfDatastore" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Datastore"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "TagsForResource" : {
      "properties" : {
        "resource" : {
          "description" : "the resource",
          "$ref" : "#/definitions/TaggedResource"
        },
        "tags" : {
          "type" : "array",
          "description" : "List of associated tags",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        }
      },
      "description" : "Represents a taggable resource with its associations"
    },
    "VcIdentitySources" : {
      "properties" : {
        "domainNames" : {
          "type" : "array",
          "description" : "The Domains of the Identity Source",
          "items" : {
            "type" : "string"
          }
        },
        "ldap" : {
          "description" : "LDAP configuration details of the Identity Source",
          "$ref" : "#/definitions/LdapInfo"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the Identity Source."
        },
        "type" : {
          "type" : "string",
          "description" : "Type of the Identity Source."
        }
      },
      "description" : "Represents embedded Identity Sources and its attributes."
    },
    "PageOfIdentityProvider" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/IdentityProvider"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "SupportBundleScope" : {
      "properties" : {
        "domains" : {
          "type" : "array",
          "description" : "Domains and Clusters for SOS operation.",
          "items" : {
            "$ref" : "#/definitions/Domains"
          }
        },
        "includeFreeHosts" : {
          "type" : "boolean",
          "description" : "Include free hosts."
        }
      }
    },
    "StorageContainer" : {
      "required" : [ "name", "protocolType" ],
      "properties" : {
        "clusterId" : {
          "type" : "string",
          "description" : "ID of the cluster which is using the storage container"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the storage container"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the storage container"
        },
        "protocolType" : {
          "type" : "string",
          "example" : "One among: ISCSI, FC, NFS",
          "description" : "Storage protocol type"
        }
      },
      "description" : "Storage container representation"
    },
    "NsxtIpAddressPoolBlockSubnet" : {
      "properties" : {
        "cidr" : {
          "type" : "string",
          "description" : "The CIDR of the IP address subnet"
        },
        "gatewayAssigned" : {
          "type" : "boolean",
          "description" : "The boolean representing the state of the gateway assignment"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The size of the IP address block"
        }
      },
      "description" : "NSX IP address pool block subnet representation"
    },
    "ErrorCodePack" : {
      "type" : "object",
      "properties" : {
        "arguments" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        },
        "bundleName" : {
          "type" : "string"
        },
        "classLoader" : {
          "$ref" : "#/definitions/ClassLoader"
        },
        "code" : {
          "type" : "string"
        },
        "component" : {
          "type" : "string"
        },
        "errorCode" : {
          "$ref" : "#/definitions/ErrorCode"
        },
        "stringArguments" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ReconciliationForResource" : {
      "required" : [ "applyAll", "resourceId" ],
      "properties" : {
        "applyAll" : {
          "type" : "boolean",
          "description" : "All application flag"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "Target resource ID"
        }
      },
      "description" : "Describes Configuration Reconciliation operation(s) for a resource"
    },
    "PhysicalNic" : {
      "properties" : {
        "deviceName" : {
          "type" : "string",
          "description" : "Device name of the physical NIC"
        },
        "macAddress" : {
          "type" : "string",
          "description" : "Mac address of the physical NIC"
        },
        "speed" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Speed in bytes of the physical NIC"
        },
        "unit" : {
          "type" : "string",
          "description" : "Unit of physical NIC speed",
          "enum" : [ "KB", "MB", "GB", "TB", "PB" ]
        }
      },
      "description" : "Represents a physical NIC"
    },
    "PartnerExtensionSpec" : {
      "properties" : {
        "partnerBundleMetadataFilePath" : {
          "type" : "string",
          "description" : "Path to the bundle metadata file. The metadata file can have details of multiple bundles"
        },
        "partnerBundleVersion" : {
          "type" : "string",
          "description" : "Version of partner bundle to be uploaded. Should match one of the bundle versions available in the partner bundle metadata file"
        }
      },
      "description" : "Specification for partner extensions. This specification is used in the Bundle Upload API"
    },
    "ResourceUpgradableError" : {
      "properties" : {
        "errors" : {
          "type" : "array",
          "description" : "Upgradable Errors found.",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "resource" : {
          "description" : "Resource for which upgradable errors were found.",
          "$ref" : "#/definitions/Resource"
        }
      },
      "description" : "ResourceUpgradableError describes errors on a resource while fetching its upgradables."
    },
    "Ceip" : {
      "required" : [ "status" ],
      "properties" : {
        "instanceId" : {
          "type" : "string",
          "example" : "3f39d4a1-78d2-11e8-af85-f1cf26258cdc",
          "description" : "Instance Id of VCF"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: ENABLED, DISABLED, ENABLING, DISABLING, ENABLING_FAILED, DISABLING_FAILED",
          "description" : "CEIP status"
        }
      },
      "description" : "Defines VCF CEIP status and instance id"
    },
    "PageOfSddcManager" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/SddcManager"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "CertificateAuthority" : {
      "required" : [ "id" ],
      "properties" : {
        "commonName" : {
          "type" : "string",
          "example" : "OpenSSL CA",
          "description" : "OpenSSL CA domain name"
        },
        "country" : {
          "type" : "string",
          "example" : "IN",
          "description" : "ISO 3166 country code where company is legally registered"
        },
        "id" : {
          "type" : "string",
          "example" : "One among: OpenSSL, Microsoft",
          "description" : "CA type. Only supports Microsoft and OpenSSL CAs"
        },
        "locality" : {
          "type" : "string",
          "example" : "Bengaluru",
          "description" : "The city or locality where company is legally registered"
        },
        "organization" : {
          "type" : "string",
          "example" : "VMware Inc.",
          "description" : "The name under which company is legally registered"
        },
        "organizationUnit" : {
          "type" : "string",
          "example" : "VCF",
          "description" : "Organization with which the certificate is associated"
        },
        "serverUrl" : {
          "type" : "string",
          "example" : "https://sfo-ad.rainpole.io/certsrv",
          "description" : "Microsoft CA server url"
        },
        "state" : {
          "type" : "string",
          "example" : "Karnataka",
          "description" : "The full name of the state where company is legally registered"
        },
        "templateName" : {
          "type" : "string",
          "example" : "WebServer",
          "description" : "Microsoft CA server template name"
        },
        "username" : {
          "type" : "string",
          "example" : "Administrator",
          "description" : "Microsoft CA server username"
        }
      },
      "description" : "The Certificate Authority (CA) details"
    },
    "ValidationCheck" : {
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Description of the validation check"
        },
        "errorResponse" : {
          "description" : "Error response associated with the validation check",
          "$ref" : "#/definitions/Error"
        },
        "nestedValidationChecks" : {
          "type" : "array",
          "description" : "List of one or more validation checks that are performed as part of the validation",
          "items" : {
            "$ref" : "#/definitions/ValidationCheck"
          }
        },
        "resultStatus" : {
          "type" : "string",
          "example" : "One among: IN_PROGRESS, SUCCEEDED, FAILED, SKIPPED, CANCELLED, CANCELLATION_IN_PROGRESS",
          "description" : "Result status of the validation check after it has completed its execution"
        },
        "severity" : {
          "type" : "string",
          "example" : "One among: WARNING, ERROR, INFO",
          "description" : "Severity of the validation check"
        }
      },
      "description" : "Represents a validation check"
    },
    "PageOfBundle" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Bundle"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "VSANNetworkSpec" : {
      "properties" : {
        "vsanCidr" : {
          "type" : "string",
          "description" : "vSAN subnet cidr of the ESXi host"
        },
        "vsanGatewayIP" : {
          "type" : "string",
          "description" : "vSAN Gateway IP of the ESXi host"
        }
      },
      "description" : "Contains the vSAN Network details"
    },
    "IpRange" : {
      "required" : [ "endIpAddress", "startIpAddress" ],
      "properties" : {
        "endIpAddress" : {
          "type" : "string",
          "example" : "192.168.0.128",
          "description" : "End IP Address",
          "minLength" : 7,
          "maxLength" : 15
        },
        "startIpAddress" : {
          "type" : "string",
          "example" : "192.168.0.123",
          "description" : "Start IP Address",
          "minLength" : 7,
          "maxLength" : 15
        }
      },
      "description" : "Spec contains parameters for range of IP addresses"
    },
    "BundleUploadSpec" : {
      "required" : [ "bundleFilePath", "manifestFilePath" ],
      "properties" : {
        "bundleFilePath" : {
          "type" : "string",
          "description" : "Bundle Upload File Path"
        },
        "compatibilitySetsFilePath" : {
          "type" : "string",
          "description" : "[Deprecated] Path to the software compatibility sets file"
        },
        "manifestFilePath" : {
          "type" : "string",
          "description" : "Bundle Upload Manifest File Path"
        },
        "partnerExtensionSpec" : {
          "description" : "Partner extensions for bundle upload",
          "$ref" : "#/definitions/PartnerExtensionSpec"
        },
        "signatureFilePath" : {
          "type" : "string",
          "description" : "Bundle Upload Signature File Path"
        }
      },
      "description" : "Bundle Upload Specification. This specification is used in the Bundle Upload API"
    },
    "PscSsoSpec" : {
      "properties" : {
        "ssoDomain" : {
          "type" : "string",
          "description" : "PSC SSO Domain"
        }
      },
      "description" : "Spec contains parameters for Platform Services Controller SSO"
    },
    "PageMetadata" : {
      "properties" : {
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Returns the current page number"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Returns the number of elements in the current page"
        },
        "totalElements" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Returns the total number of elements"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Returns the total number of pages"
        }
      },
      "description" : "Represents pageable elements pagination metadata"
    },
    "PageOfResourceFunctionalities" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/ResourceFunctionalities"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ReleaseUpdate" : {
      "required" : [ "baseProductVersion", "description", "id", "productName", "releaseDate" ],
      "properties" : {
        "baseProductVersion" : {
          "type" : "string",
          "description" : "Base product version for the release"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the release update"
        },
        "id" : {
          "type" : "string",
          "description" : "Release version"
        },
        "productName" : {
          "type" : "string",
          "description" : "Product name for which the release update is provided"
        },
        "releaseDate" : {
          "type" : "string",
          "description" : "Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format"
        },
        "releaseUpdateURL" : {
          "description" : "URL to the release update",
          "$ref" : "#/definitions/URL"
        }
      },
      "description" : "Update to a given release"
    },
    "MapOfstringAndMapOfstringAndVvsVersionAliases" : {
      "type" : "object",
      "additionalProperties" : {
        "additionalProperties" : {
          "$ref" : "#/definitions/MapOfstringAndVvsVersionAliases"
        },
        "type" : "object"
      }
    },
    "NiocSpec" : {
      "required" : [ "trafficType", "value" ],
      "properties" : {
        "trafficType" : {
          "type" : "string",
          "example" : "One among:VSAN, VMOTION, VIRTUALMACHINE, MANAGEMENT, NFS, VDP, HBR, FAULTTOLERANCE, ISCSI",
          "description" : "Traffic Type"
        },
        "value" : {
          "type" : "string",
          "description" : "NIOC Value"
        }
      },
      "description" : "Spec contains parameters for Network IO Control"
    },
    "NsxTSpec" : {
      "required" : [ "nsxManagerSpecs", "vip", "vipFqdn" ],
      "properties" : {
        "formFactor" : {
          "type" : "string",
          "description" : "NSX manager form factor"
        },
        "ipAddressPoolSpec" : {
          "description" : "The IP address pool specification",
          "$ref" : "#/definitions/IpAddressPoolSpec"
        },
        "licenseKey" : {
          "type" : "string",
          "description" : "NSX license value"
        },
        "nsxManagerAdminPassword" : {
          "type" : "string",
          "description" : "NSX manager admin password (basic auth and SSH)"
        },
        "nsxManagerAuditPassword" : {
          "type" : "string",
          "description" : "NSX manager Audit password"
        },
        "nsxManagerSpecs" : {
          "type" : "array",
          "description" : "Specification details of the NSX Manager virtual machine",
          "items" : {
            "$ref" : "#/definitions/NsxManagerSpec"
          }
        },
        "vip" : {
          "type" : "string",
          "description" : "Virtual IP address which would act as proxy/alias for NSX Managers"
        },
        "vipFqdn" : {
          "type" : "string",
          "description" : "FQDN for VIP so that common SSL certificates can be installed across all managers"
        }
      },
      "description" : "This specification contains the parameters required to install and configure NSX in a workload domain"
    },
    "NsxTManager" : {
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the manager"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the manager"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP address of the manager"
        },
        "name" : {
          "type" : "string",
          "description" : "NSX Manager VM name in vCenter"
        }
      },
      "description" : "NSX Manager representation"
    },
    "StackTraceElement" : {
      "properties" : {
        "className" : {
          "type" : "string"
        },
        "fileName" : {
          "type" : "string"
        },
        "lineNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "methodName" : {
          "type" : "string"
        },
        "nativeMethod" : {
          "type" : "boolean"
        }
      }
    },
    "FederatedIdentityProviderSpec" : {
      "required" : [ "directory", "name", "oidcSpec" ],
      "properties" : {
        "directory" : {
          "description" : "The directory configuration of the Identity Provider",
          "$ref" : "#/definitions/IdentityProviderDirectory"
        },
        "name" : {
          "type" : "string",
          "description" : "The user-friendly name for the Identity Provider"
        },
        "oidcSpec" : {
          "description" : "The OIDC profile of the Identity Provider",
          "$ref" : "#/definitions/OidcSpec"
        },
        "syncClientTokenTTL" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The lifetime in seconds of the sync client bear token, default to 3 days if not specified"
        }
      },
      "description" : "The identity management configuration when the provider is via broker federation"
    },
    "URL" : {
      "properties" : {
        "authority" : {
          "type" : "string"
        },
        "content" : {
          "type" : "object"
        },
        "defaultPort" : {
          "type" : "integer",
          "format" : "int32"
        },
        "deserializedFields" : {
          "$ref" : "#/definitions/URLStreamHandler"
        },
        "file" : {
          "type" : "string"
        },
        "host" : {
          "type" : "string"
        },
        "path" : {
          "type" : "string"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "protocol" : {
          "type" : "string"
        },
        "query" : {
          "type" : "string"
        },
        "ref" : {
          "type" : "string"
        },
        "serializedHashCode" : {
          "type" : "integer",
          "format" : "int32"
        },
        "userInfo" : {
          "type" : "string"
        }
      }
    },
    "NsxTQueryResponse" : {
      "properties" : {
        "queryInfo" : {
          "description" : "Query info",
          "$ref" : "#/definitions/QueryInfo"
        },
        "result" : {
          "description" : "Query result",
          "$ref" : "#/definitions/PageOfNsxTCluster"
        }
      },
      "description" : "Represents a NSX cluster query response."
    },
    "NsxtEdgeCluster" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Edge cluster id"
        },
        "name" : {
          "type" : "string",
          "description" : "Edge cluster name"
        },
        "resourceHealth" : {
          "type" : "string",
          "description" : "Current resource health status"
        },
        "upgradeStatus" : {
          "type" : "string",
          "description" : "Upgrade status with respect to the bundle"
        },
        "version" : {
          "type" : "string",
          "description" : "The current version of the edge cluster.If a partial upgrade is done, this will be the least version among the edges in the edge cluster"
        }
      },
      "description" : "NSX Edge Cluster Upgrade Resource"
    },
    "HostReference" : {
      "properties" : {
        "azName" : {
          "type" : "string",
          "description" : "Fault domain name of the host"
        },
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the host"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the host"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP address of the host"
        },
        "vmNics" : {
          "type" : "array",
          "description" : "VM NICs of the host",
          "items" : {
            "$ref" : "#/definitions/VMNicInfo"
          }
        }
      },
      "description" : "Represents an ESXi host reference"
    },
    "NetworkSpec" : {
      "required" : [ "nsxClusterSpec", "vdsSpecs" ],
      "properties" : {
        "nsxClusterSpec" : {
          "description" : "NSX configuration to add to the cluster",
          "$ref" : "#/definitions/NsxClusterSpec"
        },
        "vdsSpecs" : {
          "type" : "array",
          "description" : "Distributed switches to add to the cluster",
          "items" : {
            "$ref" : "#/definitions/VdsSpec"
          }
        },
        "networkProfiles" : {
          "type" : "array",
          "description" : "The list of network profiles",
          "items" : {
            "$ref" : "#/definitions/NetworkProfile"
          }
        }
      },
      "description" : "This specification contains cluster's network configuration."
    },
    "NetworkProfile" : {
      "required" : [ "name", "nsxtHostSwitchConfigs" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The network profile name"
        },
        "description" : {
          "type" : "string",
          "description" : "The network profile description"
        },
        "isDefault" : {
          "type" : "boolean",
          "description" : "Designates the network profile as a Global Network Config or Sub Network Config"
        },
        "nsxtHostSwitchConfigs" : {
          "type" : "array",
          "description" : "The list of NSX host switch configurations",
          "items" : {
            "$ref" : "#/definitions/NsxtHostSwitchConfig"
          }
        }
      }
    },
    "AssessmentMetadata" : {
      "properties" : {
        "componentCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of components that is going to be used for assessment"
        },
        "targetVersion" : {
          "type" : "string",
          "example" : "5.0.0.0",
          "description" : "Version of target state definitions that is going to be used for assessment"
        }
      },
      "description" : "Metadata about the assessment run that is triggered and passed to the result"
    },
    "SddcHostSpec" : {
      "required" : [ "association", "credentials", "hostname", "ipAddressPrivate", "vSwitch" ],
      "properties" : {
        "association" : {
          "type" : "string",
          "description" : "Host Association: Location/Datacenter"
        },
        "credentials" : {
          "description" : "Host Credentials",
          "$ref" : "#/definitions/SddcCredentials"
        },
        "hostname" : {
          "type" : "string",
          "example" : "esx-1",
          "description" : "Host Hostname",
          "minLength" : 3,
          "maxLength" : 63
        },
        "ipAddressPrivate" : {
          "description" : "Host Private Management IP",
          "$ref" : "#/definitions/IpAllocation"
        },
        "sshThumbprint" : {
          "type" : "string",
          "description" : "Host SSH thumbprint (RSA SHA256)"
        },
        "sslThumbprint" : {
          "type" : "string",
          "description" : "Host SSL thumbprint (SHA256)"
        },
        "vSwitch" : {
          "type" : "string"
        },
        "vswitch" : {
          "type" : "string"
        }
      },
      "description" : "Spec contains parameters for Host"
    },
    "ConfigDriftApplySpec" : {
      "properties" : {
        "reconciliationForResources" : {
          "type" : "array",
          "description" : "List of Configuration Reconciliation for resource, mutually exclusive with reconciliationForDrifts",
          "items" : {
            "$ref" : "#/definitions/ReconciliationForResource"
          }
        }
      },
      "description" : "Describes Configuration Reconciliation operations"
    },
    "CsrGenerationSpec" : {
      "required" : [ "country", "keyAlgorithm", "keySize", "locality", "organization", "organizationUnit", "state" ],
      "properties" : {
        "country" : {
          "type" : "string",
          "example" : "IN",
          "description" : "ISO 3166 country code where company is legally registered"
        },
        "email" : {
          "type" : "string",
          "example" : "admin@vmware.com",
          "description" : "Contact email address"
        },
        "keyAlgorithm" : {
          "type" : "string",
          "example" : "One among: RSA",
          "description" : "The public key algorithm of the certificate"
        },
        "keySize" : {
          "type" : "string",
          "example" : "One among: 2048, 3072, 4096",
          "description" : "Certificate public key size"
        },
        "locality" : {
          "type" : "string",
          "example" : "Bengaluru",
          "description" : "The city or locality where company is legally registered"
        },
        "organization" : {
          "type" : "string",
          "example" : "VMware Inc.",
          "description" : "The name under which company is legally registered"
        },
        "organizationUnit" : {
          "type" : "string",
          "example" : "VCF",
          "description" : "Organization with which the certificate is associated"
        },
        "state" : {
          "type" : "string",
          "example" : "Karnataka",
          "description" : "The full name of the state where company is legally registered"
        }
      },
      "description" : "This specification contains Certificate Signing Request (CSR) details"
    },
    "PageOfConfigDriftSpec" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/ConfigDriftSpec"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "NsxtHostCluster" : {
      "properties" : {
        "availableHardwareSupportManagers" : {
          "type" : "array",
          "description" : "Available Hardware Support Managers for Firmware upgrade",
          "items" : {
            "$ref" : "#/definitions/HardwareSupportPackages"
          }
        },
        "configuredHardwareSupportManagers" : {
          "type" : "array",
          "description" : "Configured Hardware Support Managers for Firmware upgrade",
          "items" : {
            "$ref" : "#/definitions/HardwareSupportPackage"
          }
        },
        "domainId" : {
          "type" : "string",
          "description" : "Id of the domain the Host cluster belongs to"
        },
        "id" : {
          "type" : "string",
          "description" : "Host cluster VCF cluster id"
        },
        "name" : {
          "type" : "string",
          "description" : "Cluster name"
        },
        "primaryCluster" : {
          "type" : "boolean",
          "description" : "Flag to determine if primary cluster for vLCM"
        },
        "resourceHealth" : {
          "type" : "string",
          "description" : "Current resource health status"
        },
        "totalUnits" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total number of hosts in the Host cluster"
        },
        "upgradeStatus" : {
          "type" : "string",
          "description" : "Upgrade status with respect to the bundle"
        },
        "upgradedUnits" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of hosts which are already upgraded"
        },
        "version" : {
          "type" : "string",
          "description" : "The current version of the host node cluster.If a partial upgrade is done, this will be the least version among the hosts"
        },
        "vlcmEnabled" : {
          "type" : "boolean"
        }
      },
      "description" : "NSX Host Cluster Upgrade Resource"
    },
    "NsxTEdgeNodeSpec" : {
      "required" : [ "clusterId", "edgeNodeName", "edgeTepVlan", "interRackCluster", "managementGateway", "managementIP" ],
      "properties" : {
        "clusterId" : {
          "type" : "string",
          "description" : "Cluster on which the edge needs to be deployed"
        },
        "edgeNodeName" : {
          "type" : "string",
          "description" : "Edge Node Name"
        },
        "edgeTep1IP" : {
          "type" : "string",
          "description" : "Edge TEP 1 IP"
        },
        "edgeTep2IP" : {
          "type" : "string",
          "description" : "Edge TEP 2 IP"
        },
        "edgeTepGateway" : {
          "type" : "string",
          "description" : "Edge TEP Gateway IP"
        },
        "edgeTepIpAddressPool" : {
          "description" : "Specifications for Edge Node",
          "$ref" : "#/definitions/EdgeTepIpAddressPoolSpec"
        },
        "edgeTepVlan" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Edge TEP VLAN"
        },
        "firstNsxVdsUplink" : {
          "type" : "string",
          "example" : "One among: uplink1, uplink2, uplink3, uplink4, uplink5, uplink6, uplink7, uplink8",
          "description" : "First NSX enabled VDS uplink for the Edge node"
        },
        "interRackCluster" : {
          "type" : "boolean",
          "description" : "Is inter-rack cluster(true for L2 non-uniform and L3 : At least one of management, uplink, Edge and host TEP networks is different for hosts of the cluster, false for L2 uniform :   All hosts in cluster have identical management, uplink, Edge and host TEP networks)"
        },
        "managementGateway" : {
          "type" : "string",
          "description" : "Management Gateway IP"
        },
        "managementIP" : {
          "type" : "string",
          "description" : "Management Interface IP"
        },
        "vmManagementPortgroupVlan" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Management Vlan Id"
        },
        "vmManagementPortgroupName" : {
          "type" : "string",
          "description" : "Management Network Name"
        },
        "secondNsxVdsUplink" : {
          "type" : "string",
          "example" : "One among: uplink1, uplink2, uplink3, uplink4, uplink5, uplink6, uplink7, uplink8",
          "description" : "Second NSX enabled VDS uplink for the Edge node"
        },
        "uplinkNetwork" : {
          "type" : "array",
          "description" : "Specifications of Tier0 uplinks for the Edge Node",
          "items" : {
            "$ref" : "#/definitions/NsxTEdgeUplinkNetwork"
          }
        }
      },
      "description" : "This specification contains configuration inputs required to deploy and configure an edge node"
    },
    "OidcInfo" : {
      "properties" : {
        "authEndpoint" : {
          "type" : "string",
          "description" : "Authentication endpoint of the Identity Provider"
        },
        "authMethod" : {
          "type" : "string",
          "example" : "One among: CLIENT_SECRET_BASIC, CLIENT_SECRET_POST, CLIENT_SECRET_JWT, PRIVATE_KEY_JWT",
          "description" : "Authentication method used by the Identity Provider"
        },
        "clientId" : {
          "type" : "string",
          "description" : "Client identifier to connect to the Identity Provider"
        },
        "discoveryEndpoint" : {
          "type" : "string",
          "description" : "Endpoint to retrieve the Identity Provider metadata"
        },
        "issuer" : {
          "type" : "string",
          "description" : "The Identity Provider namespace. It is used to validate the issuer in the acquired OAuth2 token"
        },
        "logoutEndpoint" : {
          "type" : "string",
          "description" : "The endpoint to use for terminating the user's session at the Identity Provider"
        },
        "publicKeyUri" : {
          "type" : "string",
          "description" : "Endpoint to retrieve the Identity Provider public key for validation"
        },
        "tokenEndpoint" : {
          "type" : "string",
          "description" : "Token endpoint of the Identity Provider"
        }
      },
      "description" : "Represents Identity management configuration when the provider is based on OIDC"
    },
    "NsxtTransportZoneInfo" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the NSX transport zone"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the NSX transport zone"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of the NSX transport zone"
        },
        "nsxtTags" : {
          "$ref" : "#/definitions/NsxtTag",
          "description" : "List of tags associated with the NSX transport zone"
        }
      },
      "description" : "NSX transport zone representation."
    },
    "NsxtTag" : {
      "properties" : {
        "scope" : {
          "type" : "string",
          "description" : "The scope of the NSX tag"
        },
        "tag" : {
          "type" : "string",
          "description" : "The value of the NSX tag"
        }
      },
      "description" : "NSX tag representation"
    },
    "NsxtIpAddressPoolRange" : {
      "properties" : {
        "end" : {
          "type" : "string",
          "description" : "The end of the IP address range"
        },
        "start" : {
          "type" : "string",
          "description" : "The start of the IP address range"
        }
      },
      "description" : "NSX IP address pool range representation"
    },
    "NsxtManagerCluster" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Manager cluster id"
        },
        "name" : {
          "type" : "string",
          "description" : "Manager cluster name"
        },
        "resourceHealth" : {
          "type" : "string",
          "description" : "Current resource health status"
        },
        "upgradeStatus" : {
          "type" : "string",
          "description" : "Upgrade status with respect to the bundle"
        },
        "version" : {
          "type" : "string",
          "description" : "The current version of the manager cluster.If a partial upgrade is done, this will be the least version among the managers in the manager cluster"
        }
      },
      "description" : "Nsx Manager Cluster Upgrade Resource"
    },
    "LocalAccountPasswordInfo" : {
      "required" : [ "newPassword" ],
      "properties" : {
        "newPassword" : {
          "type" : "string",
          "description" : "The new password of the local account"
        },
        "oldPassword" : {
          "type" : "string",
          "description" : "The old password of the local account"
        }
      },
      "description" : "Represents local account and its attributes"
    },
    "ClusterStretchSpec" : {
      "required" : [ "hostSpecs", "witnessSpec" ],
      "properties" : {
        "hostSpecs" : {
          "type" : "array",
          "description" : "List of vSphere host information from the free pool to consume in the workload domain",
          "items" : {
            "$ref" : "#/definitions/HostSpec"
          }
        },
        "isEdgeClusterConfiguredForMultiAZ" : {
          "type" : "boolean",
          "description" : "This parameter is required for stretching the clusters that host Edge Cluster VMs. It is an acknowledgement, that the necessary network configurations are considered for the edge cluster to work with vSAN stretched cluster during a failover."
        },
        "networkProfiles" : {
          "type" : "array",
          "description" : "The network profile to be associated with Secondary AZ Hosts in NSX.",
          "items" : {
            "$ref" : "#/definitions/StretchClusterNetworkProfile"
          }
        },
        "nsxStretchClusterSpec" : {
          "description" : "NSX configuration to be associated with the Secondary AZ Hosts",
          "$ref" : "#/definitions/NsxStretchClusterSpec"
        },
        "secondaryAzOverlayVlanId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Secondary AZ Overlay Vlan Id. This field is deprecated. The secondary AZ overlay vlan id should be mentioned in the uplinkProfile field instead",
          "deprecated" : true
        },
        "vsanNetworkSpecs" : {
          "type" : "array",
          "description" : "vSAN Network Pool Specs",
          "items" : {
            "$ref" : "#/definitions/VSANNetworkSpec"
          }
        },
        "deployWithoutLicenseKeys" : {
          "type" : "boolean",
          "description" : "Enable stretch of the cluster without licensing the AZ2 hosts."
        },
        "witnessSpec" : {
          "description" : "Witness host information",
          "$ref" : "#/definitions/WitnessSpec"
        },
        "witnessTrafficSharedWithVsanTraffic" : {
          "type" : "boolean",
          "description" : "Witness traffic to be shared with vSAN traffic"
        }
      },
      "description" : "This spec contains the parameters required to convert a Standard vSAN cluster to a Stretched cluster"
    },
    "CertificateOperationSpec" : {
      "required" : [ "operationType" ],
      "properties" : {
        "operationType" : {
          "type" : "string",
          "example" : "One among: INSTALL",
          "description" : "The Certificates operation type"
        },
        "resources" : {
          "type" : "array",
          "description" : "Resource(s) in a domain",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        }
      },
      "description" : "This specification contains certificate operation request details"
    },
    "PageOfVra" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Vra"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "CheckSetQueryDomainResources" : {
      "required" : [ "domainId" ],
      "properties" : {
        "domainId" : {
          "type" : "string",
          "description" : "Id of the domain to search for resources in"
        },
        "resources" : {
          "type" : "array",
          "description" : "Resources in the domain to generate check-set candidates for",
          "items" : {
            "$ref" : "#/definitions/CheckSetQueryResource"
          }
        }
      },
      "description" : "Spec representing a set of resources in a domain to query check-sets for"
    },
    "TeamingSpec" : {
      "properties" : {
        "activeUplinks" : {
          "type" : "array",
          "description" : "The list of active uplinks",
          "items" : {
            "type" : "string"
          }
        },
        "policy" : {
          "type" : "string",
          "description" : "The teaming policy associated with the uplink profile"
        },
        "standByUplinks" : {
          "type" : "array",
          "description" : "The list of stand by uplinks",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "This specification contains the teaming policies associated with the uplink profile."
    },
    "PageOfHealthSummary" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/HealthSummary"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "HealthCheckResult" : {
      "required" : [ "description", "id", "name" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Health check description"
        },
        "id" : {
          "type" : "string",
          "description" : "Health Check id"
        },
        "name" : {
          "type" : "string",
          "description" : "Health Check name"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "ID of the resource, if the ResourceType is CLUSTER, then the resourceId == ClusterId"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Name of  resource, if the ResourceType is CLUSTER, then the resourceName == ClusterName"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: CLUSTER",
          "description" : "Type of the health status."
        },
        "status" : {
          "type" : "string",
          "example" : "One among: ENABLED, DISABLED",
          "description" : "Type of the health status."
        },
        "type" : {
          "type" : "string",
          "example" : "One among: VSAN",
          "description" : "Type of the health check."
        }
      },
      "description" : "HealthCheckResult"
    },
    "VcfService" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the service"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the service"
        },
        "status" : {
          "type" : "string",
          "description" : "Status of the service"
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the service"
        }
      },
      "description" : "VCF service representation"
    },
    "PageOfCredential" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Credential"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "Vrli" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The ID of the VMware Aria Operations for Logs instance"
        },
        "loadBalancerFqdn" : {
          "type" : "string",
          "example" : "load-balancer.vrack.vsphere.local",
          "description" : "The Fully Qualified Domain Name of the VMware Aria Operations for Logs load balancer"
        },
        "loadBalancerIpAddress" : {
          "type" : "string",
          "example" : "10.0.0.15",
          "description" : "The IP address of the VMware Aria Operations for Logs load balancer"
        },
        "nodes" : {
          "type" : "array",
          "description" : "The nodes of the VMware Aria Operations for Logs instance",
          "items" : {
            "$ref" : "#/definitions/VrealizeProductNode"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "ACTIVE, ERROR",
          "description" : "The status of the VMware Aria Operations for Logs instance"
        },
        "version" : {
          "type" : "string",
          "example" : "4.8.0-13036238",
          "description" : "The version of the VMware Aria Operations for Logs instance"
        }
      },
      "description" : "Spec contains parameters of a VMware Aria Operations for Logs instance"
    },
    "HardwareSupportPackage" : {
      "required" : [ "name", "pkg" ],
      "properties" : {
        "displayName" : {
          "type" : "string",
          "description" : "Hardware Support Manager display name"
        },
        "name" : {
          "type" : "string",
          "description" : "Hardware Support Manager Name"
        },
        "pkg" : {
          "description" : "Hardware Support Package",
          "$ref" : "#/definitions/PackageSpec"
        }
      },
      "description" : "Configured Hardware Support Manager details"
    },
    "ExpirationDetails" : {
      "properties" : {
        "connectivityStatus" : {
          "type" : "string",
          "example" : "One among: ACTIVE, ERROR, UNKNOWN",
          "description" : "Connectivity status"
        },
        "expiryDate" : {
          "type" : "string",
          "description" : "Expiration date"
        },
        "lastCheckedDate" : {
          "type" : "string",
          "description" : "Last checked date"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: ACTIVE, EXPIRING, EXPIRED, UNKNOWN",
          "description" : "Expiration status"
        }
      },
      "description" : "Represents expiration details of the credential"
    },
    "SupportBundle" : {
      "properties" : {
        "bundleAvailable" : {
          "type" : "string",
          "description" : "Indicate if bundle is available in file system."
        },
        "bundleName" : {
          "type" : "string",
          "description" : "Name of the Support Bundle."
        },
        "completionTimestamp" : {
          "type" : "string",
          "description" : "CompletionTimestamp."
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "CreationTimestamp."
        },
        "description" : {
          "type" : "string",
          "description" : "Name of the Operation."
        },
        "id" : {
          "type" : "string",
          "description" : "Id of the Support Bundle task."
        },
        "status" : {
          "type" : "string",
          "example" : "One among: IN_PROGRESS, PENDING, COMPLETED_WITH_SUCCESS, COMPLETED_WITH_FAILURE",
          "description" : "Support Bundle Status."
        }
      }
    },
    "VvolDatastoreSpec" : {
      "required" : [ "name", "vasaProviderSpec" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the datastore"
        },
        "vasaProviderSpec" : {
          "description" : "Vasa Provider spec",
          "$ref" : "#/definitions/VasaProviderSpec"
        }
      },
      "description" : "This specification contains cluster storage configuration for vVol"
    },
    "LicenseKeyValidity" : {
      "properties" : {
        "expiryDate" : {
          "type" : "string",
          "description" : "The license key expiry date"
        },
        "licenseKeyStatus" : {
          "type" : "string",
          "example" : "One among: EXPIRED, ACTIVE, NEVER_EXPIRES",
          "description" : "The validity status of the license key"
        }
      },
      "description" : "Defines license key validity details"
    },
    "LicenseKey" : {
      "required" : [ "description", "key", "productType" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Description of the license key given by user"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the license key"
        },
        "isUnlimited" : {
          "type" : "boolean",
          "description" : "Indicates if the license key has unlimited usage"
        },
        "key" : {
          "type" : "string",
          "example" : "XX0XX-XX0XX-XX0XX-XX0XX-XX0XX ",
          "description" : "The 29 alpha numeric character license key with hyphens"
        },
        "licenseKeyUsage" : {
          "description" : "License key usage details",
          "$ref" : "#/definitions/LicenseKeyUsage"
        },
        "licenseKeyValidity" : {
          "description" : "License key validity details",
          "$ref" : "#/definitions/LicenseKeyValidity"
        },
        "productType" : {
          "type" : "string",
          "example" : "One among: VCENTER, VSAN, SDDC_MANAGER, ESXI, NSXT, NSXIO, WCP, HORIZON_VIEW",
          "description" : "The type of the product to which the license key is applicable"
        },
        "productVersion" : {
          "type" : "string",
          "description" : "Product version"
        }
      },
      "description" : "Defines a license key and its attributes"
    },
    "Locale" : {
      "properties" : {
        "country" : {
          "type" : "string"
        },
        "displayCountry" : {
          "type" : "string"
        },
        "displayLanguage" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "displayScript" : {
          "type" : "string"
        },
        "displayVariant" : {
          "type" : "string"
        },
        "extensionKeys" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Character"
          }
        },
        "iso3Country" : {
          "type" : "string"
        },
        "iso3Language" : {
          "type" : "string"
        },
        "language" : {
          "type" : "string"
        },
        "script" : {
          "type" : "string"
        },
        "unicodeLocaleAttributes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "unicodeLocaleKeys" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "variant" : {
          "type" : "string"
        }
      }
    },
    "NsxtManagerSpec" : {
      "properties" : {
        "hostname" : {
          "type" : "string",
          "description" : "NSX Manager hostname"
        },
        "ip" : {
          "type" : "string",
          "description" : "NSX Manager IP Address"
        }
      },
      "description" : "Spec contains parameters for NSX manager"
    },
    "Task" : {
      "properties" : {
        "completionTimestamp" : {
          "type" : "string",
          "description" : "Task completion timestamp"
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "Task creation timestamp"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "Task ID"
        },
        "isCancellable" : {
          "type" : "boolean",
          "description" : "Represents task can be cancellable or not."
        },
        "localizableDescriptionPack" : {
          "description" : "Localizable Task description",
          "$ref" : "#/definitions/MessagePack"
        },
        "name" : {
          "type" : "string",
          "description" : "Task name"
        },
        "resolutionStatus" : {
          "type" : "string",
          "example" : "Can have only one of the two values: RESOLVED or UNRESOLVED",
          "description" : "Resolution state"
        },
        "resources" : {
          "type" : "array",
          "description" : "List of resources associated with task",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "One among: PENDING, IN_PROGRESS, In Progress, SUCCESSFUL, Successful, FAILED, Failed, CANCELLED, Cancelled, COMPLETED_WITH_WARNING, SKIPPED",
          "description" : "Task status"
        },
        "subTasks" : {
          "type" : "array",
          "description" : "List of sub-tasks of the task",
          "items" : {
            "$ref" : "#/definitions/SubTask"
          }
        },
        "type" : {
          "type" : "string",
          "example" : "Sample values: HOST_COMMISSION, HOST_DECOMMISSION",
          "description" : "Operation that is represented by the Task in machine readable format.  The value is controlled by the owners/producers of the Task. The convention is <resource>_<operation>"
        },
        "isRetryable" : {
          "type" : "boolean",
          "description" : "Indicates whether a task is eligible for retry or not."
        }
      },
      "description" : "Represents a task"
    },
    "PageOfVrops" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Vrops"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "Cpu" : {
      "properties" : {
        "cores" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of CPU cores"
        },
        "cpuCores" : {
          "type" : "array",
          "description" : "Information about each of the CPU cores",
          "items" : {
            "$ref" : "#/definitions/CpuCore"
          }
        },
        "frequencyMHz" : {
          "type" : "number",
          "format" : "double",
          "description" : "Total CPU frequency in MHz"
        },
        "usedFrequencyMHz" : {
          "type" : "number",
          "format" : "double",
          "description" : "Used CPU frequency in MHz"
        }
      },
      "description" : "Represents information about CPUs on a host"
    },
    "VxRailDetails" : {
      "properties" : {
        "adminCredentials" : {
          "description" : "VxRail Manager admin credentials",
          "$ref" : "#/definitions/UnmanagedResourceCredential"
        },
        "arrayContextWithKeyValuePair" : {
          "type" : "object",
          "description" : "Map of Context class with list of key and value pairs for array objects",
          "additionalProperties" : {
            "$ref" : "#/definitions/MapOfstringAndListOfVxRailCustomArrayContext"
          }
        },
        "contextWithKeyValuePair" : {
          "type" : "object",
          "description" : "Map of Context class with list of key and value pairs",
          "additionalProperties" : {
            "$ref" : "#/definitions/MapOfstringAndListOfVxRailContext"
          }
        },
        "dnsName" : {
          "type" : "string",
          "description" : "DNS Name/Hostname of the VxRail Manager"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP Address of the VxRail Manager"
        },
        "networks" : {
          "type" : "array",
          "description" : "Network details of the VxRail Manager",
          "items" : {
            "$ref" : "#/definitions/Network"
          }
        },
        "nicProfile" : {
          "type" : "string",
          "description" : "Nic Profile Type"
        },
        "rootCredentials" : {
          "description" : "VxRail Manager root credentials",
          "$ref" : "#/definitions/UnmanagedResourceCredential"
        },
        "sshThumbprint" : {
          "type" : "string",
          "description" : "SSH thumbprint of the VxRail Manager"
        },
        "sslThumbprint" : {
          "type" : "string",
          "description" : "SSL thumbprint of the VxRail Manager"
        }
      },
      "description" : "Contains the VxRail Manager details"
    },
    "LdapInfo" : {
      "properties" : {
        "domainAlias" : {
          "type" : "string",
          "description" : "The optional alias to associate the Domain name"
        },
        "domainName" : {
          "type" : "string",
          "description" : "The name to associate with the created Domain"
        },
        "sourceDetails" : {
          "description" : "Details of the Identity Source",
          "$ref" : "#/definitions/SourceDetails"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the LDAP Server"
        },
        "username" : {
          "type" : "string",
          "description" : "User name to connect to LDAP(s) server"
        }
      },
      "description" : "Represents Identity management configuration when the protocol is LDAP"
    },
    "MapOfstringAndVvsVersionAliases" : {
      "type" : "object",
      "additionalProperties" : {
        "$ref" : "#/definitions/VvsVersionAliases"
      }
    },
    "MapOfstringAndstring" : {
      "type" : "object",
      "additionalProperties" : {
        "type" : "string"
      }
    },
    "RefreshToken" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Refresh token id that can be used to request new access token"
        }
      },
      "description" : "This contains refresh token id for the user API access."
    },
    "UplinkProfile" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The uplink profile name"
        },
        "supportedTeamingPolicies" : {
          "type" : "object",
          "description" : "List of supported teaming policies in NSX",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "teamings" : {
          "type" : "array",
          "description" : "The teaming policies to be associated with the uplink profile",
          "items" : {
            "$ref" : "#/definitions/TeamingSpec"
          }
        },
        "transportVlan" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The VLAN used for tagging overlay traffic of the associated Host Switch"
        }
      },
      "description" : "This specification contains the policies for the links from hypervisor hosts to NSX logical switch."
    },
    "NetworkConfigProfileResponse" : {
      "properties" : {
        "queryInfo" : {
          "description" : "Query info",
          "$ref" : "#/definitions/QueryInfo"
        },
        "result" : {
          "description" : "Query result",
          "$ref" : "#/definitions/PageOfNetworkConfigProfile"
        }
      },
      "description" : "This model contains response for an Async API call to get pre-configured Profiles."
    },
    "ClusterExpansionNetworkProfile" : {
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "The network profile description"
        },
        "name" : {
          "type" : "string",
          "description" : "The network profile name"
        },
        "nsxtHostSwitchConfigs" : {
          "type" : "array",
          "description" : "The list of NSX host switch configurations",
          "items" : {
            "$ref" : "#/definitions/NsxtHostSwitchConfig"
          }
        }
      },
      "description" : "This specification contains the host switch configurations for the NSX transport node."
    },
    "Disk" : {
      "properties" : {
        "capacityMB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Total capacity of the disk in MB"
        },
        "diskType" : {
          "type" : "string",
          "example" : "One among: HDD, FLASH",
          "description" : "Type of the disk."
        },
        "manufacturer" : {
          "type" : "string",
          "description" : "Hardware manufacturer of the disk"
        },
        "model" : {
          "type" : "string",
          "description" : "Hardware model of the disk"
        }
      },
      "description" : "Represents a disk"
    },
    "TaggedResource" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the resource"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of the resource"
        }
      },
      "description" : "Specifies a resource with id and type"
    },
    "ClusterUnstretchSpec" : {
      "description" : "This spec contains the parameters required to convert a Stretched cluster to a Standard vSAN cluster"
    },
    "PageOfRole" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Role"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "BackupTask" : {
      "properties" : {
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "Backup task ID"
        },
        "name" : {
          "type" : "string",
          "description" : "Backup task name"
        },
        "resources" : {
          "type" : "array",
          "description" : "Backup resources, to get the backup details",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "One among: IN_PROGRESS",
          "description" : "Backup task status"
        }
      }
    },
    "DvsSpec" : {
      "required" : [ "dvsName", "networks" ],
      "properties" : {
        "dvsName" : {
          "type" : "string",
          "description" : "DVS Name"
        },
        "isUsedByNsxt" : {
          "type" : "boolean",
          "description" : "Flag indicating whether the DVS is used by NSX.\n This property is deprecated in favor of nsxtSwitchConfig field",
          "deprecated" : true
        },
        "mtu" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "DVS MTU (default value is 9000)",
          "minimum" : 1500.0,
          "maximum" : 9000.0
        },
        "networks" : {
          "type" : "array",
          "example" : "One among: VSAN, VMOTION, MANAGEMENT, VM_MANAGEMENT or any custom network types defined in networkSpecs",
          "description" : "Types of networks in this portgroup",
          "items" : {
            "type" : "string"
          }
        },
        "niocSpecs" : {
          "type" : "array",
          "description" : "List of NIOC specs for networks",
          "items" : {
            "$ref" : "#/definitions/NiocSpec"
          }
        },
        "vmnics" : {
          "type" : "array",
          "description" : "Vmnics to be attached to the DVS. \n This property is deprecated in favor of vmnicsToUplinks fields",
          "items" : {
            "type" : "string"
          }
        },
        "nsxtSwitchConfig" : {
          "$ref" : "#/definitions/NsxtSwitchConfig",
          "description" : "The NSX Configurations to be associated with vSphere Distributed Switch"
        },
        "vmnicsToUplinks" : {
          "type" : "array",
          "description" : "The map of vSphere Distributed Switch uplinks to the NSX switch uplinks.",
          "items" : {
            "$ref" : "#/definitions/UplinkMapping"
          }
        }
      },
      "description" : "Spec contains parameters for DVS"
    },
    "VmnicToUplink" : {
      "required" : [ "id", "uplink" ],
      "description" : "This specification contains vmnic to uplink configurations for vSphere host.",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "VmNic ID of vSphere host to be associated with VDS, once added to cluster"
        },
        "uplink" : {
          "type" : "string",
          "description" : "The uplink name of the vSphere Distributed Switch to be associated"
        }
      }
    },
    "PageOfEndpoint" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Endpoint"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ErrorCause" : {
      "properties" : {
        "message" : {
          "type" : "string",
          "description" : "The message describing the reason for the error"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the error cause"
        }
      },
      "description" : "Describes a single error cause"
    },
    "PageOfVcenter" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Vcenter"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "PageOfDomainIntegration" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/DomainIntegration"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "AssessmentPartialRetryInput" : {
      "properties" : {
        "errorIds" : {
          "type" : "array",
          "description" : "List of error ids to retry",
          "items" : {
            "type" : "string"
          }
        },
        "options" : {
          "type" : "object",
          "example" : "{\"discoveryCaching\": \"true\"}",
          "description" : "Options map (toggles) to control assessment flow. Available toggles 'discoveryCaching' - if set to true the assessment engine will use the Domain data (if present) from previous discovery execution. If any of the passed in the request domains is not present in the cache the Discovery is triggered for ALL domains (even the ones existing in the cache). ",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Input spec used to trigger partial retry of an already-completed assessment run"
    },
    "DiscoveryProgress" : {
      "properties" : {
        "percentageComplete" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Percentage completed"
        },
        "progressMessages" : {
          "type" : "array",
          "description" : "Progress messages",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Information about the assessment run progress."
    },
    "TagManagerModel" : {
      "properties" : {
        "tagManagerUrl" : {
          "type" : "string",
          "description" : "Tag Manager URL value"
        }
      },
      "description" : "Represents a Tag Manager Model"
    },
    "NsxtHostClusterUpgradeSpec" : {
      "required" : [ "hostClusterId" ],
      "properties" : {
        "hostClusterId" : {
          "type" : "string",
          "description" : "Resource ID of the host transport node cluster"
        },
        "hostParallelUpgrade" : {
          "type" : "boolean",
          "description" : "Flag for disabling/enabling parallel upgrade within the cluster"
        },
        "liveUpgrade" : {
          "type" : "boolean",
          "description" : "Flag for disabling/enabling live upgrade of hosts in the transportnode clusters"
        }
      },
      "description" : "Host trnasport node cluster upgrade input"
    },
    "Datastore" : {
      "properties" : {
        "datastoreType" : {
          "type" : "string",
          "description" : "Datastore Type"
        },
        "freeCapacityGB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Free storage capacity in GB"
        },
        "id" : {
          "type" : "string",
          "description" : "Id of the datastore"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the datastore"
        },
        "tags" : {
          "type" : "array",
          "description" : "List of assigned tags for the datastore",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        },
        "totalCapacityGB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Total storage capacity in GB"
        },
        "url" : {
          "type" : "string",
          "description" : "URL of the datastore"
        },
        "vcDatacenterName" : {
          "type" : "string",
          "description" : "Name of the vCenter datacenter that this datastore resides"
        },
        "vcInstanceUuid" : {
          "type" : "string",
          "description" : "Instance UUID of the vCenter that manages this datastore"
        },
        "vmCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of VMs on the datastore"
        }
      },
      "description" : "Represents a datastore in the system"
    },
    "Functionality" : {
      "properties" : {
        "errorMessage" : {
          "type" : "string",
          "description" : "The localized error message"
        },
        "isAllowed" : {
          "type" : "boolean",
          "example" : "True",
          "description" : "Flag indicating if a given functionality is allowed/disallowed"
        },
        "type" : {
          "type" : "string",
          "example" : "Sample values: HOST_COMMISSION, HOST_DECOMMISSION",
          "description" : "Operation that is represented in machine readable format. The convention is <resource>_<operation>"
        }
      },
      "description" : "Defines a functionality model"
    },
    "StorageInfo" : {
      "properties" : {
        "total" : {
          "description" : "Total value",
          "$ref" : "#/definitions/DataMetric"
        },
        "used" : {
          "description" : "Used value",
          "$ref" : "#/definitions/DataMetric"
        }
      },
      "description" : "Represents a storage metric with used and total for a resource"
    },
    "Throwable" : {
      "properties" : {
        "localizedMessage" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "stackTrace" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StackTraceElement"
          }
        },
        "suppressed" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Throwable"
          }
        }
      }
    },
    "EdgeCluster" : {
      "properties" : {
        "clusters" : {
          "type" : "array",
          "description" : "List of clusters associated with the edge cluster",
          "items" : {
            "$ref" : "#/definitions/ClusterReference"
          }
        },
        "edgeNodes" : {
          "type" : "array",
          "description" : "List of edge nodes associated with the edge cluster",
          "items" : {
            "$ref" : "#/definitions/EdgeNodeReference"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the egde cluster"
        },
        "isTier0ManagedBySystem" : {
          "type" : "boolean",
          "description" : "Whether or not this edge cluster's tier 0 is managed by system"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the edge cluster"
        },
        "nsxtCluster" : {
          "description" : "NSX cluster associated with the edge cluster",
          "$ref" : "#/definitions/NsxTClusterReference"
        },
        "skipTepRoutabilityCheck" : {
          "type" : "boolean",
          "description" : "Whether or not host/TEP network checks were done for this edge cluster"
        }
      },
      "description" : "EdgeCluster representation"
    },
    "ImportVdsSpec" : {
      "description" : "This specification contains the parameters required to import vSphere Distributed Switches to the inventory for a cluster.",
      "required" : [ "listOfVdsDetails" ],
      "properties" : {
        "listOfVdsDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VdsDetail"
          },
          "description" : "List of details of vSphere Distributed Switches to be imported to the inventory"
        }
      }
    },
    "VdsDetail" : {
      "required" : [ "vdsName" ],
      "description" : "This specification contains the details of vSphere Distributed Switch to be imported to the inventory",
      "properties" : {
        "vdsName" : {
          "type" : "string",
          "description" : "vSphere Distributed Switch name"
        }
      }
    },
    "InventoryMismatchInfo" : {
      "description" : "Represents the inventory mismatch info.",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Inventory mismatch type",
          "example" : "One among: VDS_LEVEL, PORTGROUP_LEVEL, NSX_LEVEL"
        },
        "inventoryObjects" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Inventory object names associated with the mismatch"
        }
      }
    },
    "NetworkProfileConfiguration" : {
      "description" : "This configuration contains the host switch configurations for the NSX transport node.",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The network profile name"
        },
        "isDefault" : {
          "type" : "boolean",
          "description" : "Flag that denotes if the profile is default or not"
        },
        "nsxtHostSwitchConfigs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NsxtHostSwitchConfiguration"
          },
          "description" : "The list of NSX host switch configurations"
        }
      }
    },
    "AutoRotateCredentialPolicy" : {
      "required" : [ "nextSchedule" ],
      "properties" : {
        "frequencyInDays" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Frequency in days"
        },
        "nextSchedule" : {
          "type" : "string",
          "description" : "The timestamp at which auto-rotate for credential will run"
        }
      },
      "description" : "Represents a auto-rotate policy for a credential"
    },
    "SoftwareComponent" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of Resource/Software Component"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of Resource/Software Component"
        }
      }
    },
    "SddcNsxtSpec" : {
      "required" : [ "nsxtManagerSize", "nsxtManagers", "rootNsxtManagerPassword", "vip", "vipFqdn" ],
      "properties" : {
        "ipAddressPoolSpec" : {
          "description" : "NSX IP address pool specification",
          "$ref" : "#/definitions/IpAddressPoolSpec"
        },
        "nsxtAdminPassword" : {
          "type" : "string",
          "description" : "NSX admin password. The password must be at least 12 characters long. Must contain at-least 1 uppercase, 1 lowercase, 1 special character and 1 digit. In addition, a character cannot be repeated 3 or more times consectively."
        },
        "nsxtAuditPassword" : {
          "type" : "string",
          "description" : "NSX audit password. The password must be at least 12 characters long. Must contain at-least 1 uppercase, 1 lowercase, 1 special character and 1 digit. In addition, a character cannot be repeated 3 or more times consectively."
        },
        "nsxtLicense" : {
          "type" : "string",
          "description" : "NSX Manager license"
        },
        "nsxtManagerSize" : {
          "type" : "string",
          "example" : "One among:medium, large",
          "description" : "NSX Manager size"
        },
        "nsxtManagers" : {
          "type" : "array",
          "description" : "NSX Managers",
          "items" : {
            "$ref" : "#/definitions/NsxtManagerSpec"
          }
        },
        "overLayTransportZone" : {
          "description" : "NSX Overlay Transport zone.\n This property is deprecated in favor of nsxtSwitchConfig field",
          "$ref" : "#/definitions/NsxtTransportZone"
        },
        "rootNsxtManagerPassword" : {
          "type" : "string",
          "description" : "NSX Manager root password. Password should have 1) At least eight characters, 2) At least one lower-case letter, 3) At least one upper-case letter 4) At least one digit 5) At least one special character, 6) At least five different characters , 7) No dictionary words, 6) No palindromes"
        },
        "transportVlanId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Transport VLAN ID"
        },
        "vip" : {
          "type" : "string",
          "description" : "Virtual IP address which would act as proxy/alias for NSX Managers"
        },
        "vipFqdn" : {
          "type" : "string",
          "description" : "FQDN for VIP so that common SSL certificates can be installed across all managers"
        }
      },
      "description" : "Spec contains parameters for NSX deployment and configurations"
    },
    "LicensingInfo" : {
      "required" : [ "resourceType" ],
      "properties" : {
        "daysRemainingToSubscribe" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of days remaining to subscribe"
        },
        "isRegistered" : {
          "type" : "boolean",
          "description" : "Flag indicating the resource is registered for subscription or not"
        },
        "isSubscribed" : {
          "type" : "boolean",
          "description" : "Flag indicating the resource is subscribed or not"
        },
        "licensingMode" : {
          "type" : "string",
          "example" : "One among: SUBSCRIPTION, PERPETUAL",
          "description" : "Licensing mode"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "ID of the resource, need not be set for the resource of the type : SYSTEM"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: SYSTEM, DOMAIN, CLUSTER",
          "description" : "Type of the resource"
        },
        "subscriptionStatus" : {
          "type" : "string",
          "example" : "One among: UNSUBSCRIBED, ACTIVE, EXPIRED",
          "description" : "Status of the subscription mode"
        },
        "subscribedState" : {
          "type" : "string",
          "example" : "One among: UNSUBSCRIBED, PARTIALLY_SUBSCRIBED, SUBSCRIBED",
          "description" : "Subscribed state"
        },
        "entitlements" : {
          "description" : "The set of entitlements associated with the resource",
          "$ref" : "#/definitions/Entitlements"
        }
      },
      "description" : "Licensing information of the resource"
    },
    "Entitlements" : {
      "properties" : {
        "hasNsxEntitlement" : {
          "type" : "boolean",
          "description" : "Flag indicating whether the resource has NSX entitlement or not"
        }
      },
      "description" : "Entitlements associated with the resource"
    },
    "DataMetric" : {
      "properties" : {
        "unit" : {
          "type" : "string",
          "description" : "Unit of the metric",
          "enum" : [ "B", "KB", "MB", "GB", "TB", "PB" ]
        },
        "value" : {
          "type" : "number",
          "format" : "double",
          "description" : "Value of the metric"
        }
      },
      "description" : "Represents a single metric representing digital data"
    },
    "BackupConfiguration" : {
      "properties" : {
        "backupLocations" : {
          "type" : "array",
          "description" : "List of backup locations",
          "items" : {
            "$ref" : "#/definitions/BackupLocation"
          }
        },
        "backupSchedules" : {
          "type" : "array",
          "description" : "List of backup schedules",
          "items" : {
            "$ref" : "#/definitions/BackupSchedule"
          }
        },
        "encryption" : {
          "description" : "Encryption passphrase used to encrypt and decrypt backup file",
          "$ref" : "#/definitions/Encryption"
        },
        "isConfigured" : {
          "type" : "boolean",
          "description" : "Backup configuration status of both FTP server and passphrase "
        }
      },
      "description" : "Backup configuration used to configure backup of NSX and SDDC manager"
    },
    "VxManagerSpec" : {
      "required" : [ "defaultAdminUserCredentials", "defaultRootUserCredentials", "vxManagerHostName" ],
      "properties" : {
        "defaultAdminUserCredentials" : {
          "description" : "Default admin credentials VxManager",
          "$ref" : "#/definitions/SddcCredentials"
        },
        "defaultRootUserCredentials" : {
          "description" : "Default root credentials VxManager",
          "$ref" : "#/definitions/SddcCredentials"
        },
        "sshThumbprint" : {
          "type" : "string",
          "description" : "VxRail Manager SSH thumbprint (RSA SHA256)"
        },
        "sslThumbprint" : {
          "type" : "string",
          "description" : "VxRail Manager SSL thumbprint (SHA256)"
        },
        "vxManagerHostName" : {
          "type" : "string",
          "description" : "VxManager host name"
        }
      },
      "description" : "Spec contains parameters for VxManager"
    },
    "SupportBundleConfig" : {
      "properties" : {
        "force" : {
          "type" : "boolean",
          "description" : "Run SOS operations, even if there is a Workload running."
        },
        "skipKnownHostCheck" : {
          "type" : "boolean",
          "description" : "Skip known_hosts file for SupportBundle collection."
        }
      }
    },
    "HostNetworkSpec" : {
      "properties" : {
        "networkProfileName" : {
          "type" : "string",
          "description" : "Network profile name"
        },
        "vmNics" : {
          "type" : "array",
          "description" : "List of the vSphere host vmNics",
          "items" : {
            "$ref" : "#/definitions/VmNic"
          }
        }
      },
      "description" : "This specification contains network details required when adding a vSphere host to a cluster"
    },
    "ClassLoader" : { },
    "BaseCredential" : {
      "required" : [ "username" ],
      "properties" : {
        "accountType" : {
          "type" : "string",
          "example" : "One among: USER, SYSTEM, SERVICE",
          "description" : "Account type"
        },
        "credentialType" : {
          "type" : "string",
          "example" : "One among: SSO, SSH, API, FTP, AUDIT",
          "description" : "Credential type"
        },
        "password" : {
          "type" : "string",
          "description" : "Password"
        },
        "username" : {
          "type" : "string",
          "description" : "Username"
        }
      },
      "description" : "Represents credentials of a resource in the system"
    },
    "IdentitySourceSpec" : {
      "required" : [ "ldap", "name" ],
      "properties" : {
        "ldap" : {
          "description" : "The LDAP specification when the protocol is LDAP",
          "$ref" : "#/definitions/LdapSpec"
        },
        "name" : {
          "type" : "string",
          "description" : "The user-friendly name for the identity Source"
        }
      },
      "description" : "Represents Identity Source specification"
    },
    "CustomISOSpec" : {
      "required" : [ "id" ],
      "properties" : {
        "hostIds" : {
          "type" : "array",
          "description" : "List of host IDs",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "Custom ISO Id for VUM Clusters Upgrade"
        }
      },
      "description" : "Custom ISO Specifications for VUM Clusters Upgrade with Custom ISO"
    },
    "BundleUpdateSpec" : {
      "properties" : {
        "bundleDownloadSpec" : {
          "description" : "Bundle Download Specification.",
          "$ref" : "#/definitions/BundleDownloadSpec"
        },
        "compatibilitySetsFilePath" : {
          "type" : "string",
          "description" : "[Deprecated] Path to the software compatibility sets file"
        }
      },
      "description" : "Bundle Update Specification."
    },
    "IdentityProviderSpec" : {
      "required" : [ "name", "type" ],
      "properties" : {
        "certChain" : {
          "type" : "array",
          "description" : "The root certificate chain required to connect to the external server",
          "items" : {
            "type" : "string"
          }
        },
        "fedIdpSpec" : {
          "description" : "The identity management configuration when the provider is via broker federation",
          "$ref" : "#/definitions/FederatedIdentityProviderSpec"
        },
        "ldap" : {
          "description" : "The LDAP specification when the protocol is LDAP",
          "$ref" : "#/definitions/LdapSpec"
        },
        "name" : {
          "type" : "string",
          "description" : "The user-friendly name for the Identity Provider"
        },
        "oidc" : {
          "description" : "The identity management configuration when the provider is based on oidc",
          "$ref" : "#/definitions/OidcSpec"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of Identity Identity Provider"
        }
      },
      "description" : "Represents Identity provider configuration"
    },
    "MapOfstringAndListOfVxRailCustomArrayContext" : {
      "type" : "object",
      "additionalProperties" : {
        "items" : {
          "$ref" : "#/definitions/VxRailCustomArrayContext"
        },
        "type" : "array"
      }
    },
    "Csr" : {
      "required" : [ "csrDecodedContent", "csrEncodedContent", "resource" ],
      "properties" : {
        "csrDecodedContent" : {
          "type" : "string",
          "example" : "DECODED CSR AS STRING",
          "description" : "The CSR decoded content"
        },
        "csrEncodedContent" : {
          "type" : "string",
          "example" : "-----BEGIN CERTIFICATE REQUEST-----\nMIIEH...\n-----END CERTIFICATE REQUEST-----",
          "description" : "The CSR encoded content"
        },
        "resource" : {
          "description" : "Resource associated with CSR",
          "$ref" : "#/definitions/Resource"
        }
      },
      "description" : "The Certificate Signing Request (CSR) details"
    },
    "PatchBundle" : {
      "required" : [ "bundleElements", "bundleId", "bundleType", "cumulativeFromVcfVersion" ],
      "properties" : {
        "bundleElements" : {
          "type" : "array",
          "description" : "Bundle elements of the patch bundle",
          "items" : {
            "type" : "string"
          }
        },
        "bundleId" : {
          "type" : "string",
          "description" : "Bundle ID of the patch bundle"
        },
        "bundleType" : {
          "type" : "string",
          "description" : "Bundle type of the patch bundle"
        },
        "cumulativeFromVcfVersion" : {
          "type" : "string",
          "description" : "Minimum VCF version that this patch bundle can be directly applied on"
        }
      },
      "description" : "Model for patch bundle in a release"
    },
    "Error" : {
      "properties" : {
        "arguments" : {
          "type" : "array",
          "description" : "The arguments used to localize the message, Can be used by scripts to automate the error processing.",
          "items" : {
            "type" : "string"
          }
        },
        "causes" : {
          "type" : "array",
          "description" : "The underlying cause exceptions.",
          "items" : {
            "$ref" : "#/definitions/ErrorCause"
          }
        },
        "context" : {
          "type" : "object",
          "description" : "The error context (e.g. the component where it occurred).",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "errorCode" : {
          "type" : "string",
          "description" : "The minor error code",
          "readOnly" : true
        },
        "errorType" : {
          "type" : "string",
          "description" : "The error type",
          "readOnly" : true
        },
        "message" : {
          "type" : "string",
          "description" : "The localized error message"
        },
        "nestedErrors" : {
          "type" : "array",
          "description" : "The nested errors when the error is a composite one",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "referenceToken" : {
          "type" : "string",
          "description" : "A reference token correlating the error with the relevant detailed error logs. Should be sent to the service provider when reporting issues."
        },
        "remediationMessage" : {
          "type" : "string",
          "description" : "The localized remediation error message"
        }
      },
      "description" : "Error response containing a minor error code, a localized error message, a localized remediation message and optionally a reference token to correlate the error with the logs "
    },
    "Host" : {
      "properties" : {
        "bundleRepoDatastore" : {
          "type" : "string",
          "description" : "Bundle repositry datastore for this host"
        },
        "cluster" : {
          "description" : "Information about the cluster this host is part of",
          "$ref" : "#/definitions/ClusterReference"
        },
        "compatibleStorageType" : {
          "type" : "string",
          "description" : "Information about the host compatible storage type"
        },
        "cpu" : {
          "description" : "Information about CPUs on the host",
          "$ref" : "#/definitions/Cpu"
        },
        "domain" : {
          "description" : "Information about the domain this host is part of",
          "$ref" : "#/definitions/DomainReference"
        },
        "esxiVersion" : {
          "type" : "string",
          "description" : "ESXi software version of the host"
        },
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the host"
        },
        "hardwareModel" : {
          "type" : "string",
          "description" : "Hardware model of the host"
        },
        "hardwareVendor" : {
          "type" : "string",
          "description" : "Hardware vendor of the host"
        },
        "hybrid" : {
          "type" : "boolean",
          "description" : "Information about the storage type of the host, true if the host is hybrid."
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the host"
        },
        "ipAddresses" : {
          "type" : "array",
          "description" : "Information about IP addresses assigned to the host",
          "items" : {
            "$ref" : "#/definitions/IpAddress"
          }
        },
        "isPrimary" : {
          "type" : "boolean",
          "description" : "Is the host a primary host in VxRail HCI Context"
        },
        "memory" : {
          "description" : "Information about memory on the host",
          "$ref" : "#/definitions/Memory"
        },
        "networkpool" : {
          "description" : "Information about the network pool this host is part of",
          "$ref" : "#/definitions/NetworkPoolReference"
        },
        "networks" : {
          "type" : "array",
          "description" : "Information about Networks on the host",
          "items" : {
            "$ref" : "#/definitions/Network"
          }
        },
        "physicalNics" : {
          "type" : "array",
          "description" : "Information about physical NICs on the host",
          "items" : {
            "$ref" : "#/definitions/PhysicalNic"
          }
        },
        "serialNumber" : {
          "description" : "Serial Number of the host",
          "$ref" : "#/definitions/OptionalOfstring"
        },
        "softwareInfo" : {
          "description" : "Software Spec contains base image, hardware support manager, and components details",
          "$ref" : "#/definitions/SoftwareInfo"
        },
        "sshThumbprint" : {
          "description" : "SSH Thumbprint of the host",
          "$ref" : "#/definitions/OptionalOfstring"
        },
        "sslThumbprint" : {
          "description" : "SSL Thumbprint of the host",
          "$ref" : "#/definitions/OptionalOfstring"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: ASSIGNED, UNASSIGNED_USEABLE, UNASSIGNED_UNUSEABLE",
          "description" : "Status of the host"
        },
        "storage" : {
          "description" : "Information about storage on the host",
          "$ref" : "#/definitions/Storage"
        },
        "tags" : {
          "type" : "array",
          "description" : "Deprecated, this list will always be returned empty",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        }
      },
      "description" : "Represents an Esxi host in the system"
    },
    "VmfsDatastoreSpec" : {
      "properties" : {
        "fcSpec" : {
          "type" : "array",
          "description" : "Cluster storage configuration for VMFS on FC",
          "items" : {
            "$ref" : "#/definitions/FcSpec"
          }
        }
      },
      "description" : "Cluster storage configuration for VMFS"
    },
    "Logs" : {
      "properties" : {
        "apiLogs" : {
          "type" : "boolean",
          "description" : "Collect API Logs."
        },
        "automationLogs" : {
          "type" : "boolean",
          "description" : "Collect VMware Aria Automation support logs."
        },
        "esxLogs" : {
          "type" : "boolean",
          "description" : "Collect ESX Logs."
        },
        "lifecycleLogs" : {
          "type" : "boolean",
          "description" : "Collect VMware Aria Suite Lifecycle support logs."
        },
        "nsxLogs" : {
          "type" : "boolean",
          "description" : "Collect NSX Logs."
        },
        "operationsForLogs" : {
          "type" : "boolean",
          "description" : "Collect VMware Aria Operations For Logs support logs."
        },
        "operationsLogs" : {
          "type" : "boolean",
          "description" : "Collect VMware Aria Operations support logs."
        },
        "sddcManagerLogs" : {
          "type" : "boolean",
          "description" : "Collect SDDC Manager Logs."
        },
        "systemDebugLogs" : {
          "type" : "boolean",
          "description" : "Collect SystemDebug Logs."
        },
        "vcLogs" : {
          "type" : "boolean",
          "description" : "Collect vCenter Logs."
        },
        "vmScreenshots" : {
          "type" : "boolean",
          "description" : "Collect VMScreenshots."
        },
        "vraLogs" : {
          "type" : "boolean",
          "description" : "[Deprecated] Collect VMware Aria Automation Logs."
        },
        "vrliLogs" : {
          "type" : "boolean",
          "description" : "[Deprecated] Collect VMware Aria Operations For Logs Logs."
        },
        "vropsLogs" : {
          "type" : "boolean",
          "description" : "[Deprecated] Collect VMware Aria Operations Logs."
        },
        "vrslcmLogs" : {
          "type" : "boolean",
          "description" : "[Deprecated] Collect VMware Aria Suite Lifecycle Logs."
        },
        "vxrailManagerLogs" : {
          "type" : "boolean",
          "description" : "Collect VXRailManager Logs."
        },
        "wcpLogs" : {
          "type" : "boolean",
          "description" : "Collect WCP Logs."
        }
      }
    },
    "CertificatesGenerationSpec" : {
      "required" : [ "caType" ],
      "properties" : {
        "caType" : {
          "type" : "string",
          "example" : "One among: OpenSSL, Microsoft",
          "description" : "CA type. Only supports Microsoft and OpenSSL CAs"
        },
        "resources" : {
          "type" : "array",
          "description" : "Resource(s) in a domain",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        }
      },
      "description" : "This specification contains certificates generation request details"
    },
    "Manifest" : {
      "required" : [ "creationTime", "publishedDate", "releases", "sequenceNumber", "version" ],
      "properties" : {
        "asyncPatches" : {
          "type" : "object",
          "description" : "Async patches used by async patch tool",
          "additionalProperties" : {
            "$ref" : "#/definitions/MapOfstringAndListOfAsyncPatch"
          }
        },
        "creationTime" : {
          "type" : "string",
          "description" : "Creation time for the manifest e.g. 2020-06-08T02:20:15.844Z, in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format"
        },
        "publishedDate" : {
          "type" : "string",
          "description" : "Date of publish of the manifest e.g. 2020-06-08T02:20:15.844Z, in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format"
        },
        "recalledBundles" : {
          "type" : "array",
          "description" : "Collection of bundles that are recalled and their replacements, if applicable",
          "items" : {
            "$ref" : "#/definitions/BundleRecall"
          }
        },
        "releases" : {
          "type" : "array",
          "description" : "Releases of VCF in the ascending order of product version",
          "items" : {
            "$ref" : "#/definitions/Release"
          }
        },
        "sequenceNumber" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Manifest sequence number which signifies an update in manifest"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Manifest version supported by VCF"
        },
        "vvsMappings" : {
          "type" : "object",
          "description" : "VVS product release Id to VCF version mapping",
          "additionalProperties" : {
            "$ref" : "#/definitions/MapOfstringAndVvsVersionAliases"
          }
        }
      },
      "description" : "LCM 2.0 Manifest model that represents the metadata of the VMware Cloud foundation components and releases that Lyfe cycle manager utilises."
    },
    "PageOfClusterNetworkConfigurationCriterion" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/ClusterNetworkConfigurationCriterion"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "DomainReference" : {
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the domain"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the domain"
        }
      },
      "description" : "Represents a domain reference"
    },
    "PageOfEdgeCluster" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/EdgeCluster"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "NsxtResources" : {
      "properties" : {
        "bundleId" : {
          "type" : "string",
          "description" : "Bundle id used to compute the upgradability"
        },
        "domainId" : {
          "type" : "string",
          "description" : "Domain id associated with the NSX cluster"
        },
        "nsxtEdgeClusters" : {
          "type" : "array",
          "description" : "List of edge clusters that are candidates for upgrade",
          "items" : {
            "$ref" : "#/definitions/NsxtEdgeCluster"
          }
        },
        "nsxtHostClusters" : {
          "type" : "array",
          "description" : "List of host clusters that are candidates for upgrade",
          "items" : {
            "$ref" : "#/definitions/NsxtHostCluster"
          }
        },
        "nsxtManagerCluster" : {
          "description" : "Manager cluster that is a candidate for upgrade",
          "$ref" : "#/definitions/NsxtManagerCluster"
        },
        "nsxtUpgradeCoordinator" : {
          "description" : "Upgrade coordinator pertaining to the NSX instance",
          "$ref" : "#/definitions/NsxtUpgradeCoordinator"
        }
      },
      "description" : "NSX Upgrade Resources for an NSX instance"
    },
    "PageOfTrustedCertificate" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/TrustedCertificate"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "MapOfstringAndHardwareSupportPackageInfo" : {
      "type" : "object",
      "additionalProperties" : {
        "$ref" : "#/definitions/HardwareSupportPackageInfo"
      }
    },
    "CeipUpdateSpec" : {
      "required" : [ "status" ],
      "properties" : {
        "status" : {
          "type" : "string",
          "example" : "One among: ENABLE, DISABLE",
          "description" : "User provided CEIP operation"
        }
      },
      "description" : "Specification for CEIP state change"
    },
    "MessagePack" : {
      "required" : [ "messageKey" ],
      "properties" : {
        "arguments" : {
          "type" : "array",
          "description" : "The arguments used to localize the message. Can be used by scripts to automate the response processing. ",
          "items" : {
            "type" : "string"
          }
        },
        "component" : {
          "type" : "string",
          "description" : "The component the message belongs to"
        },
        "message" : {
          "type" : "string",
          "description" : "The localized message (if not provided by another property)"
        },
        "messageKey" : {
          "type" : "string",
          "description" : "The machine-readable key of the message"
        }
      },
      "description" : "A message pack representing a localizable message and suitable for machine processing. Contains a message key unique in the scope of the specified component, as well as the arguments needed to generate the localized message."
    },
    "DomainCreationSpec" : {
      "required" : [ "computeSpec", "domainName", "vcenterSpec" ],
      "properties" : {
        "computeSpec" : {
          "description" : "Specification representing the clusters to be added to the workload domain",
          "$ref" : "#/definitions/ComputeSpec"
        },
        "deployWithoutLicenseKeys" : {
          "type" : "boolean",
          "description" : "Enable deployment of the domain without licensing the infrastructure."
        },
        "domainName" : {
          "type" : "string",
          "description" : "Name of the workload domain"
        },
        "networkSeparationSpec" : {
          "description" : "Specifications for network separation configuration",
          "$ref" : "#/definitions/NetworkSeparationSpec"
        },
        "nsxTSpec" : {
          "description" : "Specification details for NSX configuration",
          "$ref" : "#/definitions/NsxTSpec"
        },
        "orgName" : {
          "type" : "string",
          "description" : "Organization name of the workload domain"
        },
        "ssoDomainSpec" : {
          "description" : "SSO domain specification",
          "$ref" : "#/definitions/SsoDomainSpec"
        },
        "vcenterSpec" : {
          "description" : "Specification details for vCenter",
          "$ref" : "#/definitions/VcenterSpec"
        }
      },
      "description" : "This specification contains the parameters required to create a new workload domain"
    },
    "PageOfDomain" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Domain"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "NsxtUpgradeCoordinator" : {
      "properties" : {
        "enabledOn" : {
          "type" : "string",
          "description" : "The IP of the manager on which UC is enabled"
        },
        "id" : {
          "type" : "string",
          "description" : "Upgrade coordinator id"
        },
        "resourceHealth" : {
          "type" : "string",
          "description" : "Current resource health status"
        },
        "upgradeStatus" : {
          "type" : "string",
          "description" : "Upgrade status with respect to the bundle"
        },
        "version" : {
          "type" : "string",
          "description" : "The current version of the UC"
        }
      },
      "description" : "NSX Upgrade coordinator Upgrade Resource"
    },
    "OptionalOfstring" : {
      "properties" : {
        "present" : {
          "type" : "boolean"
        }
      }
    },
    "Fips" : {
      "required" : [ "enabled" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "VCF FIPS mode status"
        }
      },
      "description" : "Represents VCF FIPS mode status (enabled/disabled)"
    },
    "EsaConfig" : {
      "required" : [ "enabled" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "vSAN ESA enablement status."
        }
      },
      "description" : "This spec contains cluster vSAN ESA configuration"
    },
    "HardwareSupportPackages" : {
      "required" : [ "displayName", "name", "packages" ],
      "properties" : {
        "displayName" : {
          "type" : "string",
          "description" : "Hardware Support Manager display name"
        },
        "name" : {
          "type" : "string",
          "description" : "Hardware Support Manager Name"
        },
        "packages" : {
          "type" : "array",
          "description" : "Hardware Support Packages",
          "items" : {
            "$ref" : "#/definitions/PackageSpec"
          }
        }
      },
      "description" : "Available Hardware Support Manager details"
    },
    "Endpoint" : {
      "required" : [ "type", "url" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "One among: PSC, VCENTER, NSX_MANAGER, NSX_T_MANAGER, VRLI, VRA, VROPS, WSA, VRSLCM",
          "description" : "Type of the Endpoint"
        },
        "url" : {
          "type" : "string",
          "description" : "Url of the Endpoint"
        }
      },
      "description" : "Represents an Endpoint in a Domain"
    },
    "SupportBundleOption" : {
      "properties" : {
        "config" : {
          "description" : "SupportBundle config.",
          "$ref" : "#/definitions/SupportBundleConfig"
        },
        "include" : {
          "description" : "Sos Additional Reports for Support Bundle.",
          "$ref" : "#/definitions/SupportBundleIncludeItems"
        }
      }
    },
    "DnsConfiguration" : {
      "required" : [ "dnsServers" ],
      "properties" : {
        "dnsServers" : {
          "type" : "array",
          "description" : "List of DNS servers",
          "items" : {
            "$ref" : "#/definitions/DnsServer"
          }
        }
      },
      "description" : "DNS Configuration"
    },
    "Stage" : {
      "properties" : {
        "completionTimestamp" : {
          "type" : "string"
        },
        "creationTimestamp" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "description" : "Stage description"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "Stage name"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED",
          "description" : "Stage status"
        },
        "type" : {
          "type" : "string",
          "description" : "Stage type"
        }
      },
      "description" : "Represents a Stage"
    },
    "NfsDatastoreSpec" : {
      "required" : [ "datastoreName" ],
      "properties" : {
        "datastoreName" : {
          "type" : "string",
          "description" : "Datastore name used for cluster creation"
        },
        "nasVolume" : {
          "description" : "NAS volume configuration for NFS based cluster",
          "$ref" : "#/definitions/NasVolumeSpec"
        }
      },
      "description" : "This specification contains cluster storage configuration for NFS"
    },
    "PageOfNsxTCriterion" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/NsxTCriterion"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ClusterReference" : {
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the cluster"
        }
      },
      "description" : "Represents a reference to the cluster"
    },
    "PageOfCertificateAuthority" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/CertificateAuthority"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "VxRailContext" : {
      "properties" : {
        "attributeName" : {
          "type" : "string",
          "description" : "Attribute name"
        },
        "datatype" : {
          "type" : "string",
          "description" : "Datatype of attribute value",
          "enum" : [ "INTEGER", "BOOLEAN", "STRING" ]
        },
        "value" : {
          "type" : "string",
          "description" : "Attribute value"
        }
      },
      "description" : "Contains VxRail Specific properties"
    },
    "SharesInfo" : {
      "properties" : {
        "level" : {
          "type" : "string",
          "example" : "One among: low, normal, high, custom",
          "description" : "The allocation level"
        },
        "shares" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of shares allocated"
        }
      },
      "description" : "Specify relative allocation between resource consumers"
    },
    "LocalUser" : {
      "required" : [ "name", "role", "type" ],
      "properties" : {
        "apiKey" : {
          "type" : "string",
          "description" : "The API key of the user"
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "The timestamp at which the user was created"
        },
        "domain" : {
          "type" : "string",
          "description" : "The domain of the user"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the user"
        },
        "isConfigured" : {
          "type" : "boolean",
          "description" : "Flag indicating whether or not local account is configured"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the user"
        },
        "role" : {
          "description" : "The role of the user",
          "$ref" : "#/definitions/RoleReference"
        },
        "type" : {
          "type" : "string",
          "example" : "One among: USER, GROUP, SERVICE",
          "description" : "The type of the user"
        }
      },
      "description" : "Represents Local User and its attributes"
    },
    "NsxtEdgeClusterUpgradeSpec" : {
      "required" : [ "edgeClusterId" ],
      "properties" : {
        "edgeClusterId" : {
          "type" : "string",
          "description" : "Resource ID of the edge transport node cluster"
        },
        "edgeParallelUpgrade" : {
          "type" : "boolean",
          "description" : "disable/enable parallel upgrade of edges within the cluster"
        }
      },
      "description" : "Host transport node cluster upgrade input"
    },
    "URLStreamHandler" : { },
    "NsxtIpAddressPoolStaticSubnet" : {
      "properties" : {
        "cidr" : {
          "type" : "string",
          "description" : "The CIDR of the IP address subnet"
        },
        "gateway" : {
          "type" : "string",
          "description" : "The gateway IP address"
        },
        "ipAddressPoolRanges" : {
          "type" : "array",
          "description" : "The list of IP address ranges",
          "items" : {
            "$ref" : "#/definitions/NsxtIpAddressPoolRange"
          }
        }
      },
      "description" : "NSX IP address pool static subnet representation"
    },
    "CredentialsExpiration" : {
      "properties" : {
        "completionTimestamp" : {
          "type" : "string",
          "description" : "Completion timestamp"
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "Creation timestamp"
        },
        "elements" : {
          "type" : "array",
          "description" : "List of one or more expiration checks that are performed as part of the credentials expiration task",
          "items" : {
            "$ref" : "#/definitions/CredentialExpirationCheck"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "ID of expiration task"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: COMPLETED, FAILED, IN_PROGRESS",
          "description" : "Execution status of the expiration"
        }
      },
      "description" : "Represents a credentials expiration task response"
    },
    "PageOfUser" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/User"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "PageOfClusterNetworkConfiguration" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/ClusterNetworkConfiguration"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "EdgeClusterNsxtEntityCriterion" : {
      "properties" : {
        "arguments" : {
          "type" : "object",
          "description" : "Arguments required for a particular criterion",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the criterion"
        },
        "name" : {
          "type" : "string",
          "example" : "One among: TIER_0_GATEWAY_ASSOCIATED_WITH_EDGE_CLUSTER, TIER_1_GATEWAY_ASSOCIATED_WITH_EDGE_CLUSTER",
          "description" : "Name of the criterion"
        }
      },
      "description" : "Represents a criterion for querying the Edge Cluster"
    },
    "SddcManagerInfo" : {
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the SDDC Manager"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the SDDC Manager"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP Address of the SDDC Manager"
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the SDDC Manager"
        }
      },
      "description" : "SDDC Manager Information"
    },
    "IpAddressPoolSpec" : {
      "required" : [ "name" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Description of the IP address pool"
        },
        "ignoreUnavailableNsxtCluster" : {
          "type" : "boolean",
          "description" : "Ignore unavailable NSX cluster(s) during IP pool spec validation"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the IP address pool"
        },
        "subnets" : {
          "type" : "array",
          "description" : "List of IP address pool subnet specification",
          "items" : {
            "$ref" : "#/definitions/IpAddressPoolSubnetSpec"
          }
        }
      },
      "description" : "This specification contains the parameters required to create or reuse an IP address pool."
    },
    "ClusterQueryResponse" : {
      "properties" : {
        "queryInfo" : {
          "description" : "Query info",
          "$ref" : "#/definitions/QueryInfo"
        },
        "result" : {
          "description" : "Query result",
          "$ref" : "#/definitions/PageOfCluster"
        }
      },
      "description" : "Represents a cluster query response."
    },
    "CertificateValidation" : {
      "required" : [ "resourceFqdn", "resourceId", "startTimestamp", "validationStatus" ],
      "properties" : {
        "endTimestamp" : {
          "type" : "string",
          "example" : "2021-02-02T00:00:00.000Z",
          "description" : "End Timestamp"
        },
        "resourceFqdn" : {
          "type" : "string",
          "example" : "sfo-vc01.rainpole.io",
          "description" : "Resource FQDN"
        },
        "resourceId" : {
          "type" : "string",
          "example" : "BE8A5E04-92A0-43F6-A166-AA041F4327CC",
          "description" : "Resource ID"
        },
        "startTimestamp" : {
          "type" : "string",
          "example" : "2020-01-01T00:00:00.000Z",
          "description" : "Start Timestamp"
        },
        "validationMessage" : {
          "type" : "string",
          "example" : "Certificate Expired",
          "description" : "Validation Message"
        },
        "validationStatus" : {
          "type" : "string",
          "example" : "One among: INPROGRESS, SUCCESSFUL, FAILED",
          "description" : "Validation Status"
        }
      },
      "description" : "The Certificate Validation details."
    },
    "VvsVersionAliases" : {
      "required" : [ "version" ],
      "properties" : {
        "aliases" : {
          "type" : "array",
          "description" : "Product version aliases",
          "items" : {
            "type" : "string"
          }
        },
        "version" : {
          "type" : "string",
          "description" : "Product version"
        }
      },
      "description" : "Vvs Mapping rest model that is located in the 2.0 manifest, these models are consumed by AP tool to determine the release Id to vcf version mapping in VVS compatibility data."
    },
    "CredentialValidationCheck" : {
      "required" : [ "credentialType", "resourceType", "username" ],
      "properties" : {
        "credentialType" : {
          "type" : "string",
          "example" : "One among: SSO, SSH, API, FTP, AUDIT",
          "description" : "Credential type"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the resource validation"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "passwordDetails" : {
          "description" : "Password details with validity and expiry info",
          "$ref" : "#/definitions/PasswordDetails"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "Resource ID"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Resource name"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, BACKUP",
          "description" : "Authenticated Resource Type"
        },
        "resultStatus" : {
          "type" : "string",
          "example" : "One among: SUCCEEDED, FAILED",
          "description" : "Result status of the validation check"
        },
        "username" : {
          "type" : "string",
          "description" : "Username"
        }
      },
      "description" : "Represents the validation check"
    },
    "BaseImageInfo" : {
      "required" : [ "version" ],
      "properties" : {
        "details" : {
          "description" : "BaseImage details",
          "$ref" : "#/definitions/BaseImageDetails"
        },
        "version" : {
          "type" : "string",
          "example" : "7.0.0-0.0.30340198",
          "description" : "BaseImage Version"
        }
      },
      "description" : "BaseImage contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "CsrsGenerationSpec" : {
      "required" : [ "csrGenerationSpec" ],
      "properties" : {
        "csrGenerationSpec" : {
          "description" : "The CSR specification to generate CSR for resource(s)",
          "$ref" : "#/definitions/CsrGenerationSpec"
        },
        "resources" : {
          "type" : "array",
          "description" : "Resource(s) in a domain",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        }
      },
      "description" : "This specification contains CSR Generation request details"
    },
    "TemporaryNetwork" : {
      "required" : [ "gateway", "ipAddress", "subnetMask" ],
      "properties" : {
        "gateway" : {
          "type" : "string",
          "description" : "Gateway for vCenter Upgrade temporary network"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP Address for vCenter Upgrade temporary network"
        },
        "subnetMask" : {
          "type" : "string",
          "description" : "Subnet Mask for vCenter Upgrade temporary network"
        }
      },
      "description" : "Temporary Network for vCenter Upgrade"
    },
    "TokenCreationSpec" : {
      "properties" : {
        "apiKey" : {
          "type" : "string",
          "description" : "API Key"
        },
        "idToken" : {
          "type" : "string",
          "description" : "Id Token"
        },
        "password" : {
          "type" : "string",
          "description" : "User Password"
        },
        "username" : {
          "type" : "string",
          "description" : "Username"
        }
      },
      "description" : "This specification contains user details to create authentication token."
    },
    "Credential" : {
      "required" : [ "accountType", "creationTimestamp", "credentialType", "id", "modificationTimestamp", "resource", "username" ],
      "properties" : {
        "accountType" : {
          "type" : "string",
          "example" : "One among: USER, SYSTEM, SERVICE",
          "description" : "Account type"
        },
        "autoRotatePolicy" : {
          "description" : "Configured auto-rotate policy of a credential. Empty if not configured",
          "$ref" : "#/definitions/AutoRotateCredentialPolicy"
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "The timestamp at which credential was created"
        },
        "credentialType" : {
          "type" : "string",
          "example" : "One among: SSO, SSH, API, FTP, AUDIT",
          "description" : "Credential type"
        },
        "expiry" : {
          "description" : "Password expiration details",
          "$ref" : "#/definitions/ExpirationDetails"
        },
        "id" : {
          "type" : "string",
          "description" : "Credential ID"
        },
        "modificationTimestamp" : {
          "type" : "string",
          "description" : "The timestamp at which credential was last modified"
        },
        "password" : {
          "type" : "string",
          "description" : "Password"
        },
        "resource" : {
          "description" : "The resource which owns the credential",
          "$ref" : "#/definitions/AuthenticatedResource"
        },
        "username" : {
          "type" : "string",
          "description" : "Username"
        }
      },
      "description" : "Represents a credential and the resource to which it is associated with"
    },
    "Calendar" : {
      "properties" : {
        "calendarType" : {
          "type" : "string"
        },
        "firstDayOfWeek" : {
          "type" : "integer",
          "format" : "int32"
        },
        "lenient" : {
          "type" : "boolean"
        },
        "minimalDaysInFirstWeek" : {
          "type" : "integer",
          "format" : "int32"
        },
        "time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "timeInMillis" : {
          "type" : "integer",
          "format" : "int64"
        },
        "timeZone" : {
          "$ref" : "#/definitions/TimeZone"
        },
        "weekDateSupported" : {
          "type" : "boolean"
        },
        "weekYear" : {
          "type" : "integer",
          "format" : "int32"
        },
        "weeksInWeekYear" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "CheckSetResourceSelection" : {
      "required" : [ "resourceId", "resourceName", "resourceType" ],
      "properties" : {
        "checkSets" : {
          "type" : "array",
          "description" : "Information about the selected check-set candidates",
          "items" : {
            "$ref" : "#/definitions/SelectedCheckSetCandidate"
          }
        },
        "domain" : {
          "description" : "Domain of the resource",
          "$ref" : "#/definitions/DomainInfo"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "Id of the resource"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Name of the resource"
        },
        "resourceType" : {
          "type" : "string",
          "description" : "Type of the resource"
        }
      },
      "description" : "Represents a selection of check-set candidates over a given resource"
    },
    "VsanSpec" : {
      "required" : [ "datastoreName" ],
      "properties" : {
        "datastoreName" : {
          "type" : "string",
          "description" : "Datastore Name"
        },
        "esaConfig" : {
          "description" : "vSAN ESA configuration.",
          "$ref" : "#/definitions/VsanEsaConfig"
        },
        "hclFile" : {
          "type" : "string",
          "description" : "HCL File"
        },
        "licenseFile" : {
          "type" : "string",
          "description" : "License File"
        },
        "vsanDedup" : {
          "type" : "boolean",
          "description" : "VSAN feature Deduplication and Compression flag, one flag for both features"
        }
      },
      "description" : "Spec contains parameters of Virtual SAN"
    },
    "VsanEsaConfig" : {
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "Whether the vSAN ESA is enabled."
        }
      },
      "description" : "This spec contains cluster vSAN ESA configuration"
    },
    "HighAvailability" : {
      "required" : [ "enabled" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        }
      },
      "description" : "This specification contains high availability settings"
    },
    "SddcVcenterSpec" : {
      "required" : [ "rootVcenterPassword", "vcenterHostname" ],
      "properties" : {
        "licenseFile" : {
          "type" : "string",
          "description" : "License File"
        },
        "rootVcenterPassword" : {
          "type" : "string",
          "description" : "vCenter root password. The password must be between 8 characters and 20 characters long. It must also contain at least one uppercase and lowercase letter, one number, and one character from '! \" # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\ ] ^ _ ` { &Iota; } ~' and all characters must be ASCII. Space is not allowed in password.",
          "minLength" : 8,
          "maxLength" : 20
        },
        "sshThumbprint" : {
          "type" : "string",
          "description" : "vCenter Server SSH thumbprint (RSA SHA256)"
        },
        "sslThumbprint" : {
          "type" : "string",
          "description" : "vCenter Server SSL thumbprint (SHA256)"
        },
        "storageSize" : {
          "type" : "string",
          "example" : "One among:lstorage, xlstorage",
          "description" : "vCenter VM storage size"
        },
        "vcenterHostname" : {
          "type" : "string",
          "description" : "vCenter hostname address"
        },
        "vcenterIp" : {
          "type" : "string",
          "description" : "vCenter IP address",
          "minLength" : 7,
          "maxLength" : 15
        },
        "vmSize" : {
          "type" : "string",
          "example" : "One among:xlarge, large, medium, small, tiny",
          "description" : "vCenter VM size"
        }
      },
      "description" : "Spec contains parameters for vCenter"
    },
    "SddcSubTask" : {
      "properties" : {
        "creationTimestamp" : {
          "type" : "string",
          "description" : "Sub-Task Creation Time"
        },
        "description" : {
          "type" : "string",
          "description" : "Sub-Task Description"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "localizableDescriptionPack" : {
          "description" : "Localizable SDDC Task description",
          "$ref" : "#/definitions/MessagePack"
        },
        "localizableNamePack" : {
          "description" : "Localizable SDDC Task name",
          "$ref" : "#/definitions/MessagePack"
        },
        "name" : {
          "type" : "string",
          "description" : "Sub-Task Name"
        },
        "processingStateDescription" : {
          "type" : "string",
          "description" : "Processing category description, e.g., VC Deployment, VSAN configuration etc"
        },
        "processingStateName" : {
          "type" : "string",
          "description" : "Processing category name, e.g., VC Deployment, VSAN configuration etc"
        },
        "sddcId" : {
          "type" : "string",
          "example" : "123e4567-e89b-42d3-a456-556642440000",
          "description" : "SDDC ID"
        },
        "status" : {
          "type" : "string",
          "example" : "INITIALIZED, COMPLETED_WITH_SUCCESS, COMPLETED_WITH_FAILURE, PREVALIDATION_COMPLETED_WITH_SUCCESS, PREVALIDATION_COMPLETED_WITH_FAILURE, POSTVALIDATION_COMPLETED_WITH_SUCCESS, POSTVALIDATION_COMPLETED_WITH_FAILURE,IN_PROGRESS, PREVALIDATION_IN_PROGRESS, POSTVALIDATION_IN_PROGRESS, INTERNAL_ERROR",
          "description" : "Task Status"
        },
        "updateTimestamp" : {
          "type" : "string",
          "description" : "Last Update Time of Sub-Task"
        }
      },
      "description" : "Represents a SDDC sub-task"
    },
    "BundleComponent" : {
      "required" : [ "imageType" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Bundle Component Description"
        },
        "fromVersion" : {
          "type" : "string",
          "description" : "Bundle Component's from/source version before Upgrade"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of Resource/Software Component"
        },
        "imageType" : {
          "type" : "string",
          "example" : "One among: PATCH, INSTALL",
          "description" : "Bundle Component Image Type"
        },
        "releasedDate" : {
          "type" : "string",
          "description" : "Bundle Component Release Date"
        },
        "toVersion" : {
          "type" : "string",
          "description" : "Bundle Component's to/target version after Upgrade"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of Resource/Software Component"
        },
        "vendor" : {
          "type" : "string",
          "description" : "Bundle Component Vendor"
        }
      },
      "description" : "Bundle Software Component"
    },
    "NsxtIpAddressPool" : {
      "properties" : {
        "availableIpAddresses" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of IP addresses available in the IP address pool"
        },
        "blockSubnets" : {
          "type" : "array",
          "description" : "The list of IP address pool block subnets",
          "items" : {
            "$ref" : "#/definitions/NsxtIpAddressPoolBlockSubnet"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the IP address pool"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the IP address pool"
        },
        "staticSubnets" : {
          "type" : "array",
          "description" : "The list of IP address pool static subnets",
          "items" : {
            "$ref" : "#/definitions/NsxtIpAddressPoolStaticSubnet"
          }
        },
        "totalIpAddresses" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total number of IP addresses in the IP address pool"
        }
      },
      "description" : "NSX IP address pool representation"
    },
    "DnsServer" : {
      "required" : [ "ipAddress", "isPrimary" ],
      "properties" : {
        "ipAddress" : {
          "type" : "string",
          "example" : "10.0.0.250",
          "description" : "IP address/FQDN of DNS server"
        },
        "isPrimary" : {
          "type" : "boolean",
          "description" : "Is DNS server primary"
        }
      },
      "description" : "DNS server details"
    },
    "CheckSetQueryResourceResult" : {
      "properties" : {
        "checkSets" : {
          "type" : "array",
          "description" : "Check set candidates to select from",
          "items" : {
            "$ref" : "#/definitions/CheckSetCandidates"
          }
        },
        "domain" : {
          "description" : "Domain information about the domain the resource belongs to",
          "$ref" : "#/definitions/ResourceDomainInfo"
        },
        "extraContext" : {
          "type" : "object"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "Id of the resource"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Name of the resource"
        },
        "resourceType" : {
          "type" : "string",
          "description" : "Type of the resource"
        },
        "resourceVersion" : {
          "type" : "string",
          "description" : "Current version of the resource"
        }
      },
      "description" : "Represents a result of a check-set query call for a given resource"
    },
    "VersionAliasesForBundleComponentTypeSpec" : {
      "properties" : {
        "forceUpdate" : {
          "type" : "boolean",
          "description" : "Flag for force update version alias configuration."
        },
        "targetVcfVersion" : {
          "type" : "string",
          "description" : "If this field is set, LCM will calculate and update version aliases based on current deployment VCF version and the provided target VCF version"
        },
        "versionAliasesForBundleComponentTypes" : {
          "type" : "array",
          "description" : "List of version aliases for bundle component types.",
          "items" : {
            "$ref" : "#/definitions/VersionAliasesForBundleComponentType"
          }
        }
      },
      "description" : "Version Alias update Specification. This specification gets used in the Version Alias Update API."
    },
    "NsxTCriterion" : {
      "properties" : {
        "arguments" : {
          "type" : "object",
          "description" : "Arguments required for a particular criterion",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the criterion"
        },
        "name" : {
          "type" : "string",
          "example" : "NSXT_CLUSTERS_WITH_STATUS",
          "description" : "Name of the criterion"
        }
      },
      "description" : "Represents a criterion for querying the NSX cluster"
    },
    "ComponentInfo" : {
      "required" : [ "details", "version" ],
      "properties" : {
        "details" : {
          "description" : "Component details",
          "$ref" : "#/definitions/ComponentDetails"
        },
        "version" : {
          "type" : "string",
          "example" : "1.3.2.8-1OEM.650.0.0.4598673",
          "description" : "Component Version"
        }
      },
      "description" : "Component contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "PageOfCluster" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Cluster"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ComponentDetails" : {
      "required" : [ "displayName", "vendor" ],
      "properties" : {
        "displayName" : {
          "type" : "string",
          "description" : "Component display name"
        },
        "displayVersion" : {
          "type" : "string",
          "description" : "Component display version"
        },
        "vendor" : {
          "type" : "string",
          "example" : "intel",
          "description" : "Component vendor"
        }
      },
      "description" : "Component contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "PageOfLicenseKey" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/LicenseKey"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "DepotSettings" : {
      "properties" : {
        "dellEmcSupportAccount" : {
          "description" : "Dell EMC Support Account",
          "$ref" : "#/definitions/DepotAccount"
        },
        "vmwareAccount" : {
          "description" : "VMware Depot Account",
          "$ref" : "#/definitions/DepotAccount"
        }
      },
      "description" : "VMware Depot Settings. At least one of vmwareAccount or dellEmcSupportAccount value must be provided"
    },
    "OidcSpec" : {
      "required" : [ "clientId", "clientSecret", "discoveryEndpoint" ],
      "properties" : {
        "clientId" : {
          "type" : "string",
          "description" : "Client identifier to connect to the provider"
        },
        "clientSecret" : {
          "type" : "string",
          "description" : "The secret shared between the client and the provider"
        },
        "discoveryEndpoint" : {
          "type" : "string",
          "description" : "Endpoint to retrieve the provider metadata"
        }
      },
      "description" : "Identity management configuration when the Identity Provider is based on oidc"
    },
    "FederatedIdentityProviderInfo" : {
      "properties" : {
        "directoryList" : {
          "description" : "The directory info of the Identity Provider",
          "$ref" : "#/definitions/IdentityProviderDirectory"
        },
        "name" : {
          "type" : "string",
          "description" : "The user-friendly name for the Identity Provider"
        },
        "source" : {
          "type" : "string",
          "description" : "The source of the Identity Provider",
          "example" : "One among: OKTA, AZURE"
        },
        "oidcInfo" : {
          "description" : "The OIDC profile of the Identity Provider",
          "$ref" : "#/definitions/OidcInfo"
        },
        "syncClientTokenTTL" : {
          "type" : "integer",
          "format" : "int64",
          "example" : "One among: ACTIVE, INACTIVE",
          "description" : "The lifetime in seconds of the sync client bear token"
        }
      },
      "description" : "The identity management info when the provider is via broker federation"
    },
    "CheckSetQueryResource" : {
      "required" : [ "resourceType" ],
      "properties" : {
        "resourceId" : {
          "type" : "string",
          "example" : "187f6468-f9e0-45f5-8d34-b28efc1e7a36",
          "description" : "UUID of the resource, if used adds additional filtering"
        },
        "resourceTargetVersion" : {
          "type" : "string",
          "example" : "3.0.0-123456",
          "description" : "Upgrade target version for the resources"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "VCENTER",
          "description" : "Type of the resource"
        }
      },
      "description" : "Resource input to query check-sets for"
    },
    "CheckSetQueryResult" : {
      "required" : [ "queryId", "resources" ],
      "properties" : {
        "queryId" : {
          "type" : "string",
          "description" : "Id of the query, to be provided in the selection API"
        },
        "resources" : {
          "type" : "array",
          "description" : "Resources with check-sets result from the query",
          "items" : {
            "$ref" : "#/definitions/CheckSetQueryResourceResult"
          }
        }
      },
      "description" : "Represents a result of a check-set query call"
    },
    "ResourceFunctionalitiesGlobalConfiguration" : {
      "properties" : {
        "errorMessage" : {
          "type" : "string",
          "description" : "The localized error message"
        },
        "isAllowed" : {
          "type" : "boolean",
          "description" : "Global flag representing if all of the VMware Cloud Foundation operations are allowed or not"
        }
      },
      "description" : "Defines a resource functionality caller specification"
    },
    "NsxStretchClusterSpec" : {
      "required" : [ "uplinkProfiles" ],
      "properties" : {
        "ipAddressPoolsSpec" : {
          "type" : "array",
          "description" : "The IP address pool specifications",
          "items" : {
            "$ref" : "#/definitions/IpAddressPoolSpec"
          }
        },
        "uplinkProfiles" : {
          "type" : "array",
          "description" : "The list of uplink profile specifications.",
          "items" : {
            "$ref" : "#/definitions/UplinkProfile"
          }
        }
      },
      "description" : "This specification contains NSX configuration for Secondary AZ Hosts"
    },
    "CredentialsSubTask" : {
      "properties" : {
        "creationTimestamp" : {
          "type" : "string",
          "description" : "Credential sub-task creation timestamp"
        },
        "credentialType" : {
          "type" : "string",
          "description" : "Credential sub-task credential type"
        },
        "dependentSubTasks" : {
          "type" : "array",
          "description" : "List of dependent sub-tasks of the credential sub-task",
          "items" : {
            "$ref" : "#/definitions/CredentialsSubTask"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Credential sub-task description"
        },
        "entityType" : {
          "type" : "string",
          "description" : "Credential sub-task entity type"
        },
        "errors" : {
          "type" : "array",
          "description" : "List of errors in case of a failure",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "Credential sub-task ID"
        },
        "name" : {
          "type" : "string",
          "description" : "Credential sub-task name"
        },
        "newPassword" : {
          "type" : "string",
          "description" : "Credential sub-task new password"
        },
        "oldPassword" : {
          "type" : "string",
          "description" : "Credential sub-task old password"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Resource name"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: PENDING, IN_PROGRESS, SUCCESSFUL, FAILED, USER_CANCELLED, INCONSISTENT",
          "description" : "Credential sub-task status"
        },
        "username" : {
          "type" : "string",
          "description" : "Credential sub-task username"
        }
      },
      "description" : "Represents the credentials sub-task in the system"
    },
    "AssociatedTask" : {
      "required" : [ "taskId" ],
      "properties" : {
        "subTaskId" : {
          "type" : "string",
          "description" : "ID of the subtask where the warning for the resource occurred"
        },
        "taskId" : {
          "type" : "string",
          "description" : "ID of the task where the warning for the resource occurred"
        }
      },
      "description" : "Task association for a resource warning. Indicates in which task the resource warning occurred"
    },
    "Page" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "type" : "object"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "HealthSummaryConfig" : {
      "properties" : {
        "force" : {
          "type" : "boolean",
          "description" : "Run SOS operations, even if there is a Workload running."
        },
        "skipKnownHostCheck" : {
          "type" : "boolean",
          "description" : "Skip known_hosts file for HealthSummary."
        }
      }
    },
    "PageOfCompatibilityMatrix" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/CompatibilityMatrix"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "RoleReference" : {
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the role"
        }
      },
      "description" : "Represents a role reference"
    },
    "NetworkPoolUpdateSpec" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the Network Pool"
        }
      },
      "description" : "Represents a network pool update spec"
    },
    "AvnsCreationSpec" : {
      "required" : [ "avns", "edgeClusterId" ],
      "properties" : {
        "avns" : {
          "type" : "array",
          "description" : "The list of AVNs to be created",
          "items" : {
            "$ref" : "#/definitions/Avn"
          }
        },
        "edgeClusterId" : {
          "type" : "string",
          "example" : "3f39d4a1-78d2-11e8-af85-f1cf26258cdc",
          "description" : "The UUID of the Edge Cluster to associate AVNs"
        }
      },
      "description" : "Defines the spec to create Application virtual Networks (AVNs) and its attributes"
    },
    "UpgradeSpec" : {
      "required" : [ "bundleId", "resourceType", "resourceUpgradeSpecs" ],
      "properties" : {
        "bundleId" : {
          "type" : "string",
          "description" : "Bundle ID for Upgrade"
        },
        "draftMode" : {
          "type" : "boolean",
          "description" : "Boolean to represent upgrade will be created in DRAFT mode. This allows to run prechecks before user confirm/commit the upgrade."
        },
        "nsxtUpgradeUserInputSpecs" : {
          "type" : "array",
          "description" : "Resource Upgrade Specifications for NSX upgrade",
          "items" : {
            "$ref" : "#/definitions/NsxtUpgradeUserInputSpec"
          }
        },
        "parallelUpgrade" : {
          "type" : "boolean",
          "description" : "Boolean to represent components will be upgraded in parallel on not"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: DOMAIN, CLUSTER, UNASSIGNED_HOST",
          "description" : "Resource Type for Upgrade"
        },
        "resourceUpgradeSpecs" : {
          "type" : "array",
          "description" : "Resource Upgrade Specifications",
          "items" : {
            "$ref" : "#/definitions/ResourceUpgradeSpec"
          }
        },
        "vcenterUpgradeUserInputSpecs" : {
          "type" : "array",
          "description" : "User Input for vCenter upgrade",
          "items" : {
            "$ref" : "#/definitions/VcenterUpgradeUserInputSpec"
          }
        }
      },
      "description" : "Upgrade Specification"
    },
    "Psc" : {
      "properties" : {
        "domain" : {
          "description" : "Information about the domain this PSC is part of",
          "$ref" : "#/definitions/DomainReference"
        },
        "fqdn" : {
          "type" : "string",
          "description" : "FQDN of the Psc"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the Psc"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IP Address of the Psc"
        },
        "isReplica" : {
          "type" : "boolean",
          "description" : "Indicates if the Psc is a replica"
        },
        "ssoDomainName" : {
          "type" : "string",
          "description" : "SSO Domain name of the Psc"
        },
        "ssoSubDomainName" : {
          "type" : "string",
          "description" : "SSO sub domain name of the Psc"
        }
      },
      "description" : "Psc representation"
    },
    "PageOfNsxTCluster" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/NsxTCluster"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "SddcSpec" : {
      "required" : [ "clusterSpec", "dnsSpec", "dvsSpecs", "hostSpecs", "networkSpecs", "ntpServers", "sddcId", "taskName", "vcenterSpec" ],
      "properties" : {
        "ceipEnabled" : {
          "type" : "boolean",
          "example" : "true",
          "description" : "Enable VCF Customer Experience Improvement Program"
        },
        "clusterSpec" : {
          "description" : "Cluster Spec",
          "$ref" : "#/definitions/SddcClusterSpec"
        },
        "dnsSpec" : {
          "description" : "DNS Spec",
          "$ref" : "#/definitions/DnsSpec"
        },
        "dvSwitchVersion" : {
          "type" : "string",
          "example" : "One among:7.0.0, 7.0.2, 7.0.3",
          "description" : "The version of the distributed virtual switches to be used"
        },
        "dvsSpecs" : {
          "type" : "array",
          "description" : "List of Dvs Specs",
          "items" : {
            "$ref" : "#/definitions/DvsSpec"
          }
        },
        "esxLicense" : {
          "type" : "string",
          "description" : "License for the ESXi hosts"
        },
        "excludedComponents" : {
          "type" : "array",
          "example" : "One among:NSX, VSAN, EsxThumbprintValidation, CEIP, Backup",
          "description" : "Components to be excluded",
          "items" : {
            "type" : "string"
          }
        },
        "fipsEnabled" : {
          "type" : "boolean",
          "example" : "true",
          "description" : "Enable Federal Information Processing Standards"
        },
        "hostSpecs" : {
          "type" : "array",
          "description" : "List of Host Specs",
          "items" : {
            "$ref" : "#/definitions/SddcHostSpec"
          }
        },
        "managementPoolName" : {
          "type" : "string",
          "description" : "A String identifying the network pool associated with the management domain"
        },
        "networkSpecs" : {
          "type" : "array",
          "description" : "List of Network Specs",
          "items" : {
            "$ref" : "#/definitions/SddcNetworkSpec"
          }
        },
        "nsxtSpec" : {
          "description" : "NSX Spec",
          "$ref" : "#/definitions/SddcNsxtSpec"
        },
        "ntpServers" : {
          "type" : "array",
          "description" : "List of NTP servers",
          "items" : {
            "type" : "string"
          }
        },
        "proxySpec" : {
          "description" : "Proxy Spec",
          "$ref" : "#/definitions/ProxySpec"
        },
        "pscSpecs" : {
          "type" : "array",
          "description" : "PSC VM spec",
          "items" : {
            "$ref" : "#/definitions/PscSpec"
          }
        },
        "sddcId" : {
          "type" : "string",
          "example" : "sfo01-m01",
          "description" : "Client string that identifies an SDDC by name or instance name. Used for management domain name. Can contain only letters, numbers and the following symbols: '-'.",
          "minLength" : 3,
          "maxLength" : 20
        },
        "sddcManagerSpec" : {
          "description" : "SDDC Manager Virtual Machine spec",
          "$ref" : "#/definitions/SddcManagerSpec"
        },
        "securitySpec" : {
          "description" : "Security spec",
          "$ref" : "#/definitions/SecuritySpec"
        },
        "skipEsxThumbprintValidation" : {
          "type" : "boolean",
          "description" : "Skip ESXi thumbprint validation"
        },
        "skipGatewayPingValidation" : {
          "type" : "boolean",
          "description" : "Skip networks gateway connectivity validation"
        },
        "taskName" : {
          "type" : "string",
          "example" : "workflowconfig/workflowspec-ems.json",
          "description" : "Name of the task to execute"
        },
        "vcenterSpec" : {
          "description" : "vCenter Spec",
          "$ref" : "#/definitions/SddcVcenterSpec"
        },
        "vsanSpec" : {
          "description" : "VSAN Spec",
          "$ref" : "#/definitions/VsanSpec"
        },
        "vxManagerSpec" : {
          "description" : "VxManager Spec",
          "$ref" : "#/definitions/VxManagerSpec"
        }
      },
      "description" : "Spec contains parameters for creating/bringing up an SDDC"
    },
    "EdgeClusterShrinkageSpec" : {
      "required" : [ "edgeNodeIds" ],
      "properties" : {
        "edgeNodeIds" : {
          "type" : "array",
          "description" : "List of VCF Edge Node ID's to be removed for shrinkage.",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "This specification contains the parameters required to shrink a NSX edge cluster."
    },
    "UplinkMapping" : {
      "required" : [ "nsxUplinkName", "vdsUplinkName" ],
      "properties" : {
        "nsxUplinkName" : {
          "type" : "string",
          "description" : "The uplink name of the NSX switch"
        },
        "vdsUplinkName" : {
          "type" : "string",
          "description" : "The uplink name of the vSphere Distributed Switch"
        }
      },
      "description" : "The map of vSphere Distributed Switch uplinks to the NSX switch uplinks."
    },
    "Vrops" : {
      "required" : [ "id", "loadBalancerFqdn", "loadBalancerIp", "nodes", "status", "version" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The ID of the VMware Aria Operations instance"
        },
        "loadBalancerFqdn" : {
          "type" : "string",
          "description" : "Fully Qualified Domain Name for the VMware Aria Operations load balancer "
        },
        "loadBalancerIp" : {
          "type" : "string",
          "description" : "IP for the VMware Aria Operations load balancer "
        },
        "nodes" : {
          "type" : "array",
          "description" : "The nodes of the VMware Aria Operations instance",
          "items" : {
            "$ref" : "#/definitions/VropsNode"
          }
        },
        "status" : {
          "type" : "string",
          "description" : "The state of the current product instance"
        },
        "version" : {
          "type" : "string",
          "description" : "The version of the VMware Aria Operations instance"
        }
      },
      "description" : "This specification contains information related to the existing VMware Aria Operations instance deployment"
    },
    "NsxClusterSpec" : {
      "properties" : {
        "nsxTClusterSpec" : {
          "description" : "NSX spec for the new cluster, required for NSX based workload domains, optional otherwise",
          "$ref" : "#/definitions/NsxTClusterSpec"
        }
      },
      "description" : "This specification contains NSX configuration for cluster"
    },
    "PageOfNetworkPool" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/NetworkPool"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "HealthChecks" : {
      "properties" : {
        "certificateHealth" : {
          "type" : "boolean",
          "description" : "Performs Certificate health checks."
        },
        "composabilityHealth" : {
          "type" : "boolean",
          "description" : "Performs Composability Health checks."
        },
        "computeHealth" : {
          "type" : "boolean",
          "description" : "Performs Compute Health checks."
        },
        "connectivityHealth" : {
          "type" : "boolean",
          "description" : "Performs Connectivity health checks."
        },
        "dnsHealth" : {
          "type" : "boolean",
          "description" : "Performs DNS Health checks."
        },
        "generalHealth" : {
          "type" : "boolean",
          "description" : "Performs some generic health checks."
        },
        "hardwareCompatibilityHealth" : {
          "type" : "boolean",
          "description" : "Performs HardwareCompatibilityHealth Health checks."
        },
        "ntpHealth" : {
          "type" : "boolean",
          "description" : "Performs NTP checks for components."
        },
        "passwordHealth" : {
          "type" : "boolean",
          "description" : "Performs Password Expiry checks."
        },
        "servicesHealth" : {
          "type" : "boolean",
          "description" : "Performs checks on Services health."
        },
        "storageHealth" : {
          "type" : "boolean",
          "description" : "Performs Storage Health checks."
        },
        "versionHealth" : {
          "type" : "boolean",
          "description" : "Perform version checks for VCF components."
        }
      }
    },
    "NsxtHostSwitchConfig" : {
      "properties" : {
        "ipAddressPoolName" : {
          "type" : "string",
          "description" : "The IP address pool name"
        },
        "uplinkProfileName" : {
          "type" : "string",
          "description" : "The name of the uplink profile"
        },
        "vdsName" : {
          "type" : "string",
          "description" : "The name of the vSphere Distributed Switch"
        },
        "vdsUplinkToNsxUplink" : {
          "type" : "array",
          "description" : "The map of vSphere Distributed Switch uplinks to the NSX switch uplinks.",
          "items" : {
            "$ref" : "#/definitions/UplinkMapping"
          }
        }
      },
      "description" : "This specification contains the configurations to be applied on the Host switch."
    },
    "NsxtHostSwitchConfiguration" : {
      "properties" : {
        "vdsName" : {
          "type" : "string",
          "description" : "The name of the vSphere Distributed Switch"
        },
        "uplinkProfileName" : {
          "type" : "string",
          "description" : "The name of the uplink profile"
        },
        "ipAddressPoolName" : {
          "type" : "string",
          "description" : "The IP address Pool name. For DHCP, this field will be empty"
        },
        "vdsUplinkToNsxUplink" : {
          "type" : "array",
          "description" : "The map of vSphere Distributed Switch uplinks to the NSX switch uplinks.",
          "items" : {
            "$ref" : "#/definitions/VdsUplinkToNsxUplinkConfiguration"
          }
        }
      },
      "description" : "The configurations to applied on the Host switch."
    },
    "VdsUplinkToNsxUplinkConfiguration" : {
      "description" : "The map of vSphere Distributed Switch uplinks to the NSX switch uplinks.",
      "properties" : {
        "vdsUplinkName" : {
          "type" : "string",
          "description" : "The uplink name of the vSphere Distributed Switch"
        },
        "nsxUplinkName" : {
          "type" : "string",
          "description" : "The uplink name of the NSX switch"
        }
      }
    },
    "PortgroupConfig" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Port group name"
        },
        "transportType" : {
          "type" : "string",
          "description" : "Port group transport type"
        },
        "activeUplinks" : {
          "type" : "array",
          "description" : "List of active uplinks associated with port group",
          "items" : {
            "type" : "string"
          }
        },
        "standByUplinks" : {
          "type" : "array",
          "description" : "List of standby uplinks associated with port group",
          "items" : {
            "type" : "string"
          }
        },
        "policy" : {
          "type" : "string",
          "description" : "The load balancing policy associated with port group"
        },
        "supportedTeamingPolicies" : {
          "type" : "object",
          "description" : "List of supported teaming policies at port group"
        },
        "vlanId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The vlan id associated with the port group"
        },
        "mtu" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The maximum transmission unit (MTU) configured for the uplinks associated with the port group"
        }
      },
      "description" : "This specification contains the network configuration in a port group."
    },
    "VdsSpec" : {
      "required" : [ "name" ],
      "properties" : {
        "isUsedByNsxt" : {
          "type" : "boolean",
          "description" : "Boolean to identify if the vSphere distributed switch is used by NSX. This property is deprecated in favor of nsxtSwitchConfig field.",
          "deprecated" : true
        },
        "nsxtSwitchConfig" : {
          "$ref" : "#/definitions/NsxtSwitchConfig",
          "description" : "List of portgroups to be associated with the vSphere Distributed Switch"
        },
        "mtu" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The maximum transmission unit (MTU) configured for the uplinks"
        },
        "name" : {
          "type" : "string",
          "description" : "vSphere Distributed Switch name"
        },
        "niocBandwidthAllocationSpecs" : {
          "type" : "array",
          "description" : "List of Network I/O Control Bandwidth Allocations for System Traffic",
          "items" : {
            "$ref" : "#/definitions/NiocBandwidthAllocationSpec"
          }
        },
        "portGroupSpecs" : {
          "type" : "array",
          "description" : "List of portgroups to be associated with the vSphere Distributed Switch",
          "items" : {
            "$ref" : "#/definitions/PortgroupSpec"
          }
        }
      },
      "description" : "This specification contains vSphere distributed switch configurations"
    },
    "Avn" : {
      "required" : [ "gateway", "mtu", "name", "regionType", "subnet", "subnetMask" ],
      "properties" : {
        "domainName" : {
          "type" : "string",
          "example" : "rainpole.io",
          "description" : "AVN search domain"
        },
        "gateway" : {
          "type" : "string",
          "example" : "192.168.31.1",
          "description" : "Gateway of the AVN subnet"
        },
        "id" : {
          "type" : "string",
          "example" : "3f39d4a1-78d2-11e8-af85-f1cf26258cdc",
          "description" : "The UUID of the AVN"
        },
        "mtu" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1600",
          "description" : "MTU for the AVN"
        },
        "name" : {
          "type" : "string",
          "example" : "vRealize-AVN",
          "description" : "User provided name of the AVN"
        },
        "portGroupName" : {
          "type" : "string",
          "example" : "sfo-m01-seg01-pg",
          "description" : "Port group name identifying the AVN on the distributed switch"
        },
        "regionType" : {
          "type" : "string",
          "example" : "REGION_A",
          "description" : "The region type of AVN; X_REGION or REGION_A"
        },
        "routerName" : {
          "type" : "string",
          "example" : "sfo-m01-ec01-t1-gw01",
          "description" : "Name of Tier-1 Gateway AVN is connected to"
        },
        "subnet" : {
          "type" : "string",
          "example" : "192.168.31.0",
          "description" : "Subnet assigned to the AVN"
        },
        "subnetMask" : {
          "type" : "string",
          "example" : "255.255.255.0",
          "description" : "Subnet mask for the network assigned to the AVN"
        },
        "vlanId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "30",
          "description" : "VLAN ID for the VLAN backed AVN"
        }
      },
      "description" : "Defines an Application virtual Network (AVN) and its attributes"
    },
    "Domain" : {
      "properties" : {
        "capacity" : {
          "description" : "Capacity information for the workload domain",
          "$ref" : "#/definitions/Capacity"
        },
        "clusters" : {
          "type" : "array",
          "description" : "List of clusters associated with the workload domain",
          "items" : {
            "$ref" : "#/definitions/ClusterReference"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the workload domain"
        },
        "isManagementSsoDomain" : {
          "type" : "boolean",
          "description" : "Shows whether the workload domain is joined to the Management domain SSO"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the workload domain"
        },
        "nsxtCluster" : {
          "description" : "NSX cluster associated with the workload domain",
          "$ref" : "#/definitions/NsxTClusterReference"
        },
        "ssoId" : {
          "type" : "string",
          "description" : "ID of the SSO domain associated with the workload domain"
        },
        "ssoName" : {
          "type" : "string",
          "description" : "Name of the SSO domain associated with the workload domain"
        },
        "status" : {
          "type" : "string",
          "description" : "Status of the workload domain"
        },
        "tags" : {
          "type" : "array",
          "description" : "Deprecated, this list will always be returned empty",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        },
        "type" : {
          "type" : "string",
          "description" : "Type of the workload domain"
        },
        "vcenters" : {
          "type" : "array",
          "description" : "List of vCenters associated with the workload domain",
          "items" : {
            "$ref" : "#/definitions/VcenterReference"
          }
        }
      },
      "description" : "Represents a domain"
    },
    "ConfigDriftSpec" : {
      "properties" : {
        "applicability" : {
          "description" : "Applicability of the Configuration Drift",
          "$ref" : "#/definitions/Applicability"
        },
        "description" : {
          "type" : "string",
          "example" : "This drift operation will create an additional distributed virtual port group on a cluster for VCF management VM communication, and migrate VCF-managed VMs to this new port group",
          "description" : "Description of the Configuration Drift"
        },
        "id" : {
          "type" : "string",
          "example" : "3f39d4a1-78d2-11e8-af85-f1cf26258cdc",
          "description" : "The UUID of the Configuration Drift"
        },
        "name" : {
          "type" : "string",
          "example" : "Distributed Virtual Portgroup configuration drift",
          "description" : "Name of the Configuration Drift"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "system | domain | cluster | host | edge_cluster",
          "description" : "The infrastructure resource on which this Configuration Drift operates"
        },
        "type" : {
          "type" : "string",
          "example" : "fix | feature",
          "description" : "The type of Configuration Drift"
        }
      },
      "description" : "Represents a Configuration Drift workflow"
    },
    "Certificate" : {
      "required" : [ "domain", "expirationStatus", "getCertificateError", "isInstalled", "issuedBy", "issuedTo", "keySize", "notAfter", "notBefore", "numberOfDaysToExpire", "pemEncoded", "publicKey", "publicKeyAlgorithm", "serialNumber", "signatureAlgorithm", "subject", "subjectAlternativeName", "thumbprint", "thumbprintAlgorithm", "version" ],
      "properties" : {
        "caChain" : {
          "type" : "array",
          "description" : "Certificate chain ordered from intermediate to root certificates",
          "items" : {
            "$ref" : "#/definitions/Certificate"
          }
        },
        "domain" : {
          "type" : "string",
          "example" : "3E86FBAD-8984-4D4B-992D-F0C49857572A",
          "description" : "Domain of the resource certificate"
        },
        "expirationStatus" : {
          "type" : "string",
          "example" : "One among: ACTIVE, ABOUT_TO_EXPIRE, EXPIRED",
          "description" : "Certificate expiry status"
        },
        "getCertificateError" : {
          "type" : "string",
          "example" : "Status : NOT_TRUSTED, Message : Certificate Expired",
          "description" : "Error if certificate cannot be fetched"
        },
        "isInstalled" : {
          "type" : "boolean",
          "example" : "One among: true, false",
          "description" : "Whether the certificate is installed or not"
        },
        "issuedBy" : {
          "type" : "string",
          "example" : "CN=OpenSSL CA, OU=VCF, O=VMware, L=Bengaluru, ST=Karnataka, C=IN",
          "description" : "The certificate authority that issued the certificate"
        },
        "issuedTo" : {
          "type" : "string",
          "example" : "sfo-vc01.rainpole.io",
          "description" : "To whom the certificate is issued"
        },
        "keySize" : {
          "type" : "string",
          "example" : "One among: 2048, 3072, 4096",
          "description" : "The key size of the certificate"
        },
        "notAfter" : {
          "type" : "string",
          "example" : "2021-02-02T00:00:00.000Z",
          "description" : "The timestamp after which certificate is not valid"
        },
        "notBefore" : {
          "type" : "string",
          "example" : "2020-01-01T00:00:00.000Z",
          "description" : "The timestamp before which certificate is not valid"
        },
        "numberOfDaysToExpire" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "398",
          "description" : "Number of days left for the certificate to expire"
        },
        "pemEncoded" : {
          "type" : "string",
          "example" : "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----",
          "description" : "The PEM encoded certificate content"
        },
        "publicKey" : {
          "type" : "string",
          "example" : "D6:FD:DF:33:F1:...",
          "description" : "The public key of the certificate"
        },
        "publicKeyAlgorithm" : {
          "type" : "string",
          "example" : "One among: RSA",
          "description" : "The public key algorithm of the certificate"
        },
        "serialNumber" : {
          "type" : "string",
          "example" : "46:85:19:77:36:12:67:26",
          "description" : "The serial number of the certificate"
        },
        "signatureAlgorithm" : {
          "type" : "string",
          "example" : "SHA256withRSA",
          "description" : "Algorithm used to sign the certificate"
        },
        "subject" : {
          "type" : "string",
          "example" : "CN=sfo-vc01.rainpole.io, OU=VCF, O=VMware, L=Bengaluru, ST=Karnataka, C=IN",
          "description" : "Complete distinguished name to which the certificate is issued"
        },
        "subjectAlternativeName" : {
          "type" : "array",
          "example" : "sfo-vc01.rainpole.io",
          "description" : "The alternative names to which the certificate is issued",
          "items" : {
            "type" : "string"
          }
        },
        "thumbprint" : {
          "type" : "string",
          "example" : "59:24:D5:18:04:A0:26:B0:A4:05:EA:82:60:95:82:A2:4B:F6:31:FB:81:93:01:F3:29:7D:34:9C:D3:05:39:90",
          "description" : "Thumbprint generated using certificate content"
        },
        "thumbprintAlgorithm" : {
          "type" : "string",
          "example" : "SHA-256",
          "description" : "Algorithm used to generate thumbprint"
        },
        "version" : {
          "type" : "string",
          "example" : "V3",
          "description" : "The X.509 version of the certificate"
        }
      },
      "description" : "Represents certificate and its attributes"
    },
    "DomainReleaseView" : {
      "required" : [ "domainId", "targetVersion" ],
      "properties" : {
        "domainId" : {
          "type" : "string",
          "description" : "Domain ID"
        },
        "targetVersion" : {
          "type" : "string",
          "description" : "Target upgrade version of the domain"
        },
        "targetVxRailVersion" : {
          "type" : "string",
          "description" : "Target VxRail version"
        }
      },
      "description" : "Model for domain release view."
    },
    "HealthCheckQueryResult" : {
      "required" : [ "resultId", "status" ],
      "properties" : {
        "result" : {
          "type" : "array",
          "description" : "result",
          "items" : {
            "$ref" : "#/definitions/HealthCheckResult"
          }
        },
        "resultId" : {
          "type" : "string",
          "description" : "Result id"
        },
        "status" : {
          "type" : "string",
          "description" : "status"
        }
      },
      "description" : "HealthCheckQueryResult"
    },
    "NiocTrafficResourceAllocation" : {
      "required" : [ "limit", "reservation", "sharesInfo" ],
      "properties" : {
        "limit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "reservation" : {
          "type" : "integer",
          "format" : "int64"
        },
        "sharesInfo" : {
          "$ref" : "#/definitions/SharesInfo"
        }
      },
      "description" : "Specify network traffic allocation for a resource"
    },
    "LicenseCheckResource" : {
      "required" : [ "resourceInfo" ],
      "properties" : {
        "productInfo" : {
          "description" : "Product info",
          "$ref" : "#/definitions/ProductInfo"
        },
        "resourceInfo" : {
          "description" : "Resource info",
          "$ref" : "#/definitions/ResourceInfo"
        }
      },
      "description" : "License check resource"
    },
    "CredentialsSpec" : {
      "required" : [ "password", "username" ],
      "properties" : {
        "password" : {
          "type" : "string",
          "description" : "Password"
        },
        "username" : {
          "type" : "string",
          "description" : "Username"
        }
      },
      "description" : "This specification contains information about credentials."
    },
    "LicensingSpec" : {
      "required" : [ "resourceLicensingInfos" ],
      "properties" : {
        "resourceLicensingInfos" : {
          "type" : "array",
          "description" : "List of LicensingInfos of resources",
          "items" : {
            "$ref" : "#/definitions/ResourceLicensingInfo"
          }
        }
      },
      "description" : "Licensing informations of resources"
    },
    "SecuritySpec" : {
      "properties" : {
        "esxiCertsMode" : {
          "type" : "string",
          "example" : "One among:Custom, VMCA",
          "description" : "ESXi certificates mode"
        },
        "rootCaCerts" : {
          "type" : "array",
          "description" : "Root Certificate Authority certificate list",
          "items" : {
            "$ref" : "#/definitions/RootCaCerts"
          }
        }
      },
      "description" : "Spec contains security settings"
    },
    "QueryInfo" : {
      "properties" : {
        "completed" : {
          "type" : "boolean"
        },
        "errorResponse" : {
          "description" : "Error response if the query has failed",
          "$ref" : "#/definitions/Error"
        },
        "failure" : {
          "type" : "boolean"
        },
        "processing" : {
          "type" : "boolean"
        },
        "queryId" : {
          "type" : "string",
          "description" : "ID of the query to retrieve"
        },
        "status" : {
          "type" : "string",
          "description" : "Status of the query"
        }
      },
      "description" : "Represents the query info."
    },
    "System" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The identifier of the system"
        },
        "maxAllowedDomainsInSubscription" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The maximum number of domains allowed in subscription mode"
        }
      },
      "description" : "Represents a system"
    },
    "HardwareSupportPackageInfo" : {
      "required" : [ "pkg", "version" ],
      "properties" : {
        "pkg" : {
          "type" : "string",
          "description" : "Hardware support package name"
        },
        "version" : {
          "type" : "string",
          "description" : "Hardware support package version"
        }
      },
      "description" : "Hardware Support Package contains metadata regarding the package, version to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "HostQueryResponse" : {
      "properties" : {
        "queryInfo" : {
          "description" : "Query info",
          "$ref" : "#/definitions/QueryInfo"
        },
        "result" : {
          "description" : "Query result",
          "$ref" : "#/definitions/PageOfHost"
        }
      },
      "description" : "Represents a host query response."
    },
    "DatastoreSpec" : {
      "properties" : {
        "nfsDatastoreSpecs" : {
          "type" : "array",
          "description" : "Cluster storage configuration for NFS",
          "items" : {
            "$ref" : "#/definitions/NfsDatastoreSpec"
          }
        },
        "vmfsDatastoreSpec" : {
          "description" : "Cluster storage configuration for VMFS",
          "$ref" : "#/definitions/VmfsDatastoreSpec"
        },
        "vsanDatastoreSpec" : {
          "description" : "Cluster storage configuration for vSAN",
          "$ref" : "#/definitions/VsanDatastoreSpec"
        },
        "vsanRemoteDatastoreClusterSpec" : {
          "description" : "Cluster storage configuration for vSAN Remote Datastore",
          "$ref" : "#/definitions/VsanRemoteDatastoreClusterSpec"
        },
        "vvolDatastoreSpecs" : {
          "type" : "array",
          "description" : "Cluster storage configuration for VVOL",
          "items" : {
            "$ref" : "#/definitions/VvolDatastoreSpec"
          }
        }
      },
      "description" : "This specification contains cluster storage configuration"
    },
    "PageOfResourceWarning" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/ResourceWarning"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "HealthSummaryScope" : {
      "properties" : {
        "domains" : {
          "type" : "array",
          "description" : "Domains and Clusters for SOS operation.",
          "items" : {
            "$ref" : "#/definitions/Domains"
          }
        },
        "includeAllDomains" : {
          "type" : "boolean",
          "description" : "Include all domains for SOS operation."
        },
        "includeFreeHosts" : {
          "type" : "boolean",
          "description" : "Include free hosts."
        }
      }
    },
    "Cluster" : {
      "properties" : {
        "capacity" : {
          "description" : "Capacity information for the cluster",
          "$ref" : "#/definitions/Capacity"
        },
        "hosts" : {
          "type" : "array",
          "description" : "List of hosts associated with the cluster",
          "items" : {
            "$ref" : "#/definitions/HostReference"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the cluster"
        },
        "isDefault" : {
          "type" : "boolean",
          "description" : "Status of the cluster if default or not"
        },
        "isImageBased" : {
          "type" : "boolean",
          "description" : "Is vSphere cluster managed by vSphere Lifecycle Manager - true for managed, false for not managed"
        },
        "isStretched" : {
          "type" : "boolean",
          "description" : "Status of the cluster if Stretched or not"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the cluster"
        },
        "primaryDatastoreName" : {
          "type" : "string",
          "description" : "Name of the primary datastore"
        },
        "primaryDatastoreType" : {
          "type" : "string",
          "example" : "One among: VSAN, VSAN_ESA, NFS, FC, VVOL_FC, VVOL_ISCSI, VVOL_NFS, VSAN_REMOTE",
          "description" : "Storage type of the primary datastore"
        },
        "tags" : {
          "type" : "array",
          "description" : "Deprecated, this list will always be returned empty",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        },
        "vdsSpecs" : {
          "type" : "array",
          "description" : "Distributed switches to added to the cluster",
          "items" : {
            "$ref" : "#/definitions/VdsSpec"
          }
        }
      },
      "description" : "Cluster representation"
    },
    "HealthCheckTask" : {
      "required" : [ "id", "resourceStatus", "status" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Health Check task id"
        },
        "resourceStatus" : {
          "type" : "object",
          "description" : "Health Check resource status",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "status" : {
          "type" : "string",
          "description" : "Health Check task status"
        }
      },
      "description" : "HealthCheckTask"
    },
    "PageOfTagsForResource" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/TagsForResource"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "IdentityProvider" : {
      "properties" : {
        "domainNames" : {
          "type" : "array",
          "description" : "The Domains of the Identity Provider",
          "items" : {
            "type" : "string"
          }
        },
        "fedIdp" : {
          "description" : "The identity management info when the provider is via broker federation",
          "$ref" : "#/definitions/FederatedIdentityProviderInfo"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the Identity Provider"
        },
        "identitySources" : {
          "type" : "array",
          "description" : "The Identity Sources of the Identity Provider",
          "items" : {
            "$ref" : "#/definitions/VcIdentitySources"
          }
        },
        "idpMessage" : {
          "type" : "string",
          "description" : "The message conveyed by VCF for managing the Identity Provider"
        },
        "ldap" : {
          "description" : "The LDAP configuration of the Identity Provider",
          "$ref" : "#/definitions/LdapInfo"
        },
        "name" : {
          "type" : "string",
          "description" : "The user-friendly name for the Identity Provider"
        },
        "oidc" : {
          "description" : "Identity management configuration when the Identity Provider is based on OIDC",
          "$ref" : "#/definitions/OidcInfo"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: ACTIVE, INACTIVE",
          "description" : "The status of the Identity Provider (set as ACTIVE for currently enabled Identity Provider)"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the Identity Provider"
        }
      },
      "description" : "Represents Identity Provider and its attributes"
    },
    "IdentityProviderPrecheckResult" : {
      "required" : [ "status" ],
      "properties" : {
        "status" : {
          "type" : "string",
          "description" : "One of SUCCESS, WARNING, FAILURE"
        },
        "precheckInfo" : {
          "type" : "array",
          "description" : "Details about status type and error messages",
          "items" : {
            "$ref" : "#/definitions/PrecheckInfo"
          }
        }
      },
      "description" : "Represents Identity Management pre-check result"
    },
    "PrecheckInfo" : {
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Precheck response type"
        },
        "message" : {
          "type" : "string",
          "description" : "User messages for WARNING and FAILURE"
        }
      },
      "description" : "Represents Identity Management pre-check details and user messages"
    },
    "SyncClientTokenInfo" : {
      "required" : [ "expireAt", "token", "scimUrl" ],
      "properties" : {
        "expireAt" : {
          "type" : "string",
          "example" : "The date and time when the token expires"
        },
        "token" : {
          "type" : "string",
          "description" : "The sync client bearer token"
        },
        "scimUrl" : {
          "type" : "string",
          "description" : "The WS1B SCIM URL to push users and groups data from external identity provider"
        }
      },
      "description" : "Represents the information about sync client token"
    },
    "PortgroupSpec" : {
      "required" : [ "name", "transportType" ],
      "properties" : {
        "activeUplinks" : {
          "type" : "array",
          "description" : "The list of active uplinks associated with portgroup",
          "items" : {
            "type" : "string"
          }
        },
        "standByUplinks" : {
          "type" : "array",
          "description" : "The list of standby uplinks associated with portgroup",
          "items" : {
            "type" : "string"
          }
        },
        "teamingPolicy" : {
          "type" : "string",
          "example" : "One among: loadbalance_ip, loadbalance_srcmac, loadbalance_srcid, failover_explicit, loadbalance_loadbased",
          "description" : "The teaming policy associated with the portgroup."
        },
        "name" : {
          "type" : "string",
          "description" : "Port group name"
        },
        "transportType" : {
          "type" : "string",
          "example" : "One among: VSAN, VMOTION, MANAGEMENT, PUBLIC, NFS, VREALIZE, ISCSI, EDGE_INFRA_OVERLAY_UPLINK, VM_MANAGEMENT",
          "description" : "Port group transport type"
        }
      },
      "description" : "This specification contains vCenter port group configurations"
    },
    "BundleDownloadSpec" : {
      "properties" : {
        "downloadNow" : {
          "type" : "boolean",
          "description" : "Flag for enabling Download Now. If true, scheduledTimestamp is ignored"
        },
        "scheduledTimestamp" : {
          "type" : "string",
          "description" : "Bundle Download Scheduled Time"
        }
      },
      "description" : "Bundle Download Specification. This specification gets used in the Bundle Download API"
    },
    "SkuBomDetails" : {
      "required" : [ "bom" ],
      "properties" : {
        "bom" : {
          "type" : "array",
          "description" : "Sku specific bill of materials",
          "items" : {
            "$ref" : "#/definitions/ProductVersion"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description to be shown in release page"
        },
        "name" : {
          "type" : "string",
          "description" : "SKU name"
        },
        "skuSpecificPatchBundles" : {
          "type" : "array",
          "description" : "List of patch bundles in this release",
          "items" : {
            "$ref" : "#/definitions/SkuSpecificPatchBundles"
          }
        }
      },
      "description" : "Model for sku with their name, description, patchBundles and bom"
    },
    "PageOfVersionAliasesForBundleComponentType" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/VersionAliasesForBundleComponentType"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "HealthSummaryOption" : {
      "properties" : {
        "config" : {
          "description" : "HealthSummary config",
          "$ref" : "#/definitions/HealthSummaryConfig"
        },
        "include" : {
          "description" : "Sos Additional Reports for Health Checks.",
          "$ref" : "#/definitions/HealthSummaryIncludeItems"
        }
      }
    },
    "IpAddressPoolRangeSpec" : {
      "required" : [ "end", "start" ],
      "properties" : {
        "end" : {
          "type" : "string",
          "description" : "The last IP Address of the IP Address Range"
        },
        "start" : {
          "type" : "string",
          "description" : "The first IP Address of the IP Address Range"
        }
      },
      "description" : "This specification contains the parameters required to create an IP address range"
    },
    "PageOfSddcTask" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/SddcTask"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "CredentialsExpirationSpec" : {
      "required" : [ "resourceType" ],
      "properties" : {
        "credentialIds" : {
          "type" : "array",
          "description" : "List of credential ids",
          "items" : {
            "type" : "string"
          }
        },
        "domainName" : {
          "type" : "string",
          "description" : "Domain name"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, BACKUP",
          "description" : "Authenticated Resource Type"
        }
      },
      "description" : "This specification contains password expiration fetch request details"
    },
    "ResourceWarning" : {
      "properties" : {
        "associatedTask" : {
          "description" : "Optional associated task where the warning occurred",
          "$ref" : "#/definitions/AssociatedTask"
        },
        "context" : {
          "type" : "object",
          "description" : "Optional additional context information in a key value form",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the resource warning"
        },
        "message" : {
          "type" : "string",
          "description" : "The localized warning message"
        },
        "occurredAtTimestamp" : {
          "type" : "string",
          "description" : "Timestamp when the warning occurred"
        },
        "referenceToken" : {
          "type" : "string",
          "description" : "A reference token correlating the warning with the relevant detailed logs. Should be sent to the service provider when reporting issues"
        },
        "remediationMessage" : {
          "type" : "string",
          "description" : "The localized remediation warning message"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "ID of the associated resource"
        },
        "resourceName" : {
          "type" : "string",
          "description" : "Name of the associated resource"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: HOST, CLUSTER, DOMAIN",
          "description" : "Type of the associated resource"
        },
        "severity" : {
          "type" : "string",
          "example" : "One among: MINOR, MAJOR",
          "description" : "Severity of the warning"
        },
        "warningCode" : {
          "type" : "string",
          "description" : "The warning code"
        },
        "warningType" : {
          "type" : "string",
          "example" : "One among: SKIPPED_RESOURCE, VALIDATION, CONFIGURATION, OTHER",
          "description" : "Type of the warning"
        }
      },
      "description" : "Represents a warning associated to a specific resource"
    },
    "ClusterCompactionSpec" : {
      "properties" : {
        "force" : {
          "type" : "boolean",
          "description" : "Force removal of vSphere host"
        },
        "forceByPassingSafeMinSize" : {
          "type" : "boolean",
          "description" : "Remove dead hosts from cluster, bypassing validations. Forced removal may result in permanent data loss. Review recovery plan with VMware Support before using."
        },
        "hosts" : {
          "type" : "array",
          "description" : "List of vSphere hosts to be removed",
          "items" : {
            "$ref" : "#/definitions/HostReference"
          }
        }
      },
      "description" : "This specification contains the parameters required to remove one or more vSphere hosts from existing cluster in a workload domain"
    },
    "HealthSummary" : {
      "properties" : {
        "bundleAvailable" : {
          "type" : "string",
          "description" : "Indicate if bundle is available in file system."
        },
        "bundleName" : {
          "type" : "string",
          "description" : "Name of the Support Bundle."
        },
        "completionTimestamp" : {
          "type" : "string",
          "description" : "CompletionTimestamp."
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "CreationTimestamp."
        },
        "description" : {
          "type" : "string",
          "description" : "Name of the Operation."
        },
        "id" : {
          "type" : "string",
          "description" : "Id of the Support Bundle task."
        },
        "status" : {
          "type" : "string",
          "example" : "One among: IN_PROGRESS, PENDING, COMPLETED_WITH_SUCCESS, COMPLETED_WITH_FAILURE",
          "description" : "Health summary collection status."
        }
      }
    },
    "Encryption" : {
      "required" : [ "passphrase" ],
      "properties" : {
        "passphrase" : {
          "type" : "string",
          "description" : "Passphrase"
        }
      },
      "description" : "Restore Specification"
    },
    "IpAllocation" : {
      "required" : [ "ipAddress" ],
      "properties" : {
        "cidr" : {
          "type" : "string",
          "example" : "172.0.0.0/24",
          "description" : "Classless Inter-Domain Routing (CIDR)",
          "minLength" : 10,
          "maxLength" : 18
        },
        "gateway" : {
          "type" : "string",
          "example" : "192.168.0.1",
          "description" : "Gateway",
          "minLength" : 7,
          "maxLength" : 15
        },
        "ipAddress" : {
          "type" : "string",
          "example" : "192.168.0.123",
          "description" : "IP Address",
          "minLength" : 7,
          "maxLength" : 15
        },
        "subnet" : {
          "type" : "string",
          "example" : "255.255.255.252",
          "description" : "Subnet",
          "minLength" : 7,
          "maxLength" : 15
        }
      },
      "description" : "Defines an IP address with gateway and subnet"
    },
    "SkuSpecificPatchBundles" : {
      "required" : [ "bundleType", "bundleVersion", "version" ],
      "properties" : {
        "bundleType" : {
          "type" : "string",
          "description" : "Bundle type of the patch bundle"
        },
        "bundleVersion" : {
          "type" : "string",
          "description" : "Bundle Version of the product"
        },
        "version" : {
          "type" : "string",
          "description" : "Product version"
        }
      },
      "description" : "Model for Sku specific patch bundle in a release"
    },
    "AssessmentTaskInfo" : {
      "properties" : {
        "completionTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Timestamp corresponding to the time when the assessment was finished"
        },
        "domainInputs" : {
          "type" : "array",
          "description" : "The domains that have been assessed in the run associated to the given result",
          "items" : {
            "$ref" : "#/definitions/DomainInfo"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "The id of the assessment run"
        },
        "metadata" : {
          "description" : "Metadata about the assessment run that is triggered and passed to the result",
          "$ref" : "#/definitions/AssessmentMetadata"
        },
        "state" : {
          "type" : "string",
          "description" : "The related task state of the run associated to the given result"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Timestamp corresponding to the time when the assessment was initiated"
        }
      },
      "description" : "A summary of an assessment execution"
    },
    "Capacity" : {
      "properties" : {
        "cpu" : {
          "description" : "Cpu metrics of the resource",
          "$ref" : "#/definitions/CpuInfo"
        },
        "memory" : {
          "description" : "Memory metrics of the resource",
          "$ref" : "#/definitions/MemoryInfo"
        },
        "storage" : {
          "description" : "Storage metrics of the resource",
          "$ref" : "#/definitions/StorageInfo"
        }
      },
      "description" : "Represents a usage and capacity information of a Resource"
    },
    "Classification" : {
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Description of the classification"
        },
        "source" : {
          "type" : "string",
          "description" : "Source of the classification",
          "enum" : [ "CLASSIFIER", "USER_INPUT", "INHERITED" ]
        },
        "type" : {
          "type" : "string",
          "description" : "Type of the classification, e.g. domainType"
        },
        "value" : {
          "type" : "string",
          "description" : "Value of the classification, e.g. MGMT_DOMAIN"
        }
      },
      "description" : "Describes the source of the classification,classification can be acquired by a classifier, user input or inherited from a parent entity."
    },
    "Network" : {
      "properties" : {
        "freeIps" : {
          "type" : "array",
          "description" : "List of free IPs to use",
          "items" : {
            "type" : "string"
          }
        },
        "gateway" : {
          "type" : "string",
          "description" : "Gateway for the network"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the network"
        },
        "ipPools" : {
          "type" : "array",
          "description" : "List of IP pool ranges to use",
          "items" : {
            "$ref" : "#/definitions/IpPool"
          }
        },
        "mask" : {
          "type" : "string",
          "description" : "Subnet mask for the subnet of the network"
        },
        "mtu" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "MTU of the network"
        },
        "subnet" : {
          "type" : "string",
          "description" : "Subnet associated with the network"
        },
        "type" : {
          "type" : "string",
          "description" : "Network Type of the network"
        },
        "usedIps" : {
          "type" : "array",
          "description" : "List of used IPs",
          "items" : {
            "type" : "string"
          }
        },
        "vlanId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "VLAN ID associated with the network"
        }
      },
      "description" : "Represents a network in a network pool"
    },
    "SupportBundleIncludeItems" : {
      "properties" : {
        "healthCheck" : {
          "type" : "boolean",
          "description" : "Perform SOS Health checks."
        },
        "summaryReport" : {
          "type" : "boolean",
          "description" : "Collect Vcf Summary Reports."
        }
      }
    },
    "NsxtUpgradeOptions" : {
      "properties" : {
        "isEdgeClustersUpgradeParallel" : {
          "type" : "boolean",
          "description" : "Flag for disabling/enabling parallel upgrade of edge transportnode clusters"
        },
        "isEdgeOnlyUpgrade" : {
          "type" : "boolean",
          "description" : "Flag for performing edge-only upgrade"
        },
        "isHostClustersUpgradeParallel" : {
          "type" : "boolean",
          "description" : "Flag for disabling/enabling parallel upgrade of host transportnode clusters"
        }
      },
      "description" : "NSX Upgrade options"
    },
    "DomainInfo" : {
      "properties" : {
        "domainId" : {
          "type" : "string",
          "description" : "Id of the domain"
        },
        "domainName" : {
          "type" : "string",
          "description" : "Name of the domain"
        },
        "domainType" : {
          "type" : "string",
          "description" : "Type of the domain",
          "enum" : [ "MANAGEMENT", "VI" ]
        }
      },
      "description" : "Information about the assessed domain"
    },
    "CompatibilityMatrixMetadata" : {
      "properties" : {
        "errorMessage" : {
          "type" : "string",
          "description" : "Error message for the compatibility matrix content"
        },
        "isMissing" : {
          "type" : "boolean",
          "description" : "existence of the compatibility matrix content"
        },
        "isStale" : {
          "type" : "boolean",
          "description" : "staleness of the compatibility matrix content"
        },
        "lastModifiedDate" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Last modified date of the compatibility matrix content"
        },
        "message" : {
          "type" : "string",
          "description" : "Info message for the compatibility matrix content"
        },
        "warningMessage" : {
          "type" : "string",
          "description" : "Warning message for the compatibility matrix content"
        }
      },
      "description" : "Model for metadata of compatibility matrix"
    },
    "ResourceUpgradeSpec" : {
      "required" : [ "resourceId" ],
      "properties" : {
        "customISOSpec" : {
          "description" : "Custom ISO Specifications for VUM Clusters Upgrade with Custom ISO",
          "$ref" : "#/definitions/CustomISOSpec"
        },
        "enableQuickboot" : {
          "type" : "boolean",
          "description" : "Flag for requesting Quick Boot for ESXi upgrade"
        },
        "evacuateOfflineVms" : {
          "type" : "boolean",
          "description" : "Flag for requesting Evacuation of Offline VMs for ESXi upgrade"
        },
        "personalitySpec" : {
          "description" : "Personality Specifications for vLCM based upgrade",
          "$ref" : "#/definitions/PersonalitySpec"
        },
        "resourceId" : {
          "type" : "string",
          "description" : "Resource ID for Upgrade"
        },
        "scheduledTimestamp" : {
          "type" : "string",
          "description" : "Upgrade Scheduled Time"
        },
        "shutdownVms" : {
          "type" : "boolean",
          "description" : "If Resource Type is UNASSIGNED_HOST, set flag for enabling shutting down VM's before Upgrade"
        },
        "toVersion" : {
          "type" : "string",
          "description" : "If Resource Type is UNASSIGNED_HOST, set the target version for Upgrade"
        },
        "upgradeNow" : {
          "type" : "boolean",
          "description" : "Flag for enabling Upgrade Now. If true, scheduledTimestamp is ignored"
        }
      },
      "description" : "Resource Upgrade Specification"
    },
    "ResourceInfo" : {
      "required" : [ "domainId" ],
      "properties" : {
        "clusterId" : {
          "type" : "string",
          "example" : "a0bf0f65-f719-4c2d-980a-29a9094045b5",
          "description" : "Cluster Id of resourceInfo"
        },
        "domainId" : {
          "type" : "string",
          "example" : "f0bf0f65-f719-4c2d-980a-29a9094045b5",
          "description" : "Domain Identifier"
        },
        "hostId" : {
          "type" : "string",
          "example" : "b0bf0f65-f719-4c2d-980a-29a9094045b5",
          "description" : "Host Id of resourceInfo"
        }
      },
      "description" : "Resource info"
    },
    "PageOfHostCriterion" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/HostCriterion"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "VasaProviderUpdateSpec" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the VASA Provider"
        },
        "url" : {
          "type" : "string",
          "description" : "URL of the VASA Provider"
        }
      },
      "description" : "Represents a VASA Provider update specification"
    },
    "WsaProductSpec" : {
      "required" : [ "adminCredentials", "defaultAdminCredentials", "loadBalancerFqdn", "nodes", "type", "version" ],
      "properties" : {
        "adminCredentials" : {
          "description" : "The credentials of the VMware Aria product Admin",
          "$ref" : "#/definitions/CredentialsSpec"
        },
        "certificateChain" : {
          "type" : "string",
          "description" : "The certificate chain of the VMware Aria product."
        },
        "defaultAdminCredentials" : {
          "description" : "Default admin credentials for Workspace ONE Access",
          "$ref" : "#/definitions/CredentialsSpec"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the product"
        },
        "loadBalancerFqdn" : {
          "type" : "string",
          "description" : "Fully Qualified Domain Name for the VMware Aria product load balancer "
        },
        "nodes" : {
          "type" : "array",
          "description" : "The nodes of the VMware Aria product instance",
          "items" : {
            "$ref" : "#/definitions/ProductNode"
          }
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the Workspace ONE Access instance"
        },
        "version" : {
          "type" : "string",
          "description" : "The version of the VMware Aria product instance"
        }
      },
      "description" : "Spec contains information for a VMware Aria product"
    },
    "PageOfValidation" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Validation"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ResourceFunctionalities" : {
      "properties" : {
        "functionalities" : {
          "type" : "array",
          "description" : "List of functionalities associated with the resource",
          "items" : {
            "$ref" : "#/definitions/Functionality"
          }
        },
        "resourceId" : {
          "type" : "string",
          "description" : "ID of the resource"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "One among: SYSTEM, HOST, CLUSTER, DOMAIN, EDGE_CLUSTER",
          "description" : "Type of the resource"
        }
      },
      "description" : "Defines a resource functionality specification"
    },
    "BackupResource" : {
      "required" : [ "resourceType" ],
      "properties" : {
        "resourceType" : {
          "type" : "string",
          "example" : "SDDC_MANAGER",
          "description" : "Resource type"
        }
      },
      "description" : "Element specification to trigger backup"
    },
    "MapOfstringAndListOfAsyncPatch" : {
      "type" : "object",
      "additionalProperties" : {
        "items" : {
          "$ref" : "#/definitions/AsyncPatch"
        },
        "type" : "array"
      }
    },
    "FcSpec" : {
      "required" : [ "datastoreName" ],
      "properties" : {
        "datastoreName" : {
          "type" : "string",
          "description" : "Datastore name used for cluster creation"
        }
      },
      "description" : "Cluster storage configuration for VMFS on FC"
    },
    "DepotAccount" : {
      "required" : [ "password", "username" ],
      "properties" : {
        "message" : {
          "type" : "string",
          "description" : "Message explaining depot status"
        },
        "password" : {
          "type" : "string",
          "description" : "Depot Password for Access"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: DEPOT_UNKNOWN_HOST, DEPOT_NOT_AVAILABLE, DEPOT_USER_NOT_SET, DEPOT_INVALID_CREDENTIAL, UNKNOWN_FAILURE, DEPOT_CONNECTION_SUCCESSFUL",
          "description" : "Depot Status"
        },
        "username" : {
          "type" : "string",
          "description" : "Depot Username for Access"
        }
      },
      "description" : "VMware Depot Account Information"
    },
    "CompatibilityMatrix" : {
      "required" : [ "compatibilityMatrixContent", "compatibilityMatrixMetadata", "compatibilityMatrixSource" ],
      "properties" : {
        "compatibilityMatrixContent" : {
          "type" : "string",
          "description" : "Content of the compatibility matrix"
        },
        "compatibilityMatrixMetadata" : {
          "description" : "Metadata of the compatibility matrix content",
          "$ref" : "#/definitions/CompatibilityMatrixMetadata"
        },
        "compatibilityMatrixSource" : {
          "type" : "string",
          "example" : "One among: VMWARE_COMPAT, VXRAIL_COMPAT",
          "description" : "Source type of the compatibility matrix content"
        }
      },
      "description" : "Model for metadata of compatibility matrix"
    },
    "Package" : {
      "required" : [ "name", "version" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Package name"
        },
        "version" : {
          "type" : "string",
          "description" : "Package version"
        }
      },
      "description" : "Hardware Support Package Specification"
    },
    "DnsSpec" : {
      "required" : [ "domain", "subdomain" ],
      "properties" : {
        "domain" : {
          "type" : "string",
          "example" : "vmware.com",
          "description" : "Tenant domain"
        },
        "nameserver" : {
          "type" : "string",
          "example" : "172.0.0.4",
          "description" : "Primary nameserver to be configured for vCenter/PSC/ESXi's/NSX"
        },
        "secondaryNameserver" : {
          "type" : "string",
          "example" : "172.0.0.5",
          "description" : "Secondary nameserver to be configured for vCenter/PSC/ESXi's/NSX"
        },
        "subdomain" : {
          "type" : "string",
          "example" : "vcf.vmware.com",
          "description" : "Tenant Sub domain"
        }
      },
      "description" : "Spec contains parameters of Domain Name System"
    },
    "DatastoreMountSpec" : {
      "required" : [ "datastoreSpec" ],
      "properties" : {
        "datastoreSpec" : {
          "description" : "Cluster storage configuration; e.g. HCI Mesh remote vSAN",
          "$ref" : "#/definitions/DatastoreSpec"
        }
      },
      "description" : "Specification for datastore mount configuration."
    },
    "EdgeTepIpAddressPoolSpec" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "NSX IP Pool Name"
        },
        "nsxId" : {
          "type" : "string",
          "description" : "NSX IP Pool ID"
        }
      },
      "description" : "This specification indicates which NSX IP pool to use for an Edge node's TEPs"
    },
    "NsxTEdgeClusterProfileSpec" : {
      "required" : [ "bfdAllowedHop", "bfdDeclareDeadMultiple", "bfdProbeInterval", "edgeClusterProfileName", "standbyRelocationThreshold" ],
      "properties" : {
        "bfdAllowedHop" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "BFD allowed Hop"
        },
        "bfdDeclareDeadMultiple" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "BFD Declare Dead Multiple"
        },
        "bfdProbeInterval" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "BFD Probe"
        },
        "edgeClusterProfileName" : {
          "type" : "string",
          "description" : "Name for the edge cluster profile."
        },
        "standbyRelocationThreshold" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Standby Relocation Threshold"
        }
      },
      "description" : "This specification contains edge cluster profile configurations"
    },
    "VsanRemoteDatastoreSpec" : {
      "required" : [ "datastoreUuid" ],
      "properties" : {
        "datastoreUuid" : {
          "type" : "string",
          "description" : "vSAN Remote Datastore UUID"
        }
      },
      "description" : "This specification contains cluster storage configuration for vSAN"
    },
    "BackupSchedule" : {
      "required" : [ "frequency", "resourceType" ],
      "properties" : {
        "daysOfWeek" : {
          "type" : "array",
          "example" : "One among: SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY",
          "description" : "List of days of the week to schedule backup",
          "items" : {
            "type" : "string"
          }
        },
        "frequency" : {
          "type" : "string",
          "example" : "One among: WEEKLY, HOURLY",
          "description" : "Backup frequency"
        },
        "hourOfDay" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Hour of the day to schedule backup"
        },
        "minuteOfHour" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minute of the hour to schedule backup"
        },
        "resourceType" : {
          "type" : "string",
          "example" : "SDDC_MANAGER",
          "description" : "Resource type to configure backup schedule"
        },
        "retentionPolicy" : {
          "description" : "Backup retention policy",
          "$ref" : "#/definitions/BackupRetentionPolicy"
        },
        "takeBackupOnStateChange" : {
          "type" : "boolean",
          "example" : "True",
          "description" : "Enable/disable backups on state change. If enabled, SDDC Manager will take a backup after the successful completion of an operation that changes its state. This mode requires that scheduled backups be enabled."
        },
        "takeScheduledBackups" : {
          "type" : "boolean",
          "example" : "True",
          "description" : "Enable/disable scheduled backups"
        }
      },
      "description" : "Backup schedule configuration"
    },
    "AddOnInfo" : {
      "required" : [ "name", "vendor", "version" ],
      "properties" : {
        "displayName" : {
          "type" : "string",
          "description" : "Add On display name"
        },
        "displayVersion" : {
          "type" : "string",
          "description" : "Add On display version"
        },
        "name" : {
          "type" : "string",
          "example" : "DELL-sample-Addon",
          "description" : "Component name"
        },
        "vendor" : {
          "type" : "string",
          "example" : "Dell",
          "description" : "vendor"
        },
        "version" : {
          "type" : "string",
          "example" : "2.0-1",
          "description" : "Add on software version"
        }
      },
      "description" : "AddOn contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "PageOfClusterCriterion" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/ClusterCriterion"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "SddcManagerSpec" : {
      "required" : [ "hostname", "ipAddress", "rootUserCredentials", "secondUserCredentials" ],
      "properties" : {
        "hostname" : {
          "type" : "string",
          "description" : "SDDC Manager Hostname",
          "minLength" : 3,
          "maxLength" : 63
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "SDDC Manager ip address",
          "minLength" : 7,
          "maxLength" : 15
        },
        "localUserPassword" : {
          "type" : "string",
          "description" : "The local account is a built-in admin account in VCF that can be used in emergency scenarios. The password of this account must be at least 12 characters long. It also must contain at-least 1 uppercase, 1 lowercase, 1 special character specified in braces [!%@$^#?] and 1 digit. In addition, a character cannot be repeated more than 3 times consecutively."
        },
        "rootUserCredentials" : {
          "description" : "Root user credentials for the SDDC Manager VM, UserName must be root. Password needs to be a strong password with at least one alphabet and one special character and at least 8 characters in length.",
          "$ref" : "#/definitions/SddcCredentials"
        },
        "secondUserCredentials" : {
          "description" : "Second user credentials for the SDDC Manager VM, UserName must be vcf. Password needs to be a strong password with at least one alphabet and one special character and at least 8 characters in length.",
          "$ref" : "#/definitions/SddcCredentials"
        }
      },
      "description" : "Client input parameters for SDDC Manager Virtual Machine"
    },
    "PageOfNetworkConfigProfile" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/NetworkConfigProfile"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "VasaProvider" : {
      "required" : [ "name", "storageContainers", "url", "users" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the VASA Provider"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the VASA Provider"
        },
        "storageContainers" : {
          "type" : "array",
          "description" : "List of storage containers associated with the VASA Provider",
          "items" : {
            "$ref" : "#/definitions/StorageContainer"
          }
        },
        "url" : {
          "type" : "string",
          "description" : "URL of the VASA Provider"
        },
        "users" : {
          "type" : "array",
          "description" : "List of users associated with the VASA Provider",
          "items" : {
            "$ref" : "#/definitions/VasaUser"
          }
        }
      },
      "description" : "VASA Provider representation"
    },
    "VasaUser" : {
      "required" : [ "password", "username" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the VASA User"
        },
        "password" : {
          "type" : "string",
          "description" : "Password"
        },
        "username" : {
          "type" : "string",
          "description" : "VASA User name"
        }
      },
      "description" : "VASA User representation"
    },
    "HardwareSupportSpec" : {
      "required" : [ "name", "packageSpec" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Hardware Support Manager name"
        },
        "packageSpec" : {
          "description" : "Package for Hardware Support Managers",
          "$ref" : "#/definitions/PackageSpec"
        }
      },
      "description" : "Hardware Support Specification for Firmware Upgrade"
    },
    "SddcNetworkSpec" : {
      "required" : [ "networkType", "vlanId" ],
      "properties" : {
        "activeUplinks" : {
          "type" : "array",
          "description" : "Active Uplinks for teaming policy, specify uplink1 for failover_explicit VSAN Teaming Policy",
          "items" : {
            "type" : "string"
          }
        },
        "excludeIpAddressRanges" : {
          "type" : "array",
          "description" : "IP Addresse ranges to be excluded",
          "items" : {
            "type" : "string"
          }
        },
        "excludeIpaddresses" : {
          "type" : "array",
          "description" : "IP Addresses to be excluded",
          "items" : {
            "type" : "string"
          }
        },
        "gateway" : {
          "type" : "string",
          "description" : "Gateway",
          "minLength" : 7,
          "maxLength" : 15
        },
        "includeIpAddress" : {
          "type" : "array",
          "description" : "IP Addresses to be included",
          "items" : {
            "type" : "string"
          }
        },
        "includeIpAddressRanges" : {
          "type" : "array",
          "description" : "IP Addresse ranges to be included",
          "items" : {
            "$ref" : "#/definitions/IpRange"
          }
        },
        "mtu" : {
          "type" : "string",
          "description" : "MTU size",
          "minLength" : 4,
          "maxLength" : 4
        },
        "networkType" : {
          "type" : "string",
          "example" : "One among: VSAN, VMOTION, MANAGEMENT, VM_MANAGEMENT or any custom network type",
          "description" : "Network Type"
        },
        "portGroupKey" : {
          "type" : "string",
          "description" : "Portgroup key name"
        },
        "standbyUplinks" : {
          "type" : "array",
          "description" : "Standby Uplinks for teaming policy, specify uplink2 for failover_explicit VSAN Teaming Policy",
          "items" : {
            "type" : "string"
          }
        },
        "subnet" : {
          "type" : "string",
          "description" : "Subnet",
          "minLength" : 7,
          "maxLength" : 15
        },
        "subnetMask" : {
          "type" : "string",
          "description" : "Subnet Mask",
          "minLength" : 7,
          "maxLength" : 15
        },
        "teamingPolicy" : {
          "type" : "string",
          "example" : "One among:loadbalance_ip, loadbalance_srcmac, loadbalance_srcid, failover_explicit, loadbalance_loadbased",
          "description" : "Teaming Policy for VSAN and VMOTION network types, Default is loadbalance_loadbased"
        },
        "vlanId" : {
          "type" : "string",
          "description" : "VLAN Id",
          "minLength" : 1,
          "maxLength" : 4
        }
      },
      "description" : "Defines a network spec"
    },
    "WitnessSpec" : {
      "required" : [ "fqdn", "vsanCidr", "vsanIp" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "description" : "Management ip of the witness host"
        },
        "vsanCidr" : {
          "type" : "string",
          "description" : "vSAN subnet cidr of the witness host"
        },
        "vsanIp" : {
          "type" : "string",
          "description" : "vSAN IP of the witness host"
        }
      },
      "description" : "Spec contains the Witness host parameters that are part of each stretched cluster"
    },
    "VmNic" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "VmNic ID of vSphere host to be associated with VDS, once added to cluster"
        },
        "moveToNvds" : {
          "type" : "boolean",
          "description" : "This flag determines if the vmnic must be on N-VDS"
        },
        "uplink" : {
          "type" : "string",
          "description" : "Uplink to be associated with vmnic"
        },
        "vdsName" : {
          "type" : "string",
          "description" : "VDS name to associate with vSphere host"
        }
      },
      "description" : "This specification contains vmnic configurations for vSphere host"
    },
    "ClusterCriterion" : {
      "properties" : {
        "arguments" : {
          "type" : "object",
          "description" : "Arguments required for a particular criterion",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the criterion"
        },
        "name" : {
          "type" : "string",
          "example" : "One among: UNMANAGED_CLUSTERS_IN_VCENTER, UNMANAGED_CLUSTER_IN_VCENTER",
          "description" : "Name of the criterion"
        }
      },
      "description" : "Represents a criterion for querying the cluster"
    },
    "MapOfstringAndComponentInfo" : {
      "type" : "object",
      "additionalProperties" : {
        "$ref" : "#/definitions/ComponentInfo"
      }
    },
    "Vds" : {
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "vSphere Distributed Switch id"
        },
        "isUsedByNsxt" : {
          "type" : "boolean",
          "description" : "Boolean to identify if the vSphere distributed switch is used by NSX. This property is deprecated in favor of nsxtSwitchConfig field."
        },
        "mtu" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Maximum Transmission Unit"
        },
        "name" : {
          "type" : "string",
          "description" : "vSphere Distributed Switch name"
        },
        "niocBandwidthAllocations" : {
          "type" : "array",
          "description" : "List of Network I/O Control Bandwidth Allocations for System Traffic",
          "items" : {
            "$ref" : "#/definitions/NiocBandwidthAllocation"
          }
        },
        "portGroups" : {
          "type" : "array",
          "description" : "List of portgroups associated with the vSphere Distributed Switch",
          "items" : {
            "$ref" : "#/definitions/Portgroup"
          }
        },
        "version" : {
          "type" : "string",
          "description" : "vSphere Distributed Switch version"
        },
        "nsxtSwitchConfig" : {
          "$ref" : "#/definitions/NsxtSwitchConfiguration",
          "description" : "The configurations associated with the vSphere Distributed Switch managed by NSX"
        }
      },
      "description" : "vSphere distributed switch"
    },
    "NsxtSwitchConfiguration" : {
      "description" : "The network configurations associated with the vSphere Distributed Switch managed by NSX",
      "properties" : {
        "transportZones" : {
          "type" : "array",
          "description" : "The list of transport zones associated with the vSphere Distributed Switch managed by NSX",
          "items" : {
            "$ref" : "#/definitions/NsxTransportZone"
          }
        },
        "hostSwitchOperationalMode" : {
          "type" : "string",
          "description" : "Operational mode of a Host Switch",
          "example" : "One among: STANDARD, ENS, ENS_INTERRUPT"
        }
      }
    },
    "NsxTransportZone" : {
      "description" : "The transport zone associated with the vSphere Distributed Switch used by NSX",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the transport zone"
        },
        "transportType" : {
          "type" : "string",
          "description" : "The type of the transport zone",
          "example" : "One among: VLAN, OVERLAY"
        }
      }
    },
    "DomainFutureRelease" : {
      "required" : [ "bom", "description", "minCompatibleVcfVersion", "product", "releaseDate", "version" ],
      "properties" : {
        "applicabilityStatus" : {
          "type" : "string",
          "example" : "One among: APPLICABLE, NOT_APPLICABLE",
          "description" : "Whether bundle is applicable or not."
        },
        "bom" : {
          "type" : "array",
          "description" : "Release bill of materials",
          "items" : {
            "$ref" : "#/definitions/ProductVersion"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Release description with all major features. "
        },
        "eol" : {
          "type" : "string",
          "description" : "Release eol information e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format"
        },
        "isApplicable" : {
          "type" : "boolean",
          "description" : "[Deprecated] Whether bundle is applicable or not."
        },
        "minCompatibleVcfVersion" : {
          "type" : "string",
          "description" : "Minimum compatible VCF version, used to represent compatibility of SDDC Manager and VMware BOM components"
        },
        "notApplicableReason" : {
          "type" : "string",
          "description" : "[Deprecated] Incompatibility reason for not applicable."
        },
        "patchBundles" : {
          "type" : "array",
          "description" : "List of patch bundles in this release",
          "items" : {
            "$ref" : "#/definitions/PatchBundle"
          }
        },
        "product" : {
          "type" : "string",
          "description" : "Name of the product e.g. \"VCF\""
        },
        "reasonNotApplicable" : {
          "description" : "Incompatibility details for not applicable",
          "$ref" : "#/definitions/MessagePack"
        },
        "releaseDate" : {
          "type" : "string",
          "description" : "Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format"
        },
        "sku" : {
          "type" : "array",
          "description" : "Release sku specific patch and bill of materials",
          "items" : {
            "$ref" : "#/definitions/SkuBomDetails"
          }
        },
        "updates" : {
          "type" : "array",
          "description" : "Collection of release updates",
          "items" : {
            "$ref" : "#/definitions/ReleaseUpdate"
          }
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the release"
        }
      },
      "description" : "Model for releases with details if applicable to current domain version or not."
    },
    "VrslcmDeploymentSpec" : {
      "required" : [ "apiPassword", "fqdn", "nsxtStandaloneTier1Ip", "sshPassword" ],
      "properties" : {
        "apiPassword" : {
          "type" : "string",
          "description" : "The password for an admin API/UI user of VMware Aria Suite Lifecycle"
        },
        "fqdn" : {
          "type" : "string",
          "example" : "vrslcm.vrack.vsphere.local",
          "description" : "Fully Qualified Domain Name"
        },
        "nsxtStandaloneTier1Ip" : {
          "type" : "string",
          "description" : "The IP to use for deploying a new standalone Tier-1 router in NSX. This router will be used subsequently for VMware Aria load balancers."
        },
        "sshPassword" : {
          "type" : "string",
          "description" : "The password for a root user of VMware Aria Suite Lifecycle appliance"
        }
      },
      "description" : "Spec contains parameters for creating a new VMware Aria Suite Lifecycle instance"
    },
    "QueryResponseOfobject" : {
      "properties" : {
        "queryInfo" : {
          "description" : "Query info",
          "$ref" : "#/definitions/QueryInfo"
        },
        "result" : {
          "description" : "Query result",
          "$ref" : "#/definitions/PageOfobject"
        }
      },
      "description" : "Represents the concrete query response."
    },
    "DomainIntegration" : {
      "required" : [ "status" ],
      "properties" : {
        "domainId" : {
          "type" : "string",
          "description" : "The ID of the workload domain"
        },
        "status" : {
          "type" : "string",
          "example" : "ENABLED, DISABLED, IN_PROGRESS",
          "description" : "The association status of the workload domain",
          "enum" : [ "ENABLED", "DISABLED" ]
        }
      },
      "description" : "This specification contains information related to the existing VMware Aria Operations instance deployment"
    },
    "DomainUpdateSpec" : {
      "properties" : {
        "clusterSpec" : {
          "description" : "Cluster Specification for the domain",
          "$ref" : "#/definitions/ClusterSpec"
        },
        "markForDeletion" : {
          "type" : "boolean",
          "description" : "Enable deletion for the domain"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the domain"
        },
        "nsxTSpec" : {
          "description" : "NSX Specification for the domain",
          "$ref" : "#/definitions/NsxTSpec"
        }
      },
      "description" : "Contains the parameters required to perform update operation on domain"
    },
    "MapOfstringAndListOfVxRailContext" : {
      "type" : "object",
      "additionalProperties" : {
        "items" : {
          "$ref" : "#/definitions/VxRailContext"
        },
        "type" : "array"
      }
    },
    "SystemUpdateSpec" : {
      "properties" : {
        "maxAllowedDomainsInSubscription" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "new limit of amount of domains in subscription mode"
        }
      },
      "description" : "Contains the parameters required to perform update operation on system"
    },
    "ClusterRemediationSpec" : {
      "description" : "This specification contains parameters required to remediate a Cluster after transition to vSphere Lifecycle Manager Images"
    },
    "Tag" : {
      "properties" : {
        "categoryId" : {
          "type" : "string",
          "description" : "ID of the tag category"
        },
        "categoryName" : {
          "type" : "string",
          "description" : "Category name of the tag"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the tag"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the tag"
        }
      },
      "description" : "Represents a tag"
    },
    "ClusterNetworkConfiguration" : {
      "description" : "Represents the cluster network configuration.",
      "properties" : {
        "hostDetails" : {
          "type" : "array",
          "description" : "List of host details",
          "items" : {
            "$ref" : "#/definitions/HostDetail"
          }
        },
        "vdsConfigurations" : {
          "type" : "array",
          "description" : "List of VDS configuration",
          "items" : {
            "$ref" : "#/definitions/VdsConfiguration"
          }
        },
        "nonVcfCreatedVds" : {
          "type" : "array",
          "description" : "List of VDS names that is not present in VCF inventory",
          "items" : {
            "type" : "string"
          }
        },
        "ipAddressPools" : {
          "type" : "array",
          "description" : "List of IP address pool configuration",
          "items" : {
            "$ref" : "#/definitions/NsxtIpAddressPool"
          }
        },
        "uplinkProfiles" : {
          "type" : "array",
          "description" : "List of uplink profile configuration",
          "items" : {
            "$ref" : "#/definitions/UplinkProfile"
          }
        },
        "networkProfiles" : {
          "type" : "array",
          "description" : "List of network profiles",
          "items" : {
            "$ref" : "#/definitions/NetworkProfileConfiguration"
          }
        }
      }
    },
    "HostDetail" : {
      "description" : "Host Configuration",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the host"
        },
        "hostName" : {
          "type" : "string",
          "description" : "Host name of the vSphere host"
        },
        "azName" : {
          "type" : "string",
          "description" : "Availability zone to which the host belongs when the cluster is stretched"
        },
        "hostNetworkConfiguration" : {
          "$ref" : "#/definitions/HostNetworkConfiguration",
          "description" : "Network configuration of the host"
        }
      }
    },
    "HostNetworkConfiguration" : {
      "description" : "Host Network Configuration.",
      "properties" : {
        "vmNics" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HostVmnicUplinkConfiguration"
          },
          "description" : "Vmnic-Uplink configuration of the vSphere host"
        },
        "networkProfileName" : {
          "type" : "string",
          "description" : "The network profile associated with the Host"
        }
      }
    },
    "HostVmnicUplinkConfiguration" : {
      "description" : "This specification contains vmnic-uplink network configuration of host in a cluster",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "VmNic ID"
        },
        "vdsName" : {
          "type" : "string",
          "description" : "VDS name"
        },
        "uplink" : {
          "type" : "string",
          "description" : "Uplink of the VDS associated with the vmnic"
        }
      }
    },
    "VdsConfiguration" : {
      "description" : "The VDS network configuration",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "vSphere Distributed Switch name"
        },
        "portGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PortgroupConfig"
          },
          "description" : "List of portgroup configuration associated with the vSphere Distributed Switch"
        },
        "nsxtSwitchConfig" : {
          "$ref" : "#/definitions/NsxtSwitchConfig",
          "description" : "The NSX configuration associated with the vSphere Distributed Switch"
        },
        "inventoryMismatchInfo" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InventoryMismatchInfo"
          },
          "description" : "Inventory mismatch levels"
        },
        "uplinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Uplinks configured on vSphere Distributed Switch"
        },
        "mtu" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The maximum transmission unit (MTU) configured for the uplinks"
        }
      }
    },
    "NsxtSwitchConfig" : {
      "description" : "This specification contains the configurations to be associated with the vSphere Distributed Switch managed by NSX",
      "properties" : {
        "transportZones" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TransportZone"
          },
          "description" : "The list of transport zones to be associated with the vSphere Distributed Switch managed by NSX"
        },
        "hostSwitchOperationalMode" : {
          "type" : "string",
          "description" : "vSphere Distributed Switch name",
          "example" : "One among: STANDARD, ENS, ENS_INTERRUPT"
        }
      }
    },
    "TransportZone" : {
      "required" : [ "transportType" ],
      "description" : "The transport zone to be associated with the vSphere Distributed Switch managed by NSX",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the transport zone"
        },
        "transportType" : {
          "type" : "string",
          "description" : "The type of the transport zone",
          "example" : "One among: VLAN, OVERLAY"
        }
      }
    },
    "BackupLocation" : {
      "required" : [ "directoryPath", "protocol", "server", "port", "username" ],
      "properties" : {
        "directoryPath" : {
          "type" : "string",
          "description" : "Full directory path to save the backup files"
        },
        "password" : {
          "type" : "string",
          "description" : "Backup server password"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Port number for the backup server to connect"
        },
        "protocol" : {
          "type" : "string",
          "example" : "SFTP",
          "description" : "Protocol to be used for transferring files"
        },
        "server" : {
          "type" : "string",
          "description" : "IP address or FQDN  of the backup server"
        },
        "sshFingerprint" : {
          "type" : "string",
          "description" : "SSH fingerprint of the backup server"
        },
        "username" : {
          "type" : "string",
          "description" : "Password for backup server username"
        }
      },
      "description" : "Backup location to backup VCF resources"
    },
    "CredentialsValidation" : {
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Description of the validation"
        },
        "executionStatus" : {
          "type" : "string",
          "example" : "One among: COMPLETED, FAILED, IN_PROGRESS",
          "description" : "Execution status of the validation"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the validation"
        },
        "validationChecks" : {
          "type" : "array",
          "description" : "List of one or more validation checks that are performed as part of the validation",
          "items" : {
            "$ref" : "#/definitions/CredentialValidationCheck"
          }
        }
      },
      "description" : "Represents a validation with a list of one or more validation checks that are performed as part of the validation"
    },
    "HealthSummarySpec" : {
      "properties" : {
        "healthChecks" : {
          "description" : "Sos Health Checks.",
          "$ref" : "#/definitions/HealthChecks"
        },
        "options" : {
          "description" : "Sos options for support health checks.",
          "$ref" : "#/definitions/HealthSummaryOption"
        },
        "scope" : {
          "description" : "Domain and cluster under which logs should be collected.",
          "$ref" : "#/definitions/HealthSummaryScope"
        }
      }
    },
    "LicenseKeyUsage" : {
      "properties" : {
        "licenseUnit" : {
          "type" : "string",
          "example" : "One among: CPUPACKAGE, INSTANCE, VMS, CCU, PLU, DESKTOPVM, SERVERVM, VM, SERVER, CORES, CONCURRENTUSER, NAMEDUSER, CPUCORE",
          "description" : "Units of the license key"
        },
        "remaining" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The remaining/free units of the license key"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total units of the license key"
        },
        "used" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The consumed/used units of the license key"
        }
      },
      "description" : "Defines license key usage"
    },
    "TokenPair" : {
      "properties" : {
        "accessToken" : {
          "type" : "string",
          "description" : "Bearer token that can be used to make public API calls"
        },
        "refreshToken" : {
          "description" : "Refresh token that can be used to request new access token",
          "$ref" : "#/definitions/RefreshToken"
        }
      },
      "description" : "This contains the access token and the refresh token for the user API access."
    },
    "DatastoreCriterion" : {
      "properties" : {
        "arguments" : {
          "type" : "object",
          "description" : "Arguments required for a particular criterion",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the criterion"
        },
        "name" : {
          "type" : "string",
          "example" : "One among: VSAN_REMOTE_DATASTORES",
          "description" : "Name of the criterion for querying datastores"
        }
      },
      "description" : "Represents a criterion for querying the datastores"
    },
    "AdvancedOptions" : {
      "properties" : {
        "evcMode" : {
          "type" : "string",
          "example" : "One among: INTEL_MEROM, INTEL_PENRYN, INTEL_NEALEM, INTEL_WESTMERE, INTEL_SANDYBRIDGE, INTEL_IVYBRIDGE, INTEL_HASWELL, INTEL_BROADWELL, INTEL_SKYLAKE, INTEL_CASCADELAKE, AMD_REV_E, AMD_REV_F, AMD_GREYHOUND_NO3DNOW, AMD_GREYHOUND, AMD_BULLDOZER, AMD_PILEDRIVER, AMD_STREAMROLLER, AMD_ZEN",
          "description" : "EVC mode for new cluster, if needed"
        },
        "highAvailability" : {
          "description" : "High availability settings for the cluster",
          "$ref" : "#/definitions/HighAvailability"
        }
      },
      "description" : "Advanced Options used to add Cluster"
    },
    "EdgeClusterUpdateSpec" : {
      "required" : [ "operation" ],
      "properties" : {
        "edgeClusterExpansionSpec" : {
          "description" : "Parameters required to perform edge cluster expansion, optional otherwise",
          "$ref" : "#/definitions/EdgeClusterExpansionSpec"
        },
        "edgeClusterShrinkageSpec" : {
          "description" : "Parameters required to perform edge cluster shrinkage, optional otherwise",
          "$ref" : "#/definitions/EdgeClusterShrinkageSpec"
        },
        "operation" : {
          "type" : "string",
          "example" : "One among: EXPANSION, SHRINKAGE",
          "description" : "Edge cluster operation Type."
        }
      },
      "description" : "This specification contains the parameters required to perform an update operation on an NSX edge cluster. The nested expansion and shrinkage specifications need to be populated in a mutually exclusive manner"
    },
    "ResourcesLicenseCheckResult" : {
      "properties" : {
        "endTimestamp" : {
          "type" : "string",
          "description" : "Task end timestamp"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the resources license check task"
        },
        "resourceLicensingInfos" : {
          "type" : "array",
          "description" : "List of licensing infos of resources",
          "items" : {
            "$ref" : "#/definitions/ResourceLicensingInfo"
          }
        },
        "startTimestamp" : {
          "type" : "string",
          "description" : "Task start timestamp"
        },
        "status" : {
          "type" : "string",
          "example" : "One among: PENDING, IN_PROGRESS, In Progress, SUCCESSFUL, Successful, FAILED, Failed, CANCELLED, Cancelled, COMPLETED_WITH_WARNING, SKIPPED",
          "description" : "Task status"
        }
      },
      "description" : "Resource License check result"
    },
    "PageOfUpgradablesClusterResource" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of Upgradables Cluster Resource elements included in this page",
          "items" : {
            "$ref" : "#/definitions/UpgradablesClusterResource"
          }
        }
      },
      "description" : "Represents a page of elements of a Upgradables Cluster Resource"
    },
    "DomainRelease" : {
      "required" : [ "targetVersion" ],
      "properties" : {
        "targetVersion" : {
          "type" : "string",
          "description" : "Target version"
        },
        "targetVxRailVersion" : {
          "type" : "string",
          "description" : "Target VxRail version"
        }
      },
      "description" : "Model for domain release."
    },
    "EdgeNodeReference" : {
      "required" : [ "hostName", "id" ],
      "properties" : {
        "hostName" : {
          "type" : "string",
          "description" : "Hostname of the edge node"
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the edge node"
        }
      },
      "description" : "Represents a reference to the edge node"
    },
    "BackupSpec" : {
      "required" : [ "elements" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "List of elements to be backed up",
          "items" : {
            "$ref" : "#/definitions/BackupResource"
          }
        }
      },
      "description" : "Backup Specification"
    },
    "VrealizeProductNode" : {
      "required" : [ "fqdn", "ipAddress" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "example" : "vrealize.node.vrack.vsphere.local",
          "description" : "The Fully Qualified Domain Name for the VMware Aria node (virtual appliance)"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the node"
        },
        "ipAddress" : {
          "type" : "string",
          "example" : "10.0.0.17",
          "description" : "IP Address of VMware Aria product appliance"
        },
        "type" : {
          "type" : "string",
          "example" : "MASTER, REPLICA, DATA, REMOTE_COLLECTOR, WORKER",
          "description" : "The type of the VMware Aria product node",
          "enum" : [ "MASTER", "REPLICA", "DATA", "REMOTE_COLLECTOR", "WORKER" ]
        }
      },
      "description" : "Spec contains information for a VMware Aria product node"
    },
    "SourceDetails" : {
      "required" : [ "groupsBaseDn", "serverEndpoints", "usersBaseDn" ],
      "properties" : {
        "certChain" : {
          "type" : "array",
          "description" : "SSL certificate chain in base64 encoding. This field can be unset only, if all the active directory server endpoints use the LDAP (not LDAPS) protocol",
          "items" : {
            "type" : "string"
          }
        },
        "groupsBaseDn" : {
          "type" : "string",
          "description" : "Base distinguished name for groups"
        },
        "serverEndpoints" : {
          "type" : "array",
          "description" : "Active directory server endpoints. At least one active directory server endpoint must be set",
          "items" : {
            "type" : "string"
          }
        },
        "usersBaseDn" : {
          "type" : "string",
          "description" : "Base distinguished name for users"
        }
      },
      "description" : "Details of the Identity Source"
    },
    "ResourceCertificateSpec" : {
      "properties" : {
        "caCertificate" : {
          "type" : "string",
          "example" : "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----",
          "description" : "CA Certificate"
        },
        "certificateChain" : {
          "type" : "string",
          "example" : "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----",
          "description" : "Certificate Chain"
        },
        "resourceCertificate" : {
          "type" : "string",
          "example" : "-----BEGIN CERTIFICATE-----\nMIIFq...\n-----END CERTIFICATE-----",
          "description" : "Resource Certificate"
        },
        "resourceFqdn" : {
          "type" : "string",
          "example" : "sfo-vc01.rainpole.io",
          "description" : "Resource FQDN"
        },
        "resourceId" : {
          "type" : "string",
          "example" : "BE8A5E04-92A0-43F6-A166-AA041F4327CC",
          "description" : "Resource ID"
        }
      },
      "description" : "This specification contains resource certificate details. Either resourceId or resourceFqdn should be provided. Either certificateChain or both resourceCertificate and caCertificate should be provided."
    },
    "HardwareSupportInfo" : {
      "required" : [ "packages" ],
      "properties" : {
        "packages" : {
          "type" : "object",
          "description" : "Hardware support packages",
          "additionalProperties" : {
            "$ref" : "#/definitions/HardwareSupportPackageInfo"
          }
        }
      },
      "description" : "Hardware support contains base os, components, hardware support, addOn metadata to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "Character" : { },
    "UpgradeCommitSpec" : {
      "properties" : {
        "scheduledTimestamp" : {
          "type" : "string",
          "description" : "Upgrade Scheduled Time"
        },
        "upgradeNow" : {
          "type" : "boolean",
          "description" : "Flag for enabling Upgrade Now. If true, scheduledTimestamp is ignored"
        }
      },
      "description" : "Upgrade Commit Specification"
    },
    "CpuInfo" : {
      "properties" : {
        "total" : {
          "description" : "Total value",
          "$ref" : "#/definitions/FrequencyMetric"
        },
        "used" : {
          "description" : "Used value",
          "$ref" : "#/definitions/FrequencyMetric"
        }
      },
      "description" : "Represents a cpu metric with used and total for a resource"
    },
    "VxRailCustomArrayContext" : {
      "properties" : {
        "arrayAssociationContext" : {
          "description" : "Details that holds the mapping between the custom attributes to the array item",
          "$ref" : "#/definitions/VxRailArrayAssociationContext"
        },
        "simpleAttributes" : {
          "type" : "array",
          "description" : "Collection of simple attributes that contains name, value and type for each attribute.",
          "items" : {
            "$ref" : "#/definitions/VxRailContext"
          }
        }
      },
      "description" : "Contains the details of simple/complex custom attribute on an array item object."
    },
    "BaseImageDetails" : {
      "required" : [ "displayName", "displayVersion" ],
      "properties" : {
        "displayName" : {
          "type" : "string",
          "example" : "7.0.0-0.0.30340198",
          "description" : "BaseImage display name"
        },
        "displayVersion" : {
          "type" : "string",
          "description" : "BaseImage display version"
        },
        "releaseDate" : {
          "description" : "BaseImage release date",
          "$ref" : "#/definitions/Calendar"
        }
      },
      "description" : "BaseImage contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "Resource" : {
      "required" : [ "resourceId", "type" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "example" : "sfo-vc01.rainpole.io",
          "description" : "Resource FQDN"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the resource"
        },
        "resourceId" : {
          "type" : "string",
          "example" : "BE8A5E04-92A0-43F6-A166-AA041F4327CC",
          "description" : "Resource ID"
        },
        "sans" : {
          "type" : "array",
          "example" : "sfo-vc01.rainpole.io",
          "description" : "Subject alternative name(s)",
          "items" : {
            "type" : "string"
          }
        },
        "type" : {
          "type" : "string",
          "example" : "One among: SDDC_MANAGER, PSC, VCENTER, NSX_MANAGER, NSXT_MANAGER, VRA, VRLI, VROPS, VRSLCM, VXRAIL_MANAGER",
          "description" : "Resource type"
        }
      },
      "description" : "Represents the resource in the system"
    },
    "ClusterNetworkConfigurationQueryResponse" : {
      "properties" : {
        "queryInfo" : {
          "description" : "Query info",
          "$ref" : "#/definitions/QueryInfo"
        },
        "result" : {
          "description" : "Query result",
          "$ref" : "#/definitions/PageOfClusterNetworkConfiguration"
        }
      },
      "description" : "Represents the cluster network configuration query response."
    },
    "TagAssignmentResult" : {
      "properties" : {
        "defaultErrorMessages" : {
          "type" : "array",
          "description" : "Default Error messages for Assign/Detach Tags operation",
          "items" : {
            "type" : "string"
          }
        },
        "success" : {
          "type" : "boolean",
          "description" : "Success value of Assign/Detach Tags operation"
        }
      },
      "description" : "Represents a Tag Assignment Result"
    },
    "PscSpec" : {
      "required" : [ "adminUserSsoPassword" ],
      "properties" : {
        "adminUserSsoPassword" : {
          "type" : "string",
          "description" : "Admin user sso passwordPassword needs to be a strong password with at least one Uppercase alphabet, one lowercase alphabet, one digit and one special character specified in braces [!$%^] and 8-20 characters in length,and 3 maximum identical adjacent characters!",
          "minLength" : 8,
          "maxLength" : 20
        },
        "pscSsoSpec" : {
          "description" : "PSC SSO Domain",
          "$ref" : "#/definitions/PscSsoSpec"
        }
      },
      "description" : "Spec contains parameters for deployment/configuration of Platform Services Controller"
    },
    "PageOfstring" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "type" : "string"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ProxyConfiguration" : {
      "properties" : {
        "host" : {
          "type" : "string",
          "example" : "10.0.0.250",
          "description" : "IP address/FQDN of proxy server"
        },
        "isConfigured" : {
          "type" : "boolean",
          "description" : "Is proxy configured"
        },
        "isEnabled" : {
          "type" : "boolean",
          "description" : "Is proxy enabled"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "3128",
          "description" : "Port of proxy server"
        }
      },
      "description" : "Proxy Configuration"
    },
    "NsxTClusterReference" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of the NSX cluster"
        },
        "vip" : {
          "type" : "string",
          "description" : "VIP (Virtual IP Address) of the NSX cluster"
        },
        "vipFqdn" : {
          "type" : "string",
          "description" : "FQDN for VIP of the NSX cluster"
        }
      },
      "description" : "Represents an NSX Cluster reference"
    },
    "ClusterComplianceCleanupSpec" : {
      "description" : "This specification contains parameters required to cleanup compliance results of a Cluster before transition to vSphere Lifecycle Manager Images"
    },
    "NetworkDetailsSpec" : {
      "required" : [ "ipAddress" ],
      "properties" : {
        "dnsName" : {
          "type" : "string",
          "description" : "DNS name of the virtual machine, e.g., vc-1.domain1.vsphere.local"
        },
        "gateway" : {
          "type" : "string",
          "description" : "IPv4 gateway the VM can use to connect to the outside world"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "IPv4 address of the virtual machine"
        },
        "subnetMask" : {
          "type" : "string",
          "description" : "Subnet mask"
        }
      },
      "description" : "This specification contains network parameters required for new virtual machines being added to a workload domain"
    },
    "ResourceLicensingInfo" : {
      "required" : [ "resourceInfo" ],
      "properties" : {
        "productInfo" : {
          "description" : "Product info and License Key",
          "$ref" : "#/definitions/ProductInfo"
        },
        "resourceInfo" : {
          "description" : "Resource info",
          "$ref" : "#/definitions/ResourceInfo"
        }
      },
      "description" : "Resource Licensing Info"
    },
    "User" : {
      "required" : [ "name", "role", "type" ],
      "properties" : {
        "apiKey" : {
          "type" : "string",
          "description" : "The API key of the user"
        },
        "creationTimestamp" : {
          "type" : "string",
          "description" : "The timestamp at which the user was created"
        },
        "domain" : {
          "type" : "string",
          "description" : "The domain of the user"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the user"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the user"
        },
        "role" : {
          "description" : "The role of the user",
          "$ref" : "#/definitions/RoleReference"
        },
        "type" : {
          "type" : "string",
          "example" : "One among: USER, GROUP, SERVICE",
          "description" : "The type of the user"
        }
      },
      "description" : "Represents user and its attributes"
    },
    "Upgradable" : {
      "properties" : {
        "bundleId" : {
          "type" : "string",
          "description" : "Bundle ID"
        },
        "bundleType" : {
          "type" : "string",
          "description" : "Bundle Type"
        },
        "resource" : {
          "description" : "Resource which is upgradable",
          "$ref" : "#/definitions/Resource"
        },
        "softwareComponents" : {
          "type" : "array",
          "description" : "Software Components which are Upgradable",
          "items" : {
            "$ref" : "#/definitions/SoftwareComponent"
          }
        },
        "status" : {
          "type" : "string",
          "description" : "Upgradable Status"
        }
      },
      "description" : "Upgradable represents the upgrade capability of resources. It contains the bundle(using what), resource(on which) and its associated resources/software components that can be upgraded."
    },
    "CheckSetQueryInput" : {
      "properties" : {
        "checkSetType" : {
          "type" : "string",
          "example" : "UPGRADE",
          "description" : "Type of the check sets to query for. e.g. 'UPGRADE'"
        },
        "domains" : {
          "type" : "array",
          "description" : "List of domain resources to query check-sets of the given type for",
          "items" : {
            "$ref" : "#/definitions/CheckSetQueryDomainResources"
          }
        }
      },
      "description" : "Input spec to query the check-sets for a given type and set of domain resources"
    },
    "ClusterNetworkConfigurationCriterion" : {
      "properties" : {
        "arguments" : {
          "type" : "object",
          "description" : "Arguments required for a particular criterion",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the criterion"
        },
        "name" : {
          "type" : "string",
          "example" : "One among: VCENTER_NSXT_NETWORK_CONFIG, VCENTER_NETWORK_CONFIG_SUMMARY, NSX_NETWORK_CONFIG_PREVIEW_POST_DRIFT",
          "description" : "Name of the criterion"
        }
      },
      "description" : "Represents criterion for querying the network properties of a cluster."
    },
    "ClusterCreationSpec" : {
      "required" : [ "computeSpec", "domainId" ],
      "properties" : {
        "computeSpec" : {
          "description" : "Cluster specification to be added to the domain ",
          "$ref" : "#/definitions/ComputeSpec"
        },
        "domainId" : {
          "type" : "string",
          "description" : "ID of the domain to which the clusters will be added"
        },
        "deployWithoutLicenseKeys" : {
          "type" : "boolean",
          "description" : "Enable deployment of the cluster without licensing the infrastructure."
        }
      },
      "description" : "This specification contains the parameters required to add a cluster to an existing workload Domain"
    },
    "ResourceDomainInfo" : {
      "properties" : {
        "domainId" : {
          "type" : "string",
          "description" : "Id of the domain"
        },
        "domainName" : {
          "type" : "string",
          "description" : "Name of the domain"
        },
        "domainType" : {
          "type" : "string",
          "description" : "Type of the domain",
          "enum" : [ "MANAGEMENT", "VI" ]
        }
      },
      "description" : "Information about the domain the resource belongs to"
    },
    "PersonalityUploadSpecRaw" : {
      "required" : [ "personalityInfoJSONFilePath", "personalityJSONFilePath", "personalityZIPFilePath" ],
      "properties" : {
        "personalityISOFilePath" : {
          "type" : "string",
          "description" : "Personality ISO File Path"
        },
        "personalityInfoJSONFilePath" : {
          "type" : "string",
          "description" : "Personality Info JSON File Path"
        },
        "personalityJSONFilePath" : {
          "type" : "string",
          "description" : "Personality JSON File Path"
        },
        "personalityZIPFilePath" : {
          "type" : "string",
          "description" : "Personality Zip File Path"
        }
      },
      "description" : "Personality upload specification for uploading the personality from raw files exported from avCenter cluster. This mode of uploading personality is useful when the source vCenter cluster is outside the target VCF deployment."
    },
    "PrecheckSpec" : {
      "required" : [ "resources" ],
      "properties" : {
        "bundleId" : {
          "type" : "string",
          "description" : " If specified, indicate the bundle applicability in the result"
        },
        "mode" : {
          "type" : "string",
          "description" : " If specified, indicates the mode of the execution. Supported modes are UPGRADE and RECOVERY. UPGRADE is default mode. Specify RECOVERY for the Inventory Consistency Checks"
        },
        "resources" : {
          "type" : "array",
          "description" : "List of resources for Precheck supported type DOMAIN, CLUSTER",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        }
      },
      "description" : "Precheck Specification. This specification gets used in the Precheck API"
    },
    "VropsNode" : {
      "required" : [ "fqdn", "ipAddress", "status" ],
      "properties" : {
        "fqdn" : {
          "type" : "string",
          "example" : "vrealize.node.vrack.vsphere.local",
          "description" : "The Fully Qualified Domain Name for the VMware Aria node (virtual appliance)"
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the node"
        },
        "ipAddress" : {
          "type" : "string",
          "example" : "10.0.0.17",
          "description" : "IP Address of VMware Aria product appliance"
        },
        "password" : {
          "type" : "string",
          "description" : "The password for a root user of VMware Aria appliance"
        },
        "status" : {
          "type" : "string",
          "example" : "ACTIVE",
          "description" : "The status of the VMware Aria product node"
        },
        "type" : {
          "type" : "string",
          "example" : "MASTER, REPLICA, DATA, REMOTE_COLLECTOR, WORKER",
          "description" : "The type of the VMware Aria product node",
          "enum" : [ "MASTER", "REPLICA", "DATA", "REMOTE_COLLECTOR", "WORKER" ]
        },
        "username" : {
          "type" : "string",
          "example" : "user",
          "description" : "The username for a root user of VMware Aria appliance"
        }
      },
      "description" : "Spec contains information for a VMware Aria product node"
    },
    "ClusterExpansionSpec" : {
      "required" : [ "hostSpecs" ],
      "properties" : {
        "forceHostAdditionInPresenceofDeadHosts" : {
          "type" : "boolean",
          "description" : "Use to add host to a cluster with dead host(s). Bypasses validation of disconnected hosts and vSAN cluster health. Review recovery plan VMware Support before using. False if omitted. This property is deprecated and it has no effect when using it."
        },
        "deployWithoutLicenseKeys" : {
          "type" : "boolean",
          "description" : "Enable expansion of the cluster without licensing the new hosts."
        },
        "hostSpecs" : {
          "type" : "array",
          "description" : "List of vSphere host information from the free pool to consume in the workload domain",
          "items" : {
            "$ref" : "#/definitions/HostSpec"
          }
        },
        "interRackExpansion" : {
          "type" : "boolean",
          "description" : "Is inter-rack cluster(true for L2 non-uniform and L3 : At least one of management, uplink, Edge and host TEP networks is different for hosts of the cluster, false for L2 uniform :  All hosts in cluster have identical management, uplink, Edge and host TEP networks) expansion. Required, only if Cluster contains NSX Edge Cluster"
        },
        "networkSpec" : {
          "description" : "Network configuration for the cluster",
          "$ref" : "#/definitions/ClusterExpansionNetworkSpec"
        },
        "skipThumbprintValidation" : {
          "type" : "boolean",
          "description" : "Skip thumbprint validation for ESXi hosts during add host operation. \nThis property is deprecated."
        },
        "vsanNetworkSpecs" : {
          "type" : "array",
          "description" : "vSAN Network Pool Spec",
          "items" : {
            "$ref" : "#/definitions/VSANNetworkSpec"
          }
        },
        "witnessSpec" : {
          "description" : "Witness host Info",
          "$ref" : "#/definitions/WitnessSpec"
        },
        "witnessTrafficSharedWithVsanTraffic" : {
          "type" : "boolean",
          "description" : "Witness traffic to be shared with vSAN traffic"
        }
      },
      "description" : "This specification contains the parameters required to add one or more vSphere hosts to an existing cluster in a workload domain"
    },
    "RootCaCerts" : {
      "properties" : {
        "alias" : {
          "type" : "string",
          "description" : "Certificate alias"
        },
        "certChain" : {
          "type" : "array",
          "description" : "List of Base64 encoded certificates",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Spec contains Root Certificate Authority parameters"
    },
    "Release" : {
      "required" : [ "bom", "description", "minCompatibleVcfVersion", "product", "releaseDate", "version" ],
      "properties" : {
        "bom" : {
          "type" : "array",
          "description" : "Release bill of materials",
          "items" : {
            "$ref" : "#/definitions/ProductVersion"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Release description with all major features. "
        },
        "eol" : {
          "type" : "string",
          "description" : "Release eol information e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format"
        },
        "isApplicable" : {
          "type" : "boolean",
          "description" : "[Deprecated] Whether bundle is applicable or not."
        },
        "minCompatibleVcfVersion" : {
          "type" : "string",
          "description" : "Minimum compatible VCF version, used to represent compatibility of SDDC Manager and VMware BOM components"
        },
        "notApplicableReason" : {
          "type" : "string",
          "description" : "[Deprecated] Incompatibility reason for not applicable."
        },
        "patchBundles" : {
          "type" : "array",
          "description" : "List of patch bundles in this release",
          "items" : {
            "$ref" : "#/definitions/PatchBundle"
          }
        },
        "product" : {
          "type" : "string",
          "description" : "Name of the product e.g. \"VCF\""
        },
        "releaseDate" : {
          "type" : "string",
          "description" : "Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format"
        },
        "sku" : {
          "type" : "array",
          "description" : "Release sku specific patch and bill of materials",
          "items" : {
            "$ref" : "#/definitions/SkuBomDetails"
          }
        },
        "updates" : {
          "type" : "array",
          "description" : "Collection of release updates",
          "items" : {
            "$ref" : "#/definitions/ReleaseUpdate"
          }
        },
        "version" : {
          "type" : "string",
          "description" : "Version of the release"
        }
      },
      "description" : "Model for releases with their description and product version"
    },
    "ClusterTransitionSpec" : {
      "description" : "This specification contains parameters required to transition a Cluster to vSphere Lifecycle Manager Images"
    },
    "Bundle" : {
      "required" : [ "downloadStatus", "type" ],
      "properties" : {
        "applicabilityOrder" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1",
          "description" : "Bundle Applicability Order"
        },
        "applicabilityStatus" : {
          "type" : "string",
          "example" : "One among: SUCCESS, IN_PROGRESS, FAILED, AVAILABLE, PENDING",
          "description" : "Bundle Applicability Status"
        },
        "components" : {
          "type" : "array",
          "description" : "Bundle Components",
          "items" : {
            "$ref" : "#/definitions/BundleComponent"
          }
        },
        "description" : {
          "type" : "string",
          "description" : "Bundle Description"
        },
        "downloadStatus" : {
          "type" : "string",
          "example" : "One among: PENDING, SCHEDULED, IN_PROGRESS, SUCCESSFUL, FAILED, RECALLED",
          "description" : "Bundle Download Status"
        },
        "id" : {
          "type" : "string",
          "description" : "Bundle ID"
        },
        "isCompliant" : {
          "type" : "boolean",
          "description" : "Is compliant with the current VCF version"
        },
        "isCumulative" : {
          "type" : "boolean",
          "description" : "Is Bundle Cumulative"
        },
        "isPartiallyUpgraded" : {
          "type" : "boolean",
          "example" : "true",
          "description" : "Is Bundle partially upgraded"
        },
        "releasedDate" : {
          "type" : "string",
          "description" : "Bundle Release Date"
        },
        "severity" : {
          "type" : "string",
          "example" : "One among: CRITICAL, IMPORTANT, MODERATE, LOW",
          "description" : "Bundle Severity"
        },
        "sizeMB" : {
          "type" : "number",
          "format" : "double",
          "description" : "Bundle Size in MB"
        },
        "type" : {
          "type" : "string",
          "example" : "One among: SDDC_MANAGER, VMWARE_SOFTWARE, VXRAIL",
          "description" : "Bundle Type"
        },
        "vendor" : {
          "type" : "string",
          "description" : "Bundle Vendor"
        },
        "version" : {
          "type" : "string",
          "description" : "Bundle Version"
        }
      },
      "description" : "Bundle contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain."
    },
    "HealthSummaryIncludeItems" : {
      "properties" : {
        "precheckReport" : {
          "type" : "boolean",
          "description" : "Collect VCF LCM Upgrade Pre-check Reports, Default value is False"
        },
        "summaryReport" : {
          "type" : "boolean",
          "description" : "Collect Vcf Summary Reports"
        }
      }
    },
    "PageOfVrslcm" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Vrslcm"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "AutoRotateCredentialPolicyInputSpec" : {
      "properties" : {
        "enableAutoRotatePolicy" : {
          "type" : "boolean",
          "description" : " Enable or disable  auto rotate policy"
        },
        "frequencyInDays" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Frequency in days"
        }
      },
      "description" : "Represents password auto rotate config details"
    },
    "ClusterSpec" : {
      "required" : [ "datastoreSpec", "hostSpecs", "name", "networkSpec" ],
      "properties" : {
        "advancedOptions" : {
          "description" : "Advanced options used for cluster creation",
          "$ref" : "#/definitions/AdvancedOptions"
        },
        "clusterImageId" : {
          "type" : "string",
          "description" : "ID of the Cluster Image to be used with the Cluster"
        },
        "datastoreSpec" : {
          "description" : "Cluster storage configuration; e.g. VSAN, NFS, vVol(nfs/iscsi/fc), vSAN Remote",
          "$ref" : "#/definitions/DatastoreSpec"
        },
        "hostSpecs" : {
          "type" : "array",
          "description" : "List of vSphere host information from the free pool to consume in the workload domain",
          "items" : {
            "$ref" : "#/definitions/HostSpec"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the new cluster that will be added to the specified workload domain"
        },
        "networkSpec" : {
          "description" : "Network configuration for the cluster",
          "$ref" : "#/definitions/NetworkSpec"
        },
        "skipThumbprintValidation" : {
          "type" : "boolean",
          "description" : "Skip thumbprint validation for ESXi and VxRail Manager during add cluster/host operation. \nThis property is deprecated."
        },
        "vxRailDetails" : {
          "description" : "Contains the VxRail Manager details",
          "$ref" : "#/definitions/VxRailDetails"
        }
      },
      "description" : "This specification contains the parameters required to add a cluster to a workload domain"
    },
    "PageOfTag" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "ClusterExpansionNsxSpec" : {
      "properties" : {
        "ipAddressPoolsSpec" : {
          "type" : "array",
          "description" : "The IP address pools specification",
          "items" : {
            "$ref" : "#/definitions/IpAddressPoolSpec"
          }
        },
        "uplinkProfiles" : {
          "type" : "array",
          "description" : "The list of uplink profile specifications.",
          "items" : {
            "$ref" : "#/definitions/UplinkProfile"
          }
        }
      },
      "description" : "This specification contains NSX configuration for cluster expansion"
    },
    "ClusterProductSpec" : {
      "required" : [ "adminCredentials", "loadBalancerFqdn", "nodes", "version" ],
      "properties" : {
        "adminCredentials" : {
          "description" : "The credentials of the VMware Aria product Admin",
          "$ref" : "#/definitions/CredentialsSpec"
        },
        "certificateChain" : {
          "type" : "string",
          "description" : "The certificate chain of the VMware Aria product."
        },
        "id" : {
          "type" : "string",
          "description" : "The ID of the product"
        },
        "loadBalancerFqdn" : {
          "type" : "string",
          "description" : "Fully Qualified Domain Name for the VMware Aria product load balancer "
        },
        "nodes" : {
          "type" : "array",
          "description" : "The nodes of the VMware Aria product instance",
          "items" : {
            "$ref" : "#/definitions/ProductNode"
          }
        },
        "version" : {
          "type" : "string",
          "description" : "The version of the VMware Aria product instance"
        }
      },
      "description" : "Spec contains information for a VMware Aria product"
    },
    "SegmentSpec" : {
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the NSX segment"
        },
        "vlanId" : {
          "type" : "string",
          "description" : "The VLAN Id to be used by the segment"
        }
      },
      "description" : "This specification contains the NSX segment configuration that will be used by the Isolated WLD appliance VMs."
    },
    "PageOfUpgradable" : {
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The list of elements included in this page",
          "items" : {
            "$ref" : "#/definitions/Upgradable"
          }
        },
        "pageMetadata" : {
          "description" : "Pageable elements pagination metadata information",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "Represents a page of elements of a single type"
    },
    "BackupRetentionPolicy" : {
      "required" : [ "numberOfMostRecentBackups" ],
      "properties" : {
        "numberOfDaysOfDailyBackups" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "20",
          "description" : "This attribute controls the number of daily backup files to retain, measured in days. Range 0 to 30 days. The system will filter the existing backup files, and retain one for every day for the specified number of days, counting back from the most recent backup."
        },
        "numberOfDaysOfHourlyBackups" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "10",
          "description" : "This attribute controls the number of hourly backup files to retain, measured in days. Range 0 to 14 days. The system will filter the existing backup files, and retain one for every hour for the specified number of days, counting back from the most recent backup."
        },
        "numberOfMostRecentBackups" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "15",
          "description" : "This attribute controls the number of recent backup files to retain. Range 1 to 600 backup files."
        }
      },
      "description" : "Backup retention policy for SDDC Manager comprising three attributes. Backup files are deleted if they do not satisfy any of the three attributes."
    }
  }
}