// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package ceip

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// SetCEIPStatusReader is a Reader for the SetCEIPStatus structure.
type SetCEIPStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetCEIPStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetCEIPStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewSetCEIPStatusAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetCEIPStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewSetCEIPStatusConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSetCEIPStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/system/ceip] setCeipStatus", response, response.Code())
	}
}

// NewSetCEIPStatusOK creates a SetCEIPStatusOK with default headers values
func NewSetCEIPStatusOK() *SetCEIPStatusOK {
	return &SetCEIPStatusOK{}
}

/*
SetCEIPStatusOK describes a response with status code 200, with default header values.

OK
*/
type SetCEIPStatusOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this set Ceip status o k response has a 2xx status code
func (o *SetCEIPStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set Ceip status o k response has a 3xx status code
func (o *SetCEIPStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set Ceip status o k response has a 4xx status code
func (o *SetCEIPStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this set Ceip status o k response has a 5xx status code
func (o *SetCEIPStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this set Ceip status o k response a status code equal to that given
func (o *SetCEIPStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the set Ceip status o k response
func (o *SetCEIPStatusOK) Code() int {
	return 200
}

func (o *SetCEIPStatusOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] setCeipStatusOK  %+v", 200, o.Payload)
}

func (o *SetCEIPStatusOK) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] setCeipStatusOK  %+v", 200, o.Payload)
}

func (o *SetCEIPStatusOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *SetCEIPStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetCEIPStatusAccepted creates a SetCEIPStatusAccepted with default headers values
func NewSetCEIPStatusAccepted() *SetCEIPStatusAccepted {
	return &SetCEIPStatusAccepted{}
}

/*
SetCEIPStatusAccepted describes a response with status code 202, with default header values.

Accepted
*/
type SetCEIPStatusAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this set Ceip status accepted response has a 2xx status code
func (o *SetCEIPStatusAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set Ceip status accepted response has a 3xx status code
func (o *SetCEIPStatusAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set Ceip status accepted response has a 4xx status code
func (o *SetCEIPStatusAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this set Ceip status accepted response has a 5xx status code
func (o *SetCEIPStatusAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this set Ceip status accepted response a status code equal to that given
func (o *SetCEIPStatusAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the set Ceip status accepted response
func (o *SetCEIPStatusAccepted) Code() int {
	return 202
}

func (o *SetCEIPStatusAccepted) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] setCeipStatusAccepted  %+v", 202, o.Payload)
}

func (o *SetCEIPStatusAccepted) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] setCeipStatusAccepted  %+v", 202, o.Payload)
}

func (o *SetCEIPStatusAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *SetCEIPStatusAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetCEIPStatusBadRequest creates a SetCEIPStatusBadRequest with default headers values
func NewSetCEIPStatusBadRequest() *SetCEIPStatusBadRequest {
	return &SetCEIPStatusBadRequest{}
}

/*
SetCEIPStatusBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SetCEIPStatusBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this set Ceip status bad request response has a 2xx status code
func (o *SetCEIPStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set Ceip status bad request response has a 3xx status code
func (o *SetCEIPStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set Ceip status bad request response has a 4xx status code
func (o *SetCEIPStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this set Ceip status bad request response has a 5xx status code
func (o *SetCEIPStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this set Ceip status bad request response a status code equal to that given
func (o *SetCEIPStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the set Ceip status bad request response
func (o *SetCEIPStatusBadRequest) Code() int {
	return 400
}

func (o *SetCEIPStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] setCeipStatusBadRequest  %+v", 400, o.Payload)
}

func (o *SetCEIPStatusBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] setCeipStatusBadRequest  %+v", 400, o.Payload)
}

func (o *SetCEIPStatusBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetCEIPStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetCEIPStatusConflict creates a SetCEIPStatusConflict with default headers values
func NewSetCEIPStatusConflict() *SetCEIPStatusConflict {
	return &SetCEIPStatusConflict{}
}

/*
SetCEIPStatusConflict describes a response with status code 409, with default header values.

The request could not be completed due to a conflict with the current state
*/
type SetCEIPStatusConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this set Ceip status conflict response has a 2xx status code
func (o *SetCEIPStatusConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set Ceip status conflict response has a 3xx status code
func (o *SetCEIPStatusConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set Ceip status conflict response has a 4xx status code
func (o *SetCEIPStatusConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this set Ceip status conflict response has a 5xx status code
func (o *SetCEIPStatusConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this set Ceip status conflict response a status code equal to that given
func (o *SetCEIPStatusConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the set Ceip status conflict response
func (o *SetCEIPStatusConflict) Code() int {
	return 409
}

func (o *SetCEIPStatusConflict) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] setCeipStatusConflict  %+v", 409, o.Payload)
}

func (o *SetCEIPStatusConflict) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] setCeipStatusConflict  %+v", 409, o.Payload)
}

func (o *SetCEIPStatusConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetCEIPStatusConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetCEIPStatusInternalServerError creates a SetCEIPStatusInternalServerError with default headers values
func NewSetCEIPStatusInternalServerError() *SetCEIPStatusInternalServerError {
	return &SetCEIPStatusInternalServerError{}
}

/*
SetCEIPStatusInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type SetCEIPStatusInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this set Ceip status internal server error response has a 2xx status code
func (o *SetCEIPStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set Ceip status internal server error response has a 3xx status code
func (o *SetCEIPStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set Ceip status internal server error response has a 4xx status code
func (o *SetCEIPStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this set Ceip status internal server error response has a 5xx status code
func (o *SetCEIPStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this set Ceip status internal server error response a status code equal to that given
func (o *SetCEIPStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the set Ceip status internal server error response
func (o *SetCEIPStatusInternalServerError) Code() int {
	return 500
}

func (o *SetCEIPStatusInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] setCeipStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *SetCEIPStatusInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] setCeipStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *SetCEIPStatusInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetCEIPStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
