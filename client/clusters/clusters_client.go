// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddDatastoreToCluster(params *AddDatastoreToClusterParams, opts ...ClientOption) (*AddDatastoreToClusterOK, *AddDatastoreToClusterAccepted, error)

	AssignTagsToCluster(params *AssignTagsToClusterParams, opts ...ClientOption) (*AssignTagsToClusterOK, error)

	CreateCluster(params *CreateClusterParams, opts ...ClientOption) (*CreateClusterOK, *CreateClusterAccepted, error)

	DeleteCluster(params *DeleteClusterParams, opts ...ClientOption) (*DeleteClusterOK, *DeleteClusterAccepted, error)

	GetCluster(params *GetClusterParams, opts ...ClientOption) (*GetClusterOK, error)

	GetClusterDatastores(params *GetClusterDatastoresParams, opts ...ClientOption) (*GetClusterDatastoresOK, error)

	GetClusterNetworkConfiguration(params *GetClusterNetworkConfigurationParams, opts ...ClientOption) (*GetClusterNetworkConfigurationOK, error)

	GetClusterNetworkConfigurationCriteria(params *GetClusterNetworkConfigurationCriteriaParams, opts ...ClientOption) (*GetClusterNetworkConfigurationCriteriaOK, error)

	GetClusterNetworkConfigurationQueryResponse(params *GetClusterNetworkConfigurationQueryResponseParams, opts ...ClientOption) (*GetClusterNetworkConfigurationQueryResponseOK, error)

	GetClusterTagManagerURL(params *GetClusterTagManagerURLParams, opts ...ClientOption) (*GetClusterTagManagerURLOK, error)

	GetClusters(params *GetClustersParams, opts ...ClientOption) (*GetClustersOK, error)

	GetDatastoreCriterion(params *GetDatastoreCriterionParams, opts ...ClientOption) (*GetDatastoreCriterionOK, error)

	GetDatastoreQueryResponse(params *GetDatastoreQueryResponseParams, opts ...ClientOption) (*GetDatastoreQueryResponseOK, error)

	GetDatastoresCriteria(params *GetDatastoresCriteriaParams, opts ...ClientOption) (*GetDatastoresCriteriaOK, error)

	GetHostCriteria(params *GetHostCriteriaParams, opts ...ClientOption) (*GetHostCriteriaOK, error)

	GetHostCriterion(params *GetHostCriterionParams, opts ...ClientOption) (*GetHostCriterionOK, error)

	GetHostQueryResponse(params *GetHostQueryResponseParams, opts ...ClientOption) (*GetHostQueryResponseOK, error)

	GetTagAssignableForCluster(params *GetTagAssignableForClusterParams, opts ...ClientOption) (*GetTagAssignableForClusterOK, error)

	GetTagsAssignedToCluster(params *GetTagsAssignedToClusterParams, opts ...ClientOption) (*GetTagsAssignedToClusterOK, error)

	GetTagsAssignedToClusters(params *GetTagsAssignedToClustersParams, opts ...ClientOption) (*GetTagsAssignedToClustersOK, error)

	GetVdses(params *GetVdsesParams, opts ...ClientOption) (*GetVdsesOK, error)

	ImportVdsToInventory(params *ImportVdsToInventoryParams, opts ...ClientOption) (*ImportVdsToInventoryAccepted, error)

	PostDatastoreQuery(params *PostDatastoreQueryParams, opts ...ClientOption) (*PostDatastoreQueryOK, error)

	PostHostQuery(params *PostHostQueryParams, opts ...ClientOption) (*PostHostQueryOK, error)

	RemoveDatastoreFromCluster(params *RemoveDatastoreFromClusterParams, opts ...ClientOption) (*RemoveDatastoreFromClusterOK, *RemoveDatastoreFromClusterAccepted, error)

	RemoveTagsFromCluster(params *RemoveTagsFromClusterParams, opts ...ClientOption) (*RemoveTagsFromClusterOK, error)

	UpdateCluster(params *UpdateClusterParams, opts ...ClientOption) (*UpdateClusterOK, *UpdateClusterAccepted, error)

	ValidateClusterCreationSpec(params *ValidateClusterCreationSpecParams, opts ...ClientOption) (*ValidateClusterCreationSpecOK, error)

	ValidateClusterUpdateSpec(params *ValidateClusterUpdateSpecParams, opts ...ClientOption) (*ValidateClusterUpdateSpecOK, error)

	ValidateVSANRemoteDatastoreSpec(params *ValidateVSANRemoteDatastoreSpecParams, opts ...ClientOption) (*ValidateVSANRemoteDatastoreSpecOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddDatastoreToCluster mounts a datastore to a cluster
*/
func (a *Client) AddDatastoreToCluster(params *AddDatastoreToClusterParams, opts ...ClientOption) (*AddDatastoreToClusterOK, *AddDatastoreToClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDatastoreToClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addDatastoreToCluster",
		Method:             "POST",
		PathPattern:        "/v1/clusters/{id}/datastores",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDatastoreToClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddDatastoreToClusterOK:
		return value, nil, nil
	case *AddDatastoreToClusterAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssignTagsToCluster assigns tags to cluster
*/
func (a *Client) AssignTagsToCluster(params *AssignTagsToClusterParams, opts ...ClientOption) (*AssignTagsToClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignTagsToClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignTagsToCluster",
		Method:             "PUT",
		PathPattern:        "/v1/clusters/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignTagsToClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignTagsToClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignTagsToCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCluster creates a cluster and add to an existing domain
*/
func (a *Client) CreateCluster(params *CreateClusterParams, opts ...ClientOption) (*CreateClusterOK, *CreateClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCluster",
		Method:             "POST",
		PathPattern:        "/v1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateClusterOK:
		return value, nil, nil
	case *CreateClusterAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCluster deletes a cluster from a domain if it has been previously initialized for deletion
*/
func (a *Client) DeleteCluster(params *DeleteClusterParams, opts ...ClientOption) (*DeleteClusterOK, *DeleteClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCluster",
		Method:             "DELETE",
		PathPattern:        "/v1/clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteClusterOK:
		return value, nil, nil
	case *DeleteClusterAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCluster gets a cluster by its ID
*/
func (a *Client) GetCluster(params *GetClusterParams, opts ...ClientOption) (*GetClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCluster",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterDatastores gets the list of all datastores associated with the cluster
*/
func (a *Client) GetClusterDatastores(params *GetClusterDatastoresParams, opts ...ClientOption) (*GetClusterDatastoresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterDatastoresParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterDatastores",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/datastores",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterDatastoresReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterDatastoresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterDatastores: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterNetworkConfiguration gets cluster network configuration
*/
func (a *Client) GetClusterNetworkConfiguration(params *GetClusterNetworkConfigurationParams, opts ...ClientOption) (*GetClusterNetworkConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterNetworkConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterNetworkConfiguration",
		Method:             "POST",
		PathPattern:        "/v1/clusters/{id}/network/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterNetworkConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterNetworkConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterNetworkConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterNetworkConfigurationCriteria gets cluster network configuration criteria
*/
func (a *Client) GetClusterNetworkConfigurationCriteria(params *GetClusterNetworkConfigurationCriteriaParams, opts ...ClientOption) (*GetClusterNetworkConfigurationCriteriaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterNetworkConfigurationCriteriaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterNetworkConfigurationCriteria",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/network/criteria",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterNetworkConfigurationCriteriaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterNetworkConfigurationCriteriaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterNetworkConfigurationCriteria: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterNetworkConfigurationQueryResponse gets cluster network configuration query response
*/
func (a *Client) GetClusterNetworkConfigurationQueryResponse(params *GetClusterNetworkConfigurationQueryResponseParams, opts ...ClientOption) (*GetClusterNetworkConfigurationQueryResponseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterNetworkConfigurationQueryResponseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterNetworkConfigurationQueryResponse",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/network/queries/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterNetworkConfigurationQueryResponseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterNetworkConfigurationQueryResponseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterNetworkConfigurationQueryResponse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterTagManagerURL gets cluster tag manager Url
*/
func (a *Client) GetClusterTagManagerURL(params *GetClusterTagManagerURLParams, opts ...ClientOption) (*GetClusterTagManagerURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterTagManagerURLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterTagManagerUrl",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/tags/tag-manager",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterTagManagerURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterTagManagerURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterTagManagerUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusters retrieves a list of clusters
*/
func (a *Client) GetClusters(params *GetClustersParams, opts ...ClientOption) (*GetClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusters",
		Method:             "GET",
		PathPattern:        "/v1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDatastoreCriterion gets a criterion to query for datastore
*/
func (a *Client) GetDatastoreCriterion(params *GetDatastoreCriterionParams, opts ...ClientOption) (*GetDatastoreCriterionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatastoreCriterionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatastoreCriterion",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/datastores/criteria/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatastoreCriterionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatastoreCriterionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatastoreCriterion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDatastoreQueryResponse gets datastore query response
*/
func (a *Client) GetDatastoreQueryResponse(params *GetDatastoreQueryResponseParams, opts ...ClientOption) (*GetDatastoreQueryResponseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatastoreQueryResponseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatastoreQueryResponse",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{clusterId}/datastores/queries/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatastoreQueryResponseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatastoreQueryResponseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatastoreQueryResponse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDatastoresCriteria gets all datastore criteria
*/
func (a *Client) GetDatastoresCriteria(params *GetDatastoresCriteriaParams, opts ...ClientOption) (*GetDatastoresCriteriaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatastoresCriteriaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatastoresCriteria",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/datastores/criteria",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatastoresCriteriaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatastoresCriteriaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatastoresCriteria: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHostCriteria gets all host criteria
*/
func (a *Client) GetHostCriteria(params *GetHostCriteriaParams, opts ...ClientOption) (*GetHostCriteriaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostCriteriaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHostCriteria",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/hosts/criteria",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHostCriteriaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostCriteriaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHostCriteria: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHostCriterion gets a criterion to query for host
*/
func (a *Client) GetHostCriterion(params *GetHostCriterionParams, opts ...ClientOption) (*GetHostCriterionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostCriterionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHostCriterion",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/hosts/criteria/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHostCriterionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostCriterionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHostCriterion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHostQueryResponse gets query response
*/
func (a *Client) GetHostQueryResponse(params *GetHostQueryResponseParams, opts ...ClientOption) (*GetHostQueryResponseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostQueryResponseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHostQueryResponse",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{clusterId}/hosts/queries/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHostQueryResponseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostQueryResponseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHostQueryResponse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTagAssignableForCluster gets tags assignable to a cluster
*/
func (a *Client) GetTagAssignableForCluster(params *GetTagAssignableForClusterParams, opts ...ClientOption) (*GetTagAssignableForClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagAssignableForClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagAssignableForCluster",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/tags/assignable-tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTagAssignableForClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagAssignableForClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagAssignableForCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTagsAssignedToCluster gets tags assigned to a cluster by its ID
*/
func (a *Client) GetTagsAssignedToCluster(params *GetTagsAssignedToClusterParams, opts ...ClientOption) (*GetTagsAssignedToClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagsAssignedToClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagsAssignedToCluster",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTagsAssignedToClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagsAssignedToClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagsAssignedToCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTagsAssignedToClusters gets tags assigned to clusters
*/
func (a *Client) GetTagsAssignedToClusters(params *GetTagsAssignedToClustersParams, opts ...ClientOption) (*GetTagsAssignedToClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagsAssignedToClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagsAssignedToClusters",
		Method:             "GET",
		PathPattern:        "/v1/clusters/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTagsAssignedToClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagsAssignedToClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagsAssignedToClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVdses gets the list of v d ses of a cluster
*/
func (a *Client) GetVdses(params *GetVdsesParams, opts ...ClientOption) (*GetVdsesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVdsesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVdses",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{clusterId}/vdses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVdsesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVdsesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVdses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ImportVdsToInventory imports vds to inventory for the given cluster
*/
func (a *Client) ImportVdsToInventory(params *ImportVdsToInventoryParams, opts ...ClientOption) (*ImportVdsToInventoryAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportVdsToInventoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importVdsToInventory",
		Method:             "POST",
		PathPattern:        "/v1/clusters/{clusterId}/vdses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ImportVdsToInventoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportVdsToInventoryAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importVdsToInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDatastoreQuery posts a datastore query
*/
func (a *Client) PostDatastoreQuery(params *PostDatastoreQueryParams, opts ...ClientOption) (*PostDatastoreQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDatastoreQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDatastoreQuery",
		Method:             "POST",
		PathPattern:        "/v1/clusters/{id}/datastores/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDatastoreQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDatastoreQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDatastoreQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostHostQuery posts a host query
*/
func (a *Client) PostHostQuery(params *PostHostQueryParams, opts ...ClientOption) (*PostHostQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHostQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postHostQuery",
		Method:             "POST",
		PathPattern:        "/v1/clusters/{id}/hosts/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHostQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHostQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postHostQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveDatastoreFromCluster unmounts a datastore from a cluster
*/
func (a *Client) RemoveDatastoreFromCluster(params *RemoveDatastoreFromClusterParams, opts ...ClientOption) (*RemoveDatastoreFromClusterOK, *RemoveDatastoreFromClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDatastoreFromClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeDatastoreFromCluster",
		Method:             "DELETE",
		PathPattern:        "/v1/clusters/{id}/datastores/{datastoreId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveDatastoreFromClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RemoveDatastoreFromClusterOK:
		return value, nil, nil
	case *RemoveDatastoreFromClusterAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveTagsFromCluster removes tags from a cluster
*/
func (a *Client) RemoveTagsFromCluster(params *RemoveTagsFromClusterParams, opts ...ClientOption) (*RemoveTagsFromClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTagsFromClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeTagsFromCluster",
		Method:             "DELETE",
		PathPattern:        "/v1/clusters/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveTagsFromClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveTagsFromClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeTagsFromCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCluster updates a cluster by adding or removing hosts stretching a standard v SAN cluster unstretching a stretched cluster or by marking for deletion
*/
func (a *Client) UpdateCluster(params *UpdateClusterParams, opts ...ClientOption) (*UpdateClusterOK, *UpdateClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCluster",
		Method:             "PATCH",
		PathPattern:        "/v1/clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateClusterOK:
		return value, nil, nil
	case *UpdateClusterAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateClusterCreationSpec performs validation of the cluster creation spec specification
*/
func (a *Client) ValidateClusterCreationSpec(params *ValidateClusterCreationSpecParams, opts ...ClientOption) (*ValidateClusterCreationSpecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateClusterCreationSpecParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateClusterCreationSpec",
		Method:             "POST",
		PathPattern:        "/v1/clusters/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateClusterCreationSpecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateClusterCreationSpecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateClusterCreationSpec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateClusterUpdateSpec performs validation of the cluster update spec specification
*/
func (a *Client) ValidateClusterUpdateSpec(params *ValidateClusterUpdateSpecParams, opts ...ClientOption) (*ValidateClusterUpdateSpecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateClusterUpdateSpecParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateClusterUpdateSpec",
		Method:             "POST",
		PathPattern:        "/v1/clusters/{id}/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateClusterUpdateSpecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateClusterUpdateSpecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateClusterUpdateSpec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateVSANRemoteDatastoreSpec performs validation of the datastore mount spec specification
*/
func (a *Client) ValidateVSANRemoteDatastoreSpec(params *ValidateVSANRemoteDatastoreSpecParams, opts ...ClientOption) (*ValidateVSANRemoteDatastoreSpecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateVSANRemoteDatastoreSpecParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateVsanRemoteDatastoreSpec",
		Method:             "POST",
		PathPattern:        "/v1/clusters/{clusterId}/datastores/validation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateVSANRemoteDatastoreSpecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateVSANRemoteDatastoreSpecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateVsanRemoteDatastoreSpec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
