// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// ValidateClusterUpdateSpecReader is a Reader for the ValidateClusterUpdateSpec structure.
type ValidateClusterUpdateSpecReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateClusterUpdateSpecReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateClusterUpdateSpecOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateClusterUpdateSpecBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateClusterUpdateSpecNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewValidateClusterUpdateSpecInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/clusters/{id}/validations] validateClusterUpdateSpec", response, response.Code())
	}
}

// NewValidateClusterUpdateSpecOK creates a ValidateClusterUpdateSpecOK with default headers values
func NewValidateClusterUpdateSpecOK() *ValidateClusterUpdateSpecOK {
	return &ValidateClusterUpdateSpecOK{}
}

/*
ValidateClusterUpdateSpecOK describes a response with status code 200, with default header values.

Ok
*/
type ValidateClusterUpdateSpecOK struct {
	Payload *models.Validation
}

// IsSuccess returns true when this validate cluster update spec o k response has a 2xx status code
func (o *ValidateClusterUpdateSpecOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate cluster update spec o k response has a 3xx status code
func (o *ValidateClusterUpdateSpecOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate cluster update spec o k response has a 4xx status code
func (o *ValidateClusterUpdateSpecOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate cluster update spec o k response has a 5xx status code
func (o *ValidateClusterUpdateSpecOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate cluster update spec o k response a status code equal to that given
func (o *ValidateClusterUpdateSpecOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate cluster update spec o k response
func (o *ValidateClusterUpdateSpecOK) Code() int {
	return 200
}

func (o *ValidateClusterUpdateSpecOK) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{id}/validations][%d] validateClusterUpdateSpecOK  %+v", 200, o.Payload)
}

func (o *ValidateClusterUpdateSpecOK) String() string {
	return fmt.Sprintf("[POST /v1/clusters/{id}/validations][%d] validateClusterUpdateSpecOK  %+v", 200, o.Payload)
}

func (o *ValidateClusterUpdateSpecOK) GetPayload() *models.Validation {
	return o.Payload
}

func (o *ValidateClusterUpdateSpecOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateClusterUpdateSpecBadRequest creates a ValidateClusterUpdateSpecBadRequest with default headers values
func NewValidateClusterUpdateSpecBadRequest() *ValidateClusterUpdateSpecBadRequest {
	return &ValidateClusterUpdateSpecBadRequest{}
}

/*
ValidateClusterUpdateSpecBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ValidateClusterUpdateSpecBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate cluster update spec bad request response has a 2xx status code
func (o *ValidateClusterUpdateSpecBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate cluster update spec bad request response has a 3xx status code
func (o *ValidateClusterUpdateSpecBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate cluster update spec bad request response has a 4xx status code
func (o *ValidateClusterUpdateSpecBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate cluster update spec bad request response has a 5xx status code
func (o *ValidateClusterUpdateSpecBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this validate cluster update spec bad request response a status code equal to that given
func (o *ValidateClusterUpdateSpecBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the validate cluster update spec bad request response
func (o *ValidateClusterUpdateSpecBadRequest) Code() int {
	return 400
}

func (o *ValidateClusterUpdateSpecBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{id}/validations][%d] validateClusterUpdateSpecBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateClusterUpdateSpecBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/clusters/{id}/validations][%d] validateClusterUpdateSpecBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateClusterUpdateSpecBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateClusterUpdateSpecBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateClusterUpdateSpecNotFound creates a ValidateClusterUpdateSpecNotFound with default headers values
func NewValidateClusterUpdateSpecNotFound() *ValidateClusterUpdateSpecNotFound {
	return &ValidateClusterUpdateSpecNotFound{}
}

/*
ValidateClusterUpdateSpecNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateClusterUpdateSpecNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate cluster update spec not found response has a 2xx status code
func (o *ValidateClusterUpdateSpecNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate cluster update spec not found response has a 3xx status code
func (o *ValidateClusterUpdateSpecNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate cluster update spec not found response has a 4xx status code
func (o *ValidateClusterUpdateSpecNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate cluster update spec not found response has a 5xx status code
func (o *ValidateClusterUpdateSpecNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate cluster update spec not found response a status code equal to that given
func (o *ValidateClusterUpdateSpecNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate cluster update spec not found response
func (o *ValidateClusterUpdateSpecNotFound) Code() int {
	return 404
}

func (o *ValidateClusterUpdateSpecNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{id}/validations][%d] validateClusterUpdateSpecNotFound  %+v", 404, o.Payload)
}

func (o *ValidateClusterUpdateSpecNotFound) String() string {
	return fmt.Sprintf("[POST /v1/clusters/{id}/validations][%d] validateClusterUpdateSpecNotFound  %+v", 404, o.Payload)
}

func (o *ValidateClusterUpdateSpecNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateClusterUpdateSpecNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateClusterUpdateSpecInternalServerError creates a ValidateClusterUpdateSpecInternalServerError with default headers values
func NewValidateClusterUpdateSpecInternalServerError() *ValidateClusterUpdateSpecInternalServerError {
	return &ValidateClusterUpdateSpecInternalServerError{}
}

/*
ValidateClusterUpdateSpecInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type ValidateClusterUpdateSpecInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate cluster update spec internal server error response has a 2xx status code
func (o *ValidateClusterUpdateSpecInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate cluster update spec internal server error response has a 3xx status code
func (o *ValidateClusterUpdateSpecInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate cluster update spec internal server error response has a 4xx status code
func (o *ValidateClusterUpdateSpecInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate cluster update spec internal server error response has a 5xx status code
func (o *ValidateClusterUpdateSpecInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate cluster update spec internal server error response a status code equal to that given
func (o *ValidateClusterUpdateSpecInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the validate cluster update spec internal server error response
func (o *ValidateClusterUpdateSpecInternalServerError) Code() int {
	return 500
}

func (o *ValidateClusterUpdateSpecInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{id}/validations][%d] validateClusterUpdateSpecInternalServerError  %+v", 500, o.Payload)
}

func (o *ValidateClusterUpdateSpecInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/clusters/{id}/validations][%d] validateClusterUpdateSpecInternalServerError  %+v", 500, o.Payload)
}

func (o *ValidateClusterUpdateSpecInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateClusterUpdateSpecInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
