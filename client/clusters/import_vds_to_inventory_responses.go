// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// ImportVdsToInventoryReader is a Reader for the ImportVdsToInventory structure.
type ImportVdsToInventoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportVdsToInventoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewImportVdsToInventoryAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewImportVdsToInventoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewImportVdsToInventoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/clusters/{clusterId}/vdses] importVdsToInventory", response, response.Code())
	}
}

// NewImportVdsToInventoryAccepted creates a ImportVdsToInventoryAccepted with default headers values
func NewImportVdsToInventoryAccepted() *ImportVdsToInventoryAccepted {
	return &ImportVdsToInventoryAccepted{}
}

/*
ImportVdsToInventoryAccepted describes a response with status code 202, with default header values.

Accepted
*/
type ImportVdsToInventoryAccepted struct {
	Payload []*models.Task
}

// IsSuccess returns true when this import vds to inventory accepted response has a 2xx status code
func (o *ImportVdsToInventoryAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this import vds to inventory accepted response has a 3xx status code
func (o *ImportVdsToInventoryAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import vds to inventory accepted response has a 4xx status code
func (o *ImportVdsToInventoryAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this import vds to inventory accepted response has a 5xx status code
func (o *ImportVdsToInventoryAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this import vds to inventory accepted response a status code equal to that given
func (o *ImportVdsToInventoryAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the import vds to inventory accepted response
func (o *ImportVdsToInventoryAccepted) Code() int {
	return 202
}

func (o *ImportVdsToInventoryAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/vdses][%d] importVdsToInventoryAccepted  %+v", 202, o.Payload)
}

func (o *ImportVdsToInventoryAccepted) String() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/vdses][%d] importVdsToInventoryAccepted  %+v", 202, o.Payload)
}

func (o *ImportVdsToInventoryAccepted) GetPayload() []*models.Task {
	return o.Payload
}

func (o *ImportVdsToInventoryAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportVdsToInventoryBadRequest creates a ImportVdsToInventoryBadRequest with default headers values
func NewImportVdsToInventoryBadRequest() *ImportVdsToInventoryBadRequest {
	return &ImportVdsToInventoryBadRequest{}
}

/*
ImportVdsToInventoryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ImportVdsToInventoryBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this import vds to inventory bad request response has a 2xx status code
func (o *ImportVdsToInventoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import vds to inventory bad request response has a 3xx status code
func (o *ImportVdsToInventoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import vds to inventory bad request response has a 4xx status code
func (o *ImportVdsToInventoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this import vds to inventory bad request response has a 5xx status code
func (o *ImportVdsToInventoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this import vds to inventory bad request response a status code equal to that given
func (o *ImportVdsToInventoryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the import vds to inventory bad request response
func (o *ImportVdsToInventoryBadRequest) Code() int {
	return 400
}

func (o *ImportVdsToInventoryBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/vdses][%d] importVdsToInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *ImportVdsToInventoryBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/vdses][%d] importVdsToInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *ImportVdsToInventoryBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportVdsToInventoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportVdsToInventoryInternalServerError creates a ImportVdsToInventoryInternalServerError with default headers values
func NewImportVdsToInventoryInternalServerError() *ImportVdsToInventoryInternalServerError {
	return &ImportVdsToInventoryInternalServerError{}
}

/*
ImportVdsToInventoryInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ImportVdsToInventoryInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this import vds to inventory internal server error response has a 2xx status code
func (o *ImportVdsToInventoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import vds to inventory internal server error response has a 3xx status code
func (o *ImportVdsToInventoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import vds to inventory internal server error response has a 4xx status code
func (o *ImportVdsToInventoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this import vds to inventory internal server error response has a 5xx status code
func (o *ImportVdsToInventoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this import vds to inventory internal server error response a status code equal to that given
func (o *ImportVdsToInventoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the import vds to inventory internal server error response
func (o *ImportVdsToInventoryInternalServerError) Code() int {
	return 500
}

func (o *ImportVdsToInventoryInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/vdses][%d] importVdsToInventoryInternalServerError  %+v", 500, o.Payload)
}

func (o *ImportVdsToInventoryInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/vdses][%d] importVdsToInventoryInternalServerError  %+v", 500, o.Payload)
}

func (o *ImportVdsToInventoryInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportVdsToInventoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
