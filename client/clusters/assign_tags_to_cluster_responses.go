// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// AssignTagsToClusterReader is a Reader for the AssignTagsToCluster structure.
type AssignTagsToClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssignTagsToClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAssignTagsToClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAssignTagsToClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAssignTagsToClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/clusters/{id}/tags] assignTagsToCluster", response, response.Code())
	}
}

// NewAssignTagsToClusterOK creates a AssignTagsToClusterOK with default headers values
func NewAssignTagsToClusterOK() *AssignTagsToClusterOK {
	return &AssignTagsToClusterOK{}
}

/*
AssignTagsToClusterOK describes a response with status code 200, with default header values.

Ok
*/
type AssignTagsToClusterOK struct {
	Payload *models.TagAssignmentResult
}

// IsSuccess returns true when this assign tags to cluster o k response has a 2xx status code
func (o *AssignTagsToClusterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this assign tags to cluster o k response has a 3xx status code
func (o *AssignTagsToClusterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to cluster o k response has a 4xx status code
func (o *AssignTagsToClusterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign tags to cluster o k response has a 5xx status code
func (o *AssignTagsToClusterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this assign tags to cluster o k response a status code equal to that given
func (o *AssignTagsToClusterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the assign tags to cluster o k response
func (o *AssignTagsToClusterOK) Code() int {
	return 200
}

func (o *AssignTagsToClusterOK) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{id}/tags][%d] assignTagsToClusterOK  %+v", 200, o.Payload)
}

func (o *AssignTagsToClusterOK) String() string {
	return fmt.Sprintf("[PUT /v1/clusters/{id}/tags][%d] assignTagsToClusterOK  %+v", 200, o.Payload)
}

func (o *AssignTagsToClusterOK) GetPayload() *models.TagAssignmentResult {
	return o.Payload
}

func (o *AssignTagsToClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TagAssignmentResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignTagsToClusterBadRequest creates a AssignTagsToClusterBadRequest with default headers values
func NewAssignTagsToClusterBadRequest() *AssignTagsToClusterBadRequest {
	return &AssignTagsToClusterBadRequest{}
}

/*
AssignTagsToClusterBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AssignTagsToClusterBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign tags to cluster bad request response has a 2xx status code
func (o *AssignTagsToClusterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign tags to cluster bad request response has a 3xx status code
func (o *AssignTagsToClusterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to cluster bad request response has a 4xx status code
func (o *AssignTagsToClusterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this assign tags to cluster bad request response has a 5xx status code
func (o *AssignTagsToClusterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this assign tags to cluster bad request response a status code equal to that given
func (o *AssignTagsToClusterBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the assign tags to cluster bad request response
func (o *AssignTagsToClusterBadRequest) Code() int {
	return 400
}

func (o *AssignTagsToClusterBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{id}/tags][%d] assignTagsToClusterBadRequest  %+v", 400, o.Payload)
}

func (o *AssignTagsToClusterBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/clusters/{id}/tags][%d] assignTagsToClusterBadRequest  %+v", 400, o.Payload)
}

func (o *AssignTagsToClusterBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignTagsToClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignTagsToClusterInternalServerError creates a AssignTagsToClusterInternalServerError with default headers values
func NewAssignTagsToClusterInternalServerError() *AssignTagsToClusterInternalServerError {
	return &AssignTagsToClusterInternalServerError{}
}

/*
AssignTagsToClusterInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type AssignTagsToClusterInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign tags to cluster internal server error response has a 2xx status code
func (o *AssignTagsToClusterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign tags to cluster internal server error response has a 3xx status code
func (o *AssignTagsToClusterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to cluster internal server error response has a 4xx status code
func (o *AssignTagsToClusterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign tags to cluster internal server error response has a 5xx status code
func (o *AssignTagsToClusterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this assign tags to cluster internal server error response a status code equal to that given
func (o *AssignTagsToClusterInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the assign tags to cluster internal server error response
func (o *AssignTagsToClusterInternalServerError) Code() int {
	return 500
}

func (o *AssignTagsToClusterInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{id}/tags][%d] assignTagsToClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignTagsToClusterInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/clusters/{id}/tags][%d] assignTagsToClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignTagsToClusterInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignTagsToClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
