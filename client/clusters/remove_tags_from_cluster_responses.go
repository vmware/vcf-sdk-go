// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// RemoveTagsFromClusterReader is a Reader for the RemoveTagsFromCluster structure.
type RemoveTagsFromClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveTagsFromClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveTagsFromClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveTagsFromClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveTagsFromClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/clusters/{id}/tags] removeTagsFromCluster", response, response.Code())
	}
}

// NewRemoveTagsFromClusterOK creates a RemoveTagsFromClusterOK with default headers values
func NewRemoveTagsFromClusterOK() *RemoveTagsFromClusterOK {
	return &RemoveTagsFromClusterOK{}
}

/*
RemoveTagsFromClusterOK describes a response with status code 200, with default header values.

Ok
*/
type RemoveTagsFromClusterOK struct {
	Payload *models.TagAssignmentResult
}

// IsSuccess returns true when this remove tags from cluster o k response has a 2xx status code
func (o *RemoveTagsFromClusterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove tags from cluster o k response has a 3xx status code
func (o *RemoveTagsFromClusterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove tags from cluster o k response has a 4xx status code
func (o *RemoveTagsFromClusterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove tags from cluster o k response has a 5xx status code
func (o *RemoveTagsFromClusterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this remove tags from cluster o k response a status code equal to that given
func (o *RemoveTagsFromClusterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the remove tags from cluster o k response
func (o *RemoveTagsFromClusterOK) Code() int {
	return 200
}

func (o *RemoveTagsFromClusterOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{id}/tags][%d] removeTagsFromClusterOK  %+v", 200, o.Payload)
}

func (o *RemoveTagsFromClusterOK) String() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{id}/tags][%d] removeTagsFromClusterOK  %+v", 200, o.Payload)
}

func (o *RemoveTagsFromClusterOK) GetPayload() *models.TagAssignmentResult {
	return o.Payload
}

func (o *RemoveTagsFromClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TagAssignmentResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveTagsFromClusterBadRequest creates a RemoveTagsFromClusterBadRequest with default headers values
func NewRemoveTagsFromClusterBadRequest() *RemoveTagsFromClusterBadRequest {
	return &RemoveTagsFromClusterBadRequest{}
}

/*
RemoveTagsFromClusterBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RemoveTagsFromClusterBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove tags from cluster bad request response has a 2xx status code
func (o *RemoveTagsFromClusterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove tags from cluster bad request response has a 3xx status code
func (o *RemoveTagsFromClusterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove tags from cluster bad request response has a 4xx status code
func (o *RemoveTagsFromClusterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove tags from cluster bad request response has a 5xx status code
func (o *RemoveTagsFromClusterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove tags from cluster bad request response a status code equal to that given
func (o *RemoveTagsFromClusterBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the remove tags from cluster bad request response
func (o *RemoveTagsFromClusterBadRequest) Code() int {
	return 400
}

func (o *RemoveTagsFromClusterBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{id}/tags][%d] removeTagsFromClusterBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveTagsFromClusterBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{id}/tags][%d] removeTagsFromClusterBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveTagsFromClusterBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveTagsFromClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveTagsFromClusterInternalServerError creates a RemoveTagsFromClusterInternalServerError with default headers values
func NewRemoveTagsFromClusterInternalServerError() *RemoveTagsFromClusterInternalServerError {
	return &RemoveTagsFromClusterInternalServerError{}
}

/*
RemoveTagsFromClusterInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type RemoveTagsFromClusterInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove tags from cluster internal server error response has a 2xx status code
func (o *RemoveTagsFromClusterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove tags from cluster internal server error response has a 3xx status code
func (o *RemoveTagsFromClusterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove tags from cluster internal server error response has a 4xx status code
func (o *RemoveTagsFromClusterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove tags from cluster internal server error response has a 5xx status code
func (o *RemoveTagsFromClusterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remove tags from cluster internal server error response a status code equal to that given
func (o *RemoveTagsFromClusterInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remove tags from cluster internal server error response
func (o *RemoveTagsFromClusterInternalServerError) Code() int {
	return 500
}

func (o *RemoveTagsFromClusterInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{id}/tags][%d] removeTagsFromClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveTagsFromClusterInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{id}/tags][%d] removeTagsFromClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveTagsFromClusterInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveTagsFromClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
