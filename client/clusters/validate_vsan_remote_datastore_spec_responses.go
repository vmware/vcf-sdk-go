// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// ValidateVSANRemoteDatastoreSpecReader is a Reader for the ValidateVSANRemoteDatastoreSpec structure.
type ValidateVSANRemoteDatastoreSpecReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateVSANRemoteDatastoreSpecReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateVSANRemoteDatastoreSpecOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateVSANRemoteDatastoreSpecBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewValidateVSANRemoteDatastoreSpecInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/clusters/{clusterId}/datastores/validation] validateVsanRemoteDatastoreSpec", response, response.Code())
	}
}

// NewValidateVSANRemoteDatastoreSpecOK creates a ValidateVSANRemoteDatastoreSpecOK with default headers values
func NewValidateVSANRemoteDatastoreSpecOK() *ValidateVSANRemoteDatastoreSpecOK {
	return &ValidateVSANRemoteDatastoreSpecOK{}
}

/*
ValidateVSANRemoteDatastoreSpecOK describes a response with status code 200, with default header values.

Ok
*/
type ValidateVSANRemoteDatastoreSpecOK struct {
	Payload *models.Validation
}

// IsSuccess returns true when this validate Vsan remote datastore spec o k response has a 2xx status code
func (o *ValidateVSANRemoteDatastoreSpecOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate Vsan remote datastore spec o k response has a 3xx status code
func (o *ValidateVSANRemoteDatastoreSpecOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate Vsan remote datastore spec o k response has a 4xx status code
func (o *ValidateVSANRemoteDatastoreSpecOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate Vsan remote datastore spec o k response has a 5xx status code
func (o *ValidateVSANRemoteDatastoreSpecOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate Vsan remote datastore spec o k response a status code equal to that given
func (o *ValidateVSANRemoteDatastoreSpecOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate Vsan remote datastore spec o k response
func (o *ValidateVSANRemoteDatastoreSpecOK) Code() int {
	return 200
}

func (o *ValidateVSANRemoteDatastoreSpecOK) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/datastores/validation][%d] validateVsanRemoteDatastoreSpecOK  %+v", 200, o.Payload)
}

func (o *ValidateVSANRemoteDatastoreSpecOK) String() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/datastores/validation][%d] validateVsanRemoteDatastoreSpecOK  %+v", 200, o.Payload)
}

func (o *ValidateVSANRemoteDatastoreSpecOK) GetPayload() *models.Validation {
	return o.Payload
}

func (o *ValidateVSANRemoteDatastoreSpecOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVSANRemoteDatastoreSpecBadRequest creates a ValidateVSANRemoteDatastoreSpecBadRequest with default headers values
func NewValidateVSANRemoteDatastoreSpecBadRequest() *ValidateVSANRemoteDatastoreSpecBadRequest {
	return &ValidateVSANRemoteDatastoreSpecBadRequest{}
}

/*
ValidateVSANRemoteDatastoreSpecBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ValidateVSANRemoteDatastoreSpecBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate Vsan remote datastore spec bad request response has a 2xx status code
func (o *ValidateVSANRemoteDatastoreSpecBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate Vsan remote datastore spec bad request response has a 3xx status code
func (o *ValidateVSANRemoteDatastoreSpecBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate Vsan remote datastore spec bad request response has a 4xx status code
func (o *ValidateVSANRemoteDatastoreSpecBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate Vsan remote datastore spec bad request response has a 5xx status code
func (o *ValidateVSANRemoteDatastoreSpecBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this validate Vsan remote datastore spec bad request response a status code equal to that given
func (o *ValidateVSANRemoteDatastoreSpecBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the validate Vsan remote datastore spec bad request response
func (o *ValidateVSANRemoteDatastoreSpecBadRequest) Code() int {
	return 400
}

func (o *ValidateVSANRemoteDatastoreSpecBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/datastores/validation][%d] validateVsanRemoteDatastoreSpecBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateVSANRemoteDatastoreSpecBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/datastores/validation][%d] validateVsanRemoteDatastoreSpecBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateVSANRemoteDatastoreSpecBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateVSANRemoteDatastoreSpecBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVSANRemoteDatastoreSpecInternalServerError creates a ValidateVSANRemoteDatastoreSpecInternalServerError with default headers values
func NewValidateVSANRemoteDatastoreSpecInternalServerError() *ValidateVSANRemoteDatastoreSpecInternalServerError {
	return &ValidateVSANRemoteDatastoreSpecInternalServerError{}
}

/*
ValidateVSANRemoteDatastoreSpecInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type ValidateVSANRemoteDatastoreSpecInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate Vsan remote datastore spec internal server error response has a 2xx status code
func (o *ValidateVSANRemoteDatastoreSpecInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate Vsan remote datastore spec internal server error response has a 3xx status code
func (o *ValidateVSANRemoteDatastoreSpecInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate Vsan remote datastore spec internal server error response has a 4xx status code
func (o *ValidateVSANRemoteDatastoreSpecInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate Vsan remote datastore spec internal server error response has a 5xx status code
func (o *ValidateVSANRemoteDatastoreSpecInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate Vsan remote datastore spec internal server error response a status code equal to that given
func (o *ValidateVSANRemoteDatastoreSpecInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the validate Vsan remote datastore spec internal server error response
func (o *ValidateVSANRemoteDatastoreSpecInternalServerError) Code() int {
	return 500
}

func (o *ValidateVSANRemoteDatastoreSpecInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/datastores/validation][%d] validateVsanRemoteDatastoreSpecInternalServerError  %+v", 500, o.Payload)
}

func (o *ValidateVSANRemoteDatastoreSpecInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/datastores/validation][%d] validateVsanRemoteDatastoreSpecInternalServerError  %+v", 500, o.Payload)
}

func (o *ValidateVSANRemoteDatastoreSpecInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateVSANRemoteDatastoreSpecInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
