// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package sos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// ExportSupportBundleByIDReader is a Reader for the ExportSupportBundleByID structure.
type ExportSupportBundleByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportSupportBundleByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportSupportBundleByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExportSupportBundleByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExportSupportBundleByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExportSupportBundleByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExportSupportBundleByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/system/support-bundles/{id}/data] exportSupportBundleByID", response, response.Code())
	}
}

// NewExportSupportBundleByIDOK creates a ExportSupportBundleByIDOK with default headers values
func NewExportSupportBundleByIDOK() *ExportSupportBundleByIDOK {
	return &ExportSupportBundleByIDOK{}
}

/*
ExportSupportBundleByIDOK describes a response with status code 200, with default header values.

Ok
*/
type ExportSupportBundleByIDOK struct {
	Payload strfmt.Base64
}

// IsSuccess returns true when this export support bundle by Id o k response has a 2xx status code
func (o *ExportSupportBundleByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this export support bundle by Id o k response has a 3xx status code
func (o *ExportSupportBundleByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export support bundle by Id o k response has a 4xx status code
func (o *ExportSupportBundleByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this export support bundle by Id o k response has a 5xx status code
func (o *ExportSupportBundleByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this export support bundle by Id o k response a status code equal to that given
func (o *ExportSupportBundleByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the export support bundle by Id o k response
func (o *ExportSupportBundleByIDOK) Code() int {
	return 200
}

func (o *ExportSupportBundleByIDOK) Error() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] exportSupportBundleByIdOK  %+v", 200, o.Payload)
}

func (o *ExportSupportBundleByIDOK) String() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] exportSupportBundleByIdOK  %+v", 200, o.Payload)
}

func (o *ExportSupportBundleByIDOK) GetPayload() strfmt.Base64 {
	return o.Payload
}

func (o *ExportSupportBundleByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportSupportBundleByIDBadRequest creates a ExportSupportBundleByIDBadRequest with default headers values
func NewExportSupportBundleByIDBadRequest() *ExportSupportBundleByIDBadRequest {
	return &ExportSupportBundleByIDBadRequest{}
}

/*
ExportSupportBundleByIDBadRequest describes a response with status code 400, with default header values.

Bad request! Invalid Headers or Data. Error: {error}
*/
type ExportSupportBundleByIDBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this export support bundle by Id bad request response has a 2xx status code
func (o *ExportSupportBundleByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export support bundle by Id bad request response has a 3xx status code
func (o *ExportSupportBundleByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export support bundle by Id bad request response has a 4xx status code
func (o *ExportSupportBundleByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this export support bundle by Id bad request response has a 5xx status code
func (o *ExportSupportBundleByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this export support bundle by Id bad request response a status code equal to that given
func (o *ExportSupportBundleByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the export support bundle by Id bad request response
func (o *ExportSupportBundleByIDBadRequest) Code() int {
	return 400
}

func (o *ExportSupportBundleByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] exportSupportBundleByIdBadRequest  %+v", 400, o.Payload)
}

func (o *ExportSupportBundleByIDBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] exportSupportBundleByIdBadRequest  %+v", 400, o.Payload)
}

func (o *ExportSupportBundleByIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ExportSupportBundleByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportSupportBundleByIDUnauthorized creates a ExportSupportBundleByIDUnauthorized with default headers values
func NewExportSupportBundleByIDUnauthorized() *ExportSupportBundleByIDUnauthorized {
	return &ExportSupportBundleByIDUnauthorized{}
}

/*
ExportSupportBundleByIDUnauthorized describes a response with status code 401, with default header values.

Bad request! Authorization Header is missing or not in correct format.
*/
type ExportSupportBundleByIDUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this export support bundle by Id unauthorized response has a 2xx status code
func (o *ExportSupportBundleByIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export support bundle by Id unauthorized response has a 3xx status code
func (o *ExportSupportBundleByIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export support bundle by Id unauthorized response has a 4xx status code
func (o *ExportSupportBundleByIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this export support bundle by Id unauthorized response has a 5xx status code
func (o *ExportSupportBundleByIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this export support bundle by Id unauthorized response a status code equal to that given
func (o *ExportSupportBundleByIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the export support bundle by Id unauthorized response
func (o *ExportSupportBundleByIDUnauthorized) Code() int {
	return 401
}

func (o *ExportSupportBundleByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] exportSupportBundleByIdUnauthorized  %+v", 401, o.Payload)
}

func (o *ExportSupportBundleByIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] exportSupportBundleByIdUnauthorized  %+v", 401, o.Payload)
}

func (o *ExportSupportBundleByIDUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ExportSupportBundleByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportSupportBundleByIDNotFound creates a ExportSupportBundleByIDNotFound with default headers values
func NewExportSupportBundleByIDNotFound() *ExportSupportBundleByIDNotFound {
	return &ExportSupportBundleByIDNotFound{}
}

/*
ExportSupportBundleByIDNotFound describes a response with status code 404, with default header values.

Bundle not found or not available for download. Id:{id}
*/
type ExportSupportBundleByIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this export support bundle by Id not found response has a 2xx status code
func (o *ExportSupportBundleByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export support bundle by Id not found response has a 3xx status code
func (o *ExportSupportBundleByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export support bundle by Id not found response has a 4xx status code
func (o *ExportSupportBundleByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this export support bundle by Id not found response has a 5xx status code
func (o *ExportSupportBundleByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this export support bundle by Id not found response a status code equal to that given
func (o *ExportSupportBundleByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the export support bundle by Id not found response
func (o *ExportSupportBundleByIDNotFound) Code() int {
	return 404
}

func (o *ExportSupportBundleByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] exportSupportBundleByIdNotFound  %+v", 404, o.Payload)
}

func (o *ExportSupportBundleByIDNotFound) String() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] exportSupportBundleByIdNotFound  %+v", 404, o.Payload)
}

func (o *ExportSupportBundleByIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ExportSupportBundleByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportSupportBundleByIDInternalServerError creates a ExportSupportBundleByIDInternalServerError with default headers values
func NewExportSupportBundleByIDInternalServerError() *ExportSupportBundleByIDInternalServerError {
	return &ExportSupportBundleByIDInternalServerError{}
}

/*
ExportSupportBundleByIDInternalServerError describes a response with status code 500, with default header values.

Something went wrong. Internal server error occurred. Error {error}
*/
type ExportSupportBundleByIDInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this export support bundle by Id internal server error response has a 2xx status code
func (o *ExportSupportBundleByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export support bundle by Id internal server error response has a 3xx status code
func (o *ExportSupportBundleByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export support bundle by Id internal server error response has a 4xx status code
func (o *ExportSupportBundleByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this export support bundle by Id internal server error response has a 5xx status code
func (o *ExportSupportBundleByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this export support bundle by Id internal server error response a status code equal to that given
func (o *ExportSupportBundleByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the export support bundle by Id internal server error response
func (o *ExportSupportBundleByIDInternalServerError) Code() int {
	return 500
}

func (o *ExportSupportBundleByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] exportSupportBundleByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *ExportSupportBundleByIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] exportSupportBundleByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *ExportSupportBundleByIDInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ExportSupportBundleByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
