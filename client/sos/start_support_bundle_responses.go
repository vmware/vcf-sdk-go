// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package sos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// StartSupportBundleReader is a Reader for the StartSupportBundle structure.
type StartSupportBundleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartSupportBundleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartSupportBundleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewStartSupportBundleAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStartSupportBundleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStartSupportBundleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewStartSupportBundleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStartSupportBundleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/system/support-bundles] startSupportBundle", response, response.Code())
	}
}

// NewStartSupportBundleOK creates a StartSupportBundleOK with default headers values
func NewStartSupportBundleOK() *StartSupportBundleOK {
	return &StartSupportBundleOK{}
}

/*
StartSupportBundleOK describes a response with status code 200, with default header values.

OK
*/
type StartSupportBundleOK struct {
	Payload *models.SupportBundle
}

// IsSuccess returns true when this start support bundle o k response has a 2xx status code
func (o *StartSupportBundleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this start support bundle o k response has a 3xx status code
func (o *StartSupportBundleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start support bundle o k response has a 4xx status code
func (o *StartSupportBundleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this start support bundle o k response has a 5xx status code
func (o *StartSupportBundleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this start support bundle o k response a status code equal to that given
func (o *StartSupportBundleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the start support bundle o k response
func (o *StartSupportBundleOK) Code() int {
	return 200
}

func (o *StartSupportBundleOK) Error() string {
	return fmt.Sprintf("[POST /v1/system/support-bundles][%d] startSupportBundleOK  %+v", 200, o.Payload)
}

func (o *StartSupportBundleOK) String() string {
	return fmt.Sprintf("[POST /v1/system/support-bundles][%d] startSupportBundleOK  %+v", 200, o.Payload)
}

func (o *StartSupportBundleOK) GetPayload() *models.SupportBundle {
	return o.Payload
}

func (o *StartSupportBundleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SupportBundle)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartSupportBundleAccepted creates a StartSupportBundleAccepted with default headers values
func NewStartSupportBundleAccepted() *StartSupportBundleAccepted {
	return &StartSupportBundleAccepted{}
}

/*
StartSupportBundleAccepted describes a response with status code 202, with default header values.

Accepted
*/
type StartSupportBundleAccepted struct {
	Payload *models.SupportBundle
}

// IsSuccess returns true when this start support bundle accepted response has a 2xx status code
func (o *StartSupportBundleAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this start support bundle accepted response has a 3xx status code
func (o *StartSupportBundleAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start support bundle accepted response has a 4xx status code
func (o *StartSupportBundleAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this start support bundle accepted response has a 5xx status code
func (o *StartSupportBundleAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this start support bundle accepted response a status code equal to that given
func (o *StartSupportBundleAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the start support bundle accepted response
func (o *StartSupportBundleAccepted) Code() int {
	return 202
}

func (o *StartSupportBundleAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/system/support-bundles][%d] startSupportBundleAccepted  %+v", 202, o.Payload)
}

func (o *StartSupportBundleAccepted) String() string {
	return fmt.Sprintf("[POST /v1/system/support-bundles][%d] startSupportBundleAccepted  %+v", 202, o.Payload)
}

func (o *StartSupportBundleAccepted) GetPayload() *models.SupportBundle {
	return o.Payload
}

func (o *StartSupportBundleAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SupportBundle)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartSupportBundleBadRequest creates a StartSupportBundleBadRequest with default headers values
func NewStartSupportBundleBadRequest() *StartSupportBundleBadRequest {
	return &StartSupportBundleBadRequest{}
}

/*
StartSupportBundleBadRequest describes a response with status code 400, with default header values.

Bad request! Invalid Headers or Data. Error: {error}
*/
type StartSupportBundleBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this start support bundle bad request response has a 2xx status code
func (o *StartSupportBundleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start support bundle bad request response has a 3xx status code
func (o *StartSupportBundleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start support bundle bad request response has a 4xx status code
func (o *StartSupportBundleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this start support bundle bad request response has a 5xx status code
func (o *StartSupportBundleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this start support bundle bad request response a status code equal to that given
func (o *StartSupportBundleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the start support bundle bad request response
func (o *StartSupportBundleBadRequest) Code() int {
	return 400
}

func (o *StartSupportBundleBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/system/support-bundles][%d] startSupportBundleBadRequest  %+v", 400, o.Payload)
}

func (o *StartSupportBundleBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/system/support-bundles][%d] startSupportBundleBadRequest  %+v", 400, o.Payload)
}

func (o *StartSupportBundleBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *StartSupportBundleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartSupportBundleUnauthorized creates a StartSupportBundleUnauthorized with default headers values
func NewStartSupportBundleUnauthorized() *StartSupportBundleUnauthorized {
	return &StartSupportBundleUnauthorized{}
}

/*
StartSupportBundleUnauthorized describes a response with status code 401, with default header values.

Bad request! Authorization Header is missing or not in correct format.
*/
type StartSupportBundleUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this start support bundle unauthorized response has a 2xx status code
func (o *StartSupportBundleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start support bundle unauthorized response has a 3xx status code
func (o *StartSupportBundleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start support bundle unauthorized response has a 4xx status code
func (o *StartSupportBundleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this start support bundle unauthorized response has a 5xx status code
func (o *StartSupportBundleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this start support bundle unauthorized response a status code equal to that given
func (o *StartSupportBundleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the start support bundle unauthorized response
func (o *StartSupportBundleUnauthorized) Code() int {
	return 401
}

func (o *StartSupportBundleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/system/support-bundles][%d] startSupportBundleUnauthorized  %+v", 401, o.Payload)
}

func (o *StartSupportBundleUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/system/support-bundles][%d] startSupportBundleUnauthorized  %+v", 401, o.Payload)
}

func (o *StartSupportBundleUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *StartSupportBundleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartSupportBundleConflict creates a StartSupportBundleConflict with default headers values
func NewStartSupportBundleConflict() *StartSupportBundleConflict {
	return &StartSupportBundleConflict{}
}

/*
StartSupportBundleConflict describes a response with status code 409, with default header values.

Operation is in progress for Id {id}. Wait for the operation to complete.
*/
type StartSupportBundleConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this start support bundle conflict response has a 2xx status code
func (o *StartSupportBundleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start support bundle conflict response has a 3xx status code
func (o *StartSupportBundleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start support bundle conflict response has a 4xx status code
func (o *StartSupportBundleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this start support bundle conflict response has a 5xx status code
func (o *StartSupportBundleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this start support bundle conflict response a status code equal to that given
func (o *StartSupportBundleConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the start support bundle conflict response
func (o *StartSupportBundleConflict) Code() int {
	return 409
}

func (o *StartSupportBundleConflict) Error() string {
	return fmt.Sprintf("[POST /v1/system/support-bundles][%d] startSupportBundleConflict  %+v", 409, o.Payload)
}

func (o *StartSupportBundleConflict) String() string {
	return fmt.Sprintf("[POST /v1/system/support-bundles][%d] startSupportBundleConflict  %+v", 409, o.Payload)
}

func (o *StartSupportBundleConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *StartSupportBundleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartSupportBundleInternalServerError creates a StartSupportBundleInternalServerError with default headers values
func NewStartSupportBundleInternalServerError() *StartSupportBundleInternalServerError {
	return &StartSupportBundleInternalServerError{}
}

/*
StartSupportBundleInternalServerError describes a response with status code 500, with default header values.

Something went wrong. Internal server error occurred. Error {error}
*/
type StartSupportBundleInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this start support bundle internal server error response has a 2xx status code
func (o *StartSupportBundleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start support bundle internal server error response has a 3xx status code
func (o *StartSupportBundleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start support bundle internal server error response has a 4xx status code
func (o *StartSupportBundleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this start support bundle internal server error response has a 5xx status code
func (o *StartSupportBundleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this start support bundle internal server error response a status code equal to that given
func (o *StartSupportBundleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the start support bundle internal server error response
func (o *StartSupportBundleInternalServerError) Code() int {
	return 500
}

func (o *StartSupportBundleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/system/support-bundles][%d] startSupportBundleInternalServerError  %+v", 500, o.Payload)
}

func (o *StartSupportBundleInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/system/support-bundles][%d] startSupportBundleInternalServerError  %+v", 500, o.Payload)
}

func (o *StartSupportBundleInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *StartSupportBundleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
