// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package sos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetHealthCheckTaskReader is a Reader for the GetHealthCheckTask structure.
type GetHealthCheckTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHealthCheckTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHealthCheckTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetHealthCheckTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetHealthCheckTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetHealthCheckTaskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/system/health-summary] getHealthCheckTask", response, response.Code())
	}
}

// NewGetHealthCheckTaskOK creates a GetHealthCheckTaskOK with default headers values
func NewGetHealthCheckTaskOK() *GetHealthCheckTaskOK {
	return &GetHealthCheckTaskOK{}
}

/*
GetHealthCheckTaskOK describes a response with status code 200, with default header values.

Ok
*/
type GetHealthCheckTaskOK struct {
	Payload *models.PageOfHealthSummary
}

// IsSuccess returns true when this get health check task o k response has a 2xx status code
func (o *GetHealthCheckTaskOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get health check task o k response has a 3xx status code
func (o *GetHealthCheckTaskOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get health check task o k response has a 4xx status code
func (o *GetHealthCheckTaskOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get health check task o k response has a 5xx status code
func (o *GetHealthCheckTaskOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get health check task o k response a status code equal to that given
func (o *GetHealthCheckTaskOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get health check task o k response
func (o *GetHealthCheckTaskOK) Code() int {
	return 200
}

func (o *GetHealthCheckTaskOK) Error() string {
	return fmt.Sprintf("[GET /v1/system/health-summary][%d] getHealthCheckTaskOK  %+v", 200, o.Payload)
}

func (o *GetHealthCheckTaskOK) String() string {
	return fmt.Sprintf("[GET /v1/system/health-summary][%d] getHealthCheckTaskOK  %+v", 200, o.Payload)
}

func (o *GetHealthCheckTaskOK) GetPayload() *models.PageOfHealthSummary {
	return o.Payload
}

func (o *GetHealthCheckTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageOfHealthSummary)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHealthCheckTaskBadRequest creates a GetHealthCheckTaskBadRequest with default headers values
func NewGetHealthCheckTaskBadRequest() *GetHealthCheckTaskBadRequest {
	return &GetHealthCheckTaskBadRequest{}
}

/*
GetHealthCheckTaskBadRequest describes a response with status code 400, with default header values.

Bad request! Invalid Headers or Data. Error: {error}
*/
type GetHealthCheckTaskBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get health check task bad request response has a 2xx status code
func (o *GetHealthCheckTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get health check task bad request response has a 3xx status code
func (o *GetHealthCheckTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get health check task bad request response has a 4xx status code
func (o *GetHealthCheckTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get health check task bad request response has a 5xx status code
func (o *GetHealthCheckTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get health check task bad request response a status code equal to that given
func (o *GetHealthCheckTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get health check task bad request response
func (o *GetHealthCheckTaskBadRequest) Code() int {
	return 400
}

func (o *GetHealthCheckTaskBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/system/health-summary][%d] getHealthCheckTaskBadRequest  %+v", 400, o.Payload)
}

func (o *GetHealthCheckTaskBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/system/health-summary][%d] getHealthCheckTaskBadRequest  %+v", 400, o.Payload)
}

func (o *GetHealthCheckTaskBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetHealthCheckTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHealthCheckTaskUnauthorized creates a GetHealthCheckTaskUnauthorized with default headers values
func NewGetHealthCheckTaskUnauthorized() *GetHealthCheckTaskUnauthorized {
	return &GetHealthCheckTaskUnauthorized{}
}

/*
GetHealthCheckTaskUnauthorized describes a response with status code 401, with default header values.

Bad request! Authorization Header is missing or not in correct format.
*/
type GetHealthCheckTaskUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get health check task unauthorized response has a 2xx status code
func (o *GetHealthCheckTaskUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get health check task unauthorized response has a 3xx status code
func (o *GetHealthCheckTaskUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get health check task unauthorized response has a 4xx status code
func (o *GetHealthCheckTaskUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get health check task unauthorized response has a 5xx status code
func (o *GetHealthCheckTaskUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get health check task unauthorized response a status code equal to that given
func (o *GetHealthCheckTaskUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get health check task unauthorized response
func (o *GetHealthCheckTaskUnauthorized) Code() int {
	return 401
}

func (o *GetHealthCheckTaskUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/system/health-summary][%d] getHealthCheckTaskUnauthorized  %+v", 401, o.Payload)
}

func (o *GetHealthCheckTaskUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/system/health-summary][%d] getHealthCheckTaskUnauthorized  %+v", 401, o.Payload)
}

func (o *GetHealthCheckTaskUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetHealthCheckTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHealthCheckTaskInternalServerError creates a GetHealthCheckTaskInternalServerError with default headers values
func NewGetHealthCheckTaskInternalServerError() *GetHealthCheckTaskInternalServerError {
	return &GetHealthCheckTaskInternalServerError{}
}

/*
GetHealthCheckTaskInternalServerError describes a response with status code 500, with default header values.

Something went wrong. Internal server error occurred. Error {error}
*/
type GetHealthCheckTaskInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get health check task internal server error response has a 2xx status code
func (o *GetHealthCheckTaskInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get health check task internal server error response has a 3xx status code
func (o *GetHealthCheckTaskInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get health check task internal server error response has a 4xx status code
func (o *GetHealthCheckTaskInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get health check task internal server error response has a 5xx status code
func (o *GetHealthCheckTaskInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get health check task internal server error response a status code equal to that given
func (o *GetHealthCheckTaskInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get health check task internal server error response
func (o *GetHealthCheckTaskInternalServerError) Code() int {
	return 500
}

func (o *GetHealthCheckTaskInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/system/health-summary][%d] getHealthCheckTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *GetHealthCheckTaskInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/system/health-summary][%d] getHealthCheckTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *GetHealthCheckTaskInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetHealthCheckTaskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
