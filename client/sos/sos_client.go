// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package sos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sos API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sos API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ExportHealthCheckByID(params *ExportHealthCheckByIDParams, opts ...ClientOption) (*ExportHealthCheckByIDOK, error)

	ExportSupportBundleByID(params *ExportSupportBundleByIDParams, opts ...ClientOption) (*ExportSupportBundleByIDOK, error)

	GetHealthCheckStatus(params *GetHealthCheckStatusParams, opts ...ClientOption) (*GetHealthCheckStatusOK, error)

	GetHealthCheckTask(params *GetHealthCheckTaskParams, opts ...ClientOption) (*GetHealthCheckTaskOK, error)

	GetSupportBundleStatus(params *GetSupportBundleStatusParams, opts ...ClientOption) (*GetSupportBundleStatusOK, error)

	GetSupportBundleTask(params *GetSupportBundleTaskParams, opts ...ClientOption) (*GetSupportBundleTaskOK, error)

	StartHealthCheck(params *StartHealthCheckParams, opts ...ClientOption) (*StartHealthCheckOK, *StartHealthCheckAccepted, error)

	StartSupportBundle(params *StartSupportBundleParams, opts ...ClientOption) (*StartSupportBundleOK, *StartSupportBundleAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ExportHealthCheckByID downloads a health check tar gz by its ID
*/
func (a *Client) ExportHealthCheckByID(params *ExportHealthCheckByIDParams, opts ...ClientOption) (*ExportHealthCheckByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportHealthCheckByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "exportHealthCheckByID",
		Method:             "GET",
		PathPattern:        "/v1/system/health-summary/{id}/data",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExportHealthCheckByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportHealthCheckByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportHealthCheckByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExportSupportBundleByID downloads a support bundle tar gz by ID
*/
func (a *Client) ExportSupportBundleByID(params *ExportSupportBundleByIDParams, opts ...ClientOption) (*ExportSupportBundleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportSupportBundleByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "exportSupportBundleByID",
		Method:             "GET",
		PathPattern:        "/v1/system/support-bundles/{id}/data",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExportSupportBundleByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportSupportBundleByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportSupportBundleByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHealthCheckStatus retrieves the status of the health check operations
*/
func (a *Client) GetHealthCheckStatus(params *GetHealthCheckStatusParams, opts ...ClientOption) (*GetHealthCheckStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHealthCheckStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHealthCheckStatus",
		Method:             "GET",
		PathPattern:        "/v1/system/health-summary/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHealthCheckStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHealthCheckStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHealthCheckStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHealthCheckTask retieves a list of health check tasks
*/
func (a *Client) GetHealthCheckTask(params *GetHealthCheckTaskParams, opts ...ClientOption) (*GetHealthCheckTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHealthCheckTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHealthCheckTask",
		Method:             "GET",
		PathPattern:        "/v1/system/health-summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHealthCheckTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHealthCheckTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHealthCheckTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSupportBundleStatus retrives the status of the support bundle operation
*/
func (a *Client) GetSupportBundleStatus(params *GetSupportBundleStatusParams, opts ...ClientOption) (*GetSupportBundleStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSupportBundleStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSupportBundleStatus",
		Method:             "GET",
		PathPattern:        "/v1/system/support-bundles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSupportBundleStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSupportBundleStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSupportBundleStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSupportBundleTask retrieves a list of support bundle tasks
*/
func (a *Client) GetSupportBundleTask(params *GetSupportBundleTaskParams, opts ...ClientOption) (*GetSupportBundleTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSupportBundleTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSupportBundleTask",
		Method:             "GET",
		PathPattern:        "/v1/system/support-bundles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSupportBundleTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSupportBundleTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSupportBundleTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartHealthCheck starts a health check operation using so s
*/
func (a *Client) StartHealthCheck(params *StartHealthCheckParams, opts ...ClientOption) (*StartHealthCheckOK, *StartHealthCheckAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartHealthCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startHealthCheck",
		Method:             "POST",
		PathPattern:        "/v1/system/health-summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartHealthCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StartHealthCheckOK:
		return value, nil, nil
	case *StartHealthCheckAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartSupportBundle starts a support bundle operation using so s
*/
func (a *Client) StartSupportBundle(params *StartSupportBundleParams, opts ...ClientOption) (*StartSupportBundleOK, *StartSupportBundleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartSupportBundleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startSupportBundle",
		Method:             "POST",
		PathPattern:        "/v1/system/support-bundles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartSupportBundleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StartSupportBundleOK:
		return value, nil, nil
	case *StartSupportBundleAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
