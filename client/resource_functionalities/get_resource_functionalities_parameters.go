// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package resource_functionalities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetResourceFunctionalitiesParams creates a new GetResourceFunctionalitiesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetResourceFunctionalitiesParams() *GetResourceFunctionalitiesParams {
	return &GetResourceFunctionalitiesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetResourceFunctionalitiesParamsWithTimeout creates a new GetResourceFunctionalitiesParams object
// with the ability to set a timeout on a request.
func NewGetResourceFunctionalitiesParamsWithTimeout(timeout time.Duration) *GetResourceFunctionalitiesParams {
	return &GetResourceFunctionalitiesParams{
		timeout: timeout,
	}
}

// NewGetResourceFunctionalitiesParamsWithContext creates a new GetResourceFunctionalitiesParams object
// with the ability to set a context for a request.
func NewGetResourceFunctionalitiesParamsWithContext(ctx context.Context) *GetResourceFunctionalitiesParams {
	return &GetResourceFunctionalitiesParams{
		Context: ctx,
	}
}

// NewGetResourceFunctionalitiesParamsWithHTTPClient creates a new GetResourceFunctionalitiesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetResourceFunctionalitiesParamsWithHTTPClient(client *http.Client) *GetResourceFunctionalitiesParams {
	return &GetResourceFunctionalitiesParams{
		HTTPClient: client,
	}
}

/*
GetResourceFunctionalitiesParams contains all the parameters to send to the API endpoint

	for the get resource functionalities operation.

	Typically these are written to a http.Request.
*/
type GetResourceFunctionalitiesParams struct {

	/* FunctionalityType.

	   Functionality type
	*/
	FunctionalityType *string

	/* IsAllowed.

	   Allowed or disallowed resource functionalities
	*/
	IsAllowed *bool

	/* ParentResourceType.

	   Parent resource type
	*/
	ParentResourceType *string

	/* ResourceIds.

	   Resource IDs
	*/
	ResourceIds []string

	/* ResourceType.

	   Resource type
	*/
	ResourceType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get resource functionalities params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResourceFunctionalitiesParams) WithDefaults() *GetResourceFunctionalitiesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get resource functionalities params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResourceFunctionalitiesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) WithTimeout(timeout time.Duration) *GetResourceFunctionalitiesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) WithContext(ctx context.Context) *GetResourceFunctionalitiesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) WithHTTPClient(client *http.Client) *GetResourceFunctionalitiesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFunctionalityType adds the functionalityType to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) WithFunctionalityType(functionalityType *string) *GetResourceFunctionalitiesParams {
	o.SetFunctionalityType(functionalityType)
	return o
}

// SetFunctionalityType adds the functionalityType to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) SetFunctionalityType(functionalityType *string) {
	o.FunctionalityType = functionalityType
}

// WithIsAllowed adds the isAllowed to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) WithIsAllowed(isAllowed *bool) *GetResourceFunctionalitiesParams {
	o.SetIsAllowed(isAllowed)
	return o
}

// SetIsAllowed adds the isAllowed to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) SetIsAllowed(isAllowed *bool) {
	o.IsAllowed = isAllowed
}

// WithParentResourceType adds the parentResourceType to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) WithParentResourceType(parentResourceType *string) *GetResourceFunctionalitiesParams {
	o.SetParentResourceType(parentResourceType)
	return o
}

// SetParentResourceType adds the parentResourceType to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) SetParentResourceType(parentResourceType *string) {
	o.ParentResourceType = parentResourceType
}

// WithResourceIds adds the resourceIds to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) WithResourceIds(resourceIds []string) *GetResourceFunctionalitiesParams {
	o.SetResourceIds(resourceIds)
	return o
}

// SetResourceIds adds the resourceIds to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) SetResourceIds(resourceIds []string) {
	o.ResourceIds = resourceIds
}

// WithResourceType adds the resourceType to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) WithResourceType(resourceType *string) *GetResourceFunctionalitiesParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the get resource functionalities params
func (o *GetResourceFunctionalitiesParams) SetResourceType(resourceType *string) {
	o.ResourceType = resourceType
}

// WriteToRequest writes these params to a swagger request
func (o *GetResourceFunctionalitiesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FunctionalityType != nil {

		// query param functionalityType
		var qrFunctionalityType string

		if o.FunctionalityType != nil {
			qrFunctionalityType = *o.FunctionalityType
		}
		qFunctionalityType := qrFunctionalityType
		if qFunctionalityType != "" {

			if err := r.SetQueryParam("functionalityType", qFunctionalityType); err != nil {
				return err
			}
		}
	}

	if o.IsAllowed != nil {

		// query param isAllowed
		var qrIsAllowed bool

		if o.IsAllowed != nil {
			qrIsAllowed = *o.IsAllowed
		}
		qIsAllowed := swag.FormatBool(qrIsAllowed)
		if qIsAllowed != "" {

			if err := r.SetQueryParam("isAllowed", qIsAllowed); err != nil {
				return err
			}
		}
	}

	if o.ParentResourceType != nil {

		// query param parentResourceType
		var qrParentResourceType string

		if o.ParentResourceType != nil {
			qrParentResourceType = *o.ParentResourceType
		}
		qParentResourceType := qrParentResourceType
		if qParentResourceType != "" {

			if err := r.SetQueryParam("parentResourceType", qParentResourceType); err != nil {
				return err
			}
		}
	}

	if o.ResourceIds != nil {

		// binding items for resourceIds
		joinedResourceIds := o.bindParamResourceIds(reg)

		// query array param resourceIds
		if err := r.SetQueryParam("resourceIds", joinedResourceIds...); err != nil {
			return err
		}
	}

	if o.ResourceType != nil {

		// query param resourceType
		var qrResourceType string

		if o.ResourceType != nil {
			qrResourceType = *o.ResourceType
		}
		qResourceType := qrResourceType
		if qResourceType != "" {

			if err := r.SetQueryParam("resourceType", qResourceType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetResourceFunctionalities binds the parameter resourceIds
func (o *GetResourceFunctionalitiesParams) bindParamResourceIds(formats strfmt.Registry) []string {
	resourceIdsIR := o.ResourceIds

	var resourceIdsIC []string
	for _, resourceIdsIIR := range resourceIdsIR { // explode []string

		resourceIdsIIV := resourceIdsIIR // string as string
		resourceIdsIC = append(resourceIdsIC, resourceIdsIIV)
	}

	// items.CollectionFormat: "multi"
	resourceIdsIS := swag.JoinByFormat(resourceIdsIC, "multi")

	return resourceIdsIS
}
