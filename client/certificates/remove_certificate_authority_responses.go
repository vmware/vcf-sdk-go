// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// RemoveCertificateAuthorityReader is a Reader for the RemoveCertificateAuthority structure.
type RemoveCertificateAuthorityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveCertificateAuthorityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveCertificateAuthorityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRemoveCertificateAuthorityNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveCertificateAuthorityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveCertificateAuthorityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveCertificateAuthorityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/certificate-authorities/{id}] removeCertificateAuthority", response, response.Code())
	}
}

// NewRemoveCertificateAuthorityOK creates a RemoveCertificateAuthorityOK with default headers values
func NewRemoveCertificateAuthorityOK() *RemoveCertificateAuthorityOK {
	return &RemoveCertificateAuthorityOK{}
}

/*
RemoveCertificateAuthorityOK describes a response with status code 200, with default header values.

OK
*/
type RemoveCertificateAuthorityOK struct {
	Payload interface{}
}

// IsSuccess returns true when this remove certificate authority o k response has a 2xx status code
func (o *RemoveCertificateAuthorityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove certificate authority o k response has a 3xx status code
func (o *RemoveCertificateAuthorityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove certificate authority o k response has a 4xx status code
func (o *RemoveCertificateAuthorityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove certificate authority o k response has a 5xx status code
func (o *RemoveCertificateAuthorityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this remove certificate authority o k response a status code equal to that given
func (o *RemoveCertificateAuthorityOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the remove certificate authority o k response
func (o *RemoveCertificateAuthorityOK) Code() int {
	return 200
}

func (o *RemoveCertificateAuthorityOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/certificate-authorities/{id}][%d] removeCertificateAuthorityOK  %+v", 200, o.Payload)
}

func (o *RemoveCertificateAuthorityOK) String() string {
	return fmt.Sprintf("[DELETE /v1/certificate-authorities/{id}][%d] removeCertificateAuthorityOK  %+v", 200, o.Payload)
}

func (o *RemoveCertificateAuthorityOK) GetPayload() interface{} {
	return o.Payload
}

func (o *RemoveCertificateAuthorityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveCertificateAuthorityNoContent creates a RemoveCertificateAuthorityNoContent with default headers values
func NewRemoveCertificateAuthorityNoContent() *RemoveCertificateAuthorityNoContent {
	return &RemoveCertificateAuthorityNoContent{}
}

/*
RemoveCertificateAuthorityNoContent describes a response with status code 204, with default header values.

No content
*/
type RemoveCertificateAuthorityNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this remove certificate authority no content response has a 2xx status code
func (o *RemoveCertificateAuthorityNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove certificate authority no content response has a 3xx status code
func (o *RemoveCertificateAuthorityNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove certificate authority no content response has a 4xx status code
func (o *RemoveCertificateAuthorityNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove certificate authority no content response has a 5xx status code
func (o *RemoveCertificateAuthorityNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this remove certificate authority no content response a status code equal to that given
func (o *RemoveCertificateAuthorityNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the remove certificate authority no content response
func (o *RemoveCertificateAuthorityNoContent) Code() int {
	return 204
}

func (o *RemoveCertificateAuthorityNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/certificate-authorities/{id}][%d] removeCertificateAuthorityNoContent  %+v", 204, o.Payload)
}

func (o *RemoveCertificateAuthorityNoContent) String() string {
	return fmt.Sprintf("[DELETE /v1/certificate-authorities/{id}][%d] removeCertificateAuthorityNoContent  %+v", 204, o.Payload)
}

func (o *RemoveCertificateAuthorityNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *RemoveCertificateAuthorityNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveCertificateAuthorityBadRequest creates a RemoveCertificateAuthorityBadRequest with default headers values
func NewRemoveCertificateAuthorityBadRequest() *RemoveCertificateAuthorityBadRequest {
	return &RemoveCertificateAuthorityBadRequest{}
}

/*
RemoveCertificateAuthorityBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RemoveCertificateAuthorityBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove certificate authority bad request response has a 2xx status code
func (o *RemoveCertificateAuthorityBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove certificate authority bad request response has a 3xx status code
func (o *RemoveCertificateAuthorityBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove certificate authority bad request response has a 4xx status code
func (o *RemoveCertificateAuthorityBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove certificate authority bad request response has a 5xx status code
func (o *RemoveCertificateAuthorityBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove certificate authority bad request response a status code equal to that given
func (o *RemoveCertificateAuthorityBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the remove certificate authority bad request response
func (o *RemoveCertificateAuthorityBadRequest) Code() int {
	return 400
}

func (o *RemoveCertificateAuthorityBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/certificate-authorities/{id}][%d] removeCertificateAuthorityBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveCertificateAuthorityBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/certificate-authorities/{id}][%d] removeCertificateAuthorityBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveCertificateAuthorityBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveCertificateAuthorityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveCertificateAuthorityNotFound creates a RemoveCertificateAuthorityNotFound with default headers values
func NewRemoveCertificateAuthorityNotFound() *RemoveCertificateAuthorityNotFound {
	return &RemoveCertificateAuthorityNotFound{}
}

/*
RemoveCertificateAuthorityNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RemoveCertificateAuthorityNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove certificate authority not found response has a 2xx status code
func (o *RemoveCertificateAuthorityNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove certificate authority not found response has a 3xx status code
func (o *RemoveCertificateAuthorityNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove certificate authority not found response has a 4xx status code
func (o *RemoveCertificateAuthorityNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove certificate authority not found response has a 5xx status code
func (o *RemoveCertificateAuthorityNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this remove certificate authority not found response a status code equal to that given
func (o *RemoveCertificateAuthorityNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the remove certificate authority not found response
func (o *RemoveCertificateAuthorityNotFound) Code() int {
	return 404
}

func (o *RemoveCertificateAuthorityNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/certificate-authorities/{id}][%d] removeCertificateAuthorityNotFound  %+v", 404, o.Payload)
}

func (o *RemoveCertificateAuthorityNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/certificate-authorities/{id}][%d] removeCertificateAuthorityNotFound  %+v", 404, o.Payload)
}

func (o *RemoveCertificateAuthorityNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveCertificateAuthorityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveCertificateAuthorityInternalServerError creates a RemoveCertificateAuthorityInternalServerError with default headers values
func NewRemoveCertificateAuthorityInternalServerError() *RemoveCertificateAuthorityInternalServerError {
	return &RemoveCertificateAuthorityInternalServerError{}
}

/*
RemoveCertificateAuthorityInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type RemoveCertificateAuthorityInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove certificate authority internal server error response has a 2xx status code
func (o *RemoveCertificateAuthorityInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove certificate authority internal server error response has a 3xx status code
func (o *RemoveCertificateAuthorityInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove certificate authority internal server error response has a 4xx status code
func (o *RemoveCertificateAuthorityInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove certificate authority internal server error response has a 5xx status code
func (o *RemoveCertificateAuthorityInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remove certificate authority internal server error response a status code equal to that given
func (o *RemoveCertificateAuthorityInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remove certificate authority internal server error response
func (o *RemoveCertificateAuthorityInternalServerError) Code() int {
	return 500
}

func (o *RemoveCertificateAuthorityInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/certificate-authorities/{id}][%d] removeCertificateAuthorityInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveCertificateAuthorityInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/certificate-authorities/{id}][%d] removeCertificateAuthorityInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveCertificateAuthorityInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveCertificateAuthorityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
