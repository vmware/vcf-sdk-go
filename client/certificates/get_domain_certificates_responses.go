// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetDomainCertificatesReader is a Reader for the GetDomainCertificates structure.
type GetDomainCertificatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDomainCertificatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDomainCertificatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetDomainCertificatesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDomainCertificatesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/domains/{id}/certificates] getDomainCertificates", response, response.Code())
	}
}

// NewGetDomainCertificatesOK creates a GetDomainCertificatesOK with default headers values
func NewGetDomainCertificatesOK() *GetDomainCertificatesOK {
	return &GetDomainCertificatesOK{}
}

/*
GetDomainCertificatesOK describes a response with status code 200, with default header values.

OK
*/
type GetDomainCertificatesOK struct {
	Payload *models.PageOfCertificate
}

// IsSuccess returns true when this get domain certificates o k response has a 2xx status code
func (o *GetDomainCertificatesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get domain certificates o k response has a 3xx status code
func (o *GetDomainCertificatesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain certificates o k response has a 4xx status code
func (o *GetDomainCertificatesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get domain certificates o k response has a 5xx status code
func (o *GetDomainCertificatesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain certificates o k response a status code equal to that given
func (o *GetDomainCertificatesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get domain certificates o k response
func (o *GetDomainCertificatesOK) Code() int {
	return 200
}

func (o *GetDomainCertificatesOK) Error() string {
	return fmt.Sprintf("[GET /v1/domains/{id}/certificates][%d] getDomainCertificatesOK  %+v", 200, o.Payload)
}

func (o *GetDomainCertificatesOK) String() string {
	return fmt.Sprintf("[GET /v1/domains/{id}/certificates][%d] getDomainCertificatesOK  %+v", 200, o.Payload)
}

func (o *GetDomainCertificatesOK) GetPayload() *models.PageOfCertificate {
	return o.Payload
}

func (o *GetDomainCertificatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageOfCertificate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainCertificatesNotFound creates a GetDomainCertificatesNotFound with default headers values
func NewGetDomainCertificatesNotFound() *GetDomainCertificatesNotFound {
	return &GetDomainCertificatesNotFound{}
}

/*
GetDomainCertificatesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetDomainCertificatesNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get domain certificates not found response has a 2xx status code
func (o *GetDomainCertificatesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain certificates not found response has a 3xx status code
func (o *GetDomainCertificatesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain certificates not found response has a 4xx status code
func (o *GetDomainCertificatesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domain certificates not found response has a 5xx status code
func (o *GetDomainCertificatesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain certificates not found response a status code equal to that given
func (o *GetDomainCertificatesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get domain certificates not found response
func (o *GetDomainCertificatesNotFound) Code() int {
	return 404
}

func (o *GetDomainCertificatesNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/domains/{id}/certificates][%d] getDomainCertificatesNotFound  %+v", 404, o.Payload)
}

func (o *GetDomainCertificatesNotFound) String() string {
	return fmt.Sprintf("[GET /v1/domains/{id}/certificates][%d] getDomainCertificatesNotFound  %+v", 404, o.Payload)
}

func (o *GetDomainCertificatesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDomainCertificatesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainCertificatesInternalServerError creates a GetDomainCertificatesInternalServerError with default headers values
func NewGetDomainCertificatesInternalServerError() *GetDomainCertificatesInternalServerError {
	return &GetDomainCertificatesInternalServerError{}
}

/*
GetDomainCertificatesInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetDomainCertificatesInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get domain certificates internal server error response has a 2xx status code
func (o *GetDomainCertificatesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain certificates internal server error response has a 3xx status code
func (o *GetDomainCertificatesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain certificates internal server error response has a 4xx status code
func (o *GetDomainCertificatesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get domain certificates internal server error response has a 5xx status code
func (o *GetDomainCertificatesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get domain certificates internal server error response a status code equal to that given
func (o *GetDomainCertificatesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get domain certificates internal server error response
func (o *GetDomainCertificatesInternalServerError) Code() int {
	return 500
}

func (o *GetDomainCertificatesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/domains/{id}/certificates][%d] getDomainCertificatesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDomainCertificatesInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/domains/{id}/certificates][%d] getDomainCertificatesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDomainCertificatesInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDomainCertificatesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
