// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UploadCertificatesReader is a Reader for the UploadCertificates structure.
type UploadCertificatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadCertificatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadCertificatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadCertificatesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUploadCertificatesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadCertificatesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/domains/{id}/certificates/uploads] uploadCertificates", response, response.Code())
	}
}

// NewUploadCertificatesOK creates a UploadCertificatesOK with default headers values
func NewUploadCertificatesOK() *UploadCertificatesOK {
	return &UploadCertificatesOK{}
}

/*
UploadCertificatesOK describes a response with status code 200, with default header values.

OK
*/
type UploadCertificatesOK struct {
	Payload interface{}
}

// IsSuccess returns true when this upload certificates o k response has a 2xx status code
func (o *UploadCertificatesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upload certificates o k response has a 3xx status code
func (o *UploadCertificatesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload certificates o k response has a 4xx status code
func (o *UploadCertificatesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload certificates o k response has a 5xx status code
func (o *UploadCertificatesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upload certificates o k response a status code equal to that given
func (o *UploadCertificatesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upload certificates o k response
func (o *UploadCertificatesOK) Code() int {
	return 200
}

func (o *UploadCertificatesOK) Error() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/certificates/uploads][%d] uploadCertificatesOK  %+v", 200, o.Payload)
}

func (o *UploadCertificatesOK) String() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/certificates/uploads][%d] uploadCertificatesOK  %+v", 200, o.Payload)
}

func (o *UploadCertificatesOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UploadCertificatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadCertificatesBadRequest creates a UploadCertificatesBadRequest with default headers values
func NewUploadCertificatesBadRequest() *UploadCertificatesBadRequest {
	return &UploadCertificatesBadRequest{}
}

/*
UploadCertificatesBadRequest describes a response with status code 400, with default header values.

Bad request.
*/
type UploadCertificatesBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this upload certificates bad request response has a 2xx status code
func (o *UploadCertificatesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload certificates bad request response has a 3xx status code
func (o *UploadCertificatesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload certificates bad request response has a 4xx status code
func (o *UploadCertificatesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload certificates bad request response has a 5xx status code
func (o *UploadCertificatesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upload certificates bad request response a status code equal to that given
func (o *UploadCertificatesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the upload certificates bad request response
func (o *UploadCertificatesBadRequest) Code() int {
	return 400
}

func (o *UploadCertificatesBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/certificates/uploads][%d] uploadCertificatesBadRequest  %+v", 400, o.Payload)
}

func (o *UploadCertificatesBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/certificates/uploads][%d] uploadCertificatesBadRequest  %+v", 400, o.Payload)
}

func (o *UploadCertificatesBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UploadCertificatesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadCertificatesNotFound creates a UploadCertificatesNotFound with default headers values
func NewUploadCertificatesNotFound() *UploadCertificatesNotFound {
	return &UploadCertificatesNotFound{}
}

/*
UploadCertificatesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UploadCertificatesNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this upload certificates not found response has a 2xx status code
func (o *UploadCertificatesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload certificates not found response has a 3xx status code
func (o *UploadCertificatesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload certificates not found response has a 4xx status code
func (o *UploadCertificatesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload certificates not found response has a 5xx status code
func (o *UploadCertificatesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this upload certificates not found response a status code equal to that given
func (o *UploadCertificatesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the upload certificates not found response
func (o *UploadCertificatesNotFound) Code() int {
	return 404
}

func (o *UploadCertificatesNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/certificates/uploads][%d] uploadCertificatesNotFound  %+v", 404, o.Payload)
}

func (o *UploadCertificatesNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/certificates/uploads][%d] uploadCertificatesNotFound  %+v", 404, o.Payload)
}

func (o *UploadCertificatesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UploadCertificatesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadCertificatesInternalServerError creates a UploadCertificatesInternalServerError with default headers values
func NewUploadCertificatesInternalServerError() *UploadCertificatesInternalServerError {
	return &UploadCertificatesInternalServerError{}
}

/*
UploadCertificatesInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UploadCertificatesInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this upload certificates internal server error response has a 2xx status code
func (o *UploadCertificatesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload certificates internal server error response has a 3xx status code
func (o *UploadCertificatesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload certificates internal server error response has a 4xx status code
func (o *UploadCertificatesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload certificates internal server error response has a 5xx status code
func (o *UploadCertificatesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upload certificates internal server error response a status code equal to that given
func (o *UploadCertificatesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the upload certificates internal server error response
func (o *UploadCertificatesInternalServerError) Code() int {
	return 500
}

func (o *UploadCertificatesInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/certificates/uploads][%d] uploadCertificatesInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadCertificatesInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/certificates/uploads][%d] uploadCertificatesInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadCertificatesInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UploadCertificatesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
