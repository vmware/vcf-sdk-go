// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetCertificateAuthoritiesReader is a Reader for the GetCertificateAuthorities structure.
type GetCertificateAuthoritiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCertificateAuthoritiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCertificateAuthoritiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCertificateAuthoritiesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCertificateAuthoritiesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCertificateAuthoritiesOK creates a GetCertificateAuthoritiesOK with default headers values
func NewGetCertificateAuthoritiesOK() *GetCertificateAuthoritiesOK {
	return &GetCertificateAuthoritiesOK{}
}

/*
GetCertificateAuthoritiesOK describes a response with status code 200, with default header values.

OK
*/
type GetCertificateAuthoritiesOK struct {
	Payload *models.PageOfCertificateAuthority
}

// IsSuccess returns true when this get certificate authorities o k response has a 2xx status code
func (o *GetCertificateAuthoritiesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get certificate authorities o k response has a 3xx status code
func (o *GetCertificateAuthoritiesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate authorities o k response has a 4xx status code
func (o *GetCertificateAuthoritiesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get certificate authorities o k response has a 5xx status code
func (o *GetCertificateAuthoritiesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate authorities o k response a status code equal to that given
func (o *GetCertificateAuthoritiesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetCertificateAuthoritiesOK) Error() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities][%d] getCertificateAuthoritiesOK  %+v", 200, o.Payload)
}

func (o *GetCertificateAuthoritiesOK) String() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities][%d] getCertificateAuthoritiesOK  %+v", 200, o.Payload)
}

func (o *GetCertificateAuthoritiesOK) GetPayload() *models.PageOfCertificateAuthority {
	return o.Payload
}

func (o *GetCertificateAuthoritiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageOfCertificateAuthority)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateAuthoritiesBadRequest creates a GetCertificateAuthoritiesBadRequest with default headers values
func NewGetCertificateAuthoritiesBadRequest() *GetCertificateAuthoritiesBadRequest {
	return &GetCertificateAuthoritiesBadRequest{}
}

/*
GetCertificateAuthoritiesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetCertificateAuthoritiesBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get certificate authorities bad request response has a 2xx status code
func (o *GetCertificateAuthoritiesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate authorities bad request response has a 3xx status code
func (o *GetCertificateAuthoritiesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate authorities bad request response has a 4xx status code
func (o *GetCertificateAuthoritiesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificate authorities bad request response has a 5xx status code
func (o *GetCertificateAuthoritiesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate authorities bad request response a status code equal to that given
func (o *GetCertificateAuthoritiesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetCertificateAuthoritiesBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities][%d] getCertificateAuthoritiesBadRequest  %+v", 400, o.Payload)
}

func (o *GetCertificateAuthoritiesBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities][%d] getCertificateAuthoritiesBadRequest  %+v", 400, o.Payload)
}

func (o *GetCertificateAuthoritiesBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCertificateAuthoritiesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateAuthoritiesInternalServerError creates a GetCertificateAuthoritiesInternalServerError with default headers values
func NewGetCertificateAuthoritiesInternalServerError() *GetCertificateAuthoritiesInternalServerError {
	return &GetCertificateAuthoritiesInternalServerError{}
}

/*
GetCertificateAuthoritiesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCertificateAuthoritiesInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get certificate authorities internal server error response has a 2xx status code
func (o *GetCertificateAuthoritiesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate authorities internal server error response has a 3xx status code
func (o *GetCertificateAuthoritiesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate authorities internal server error response has a 4xx status code
func (o *GetCertificateAuthoritiesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get certificate authorities internal server error response has a 5xx status code
func (o *GetCertificateAuthoritiesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get certificate authorities internal server error response a status code equal to that given
func (o *GetCertificateAuthoritiesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetCertificateAuthoritiesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities][%d] getCertificateAuthoritiesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCertificateAuthoritiesInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities][%d] getCertificateAuthoritiesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCertificateAuthoritiesInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCertificateAuthoritiesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
