// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetCertificateAuthorityByIDReader is a Reader for the GetCertificateAuthorityByID structure.
type GetCertificateAuthorityByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCertificateAuthorityByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCertificateAuthorityByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetCertificateAuthorityByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCertificateAuthorityByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCertificateAuthorityByIDOK creates a GetCertificateAuthorityByIDOK with default headers values
func NewGetCertificateAuthorityByIDOK() *GetCertificateAuthorityByIDOK {
	return &GetCertificateAuthorityByIDOK{}
}

/*
GetCertificateAuthorityByIDOK describes a response with status code 200, with default header values.

OK
*/
type GetCertificateAuthorityByIDOK struct {
	Payload *models.CertificateAuthority
}

// IsSuccess returns true when this get certificate authority by Id o k response has a 2xx status code
func (o *GetCertificateAuthorityByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get certificate authority by Id o k response has a 3xx status code
func (o *GetCertificateAuthorityByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate authority by Id o k response has a 4xx status code
func (o *GetCertificateAuthorityByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get certificate authority by Id o k response has a 5xx status code
func (o *GetCertificateAuthorityByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate authority by Id o k response a status code equal to that given
func (o *GetCertificateAuthorityByIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetCertificateAuthorityByIDOK) Error() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities/{id}][%d] getCertificateAuthorityByIdOK  %+v", 200, o.Payload)
}

func (o *GetCertificateAuthorityByIDOK) String() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities/{id}][%d] getCertificateAuthorityByIdOK  %+v", 200, o.Payload)
}

func (o *GetCertificateAuthorityByIDOK) GetPayload() *models.CertificateAuthority {
	return o.Payload
}

func (o *GetCertificateAuthorityByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateAuthority)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateAuthorityByIDNotFound creates a GetCertificateAuthorityByIDNotFound with default headers values
func NewGetCertificateAuthorityByIDNotFound() *GetCertificateAuthorityByIDNotFound {
	return &GetCertificateAuthorityByIDNotFound{}
}

/*
GetCertificateAuthorityByIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetCertificateAuthorityByIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get certificate authority by Id not found response has a 2xx status code
func (o *GetCertificateAuthorityByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate authority by Id not found response has a 3xx status code
func (o *GetCertificateAuthorityByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate authority by Id not found response has a 4xx status code
func (o *GetCertificateAuthorityByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificate authority by Id not found response has a 5xx status code
func (o *GetCertificateAuthorityByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate authority by Id not found response a status code equal to that given
func (o *GetCertificateAuthorityByIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetCertificateAuthorityByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities/{id}][%d] getCertificateAuthorityByIdNotFound  %+v", 404, o.Payload)
}

func (o *GetCertificateAuthorityByIDNotFound) String() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities/{id}][%d] getCertificateAuthorityByIdNotFound  %+v", 404, o.Payload)
}

func (o *GetCertificateAuthorityByIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCertificateAuthorityByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateAuthorityByIDInternalServerError creates a GetCertificateAuthorityByIDInternalServerError with default headers values
func NewGetCertificateAuthorityByIDInternalServerError() *GetCertificateAuthorityByIDInternalServerError {
	return &GetCertificateAuthorityByIDInternalServerError{}
}

/*
GetCertificateAuthorityByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCertificateAuthorityByIDInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get certificate authority by Id internal server error response has a 2xx status code
func (o *GetCertificateAuthorityByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate authority by Id internal server error response has a 3xx status code
func (o *GetCertificateAuthorityByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate authority by Id internal server error response has a 4xx status code
func (o *GetCertificateAuthorityByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get certificate authority by Id internal server error response has a 5xx status code
func (o *GetCertificateAuthorityByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get certificate authority by Id internal server error response a status code equal to that given
func (o *GetCertificateAuthorityByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetCertificateAuthorityByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities/{id}][%d] getCertificateAuthorityByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCertificateAuthorityByIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities/{id}][%d] getCertificateAuthorityByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCertificateAuthorityByIDInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCertificateAuthorityByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
