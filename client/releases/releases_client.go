// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new releases API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for releases API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetFutureReleases(params *GetFutureReleasesParams, opts ...ClientOption) (*GetFutureReleasesOK, error)

	GetReleases(params *GetReleasesParams, opts ...ClientOption) (*GetReleasesOK, error)

	GetSystemRelease(params *GetSystemReleaseParams, opts ...ClientOption) (*GetSystemReleaseOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetFutureReleases returns all known to the system future target versions for a domain

Returns all known to the system future target versions for a domain. If some of them are not allowed (e.g. stepping stone) includes message why.
*/
func (a *Client) GetFutureReleases(params *GetFutureReleasesParams, opts ...ClientOption) (*GetFutureReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFutureReleasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFutureReleases",
		Method:             "GET",
		PathPattern:        "/v1/releases/domains/{domainId}/future-releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFutureReleasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFutureReleasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFutureReleases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReleases gets releases

Get all Releases, with option to get current release for a domain, get release by version or get future releases for a versionor get all the applicable target release.
*/
func (a *Client) GetReleases(params *GetReleasesParams, opts ...ClientOption) (*GetReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReleases",
		Method:             "GET",
		PathPattern:        "/v1/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReleasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSystemRelease gets system release

Returns release for the lowest deployed VCF version for a domain on the environment.If Management domain is ahead of WLD domain, VCF BOM version for the WLDdomain will be returned.
*/
func (a *Client) GetSystemRelease(params *GetSystemReleaseParams, opts ...ClientOption) (*GetSystemReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSystemRelease",
		Method:             "GET",
		PathPattern:        "/v1/releases/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSystemReleaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystemRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
