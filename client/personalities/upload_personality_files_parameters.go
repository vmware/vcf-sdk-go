// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package personalities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUploadPersonalityFilesParams creates a new UploadPersonalityFilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadPersonalityFilesParams() *UploadPersonalityFilesParams {
	return &UploadPersonalityFilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadPersonalityFilesParamsWithTimeout creates a new UploadPersonalityFilesParams object
// with the ability to set a timeout on a request.
func NewUploadPersonalityFilesParamsWithTimeout(timeout time.Duration) *UploadPersonalityFilesParams {
	return &UploadPersonalityFilesParams{
		timeout: timeout,
	}
}

// NewUploadPersonalityFilesParamsWithContext creates a new UploadPersonalityFilesParams object
// with the ability to set a context for a request.
func NewUploadPersonalityFilesParamsWithContext(ctx context.Context) *UploadPersonalityFilesParams {
	return &UploadPersonalityFilesParams{
		Context: ctx,
	}
}

// NewUploadPersonalityFilesParamsWithHTTPClient creates a new UploadPersonalityFilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewUploadPersonalityFilesParamsWithHTTPClient(client *http.Client) *UploadPersonalityFilesParams {
	return &UploadPersonalityFilesParams{
		HTTPClient: client,
	}
}

/*
UploadPersonalityFilesParams contains all the parameters to send to the API endpoint

	for the upload personality files operation.

	Typically these are written to a http.Request.
*/
type UploadPersonalityFilesParams struct {

	/* Files.

	   files
	*/
	Files []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload personality files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadPersonalityFilesParams) WithDefaults() *UploadPersonalityFilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload personality files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadPersonalityFilesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the upload personality files params
func (o *UploadPersonalityFilesParams) WithTimeout(timeout time.Duration) *UploadPersonalityFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload personality files params
func (o *UploadPersonalityFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload personality files params
func (o *UploadPersonalityFilesParams) WithContext(ctx context.Context) *UploadPersonalityFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload personality files params
func (o *UploadPersonalityFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload personality files params
func (o *UploadPersonalityFilesParams) WithHTTPClient(client *http.Client) *UploadPersonalityFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload personality files params
func (o *UploadPersonalityFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFiles adds the files to the upload personality files params
func (o *UploadPersonalityFilesParams) WithFiles(files []string) *UploadPersonalityFilesParams {
	o.SetFiles(files)
	return o
}

// SetFiles adds the files to the upload personality files params
func (o *UploadPersonalityFilesParams) SetFiles(files []string) {
	o.Files = files
}

// WriteToRequest writes these params to a swagger request
func (o *UploadPersonalityFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Files != nil {

		// binding items for files
		joinedFiles := o.bindParamFiles(reg)

		// query array param files
		if err := r.SetQueryParam("files", joinedFiles...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamUploadPersonalityFiles binds the parameter files
func (o *UploadPersonalityFilesParams) bindParamFiles(formats strfmt.Registry) []string {
	filesIR := o.Files

	var filesIC []string
	for _, filesIIR := range filesIR { // explode []string

		filesIIV := filesIIR // string as string
		filesIC = append(filesIC, filesIIV)
	}

	// items.CollectionFormat: "multi"
	filesIS := swag.JoinByFormat(filesIC, "multi")

	return filesIS
}
