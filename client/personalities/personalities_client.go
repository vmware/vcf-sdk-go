// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package personalities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new personalities API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for personalities API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeletePersonality(params *DeletePersonalityParams, opts ...ClientOption) (*DeletePersonalityOK, error)

	GetPersonalities(params *GetPersonalitiesParams, opts ...ClientOption) (*GetPersonalitiesOK, error)

	GetPersonality(params *GetPersonalityParams, opts ...ClientOption) (*GetPersonalityOK, error)

	UploadPersonality(params *UploadPersonalityParams, opts ...ClientOption) (*UploadPersonalityOK, *UploadPersonalityAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeletePersonality deletes the personality based on either name or id

Delete the personality based on either name or id
*/
func (a *Client) DeletePersonality(params *DeletePersonalityParams, opts ...ClientOption) (*DeletePersonalityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePersonalityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePersonality",
		Method:             "DELETE",
		PathPattern:        "/v1/personalities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePersonalityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePersonalityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePersonality: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPersonalities gets the personalities

Get the Personalities which are available via depot access.
*/
func (a *Client) GetPersonalities(params *GetPersonalitiesParams, opts ...ClientOption) (*GetPersonalitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPersonalitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPersonalities",
		Method:             "GET",
		PathPattern:        "/v1/personalities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPersonalitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPersonalitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPersonalities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPersonality gets personalities by Id

Get the Personality for id
*/
func (a *Client) GetPersonality(params *GetPersonalityParams, opts ...ClientOption) (*GetPersonalityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPersonalityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPersonality",
		Method:             "GET",
		PathPattern:        "/v1/personalities/{personalityId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPersonalityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPersonalityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPersonality: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadPersonality uploads a personality

Upload Personality to SDDC Manager.
*/
func (a *Client) UploadPersonality(params *UploadPersonalityParams, opts ...ClientOption) (*UploadPersonalityOK, *UploadPersonalityAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadPersonalityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadPersonality",
		Method:             "POST",
		PathPattern:        "/v1/personalities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadPersonalityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UploadPersonalityOK:
		return value, nil, nil
	case *UploadPersonalityAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for personalities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
