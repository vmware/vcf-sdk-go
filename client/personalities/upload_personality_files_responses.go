// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package personalities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UploadPersonalityFilesReader is a Reader for the UploadPersonalityFiles structure.
type UploadPersonalityFilesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadPersonalityFilesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadPersonalityFilesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadPersonalityFilesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUploadPersonalityFilesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadPersonalityFilesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/personalities/files] uploadPersonalityFiles", response, response.Code())
	}
}

// NewUploadPersonalityFilesOK creates a UploadPersonalityFilesOK with default headers values
func NewUploadPersonalityFilesOK() *UploadPersonalityFilesOK {
	return &UploadPersonalityFilesOK{}
}

/*
UploadPersonalityFilesOK describes a response with status code 200, with default header values.

OK
*/
type UploadPersonalityFilesOK struct {
	Payload string
}

// IsSuccess returns true when this upload personality files o k response has a 2xx status code
func (o *UploadPersonalityFilesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upload personality files o k response has a 3xx status code
func (o *UploadPersonalityFilesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload personality files o k response has a 4xx status code
func (o *UploadPersonalityFilesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload personality files o k response has a 5xx status code
func (o *UploadPersonalityFilesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upload personality files o k response a status code equal to that given
func (o *UploadPersonalityFilesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upload personality files o k response
func (o *UploadPersonalityFilesOK) Code() int {
	return 200
}

func (o *UploadPersonalityFilesOK) Error() string {
	return fmt.Sprintf("[PUT /v1/personalities/files][%d] uploadPersonalityFilesOK  %+v", 200, o.Payload)
}

func (o *UploadPersonalityFilesOK) String() string {
	return fmt.Sprintf("[PUT /v1/personalities/files][%d] uploadPersonalityFilesOK  %+v", 200, o.Payload)
}

func (o *UploadPersonalityFilesOK) GetPayload() string {
	return o.Payload
}

func (o *UploadPersonalityFilesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadPersonalityFilesBadRequest creates a UploadPersonalityFilesBadRequest with default headers values
func NewUploadPersonalityFilesBadRequest() *UploadPersonalityFilesBadRequest {
	return &UploadPersonalityFilesBadRequest{}
}

/*
UploadPersonalityFilesBadRequest describes a response with status code 400, with default header values.

Bad request.
*/
type UploadPersonalityFilesBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this upload personality files bad request response has a 2xx status code
func (o *UploadPersonalityFilesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload personality files bad request response has a 3xx status code
func (o *UploadPersonalityFilesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload personality files bad request response has a 4xx status code
func (o *UploadPersonalityFilesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload personality files bad request response has a 5xx status code
func (o *UploadPersonalityFilesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upload personality files bad request response a status code equal to that given
func (o *UploadPersonalityFilesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the upload personality files bad request response
func (o *UploadPersonalityFilesBadRequest) Code() int {
	return 400
}

func (o *UploadPersonalityFilesBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/personalities/files][%d] uploadPersonalityFilesBadRequest  %+v", 400, o.Payload)
}

func (o *UploadPersonalityFilesBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/personalities/files][%d] uploadPersonalityFilesBadRequest  %+v", 400, o.Payload)
}

func (o *UploadPersonalityFilesBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UploadPersonalityFilesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadPersonalityFilesNotFound creates a UploadPersonalityFilesNotFound with default headers values
func NewUploadPersonalityFilesNotFound() *UploadPersonalityFilesNotFound {
	return &UploadPersonalityFilesNotFound{}
}

/*
UploadPersonalityFilesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UploadPersonalityFilesNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this upload personality files not found response has a 2xx status code
func (o *UploadPersonalityFilesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload personality files not found response has a 3xx status code
func (o *UploadPersonalityFilesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload personality files not found response has a 4xx status code
func (o *UploadPersonalityFilesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload personality files not found response has a 5xx status code
func (o *UploadPersonalityFilesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this upload personality files not found response a status code equal to that given
func (o *UploadPersonalityFilesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the upload personality files not found response
func (o *UploadPersonalityFilesNotFound) Code() int {
	return 404
}

func (o *UploadPersonalityFilesNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/personalities/files][%d] uploadPersonalityFilesNotFound  %+v", 404, o.Payload)
}

func (o *UploadPersonalityFilesNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/personalities/files][%d] uploadPersonalityFilesNotFound  %+v", 404, o.Payload)
}

func (o *UploadPersonalityFilesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UploadPersonalityFilesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadPersonalityFilesInternalServerError creates a UploadPersonalityFilesInternalServerError with default headers values
func NewUploadPersonalityFilesInternalServerError() *UploadPersonalityFilesInternalServerError {
	return &UploadPersonalityFilesInternalServerError{}
}

/*
UploadPersonalityFilesInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UploadPersonalityFilesInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this upload personality files internal server error response has a 2xx status code
func (o *UploadPersonalityFilesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload personality files internal server error response has a 3xx status code
func (o *UploadPersonalityFilesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload personality files internal server error response has a 4xx status code
func (o *UploadPersonalityFilesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload personality files internal server error response has a 5xx status code
func (o *UploadPersonalityFilesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upload personality files internal server error response a status code equal to that given
func (o *UploadPersonalityFilesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the upload personality files internal server error response
func (o *UploadPersonalityFilesInternalServerError) Code() int {
	return 500
}

func (o *UploadPersonalityFilesInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/personalities/files][%d] uploadPersonalityFilesInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadPersonalityFilesInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/personalities/files][%d] uploadPersonalityFilesInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadPersonalityFilesInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UploadPersonalityFilesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
