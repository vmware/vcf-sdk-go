// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package version_aliases_for_bundle_component_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// DeleteAliasVersionsBySoftwareTypeAndBaseVersionReader is a Reader for the DeleteAliasVersionsBySoftwareTypeAndBaseVersion structure.
type DeleteAliasVersionsBySoftwareTypeAndBaseVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteAliasVersionsBySoftwareTypeAndBaseVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}/{version}] deleteAliasVersionsBySoftwareTypeAndBaseVersion", response, response.Code())
	}
}

// NewDeleteAliasVersionsBySoftwareTypeAndBaseVersionOK creates a DeleteAliasVersionsBySoftwareTypeAndBaseVersionOK with default headers values
func NewDeleteAliasVersionsBySoftwareTypeAndBaseVersionOK() *DeleteAliasVersionsBySoftwareTypeAndBaseVersionOK {
	return &DeleteAliasVersionsBySoftwareTypeAndBaseVersionOK{}
}

/*
DeleteAliasVersionsBySoftwareTypeAndBaseVersionOK describes a response with status code 200, with default header values.

OK
*/
type DeleteAliasVersionsBySoftwareTypeAndBaseVersionOK struct {
}

// IsSuccess returns true when this delete alias versions by software type and base version o k response has a 2xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete alias versions by software type and base version o k response has a 3xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete alias versions by software type and base version o k response has a 4xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete alias versions by software type and base version o k response has a 5xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete alias versions by software type and base version o k response a status code equal to that given
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete alias versions by software type and base version o k response
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionOK) Code() int {
	return 200
}

func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}/{version}][%d] deleteAliasVersionsBySoftwareTypeAndBaseVersionOK ", 200)
}

func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionOK) String() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}/{version}][%d] deleteAliasVersionsBySoftwareTypeAndBaseVersionOK ", 200)
}

func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent creates a DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent with default headers values
func NewDeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent() *DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent {
	return &DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent{}
}

/*
DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent struct {
}

// IsSuccess returns true when this delete alias versions by software type and base version no content response has a 2xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete alias versions by software type and base version no content response has a 3xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete alias versions by software type and base version no content response has a 4xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete alias versions by software type and base version no content response has a 5xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete alias versions by software type and base version no content response a status code equal to that given
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete alias versions by software type and base version no content response
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent) Code() int {
	return 204
}

func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}/{version}][%d] deleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent ", 204)
}

func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent) String() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}/{version}][%d] deleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent ", 204)
}

func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest creates a DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest with default headers values
func NewDeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest() *DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest {
	return &DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest{}
}

/*
DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete alias versions by software type and base version bad request response has a 2xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete alias versions by software type and base version bad request response has a 3xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete alias versions by software type and base version bad request response has a 4xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete alias versions by software type and base version bad request response has a 5xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete alias versions by software type and base version bad request response a status code equal to that given
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete alias versions by software type and base version bad request response
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest) Code() int {
	return 400
}

func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}/{version}][%d] deleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}/{version}][%d] deleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError creates a DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError with default headers values
func NewDeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError() *DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError {
	return &DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError{}
}

/*
DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete alias versions by software type and base version internal server error response has a 2xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete alias versions by software type and base version internal server error response has a 3xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete alias versions by software type and base version internal server error response has a 4xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete alias versions by software type and base version internal server error response has a 5xx status code
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete alias versions by software type and base version internal server error response a status code equal to that given
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete alias versions by software type and base version internal server error response
func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError) Code() int {
	return 500
}

func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}/{version}][%d] deleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}/{version}][%d] deleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
