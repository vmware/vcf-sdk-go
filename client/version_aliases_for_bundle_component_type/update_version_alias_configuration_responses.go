// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package version_aliases_for_bundle_component_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateVersionAliasConfigurationReader is a Reader for the UpdateVersionAliasConfiguration structure.
type UpdateVersionAliasConfigurationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVersionAliasConfigurationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVersionAliasConfigurationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVersionAliasConfigurationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVersionAliasConfigurationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/system/settings/version-aliases/{bundleComponentType}/{version}] updateVersionAliasConfiguration", response, response.Code())
	}
}

// NewUpdateVersionAliasConfigurationOK creates a UpdateVersionAliasConfigurationOK with default headers values
func NewUpdateVersionAliasConfigurationOK() *UpdateVersionAliasConfigurationOK {
	return &UpdateVersionAliasConfigurationOK{}
}

/*
UpdateVersionAliasConfigurationOK describes a response with status code 200, with default header values.

Ok
*/
type UpdateVersionAliasConfigurationOK struct {
	Payload *models.PageOfVersionAliasesForBundleComponentType
}

// IsSuccess returns true when this update version alias configuration o k response has a 2xx status code
func (o *UpdateVersionAliasConfigurationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update version alias configuration o k response has a 3xx status code
func (o *UpdateVersionAliasConfigurationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update version alias configuration o k response has a 4xx status code
func (o *UpdateVersionAliasConfigurationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update version alias configuration o k response has a 5xx status code
func (o *UpdateVersionAliasConfigurationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update version alias configuration o k response a status code equal to that given
func (o *UpdateVersionAliasConfigurationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update version alias configuration o k response
func (o *UpdateVersionAliasConfigurationOK) Code() int {
	return 200
}

func (o *UpdateVersionAliasConfigurationOK) Error() string {
	return fmt.Sprintf("[PUT /v1/system/settings/version-aliases/{bundleComponentType}/{version}][%d] updateVersionAliasConfigurationOK  %+v", 200, o.Payload)
}

func (o *UpdateVersionAliasConfigurationOK) String() string {
	return fmt.Sprintf("[PUT /v1/system/settings/version-aliases/{bundleComponentType}/{version}][%d] updateVersionAliasConfigurationOK  %+v", 200, o.Payload)
}

func (o *UpdateVersionAliasConfigurationOK) GetPayload() *models.PageOfVersionAliasesForBundleComponentType {
	return o.Payload
}

func (o *UpdateVersionAliasConfigurationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageOfVersionAliasesForBundleComponentType)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVersionAliasConfigurationBadRequest creates a UpdateVersionAliasConfigurationBadRequest with default headers values
func NewUpdateVersionAliasConfigurationBadRequest() *UpdateVersionAliasConfigurationBadRequest {
	return &UpdateVersionAliasConfigurationBadRequest{}
}

/*
UpdateVersionAliasConfigurationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateVersionAliasConfigurationBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update version alias configuration bad request response has a 2xx status code
func (o *UpdateVersionAliasConfigurationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update version alias configuration bad request response has a 3xx status code
func (o *UpdateVersionAliasConfigurationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update version alias configuration bad request response has a 4xx status code
func (o *UpdateVersionAliasConfigurationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update version alias configuration bad request response has a 5xx status code
func (o *UpdateVersionAliasConfigurationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update version alias configuration bad request response a status code equal to that given
func (o *UpdateVersionAliasConfigurationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update version alias configuration bad request response
func (o *UpdateVersionAliasConfigurationBadRequest) Code() int {
	return 400
}

func (o *UpdateVersionAliasConfigurationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/system/settings/version-aliases/{bundleComponentType}/{version}][%d] updateVersionAliasConfigurationBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVersionAliasConfigurationBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/system/settings/version-aliases/{bundleComponentType}/{version}][%d] updateVersionAliasConfigurationBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVersionAliasConfigurationBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVersionAliasConfigurationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVersionAliasConfigurationInternalServerError creates a UpdateVersionAliasConfigurationInternalServerError with default headers values
func NewUpdateVersionAliasConfigurationInternalServerError() *UpdateVersionAliasConfigurationInternalServerError {
	return &UpdateVersionAliasConfigurationInternalServerError{}
}

/*
UpdateVersionAliasConfigurationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateVersionAliasConfigurationInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update version alias configuration internal server error response has a 2xx status code
func (o *UpdateVersionAliasConfigurationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update version alias configuration internal server error response has a 3xx status code
func (o *UpdateVersionAliasConfigurationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update version alias configuration internal server error response has a 4xx status code
func (o *UpdateVersionAliasConfigurationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update version alias configuration internal server error response has a 5xx status code
func (o *UpdateVersionAliasConfigurationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update version alias configuration internal server error response a status code equal to that given
func (o *UpdateVersionAliasConfigurationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update version alias configuration internal server error response
func (o *UpdateVersionAliasConfigurationInternalServerError) Code() int {
	return 500
}

func (o *UpdateVersionAliasConfigurationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/system/settings/version-aliases/{bundleComponentType}/{version}][%d] updateVersionAliasConfigurationInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVersionAliasConfigurationInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/system/settings/version-aliases/{bundleComponentType}/{version}][%d] updateVersionAliasConfigurationInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVersionAliasConfigurationInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVersionAliasConfigurationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
