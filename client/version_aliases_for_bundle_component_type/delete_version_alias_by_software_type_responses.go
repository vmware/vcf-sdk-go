// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package version_aliases_for_bundle_component_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// DeleteVersionAliasBySoftwareTypeReader is a Reader for the DeleteVersionAliasBySoftwareType structure.
type DeleteVersionAliasBySoftwareTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVersionAliasBySoftwareTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteVersionAliasBySoftwareTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteVersionAliasBySoftwareTypeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteVersionAliasBySoftwareTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteVersionAliasBySoftwareTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}] deleteVersionAliasBySoftwareType", response, response.Code())
	}
}

// NewDeleteVersionAliasBySoftwareTypeOK creates a DeleteVersionAliasBySoftwareTypeOK with default headers values
func NewDeleteVersionAliasBySoftwareTypeOK() *DeleteVersionAliasBySoftwareTypeOK {
	return &DeleteVersionAliasBySoftwareTypeOK{}
}

/*
DeleteVersionAliasBySoftwareTypeOK describes a response with status code 200, with default header values.

OK
*/
type DeleteVersionAliasBySoftwareTypeOK struct {
}

// IsSuccess returns true when this delete version alias by software type o k response has a 2xx status code
func (o *DeleteVersionAliasBySoftwareTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete version alias by software type o k response has a 3xx status code
func (o *DeleteVersionAliasBySoftwareTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete version alias by software type o k response has a 4xx status code
func (o *DeleteVersionAliasBySoftwareTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete version alias by software type o k response has a 5xx status code
func (o *DeleteVersionAliasBySoftwareTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete version alias by software type o k response a status code equal to that given
func (o *DeleteVersionAliasBySoftwareTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete version alias by software type o k response
func (o *DeleteVersionAliasBySoftwareTypeOK) Code() int {
	return 200
}

func (o *DeleteVersionAliasBySoftwareTypeOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}][%d] deleteVersionAliasBySoftwareTypeOK ", 200)
}

func (o *DeleteVersionAliasBySoftwareTypeOK) String() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}][%d] deleteVersionAliasBySoftwareTypeOK ", 200)
}

func (o *DeleteVersionAliasBySoftwareTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVersionAliasBySoftwareTypeNoContent creates a DeleteVersionAliasBySoftwareTypeNoContent with default headers values
func NewDeleteVersionAliasBySoftwareTypeNoContent() *DeleteVersionAliasBySoftwareTypeNoContent {
	return &DeleteVersionAliasBySoftwareTypeNoContent{}
}

/*
DeleteVersionAliasBySoftwareTypeNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteVersionAliasBySoftwareTypeNoContent struct {
}

// IsSuccess returns true when this delete version alias by software type no content response has a 2xx status code
func (o *DeleteVersionAliasBySoftwareTypeNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete version alias by software type no content response has a 3xx status code
func (o *DeleteVersionAliasBySoftwareTypeNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete version alias by software type no content response has a 4xx status code
func (o *DeleteVersionAliasBySoftwareTypeNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete version alias by software type no content response has a 5xx status code
func (o *DeleteVersionAliasBySoftwareTypeNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete version alias by software type no content response a status code equal to that given
func (o *DeleteVersionAliasBySoftwareTypeNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete version alias by software type no content response
func (o *DeleteVersionAliasBySoftwareTypeNoContent) Code() int {
	return 204
}

func (o *DeleteVersionAliasBySoftwareTypeNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}][%d] deleteVersionAliasBySoftwareTypeNoContent ", 204)
}

func (o *DeleteVersionAliasBySoftwareTypeNoContent) String() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}][%d] deleteVersionAliasBySoftwareTypeNoContent ", 204)
}

func (o *DeleteVersionAliasBySoftwareTypeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVersionAliasBySoftwareTypeBadRequest creates a DeleteVersionAliasBySoftwareTypeBadRequest with default headers values
func NewDeleteVersionAliasBySoftwareTypeBadRequest() *DeleteVersionAliasBySoftwareTypeBadRequest {
	return &DeleteVersionAliasBySoftwareTypeBadRequest{}
}

/*
DeleteVersionAliasBySoftwareTypeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteVersionAliasBySoftwareTypeBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete version alias by software type bad request response has a 2xx status code
func (o *DeleteVersionAliasBySoftwareTypeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete version alias by software type bad request response has a 3xx status code
func (o *DeleteVersionAliasBySoftwareTypeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete version alias by software type bad request response has a 4xx status code
func (o *DeleteVersionAliasBySoftwareTypeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete version alias by software type bad request response has a 5xx status code
func (o *DeleteVersionAliasBySoftwareTypeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete version alias by software type bad request response a status code equal to that given
func (o *DeleteVersionAliasBySoftwareTypeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete version alias by software type bad request response
func (o *DeleteVersionAliasBySoftwareTypeBadRequest) Code() int {
	return 400
}

func (o *DeleteVersionAliasBySoftwareTypeBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}][%d] deleteVersionAliasBySoftwareTypeBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteVersionAliasBySoftwareTypeBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}][%d] deleteVersionAliasBySoftwareTypeBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteVersionAliasBySoftwareTypeBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteVersionAliasBySoftwareTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVersionAliasBySoftwareTypeInternalServerError creates a DeleteVersionAliasBySoftwareTypeInternalServerError with default headers values
func NewDeleteVersionAliasBySoftwareTypeInternalServerError() *DeleteVersionAliasBySoftwareTypeInternalServerError {
	return &DeleteVersionAliasBySoftwareTypeInternalServerError{}
}

/*
DeleteVersionAliasBySoftwareTypeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteVersionAliasBySoftwareTypeInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete version alias by software type internal server error response has a 2xx status code
func (o *DeleteVersionAliasBySoftwareTypeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete version alias by software type internal server error response has a 3xx status code
func (o *DeleteVersionAliasBySoftwareTypeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete version alias by software type internal server error response has a 4xx status code
func (o *DeleteVersionAliasBySoftwareTypeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete version alias by software type internal server error response has a 5xx status code
func (o *DeleteVersionAliasBySoftwareTypeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete version alias by software type internal server error response a status code equal to that given
func (o *DeleteVersionAliasBySoftwareTypeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete version alias by software type internal server error response
func (o *DeleteVersionAliasBySoftwareTypeInternalServerError) Code() int {
	return 500
}

func (o *DeleteVersionAliasBySoftwareTypeInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}][%d] deleteVersionAliasBySoftwareTypeInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteVersionAliasBySoftwareTypeInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/system/settings/version-aliases/{bundleComponentType}][%d] deleteVersionAliasBySoftwareTypeInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteVersionAliasBySoftwareTypeInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteVersionAliasBySoftwareTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
