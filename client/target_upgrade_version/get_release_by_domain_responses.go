// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package target_upgrade_version

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetReleaseByDomainReader is a Reader for the GetReleaseByDomain structure.
type GetReleaseByDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReleaseByDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReleaseByDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetReleaseByDomainNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetReleaseByDomainInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/releases/domains/{domainId}] getReleaseByDomain", response, response.Code())
	}
}

// NewGetReleaseByDomainOK creates a GetReleaseByDomainOK with default headers values
func NewGetReleaseByDomainOK() *GetReleaseByDomainOK {
	return &GetReleaseByDomainOK{}
}

/*
GetReleaseByDomainOK describes a response with status code 200, with default header values.

Ok
*/
type GetReleaseByDomainOK struct {
	Payload *models.DomainReleaseView
}

// IsSuccess returns true when this get release by domain o k response has a 2xx status code
func (o *GetReleaseByDomainOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get release by domain o k response has a 3xx status code
func (o *GetReleaseByDomainOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release by domain o k response has a 4xx status code
func (o *GetReleaseByDomainOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get release by domain o k response has a 5xx status code
func (o *GetReleaseByDomainOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get release by domain o k response a status code equal to that given
func (o *GetReleaseByDomainOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get release by domain o k response
func (o *GetReleaseByDomainOK) Code() int {
	return 200
}

func (o *GetReleaseByDomainOK) Error() string {
	return fmt.Sprintf("[GET /v1/releases/domains/{domainId}][%d] getReleaseByDomainOK  %+v", 200, o.Payload)
}

func (o *GetReleaseByDomainOK) String() string {
	return fmt.Sprintf("[GET /v1/releases/domains/{domainId}][%d] getReleaseByDomainOK  %+v", 200, o.Payload)
}

func (o *GetReleaseByDomainOK) GetPayload() *models.DomainReleaseView {
	return o.Payload
}

func (o *GetReleaseByDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DomainReleaseView)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseByDomainNotFound creates a GetReleaseByDomainNotFound with default headers values
func NewGetReleaseByDomainNotFound() *GetReleaseByDomainNotFound {
	return &GetReleaseByDomainNotFound{}
}

/*
GetReleaseByDomainNotFound describes a response with status code 404, with default header values.

Domain not found
*/
type GetReleaseByDomainNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get release by domain not found response has a 2xx status code
func (o *GetReleaseByDomainNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release by domain not found response has a 3xx status code
func (o *GetReleaseByDomainNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release by domain not found response has a 4xx status code
func (o *GetReleaseByDomainNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release by domain not found response has a 5xx status code
func (o *GetReleaseByDomainNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get release by domain not found response a status code equal to that given
func (o *GetReleaseByDomainNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get release by domain not found response
func (o *GetReleaseByDomainNotFound) Code() int {
	return 404
}

func (o *GetReleaseByDomainNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/releases/domains/{domainId}][%d] getReleaseByDomainNotFound  %+v", 404, o.Payload)
}

func (o *GetReleaseByDomainNotFound) String() string {
	return fmt.Sprintf("[GET /v1/releases/domains/{domainId}][%d] getReleaseByDomainNotFound  %+v", 404, o.Payload)
}

func (o *GetReleaseByDomainNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetReleaseByDomainNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseByDomainInternalServerError creates a GetReleaseByDomainInternalServerError with default headers values
func NewGetReleaseByDomainInternalServerError() *GetReleaseByDomainInternalServerError {
	return &GetReleaseByDomainInternalServerError{}
}

/*
GetReleaseByDomainInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetReleaseByDomainInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get release by domain internal server error response has a 2xx status code
func (o *GetReleaseByDomainInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release by domain internal server error response has a 3xx status code
func (o *GetReleaseByDomainInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release by domain internal server error response has a 4xx status code
func (o *GetReleaseByDomainInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get release by domain internal server error response has a 5xx status code
func (o *GetReleaseByDomainInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get release by domain internal server error response a status code equal to that given
func (o *GetReleaseByDomainInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get release by domain internal server error response
func (o *GetReleaseByDomainInternalServerError) Code() int {
	return 500
}

func (o *GetReleaseByDomainInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/releases/domains/{domainId}][%d] getReleaseByDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *GetReleaseByDomainInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/releases/domains/{domainId}][%d] getReleaseByDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *GetReleaseByDomainInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetReleaseByDomainInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
