// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package upgradables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetUpgradablesAndResourceErrorsReader is a Reader for the GetUpgradablesAndResourceErrors structure.
type GetUpgradablesAndResourceErrorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUpgradablesAndResourceErrorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUpgradablesAndResourceErrorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetUpgradablesAndResourceErrorsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/system/upgradables/compliance] getUpgradablesAndResourceErrors", response, response.Code())
	}
}

// NewGetUpgradablesAndResourceErrorsOK creates a GetUpgradablesAndResourceErrorsOK with default headers values
func NewGetUpgradablesAndResourceErrorsOK() *GetUpgradablesAndResourceErrorsOK {
	return &GetUpgradablesAndResourceErrorsOK{}
}

/*
GetUpgradablesAndResourceErrorsOK describes a response with status code 200, with default header values.

Ok
*/
type GetUpgradablesAndResourceErrorsOK struct {
	Payload *models.UpgradablesResource
}

// IsSuccess returns true when this get upgradables and resource errors o k response has a 2xx status code
func (o *GetUpgradablesAndResourceErrorsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get upgradables and resource errors o k response has a 3xx status code
func (o *GetUpgradablesAndResourceErrorsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get upgradables and resource errors o k response has a 4xx status code
func (o *GetUpgradablesAndResourceErrorsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get upgradables and resource errors o k response has a 5xx status code
func (o *GetUpgradablesAndResourceErrorsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get upgradables and resource errors o k response a status code equal to that given
func (o *GetUpgradablesAndResourceErrorsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get upgradables and resource errors o k response
func (o *GetUpgradablesAndResourceErrorsOK) Code() int {
	return 200
}

func (o *GetUpgradablesAndResourceErrorsOK) Error() string {
	return fmt.Sprintf("[GET /v1/system/upgradables/compliance][%d] getUpgradablesAndResourceErrorsOK  %+v", 200, o.Payload)
}

func (o *GetUpgradablesAndResourceErrorsOK) String() string {
	return fmt.Sprintf("[GET /v1/system/upgradables/compliance][%d] getUpgradablesAndResourceErrorsOK  %+v", 200, o.Payload)
}

func (o *GetUpgradablesAndResourceErrorsOK) GetPayload() *models.UpgradablesResource {
	return o.Payload
}

func (o *GetUpgradablesAndResourceErrorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpgradablesResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUpgradablesAndResourceErrorsInternalServerError creates a GetUpgradablesAndResourceErrorsInternalServerError with default headers values
func NewGetUpgradablesAndResourceErrorsInternalServerError() *GetUpgradablesAndResourceErrorsInternalServerError {
	return &GetUpgradablesAndResourceErrorsInternalServerError{}
}

/*
GetUpgradablesAndResourceErrorsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetUpgradablesAndResourceErrorsInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get upgradables and resource errors internal server error response has a 2xx status code
func (o *GetUpgradablesAndResourceErrorsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get upgradables and resource errors internal server error response has a 3xx status code
func (o *GetUpgradablesAndResourceErrorsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get upgradables and resource errors internal server error response has a 4xx status code
func (o *GetUpgradablesAndResourceErrorsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get upgradables and resource errors internal server error response has a 5xx status code
func (o *GetUpgradablesAndResourceErrorsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get upgradables and resource errors internal server error response a status code equal to that given
func (o *GetUpgradablesAndResourceErrorsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get upgradables and resource errors internal server error response
func (o *GetUpgradablesAndResourceErrorsInternalServerError) Code() int {
	return 500
}

func (o *GetUpgradablesAndResourceErrorsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/system/upgradables/compliance][%d] getUpgradablesAndResourceErrorsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUpgradablesAndResourceErrorsInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/system/upgradables/compliance][%d] getUpgradablesAndResourceErrorsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUpgradablesAndResourceErrorsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUpgradablesAndResourceErrorsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
