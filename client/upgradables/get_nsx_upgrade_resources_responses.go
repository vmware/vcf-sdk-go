// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package upgradables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetNsxUpgradeResourcesReader is a Reader for the GetNsxUpgradeResources structure.
type GetNsxUpgradeResourcesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNsxUpgradeResourcesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNsxUpgradeResourcesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetNsxUpgradeResourcesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNsxUpgradeResourcesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/upgradables/domains/{domainId}/nsxt] getNsxUpgradeResources", response, response.Code())
	}
}

// NewGetNsxUpgradeResourcesOK creates a GetNsxUpgradeResourcesOK with default headers values
func NewGetNsxUpgradeResourcesOK() *GetNsxUpgradeResourcesOK {
	return &GetNsxUpgradeResourcesOK{}
}

/*
GetNsxUpgradeResourcesOK describes a response with status code 200, with default header values.

Ok
*/
type GetNsxUpgradeResourcesOK struct {
	Payload *models.NSXTResources
}

// IsSuccess returns true when this get nsx upgrade resources o k response has a 2xx status code
func (o *GetNsxUpgradeResourcesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get nsx upgrade resources o k response has a 3xx status code
func (o *GetNsxUpgradeResourcesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nsx upgrade resources o k response has a 4xx status code
func (o *GetNsxUpgradeResourcesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nsx upgrade resources o k response has a 5xx status code
func (o *GetNsxUpgradeResourcesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get nsx upgrade resources o k response a status code equal to that given
func (o *GetNsxUpgradeResourcesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get nsx upgrade resources o k response
func (o *GetNsxUpgradeResourcesOK) Code() int {
	return 200
}

func (o *GetNsxUpgradeResourcesOK) Error() string {
	return fmt.Sprintf("[GET /v1/upgradables/domains/{domainId}/nsxt][%d] getNsxUpgradeResourcesOK  %+v", 200, o.Payload)
}

func (o *GetNsxUpgradeResourcesOK) String() string {
	return fmt.Sprintf("[GET /v1/upgradables/domains/{domainId}/nsxt][%d] getNsxUpgradeResourcesOK  %+v", 200, o.Payload)
}

func (o *GetNsxUpgradeResourcesOK) GetPayload() *models.NSXTResources {
	return o.Payload
}

func (o *GetNsxUpgradeResourcesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NSXTResources)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNsxUpgradeResourcesNotFound creates a GetNsxUpgradeResourcesNotFound with default headers values
func NewGetNsxUpgradeResourcesNotFound() *GetNsxUpgradeResourcesNotFound {
	return &GetNsxUpgradeResourcesNotFound{}
}

/*
GetNsxUpgradeResourcesNotFound describes a response with status code 404, with default header values.

Bundle not found
*/
type GetNsxUpgradeResourcesNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get nsx upgrade resources not found response has a 2xx status code
func (o *GetNsxUpgradeResourcesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nsx upgrade resources not found response has a 3xx status code
func (o *GetNsxUpgradeResourcesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nsx upgrade resources not found response has a 4xx status code
func (o *GetNsxUpgradeResourcesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nsx upgrade resources not found response has a 5xx status code
func (o *GetNsxUpgradeResourcesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get nsx upgrade resources not found response a status code equal to that given
func (o *GetNsxUpgradeResourcesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get nsx upgrade resources not found response
func (o *GetNsxUpgradeResourcesNotFound) Code() int {
	return 404
}

func (o *GetNsxUpgradeResourcesNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/upgradables/domains/{domainId}/nsxt][%d] getNsxUpgradeResourcesNotFound  %+v", 404, o.Payload)
}

func (o *GetNsxUpgradeResourcesNotFound) String() string {
	return fmt.Sprintf("[GET /v1/upgradables/domains/{domainId}/nsxt][%d] getNsxUpgradeResourcesNotFound  %+v", 404, o.Payload)
}

func (o *GetNsxUpgradeResourcesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNsxUpgradeResourcesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNsxUpgradeResourcesInternalServerError creates a GetNsxUpgradeResourcesInternalServerError with default headers values
func NewGetNsxUpgradeResourcesInternalServerError() *GetNsxUpgradeResourcesInternalServerError {
	return &GetNsxUpgradeResourcesInternalServerError{}
}

/*
GetNsxUpgradeResourcesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetNsxUpgradeResourcesInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get nsx upgrade resources internal server error response has a 2xx status code
func (o *GetNsxUpgradeResourcesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nsx upgrade resources internal server error response has a 3xx status code
func (o *GetNsxUpgradeResourcesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nsx upgrade resources internal server error response has a 4xx status code
func (o *GetNsxUpgradeResourcesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nsx upgrade resources internal server error response has a 5xx status code
func (o *GetNsxUpgradeResourcesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get nsx upgrade resources internal server error response a status code equal to that given
func (o *GetNsxUpgradeResourcesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get nsx upgrade resources internal server error response
func (o *GetNsxUpgradeResourcesInternalServerError) Code() int {
	return 500
}

func (o *GetNsxUpgradeResourcesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/upgradables/domains/{domainId}/nsxt][%d] getNsxUpgradeResourcesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetNsxUpgradeResourcesInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/upgradables/domains/{domainId}/nsxt][%d] getNsxUpgradeResourcesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetNsxUpgradeResourcesInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNsxUpgradeResourcesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
