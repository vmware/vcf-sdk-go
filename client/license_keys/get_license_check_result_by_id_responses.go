// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package license_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetLicenseCheckResultByIDReader is a Reader for the GetLicenseCheckResultByID structure.
type GetLicenseCheckResultByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLicenseCheckResultByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLicenseCheckResultByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLicenseCheckResultByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLicenseCheckResultByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/resources/license-checks/{id}] getLicenseCheckResultByID", response, response.Code())
	}
}

// NewGetLicenseCheckResultByIDOK creates a GetLicenseCheckResultByIDOK with default headers values
func NewGetLicenseCheckResultByIDOK() *GetLicenseCheckResultByIDOK {
	return &GetLicenseCheckResultByIDOK{}
}

/*
GetLicenseCheckResultByIDOK describes a response with status code 200, with default header values.

Successful
*/
type GetLicenseCheckResultByIDOK struct {
	Payload *models.ResourcesLicenseCheckResult
}

// IsSuccess returns true when this get license check result by Id o k response has a 2xx status code
func (o *GetLicenseCheckResultByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get license check result by Id o k response has a 3xx status code
func (o *GetLicenseCheckResultByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license check result by Id o k response has a 4xx status code
func (o *GetLicenseCheckResultByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get license check result by Id o k response has a 5xx status code
func (o *GetLicenseCheckResultByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get license check result by Id o k response a status code equal to that given
func (o *GetLicenseCheckResultByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get license check result by Id o k response
func (o *GetLicenseCheckResultByIDOK) Code() int {
	return 200
}

func (o *GetLicenseCheckResultByIDOK) Error() string {
	return fmt.Sprintf("[GET /v1/resources/license-checks/{id}][%d] getLicenseCheckResultByIdOK  %+v", 200, o.Payload)
}

func (o *GetLicenseCheckResultByIDOK) String() string {
	return fmt.Sprintf("[GET /v1/resources/license-checks/{id}][%d] getLicenseCheckResultByIdOK  %+v", 200, o.Payload)
}

func (o *GetLicenseCheckResultByIDOK) GetPayload() *models.ResourcesLicenseCheckResult {
	return o.Payload
}

func (o *GetLicenseCheckResultByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResourcesLicenseCheckResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseCheckResultByIDBadRequest creates a GetLicenseCheckResultByIDBadRequest with default headers values
func NewGetLicenseCheckResultByIDBadRequest() *GetLicenseCheckResultByIDBadRequest {
	return &GetLicenseCheckResultByIDBadRequest{}
}

/*
GetLicenseCheckResultByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetLicenseCheckResultByIDBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get license check result by Id bad request response has a 2xx status code
func (o *GetLicenseCheckResultByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license check result by Id bad request response has a 3xx status code
func (o *GetLicenseCheckResultByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license check result by Id bad request response has a 4xx status code
func (o *GetLicenseCheckResultByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license check result by Id bad request response has a 5xx status code
func (o *GetLicenseCheckResultByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get license check result by Id bad request response a status code equal to that given
func (o *GetLicenseCheckResultByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get license check result by Id bad request response
func (o *GetLicenseCheckResultByIDBadRequest) Code() int {
	return 400
}

func (o *GetLicenseCheckResultByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/resources/license-checks/{id}][%d] getLicenseCheckResultByIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetLicenseCheckResultByIDBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/resources/license-checks/{id}][%d] getLicenseCheckResultByIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetLicenseCheckResultByIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetLicenseCheckResultByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseCheckResultByIDInternalServerError creates a GetLicenseCheckResultByIDInternalServerError with default headers values
func NewGetLicenseCheckResultByIDInternalServerError() *GetLicenseCheckResultByIDInternalServerError {
	return &GetLicenseCheckResultByIDInternalServerError{}
}

/*
GetLicenseCheckResultByIDInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetLicenseCheckResultByIDInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get license check result by Id internal server error response has a 2xx status code
func (o *GetLicenseCheckResultByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license check result by Id internal server error response has a 3xx status code
func (o *GetLicenseCheckResultByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license check result by Id internal server error response has a 4xx status code
func (o *GetLicenseCheckResultByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get license check result by Id internal server error response has a 5xx status code
func (o *GetLicenseCheckResultByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get license check result by Id internal server error response a status code equal to that given
func (o *GetLicenseCheckResultByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get license check result by Id internal server error response
func (o *GetLicenseCheckResultByIDInternalServerError) Code() int {
	return 500
}

func (o *GetLicenseCheckResultByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/resources/license-checks/{id}][%d] getLicenseCheckResultByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLicenseCheckResultByIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/resources/license-checks/{id}][%d] getLicenseCheckResultByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLicenseCheckResultByIDInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetLicenseCheckResultByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
