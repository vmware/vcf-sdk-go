// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package license_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetLicensingInfoReader is a Reader for the GetLicensingInfo structure.
type GetLicensingInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLicensingInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLicensingInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLicensingInfoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLicensingInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLicensingInfoOK creates a GetLicensingInfoOK with default headers values
func NewGetLicensingInfoOK() *GetLicensingInfoOK {
	return &GetLicensingInfoOK{}
}

/*
GetLicensingInfoOK describes a response with status code 200, with default header values.

Successful
*/
type GetLicensingInfoOK struct {
	Payload []*models.LicensingInfo
}

// IsSuccess returns true when this get licensing info o k response has a 2xx status code
func (o *GetLicensingInfoOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get licensing info o k response has a 3xx status code
func (o *GetLicensingInfoOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get licensing info o k response has a 4xx status code
func (o *GetLicensingInfoOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get licensing info o k response has a 5xx status code
func (o *GetLicensingInfoOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get licensing info o k response a status code equal to that given
func (o *GetLicensingInfoOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetLicensingInfoOK) Error() string {
	return fmt.Sprintf("[GET /v1/licensing-info][%d] getLicensingInfoOK  %+v", 200, o.Payload)
}

func (o *GetLicensingInfoOK) String() string {
	return fmt.Sprintf("[GET /v1/licensing-info][%d] getLicensingInfoOK  %+v", 200, o.Payload)
}

func (o *GetLicensingInfoOK) GetPayload() []*models.LicensingInfo {
	return o.Payload
}

func (o *GetLicensingInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicensingInfoBadRequest creates a GetLicensingInfoBadRequest with default headers values
func NewGetLicensingInfoBadRequest() *GetLicensingInfoBadRequest {
	return &GetLicensingInfoBadRequest{}
}

/*
GetLicensingInfoBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetLicensingInfoBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get licensing info bad request response has a 2xx status code
func (o *GetLicensingInfoBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get licensing info bad request response has a 3xx status code
func (o *GetLicensingInfoBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get licensing info bad request response has a 4xx status code
func (o *GetLicensingInfoBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get licensing info bad request response has a 5xx status code
func (o *GetLicensingInfoBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get licensing info bad request response a status code equal to that given
func (o *GetLicensingInfoBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetLicensingInfoBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/licensing-info][%d] getLicensingInfoBadRequest  %+v", 400, o.Payload)
}

func (o *GetLicensingInfoBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/licensing-info][%d] getLicensingInfoBadRequest  %+v", 400, o.Payload)
}

func (o *GetLicensingInfoBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetLicensingInfoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicensingInfoInternalServerError creates a GetLicensingInfoInternalServerError with default headers values
func NewGetLicensingInfoInternalServerError() *GetLicensingInfoInternalServerError {
	return &GetLicensingInfoInternalServerError{}
}

/*
GetLicensingInfoInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetLicensingInfoInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get licensing info internal server error response has a 2xx status code
func (o *GetLicensingInfoInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get licensing info internal server error response has a 3xx status code
func (o *GetLicensingInfoInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get licensing info internal server error response has a 4xx status code
func (o *GetLicensingInfoInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get licensing info internal server error response has a 5xx status code
func (o *GetLicensingInfoInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get licensing info internal server error response a status code equal to that given
func (o *GetLicensingInfoInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetLicensingInfoInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/licensing-info][%d] getLicensingInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLicensingInfoInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/licensing-info][%d] getLicensingInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLicensingInfoInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetLicensingInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
