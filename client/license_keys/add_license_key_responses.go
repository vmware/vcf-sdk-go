// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package license_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// AddLicenseKeyReader is a Reader for the AddLicenseKey structure.
type AddLicenseKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddLicenseKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddLicenseKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewAddLicenseKeyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewAddLicenseKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/license-keys] addLicenseKey", response, response.Code())
	}
}

// NewAddLicenseKeyOK creates a AddLicenseKeyOK with default headers values
func NewAddLicenseKeyOK() *AddLicenseKeyOK {
	return &AddLicenseKeyOK{}
}

/*
AddLicenseKeyOK describes a response with status code 200, with default header values.

OK
*/
type AddLicenseKeyOK struct {
	Payload *models.LicenseKey
}

// IsSuccess returns true when this add license key o k response has a 2xx status code
func (o *AddLicenseKeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add license key o k response has a 3xx status code
func (o *AddLicenseKeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add license key o k response has a 4xx status code
func (o *AddLicenseKeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add license key o k response has a 5xx status code
func (o *AddLicenseKeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add license key o k response a status code equal to that given
func (o *AddLicenseKeyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add license key o k response
func (o *AddLicenseKeyOK) Code() int {
	return 200
}

func (o *AddLicenseKeyOK) Error() string {
	return fmt.Sprintf("[POST /v1/license-keys][%d] addLicenseKeyOK  %+v", 200, o.Payload)
}

func (o *AddLicenseKeyOK) String() string {
	return fmt.Sprintf("[POST /v1/license-keys][%d] addLicenseKeyOK  %+v", 200, o.Payload)
}

func (o *AddLicenseKeyOK) GetPayload() *models.LicenseKey {
	return o.Payload
}

func (o *AddLicenseKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LicenseKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddLicenseKeyCreated creates a AddLicenseKeyCreated with default headers values
func NewAddLicenseKeyCreated() *AddLicenseKeyCreated {
	return &AddLicenseKeyCreated{}
}

/*
AddLicenseKeyCreated describes a response with status code 201, with default header values.

Created
*/
type AddLicenseKeyCreated struct {
	Payload *models.LicenseKey
}

// IsSuccess returns true when this add license key created response has a 2xx status code
func (o *AddLicenseKeyCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add license key created response has a 3xx status code
func (o *AddLicenseKeyCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add license key created response has a 4xx status code
func (o *AddLicenseKeyCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this add license key created response has a 5xx status code
func (o *AddLicenseKeyCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this add license key created response a status code equal to that given
func (o *AddLicenseKeyCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the add license key created response
func (o *AddLicenseKeyCreated) Code() int {
	return 201
}

func (o *AddLicenseKeyCreated) Error() string {
	return fmt.Sprintf("[POST /v1/license-keys][%d] addLicenseKeyCreated  %+v", 201, o.Payload)
}

func (o *AddLicenseKeyCreated) String() string {
	return fmt.Sprintf("[POST /v1/license-keys][%d] addLicenseKeyCreated  %+v", 201, o.Payload)
}

func (o *AddLicenseKeyCreated) GetPayload() *models.LicenseKey {
	return o.Payload
}

func (o *AddLicenseKeyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LicenseKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddLicenseKeyInternalServerError creates a AddLicenseKeyInternalServerError with default headers values
func NewAddLicenseKeyInternalServerError() *AddLicenseKeyInternalServerError {
	return &AddLicenseKeyInternalServerError{}
}

/*
AddLicenseKeyInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type AddLicenseKeyInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this add license key internal server error response has a 2xx status code
func (o *AddLicenseKeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add license key internal server error response has a 3xx status code
func (o *AddLicenseKeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add license key internal server error response has a 4xx status code
func (o *AddLicenseKeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add license key internal server error response has a 5xx status code
func (o *AddLicenseKeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add license key internal server error response a status code equal to that given
func (o *AddLicenseKeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add license key internal server error response
func (o *AddLicenseKeyInternalServerError) Code() int {
	return 500
}

func (o *AddLicenseKeyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/license-keys][%d] addLicenseKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *AddLicenseKeyInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/license-keys][%d] addLicenseKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *AddLicenseKeyInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddLicenseKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
