// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package license_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// SetLicenseKeyForResourceReader is a Reader for the SetLicenseKeyForResource structure.
type SetLicenseKeyForResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetLicenseKeyForResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetLicenseKeyForResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewSetLicenseKeyForResourceAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetLicenseKeyForResourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSetLicenseKeyForResourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/resources/licensing-infos] setLicenseKeyForResource", response, response.Code())
	}
}

// NewSetLicenseKeyForResourceOK creates a SetLicenseKeyForResourceOK with default headers values
func NewSetLicenseKeyForResourceOK() *SetLicenseKeyForResourceOK {
	return &SetLicenseKeyForResourceOK{}
}

/*
SetLicenseKeyForResourceOK describes a response with status code 200, with default header values.

OK
*/
type SetLicenseKeyForResourceOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this set license key for resource o k response has a 2xx status code
func (o *SetLicenseKeyForResourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set license key for resource o k response has a 3xx status code
func (o *SetLicenseKeyForResourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set license key for resource o k response has a 4xx status code
func (o *SetLicenseKeyForResourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this set license key for resource o k response has a 5xx status code
func (o *SetLicenseKeyForResourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this set license key for resource o k response a status code equal to that given
func (o *SetLicenseKeyForResourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the set license key for resource o k response
func (o *SetLicenseKeyForResourceOK) Code() int {
	return 200
}

func (o *SetLicenseKeyForResourceOK) Error() string {
	return fmt.Sprintf("[PUT /v1/resources/licensing-infos][%d] setLicenseKeyForResourceOK  %+v", 200, o.Payload)
}

func (o *SetLicenseKeyForResourceOK) String() string {
	return fmt.Sprintf("[PUT /v1/resources/licensing-infos][%d] setLicenseKeyForResourceOK  %+v", 200, o.Payload)
}

func (o *SetLicenseKeyForResourceOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *SetLicenseKeyForResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetLicenseKeyForResourceAccepted creates a SetLicenseKeyForResourceAccepted with default headers values
func NewSetLicenseKeyForResourceAccepted() *SetLicenseKeyForResourceAccepted {
	return &SetLicenseKeyForResourceAccepted{}
}

/*
SetLicenseKeyForResourceAccepted describes a response with status code 202, with default header values.

Accepted
*/
type SetLicenseKeyForResourceAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this set license key for resource accepted response has a 2xx status code
func (o *SetLicenseKeyForResourceAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set license key for resource accepted response has a 3xx status code
func (o *SetLicenseKeyForResourceAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set license key for resource accepted response has a 4xx status code
func (o *SetLicenseKeyForResourceAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this set license key for resource accepted response has a 5xx status code
func (o *SetLicenseKeyForResourceAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this set license key for resource accepted response a status code equal to that given
func (o *SetLicenseKeyForResourceAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the set license key for resource accepted response
func (o *SetLicenseKeyForResourceAccepted) Code() int {
	return 202
}

func (o *SetLicenseKeyForResourceAccepted) Error() string {
	return fmt.Sprintf("[PUT /v1/resources/licensing-infos][%d] setLicenseKeyForResourceAccepted  %+v", 202, o.Payload)
}

func (o *SetLicenseKeyForResourceAccepted) String() string {
	return fmt.Sprintf("[PUT /v1/resources/licensing-infos][%d] setLicenseKeyForResourceAccepted  %+v", 202, o.Payload)
}

func (o *SetLicenseKeyForResourceAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *SetLicenseKeyForResourceAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetLicenseKeyForResourceBadRequest creates a SetLicenseKeyForResourceBadRequest with default headers values
func NewSetLicenseKeyForResourceBadRequest() *SetLicenseKeyForResourceBadRequest {
	return &SetLicenseKeyForResourceBadRequest{}
}

/*
SetLicenseKeyForResourceBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SetLicenseKeyForResourceBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this set license key for resource bad request response has a 2xx status code
func (o *SetLicenseKeyForResourceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set license key for resource bad request response has a 3xx status code
func (o *SetLicenseKeyForResourceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set license key for resource bad request response has a 4xx status code
func (o *SetLicenseKeyForResourceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this set license key for resource bad request response has a 5xx status code
func (o *SetLicenseKeyForResourceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this set license key for resource bad request response a status code equal to that given
func (o *SetLicenseKeyForResourceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the set license key for resource bad request response
func (o *SetLicenseKeyForResourceBadRequest) Code() int {
	return 400
}

func (o *SetLicenseKeyForResourceBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/resources/licensing-infos][%d] setLicenseKeyForResourceBadRequest  %+v", 400, o.Payload)
}

func (o *SetLicenseKeyForResourceBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/resources/licensing-infos][%d] setLicenseKeyForResourceBadRequest  %+v", 400, o.Payload)
}

func (o *SetLicenseKeyForResourceBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetLicenseKeyForResourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetLicenseKeyForResourceInternalServerError creates a SetLicenseKeyForResourceInternalServerError with default headers values
func NewSetLicenseKeyForResourceInternalServerError() *SetLicenseKeyForResourceInternalServerError {
	return &SetLicenseKeyForResourceInternalServerError{}
}

/*
SetLicenseKeyForResourceInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type SetLicenseKeyForResourceInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this set license key for resource internal server error response has a 2xx status code
func (o *SetLicenseKeyForResourceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set license key for resource internal server error response has a 3xx status code
func (o *SetLicenseKeyForResourceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set license key for resource internal server error response has a 4xx status code
func (o *SetLicenseKeyForResourceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this set license key for resource internal server error response has a 5xx status code
func (o *SetLicenseKeyForResourceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this set license key for resource internal server error response a status code equal to that given
func (o *SetLicenseKeyForResourceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the set license key for resource internal server error response
func (o *SetLicenseKeyForResourceInternalServerError) Code() int {
	return 500
}

func (o *SetLicenseKeyForResourceInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/resources/licensing-infos][%d] setLicenseKeyForResourceInternalServerError  %+v", 500, o.Payload)
}

func (o *SetLicenseKeyForResourceInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/resources/licensing-infos][%d] setLicenseKeyForResourceInternalServerError  %+v", 500, o.Payload)
}

func (o *SetLicenseKeyForResourceInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetLicenseKeyForResourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
