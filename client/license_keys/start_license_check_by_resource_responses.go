// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package license_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// StartLicenseCheckByResourceReader is a Reader for the StartLicenseCheckByResource structure.
type StartLicenseCheckByResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartLicenseCheckByResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartLicenseCheckByResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewStartLicenseCheckByResourceAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStartLicenseCheckByResourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStartLicenseCheckByResourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/resources/license-checks] startLicenseCheckByResource", response, response.Code())
	}
}

// NewStartLicenseCheckByResourceOK creates a StartLicenseCheckByResourceOK with default headers values
func NewStartLicenseCheckByResourceOK() *StartLicenseCheckByResourceOK {
	return &StartLicenseCheckByResourceOK{}
}

/*
StartLicenseCheckByResourceOK describes a response with status code 200, with default header values.

OK
*/
type StartLicenseCheckByResourceOK struct {
	Payload *models.ResourcesLicenseCheckResult
}

// IsSuccess returns true when this start license check by resource o k response has a 2xx status code
func (o *StartLicenseCheckByResourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this start license check by resource o k response has a 3xx status code
func (o *StartLicenseCheckByResourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start license check by resource o k response has a 4xx status code
func (o *StartLicenseCheckByResourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this start license check by resource o k response has a 5xx status code
func (o *StartLicenseCheckByResourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this start license check by resource o k response a status code equal to that given
func (o *StartLicenseCheckByResourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the start license check by resource o k response
func (o *StartLicenseCheckByResourceOK) Code() int {
	return 200
}

func (o *StartLicenseCheckByResourceOK) Error() string {
	return fmt.Sprintf("[POST /v1/resources/license-checks][%d] startLicenseCheckByResourceOK  %+v", 200, o.Payload)
}

func (o *StartLicenseCheckByResourceOK) String() string {
	return fmt.Sprintf("[POST /v1/resources/license-checks][%d] startLicenseCheckByResourceOK  %+v", 200, o.Payload)
}

func (o *StartLicenseCheckByResourceOK) GetPayload() *models.ResourcesLicenseCheckResult {
	return o.Payload
}

func (o *StartLicenseCheckByResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResourcesLicenseCheckResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartLicenseCheckByResourceAccepted creates a StartLicenseCheckByResourceAccepted with default headers values
func NewStartLicenseCheckByResourceAccepted() *StartLicenseCheckByResourceAccepted {
	return &StartLicenseCheckByResourceAccepted{}
}

/*
StartLicenseCheckByResourceAccepted describes a response with status code 202, with default header values.

Accepted
*/
type StartLicenseCheckByResourceAccepted struct {
	Payload *models.ResourcesLicenseCheckResult
}

// IsSuccess returns true when this start license check by resource accepted response has a 2xx status code
func (o *StartLicenseCheckByResourceAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this start license check by resource accepted response has a 3xx status code
func (o *StartLicenseCheckByResourceAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start license check by resource accepted response has a 4xx status code
func (o *StartLicenseCheckByResourceAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this start license check by resource accepted response has a 5xx status code
func (o *StartLicenseCheckByResourceAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this start license check by resource accepted response a status code equal to that given
func (o *StartLicenseCheckByResourceAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the start license check by resource accepted response
func (o *StartLicenseCheckByResourceAccepted) Code() int {
	return 202
}

func (o *StartLicenseCheckByResourceAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/resources/license-checks][%d] startLicenseCheckByResourceAccepted  %+v", 202, o.Payload)
}

func (o *StartLicenseCheckByResourceAccepted) String() string {
	return fmt.Sprintf("[POST /v1/resources/license-checks][%d] startLicenseCheckByResourceAccepted  %+v", 202, o.Payload)
}

func (o *StartLicenseCheckByResourceAccepted) GetPayload() *models.ResourcesLicenseCheckResult {
	return o.Payload
}

func (o *StartLicenseCheckByResourceAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResourcesLicenseCheckResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartLicenseCheckByResourceBadRequest creates a StartLicenseCheckByResourceBadRequest with default headers values
func NewStartLicenseCheckByResourceBadRequest() *StartLicenseCheckByResourceBadRequest {
	return &StartLicenseCheckByResourceBadRequest{}
}

/*
StartLicenseCheckByResourceBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StartLicenseCheckByResourceBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this start license check by resource bad request response has a 2xx status code
func (o *StartLicenseCheckByResourceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start license check by resource bad request response has a 3xx status code
func (o *StartLicenseCheckByResourceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start license check by resource bad request response has a 4xx status code
func (o *StartLicenseCheckByResourceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this start license check by resource bad request response has a 5xx status code
func (o *StartLicenseCheckByResourceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this start license check by resource bad request response a status code equal to that given
func (o *StartLicenseCheckByResourceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the start license check by resource bad request response
func (o *StartLicenseCheckByResourceBadRequest) Code() int {
	return 400
}

func (o *StartLicenseCheckByResourceBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/resources/license-checks][%d] startLicenseCheckByResourceBadRequest  %+v", 400, o.Payload)
}

func (o *StartLicenseCheckByResourceBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/resources/license-checks][%d] startLicenseCheckByResourceBadRequest  %+v", 400, o.Payload)
}

func (o *StartLicenseCheckByResourceBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *StartLicenseCheckByResourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartLicenseCheckByResourceInternalServerError creates a StartLicenseCheckByResourceInternalServerError with default headers values
func NewStartLicenseCheckByResourceInternalServerError() *StartLicenseCheckByResourceInternalServerError {
	return &StartLicenseCheckByResourceInternalServerError{}
}

/*
StartLicenseCheckByResourceInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type StartLicenseCheckByResourceInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this start license check by resource internal server error response has a 2xx status code
func (o *StartLicenseCheckByResourceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start license check by resource internal server error response has a 3xx status code
func (o *StartLicenseCheckByResourceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start license check by resource internal server error response has a 4xx status code
func (o *StartLicenseCheckByResourceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this start license check by resource internal server error response has a 5xx status code
func (o *StartLicenseCheckByResourceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this start license check by resource internal server error response a status code equal to that given
func (o *StartLicenseCheckByResourceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the start license check by resource internal server error response
func (o *StartLicenseCheckByResourceInternalServerError) Code() int {
	return 500
}

func (o *StartLicenseCheckByResourceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/resources/license-checks][%d] startLicenseCheckByResourceInternalServerError  %+v", 500, o.Payload)
}

func (o *StartLicenseCheckByResourceInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/resources/license-checks][%d] startLicenseCheckByResourceInternalServerError  %+v", 500, o.Payload)
}

func (o *StartLicenseCheckByResourceInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *StartLicenseCheckByResourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
