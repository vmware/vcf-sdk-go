// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package license_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetLicenseInformationReader is a Reader for the GetLicenseInformation structure.
type GetLicenseInformationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLicenseInformationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLicenseInformationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLicenseInformationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLicenseInformationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/licensing-info] getLicenseInformation", response, response.Code())
	}
}

// NewGetLicenseInformationOK creates a GetLicenseInformationOK with default headers values
func NewGetLicenseInformationOK() *GetLicenseInformationOK {
	return &GetLicenseInformationOK{}
}

/*
GetLicenseInformationOK describes a response with status code 200, with default header values.

Successful
*/
type GetLicenseInformationOK struct {
	Payload []*models.LicensingInfo
}

// IsSuccess returns true when this get license information o k response has a 2xx status code
func (o *GetLicenseInformationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get license information o k response has a 3xx status code
func (o *GetLicenseInformationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license information o k response has a 4xx status code
func (o *GetLicenseInformationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get license information o k response has a 5xx status code
func (o *GetLicenseInformationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get license information o k response a status code equal to that given
func (o *GetLicenseInformationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get license information o k response
func (o *GetLicenseInformationOK) Code() int {
	return 200
}

func (o *GetLicenseInformationOK) Error() string {
	return fmt.Sprintf("[GET /v1/licensing-info][%d] getLicenseInformationOK  %+v", 200, o.Payload)
}

func (o *GetLicenseInformationOK) String() string {
	return fmt.Sprintf("[GET /v1/licensing-info][%d] getLicenseInformationOK  %+v", 200, o.Payload)
}

func (o *GetLicenseInformationOK) GetPayload() []*models.LicensingInfo {
	return o.Payload
}

func (o *GetLicenseInformationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseInformationBadRequest creates a GetLicenseInformationBadRequest with default headers values
func NewGetLicenseInformationBadRequest() *GetLicenseInformationBadRequest {
	return &GetLicenseInformationBadRequest{}
}

/*
GetLicenseInformationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetLicenseInformationBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get license information bad request response has a 2xx status code
func (o *GetLicenseInformationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license information bad request response has a 3xx status code
func (o *GetLicenseInformationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license information bad request response has a 4xx status code
func (o *GetLicenseInformationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license information bad request response has a 5xx status code
func (o *GetLicenseInformationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get license information bad request response a status code equal to that given
func (o *GetLicenseInformationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get license information bad request response
func (o *GetLicenseInformationBadRequest) Code() int {
	return 400
}

func (o *GetLicenseInformationBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/licensing-info][%d] getLicenseInformationBadRequest  %+v", 400, o.Payload)
}

func (o *GetLicenseInformationBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/licensing-info][%d] getLicenseInformationBadRequest  %+v", 400, o.Payload)
}

func (o *GetLicenseInformationBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetLicenseInformationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseInformationInternalServerError creates a GetLicenseInformationInternalServerError with default headers values
func NewGetLicenseInformationInternalServerError() *GetLicenseInformationInternalServerError {
	return &GetLicenseInformationInternalServerError{}
}

/*
GetLicenseInformationInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetLicenseInformationInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get license information internal server error response has a 2xx status code
func (o *GetLicenseInformationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license information internal server error response has a 3xx status code
func (o *GetLicenseInformationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license information internal server error response has a 4xx status code
func (o *GetLicenseInformationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get license information internal server error response has a 5xx status code
func (o *GetLicenseInformationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get license information internal server error response a status code equal to that given
func (o *GetLicenseInformationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get license information internal server error response
func (o *GetLicenseInformationInternalServerError) Code() int {
	return 500
}

func (o *GetLicenseInformationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/licensing-info][%d] getLicenseInformationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLicenseInformationInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/licensing-info][%d] getLicenseInformationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLicenseInformationInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetLicenseInformationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
