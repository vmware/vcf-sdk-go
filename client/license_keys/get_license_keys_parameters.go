// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package license_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLicenseKeysParams creates a new GetLicenseKeysParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetLicenseKeysParams() *GetLicenseKeysParams {
	return &GetLicenseKeysParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetLicenseKeysParamsWithTimeout creates a new GetLicenseKeysParams object
// with the ability to set a timeout on a request.
func NewGetLicenseKeysParamsWithTimeout(timeout time.Duration) *GetLicenseKeysParams {
	return &GetLicenseKeysParams{
		timeout: timeout,
	}
}

// NewGetLicenseKeysParamsWithContext creates a new GetLicenseKeysParams object
// with the ability to set a context for a request.
func NewGetLicenseKeysParamsWithContext(ctx context.Context) *GetLicenseKeysParams {
	return &GetLicenseKeysParams{
		Context: ctx,
	}
}

// NewGetLicenseKeysParamsWithHTTPClient creates a new GetLicenseKeysParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetLicenseKeysParamsWithHTTPClient(client *http.Client) *GetLicenseKeysParams {
	return &GetLicenseKeysParams{
		HTTPClient: client,
	}
}

/*
GetLicenseKeysParams contains all the parameters to send to the API endpoint

	for the get license keys operation.

	Typically these are written to a http.Request.
*/
type GetLicenseKeysParams struct {

	/* LicenseKeyStatus.

	   Status of a License Key
	*/
	LicenseKeyStatus []string

	/* ProductType.

	   Type of a Product
	*/
	ProductType []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get license keys params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLicenseKeysParams) WithDefaults() *GetLicenseKeysParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get license keys params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLicenseKeysParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get license keys params
func (o *GetLicenseKeysParams) WithTimeout(timeout time.Duration) *GetLicenseKeysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get license keys params
func (o *GetLicenseKeysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get license keys params
func (o *GetLicenseKeysParams) WithContext(ctx context.Context) *GetLicenseKeysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get license keys params
func (o *GetLicenseKeysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get license keys params
func (o *GetLicenseKeysParams) WithHTTPClient(client *http.Client) *GetLicenseKeysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get license keys params
func (o *GetLicenseKeysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLicenseKeyStatus adds the licenseKeyStatus to the get license keys params
func (o *GetLicenseKeysParams) WithLicenseKeyStatus(licenseKeyStatus []string) *GetLicenseKeysParams {
	o.SetLicenseKeyStatus(licenseKeyStatus)
	return o
}

// SetLicenseKeyStatus adds the licenseKeyStatus to the get license keys params
func (o *GetLicenseKeysParams) SetLicenseKeyStatus(licenseKeyStatus []string) {
	o.LicenseKeyStatus = licenseKeyStatus
}

// WithProductType adds the productType to the get license keys params
func (o *GetLicenseKeysParams) WithProductType(productType []string) *GetLicenseKeysParams {
	o.SetProductType(productType)
	return o
}

// SetProductType adds the productType to the get license keys params
func (o *GetLicenseKeysParams) SetProductType(productType []string) {
	o.ProductType = productType
}

// WriteToRequest writes these params to a swagger request
func (o *GetLicenseKeysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LicenseKeyStatus != nil {

		// binding items for licenseKeyStatus
		joinedLicenseKeyStatus := o.bindParamLicenseKeyStatus(reg)

		// query array param licenseKeyStatus
		if err := r.SetQueryParam("licenseKeyStatus", joinedLicenseKeyStatus...); err != nil {
			return err
		}
	}

	if o.ProductType != nil {

		// binding items for productType
		joinedProductType := o.bindParamProductType(reg)

		// query array param productType
		if err := r.SetQueryParam("productType", joinedProductType...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetLicenseKeys binds the parameter licenseKeyStatus
func (o *GetLicenseKeysParams) bindParamLicenseKeyStatus(formats strfmt.Registry) []string {
	licenseKeyStatusIR := o.LicenseKeyStatus

	var licenseKeyStatusIC []string
	for _, licenseKeyStatusIIR := range licenseKeyStatusIR { // explode []string

		licenseKeyStatusIIV := licenseKeyStatusIIR // string as string
		licenseKeyStatusIC = append(licenseKeyStatusIC, licenseKeyStatusIIV)
	}

	// items.CollectionFormat: "multi"
	licenseKeyStatusIS := swag.JoinByFormat(licenseKeyStatusIC, "multi")

	return licenseKeyStatusIS
}

// bindParamGetLicenseKeys binds the parameter productType
func (o *GetLicenseKeysParams) bindParamProductType(formats strfmt.Registry) []string {
	productTypeIR := o.ProductType

	var productTypeIC []string
	for _, productTypeIIR := range productTypeIR { // explode []string

		productTypeIIV := productTypeIIR // string as string
		productTypeIC = append(productTypeIC, productTypeIIV)
	}

	// items.CollectionFormat: "multi"
	productTypeIS := swag.JoinByFormat(productTypeIC, "multi")

	return productTypeIS
}
