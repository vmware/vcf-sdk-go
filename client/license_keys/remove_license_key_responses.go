// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package license_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// RemoveLicenseKeyReader is a Reader for the RemoveLicenseKey structure.
type RemoveLicenseKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveLicenseKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveLicenseKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRemoveLicenseKeyNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRemoveLicenseKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveLicenseKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/license-keys/{key}] removeLicenseKey", response, response.Code())
	}
}

// NewRemoveLicenseKeyOK creates a RemoveLicenseKeyOK with default headers values
func NewRemoveLicenseKeyOK() *RemoveLicenseKeyOK {
	return &RemoveLicenseKeyOK{}
}

/*
RemoveLicenseKeyOK describes a response with status code 200, with default header values.

OK
*/
type RemoveLicenseKeyOK struct {
}

// IsSuccess returns true when this remove license key o k response has a 2xx status code
func (o *RemoveLicenseKeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove license key o k response has a 3xx status code
func (o *RemoveLicenseKeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove license key o k response has a 4xx status code
func (o *RemoveLicenseKeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove license key o k response has a 5xx status code
func (o *RemoveLicenseKeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this remove license key o k response a status code equal to that given
func (o *RemoveLicenseKeyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the remove license key o k response
func (o *RemoveLicenseKeyOK) Code() int {
	return 200
}

func (o *RemoveLicenseKeyOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/license-keys/{key}][%d] removeLicenseKeyOK ", 200)
}

func (o *RemoveLicenseKeyOK) String() string {
	return fmt.Sprintf("[DELETE /v1/license-keys/{key}][%d] removeLicenseKeyOK ", 200)
}

func (o *RemoveLicenseKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveLicenseKeyNoContent creates a RemoveLicenseKeyNoContent with default headers values
func NewRemoveLicenseKeyNoContent() *RemoveLicenseKeyNoContent {
	return &RemoveLicenseKeyNoContent{}
}

/*
RemoveLicenseKeyNoContent describes a response with status code 204, with default header values.

No content
*/
type RemoveLicenseKeyNoContent struct {
}

// IsSuccess returns true when this remove license key no content response has a 2xx status code
func (o *RemoveLicenseKeyNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove license key no content response has a 3xx status code
func (o *RemoveLicenseKeyNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove license key no content response has a 4xx status code
func (o *RemoveLicenseKeyNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove license key no content response has a 5xx status code
func (o *RemoveLicenseKeyNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this remove license key no content response a status code equal to that given
func (o *RemoveLicenseKeyNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the remove license key no content response
func (o *RemoveLicenseKeyNoContent) Code() int {
	return 204
}

func (o *RemoveLicenseKeyNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/license-keys/{key}][%d] removeLicenseKeyNoContent ", 204)
}

func (o *RemoveLicenseKeyNoContent) String() string {
	return fmt.Sprintf("[DELETE /v1/license-keys/{key}][%d] removeLicenseKeyNoContent ", 204)
}

func (o *RemoveLicenseKeyNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveLicenseKeyNotFound creates a RemoveLicenseKeyNotFound with default headers values
func NewRemoveLicenseKeyNotFound() *RemoveLicenseKeyNotFound {
	return &RemoveLicenseKeyNotFound{}
}

/*
RemoveLicenseKeyNotFound describes a response with status code 404, with default header values.

License key not found
*/
type RemoveLicenseKeyNotFound struct {
}

// IsSuccess returns true when this remove license key not found response has a 2xx status code
func (o *RemoveLicenseKeyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove license key not found response has a 3xx status code
func (o *RemoveLicenseKeyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove license key not found response has a 4xx status code
func (o *RemoveLicenseKeyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove license key not found response has a 5xx status code
func (o *RemoveLicenseKeyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this remove license key not found response a status code equal to that given
func (o *RemoveLicenseKeyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the remove license key not found response
func (o *RemoveLicenseKeyNotFound) Code() int {
	return 404
}

func (o *RemoveLicenseKeyNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/license-keys/{key}][%d] removeLicenseKeyNotFound ", 404)
}

func (o *RemoveLicenseKeyNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/license-keys/{key}][%d] removeLicenseKeyNotFound ", 404)
}

func (o *RemoveLicenseKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveLicenseKeyInternalServerError creates a RemoveLicenseKeyInternalServerError with default headers values
func NewRemoveLicenseKeyInternalServerError() *RemoveLicenseKeyInternalServerError {
	return &RemoveLicenseKeyInternalServerError{}
}

/*
RemoveLicenseKeyInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type RemoveLicenseKeyInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove license key internal server error response has a 2xx status code
func (o *RemoveLicenseKeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove license key internal server error response has a 3xx status code
func (o *RemoveLicenseKeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove license key internal server error response has a 4xx status code
func (o *RemoveLicenseKeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove license key internal server error response has a 5xx status code
func (o *RemoveLicenseKeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remove license key internal server error response a status code equal to that given
func (o *RemoveLicenseKeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remove license key internal server error response
func (o *RemoveLicenseKeyInternalServerError) Code() int {
	return 500
}

func (o *RemoveLicenseKeyInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/license-keys/{key}][%d] removeLicenseKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveLicenseKeyInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/license-keys/{key}][%d] removeLicenseKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveLicenseKeyInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveLicenseKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
