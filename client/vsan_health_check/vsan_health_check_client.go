// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package vsan_health_check

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new v san health check API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v san health check API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetVSANHealthCheckByDomain(params *GetVSANHealthCheckByDomainParams, opts ...ClientOption) (*GetVSANHealthCheckByDomainOK, *GetVSANHealthCheckByDomainAccepted, error)

	GetVSANHealthCheckByQueryID(params *GetVSANHealthCheckByQueryIDParams, opts ...ClientOption) (*GetVSANHealthCheckByQueryIDOK, error)

	GetVSANHealthCheckByTaskID(params *GetVSANHealthCheckByTaskIDParams, opts ...ClientOption) (*GetVSANHealthCheckByTaskIDOK, error)

	UpdateVSANHealthCheckByDomain(params *UpdateVSANHealthCheckByDomainParams, opts ...ClientOption) (*UpdateVSANHealthCheckByDomainOK, *UpdateVSANHealthCheckByDomainAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetVSANHealthCheckByDomain retrieves v SAN health check status for a domain by its ID

Get vSAN health check status for all cluster on the domain
*/
func (a *Client) GetVSANHealthCheckByDomain(params *GetVSANHealthCheckByDomainParams, opts ...ClientOption) (*GetVSANHealthCheckByDomainOK, *GetVSANHealthCheckByDomainAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVSANHealthCheckByDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVsanHealthCheckByDomain",
		Method:             "GET",
		PathPattern:        "/v1/domains/{domainId}/health-checks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVSANHealthCheckByDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetVSANHealthCheckByDomainOK:
		return value, nil, nil
	case *GetVSANHealthCheckByDomainAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for vsan_health_check: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVSANHealthCheckByQueryID retrieves v SAN health check status for a domain and query ID

Get vSAN health check status for a given Query Id
*/
func (a *Client) GetVSANHealthCheckByQueryID(params *GetVSANHealthCheckByQueryIDParams, opts ...ClientOption) (*GetVSANHealthCheckByQueryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVSANHealthCheckByQueryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVsanHealthCheckByQueryID",
		Method:             "GET",
		PathPattern:        "/v1/domains/{domainId}/health-checks/queries/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVSANHealthCheckByQueryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVSANHealthCheckByQueryIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVsanHealthCheckByQueryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVSANHealthCheckByTaskID retrieves a v SAN health check by task ID

Get vSAN health check update task status for a given task Id
*/
func (a *Client) GetVSANHealthCheckByTaskID(params *GetVSANHealthCheckByTaskIDParams, opts ...ClientOption) (*GetVSANHealthCheckByTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVSANHealthCheckByTaskIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVsanHealthCheckByTaskID",
		Method:             "GET",
		PathPattern:        "/v1/domains/{domainId}/health-checks/tasks/{taskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVSANHealthCheckByTaskIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVSANHealthCheckByTaskIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVsanHealthCheckByTaskID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVSANHealthCheckByDomain updates the v SAN health check status for a domain

Update vSAN health check status for domain
*/
func (a *Client) UpdateVSANHealthCheckByDomain(params *UpdateVSANHealthCheckByDomainParams, opts ...ClientOption) (*UpdateVSANHealthCheckByDomainOK, *UpdateVSANHealthCheckByDomainAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVSANHealthCheckByDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVsanHealthCheckByDomain",
		Method:             "PATCH",
		PathPattern:        "/v1/domains/{domainId}/health-checks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVSANHealthCheckByDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateVSANHealthCheckByDomainOK:
		return value, nil, nil
	case *UpdateVSANHealthCheckByDomainAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for vsan_health_check: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
