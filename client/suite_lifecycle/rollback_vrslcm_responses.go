// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package suite_lifecycle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// RollbackVRSLCMReader is a Reader for the RollbackVRSLCM structure.
type RollbackVRSLCMReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RollbackVRSLCMReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewRollbackVRSLCMAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 405:
		result := NewRollbackVRSLCMMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/vrslcm] rollbackVrslcm", response, response.Code())
	}
}

// NewRollbackVRSLCMAccepted creates a RollbackVRSLCMAccepted with default headers values
func NewRollbackVRSLCMAccepted() *RollbackVRSLCMAccepted {
	return &RollbackVRSLCMAccepted{}
}

/*
RollbackVRSLCMAccepted describes a response with status code 202, with default header values.

Accepted
*/
type RollbackVRSLCMAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this rollback Vrslcm accepted response has a 2xx status code
func (o *RollbackVRSLCMAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rollback Vrslcm accepted response has a 3xx status code
func (o *RollbackVRSLCMAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback Vrslcm accepted response has a 4xx status code
func (o *RollbackVRSLCMAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this rollback Vrslcm accepted response has a 5xx status code
func (o *RollbackVRSLCMAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this rollback Vrslcm accepted response a status code equal to that given
func (o *RollbackVRSLCMAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the rollback Vrslcm accepted response
func (o *RollbackVRSLCMAccepted) Code() int {
	return 202
}

func (o *RollbackVRSLCMAccepted) Error() string {
	return fmt.Sprintf("[DELETE /v1/vrslcm][%d] rollbackVrslcmAccepted  %+v", 202, o.Payload)
}

func (o *RollbackVRSLCMAccepted) String() string {
	return fmt.Sprintf("[DELETE /v1/vrslcm][%d] rollbackVrslcmAccepted  %+v", 202, o.Payload)
}

func (o *RollbackVRSLCMAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *RollbackVRSLCMAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollbackVRSLCMMethodNotAllowed creates a RollbackVRSLCMMethodNotAllowed with default headers values
func NewRollbackVRSLCMMethodNotAllowed() *RollbackVRSLCMMethodNotAllowed {
	return &RollbackVRSLCMMethodNotAllowed{}
}

/*
RollbackVRSLCMMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RollbackVRSLCMMethodNotAllowed struct {
	Payload *models.Error
}

// IsSuccess returns true when this rollback Vrslcm method not allowed response has a 2xx status code
func (o *RollbackVRSLCMMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rollback Vrslcm method not allowed response has a 3xx status code
func (o *RollbackVRSLCMMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback Vrslcm method not allowed response has a 4xx status code
func (o *RollbackVRSLCMMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this rollback Vrslcm method not allowed response has a 5xx status code
func (o *RollbackVRSLCMMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this rollback Vrslcm method not allowed response a status code equal to that given
func (o *RollbackVRSLCMMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the rollback Vrslcm method not allowed response
func (o *RollbackVRSLCMMethodNotAllowed) Code() int {
	return 405
}

func (o *RollbackVRSLCMMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /v1/vrslcm][%d] rollbackVrslcmMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *RollbackVRSLCMMethodNotAllowed) String() string {
	return fmt.Sprintf("[DELETE /v1/vrslcm][%d] rollbackVrslcmMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *RollbackVRSLCMMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *RollbackVRSLCMMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
