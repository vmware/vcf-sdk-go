// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package suite_lifecycle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateVRSLCMVersionInInventoryReader is a Reader for the UpdateVRSLCMVersionInInventory structure.
type UpdateVRSLCMVersionInInventoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVRSLCMVersionInInventoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVRSLCMVersionInInventoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVRSLCMVersionInInventoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVRSLCMVersionInInventoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateVRSLCMVersionInInventoryMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVRSLCMVersionInInventoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/vrslcm] updateVrslcmVersionInInventory", response, response.Code())
	}
}

// NewUpdateVRSLCMVersionInInventoryOK creates a UpdateVRSLCMVersionInInventoryOK with default headers values
func NewUpdateVRSLCMVersionInInventoryOK() *UpdateVRSLCMVersionInInventoryOK {
	return &UpdateVRSLCMVersionInInventoryOK{}
}

/*
UpdateVRSLCMVersionInInventoryOK describes a response with status code 200, with default header values.

OK
*/
type UpdateVRSLCMVersionInInventoryOK struct {
	Payload string
}

// IsSuccess returns true when this update Vrslcm version in inventory o k response has a 2xx status code
func (o *UpdateVRSLCMVersionInInventoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update Vrslcm version in inventory o k response has a 3xx status code
func (o *UpdateVRSLCMVersionInInventoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Vrslcm version in inventory o k response has a 4xx status code
func (o *UpdateVRSLCMVersionInInventoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update Vrslcm version in inventory o k response has a 5xx status code
func (o *UpdateVRSLCMVersionInInventoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update Vrslcm version in inventory o k response a status code equal to that given
func (o *UpdateVRSLCMVersionInInventoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update Vrslcm version in inventory o k response
func (o *UpdateVRSLCMVersionInInventoryOK) Code() int {
	return 200
}

func (o *UpdateVRSLCMVersionInInventoryOK) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryOK  %+v", 200, o.Payload)
}

func (o *UpdateVRSLCMVersionInInventoryOK) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryOK  %+v", 200, o.Payload)
}

func (o *UpdateVRSLCMVersionInInventoryOK) GetPayload() string {
	return o.Payload
}

func (o *UpdateVRSLCMVersionInInventoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVRSLCMVersionInInventoryBadRequest creates a UpdateVRSLCMVersionInInventoryBadRequest with default headers values
func NewUpdateVRSLCMVersionInInventoryBadRequest() *UpdateVRSLCMVersionInInventoryBadRequest {
	return &UpdateVRSLCMVersionInInventoryBadRequest{}
}

/*
UpdateVRSLCMVersionInInventoryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateVRSLCMVersionInInventoryBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Vrslcm version in inventory bad request response has a 2xx status code
func (o *UpdateVRSLCMVersionInInventoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Vrslcm version in inventory bad request response has a 3xx status code
func (o *UpdateVRSLCMVersionInInventoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Vrslcm version in inventory bad request response has a 4xx status code
func (o *UpdateVRSLCMVersionInInventoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Vrslcm version in inventory bad request response has a 5xx status code
func (o *UpdateVRSLCMVersionInInventoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update Vrslcm version in inventory bad request response a status code equal to that given
func (o *UpdateVRSLCMVersionInInventoryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update Vrslcm version in inventory bad request response
func (o *UpdateVRSLCMVersionInInventoryBadRequest) Code() int {
	return 400
}

func (o *UpdateVRSLCMVersionInInventoryBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVRSLCMVersionInInventoryBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVRSLCMVersionInInventoryBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVRSLCMVersionInInventoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVRSLCMVersionInInventoryNotFound creates a UpdateVRSLCMVersionInInventoryNotFound with default headers values
func NewUpdateVRSLCMVersionInInventoryNotFound() *UpdateVRSLCMVersionInInventoryNotFound {
	return &UpdateVRSLCMVersionInInventoryNotFound{}
}

/*
UpdateVRSLCMVersionInInventoryNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateVRSLCMVersionInInventoryNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Vrslcm version in inventory not found response has a 2xx status code
func (o *UpdateVRSLCMVersionInInventoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Vrslcm version in inventory not found response has a 3xx status code
func (o *UpdateVRSLCMVersionInInventoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Vrslcm version in inventory not found response has a 4xx status code
func (o *UpdateVRSLCMVersionInInventoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Vrslcm version in inventory not found response has a 5xx status code
func (o *UpdateVRSLCMVersionInInventoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update Vrslcm version in inventory not found response a status code equal to that given
func (o *UpdateVRSLCMVersionInInventoryNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update Vrslcm version in inventory not found response
func (o *UpdateVRSLCMVersionInInventoryNotFound) Code() int {
	return 404
}

func (o *UpdateVRSLCMVersionInInventoryNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVRSLCMVersionInInventoryNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVRSLCMVersionInInventoryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVRSLCMVersionInInventoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVRSLCMVersionInInventoryMethodNotAllowed creates a UpdateVRSLCMVersionInInventoryMethodNotAllowed with default headers values
func NewUpdateVRSLCMVersionInInventoryMethodNotAllowed() *UpdateVRSLCMVersionInInventoryMethodNotAllowed {
	return &UpdateVRSLCMVersionInInventoryMethodNotAllowed{}
}

/*
UpdateVRSLCMVersionInInventoryMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateVRSLCMVersionInInventoryMethodNotAllowed struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Vrslcm version in inventory method not allowed response has a 2xx status code
func (o *UpdateVRSLCMVersionInInventoryMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Vrslcm version in inventory method not allowed response has a 3xx status code
func (o *UpdateVRSLCMVersionInInventoryMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Vrslcm version in inventory method not allowed response has a 4xx status code
func (o *UpdateVRSLCMVersionInInventoryMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Vrslcm version in inventory method not allowed response has a 5xx status code
func (o *UpdateVRSLCMVersionInInventoryMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update Vrslcm version in inventory method not allowed response a status code equal to that given
func (o *UpdateVRSLCMVersionInInventoryMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update Vrslcm version in inventory method not allowed response
func (o *UpdateVRSLCMVersionInInventoryMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateVRSLCMVersionInInventoryMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateVRSLCMVersionInInventoryMethodNotAllowed) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateVRSLCMVersionInInventoryMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVRSLCMVersionInInventoryMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVRSLCMVersionInInventoryInternalServerError creates a UpdateVRSLCMVersionInInventoryInternalServerError with default headers values
func NewUpdateVRSLCMVersionInInventoryInternalServerError() *UpdateVRSLCMVersionInInventoryInternalServerError {
	return &UpdateVRSLCMVersionInInventoryInternalServerError{}
}

/*
UpdateVRSLCMVersionInInventoryInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateVRSLCMVersionInInventoryInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Vrslcm version in inventory internal server error response has a 2xx status code
func (o *UpdateVRSLCMVersionInInventoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Vrslcm version in inventory internal server error response has a 3xx status code
func (o *UpdateVRSLCMVersionInInventoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Vrslcm version in inventory internal server error response has a 4xx status code
func (o *UpdateVRSLCMVersionInInventoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update Vrslcm version in inventory internal server error response has a 5xx status code
func (o *UpdateVRSLCMVersionInInventoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update Vrslcm version in inventory internal server error response a status code equal to that given
func (o *UpdateVRSLCMVersionInInventoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update Vrslcm version in inventory internal server error response
func (o *UpdateVRSLCMVersionInInventoryInternalServerError) Code() int {
	return 500
}

func (o *UpdateVRSLCMVersionInInventoryInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVRSLCMVersionInInventoryInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVRSLCMVersionInInventoryInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVRSLCMVersionInInventoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
