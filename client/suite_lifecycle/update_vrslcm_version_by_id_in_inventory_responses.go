// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package suite_lifecycle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateVRSLCMVersionByIDInInventoryReader is a Reader for the UpdateVRSLCMVersionByIDInInventory structure.
type UpdateVRSLCMVersionByIDInInventoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVRSLCMVersionByIDInInventoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVRSLCMVersionByIDInInventoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVRSLCMVersionByIDInInventoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVRSLCMVersionByIDInInventoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateVRSLCMVersionByIDInInventoryMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVRSLCMVersionByIDInInventoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/vrslcms/{id}] updateVrslcmVersionByIdInInventory", response, response.Code())
	}
}

// NewUpdateVRSLCMVersionByIDInInventoryOK creates a UpdateVRSLCMVersionByIDInInventoryOK with default headers values
func NewUpdateVRSLCMVersionByIDInInventoryOK() *UpdateVRSLCMVersionByIDInInventoryOK {
	return &UpdateVRSLCMVersionByIDInInventoryOK{}
}

/*
UpdateVRSLCMVersionByIDInInventoryOK describes a response with status code 200, with default header values.

OK
*/
type UpdateVRSLCMVersionByIDInInventoryOK struct {
	Payload string
}

// IsSuccess returns true when this update Vrslcm version by Id in inventory o k response has a 2xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update Vrslcm version by Id in inventory o k response has a 3xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Vrslcm version by Id in inventory o k response has a 4xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update Vrslcm version by Id in inventory o k response has a 5xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update Vrslcm version by Id in inventory o k response a status code equal to that given
func (o *UpdateVRSLCMVersionByIDInInventoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update Vrslcm version by Id in inventory o k response
func (o *UpdateVRSLCMVersionByIDInInventoryOK) Code() int {
	return 200
}

func (o *UpdateVRSLCMVersionByIDInInventoryOK) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryOK  %+v", 200, o.Payload)
}

func (o *UpdateVRSLCMVersionByIDInInventoryOK) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryOK  %+v", 200, o.Payload)
}

func (o *UpdateVRSLCMVersionByIDInInventoryOK) GetPayload() string {
	return o.Payload
}

func (o *UpdateVRSLCMVersionByIDInInventoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVRSLCMVersionByIDInInventoryBadRequest creates a UpdateVRSLCMVersionByIDInInventoryBadRequest with default headers values
func NewUpdateVRSLCMVersionByIDInInventoryBadRequest() *UpdateVRSLCMVersionByIDInInventoryBadRequest {
	return &UpdateVRSLCMVersionByIDInInventoryBadRequest{}
}

/*
UpdateVRSLCMVersionByIDInInventoryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateVRSLCMVersionByIDInInventoryBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Vrslcm version by Id in inventory bad request response has a 2xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Vrslcm version by Id in inventory bad request response has a 3xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Vrslcm version by Id in inventory bad request response has a 4xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Vrslcm version by Id in inventory bad request response has a 5xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update Vrslcm version by Id in inventory bad request response a status code equal to that given
func (o *UpdateVRSLCMVersionByIDInInventoryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update Vrslcm version by Id in inventory bad request response
func (o *UpdateVRSLCMVersionByIDInInventoryBadRequest) Code() int {
	return 400
}

func (o *UpdateVRSLCMVersionByIDInInventoryBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVRSLCMVersionByIDInInventoryBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVRSLCMVersionByIDInInventoryBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVRSLCMVersionByIDInInventoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVRSLCMVersionByIDInInventoryNotFound creates a UpdateVRSLCMVersionByIDInInventoryNotFound with default headers values
func NewUpdateVRSLCMVersionByIDInInventoryNotFound() *UpdateVRSLCMVersionByIDInInventoryNotFound {
	return &UpdateVRSLCMVersionByIDInInventoryNotFound{}
}

/*
UpdateVRSLCMVersionByIDInInventoryNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateVRSLCMVersionByIDInInventoryNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Vrslcm version by Id in inventory not found response has a 2xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Vrslcm version by Id in inventory not found response has a 3xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Vrslcm version by Id in inventory not found response has a 4xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Vrslcm version by Id in inventory not found response has a 5xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update Vrslcm version by Id in inventory not found response a status code equal to that given
func (o *UpdateVRSLCMVersionByIDInInventoryNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update Vrslcm version by Id in inventory not found response
func (o *UpdateVRSLCMVersionByIDInInventoryNotFound) Code() int {
	return 404
}

func (o *UpdateVRSLCMVersionByIDInInventoryNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVRSLCMVersionByIDInInventoryNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVRSLCMVersionByIDInInventoryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVRSLCMVersionByIDInInventoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVRSLCMVersionByIDInInventoryMethodNotAllowed creates a UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed with default headers values
func NewUpdateVRSLCMVersionByIDInInventoryMethodNotAllowed() *UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed {
	return &UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed{}
}

/*
UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Vrslcm version by Id in inventory method not allowed response has a 2xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Vrslcm version by Id in inventory method not allowed response has a 3xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Vrslcm version by Id in inventory method not allowed response has a 4xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Vrslcm version by Id in inventory method not allowed response has a 5xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update Vrslcm version by Id in inventory method not allowed response a status code equal to that given
func (o *UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update Vrslcm version by Id in inventory method not allowed response
func (o *UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVRSLCMVersionByIDInInventoryMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVRSLCMVersionByIDInInventoryInternalServerError creates a UpdateVRSLCMVersionByIDInInventoryInternalServerError with default headers values
func NewUpdateVRSLCMVersionByIDInInventoryInternalServerError() *UpdateVRSLCMVersionByIDInInventoryInternalServerError {
	return &UpdateVRSLCMVersionByIDInInventoryInternalServerError{}
}

/*
UpdateVRSLCMVersionByIDInInventoryInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateVRSLCMVersionByIDInInventoryInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Vrslcm version by Id in inventory internal server error response has a 2xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Vrslcm version by Id in inventory internal server error response has a 3xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Vrslcm version by Id in inventory internal server error response has a 4xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update Vrslcm version by Id in inventory internal server error response has a 5xx status code
func (o *UpdateVRSLCMVersionByIDInInventoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update Vrslcm version by Id in inventory internal server error response a status code equal to that given
func (o *UpdateVRSLCMVersionByIDInInventoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update Vrslcm version by Id in inventory internal server error response
func (o *UpdateVRSLCMVersionByIDInInventoryInternalServerError) Code() int {
	return 500
}

func (o *UpdateVRSLCMVersionByIDInInventoryInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVRSLCMVersionByIDInInventoryInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVRSLCMVersionByIDInInventoryInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVRSLCMVersionByIDInInventoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
