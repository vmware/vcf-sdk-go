// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package network_pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// CreateNetworkPoolReader is a Reader for the CreateNetworkPool structure.
type CreateNetworkPoolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNetworkPoolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateNetworkPoolOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewCreateNetworkPoolCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateNetworkPoolBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateNetworkPoolInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/network-pools] createNetworkPool", response, response.Code())
	}
}

// NewCreateNetworkPoolOK creates a CreateNetworkPoolOK with default headers values
func NewCreateNetworkPoolOK() *CreateNetworkPoolOK {
	return &CreateNetworkPoolOK{}
}

/*
CreateNetworkPoolOK describes a response with status code 200, with default header values.

OK
*/
type CreateNetworkPoolOK struct {
	Payload *models.NetworkPool
}

// IsSuccess returns true when this create network pool o k response has a 2xx status code
func (o *CreateNetworkPoolOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create network pool o k response has a 3xx status code
func (o *CreateNetworkPoolOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create network pool o k response has a 4xx status code
func (o *CreateNetworkPoolOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create network pool o k response has a 5xx status code
func (o *CreateNetworkPoolOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create network pool o k response a status code equal to that given
func (o *CreateNetworkPoolOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create network pool o k response
func (o *CreateNetworkPoolOK) Code() int {
	return 200
}

func (o *CreateNetworkPoolOK) Error() string {
	return fmt.Sprintf("[POST /v1/network-pools][%d] createNetworkPoolOK  %+v", 200, o.Payload)
}

func (o *CreateNetworkPoolOK) String() string {
	return fmt.Sprintf("[POST /v1/network-pools][%d] createNetworkPoolOK  %+v", 200, o.Payload)
}

func (o *CreateNetworkPoolOK) GetPayload() *models.NetworkPool {
	return o.Payload
}

func (o *CreateNetworkPoolOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkPool)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNetworkPoolCreated creates a CreateNetworkPoolCreated with default headers values
func NewCreateNetworkPoolCreated() *CreateNetworkPoolCreated {
	return &CreateNetworkPoolCreated{}
}

/*
CreateNetworkPoolCreated describes a response with status code 201, with default header values.

The newly created network pool
*/
type CreateNetworkPoolCreated struct {
	Payload *models.NetworkPool
}

// IsSuccess returns true when this create network pool created response has a 2xx status code
func (o *CreateNetworkPoolCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create network pool created response has a 3xx status code
func (o *CreateNetworkPoolCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create network pool created response has a 4xx status code
func (o *CreateNetworkPoolCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create network pool created response has a 5xx status code
func (o *CreateNetworkPoolCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create network pool created response a status code equal to that given
func (o *CreateNetworkPoolCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create network pool created response
func (o *CreateNetworkPoolCreated) Code() int {
	return 201
}

func (o *CreateNetworkPoolCreated) Error() string {
	return fmt.Sprintf("[POST /v1/network-pools][%d] createNetworkPoolCreated  %+v", 201, o.Payload)
}

func (o *CreateNetworkPoolCreated) String() string {
	return fmt.Sprintf("[POST /v1/network-pools][%d] createNetworkPoolCreated  %+v", 201, o.Payload)
}

func (o *CreateNetworkPoolCreated) GetPayload() *models.NetworkPool {
	return o.Payload
}

func (o *CreateNetworkPoolCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkPool)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNetworkPoolBadRequest creates a CreateNetworkPoolBadRequest with default headers values
func NewCreateNetworkPoolBadRequest() *CreateNetworkPoolBadRequest {
	return &CreateNetworkPoolBadRequest{}
}

/*
CreateNetworkPoolBadRequest describes a response with status code 400, with default header values.

Errors due to network pool validations failures
*/
type CreateNetworkPoolBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this create network pool bad request response has a 2xx status code
func (o *CreateNetworkPoolBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create network pool bad request response has a 3xx status code
func (o *CreateNetworkPoolBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create network pool bad request response has a 4xx status code
func (o *CreateNetworkPoolBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create network pool bad request response has a 5xx status code
func (o *CreateNetworkPoolBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create network pool bad request response a status code equal to that given
func (o *CreateNetworkPoolBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create network pool bad request response
func (o *CreateNetworkPoolBadRequest) Code() int {
	return 400
}

func (o *CreateNetworkPoolBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/network-pools][%d] createNetworkPoolBadRequest  %+v", 400, o.Payload)
}

func (o *CreateNetworkPoolBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/network-pools][%d] createNetworkPoolBadRequest  %+v", 400, o.Payload)
}

func (o *CreateNetworkPoolBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateNetworkPoolBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNetworkPoolInternalServerError creates a CreateNetworkPoolInternalServerError with default headers values
func NewCreateNetworkPoolInternalServerError() *CreateNetworkPoolInternalServerError {
	return &CreateNetworkPoolInternalServerError{}
}

/*
CreateNetworkPoolInternalServerError describes a response with status code 500, with default header values.

Unexpected error
*/
type CreateNetworkPoolInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this create network pool internal server error response has a 2xx status code
func (o *CreateNetworkPoolInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create network pool internal server error response has a 3xx status code
func (o *CreateNetworkPoolInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create network pool internal server error response has a 4xx status code
func (o *CreateNetworkPoolInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create network pool internal server error response has a 5xx status code
func (o *CreateNetworkPoolInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create network pool internal server error response a status code equal to that given
func (o *CreateNetworkPoolInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create network pool internal server error response
func (o *CreateNetworkPoolInternalServerError) Code() int {
	return 500
}

func (o *CreateNetworkPoolInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/network-pools][%d] createNetworkPoolInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateNetworkPoolInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/network-pools][%d] createNetworkPoolInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateNetworkPoolInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateNetworkPoolInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
