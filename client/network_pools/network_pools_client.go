// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package network_pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new network pools API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network pools API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddIPPoolToNetworkOfNetworkPool(params *AddIPPoolToNetworkOfNetworkPoolParams, opts ...ClientOption) (*AddIPPoolToNetworkOfNetworkPoolOK, error)

	CreateNetworkPool(params *CreateNetworkPoolParams, opts ...ClientOption) (*CreateNetworkPoolOK, *CreateNetworkPoolCreated, error)

	DeleteIPPoolFromNetworkOfNetworkPool(params *DeleteIPPoolFromNetworkOfNetworkPoolParams, opts ...ClientOption) (*DeleteIPPoolFromNetworkOfNetworkPoolNoContent, error)

	DeleteNetworkPool(params *DeleteNetworkPoolParams, opts ...ClientOption) (*DeleteNetworkPoolNoContent, error)

	GetNetworkOfNetworkPool(params *GetNetworkOfNetworkPoolParams, opts ...ClientOption) (*GetNetworkOfNetworkPoolOK, error)

	GetNetworkPool(params *GetNetworkPoolParams, opts ...ClientOption) (*GetNetworkPoolOK, error)

	GetNetworkPools(params *GetNetworkPoolsParams, opts ...ClientOption) (*GetNetworkPoolsOK, error)

	GetNetworksOfNetworkPool(params *GetNetworksOfNetworkPoolParams, opts ...ClientOption) (*GetNetworksOfNetworkPoolOK, error)

	UpdateNetworkPool(params *UpdateNetworkPoolParams, opts ...ClientOption) (*UpdateNetworkPoolOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddIPPoolToNetworkOfNetworkPool adds an IP pool to a network of a network pool

Add an IP Pool to a Network of a Network Pool
*/
func (a *Client) AddIPPoolToNetworkOfNetworkPool(params *AddIPPoolToNetworkOfNetworkPoolParams, opts ...ClientOption) (*AddIPPoolToNetworkOfNetworkPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddIPPoolToNetworkOfNetworkPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addIpPoolToNetworkOfNetworkPool",
		Method:             "POST",
		PathPattern:        "/v1/network-pools/{id}/networks/{networkId}/ip-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddIPPoolToNetworkOfNetworkPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddIPPoolToNetworkOfNetworkPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addIpPoolToNetworkOfNetworkPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNetworkPool creates a network pool

Create a Network Pool
*/
func (a *Client) CreateNetworkPool(params *CreateNetworkPoolParams, opts ...ClientOption) (*CreateNetworkPoolOK, *CreateNetworkPoolCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkPool",
		Method:             "POST",
		PathPattern:        "/v1/network-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateNetworkPoolOK:
		return value, nil, nil
	case *CreateNetworkPoolCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for network_pools: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIPPoolFromNetworkOfNetworkPool deletes an IP pool from a network of a network pool

Delete an IP Pool from a Network of a Network Pool
*/
func (a *Client) DeleteIPPoolFromNetworkOfNetworkPool(params *DeleteIPPoolFromNetworkOfNetworkPoolParams, opts ...ClientOption) (*DeleteIPPoolFromNetworkOfNetworkPoolNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPPoolFromNetworkOfNetworkPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteIpPoolFromNetworkOfNetworkPool",
		Method:             "DELETE",
		PathPattern:        "/v1/network-pools/{id}/networks/{networkId}/ip-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPPoolFromNetworkOfNetworkPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIPPoolFromNetworkOfNetworkPoolNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIpPoolFromNetworkOfNetworkPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteNetworkPool deletes a network pool

Delete the Network Pool by the ID, if it exists and is unused
*/
func (a *Client) DeleteNetworkPool(params *DeleteNetworkPoolParams, opts ...ClientOption) (*DeleteNetworkPoolNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkPool",
		Method:             "DELETE",
		PathPattern:        "/v1/network-pools/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkPoolNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNetworkOfNetworkPool gets a network of a network pool

Get a Network that is part of a Network Pool
*/
func (a *Client) GetNetworkOfNetworkPool(params *GetNetworkOfNetworkPoolParams, opts ...ClientOption) (*GetNetworkOfNetworkPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkOfNetworkPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkOfNetworkPool",
		Method:             "GET",
		PathPattern:        "/v1/network-pools/{id}/networks/{networkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkOfNetworkPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkOfNetworkPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkOfNetworkPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNetworkPool gets a network pool

Get a Network Pool by ID, if it exists
*/
func (a *Client) GetNetworkPool(params *GetNetworkPoolParams, opts ...ClientOption) (*GetNetworkPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkPool",
		Method:             "GET",
		PathPattern:        "/v1/network-pools/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNetworkPools gets the network pools

Get the Network Pools
*/
func (a *Client) GetNetworkPools(params *GetNetworkPoolsParams, opts ...ClientOption) (*GetNetworkPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkPoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkPools",
		Method:             "GET",
		PathPattern:        "/v1/network-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkPoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkPoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkPools: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNetworksOfNetworkPool gets the networks of a network pool

Get the Networks that are part of a Network Pool
*/
func (a *Client) GetNetworksOfNetworkPool(params *GetNetworksOfNetworkPoolParams, opts ...ClientOption) (*GetNetworksOfNetworkPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksOfNetworkPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworksOfNetworkPool",
		Method:             "GET",
		PathPattern:        "/v1/network-pools/{id}/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworksOfNetworkPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksOfNetworkPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworksOfNetworkPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNetworkPool updates network pool

Update a Network Pool by ID, if it exists
*/
func (a *Client) UpdateNetworkPool(params *UpdateNetworkPoolParams, opts ...ClientOption) (*UpdateNetworkPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkPool",
		Method:             "PATCH",
		PathPattern:        "/v1/network-pools/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
