// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package network_pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// AddIPPoolToNetworkOfNetworkPoolReader is a Reader for the AddIPPoolToNetworkOfNetworkPool structure.
type AddIPPoolToNetworkOfNetworkPoolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddIPPoolToNetworkOfNetworkPoolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddIPPoolToNetworkOfNetworkPoolOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddIPPoolToNetworkOfNetworkPoolBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddIPPoolToNetworkOfNetworkPoolNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddIPPoolToNetworkOfNetworkPoolInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/network-pools/{id}/networks/{networkId}/ip-pools] addIpPoolToNetworkOfNetworkPool", response, response.Code())
	}
}

// NewAddIPPoolToNetworkOfNetworkPoolOK creates a AddIPPoolToNetworkOfNetworkPoolOK with default headers values
func NewAddIPPoolToNetworkOfNetworkPoolOK() *AddIPPoolToNetworkOfNetworkPoolOK {
	return &AddIPPoolToNetworkOfNetworkPoolOK{}
}

/*
AddIPPoolToNetworkOfNetworkPoolOK describes a response with status code 200, with default header values.

Add the IP Pool associated with a Network of a Network Pool
*/
type AddIPPoolToNetworkOfNetworkPoolOK struct {
	Payload *models.Network
}

// IsSuccess returns true when this add Ip pool to network of network pool o k response has a 2xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add Ip pool to network of network pool o k response has a 3xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add Ip pool to network of network pool o k response has a 4xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add Ip pool to network of network pool o k response has a 5xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add Ip pool to network of network pool o k response a status code equal to that given
func (o *AddIPPoolToNetworkOfNetworkPoolOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add Ip pool to network of network pool o k response
func (o *AddIPPoolToNetworkOfNetworkPoolOK) Code() int {
	return 200
}

func (o *AddIPPoolToNetworkOfNetworkPoolOK) Error() string {
	return fmt.Sprintf("[POST /v1/network-pools/{id}/networks/{networkId}/ip-pools][%d] addIpPoolToNetworkOfNetworkPoolOK  %+v", 200, o.Payload)
}

func (o *AddIPPoolToNetworkOfNetworkPoolOK) String() string {
	return fmt.Sprintf("[POST /v1/network-pools/{id}/networks/{networkId}/ip-pools][%d] addIpPoolToNetworkOfNetworkPoolOK  %+v", 200, o.Payload)
}

func (o *AddIPPoolToNetworkOfNetworkPoolOK) GetPayload() *models.Network {
	return o.Payload
}

func (o *AddIPPoolToNetworkOfNetworkPoolOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Network)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddIPPoolToNetworkOfNetworkPoolBadRequest creates a AddIPPoolToNetworkOfNetworkPoolBadRequest with default headers values
func NewAddIPPoolToNetworkOfNetworkPoolBadRequest() *AddIPPoolToNetworkOfNetworkPoolBadRequest {
	return &AddIPPoolToNetworkOfNetworkPoolBadRequest{}
}

/*
AddIPPoolToNetworkOfNetworkPoolBadRequest describes a response with status code 400, with default header values.

IP range validation failed error
*/
type AddIPPoolToNetworkOfNetworkPoolBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this add Ip pool to network of network pool bad request response has a 2xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add Ip pool to network of network pool bad request response has a 3xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add Ip pool to network of network pool bad request response has a 4xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add Ip pool to network of network pool bad request response has a 5xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add Ip pool to network of network pool bad request response a status code equal to that given
func (o *AddIPPoolToNetworkOfNetworkPoolBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add Ip pool to network of network pool bad request response
func (o *AddIPPoolToNetworkOfNetworkPoolBadRequest) Code() int {
	return 400
}

func (o *AddIPPoolToNetworkOfNetworkPoolBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/network-pools/{id}/networks/{networkId}/ip-pools][%d] addIpPoolToNetworkOfNetworkPoolBadRequest  %+v", 400, o.Payload)
}

func (o *AddIPPoolToNetworkOfNetworkPoolBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/network-pools/{id}/networks/{networkId}/ip-pools][%d] addIpPoolToNetworkOfNetworkPoolBadRequest  %+v", 400, o.Payload)
}

func (o *AddIPPoolToNetworkOfNetworkPoolBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddIPPoolToNetworkOfNetworkPoolBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddIPPoolToNetworkOfNetworkPoolNotFound creates a AddIPPoolToNetworkOfNetworkPoolNotFound with default headers values
func NewAddIPPoolToNetworkOfNetworkPoolNotFound() *AddIPPoolToNetworkOfNetworkPoolNotFound {
	return &AddIPPoolToNetworkOfNetworkPoolNotFound{}
}

/*
AddIPPoolToNetworkOfNetworkPoolNotFound describes a response with status code 404, with default header values.

Either Network Pool ID or Network ID not found
*/
type AddIPPoolToNetworkOfNetworkPoolNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this add Ip pool to network of network pool not found response has a 2xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add Ip pool to network of network pool not found response has a 3xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add Ip pool to network of network pool not found response has a 4xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add Ip pool to network of network pool not found response has a 5xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add Ip pool to network of network pool not found response a status code equal to that given
func (o *AddIPPoolToNetworkOfNetworkPoolNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add Ip pool to network of network pool not found response
func (o *AddIPPoolToNetworkOfNetworkPoolNotFound) Code() int {
	return 404
}

func (o *AddIPPoolToNetworkOfNetworkPoolNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/network-pools/{id}/networks/{networkId}/ip-pools][%d] addIpPoolToNetworkOfNetworkPoolNotFound  %+v", 404, o.Payload)
}

func (o *AddIPPoolToNetworkOfNetworkPoolNotFound) String() string {
	return fmt.Sprintf("[POST /v1/network-pools/{id}/networks/{networkId}/ip-pools][%d] addIpPoolToNetworkOfNetworkPoolNotFound  %+v", 404, o.Payload)
}

func (o *AddIPPoolToNetworkOfNetworkPoolNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddIPPoolToNetworkOfNetworkPoolNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddIPPoolToNetworkOfNetworkPoolInternalServerError creates a AddIPPoolToNetworkOfNetworkPoolInternalServerError with default headers values
func NewAddIPPoolToNetworkOfNetworkPoolInternalServerError() *AddIPPoolToNetworkOfNetworkPoolInternalServerError {
	return &AddIPPoolToNetworkOfNetworkPoolInternalServerError{}
}

/*
AddIPPoolToNetworkOfNetworkPoolInternalServerError describes a response with status code 500, with default header values.

Unexpected error
*/
type AddIPPoolToNetworkOfNetworkPoolInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this add Ip pool to network of network pool internal server error response has a 2xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add Ip pool to network of network pool internal server error response has a 3xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add Ip pool to network of network pool internal server error response has a 4xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add Ip pool to network of network pool internal server error response has a 5xx status code
func (o *AddIPPoolToNetworkOfNetworkPoolInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add Ip pool to network of network pool internal server error response a status code equal to that given
func (o *AddIPPoolToNetworkOfNetworkPoolInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add Ip pool to network of network pool internal server error response
func (o *AddIPPoolToNetworkOfNetworkPoolInternalServerError) Code() int {
	return 500
}

func (o *AddIPPoolToNetworkOfNetworkPoolInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/network-pools/{id}/networks/{networkId}/ip-pools][%d] addIpPoolToNetworkOfNetworkPoolInternalServerError  %+v", 500, o.Payload)
}

func (o *AddIPPoolToNetworkOfNetworkPoolInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/network-pools/{id}/networks/{networkId}/ip-pools][%d] addIpPoolToNetworkOfNetworkPoolInternalServerError  %+v", 500, o.Payload)
}

func (o *AddIPPoolToNetworkOfNetworkPoolInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddIPPoolToNetworkOfNetworkPoolInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
