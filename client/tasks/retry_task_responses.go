// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// RetryTaskReader is a Reader for the RetryTask structure.
type RetryTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RetryTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRetryTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRetryTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewRetryTaskConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRetryTaskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/tasks/{id}] retryTask", response, response.Code())
	}
}

// NewRetryTaskOK creates a RetryTaskOK with default headers values
func NewRetryTaskOK() *RetryTaskOK {
	return &RetryTaskOK{}
}

/*
RetryTaskOK describes a response with status code 200, with default header values.

Task was retried successfully.
*/
type RetryTaskOK struct {
}

// IsSuccess returns true when this retry task o k response has a 2xx status code
func (o *RetryTaskOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this retry task o k response has a 3xx status code
func (o *RetryTaskOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry task o k response has a 4xx status code
func (o *RetryTaskOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry task o k response has a 5xx status code
func (o *RetryTaskOK) IsServerError() bool {
	return false
}

// IsCode returns true when this retry task o k response a status code equal to that given
func (o *RetryTaskOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the retry task o k response
func (o *RetryTaskOK) Code() int {
	return 200
}

func (o *RetryTaskOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/tasks/{id}][%d] retryTaskOK ", 200)
}

func (o *RetryTaskOK) String() string {
	return fmt.Sprintf("[PATCH /v1/tasks/{id}][%d] retryTaskOK ", 200)
}

func (o *RetryTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRetryTaskNotFound creates a RetryTaskNotFound with default headers values
func NewRetryTaskNotFound() *RetryTaskNotFound {
	return &RetryTaskNotFound{}
}

/*
RetryTaskNotFound describes a response with status code 404, with default header values.

Task not found
*/
type RetryTaskNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this retry task not found response has a 2xx status code
func (o *RetryTaskNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry task not found response has a 3xx status code
func (o *RetryTaskNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry task not found response has a 4xx status code
func (o *RetryTaskNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry task not found response has a 5xx status code
func (o *RetryTaskNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this retry task not found response a status code equal to that given
func (o *RetryTaskNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the retry task not found response
func (o *RetryTaskNotFound) Code() int {
	return 404
}

func (o *RetryTaskNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/tasks/{id}][%d] retryTaskNotFound  %+v", 404, o.Payload)
}

func (o *RetryTaskNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/tasks/{id}][%d] retryTaskNotFound  %+v", 404, o.Payload)
}

func (o *RetryTaskNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RetryTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryTaskConflict creates a RetryTaskConflict with default headers values
func NewRetryTaskConflict() *RetryTaskConflict {
	return &RetryTaskConflict{}
}

/*
RetryTaskConflict describes a response with status code 409, with default header values.

Task can not be retried. Only a failed Task can be retried.
*/
type RetryTaskConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this retry task conflict response has a 2xx status code
func (o *RetryTaskConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry task conflict response has a 3xx status code
func (o *RetryTaskConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry task conflict response has a 4xx status code
func (o *RetryTaskConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry task conflict response has a 5xx status code
func (o *RetryTaskConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this retry task conflict response a status code equal to that given
func (o *RetryTaskConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the retry task conflict response
func (o *RetryTaskConflict) Code() int {
	return 409
}

func (o *RetryTaskConflict) Error() string {
	return fmt.Sprintf("[PATCH /v1/tasks/{id}][%d] retryTaskConflict  %+v", 409, o.Payload)
}

func (o *RetryTaskConflict) String() string {
	return fmt.Sprintf("[PATCH /v1/tasks/{id}][%d] retryTaskConflict  %+v", 409, o.Payload)
}

func (o *RetryTaskConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *RetryTaskConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryTaskInternalServerError creates a RetryTaskInternalServerError with default headers values
func NewRetryTaskInternalServerError() *RetryTaskInternalServerError {
	return &RetryTaskInternalServerError{}
}

/*
RetryTaskInternalServerError describes a response with status code 500, with default header values.

Unexpected error
*/
type RetryTaskInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this retry task internal server error response has a 2xx status code
func (o *RetryTaskInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry task internal server error response has a 3xx status code
func (o *RetryTaskInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry task internal server error response has a 4xx status code
func (o *RetryTaskInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry task internal server error response has a 5xx status code
func (o *RetryTaskInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this retry task internal server error response a status code equal to that given
func (o *RetryTaskInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the retry task internal server error response
func (o *RetryTaskInternalServerError) Code() int {
	return 500
}

func (o *RetryTaskInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/tasks/{id}][%d] retryTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *RetryTaskInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/tasks/{id}][%d] retryTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *RetryTaskInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RetryTaskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
