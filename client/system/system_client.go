// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new system API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConfigureDNS(params *ConfigureDNSParams, opts ...ClientOption) (*ConfigureDNSOK, *ConfigureDNSAccepted, error)

	ConfigureNtp(params *ConfigureNtpParams, opts ...ClientOption) (*ConfigureNtpOK, *ConfigureNtpAccepted, error)

	GetDNSConfiguration(params *GetDNSConfigurationParams, opts ...ClientOption) (*GetDNSConfigurationOK, error)

	GetNtpConfiguration(params *GetNtpConfigurationParams, opts ...ClientOption) (*GetNtpConfigurationOK, error)

	GetSystemConfiguration(params *GetSystemConfigurationParams, opts ...ClientOption) (*GetSystemConfigurationOK, error)

	GetValidationOfDNSConfiguration(params *GetValidationOfDNSConfigurationParams, opts ...ClientOption) (*GetValidationOfDNSConfigurationOK, error)

	GetValidationOfNtpConfiguration(params *GetValidationOfNtpConfigurationParams, opts ...ClientOption) (*GetValidationOfNtpConfigurationOK, error)

	GetValidationsOfDNSConfiguration(params *GetValidationsOfDNSConfigurationParams, opts ...ClientOption) (*GetValidationsOfDNSConfigurationOK, error)

	GetValidationsOfNtpConfiguration(params *GetValidationsOfNtpConfigurationParams, opts ...ClientOption) (*GetValidationsOfNtpConfigurationOK, error)

	UpdateSystemConfiguration(params *UpdateSystemConfigurationParams, opts ...ClientOption) (*UpdateSystemConfigurationOK, error)

	ValidateDNSConfiguration(params *ValidateDNSConfigurationParams, opts ...ClientOption) (*ValidateDNSConfigurationOK, *ValidateDNSConfigurationAccepted, error)

	ValidateNtpConfiguration(params *ValidateNtpConfigurationParams, opts ...ClientOption) (*ValidateNtpConfigurationOK, *ValidateNtpConfigurationAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ConfigureDNS updates the DNS configuration
*/
func (a *Client) ConfigureDNS(params *ConfigureDNSParams, opts ...ClientOption) (*ConfigureDNSOK, *ConfigureDNSAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigureDNSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "configureDns",
		Method:             "PUT",
		PathPattern:        "/v1/system/dns-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigureDNSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ConfigureDNSOK:
		return value, nil, nil
	case *ConfigureDNSAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConfigureNtp updates the n t p configuration
*/
func (a *Client) ConfigureNtp(params *ConfigureNtpParams, opts ...ClientOption) (*ConfigureNtpOK, *ConfigureNtpAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigureNtpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "configureNtp",
		Method:             "PUT",
		PathPattern:        "/v1/system/ntp-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigureNtpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ConfigureNtpOK:
		return value, nil, nil
	case *ConfigureNtpAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDNSConfiguration retrieves the DNS configuration
*/
func (a *Client) GetDNSConfiguration(params *GetDNSConfigurationParams, opts ...ClientOption) (*GetDNSConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDNSConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDnsConfiguration",
		Method:             "GET",
		PathPattern:        "/v1/system/dns-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDNSConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDNSConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDnsConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNtpConfiguration retrieves the n t p configuration
*/
func (a *Client) GetNtpConfiguration(params *GetNtpConfigurationParams, opts ...ClientOption) (*GetNtpConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNtpConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNtpConfiguration",
		Method:             "GET",
		PathPattern:        "/v1/system/ntp-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNtpConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNtpConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNtpConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSystemConfiguration retrieves the system configuration

Retrieve the system configuration
*/
func (a *Client) GetSystemConfiguration(params *GetSystemConfigurationParams, opts ...ClientOption) (*GetSystemConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSystemConfiguration",
		Method:             "GET",
		PathPattern:        "/v1/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSystemConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystemConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetValidationOfDNSConfiguration retrieves the results of a DNS configuration validation by its ID
*/
func (a *Client) GetValidationOfDNSConfiguration(params *GetValidationOfDNSConfigurationParams, opts ...ClientOption) (*GetValidationOfDNSConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidationOfDNSConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getValidationOfDnsConfiguration",
		Method:             "GET",
		PathPattern:        "/v1/system/dns-configuration/validations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetValidationOfDNSConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValidationOfDNSConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidationOfDnsConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetValidationOfNtpConfiguration retrieves the results of a n t p configuration validation by its ID
*/
func (a *Client) GetValidationOfNtpConfiguration(params *GetValidationOfNtpConfigurationParams, opts ...ClientOption) (*GetValidationOfNtpConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidationOfNtpConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getValidationOfNtpConfiguration",
		Method:             "GET",
		PathPattern:        "/v1/system/ntp-configuration/validations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetValidationOfNtpConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValidationOfNtpConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidationOfNtpConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetValidationsOfDNSConfiguration retrieves a list of DNS configuation validations
*/
func (a *Client) GetValidationsOfDNSConfiguration(params *GetValidationsOfDNSConfigurationParams, opts ...ClientOption) (*GetValidationsOfDNSConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidationsOfDNSConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getValidationsOfDNSConfiguration",
		Method:             "GET",
		PathPattern:        "/v1/system/dns-configuration/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetValidationsOfDNSConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValidationsOfDNSConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidationsOfDNSConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetValidationsOfNtpConfiguration retrieves a list of n t p configuation validations
*/
func (a *Client) GetValidationsOfNtpConfiguration(params *GetValidationsOfNtpConfigurationParams, opts ...ClientOption) (*GetValidationsOfNtpConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidationsOfNtpConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getValidationsOfNtpConfiguration",
		Method:             "GET",
		PathPattern:        "/v1/system/ntp-configuration/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetValidationsOfNtpConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValidationsOfNtpConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidationsOfNtpConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSystemConfiguration updates paramters of the system configuration

Updates paramters of the system configuration
*/
func (a *Client) UpdateSystemConfiguration(params *UpdateSystemConfigurationParams, opts ...ClientOption) (*UpdateSystemConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSystemConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSystemConfiguration",
		Method:             "PATCH",
		PathPattern:        "/v1/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSystemConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSystemConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSystemConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateDNSConfiguration performs validation of the Dns configuration specification
*/
func (a *Client) ValidateDNSConfiguration(params *ValidateDNSConfigurationParams, opts ...ClientOption) (*ValidateDNSConfigurationOK, *ValidateDNSConfigurationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateDNSConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateDnsConfiguration",
		Method:             "POST",
		PathPattern:        "/v1/system/dns-configuration/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateDNSConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateDNSConfigurationOK:
		return value, nil, nil
	case *ValidateDNSConfigurationAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateNtpConfiguration performs validation of the ntp configuration specification
*/
func (a *Client) ValidateNtpConfiguration(params *ValidateNtpConfigurationParams, opts ...ClientOption) (*ValidateNtpConfigurationOK, *ValidateNtpConfigurationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateNtpConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateNtpConfiguration",
		Method:             "POST",
		PathPattern:        "/v1/system/ntp-configuration/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateNtpConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateNtpConfigurationOK:
		return value, nil, nil
	case *ValidateNtpConfigurationAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
