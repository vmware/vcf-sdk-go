// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// ValidateDNSConfigurationReader is a Reader for the ValidateDNSConfiguration structure.
type ValidateDNSConfigurationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateDNSConfigurationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateDNSConfigurationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewValidateDNSConfigurationAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateDNSConfigurationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewValidateDNSConfigurationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/system/dns-configuration/validations] validateDnsConfiguration", response, response.Code())
	}
}

// NewValidateDNSConfigurationOK creates a ValidateDNSConfigurationOK with default headers values
func NewValidateDNSConfigurationOK() *ValidateDNSConfigurationOK {
	return &ValidateDNSConfigurationOK{}
}

/*
ValidateDNSConfigurationOK describes a response with status code 200, with default header values.

OK
*/
type ValidateDNSConfigurationOK struct {
	Payload *models.Validation
}

// IsSuccess returns true when this validate Dns configuration o k response has a 2xx status code
func (o *ValidateDNSConfigurationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate Dns configuration o k response has a 3xx status code
func (o *ValidateDNSConfigurationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate Dns configuration o k response has a 4xx status code
func (o *ValidateDNSConfigurationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate Dns configuration o k response has a 5xx status code
func (o *ValidateDNSConfigurationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate Dns configuration o k response a status code equal to that given
func (o *ValidateDNSConfigurationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate Dns configuration o k response
func (o *ValidateDNSConfigurationOK) Code() int {
	return 200
}

func (o *ValidateDNSConfigurationOK) Error() string {
	return fmt.Sprintf("[POST /v1/system/dns-configuration/validations][%d] validateDnsConfigurationOK  %+v", 200, o.Payload)
}

func (o *ValidateDNSConfigurationOK) String() string {
	return fmt.Sprintf("[POST /v1/system/dns-configuration/validations][%d] validateDnsConfigurationOK  %+v", 200, o.Payload)
}

func (o *ValidateDNSConfigurationOK) GetPayload() *models.Validation {
	return o.Payload
}

func (o *ValidateDNSConfigurationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateDNSConfigurationAccepted creates a ValidateDNSConfigurationAccepted with default headers values
func NewValidateDNSConfigurationAccepted() *ValidateDNSConfigurationAccepted {
	return &ValidateDNSConfigurationAccepted{}
}

/*
ValidateDNSConfigurationAccepted describes a response with status code 202, with default header values.

Accepted
*/
type ValidateDNSConfigurationAccepted struct {
	Payload *models.Validation
}

// IsSuccess returns true when this validate Dns configuration accepted response has a 2xx status code
func (o *ValidateDNSConfigurationAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate Dns configuration accepted response has a 3xx status code
func (o *ValidateDNSConfigurationAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate Dns configuration accepted response has a 4xx status code
func (o *ValidateDNSConfigurationAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate Dns configuration accepted response has a 5xx status code
func (o *ValidateDNSConfigurationAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this validate Dns configuration accepted response a status code equal to that given
func (o *ValidateDNSConfigurationAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the validate Dns configuration accepted response
func (o *ValidateDNSConfigurationAccepted) Code() int {
	return 202
}

func (o *ValidateDNSConfigurationAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/system/dns-configuration/validations][%d] validateDnsConfigurationAccepted  %+v", 202, o.Payload)
}

func (o *ValidateDNSConfigurationAccepted) String() string {
	return fmt.Sprintf("[POST /v1/system/dns-configuration/validations][%d] validateDnsConfigurationAccepted  %+v", 202, o.Payload)
}

func (o *ValidateDNSConfigurationAccepted) GetPayload() *models.Validation {
	return o.Payload
}

func (o *ValidateDNSConfigurationAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateDNSConfigurationBadRequest creates a ValidateDNSConfigurationBadRequest with default headers values
func NewValidateDNSConfigurationBadRequest() *ValidateDNSConfigurationBadRequest {
	return &ValidateDNSConfigurationBadRequest{}
}

/*
ValidateDNSConfigurationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ValidateDNSConfigurationBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate Dns configuration bad request response has a 2xx status code
func (o *ValidateDNSConfigurationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate Dns configuration bad request response has a 3xx status code
func (o *ValidateDNSConfigurationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate Dns configuration bad request response has a 4xx status code
func (o *ValidateDNSConfigurationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate Dns configuration bad request response has a 5xx status code
func (o *ValidateDNSConfigurationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this validate Dns configuration bad request response a status code equal to that given
func (o *ValidateDNSConfigurationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the validate Dns configuration bad request response
func (o *ValidateDNSConfigurationBadRequest) Code() int {
	return 400
}

func (o *ValidateDNSConfigurationBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/system/dns-configuration/validations][%d] validateDnsConfigurationBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateDNSConfigurationBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/system/dns-configuration/validations][%d] validateDnsConfigurationBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateDNSConfigurationBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateDNSConfigurationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateDNSConfigurationInternalServerError creates a ValidateDNSConfigurationInternalServerError with default headers values
func NewValidateDNSConfigurationInternalServerError() *ValidateDNSConfigurationInternalServerError {
	return &ValidateDNSConfigurationInternalServerError{}
}

/*
ValidateDNSConfigurationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ValidateDNSConfigurationInternalServerError struct {
}

// IsSuccess returns true when this validate Dns configuration internal server error response has a 2xx status code
func (o *ValidateDNSConfigurationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate Dns configuration internal server error response has a 3xx status code
func (o *ValidateDNSConfigurationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate Dns configuration internal server error response has a 4xx status code
func (o *ValidateDNSConfigurationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate Dns configuration internal server error response has a 5xx status code
func (o *ValidateDNSConfigurationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate Dns configuration internal server error response a status code equal to that given
func (o *ValidateDNSConfigurationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the validate Dns configuration internal server error response
func (o *ValidateDNSConfigurationInternalServerError) Code() int {
	return 500
}

func (o *ValidateDNSConfigurationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/system/dns-configuration/validations][%d] validateDnsConfigurationInternalServerError ", 500)
}

func (o *ValidateDNSConfigurationInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/system/dns-configuration/validations][%d] validateDnsConfigurationInternalServerError ", 500)
}

func (o *ValidateDNSConfigurationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
