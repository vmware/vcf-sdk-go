// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// ConfigureDNSReader is a Reader for the ConfigureDNS structure.
type ConfigureDNSReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfigureDNSReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewConfigureDNSOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewConfigureDNSAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConfigureDNSBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConfigureDNSInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/system/dns-configuration] configureDns", response, response.Code())
	}
}

// NewConfigureDNSOK creates a ConfigureDNSOK with default headers values
func NewConfigureDNSOK() *ConfigureDNSOK {
	return &ConfigureDNSOK{}
}

/*
ConfigureDNSOK describes a response with status code 200, with default header values.

OK
*/
type ConfigureDNSOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this configure Dns o k response has a 2xx status code
func (o *ConfigureDNSOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this configure Dns o k response has a 3xx status code
func (o *ConfigureDNSOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this configure Dns o k response has a 4xx status code
func (o *ConfigureDNSOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this configure Dns o k response has a 5xx status code
func (o *ConfigureDNSOK) IsServerError() bool {
	return false
}

// IsCode returns true when this configure Dns o k response a status code equal to that given
func (o *ConfigureDNSOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the configure Dns o k response
func (o *ConfigureDNSOK) Code() int {
	return 200
}

func (o *ConfigureDNSOK) Error() string {
	return fmt.Sprintf("[PUT /v1/system/dns-configuration][%d] configureDnsOK  %+v", 200, o.Payload)
}

func (o *ConfigureDNSOK) String() string {
	return fmt.Sprintf("[PUT /v1/system/dns-configuration][%d] configureDnsOK  %+v", 200, o.Payload)
}

func (o *ConfigureDNSOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *ConfigureDNSOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigureDNSAccepted creates a ConfigureDNSAccepted with default headers values
func NewConfigureDNSAccepted() *ConfigureDNSAccepted {
	return &ConfigureDNSAccepted{}
}

/*
ConfigureDNSAccepted describes a response with status code 202, with default header values.

Accepted
*/
type ConfigureDNSAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this configure Dns accepted response has a 2xx status code
func (o *ConfigureDNSAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this configure Dns accepted response has a 3xx status code
func (o *ConfigureDNSAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this configure Dns accepted response has a 4xx status code
func (o *ConfigureDNSAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this configure Dns accepted response has a 5xx status code
func (o *ConfigureDNSAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this configure Dns accepted response a status code equal to that given
func (o *ConfigureDNSAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the configure Dns accepted response
func (o *ConfigureDNSAccepted) Code() int {
	return 202
}

func (o *ConfigureDNSAccepted) Error() string {
	return fmt.Sprintf("[PUT /v1/system/dns-configuration][%d] configureDnsAccepted  %+v", 202, o.Payload)
}

func (o *ConfigureDNSAccepted) String() string {
	return fmt.Sprintf("[PUT /v1/system/dns-configuration][%d] configureDnsAccepted  %+v", 202, o.Payload)
}

func (o *ConfigureDNSAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *ConfigureDNSAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigureDNSBadRequest creates a ConfigureDNSBadRequest with default headers values
func NewConfigureDNSBadRequest() *ConfigureDNSBadRequest {
	return &ConfigureDNSBadRequest{}
}

/*
ConfigureDNSBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ConfigureDNSBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this configure Dns bad request response has a 2xx status code
func (o *ConfigureDNSBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this configure Dns bad request response has a 3xx status code
func (o *ConfigureDNSBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this configure Dns bad request response has a 4xx status code
func (o *ConfigureDNSBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this configure Dns bad request response has a 5xx status code
func (o *ConfigureDNSBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this configure Dns bad request response a status code equal to that given
func (o *ConfigureDNSBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the configure Dns bad request response
func (o *ConfigureDNSBadRequest) Code() int {
	return 400
}

func (o *ConfigureDNSBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/system/dns-configuration][%d] configureDnsBadRequest  %+v", 400, o.Payload)
}

func (o *ConfigureDNSBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/system/dns-configuration][%d] configureDnsBadRequest  %+v", 400, o.Payload)
}

func (o *ConfigureDNSBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConfigureDNSBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigureDNSInternalServerError creates a ConfigureDNSInternalServerError with default headers values
func NewConfigureDNSInternalServerError() *ConfigureDNSInternalServerError {
	return &ConfigureDNSInternalServerError{}
}

/*
ConfigureDNSInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ConfigureDNSInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this configure Dns internal server error response has a 2xx status code
func (o *ConfigureDNSInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this configure Dns internal server error response has a 3xx status code
func (o *ConfigureDNSInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this configure Dns internal server error response has a 4xx status code
func (o *ConfigureDNSInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this configure Dns internal server error response has a 5xx status code
func (o *ConfigureDNSInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this configure Dns internal server error response a status code equal to that given
func (o *ConfigureDNSInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the configure Dns internal server error response
func (o *ConfigureDNSInternalServerError) Code() int {
	return 500
}

func (o *ConfigureDNSInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/system/dns-configuration][%d] configureDnsInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfigureDNSInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/system/dns-configuration][%d] configureDnsInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfigureDNSInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConfigureDNSInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
