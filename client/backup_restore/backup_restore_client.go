// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package backup_restore

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new backup restore API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for backup restore API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BackupTasks(params *BackupTasksParams, opts ...ClientOption) (*BackupTasksOK, *BackupTasksAccepted, error)

	ConfigureBackupSettings(params *ConfigureBackupSettingsParams, opts ...ClientOption) (*ConfigureBackupSettingsOK, *ConfigureBackupSettingsAccepted, error)

	EditBackupSettings(params *EditBackupSettingsParams, opts ...ClientOption) (*EditBackupSettingsOK, *EditBackupSettingsAccepted, error)

	GetBackupSettings(params *GetBackupSettingsParams, opts ...ClientOption) (*GetBackupSettingsOK, error)

	RestoresTasks(params *RestoresTasksParams, opts ...ClientOption) (*RestoresTasksOK, error)

	RestoresTasks1(params *RestoresTasks1Params, opts ...ClientOption) (*RestoresTasks1OK, *RestoresTasks1Accepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
BackupTasks triggers backup
*/
func (a *Client) BackupTasks(params *BackupTasksParams, opts ...ClientOption) (*BackupTasksOK, *BackupTasksAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "backupTasks",
		Method:             "POST",
		PathPattern:        "/v1/backups/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BackupTasksOK:
		return value, nil, nil
	case *BackupTasksAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backup_restore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConfigureBackupSettings configures backup settings to backup n s x and SDDC manager
*/
func (a *Client) ConfigureBackupSettings(params *ConfigureBackupSettingsParams, opts ...ClientOption) (*ConfigureBackupSettingsOK, *ConfigureBackupSettingsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigureBackupSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "configureBackupSettings",
		Method:             "PUT",
		PathPattern:        "/v1/system/backup-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigureBackupSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ConfigureBackupSettingsOK:
		return value, nil, nil
	case *ConfigureBackupSettingsAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backup_restore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditBackupSettings edits backup configuration to backup n s x and SDDC manager
*/
func (a *Client) EditBackupSettings(params *EditBackupSettingsParams, opts ...ClientOption) (*EditBackupSettingsOK, *EditBackupSettingsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditBackupSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editBackupSettings",
		Method:             "PATCH",
		PathPattern:        "/v1/system/backup-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EditBackupSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *EditBackupSettingsOK:
		return value, nil, nil
	case *EditBackupSettingsAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backup_restore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBackupSettings gets backup configuration used to backup n s x and SDDC manager
*/
func (a *Client) GetBackupSettings(params *GetBackupSettingsParams, opts ...ClientOption) (*GetBackupSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBackupSettings",
		Method:             "GET",
		PathPattern:        "/v1/system/backup-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBackupSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBackupSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RestoresTasks fetches the restores task
*/
func (a *Client) RestoresTasks(params *RestoresTasksParams, opts ...ClientOption) (*RestoresTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoresTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restoresTasks",
		Method:             "GET",
		PathPattern:        "/v1/restores/tasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoresTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoresTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restoresTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RestoresTasks1 triggers restore
*/
func (a *Client) RestoresTasks1(params *RestoresTasks1Params, opts ...ClientOption) (*RestoresTasks1OK, *RestoresTasks1Accepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoresTasks1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "restoresTasks_1",
		Method:             "POST",
		PathPattern:        "/v1/restores/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoresTasks1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RestoresTasks1OK:
		return value, nil, nil
	case *RestoresTasks1Accepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backup_restore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
