// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package backup_restore

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new backup restore API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for backup restore API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetBackupConfiguration(params *GetBackupConfigurationParams, opts ...ClientOption) (*GetBackupConfigurationOK, error)

	GetRestoreTask(params *GetRestoreTaskParams, opts ...ClientOption) (*GetRestoreTaskOK, error)

	SetBackupConfiguration(params *SetBackupConfigurationParams, opts ...ClientOption) (*SetBackupConfigurationOK, *SetBackupConfigurationAccepted, error)

	StartBackup(params *StartBackupParams, opts ...ClientOption) (*StartBackupOK, *StartBackupAccepted, error)

	StartRestore(params *StartRestoreParams, opts ...ClientOption) (*StartRestoreOK, *StartRestoreAccepted, error)

	UpdateBackupConfiguration(params *UpdateBackupConfigurationParams, opts ...ClientOption) (*UpdateBackupConfigurationOK, *UpdateBackupConfigurationAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetBackupConfiguration retrieves the backup configuration for SDDC manager and n s x manager
*/
func (a *Client) GetBackupConfiguration(params *GetBackupConfigurationParams, opts ...ClientOption) (*GetBackupConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBackupConfiguration",
		Method:             "GET",
		PathPattern:        "/v1/system/backup-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBackupConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBackupConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRestoreTask retrieves the restore task
*/
func (a *Client) GetRestoreTask(params *GetRestoreTaskParams, opts ...ClientOption) (*GetRestoreTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRestoreTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRestoreTask",
		Method:             "GET",
		PathPattern:        "/v1/restores/tasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRestoreTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRestoreTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRestoreTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetBackupConfiguration configures the backup configuration for SDDC manager and n s x manager
*/
func (a *Client) SetBackupConfiguration(params *SetBackupConfigurationParams, opts ...ClientOption) (*SetBackupConfigurationOK, *SetBackupConfigurationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBackupConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setBackupConfiguration",
		Method:             "PUT",
		PathPattern:        "/v1/system/backup-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBackupConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SetBackupConfigurationOK:
		return value, nil, nil
	case *SetBackupConfigurationAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backup_restore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartBackup starts a backup operation
*/
func (a *Client) StartBackup(params *StartBackupParams, opts ...ClientOption) (*StartBackupOK, *StartBackupAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startBackup",
		Method:             "POST",
		PathPattern:        "/v1/backups/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StartBackupOK:
		return value, nil, nil
	case *StartBackupAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backup_restore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartRestore starts a restore operation
*/
func (a *Client) StartRestore(params *StartRestoreParams, opts ...ClientOption) (*StartRestoreOK, *StartRestoreAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartRestoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startRestore",
		Method:             "POST",
		PathPattern:        "/v1/restores/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartRestoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StartRestoreOK:
		return value, nil, nil
	case *StartRestoreAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backup_restore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBackupConfiguration updates the backup configuration for SDDC manager and n s x manager
*/
func (a *Client) UpdateBackupConfiguration(params *UpdateBackupConfigurationParams, opts ...ClientOption) (*UpdateBackupConfigurationOK, *UpdateBackupConfigurationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBackupConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBackupConfiguration",
		Method:             "PATCH",
		PathPattern:        "/v1/system/backup-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBackupConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateBackupConfigurationOK:
		return value, nil, nil
	case *UpdateBackupConfigurationAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backup_restore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
