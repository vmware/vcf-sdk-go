// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package sddc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// RetrySDDCReader is a Reader for the RetrySDDC structure.
type RetrySDDCReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RetrySDDCReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRetrySDDCOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewRetrySDDCAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRetrySDDCBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRetrySDDCNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRetrySDDCMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRetrySDDCInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/sddcs/{id}] retrySddc", response, response.Code())
	}
}

// NewRetrySDDCOK creates a RetrySDDCOK with default headers values
func NewRetrySDDCOK() *RetrySDDCOK {
	return &RetrySDDCOK{}
}

/*
RetrySDDCOK describes a response with status code 200, with default header values.

OK
*/
type RetrySDDCOK struct {
	Payload *models.SDDCTask
}

// IsSuccess returns true when this retry Sddc o k response has a 2xx status code
func (o *RetrySDDCOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this retry Sddc o k response has a 3xx status code
func (o *RetrySDDCOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry Sddc o k response has a 4xx status code
func (o *RetrySDDCOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry Sddc o k response has a 5xx status code
func (o *RetrySDDCOK) IsServerError() bool {
	return false
}

// IsCode returns true when this retry Sddc o k response a status code equal to that given
func (o *RetrySDDCOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the retry Sddc o k response
func (o *RetrySDDCOK) Code() int {
	return 200
}

func (o *RetrySDDCOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcOK  %+v", 200, o.Payload)
}

func (o *RetrySDDCOK) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcOK  %+v", 200, o.Payload)
}

func (o *RetrySDDCOK) GetPayload() *models.SDDCTask {
	return o.Payload
}

func (o *RetrySDDCOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SDDCTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrySDDCAccepted creates a RetrySDDCAccepted with default headers values
func NewRetrySDDCAccepted() *RetrySDDCAccepted {
	return &RetrySDDCAccepted{}
}

/*
RetrySDDCAccepted describes a response with status code 202, with default header values.

Accepted
*/
type RetrySDDCAccepted struct {
	Payload *models.SDDCTask
}

// IsSuccess returns true when this retry Sddc accepted response has a 2xx status code
func (o *RetrySDDCAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this retry Sddc accepted response has a 3xx status code
func (o *RetrySDDCAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry Sddc accepted response has a 4xx status code
func (o *RetrySDDCAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry Sddc accepted response has a 5xx status code
func (o *RetrySDDCAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this retry Sddc accepted response a status code equal to that given
func (o *RetrySDDCAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the retry Sddc accepted response
func (o *RetrySDDCAccepted) Code() int {
	return 202
}

func (o *RetrySDDCAccepted) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcAccepted  %+v", 202, o.Payload)
}

func (o *RetrySDDCAccepted) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcAccepted  %+v", 202, o.Payload)
}

func (o *RetrySDDCAccepted) GetPayload() *models.SDDCTask {
	return o.Payload
}

func (o *RetrySDDCAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SDDCTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrySDDCBadRequest creates a RetrySDDCBadRequest with default headers values
func NewRetrySDDCBadRequest() *RetrySDDCBadRequest {
	return &RetrySDDCBadRequest{}
}

/*
RetrySDDCBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RetrySDDCBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this retry Sddc bad request response has a 2xx status code
func (o *RetrySDDCBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry Sddc bad request response has a 3xx status code
func (o *RetrySDDCBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry Sddc bad request response has a 4xx status code
func (o *RetrySDDCBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry Sddc bad request response has a 5xx status code
func (o *RetrySDDCBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this retry Sddc bad request response a status code equal to that given
func (o *RetrySDDCBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the retry Sddc bad request response
func (o *RetrySDDCBadRequest) Code() int {
	return 400
}

func (o *RetrySDDCBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcBadRequest  %+v", 400, o.Payload)
}

func (o *RetrySDDCBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcBadRequest  %+v", 400, o.Payload)
}

func (o *RetrySDDCBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RetrySDDCBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrySDDCNotFound creates a RetrySDDCNotFound with default headers values
func NewRetrySDDCNotFound() *RetrySDDCNotFound {
	return &RetrySDDCNotFound{}
}

/*
RetrySDDCNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RetrySDDCNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this retry Sddc not found response has a 2xx status code
func (o *RetrySDDCNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry Sddc not found response has a 3xx status code
func (o *RetrySDDCNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry Sddc not found response has a 4xx status code
func (o *RetrySDDCNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry Sddc not found response has a 5xx status code
func (o *RetrySDDCNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this retry Sddc not found response a status code equal to that given
func (o *RetrySDDCNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the retry Sddc not found response
func (o *RetrySDDCNotFound) Code() int {
	return 404
}

func (o *RetrySDDCNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcNotFound  %+v", 404, o.Payload)
}

func (o *RetrySDDCNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcNotFound  %+v", 404, o.Payload)
}

func (o *RetrySDDCNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RetrySDDCNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrySDDCMethodNotAllowed creates a RetrySDDCMethodNotAllowed with default headers values
func NewRetrySDDCMethodNotAllowed() *RetrySDDCMethodNotAllowed {
	return &RetrySDDCMethodNotAllowed{}
}

/*
RetrySDDCMethodNotAllowed describes a response with status code 405, with default header values.

Not allowed
*/
type RetrySDDCMethodNotAllowed struct {
	Payload *models.Error
}

// IsSuccess returns true when this retry Sddc method not allowed response has a 2xx status code
func (o *RetrySDDCMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry Sddc method not allowed response has a 3xx status code
func (o *RetrySDDCMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry Sddc method not allowed response has a 4xx status code
func (o *RetrySDDCMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry Sddc method not allowed response has a 5xx status code
func (o *RetrySDDCMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this retry Sddc method not allowed response a status code equal to that given
func (o *RetrySDDCMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the retry Sddc method not allowed response
func (o *RetrySDDCMethodNotAllowed) Code() int {
	return 405
}

func (o *RetrySDDCMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *RetrySDDCMethodNotAllowed) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *RetrySDDCMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *RetrySDDCMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrySDDCInternalServerError creates a RetrySDDCInternalServerError with default headers values
func NewRetrySDDCInternalServerError() *RetrySDDCInternalServerError {
	return &RetrySDDCInternalServerError{}
}

/*
RetrySDDCInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RetrySDDCInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this retry Sddc internal server error response has a 2xx status code
func (o *RetrySDDCInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry Sddc internal server error response has a 3xx status code
func (o *RetrySDDCInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry Sddc internal server error response has a 4xx status code
func (o *RetrySDDCInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry Sddc internal server error response has a 5xx status code
func (o *RetrySDDCInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this retry Sddc internal server error response a status code equal to that given
func (o *RetrySDDCInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the retry Sddc internal server error response
func (o *RetrySDDCInternalServerError) Code() int {
	return 500
}

func (o *RetrySDDCInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcInternalServerError  %+v", 500, o.Payload)
}

func (o *RetrySDDCInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcInternalServerError  %+v", 500, o.Payload)
}

func (o *RetrySDDCInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RetrySDDCInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
