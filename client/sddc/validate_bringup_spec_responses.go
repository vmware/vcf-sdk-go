// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package sddc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// ValidateBringupSpecReader is a Reader for the ValidateBringupSpec structure.
type ValidateBringupSpecReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateBringupSpecReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateBringupSpecOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewValidateBringupSpecAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewValidateBringupSpecForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateBringupSpecNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewValidateBringupSpecInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/sddcs/validations] validateBringupSpec", response, response.Code())
	}
}

// NewValidateBringupSpecOK creates a ValidateBringupSpecOK with default headers values
func NewValidateBringupSpecOK() *ValidateBringupSpecOK {
	return &ValidateBringupSpecOK{}
}

/*
ValidateBringupSpecOK describes a response with status code 200, with default header values.

Accepted
*/
type ValidateBringupSpecOK struct {
	Payload *models.Validation
}

// IsSuccess returns true when this validate bringup spec o k response has a 2xx status code
func (o *ValidateBringupSpecOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate bringup spec o k response has a 3xx status code
func (o *ValidateBringupSpecOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate bringup spec o k response has a 4xx status code
func (o *ValidateBringupSpecOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate bringup spec o k response has a 5xx status code
func (o *ValidateBringupSpecOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate bringup spec o k response a status code equal to that given
func (o *ValidateBringupSpecOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate bringup spec o k response
func (o *ValidateBringupSpecOK) Code() int {
	return 200
}

func (o *ValidateBringupSpecOK) Error() string {
	return fmt.Sprintf("[POST /v1/sddcs/validations][%d] validateBringupSpecOK  %+v", 200, o.Payload)
}

func (o *ValidateBringupSpecOK) String() string {
	return fmt.Sprintf("[POST /v1/sddcs/validations][%d] validateBringupSpecOK  %+v", 200, o.Payload)
}

func (o *ValidateBringupSpecOK) GetPayload() *models.Validation {
	return o.Payload
}

func (o *ValidateBringupSpecOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateBringupSpecAccepted creates a ValidateBringupSpecAccepted with default headers values
func NewValidateBringupSpecAccepted() *ValidateBringupSpecAccepted {
	return &ValidateBringupSpecAccepted{}
}

/*
ValidateBringupSpecAccepted describes a response with status code 202, with default header values.

Success
*/
type ValidateBringupSpecAccepted struct {
	Payload *models.Validation
}

// IsSuccess returns true when this validate bringup spec accepted response has a 2xx status code
func (o *ValidateBringupSpecAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate bringup spec accepted response has a 3xx status code
func (o *ValidateBringupSpecAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate bringup spec accepted response has a 4xx status code
func (o *ValidateBringupSpecAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate bringup spec accepted response has a 5xx status code
func (o *ValidateBringupSpecAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this validate bringup spec accepted response a status code equal to that given
func (o *ValidateBringupSpecAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the validate bringup spec accepted response
func (o *ValidateBringupSpecAccepted) Code() int {
	return 202
}

func (o *ValidateBringupSpecAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/sddcs/validations][%d] validateBringupSpecAccepted  %+v", 202, o.Payload)
}

func (o *ValidateBringupSpecAccepted) String() string {
	return fmt.Sprintf("[POST /v1/sddcs/validations][%d] validateBringupSpecAccepted  %+v", 202, o.Payload)
}

func (o *ValidateBringupSpecAccepted) GetPayload() *models.Validation {
	return o.Payload
}

func (o *ValidateBringupSpecAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateBringupSpecForbidden creates a ValidateBringupSpecForbidden with default headers values
func NewValidateBringupSpecForbidden() *ValidateBringupSpecForbidden {
	return &ValidateBringupSpecForbidden{}
}

/*
ValidateBringupSpecForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ValidateBringupSpecForbidden struct {
}

// IsSuccess returns true when this validate bringup spec forbidden response has a 2xx status code
func (o *ValidateBringupSpecForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate bringup spec forbidden response has a 3xx status code
func (o *ValidateBringupSpecForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate bringup spec forbidden response has a 4xx status code
func (o *ValidateBringupSpecForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate bringup spec forbidden response has a 5xx status code
func (o *ValidateBringupSpecForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this validate bringup spec forbidden response a status code equal to that given
func (o *ValidateBringupSpecForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the validate bringup spec forbidden response
func (o *ValidateBringupSpecForbidden) Code() int {
	return 403
}

func (o *ValidateBringupSpecForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/sddcs/validations][%d] validateBringupSpecForbidden ", 403)
}

func (o *ValidateBringupSpecForbidden) String() string {
	return fmt.Sprintf("[POST /v1/sddcs/validations][%d] validateBringupSpecForbidden ", 403)
}

func (o *ValidateBringupSpecForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateBringupSpecNotFound creates a ValidateBringupSpecNotFound with default headers values
func NewValidateBringupSpecNotFound() *ValidateBringupSpecNotFound {
	return &ValidateBringupSpecNotFound{}
}

/*
ValidateBringupSpecNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateBringupSpecNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate bringup spec not found response has a 2xx status code
func (o *ValidateBringupSpecNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate bringup spec not found response has a 3xx status code
func (o *ValidateBringupSpecNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate bringup spec not found response has a 4xx status code
func (o *ValidateBringupSpecNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate bringup spec not found response has a 5xx status code
func (o *ValidateBringupSpecNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate bringup spec not found response a status code equal to that given
func (o *ValidateBringupSpecNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate bringup spec not found response
func (o *ValidateBringupSpecNotFound) Code() int {
	return 404
}

func (o *ValidateBringupSpecNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/sddcs/validations][%d] validateBringupSpecNotFound  %+v", 404, o.Payload)
}

func (o *ValidateBringupSpecNotFound) String() string {
	return fmt.Sprintf("[POST /v1/sddcs/validations][%d] validateBringupSpecNotFound  %+v", 404, o.Payload)
}

func (o *ValidateBringupSpecNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateBringupSpecNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateBringupSpecInternalServerError creates a ValidateBringupSpecInternalServerError with default headers values
func NewValidateBringupSpecInternalServerError() *ValidateBringupSpecInternalServerError {
	return &ValidateBringupSpecInternalServerError{}
}

/*
ValidateBringupSpecInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ValidateBringupSpecInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate bringup spec internal server error response has a 2xx status code
func (o *ValidateBringupSpecInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate bringup spec internal server error response has a 3xx status code
func (o *ValidateBringupSpecInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate bringup spec internal server error response has a 4xx status code
func (o *ValidateBringupSpecInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate bringup spec internal server error response has a 5xx status code
func (o *ValidateBringupSpecInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate bringup spec internal server error response a status code equal to that given
func (o *ValidateBringupSpecInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the validate bringup spec internal server error response
func (o *ValidateBringupSpecInternalServerError) Code() int {
	return 500
}

func (o *ValidateBringupSpecInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/sddcs/validations][%d] validateBringupSpecInternalServerError  %+v", 500, o.Payload)
}

func (o *ValidateBringupSpecInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/sddcs/validations][%d] validateBringupSpecInternalServerError  %+v", 500, o.Payload)
}

func (o *ValidateBringupSpecInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateBringupSpecInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
