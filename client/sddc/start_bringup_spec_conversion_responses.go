// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package sddc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// StartBringupSpecConversionReader is a Reader for the StartBringupSpecConversion structure.
type StartBringupSpecConversionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartBringupSpecConversionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartBringupSpecConversionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStartBringupSpecConversionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStartBringupSpecConversionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStartBringupSpecConversionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewStartBringupSpecConversionNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/system/sddc-spec-converter] startBringupSpecConversion", response, response.Code())
	}
}

// NewStartBringupSpecConversionOK creates a StartBringupSpecConversionOK with default headers values
func NewStartBringupSpecConversionOK() *StartBringupSpecConversionOK {
	return &StartBringupSpecConversionOK{}
}

/*
StartBringupSpecConversionOK describes a response with status code 200, with default header values.

OK
*/
type StartBringupSpecConversionOK struct {
	Payload *models.SDDCSpec
}

// IsSuccess returns true when this start bringup spec conversion o k response has a 2xx status code
func (o *StartBringupSpecConversionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this start bringup spec conversion o k response has a 3xx status code
func (o *StartBringupSpecConversionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start bringup spec conversion o k response has a 4xx status code
func (o *StartBringupSpecConversionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this start bringup spec conversion o k response has a 5xx status code
func (o *StartBringupSpecConversionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this start bringup spec conversion o k response a status code equal to that given
func (o *StartBringupSpecConversionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the start bringup spec conversion o k response
func (o *StartBringupSpecConversionOK) Code() int {
	return 200
}

func (o *StartBringupSpecConversionOK) Error() string {
	return fmt.Sprintf("[POST /v1/system/sddc-spec-converter][%d] startBringupSpecConversionOK  %+v", 200, o.Payload)
}

func (o *StartBringupSpecConversionOK) String() string {
	return fmt.Sprintf("[POST /v1/system/sddc-spec-converter][%d] startBringupSpecConversionOK  %+v", 200, o.Payload)
}

func (o *StartBringupSpecConversionOK) GetPayload() *models.SDDCSpec {
	return o.Payload
}

func (o *StartBringupSpecConversionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SDDCSpec)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBringupSpecConversionBadRequest creates a StartBringupSpecConversionBadRequest with default headers values
func NewStartBringupSpecConversionBadRequest() *StartBringupSpecConversionBadRequest {
	return &StartBringupSpecConversionBadRequest{}
}

/*
StartBringupSpecConversionBadRequest describes a response with status code 400, with default header values.

Converting SDDC specification failed
*/
type StartBringupSpecConversionBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this start bringup spec conversion bad request response has a 2xx status code
func (o *StartBringupSpecConversionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start bringup spec conversion bad request response has a 3xx status code
func (o *StartBringupSpecConversionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start bringup spec conversion bad request response has a 4xx status code
func (o *StartBringupSpecConversionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this start bringup spec conversion bad request response has a 5xx status code
func (o *StartBringupSpecConversionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this start bringup spec conversion bad request response a status code equal to that given
func (o *StartBringupSpecConversionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the start bringup spec conversion bad request response
func (o *StartBringupSpecConversionBadRequest) Code() int {
	return 400
}

func (o *StartBringupSpecConversionBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/system/sddc-spec-converter][%d] startBringupSpecConversionBadRequest  %+v", 400, o.Payload)
}

func (o *StartBringupSpecConversionBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/system/sddc-spec-converter][%d] startBringupSpecConversionBadRequest  %+v", 400, o.Payload)
}

func (o *StartBringupSpecConversionBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *StartBringupSpecConversionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBringupSpecConversionNotFound creates a StartBringupSpecConversionNotFound with default headers values
func NewStartBringupSpecConversionNotFound() *StartBringupSpecConversionNotFound {
	return &StartBringupSpecConversionNotFound{}
}

/*
StartBringupSpecConversionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StartBringupSpecConversionNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this start bringup spec conversion not found response has a 2xx status code
func (o *StartBringupSpecConversionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start bringup spec conversion not found response has a 3xx status code
func (o *StartBringupSpecConversionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start bringup spec conversion not found response has a 4xx status code
func (o *StartBringupSpecConversionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this start bringup spec conversion not found response has a 5xx status code
func (o *StartBringupSpecConversionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this start bringup spec conversion not found response a status code equal to that given
func (o *StartBringupSpecConversionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the start bringup spec conversion not found response
func (o *StartBringupSpecConversionNotFound) Code() int {
	return 404
}

func (o *StartBringupSpecConversionNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/system/sddc-spec-converter][%d] startBringupSpecConversionNotFound  %+v", 404, o.Payload)
}

func (o *StartBringupSpecConversionNotFound) String() string {
	return fmt.Sprintf("[POST /v1/system/sddc-spec-converter][%d] startBringupSpecConversionNotFound  %+v", 404, o.Payload)
}

func (o *StartBringupSpecConversionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *StartBringupSpecConversionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBringupSpecConversionInternalServerError creates a StartBringupSpecConversionInternalServerError with default headers values
func NewStartBringupSpecConversionInternalServerError() *StartBringupSpecConversionInternalServerError {
	return &StartBringupSpecConversionInternalServerError{}
}

/*
StartBringupSpecConversionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type StartBringupSpecConversionInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this start bringup spec conversion internal server error response has a 2xx status code
func (o *StartBringupSpecConversionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start bringup spec conversion internal server error response has a 3xx status code
func (o *StartBringupSpecConversionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start bringup spec conversion internal server error response has a 4xx status code
func (o *StartBringupSpecConversionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this start bringup spec conversion internal server error response has a 5xx status code
func (o *StartBringupSpecConversionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this start bringup spec conversion internal server error response a status code equal to that given
func (o *StartBringupSpecConversionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the start bringup spec conversion internal server error response
func (o *StartBringupSpecConversionInternalServerError) Code() int {
	return 500
}

func (o *StartBringupSpecConversionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/system/sddc-spec-converter][%d] startBringupSpecConversionInternalServerError  %+v", 500, o.Payload)
}

func (o *StartBringupSpecConversionInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/system/sddc-spec-converter][%d] startBringupSpecConversionInternalServerError  %+v", 500, o.Payload)
}

func (o *StartBringupSpecConversionInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *StartBringupSpecConversionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBringupSpecConversionNotImplemented creates a StartBringupSpecConversionNotImplemented with default headers values
func NewStartBringupSpecConversionNotImplemented() *StartBringupSpecConversionNotImplemented {
	return &StartBringupSpecConversionNotImplemented{}
}

/*
StartBringupSpecConversionNotImplemented describes a response with status code 501, with default header values.

Not Implemented
*/
type StartBringupSpecConversionNotImplemented struct {
	Payload *models.Error
}

// IsSuccess returns true when this start bringup spec conversion not implemented response has a 2xx status code
func (o *StartBringupSpecConversionNotImplemented) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start bringup spec conversion not implemented response has a 3xx status code
func (o *StartBringupSpecConversionNotImplemented) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start bringup spec conversion not implemented response has a 4xx status code
func (o *StartBringupSpecConversionNotImplemented) IsClientError() bool {
	return false
}

// IsServerError returns true when this start bringup spec conversion not implemented response has a 5xx status code
func (o *StartBringupSpecConversionNotImplemented) IsServerError() bool {
	return true
}

// IsCode returns true when this start bringup spec conversion not implemented response a status code equal to that given
func (o *StartBringupSpecConversionNotImplemented) IsCode(code int) bool {
	return code == 501
}

// Code gets the status code for the start bringup spec conversion not implemented response
func (o *StartBringupSpecConversionNotImplemented) Code() int {
	return 501
}

func (o *StartBringupSpecConversionNotImplemented) Error() string {
	return fmt.Sprintf("[POST /v1/system/sddc-spec-converter][%d] startBringupSpecConversionNotImplemented  %+v", 501, o.Payload)
}

func (o *StartBringupSpecConversionNotImplemented) String() string {
	return fmt.Sprintf("[POST /v1/system/sddc-spec-converter][%d] startBringupSpecConversionNotImplemented  %+v", 501, o.Payload)
}

func (o *StartBringupSpecConversionNotImplemented) GetPayload() *models.Error {
	return o.Payload
}

func (o *StartBringupSpecConversionNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
