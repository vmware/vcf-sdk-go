// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package sddc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// RetryBringupValidationReader is a Reader for the RetryBringupValidation structure.
type RetryBringupValidationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RetryBringupValidationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRetryBringupValidationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRetryBringupValidationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRetryBringupValidationMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRetryBringupValidationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/sddcs/validations/{id}] retryBringupValidation", response, response.Code())
	}
}

// NewRetryBringupValidationOK creates a RetryBringupValidationOK with default headers values
func NewRetryBringupValidationOK() *RetryBringupValidationOK {
	return &RetryBringupValidationOK{}
}

/*
RetryBringupValidationOK describes a response with status code 200, with default header values.

Completed
*/
type RetryBringupValidationOK struct {
	Payload *models.Validation
}

// IsSuccess returns true when this retry bringup validation o k response has a 2xx status code
func (o *RetryBringupValidationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this retry bringup validation o k response has a 3xx status code
func (o *RetryBringupValidationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry bringup validation o k response has a 4xx status code
func (o *RetryBringupValidationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry bringup validation o k response has a 5xx status code
func (o *RetryBringupValidationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this retry bringup validation o k response a status code equal to that given
func (o *RetryBringupValidationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the retry bringup validation o k response
func (o *RetryBringupValidationOK) Code() int {
	return 200
}

func (o *RetryBringupValidationOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/validations/{id}][%d] retryBringupValidationOK  %+v", 200, o.Payload)
}

func (o *RetryBringupValidationOK) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/validations/{id}][%d] retryBringupValidationOK  %+v", 200, o.Payload)
}

func (o *RetryBringupValidationOK) GetPayload() *models.Validation {
	return o.Payload
}

func (o *RetryBringupValidationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryBringupValidationBadRequest creates a RetryBringupValidationBadRequest with default headers values
func NewRetryBringupValidationBadRequest() *RetryBringupValidationBadRequest {
	return &RetryBringupValidationBadRequest{}
}

/*
RetryBringupValidationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RetryBringupValidationBadRequest struct {
}

// IsSuccess returns true when this retry bringup validation bad request response has a 2xx status code
func (o *RetryBringupValidationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry bringup validation bad request response has a 3xx status code
func (o *RetryBringupValidationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry bringup validation bad request response has a 4xx status code
func (o *RetryBringupValidationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry bringup validation bad request response has a 5xx status code
func (o *RetryBringupValidationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this retry bringup validation bad request response a status code equal to that given
func (o *RetryBringupValidationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the retry bringup validation bad request response
func (o *RetryBringupValidationBadRequest) Code() int {
	return 400
}

func (o *RetryBringupValidationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/validations/{id}][%d] retryBringupValidationBadRequest ", 400)
}

func (o *RetryBringupValidationBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/validations/{id}][%d] retryBringupValidationBadRequest ", 400)
}

func (o *RetryBringupValidationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRetryBringupValidationMethodNotAllowed creates a RetryBringupValidationMethodNotAllowed with default headers values
func NewRetryBringupValidationMethodNotAllowed() *RetryBringupValidationMethodNotAllowed {
	return &RetryBringupValidationMethodNotAllowed{}
}

/*
RetryBringupValidationMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RetryBringupValidationMethodNotAllowed struct {
}

// IsSuccess returns true when this retry bringup validation method not allowed response has a 2xx status code
func (o *RetryBringupValidationMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry bringup validation method not allowed response has a 3xx status code
func (o *RetryBringupValidationMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry bringup validation method not allowed response has a 4xx status code
func (o *RetryBringupValidationMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry bringup validation method not allowed response has a 5xx status code
func (o *RetryBringupValidationMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this retry bringup validation method not allowed response a status code equal to that given
func (o *RetryBringupValidationMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the retry bringup validation method not allowed response
func (o *RetryBringupValidationMethodNotAllowed) Code() int {
	return 405
}

func (o *RetryBringupValidationMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/validations/{id}][%d] retryBringupValidationMethodNotAllowed ", 405)
}

func (o *RetryBringupValidationMethodNotAllowed) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/validations/{id}][%d] retryBringupValidationMethodNotAllowed ", 405)
}

func (o *RetryBringupValidationMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRetryBringupValidationInternalServerError creates a RetryBringupValidationInternalServerError with default headers values
func NewRetryBringupValidationInternalServerError() *RetryBringupValidationInternalServerError {
	return &RetryBringupValidationInternalServerError{}
}

/*
RetryBringupValidationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RetryBringupValidationInternalServerError struct {
}

// IsSuccess returns true when this retry bringup validation internal server error response has a 2xx status code
func (o *RetryBringupValidationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry bringup validation internal server error response has a 3xx status code
func (o *RetryBringupValidationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry bringup validation internal server error response has a 4xx status code
func (o *RetryBringupValidationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry bringup validation internal server error response has a 5xx status code
func (o *RetryBringupValidationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this retry bringup validation internal server error response a status code equal to that given
func (o *RetryBringupValidationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the retry bringup validation internal server error response
func (o *RetryBringupValidationInternalServerError) Code() int {
	return 500
}

func (o *RetryBringupValidationInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/validations/{id}][%d] retryBringupValidationInternalServerError ", 500)
}

func (o *RetryBringupValidationInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/validations/{id}][%d] retryBringupValidationInternalServerError ", 500)
}

func (o *RetryBringupValidationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
