// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package compatibility_matrix

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new compatibility matrix API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for compatibility matrix API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetCompatibilityMatrices(params *GetCompatibilityMatricesParams, opts ...ClientOption) (*GetCompatibilityMatricesOK, error)

	GetCompatibilityMatrix(params *GetCompatibilityMatrixParams, opts ...ClientOption) (*GetCompatibilityMatrixOK, error)

	GetCompatibilityMatrixContent(params *GetCompatibilityMatrixContentParams, opts ...ClientOption) (*GetCompatibilityMatrixContentOK, error)

	GetCompatibilityMatrixMetadata(params *GetCompatibilityMatrixMetadataParams, opts ...ClientOption) (*GetCompatibilityMatrixMetadataOK, error)

	UpdateCompatibilityMatrix(params *UpdateCompatibilityMatrixParams, opts ...ClientOption) (*UpdateCompatibilityMatrixOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetCompatibilityMatrices gets compatibility matrices

Get Compatibility Matrices
*/
func (a *Client) GetCompatibilityMatrices(params *GetCompatibilityMatricesParams, opts ...ClientOption) (*GetCompatibilityMatricesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompatibilityMatricesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCompatibilityMatrices",
		Method:             "GET",
		PathPattern:        "/v1/compatibility-matrices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCompatibilityMatricesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCompatibilityMatricesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCompatibilityMatrices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCompatibilityMatrix gets compatibility matrix

Get Compatibility Matrix
*/
func (a *Client) GetCompatibilityMatrix(params *GetCompatibilityMatrixParams, opts ...ClientOption) (*GetCompatibilityMatrixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompatibilityMatrixParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCompatibilityMatrix",
		Method:             "GET",
		PathPattern:        "/v1/compatibility-matrices/{compatibilityMatrixSource}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCompatibilityMatrixReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCompatibilityMatrixOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCompatibilityMatrix: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCompatibilityMatrixContent gets compatibility matrix content

Get Compatibility Matrix content
*/
func (a *Client) GetCompatibilityMatrixContent(params *GetCompatibilityMatrixContentParams, opts ...ClientOption) (*GetCompatibilityMatrixContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompatibilityMatrixContentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCompatibilityMatrixContent",
		Method:             "GET",
		PathPattern:        "/v1/compatibility-matrices/{compatibilityMatrixSource}/content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCompatibilityMatrixContentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCompatibilityMatrixContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCompatibilityMatrixContent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCompatibilityMatrixMetadata gets compatibility matrix metadata

Get Compatibility Matrix Metadata
*/
func (a *Client) GetCompatibilityMatrixMetadata(params *GetCompatibilityMatrixMetadataParams, opts ...ClientOption) (*GetCompatibilityMatrixMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompatibilityMatrixMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCompatibilityMatrixMetadata",
		Method:             "GET",
		PathPattern:        "/v1/compatibility-matrices/{compatibilityMatrixSource}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCompatibilityMatrixMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCompatibilityMatrixMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCompatibilityMatrixMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCompatibilityMatrix updates compatibility matrix for a source with JSON file

Update CompatibilityMatrix content for a source using a JSON file
*/
func (a *Client) UpdateCompatibilityMatrix(params *UpdateCompatibilityMatrixParams, opts ...ClientOption) (*UpdateCompatibilityMatrixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCompatibilityMatrixParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCompatibilityMatrix",
		Method:             "PUT",
		PathPattern:        "/v1/compatibility-matrices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCompatibilityMatrixReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCompatibilityMatrixOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCompatibilityMatrix: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
