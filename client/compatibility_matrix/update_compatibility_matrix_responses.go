// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package compatibility_matrix

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateCompatibilityMatrixReader is a Reader for the UpdateCompatibilityMatrix structure.
type UpdateCompatibilityMatrixReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCompatibilityMatrixReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCompatibilityMatrixOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCompatibilityMatrixBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateCompatibilityMatrixInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/compatibility-matrices] updateCompatibilityMatrix", response, response.Code())
	}
}

// NewUpdateCompatibilityMatrixOK creates a UpdateCompatibilityMatrixOK with default headers values
func NewUpdateCompatibilityMatrixOK() *UpdateCompatibilityMatrixOK {
	return &UpdateCompatibilityMatrixOK{}
}

/*
UpdateCompatibilityMatrixOK describes a response with status code 200, with default header values.

Success
*/
type UpdateCompatibilityMatrixOK struct {
}

// IsSuccess returns true when this update compatibility matrix o k response has a 2xx status code
func (o *UpdateCompatibilityMatrixOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update compatibility matrix o k response has a 3xx status code
func (o *UpdateCompatibilityMatrixOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compatibility matrix o k response has a 4xx status code
func (o *UpdateCompatibilityMatrixOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update compatibility matrix o k response has a 5xx status code
func (o *UpdateCompatibilityMatrixOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update compatibility matrix o k response a status code equal to that given
func (o *UpdateCompatibilityMatrixOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update compatibility matrix o k response
func (o *UpdateCompatibilityMatrixOK) Code() int {
	return 200
}

func (o *UpdateCompatibilityMatrixOK) Error() string {
	return fmt.Sprintf("[PUT /v1/compatibility-matrices][%d] updateCompatibilityMatrixOK ", 200)
}

func (o *UpdateCompatibilityMatrixOK) String() string {
	return fmt.Sprintf("[PUT /v1/compatibility-matrices][%d] updateCompatibilityMatrixOK ", 200)
}

func (o *UpdateCompatibilityMatrixOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCompatibilityMatrixBadRequest creates a UpdateCompatibilityMatrixBadRequest with default headers values
func NewUpdateCompatibilityMatrixBadRequest() *UpdateCompatibilityMatrixBadRequest {
	return &UpdateCompatibilityMatrixBadRequest{}
}

/*
UpdateCompatibilityMatrixBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateCompatibilityMatrixBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update compatibility matrix bad request response has a 2xx status code
func (o *UpdateCompatibilityMatrixBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update compatibility matrix bad request response has a 3xx status code
func (o *UpdateCompatibilityMatrixBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compatibility matrix bad request response has a 4xx status code
func (o *UpdateCompatibilityMatrixBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update compatibility matrix bad request response has a 5xx status code
func (o *UpdateCompatibilityMatrixBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update compatibility matrix bad request response a status code equal to that given
func (o *UpdateCompatibilityMatrixBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update compatibility matrix bad request response
func (o *UpdateCompatibilityMatrixBadRequest) Code() int {
	return 400
}

func (o *UpdateCompatibilityMatrixBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/compatibility-matrices][%d] updateCompatibilityMatrixBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCompatibilityMatrixBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/compatibility-matrices][%d] updateCompatibilityMatrixBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCompatibilityMatrixBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCompatibilityMatrixBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCompatibilityMatrixInternalServerError creates a UpdateCompatibilityMatrixInternalServerError with default headers values
func NewUpdateCompatibilityMatrixInternalServerError() *UpdateCompatibilityMatrixInternalServerError {
	return &UpdateCompatibilityMatrixInternalServerError{}
}

/*
UpdateCompatibilityMatrixInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateCompatibilityMatrixInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update compatibility matrix internal server error response has a 2xx status code
func (o *UpdateCompatibilityMatrixInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update compatibility matrix internal server error response has a 3xx status code
func (o *UpdateCompatibilityMatrixInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compatibility matrix internal server error response has a 4xx status code
func (o *UpdateCompatibilityMatrixInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update compatibility matrix internal server error response has a 5xx status code
func (o *UpdateCompatibilityMatrixInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update compatibility matrix internal server error response a status code equal to that given
func (o *UpdateCompatibilityMatrixInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update compatibility matrix internal server error response
func (o *UpdateCompatibilityMatrixInternalServerError) Code() int {
	return 500
}

func (o *UpdateCompatibilityMatrixInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/compatibility-matrices][%d] updateCompatibilityMatrixInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateCompatibilityMatrixInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/compatibility-matrices][%d] updateCompatibilityMatrixInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateCompatibilityMatrixInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCompatibilityMatrixInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
