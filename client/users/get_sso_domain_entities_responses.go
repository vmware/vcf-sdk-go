// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetSSODomainEntitiesReader is a Reader for the GetSSODomainEntities structure.
type GetSSODomainEntitiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSSODomainEntitiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSSODomainEntitiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSSODomainEntitiesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSSODomainEntitiesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSSODomainEntitiesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSSODomainEntitiesOK creates a GetSSODomainEntitiesOK with default headers values
func NewGetSSODomainEntitiesOK() *GetSSODomainEntitiesOK {
	return &GetSSODomainEntitiesOK{}
}

/*
GetSSODomainEntitiesOK describes a response with status code 200, with default header values.

OK
*/
type GetSSODomainEntitiesOK struct {
	Payload *models.PageOfSSODomainEntity
}

// IsSuccess returns true when this get Sso domain entities o k response has a 2xx status code
func (o *GetSSODomainEntitiesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get Sso domain entities o k response has a 3xx status code
func (o *GetSSODomainEntitiesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Sso domain entities o k response has a 4xx status code
func (o *GetSSODomainEntitiesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Sso domain entities o k response has a 5xx status code
func (o *GetSSODomainEntitiesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get Sso domain entities o k response a status code equal to that given
func (o *GetSSODomainEntitiesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetSSODomainEntitiesOK) Error() string {
	return fmt.Sprintf("[GET /v1/sso-domains/{sso-domain}/entities][%d] getSsoDomainEntitiesOK  %+v", 200, o.Payload)
}

func (o *GetSSODomainEntitiesOK) String() string {
	return fmt.Sprintf("[GET /v1/sso-domains/{sso-domain}/entities][%d] getSsoDomainEntitiesOK  %+v", 200, o.Payload)
}

func (o *GetSSODomainEntitiesOK) GetPayload() *models.PageOfSSODomainEntity {
	return o.Payload
}

func (o *GetSSODomainEntitiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageOfSSODomainEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSSODomainEntitiesUnauthorized creates a GetSSODomainEntitiesUnauthorized with default headers values
func NewGetSSODomainEntitiesUnauthorized() *GetSSODomainEntitiesUnauthorized {
	return &GetSSODomainEntitiesUnauthorized{}
}

/*
GetSSODomainEntitiesUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type GetSSODomainEntitiesUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get Sso domain entities unauthorized response has a 2xx status code
func (o *GetSSODomainEntitiesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Sso domain entities unauthorized response has a 3xx status code
func (o *GetSSODomainEntitiesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Sso domain entities unauthorized response has a 4xx status code
func (o *GetSSODomainEntitiesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Sso domain entities unauthorized response has a 5xx status code
func (o *GetSSODomainEntitiesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get Sso domain entities unauthorized response a status code equal to that given
func (o *GetSSODomainEntitiesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetSSODomainEntitiesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/sso-domains/{sso-domain}/entities][%d] getSsoDomainEntitiesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSSODomainEntitiesUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/sso-domains/{sso-domain}/entities][%d] getSsoDomainEntitiesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSSODomainEntitiesUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetSSODomainEntitiesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSSODomainEntitiesForbidden creates a GetSSODomainEntitiesForbidden with default headers values
func NewGetSSODomainEntitiesForbidden() *GetSSODomainEntitiesForbidden {
	return &GetSSODomainEntitiesForbidden{}
}

/*
GetSSODomainEntitiesForbidden describes a response with status code 403, with default header values.

Forbidden request
*/
type GetSSODomainEntitiesForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get Sso domain entities forbidden response has a 2xx status code
func (o *GetSSODomainEntitiesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Sso domain entities forbidden response has a 3xx status code
func (o *GetSSODomainEntitiesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Sso domain entities forbidden response has a 4xx status code
func (o *GetSSODomainEntitiesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Sso domain entities forbidden response has a 5xx status code
func (o *GetSSODomainEntitiesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get Sso domain entities forbidden response a status code equal to that given
func (o *GetSSODomainEntitiesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetSSODomainEntitiesForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/sso-domains/{sso-domain}/entities][%d] getSsoDomainEntitiesForbidden  %+v", 403, o.Payload)
}

func (o *GetSSODomainEntitiesForbidden) String() string {
	return fmt.Sprintf("[GET /v1/sso-domains/{sso-domain}/entities][%d] getSsoDomainEntitiesForbidden  %+v", 403, o.Payload)
}

func (o *GetSSODomainEntitiesForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetSSODomainEntitiesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSSODomainEntitiesInternalServerError creates a GetSSODomainEntitiesInternalServerError with default headers values
func NewGetSSODomainEntitiesInternalServerError() *GetSSODomainEntitiesInternalServerError {
	return &GetSSODomainEntitiesInternalServerError{}
}

/*
GetSSODomainEntitiesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetSSODomainEntitiesInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get Sso domain entities internal server error response has a 2xx status code
func (o *GetSSODomainEntitiesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Sso domain entities internal server error response has a 3xx status code
func (o *GetSSODomainEntitiesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Sso domain entities internal server error response has a 4xx status code
func (o *GetSSODomainEntitiesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Sso domain entities internal server error response has a 5xx status code
func (o *GetSSODomainEntitiesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get Sso domain entities internal server error response a status code equal to that given
func (o *GetSSODomainEntitiesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetSSODomainEntitiesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/sso-domains/{sso-domain}/entities][%d] getSsoDomainEntitiesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSSODomainEntitiesInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/sso-domains/{sso-domain}/entities][%d] getSsoDomainEntitiesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSSODomainEntitiesInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetSSODomainEntitiesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
