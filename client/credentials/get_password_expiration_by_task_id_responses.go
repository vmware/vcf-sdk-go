// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetPasswordExpirationByTaskIDReader is a Reader for the GetPasswordExpirationByTaskID structure.
type GetPasswordExpirationByTaskIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPasswordExpirationByTaskIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPasswordExpirationByTaskIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPasswordExpirationByTaskIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPasswordExpirationByTaskIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPasswordExpirationByTaskIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/credentials/expirations/{id}] getPasswordExpirationByTaskID", response, response.Code())
	}
}

// NewGetPasswordExpirationByTaskIDOK creates a GetPasswordExpirationByTaskIDOK with default headers values
func NewGetPasswordExpirationByTaskIDOK() *GetPasswordExpirationByTaskIDOK {
	return &GetPasswordExpirationByTaskIDOK{}
}

/*
GetPasswordExpirationByTaskIDOK describes a response with status code 200, with default header values.

OK
*/
type GetPasswordExpirationByTaskIDOK struct {
	Payload *models.CredentialsValidation
}

// IsSuccess returns true when this get password expiration by task Id o k response has a 2xx status code
func (o *GetPasswordExpirationByTaskIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get password expiration by task Id o k response has a 3xx status code
func (o *GetPasswordExpirationByTaskIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get password expiration by task Id o k response has a 4xx status code
func (o *GetPasswordExpirationByTaskIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get password expiration by task Id o k response has a 5xx status code
func (o *GetPasswordExpirationByTaskIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get password expiration by task Id o k response a status code equal to that given
func (o *GetPasswordExpirationByTaskIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get password expiration by task Id o k response
func (o *GetPasswordExpirationByTaskIDOK) Code() int {
	return 200
}

func (o *GetPasswordExpirationByTaskIDOK) Error() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getPasswordExpirationByTaskIdOK  %+v", 200, o.Payload)
}

func (o *GetPasswordExpirationByTaskIDOK) String() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getPasswordExpirationByTaskIdOK  %+v", 200, o.Payload)
}

func (o *GetPasswordExpirationByTaskIDOK) GetPayload() *models.CredentialsValidation {
	return o.Payload
}

func (o *GetPasswordExpirationByTaskIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CredentialsValidation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPasswordExpirationByTaskIDBadRequest creates a GetPasswordExpirationByTaskIDBadRequest with default headers values
func NewGetPasswordExpirationByTaskIDBadRequest() *GetPasswordExpirationByTaskIDBadRequest {
	return &GetPasswordExpirationByTaskIDBadRequest{}
}

/*
GetPasswordExpirationByTaskIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetPasswordExpirationByTaskIDBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get password expiration by task Id bad request response has a 2xx status code
func (o *GetPasswordExpirationByTaskIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get password expiration by task Id bad request response has a 3xx status code
func (o *GetPasswordExpirationByTaskIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get password expiration by task Id bad request response has a 4xx status code
func (o *GetPasswordExpirationByTaskIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get password expiration by task Id bad request response has a 5xx status code
func (o *GetPasswordExpirationByTaskIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get password expiration by task Id bad request response a status code equal to that given
func (o *GetPasswordExpirationByTaskIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get password expiration by task Id bad request response
func (o *GetPasswordExpirationByTaskIDBadRequest) Code() int {
	return 400
}

func (o *GetPasswordExpirationByTaskIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getPasswordExpirationByTaskIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetPasswordExpirationByTaskIDBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getPasswordExpirationByTaskIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetPasswordExpirationByTaskIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPasswordExpirationByTaskIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPasswordExpirationByTaskIDNotFound creates a GetPasswordExpirationByTaskIDNotFound with default headers values
func NewGetPasswordExpirationByTaskIDNotFound() *GetPasswordExpirationByTaskIDNotFound {
	return &GetPasswordExpirationByTaskIDNotFound{}
}

/*
GetPasswordExpirationByTaskIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetPasswordExpirationByTaskIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get password expiration by task Id not found response has a 2xx status code
func (o *GetPasswordExpirationByTaskIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get password expiration by task Id not found response has a 3xx status code
func (o *GetPasswordExpirationByTaskIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get password expiration by task Id not found response has a 4xx status code
func (o *GetPasswordExpirationByTaskIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get password expiration by task Id not found response has a 5xx status code
func (o *GetPasswordExpirationByTaskIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get password expiration by task Id not found response a status code equal to that given
func (o *GetPasswordExpirationByTaskIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get password expiration by task Id not found response
func (o *GetPasswordExpirationByTaskIDNotFound) Code() int {
	return 404
}

func (o *GetPasswordExpirationByTaskIDNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getPasswordExpirationByTaskIdNotFound  %+v", 404, o.Payload)
}

func (o *GetPasswordExpirationByTaskIDNotFound) String() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getPasswordExpirationByTaskIdNotFound  %+v", 404, o.Payload)
}

func (o *GetPasswordExpirationByTaskIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPasswordExpirationByTaskIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPasswordExpirationByTaskIDInternalServerError creates a GetPasswordExpirationByTaskIDInternalServerError with default headers values
func NewGetPasswordExpirationByTaskIDInternalServerError() *GetPasswordExpirationByTaskIDInternalServerError {
	return &GetPasswordExpirationByTaskIDInternalServerError{}
}

/*
GetPasswordExpirationByTaskIDInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetPasswordExpirationByTaskIDInternalServerError struct {
}

// IsSuccess returns true when this get password expiration by task Id internal server error response has a 2xx status code
func (o *GetPasswordExpirationByTaskIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get password expiration by task Id internal server error response has a 3xx status code
func (o *GetPasswordExpirationByTaskIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get password expiration by task Id internal server error response has a 4xx status code
func (o *GetPasswordExpirationByTaskIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get password expiration by task Id internal server error response has a 5xx status code
func (o *GetPasswordExpirationByTaskIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get password expiration by task Id internal server error response a status code equal to that given
func (o *GetPasswordExpirationByTaskIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get password expiration by task Id internal server error response
func (o *GetPasswordExpirationByTaskIDInternalServerError) Code() int {
	return 500
}

func (o *GetPasswordExpirationByTaskIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getPasswordExpirationByTaskIdInternalServerError ", 500)
}

func (o *GetPasswordExpirationByTaskIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getPasswordExpirationByTaskIdInternalServerError ", 500)
}

func (o *GetPasswordExpirationByTaskIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
