// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetExpirationsForPasswordsReader is a Reader for the GetExpirationsForPasswords structure.
type GetExpirationsForPasswordsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExpirationsForPasswordsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExpirationsForPasswordsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetExpirationsForPasswordsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetExpirationsForPasswordsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetExpirationsForPasswordsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetExpirationsForPasswordsOK creates a GetExpirationsForPasswordsOK with default headers values
func NewGetExpirationsForPasswordsOK() *GetExpirationsForPasswordsOK {
	return &GetExpirationsForPasswordsOK{}
}

/*
GetExpirationsForPasswordsOK describes a response with status code 200, with default header values.

OK
*/
type GetExpirationsForPasswordsOK struct {
	Payload *models.CredentialsValidation
}

// IsSuccess returns true when this get expirations for passwords o k response has a 2xx status code
func (o *GetExpirationsForPasswordsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get expirations for passwords o k response has a 3xx status code
func (o *GetExpirationsForPasswordsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get expirations for passwords o k response has a 4xx status code
func (o *GetExpirationsForPasswordsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get expirations for passwords o k response has a 5xx status code
func (o *GetExpirationsForPasswordsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get expirations for passwords o k response a status code equal to that given
func (o *GetExpirationsForPasswordsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetExpirationsForPasswordsOK) Error() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsOK  %+v", 200, o.Payload)
}

func (o *GetExpirationsForPasswordsOK) String() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsOK  %+v", 200, o.Payload)
}

func (o *GetExpirationsForPasswordsOK) GetPayload() *models.CredentialsValidation {
	return o.Payload
}

func (o *GetExpirationsForPasswordsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CredentialsValidation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExpirationsForPasswordsBadRequest creates a GetExpirationsForPasswordsBadRequest with default headers values
func NewGetExpirationsForPasswordsBadRequest() *GetExpirationsForPasswordsBadRequest {
	return &GetExpirationsForPasswordsBadRequest{}
}

/*
GetExpirationsForPasswordsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetExpirationsForPasswordsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get expirations for passwords bad request response has a 2xx status code
func (o *GetExpirationsForPasswordsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get expirations for passwords bad request response has a 3xx status code
func (o *GetExpirationsForPasswordsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get expirations for passwords bad request response has a 4xx status code
func (o *GetExpirationsForPasswordsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get expirations for passwords bad request response has a 5xx status code
func (o *GetExpirationsForPasswordsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get expirations for passwords bad request response a status code equal to that given
func (o *GetExpirationsForPasswordsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetExpirationsForPasswordsBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsBadRequest  %+v", 400, o.Payload)
}

func (o *GetExpirationsForPasswordsBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsBadRequest  %+v", 400, o.Payload)
}

func (o *GetExpirationsForPasswordsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetExpirationsForPasswordsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExpirationsForPasswordsNotFound creates a GetExpirationsForPasswordsNotFound with default headers values
func NewGetExpirationsForPasswordsNotFound() *GetExpirationsForPasswordsNotFound {
	return &GetExpirationsForPasswordsNotFound{}
}

/*
GetExpirationsForPasswordsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetExpirationsForPasswordsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get expirations for passwords not found response has a 2xx status code
func (o *GetExpirationsForPasswordsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get expirations for passwords not found response has a 3xx status code
func (o *GetExpirationsForPasswordsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get expirations for passwords not found response has a 4xx status code
func (o *GetExpirationsForPasswordsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get expirations for passwords not found response has a 5xx status code
func (o *GetExpirationsForPasswordsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get expirations for passwords not found response a status code equal to that given
func (o *GetExpirationsForPasswordsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetExpirationsForPasswordsNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsNotFound  %+v", 404, o.Payload)
}

func (o *GetExpirationsForPasswordsNotFound) String() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsNotFound  %+v", 404, o.Payload)
}

func (o *GetExpirationsForPasswordsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetExpirationsForPasswordsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExpirationsForPasswordsInternalServerError creates a GetExpirationsForPasswordsInternalServerError with default headers values
func NewGetExpirationsForPasswordsInternalServerError() *GetExpirationsForPasswordsInternalServerError {
	return &GetExpirationsForPasswordsInternalServerError{}
}

/*
GetExpirationsForPasswordsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetExpirationsForPasswordsInternalServerError struct {
}

// IsSuccess returns true when this get expirations for passwords internal server error response has a 2xx status code
func (o *GetExpirationsForPasswordsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get expirations for passwords internal server error response has a 3xx status code
func (o *GetExpirationsForPasswordsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get expirations for passwords internal server error response has a 4xx status code
func (o *GetExpirationsForPasswordsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get expirations for passwords internal server error response has a 5xx status code
func (o *GetExpirationsForPasswordsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get expirations for passwords internal server error response a status code equal to that given
func (o *GetExpirationsForPasswordsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetExpirationsForPasswordsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsInternalServerError ", 500)
}

func (o *GetExpirationsForPasswordsInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsInternalServerError ", 500)
}

func (o *GetExpirationsForPasswordsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
