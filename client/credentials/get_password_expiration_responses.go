// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetPasswordExpirationReader is a Reader for the GetPasswordExpiration structure.
type GetPasswordExpirationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPasswordExpirationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPasswordExpirationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewGetPasswordExpirationAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPasswordExpirationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPasswordExpirationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPasswordExpirationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPasswordExpirationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPasswordExpirationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/credentials/expirations] getPasswordExpiration", response, response.Code())
	}
}

// NewGetPasswordExpirationOK creates a GetPasswordExpirationOK with default headers values
func NewGetPasswordExpirationOK() *GetPasswordExpirationOK {
	return &GetPasswordExpirationOK{}
}

/*
GetPasswordExpirationOK describes a response with status code 200, with default header values.

OK
*/
type GetPasswordExpirationOK struct {
	Payload *models.CredentialsExpiration
}

// IsSuccess returns true when this get password expiration o k response has a 2xx status code
func (o *GetPasswordExpirationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get password expiration o k response has a 3xx status code
func (o *GetPasswordExpirationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get password expiration o k response has a 4xx status code
func (o *GetPasswordExpirationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get password expiration o k response has a 5xx status code
func (o *GetPasswordExpirationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get password expiration o k response a status code equal to that given
func (o *GetPasswordExpirationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get password expiration o k response
func (o *GetPasswordExpirationOK) Code() int {
	return 200
}

func (o *GetPasswordExpirationOK) Error() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] getPasswordExpirationOK  %+v", 200, o.Payload)
}

func (o *GetPasswordExpirationOK) String() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] getPasswordExpirationOK  %+v", 200, o.Payload)
}

func (o *GetPasswordExpirationOK) GetPayload() *models.CredentialsExpiration {
	return o.Payload
}

func (o *GetPasswordExpirationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CredentialsExpiration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPasswordExpirationAccepted creates a GetPasswordExpirationAccepted with default headers values
func NewGetPasswordExpirationAccepted() *GetPasswordExpirationAccepted {
	return &GetPasswordExpirationAccepted{}
}

/*
GetPasswordExpirationAccepted describes a response with status code 202, with default header values.

Accepted
*/
type GetPasswordExpirationAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this get password expiration accepted response has a 2xx status code
func (o *GetPasswordExpirationAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get password expiration accepted response has a 3xx status code
func (o *GetPasswordExpirationAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get password expiration accepted response has a 4xx status code
func (o *GetPasswordExpirationAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this get password expiration accepted response has a 5xx status code
func (o *GetPasswordExpirationAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this get password expiration accepted response a status code equal to that given
func (o *GetPasswordExpirationAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the get password expiration accepted response
func (o *GetPasswordExpirationAccepted) Code() int {
	return 202
}

func (o *GetPasswordExpirationAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] getPasswordExpirationAccepted  %+v", 202, o.Payload)
}

func (o *GetPasswordExpirationAccepted) String() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] getPasswordExpirationAccepted  %+v", 202, o.Payload)
}

func (o *GetPasswordExpirationAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *GetPasswordExpirationAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPasswordExpirationBadRequest creates a GetPasswordExpirationBadRequest with default headers values
func NewGetPasswordExpirationBadRequest() *GetPasswordExpirationBadRequest {
	return &GetPasswordExpirationBadRequest{}
}

/*
GetPasswordExpirationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetPasswordExpirationBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get password expiration bad request response has a 2xx status code
func (o *GetPasswordExpirationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get password expiration bad request response has a 3xx status code
func (o *GetPasswordExpirationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get password expiration bad request response has a 4xx status code
func (o *GetPasswordExpirationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get password expiration bad request response has a 5xx status code
func (o *GetPasswordExpirationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get password expiration bad request response a status code equal to that given
func (o *GetPasswordExpirationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get password expiration bad request response
func (o *GetPasswordExpirationBadRequest) Code() int {
	return 400
}

func (o *GetPasswordExpirationBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] getPasswordExpirationBadRequest  %+v", 400, o.Payload)
}

func (o *GetPasswordExpirationBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] getPasswordExpirationBadRequest  %+v", 400, o.Payload)
}

func (o *GetPasswordExpirationBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPasswordExpirationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPasswordExpirationUnauthorized creates a GetPasswordExpirationUnauthorized with default headers values
func NewGetPasswordExpirationUnauthorized() *GetPasswordExpirationUnauthorized {
	return &GetPasswordExpirationUnauthorized{}
}

/*
GetPasswordExpirationUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetPasswordExpirationUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get password expiration unauthorized response has a 2xx status code
func (o *GetPasswordExpirationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get password expiration unauthorized response has a 3xx status code
func (o *GetPasswordExpirationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get password expiration unauthorized response has a 4xx status code
func (o *GetPasswordExpirationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get password expiration unauthorized response has a 5xx status code
func (o *GetPasswordExpirationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get password expiration unauthorized response a status code equal to that given
func (o *GetPasswordExpirationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get password expiration unauthorized response
func (o *GetPasswordExpirationUnauthorized) Code() int {
	return 401
}

func (o *GetPasswordExpirationUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] getPasswordExpirationUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPasswordExpirationUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] getPasswordExpirationUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPasswordExpirationUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPasswordExpirationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPasswordExpirationForbidden creates a GetPasswordExpirationForbidden with default headers values
func NewGetPasswordExpirationForbidden() *GetPasswordExpirationForbidden {
	return &GetPasswordExpirationForbidden{}
}

/*
GetPasswordExpirationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetPasswordExpirationForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get password expiration forbidden response has a 2xx status code
func (o *GetPasswordExpirationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get password expiration forbidden response has a 3xx status code
func (o *GetPasswordExpirationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get password expiration forbidden response has a 4xx status code
func (o *GetPasswordExpirationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get password expiration forbidden response has a 5xx status code
func (o *GetPasswordExpirationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get password expiration forbidden response a status code equal to that given
func (o *GetPasswordExpirationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get password expiration forbidden response
func (o *GetPasswordExpirationForbidden) Code() int {
	return 403
}

func (o *GetPasswordExpirationForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] getPasswordExpirationForbidden  %+v", 403, o.Payload)
}

func (o *GetPasswordExpirationForbidden) String() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] getPasswordExpirationForbidden  %+v", 403, o.Payload)
}

func (o *GetPasswordExpirationForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPasswordExpirationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPasswordExpirationTooManyRequests creates a GetPasswordExpirationTooManyRequests with default headers values
func NewGetPasswordExpirationTooManyRequests() *GetPasswordExpirationTooManyRequests {
	return &GetPasswordExpirationTooManyRequests{}
}

/*
GetPasswordExpirationTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetPasswordExpirationTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get password expiration too many requests response has a 2xx status code
func (o *GetPasswordExpirationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get password expiration too many requests response has a 3xx status code
func (o *GetPasswordExpirationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get password expiration too many requests response has a 4xx status code
func (o *GetPasswordExpirationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get password expiration too many requests response has a 5xx status code
func (o *GetPasswordExpirationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get password expiration too many requests response a status code equal to that given
func (o *GetPasswordExpirationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get password expiration too many requests response
func (o *GetPasswordExpirationTooManyRequests) Code() int {
	return 429
}

func (o *GetPasswordExpirationTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] getPasswordExpirationTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPasswordExpirationTooManyRequests) String() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] getPasswordExpirationTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPasswordExpirationTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPasswordExpirationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPasswordExpirationInternalServerError creates a GetPasswordExpirationInternalServerError with default headers values
func NewGetPasswordExpirationInternalServerError() *GetPasswordExpirationInternalServerError {
	return &GetPasswordExpirationInternalServerError{}
}

/*
GetPasswordExpirationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetPasswordExpirationInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get password expiration internal server error response has a 2xx status code
func (o *GetPasswordExpirationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get password expiration internal server error response has a 3xx status code
func (o *GetPasswordExpirationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get password expiration internal server error response has a 4xx status code
func (o *GetPasswordExpirationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get password expiration internal server error response has a 5xx status code
func (o *GetPasswordExpirationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get password expiration internal server error response a status code equal to that given
func (o *GetPasswordExpirationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get password expiration internal server error response
func (o *GetPasswordExpirationInternalServerError) Code() int {
	return 500
}

func (o *GetPasswordExpirationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] getPasswordExpirationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPasswordExpirationInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] getPasswordExpirationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPasswordExpirationInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPasswordExpirationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
