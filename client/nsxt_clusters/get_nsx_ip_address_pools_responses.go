// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package nsxt_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetNsxIPAddressPoolsReader is a Reader for the GetNsxIPAddressPools structure.
type GetNsxIPAddressPoolsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNsxIPAddressPoolsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNsxIPAddressPoolsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetNsxIPAddressPoolsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNsxIPAddressPoolsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools] getNsxIpAddressPools", response, response.Code())
	}
}

// NewGetNsxIPAddressPoolsOK creates a GetNsxIPAddressPoolsOK with default headers values
func NewGetNsxIPAddressPoolsOK() *GetNsxIPAddressPoolsOK {
	return &GetNsxIPAddressPoolsOK{}
}

/*
GetNsxIPAddressPoolsOK describes a response with status code 200, with default header values.

Ok
*/
type GetNsxIPAddressPoolsOK struct {
	Payload *models.NSXTIPAddressPool
}

// IsSuccess returns true when this get nsx Ip address pools o k response has a 2xx status code
func (o *GetNsxIPAddressPoolsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get nsx Ip address pools o k response has a 3xx status code
func (o *GetNsxIPAddressPoolsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nsx Ip address pools o k response has a 4xx status code
func (o *GetNsxIPAddressPoolsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nsx Ip address pools o k response has a 5xx status code
func (o *GetNsxIPAddressPoolsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get nsx Ip address pools o k response a status code equal to that given
func (o *GetNsxIPAddressPoolsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get nsx Ip address pools o k response
func (o *GetNsxIPAddressPoolsOK) Code() int {
	return 200
}

func (o *GetNsxIPAddressPoolsOK) Error() string {
	return fmt.Sprintf("[GET /v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools][%d] getNsxIpAddressPoolsOK  %+v", 200, o.Payload)
}

func (o *GetNsxIPAddressPoolsOK) String() string {
	return fmt.Sprintf("[GET /v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools][%d] getNsxIpAddressPoolsOK  %+v", 200, o.Payload)
}

func (o *GetNsxIPAddressPoolsOK) GetPayload() *models.NSXTIPAddressPool {
	return o.Payload
}

func (o *GetNsxIPAddressPoolsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NSXTIPAddressPool)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNsxIPAddressPoolsNotFound creates a GetNsxIPAddressPoolsNotFound with default headers values
func NewGetNsxIPAddressPoolsNotFound() *GetNsxIPAddressPoolsNotFound {
	return &GetNsxIPAddressPoolsNotFound{}
}

/*
GetNsxIPAddressPoolsNotFound describes a response with status code 404, with default header values.

IP address pools not found
*/
type GetNsxIPAddressPoolsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get nsx Ip address pools not found response has a 2xx status code
func (o *GetNsxIPAddressPoolsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nsx Ip address pools not found response has a 3xx status code
func (o *GetNsxIPAddressPoolsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nsx Ip address pools not found response has a 4xx status code
func (o *GetNsxIPAddressPoolsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nsx Ip address pools not found response has a 5xx status code
func (o *GetNsxIPAddressPoolsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get nsx Ip address pools not found response a status code equal to that given
func (o *GetNsxIPAddressPoolsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get nsx Ip address pools not found response
func (o *GetNsxIPAddressPoolsNotFound) Code() int {
	return 404
}

func (o *GetNsxIPAddressPoolsNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools][%d] getNsxIpAddressPoolsNotFound  %+v", 404, o.Payload)
}

func (o *GetNsxIPAddressPoolsNotFound) String() string {
	return fmt.Sprintf("[GET /v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools][%d] getNsxIpAddressPoolsNotFound  %+v", 404, o.Payload)
}

func (o *GetNsxIPAddressPoolsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNsxIPAddressPoolsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNsxIPAddressPoolsInternalServerError creates a GetNsxIPAddressPoolsInternalServerError with default headers values
func NewGetNsxIPAddressPoolsInternalServerError() *GetNsxIPAddressPoolsInternalServerError {
	return &GetNsxIPAddressPoolsInternalServerError{}
}

/*
GetNsxIPAddressPoolsInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type GetNsxIPAddressPoolsInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get nsx Ip address pools internal server error response has a 2xx status code
func (o *GetNsxIPAddressPoolsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nsx Ip address pools internal server error response has a 3xx status code
func (o *GetNsxIPAddressPoolsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nsx Ip address pools internal server error response has a 4xx status code
func (o *GetNsxIPAddressPoolsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nsx Ip address pools internal server error response has a 5xx status code
func (o *GetNsxIPAddressPoolsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get nsx Ip address pools internal server error response a status code equal to that given
func (o *GetNsxIPAddressPoolsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get nsx Ip address pools internal server error response
func (o *GetNsxIPAddressPoolsInternalServerError) Code() int {
	return 500
}

func (o *GetNsxIPAddressPoolsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools][%d] getNsxIpAddressPoolsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetNsxIPAddressPoolsInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools][%d] getNsxIpAddressPoolsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetNsxIPAddressPoolsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNsxIPAddressPoolsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
