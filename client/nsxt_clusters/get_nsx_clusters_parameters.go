// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package nsxt_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNsxClustersParams creates a new GetNsxClustersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNsxClustersParams() *GetNsxClustersParams {
	return &GetNsxClustersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNsxClustersParamsWithTimeout creates a new GetNsxClustersParams object
// with the ability to set a timeout on a request.
func NewGetNsxClustersParamsWithTimeout(timeout time.Duration) *GetNsxClustersParams {
	return &GetNsxClustersParams{
		timeout: timeout,
	}
}

// NewGetNsxClustersParamsWithContext creates a new GetNsxClustersParams object
// with the ability to set a context for a request.
func NewGetNsxClustersParamsWithContext(ctx context.Context) *GetNsxClustersParams {
	return &GetNsxClustersParams{
		Context: ctx,
	}
}

// NewGetNsxClustersParamsWithHTTPClient creates a new GetNsxClustersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNsxClustersParamsWithHTTPClient(client *http.Client) *GetNsxClustersParams {
	return &GetNsxClustersParams{
		HTTPClient: client,
	}
}

/*
GetNsxClustersParams contains all the parameters to send to the API endpoint

	for the get nsx clusters operation.

	Typically these are written to a http.Request.
*/
type GetNsxClustersParams struct {

	/* IsShareable.

	   filter NSX clusters which can be shared for domain creation
	*/
	IsShareable *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get nsx clusters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNsxClustersParams) WithDefaults() *GetNsxClustersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get nsx clusters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNsxClustersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get nsx clusters params
func (o *GetNsxClustersParams) WithTimeout(timeout time.Duration) *GetNsxClustersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get nsx clusters params
func (o *GetNsxClustersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get nsx clusters params
func (o *GetNsxClustersParams) WithContext(ctx context.Context) *GetNsxClustersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get nsx clusters params
func (o *GetNsxClustersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get nsx clusters params
func (o *GetNsxClustersParams) WithHTTPClient(client *http.Client) *GetNsxClustersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get nsx clusters params
func (o *GetNsxClustersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIsShareable adds the isShareable to the get nsx clusters params
func (o *GetNsxClustersParams) WithIsShareable(isShareable *bool) *GetNsxClustersParams {
	o.SetIsShareable(isShareable)
	return o
}

// SetIsShareable adds the isShareable to the get nsx clusters params
func (o *GetNsxClustersParams) SetIsShareable(isShareable *bool) {
	o.IsShareable = isShareable
}

// WriteToRequest writes these params to a swagger request
func (o *GetNsxClustersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IsShareable != nil {

		// query param isShareable
		var qrIsShareable bool

		if o.IsShareable != nil {
			qrIsShareable = *o.IsShareable
		}
		qIsShareable := swag.FormatBool(qrIsShareable)
		if qIsShareable != "" {

			if err := r.SetQueryParam("isShareable", qIsShareable); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
