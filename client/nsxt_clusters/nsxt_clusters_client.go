// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package nsxt_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new n s x t clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for n s x t clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetCriteria1(params *GetCriteria1Params, opts ...ClientOption) (*GetCriteria1OK, error)

	GetCriterion1(params *GetCriterion1Params, opts ...ClientOption) (*GetCriterion1OK, error)

	GetNSXTCluster(params *GetNSXTClusterParams, opts ...ClientOption) (*GetNSXTClusterOK, error)

	GetNSXTClusterQueryResponse(params *GetNSXTClusterQueryResponseParams, opts ...ClientOption) (*GetNSXTClusterQueryResponseOK, *GetNSXTClusterQueryResponseAccepted, error)

	GetNSXTClusters(params *GetNSXTClustersParams, opts ...ClientOption) (*GetNSXTClustersOK, error)

	GetNSXTIPAddressPool(params *GetNSXTIPAddressPoolParams, opts ...ClientOption) (*GetNSXTIPAddressPoolOK, error)

	GetNSXTIPAddressPools(params *GetNSXTIPAddressPoolsParams, opts ...ClientOption) (*GetNSXTIPAddressPoolsOK, error)

	GetValidationResultUsingGET(params *GetValidationResultUsingGETParams, opts ...ClientOption) (*GetValidationResultUsingGETOK, error)

	PostQuery1(params *PostQuery1Params, opts ...ClientOption) (*PostQuery1OK, *PostQuery1Accepted, error)

	ValidateIPPoolUsingPOST(params *ValidateIPPoolUsingPOSTParams, opts ...ClientOption) (*ValidateIPPoolUsingPOSTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetCriteria1 gets all n s x t criteria
*/
func (a *Client) GetCriteria1(params *GetCriteria1Params, opts ...ClientOption) (*GetCriteria1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCriteria1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCriteria_1",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/criteria",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCriteria1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCriteria1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCriteria_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCriterion1 gets a n s x t criterion
*/
func (a *Client) GetCriterion1(params *GetCriterion1Params, opts ...ClientOption) (*GetCriterion1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCriterion1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCriterion_1",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/criteria/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCriterion1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCriterion1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCriterion_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNSXTCluster gets a n s x t cluster
*/
func (a *Client) GetNSXTCluster(params *GetNSXTClusterParams, opts ...ClientOption) (*GetNSXTClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNSXTClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxtCluster",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNSXTClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNSXTClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxtCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNSXTClusterQueryResponse gets n s x t cluster query response
*/
func (a *Client) GetNSXTClusterQueryResponse(params *GetNSXTClusterQueryResponseParams, opts ...ClientOption) (*GetNSXTClusterQueryResponseOK, *GetNSXTClusterQueryResponseAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNSXTClusterQueryResponseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxtClusterQueryResponse",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/queries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNSXTClusterQueryResponseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetNSXTClusterQueryResponseOK:
		return value, nil, nil
	case *GetNSXTClusterQueryResponseAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for nsxt_clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNSXTClusters gets the n s x t clusters
*/
func (a *Client) GetNSXTClusters(params *GetNSXTClustersParams, opts ...ClientOption) (*GetNSXTClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNSXTClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxtClusters",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNSXTClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNSXTClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxtClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNSXTIPAddressPool gets a n s x t IP address pool
*/
func (a *Client) GetNSXTIPAddressPool(params *GetNSXTIPAddressPoolParams, opts ...ClientOption) (*GetNSXTIPAddressPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNSXTIPAddressPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxtIpAddressPool",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNSXTIPAddressPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNSXTIPAddressPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxtIpAddressPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNSXTIPAddressPools gets the n s x t IP address pools
*/
func (a *Client) GetNSXTIPAddressPools(params *GetNSXTIPAddressPoolsParams, opts ...ClientOption) (*GetNSXTIPAddressPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNSXTIPAddressPoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxtIpAddressPools",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNSXTIPAddressPoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNSXTIPAddressPoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxtIpAddressPools: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetValidationResultUsingGET gets validation result
*/
func (a *Client) GetValidationResultUsingGET(params *GetValidationResultUsingGETParams, opts ...ClientOption) (*GetValidationResultUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidationResultUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getValidationResultUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/ip-address-pools/validations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetValidationResultUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValidationResultUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidationResultUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostQuery1 posts a query
*/
func (a *Client) PostQuery1(params *PostQuery1Params, opts ...ClientOption) (*PostQuery1OK, *PostQuery1Accepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostQuery1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "postQuery_1",
		Method:             "POST",
		PathPattern:        "/v1/nsxt-clusters/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostQuery1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostQuery1OK:
		return value, nil, nil
	case *PostQuery1Accepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for nsxt_clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateIPPoolUsingPOST validates Ip pool
*/
func (a *Client) ValidateIPPoolUsingPOST(params *ValidateIPPoolUsingPOSTParams, opts ...ClientOption) (*ValidateIPPoolUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateIPPoolUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateIpPoolUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/nsxt-clusters/ip-address-pools/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateIPPoolUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateIPPoolUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateIpPoolUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
