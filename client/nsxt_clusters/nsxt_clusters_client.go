// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package nsxt_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new n s x t clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for n s x t clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetNsxCluster(params *GetNsxClusterParams, opts ...ClientOption) (*GetNsxClusterOK, error)

	GetNsxClusterQueryResponse(params *GetNsxClusterQueryResponseParams, opts ...ClientOption) (*GetNsxClusterQueryResponseOK, *GetNsxClusterQueryResponseAccepted, error)

	GetNsxClusters(params *GetNsxClustersParams, opts ...ClientOption) (*GetNsxClustersOK, error)

	GetNsxCriteria(params *GetNsxCriteriaParams, opts ...ClientOption) (*GetNsxCriteriaOK, error)

	GetNsxCriterion(params *GetNsxCriterionParams, opts ...ClientOption) (*GetNsxCriterionOK, error)

	GetNsxIPAddressPool(params *GetNsxIPAddressPoolParams, opts ...ClientOption) (*GetNsxIPAddressPoolOK, error)

	GetNsxIPAddressPools(params *GetNsxIPAddressPoolsParams, opts ...ClientOption) (*GetNsxIPAddressPoolsOK, error)

	GetNsxTransportZones(params *GetNsxTransportZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNsxTransportZonesOK, error)

	GetValidationResultUsingGET(params *GetValidationResultUsingGETParams, opts ...ClientOption) (*GetValidationResultUsingGETOK, error)

	StartNsxCriteriaQuery(params *StartNsxCriteriaQueryParams, opts ...ClientOption) (*StartNsxCriteriaQueryOK, *StartNsxCriteriaQueryAccepted, error)

	ValidateIPPoolUsingPOST(params *ValidateIPPoolUsingPOSTParams, opts ...ClientOption) (*ValidateIPPoolUsingPOSTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetNsxCluster retrieves the details of an n s x cluster by its ID
*/
func (a *Client) GetNsxCluster(params *GetNsxClusterParams, opts ...ClientOption) (*GetNsxClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxCluster",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNsxClusterQueryResponse gets n s x cluster query response
*/
func (a *Client) GetNsxClusterQueryResponse(params *GetNsxClusterQueryResponseParams, opts ...ClientOption) (*GetNsxClusterQueryResponseOK, *GetNsxClusterQueryResponseAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxClusterQueryResponseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxClusterQueryResponse",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/queries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxClusterQueryResponseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetNsxClusterQueryResponseOK:
		return value, nil, nil
	case *GetNsxClusterQueryResponseAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for nsxt_clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNsxClusters retrieves a list of n s x clusters
*/
func (a *Client) GetNsxClusters(params *GetNsxClustersParams, opts ...ClientOption) (*GetNsxClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxClusters",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNsxCriteria gets all n s x criteria
*/
func (a *Client) GetNsxCriteria(params *GetNsxCriteriaParams, opts ...ClientOption) (*GetNsxCriteriaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxCriteriaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxCriteria",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/criteria",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxCriteriaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxCriteriaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxCriteria: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNsxCriterion gets a n s x criterion
*/
func (a *Client) GetNsxCriterion(params *GetNsxCriterionParams, opts ...ClientOption) (*GetNsxCriterionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxCriterionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxCriterion",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/criteria/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxCriterionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxCriterionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxCriterion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNsxIPAddressPool retrieves an n s x IP address pool by its name
*/
func (a *Client) GetNsxIPAddressPool(params *GetNsxIPAddressPoolParams, opts ...ClientOption) (*GetNsxIPAddressPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxIPAddressPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxIpAddressPool",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxIPAddressPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxIPAddressPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxIpAddressPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNsxIPAddressPools retrives a list of n s x IP address pools by the n s x cluster ID
*/
func (a *Client) GetNsxIPAddressPools(params *GetNsxIPAddressPoolsParams, opts ...ClientOption) (*GetNsxIPAddressPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxIPAddressPoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxIpAddressPools",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxIPAddressPoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxIPAddressPoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxIpAddressPools: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNsxTransportZones retrieves list of all n s x transport zones
*/
func (a *Client) GetNsxTransportZones(params *GetNsxTransportZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNsxTransportZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxTransportZonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxTransportZones",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/{nsxt-cluster-id}/transport-zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxTransportZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxTransportZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxTransportZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetValidationResultUsingGET gets validation result
*/
func (a *Client) GetValidationResultUsingGET(params *GetValidationResultUsingGETParams, opts ...ClientOption) (*GetValidationResultUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidationResultUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getValidationResultUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/ip-address-pools/validations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetValidationResultUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValidationResultUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidationResultUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartNsxCriteriaQuery starts a query with n s x criteria
*/
func (a *Client) StartNsxCriteriaQuery(params *StartNsxCriteriaQueryParams, opts ...ClientOption) (*StartNsxCriteriaQueryOK, *StartNsxCriteriaQueryAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartNsxCriteriaQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startNsxCriteriaQuery",
		Method:             "POST",
		PathPattern:        "/v1/nsxt-clusters/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartNsxCriteriaQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StartNsxCriteriaQueryOK:
		return value, nil, nil
	case *StartNsxCriteriaQueryAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for nsxt_clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateIPPoolUsingPOST validates Ip pool
*/
func (a *Client) ValidateIPPoolUsingPOST(params *ValidateIPPoolUsingPOSTParams, opts ...ClientOption) (*ValidateIPPoolUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateIPPoolUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateIpPoolUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/nsxt-clusters/ip-address-pools/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateIPPoolUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateIPPoolUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateIpPoolUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
