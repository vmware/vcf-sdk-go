// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package upgrades

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// PerformUpgradeReader is a Reader for the PerformUpgrade structure.
type PerformUpgradeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PerformUpgradeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPerformUpgradeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewPerformUpgradeAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPerformUpgradeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPerformUpgradeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewPerformUpgradeFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPerformUpgradeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/upgrades] performUpgrade", response, response.Code())
	}
}

// NewPerformUpgradeOK creates a PerformUpgradeOK with default headers values
func NewPerformUpgradeOK() *PerformUpgradeOK {
	return &PerformUpgradeOK{}
}

/*
PerformUpgradeOK describes a response with status code 200, with default header values.

OK
*/
type PerformUpgradeOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this perform upgrade o k response has a 2xx status code
func (o *PerformUpgradeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this perform upgrade o k response has a 3xx status code
func (o *PerformUpgradeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this perform upgrade o k response has a 4xx status code
func (o *PerformUpgradeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this perform upgrade o k response has a 5xx status code
func (o *PerformUpgradeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this perform upgrade o k response a status code equal to that given
func (o *PerformUpgradeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the perform upgrade o k response
func (o *PerformUpgradeOK) Code() int {
	return 200
}

func (o *PerformUpgradeOK) Error() string {
	return fmt.Sprintf("[POST /v1/upgrades][%d] performUpgradeOK  %+v", 200, o.Payload)
}

func (o *PerformUpgradeOK) String() string {
	return fmt.Sprintf("[POST /v1/upgrades][%d] performUpgradeOK  %+v", 200, o.Payload)
}

func (o *PerformUpgradeOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *PerformUpgradeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPerformUpgradeAccepted creates a PerformUpgradeAccepted with default headers values
func NewPerformUpgradeAccepted() *PerformUpgradeAccepted {
	return &PerformUpgradeAccepted{}
}

/*
PerformUpgradeAccepted describes a response with status code 202, with default header values.

Accepted
*/
type PerformUpgradeAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this perform upgrade accepted response has a 2xx status code
func (o *PerformUpgradeAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this perform upgrade accepted response has a 3xx status code
func (o *PerformUpgradeAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this perform upgrade accepted response has a 4xx status code
func (o *PerformUpgradeAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this perform upgrade accepted response has a 5xx status code
func (o *PerformUpgradeAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this perform upgrade accepted response a status code equal to that given
func (o *PerformUpgradeAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the perform upgrade accepted response
func (o *PerformUpgradeAccepted) Code() int {
	return 202
}

func (o *PerformUpgradeAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/upgrades][%d] performUpgradeAccepted  %+v", 202, o.Payload)
}

func (o *PerformUpgradeAccepted) String() string {
	return fmt.Sprintf("[POST /v1/upgrades][%d] performUpgradeAccepted  %+v", 202, o.Payload)
}

func (o *PerformUpgradeAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *PerformUpgradeAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPerformUpgradeBadRequest creates a PerformUpgradeBadRequest with default headers values
func NewPerformUpgradeBadRequest() *PerformUpgradeBadRequest {
	return &PerformUpgradeBadRequest{}
}

/*
PerformUpgradeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PerformUpgradeBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this perform upgrade bad request response has a 2xx status code
func (o *PerformUpgradeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this perform upgrade bad request response has a 3xx status code
func (o *PerformUpgradeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this perform upgrade bad request response has a 4xx status code
func (o *PerformUpgradeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this perform upgrade bad request response has a 5xx status code
func (o *PerformUpgradeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this perform upgrade bad request response a status code equal to that given
func (o *PerformUpgradeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the perform upgrade bad request response
func (o *PerformUpgradeBadRequest) Code() int {
	return 400
}

func (o *PerformUpgradeBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/upgrades][%d] performUpgradeBadRequest  %+v", 400, o.Payload)
}

func (o *PerformUpgradeBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/upgrades][%d] performUpgradeBadRequest  %+v", 400, o.Payload)
}

func (o *PerformUpgradeBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PerformUpgradeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPerformUpgradeForbidden creates a PerformUpgradeForbidden with default headers values
func NewPerformUpgradeForbidden() *PerformUpgradeForbidden {
	return &PerformUpgradeForbidden{}
}

/*
PerformUpgradeForbidden describes a response with status code 403, with default header values.

Operation not allowed
*/
type PerformUpgradeForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this perform upgrade forbidden response has a 2xx status code
func (o *PerformUpgradeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this perform upgrade forbidden response has a 3xx status code
func (o *PerformUpgradeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this perform upgrade forbidden response has a 4xx status code
func (o *PerformUpgradeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this perform upgrade forbidden response has a 5xx status code
func (o *PerformUpgradeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this perform upgrade forbidden response a status code equal to that given
func (o *PerformUpgradeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the perform upgrade forbidden response
func (o *PerformUpgradeForbidden) Code() int {
	return 403
}

func (o *PerformUpgradeForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/upgrades][%d] performUpgradeForbidden  %+v", 403, o.Payload)
}

func (o *PerformUpgradeForbidden) String() string {
	return fmt.Sprintf("[POST /v1/upgrades][%d] performUpgradeForbidden  %+v", 403, o.Payload)
}

func (o *PerformUpgradeForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PerformUpgradeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPerformUpgradeFailedDependency creates a PerformUpgradeFailedDependency with default headers values
func NewPerformUpgradeFailedDependency() *PerformUpgradeFailedDependency {
	return &PerformUpgradeFailedDependency{}
}

/*
PerformUpgradeFailedDependency describes a response with status code 424, with default header values.

Failed Dependency
*/
type PerformUpgradeFailedDependency struct {
	Payload *models.Error
}

// IsSuccess returns true when this perform upgrade failed dependency response has a 2xx status code
func (o *PerformUpgradeFailedDependency) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this perform upgrade failed dependency response has a 3xx status code
func (o *PerformUpgradeFailedDependency) IsRedirect() bool {
	return false
}

// IsClientError returns true when this perform upgrade failed dependency response has a 4xx status code
func (o *PerformUpgradeFailedDependency) IsClientError() bool {
	return true
}

// IsServerError returns true when this perform upgrade failed dependency response has a 5xx status code
func (o *PerformUpgradeFailedDependency) IsServerError() bool {
	return false
}

// IsCode returns true when this perform upgrade failed dependency response a status code equal to that given
func (o *PerformUpgradeFailedDependency) IsCode(code int) bool {
	return code == 424
}

// Code gets the status code for the perform upgrade failed dependency response
func (o *PerformUpgradeFailedDependency) Code() int {
	return 424
}

func (o *PerformUpgradeFailedDependency) Error() string {
	return fmt.Sprintf("[POST /v1/upgrades][%d] performUpgradeFailedDependency  %+v", 424, o.Payload)
}

func (o *PerformUpgradeFailedDependency) String() string {
	return fmt.Sprintf("[POST /v1/upgrades][%d] performUpgradeFailedDependency  %+v", 424, o.Payload)
}

func (o *PerformUpgradeFailedDependency) GetPayload() *models.Error {
	return o.Payload
}

func (o *PerformUpgradeFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPerformUpgradeInternalServerError creates a PerformUpgradeInternalServerError with default headers values
func NewPerformUpgradeInternalServerError() *PerformUpgradeInternalServerError {
	return &PerformUpgradeInternalServerError{}
}

/*
PerformUpgradeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PerformUpgradeInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this perform upgrade internal server error response has a 2xx status code
func (o *PerformUpgradeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this perform upgrade internal server error response has a 3xx status code
func (o *PerformUpgradeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this perform upgrade internal server error response has a 4xx status code
func (o *PerformUpgradeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this perform upgrade internal server error response has a 5xx status code
func (o *PerformUpgradeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this perform upgrade internal server error response a status code equal to that given
func (o *PerformUpgradeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the perform upgrade internal server error response
func (o *PerformUpgradeInternalServerError) Code() int {
	return 500
}

func (o *PerformUpgradeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/upgrades][%d] performUpgradeInternalServerError  %+v", 500, o.Payload)
}

func (o *PerformUpgradeInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/upgrades][%d] performUpgradeInternalServerError  %+v", 500, o.Payload)
}

func (o *PerformUpgradeInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PerformUpgradeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
