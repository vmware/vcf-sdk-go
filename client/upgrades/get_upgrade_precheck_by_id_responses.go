// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package upgrades

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetUpgradePrecheckByIDReader is a Reader for the GetUpgradePrecheckByID structure.
type GetUpgradePrecheckByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUpgradePrecheckByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUpgradePrecheckByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUpgradePrecheckByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUpgradePrecheckByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUpgradePrecheckByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/upgrades/{upgradeId}/prechecks/{precheckId}] getUpgradePrecheckByID", response, response.Code())
	}
}

// NewGetUpgradePrecheckByIDOK creates a GetUpgradePrecheckByIDOK with default headers values
func NewGetUpgradePrecheckByIDOK() *GetUpgradePrecheckByIDOK {
	return &GetUpgradePrecheckByIDOK{}
}

/*
GetUpgradePrecheckByIDOK describes a response with status code 200, with default header values.

Ok
*/
type GetUpgradePrecheckByIDOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this get upgrade precheck by Id o k response has a 2xx status code
func (o *GetUpgradePrecheckByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get upgrade precheck by Id o k response has a 3xx status code
func (o *GetUpgradePrecheckByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get upgrade precheck by Id o k response has a 4xx status code
func (o *GetUpgradePrecheckByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get upgrade precheck by Id o k response has a 5xx status code
func (o *GetUpgradePrecheckByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get upgrade precheck by Id o k response a status code equal to that given
func (o *GetUpgradePrecheckByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get upgrade precheck by Id o k response
func (o *GetUpgradePrecheckByIDOK) Code() int {
	return 200
}

func (o *GetUpgradePrecheckByIDOK) Error() string {
	return fmt.Sprintf("[GET /v1/upgrades/{upgradeId}/prechecks/{precheckId}][%d] getUpgradePrecheckByIdOK  %+v", 200, o.Payload)
}

func (o *GetUpgradePrecheckByIDOK) String() string {
	return fmt.Sprintf("[GET /v1/upgrades/{upgradeId}/prechecks/{precheckId}][%d] getUpgradePrecheckByIdOK  %+v", 200, o.Payload)
}

func (o *GetUpgradePrecheckByIDOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *GetUpgradePrecheckByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUpgradePrecheckByIDBadRequest creates a GetUpgradePrecheckByIDBadRequest with default headers values
func NewGetUpgradePrecheckByIDBadRequest() *GetUpgradePrecheckByIDBadRequest {
	return &GetUpgradePrecheckByIDBadRequest{}
}

/*
GetUpgradePrecheckByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetUpgradePrecheckByIDBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get upgrade precheck by Id bad request response has a 2xx status code
func (o *GetUpgradePrecheckByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get upgrade precheck by Id bad request response has a 3xx status code
func (o *GetUpgradePrecheckByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get upgrade precheck by Id bad request response has a 4xx status code
func (o *GetUpgradePrecheckByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get upgrade precheck by Id bad request response has a 5xx status code
func (o *GetUpgradePrecheckByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get upgrade precheck by Id bad request response a status code equal to that given
func (o *GetUpgradePrecheckByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get upgrade precheck by Id bad request response
func (o *GetUpgradePrecheckByIDBadRequest) Code() int {
	return 400
}

func (o *GetUpgradePrecheckByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/upgrades/{upgradeId}/prechecks/{precheckId}][%d] getUpgradePrecheckByIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetUpgradePrecheckByIDBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/upgrades/{upgradeId}/prechecks/{precheckId}][%d] getUpgradePrecheckByIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetUpgradePrecheckByIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUpgradePrecheckByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUpgradePrecheckByIDForbidden creates a GetUpgradePrecheckByIDForbidden with default headers values
func NewGetUpgradePrecheckByIDForbidden() *GetUpgradePrecheckByIDForbidden {
	return &GetUpgradePrecheckByIDForbidden{}
}

/*
GetUpgradePrecheckByIDForbidden describes a response with status code 403, with default header values.

Operation not allowed
*/
type GetUpgradePrecheckByIDForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get upgrade precheck by Id forbidden response has a 2xx status code
func (o *GetUpgradePrecheckByIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get upgrade precheck by Id forbidden response has a 3xx status code
func (o *GetUpgradePrecheckByIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get upgrade precheck by Id forbidden response has a 4xx status code
func (o *GetUpgradePrecheckByIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get upgrade precheck by Id forbidden response has a 5xx status code
func (o *GetUpgradePrecheckByIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get upgrade precheck by Id forbidden response a status code equal to that given
func (o *GetUpgradePrecheckByIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get upgrade precheck by Id forbidden response
func (o *GetUpgradePrecheckByIDForbidden) Code() int {
	return 403
}

func (o *GetUpgradePrecheckByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/upgrades/{upgradeId}/prechecks/{precheckId}][%d] getUpgradePrecheckByIdForbidden  %+v", 403, o.Payload)
}

func (o *GetUpgradePrecheckByIDForbidden) String() string {
	return fmt.Sprintf("[GET /v1/upgrades/{upgradeId}/prechecks/{precheckId}][%d] getUpgradePrecheckByIdForbidden  %+v", 403, o.Payload)
}

func (o *GetUpgradePrecheckByIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUpgradePrecheckByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUpgradePrecheckByIDInternalServerError creates a GetUpgradePrecheckByIDInternalServerError with default headers values
func NewGetUpgradePrecheckByIDInternalServerError() *GetUpgradePrecheckByIDInternalServerError {
	return &GetUpgradePrecheckByIDInternalServerError{}
}

/*
GetUpgradePrecheckByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetUpgradePrecheckByIDInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get upgrade precheck by Id internal server error response has a 2xx status code
func (o *GetUpgradePrecheckByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get upgrade precheck by Id internal server error response has a 3xx status code
func (o *GetUpgradePrecheckByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get upgrade precheck by Id internal server error response has a 4xx status code
func (o *GetUpgradePrecheckByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get upgrade precheck by Id internal server error response has a 5xx status code
func (o *GetUpgradePrecheckByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get upgrade precheck by Id internal server error response a status code equal to that given
func (o *GetUpgradePrecheckByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get upgrade precheck by Id internal server error response
func (o *GetUpgradePrecheckByIDInternalServerError) Code() int {
	return 500
}

func (o *GetUpgradePrecheckByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/upgrades/{upgradeId}/prechecks/{precheckId}][%d] getUpgradePrecheckByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUpgradePrecheckByIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/upgrades/{upgradeId}/prechecks/{precheckId}][%d] getUpgradePrecheckByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUpgradePrecheckByIDInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUpgradePrecheckByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
