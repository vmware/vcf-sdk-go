// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package upgrades

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new upgrades API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for upgrades API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetUpgradeByID(params *GetUpgradeByIDParams, opts ...ClientOption) (*GetUpgradeByIDOK, error)

	GetUpgradePrecheckByID(params *GetUpgradePrecheckByIDParams, opts ...ClientOption) (*GetUpgradePrecheckByIDOK, error)

	GetUpgrades(params *GetUpgradesParams, opts ...ClientOption) (*GetUpgradesOK, error)

	PerformUpgrade(params *PerformUpgradeParams, opts ...ClientOption) (*PerformUpgradeOK, *PerformUpgradeAccepted, error)

	StartUpgradePrecheck(params *StartUpgradePrecheckParams, opts ...ClientOption) (*StartUpgradePrecheckOK, *StartUpgradePrecheckAccepted, error)

	UpdateUpgradeSchedule(params *UpdateUpgradeScheduleParams, opts ...ClientOption) (*UpdateUpgradeScheduleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetUpgradeByID retrieves an upgrade by ID

Retrieve an upgrade by ID
*/
func (a *Client) GetUpgradeByID(params *GetUpgradeByIDParams, opts ...ClientOption) (*GetUpgradeByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpgradeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUpgradeById",
		Method:             "GET",
		PathPattern:        "/v1/upgrades/{upgradeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUpgradeByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUpgradeByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUpgradeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUpgradePrecheckByID retrieves an upgrade precheck task by ID

Gets upgrade precheck details
*/
func (a *Client) GetUpgradePrecheckByID(params *GetUpgradePrecheckByIDParams, opts ...ClientOption) (*GetUpgradePrecheckByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpgradePrecheckByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUpgradePrecheckByID",
		Method:             "GET",
		PathPattern:        "/v1/upgrades/{upgradeId}/prechecks/{precheckId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUpgradePrecheckByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUpgradePrecheckByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUpgradePrecheckByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUpgrades retrieves a list of upgrades

Retrieve a list of upgrades
*/
func (a *Client) GetUpgrades(params *GetUpgradesParams, opts ...ClientOption) (*GetUpgradesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpgradesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUpgrades",
		Method:             "GET",
		PathPattern:        "/v1/upgrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUpgradesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUpgradesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUpgrades: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformUpgrade starts an upgrade operation

Schedule/Trigger Upgrade of a Resource. Ex: Resource can be DOMAIN, CLUSTER, UNMANAGED_HOST etc. Performing upgrades are supported on VMware Cloud Foundation 3.5 BOM resources and above.
*/
func (a *Client) PerformUpgrade(params *PerformUpgradeParams, opts ...ClientOption) (*PerformUpgradeOK, *PerformUpgradeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformUpgradeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "performUpgrade",
		Method:             "POST",
		PathPattern:        "/v1/upgrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformUpgradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PerformUpgradeOK:
		return value, nil, nil
	case *PerformUpgradeAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgrades: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartUpgradePrecheck starts an upgrade precheck operation

Perform Upgrade Prechecks
*/
func (a *Client) StartUpgradePrecheck(params *StartUpgradePrecheckParams, opts ...ClientOption) (*StartUpgradePrecheckOK, *StartUpgradePrecheckAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartUpgradePrecheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startUpgradePrecheck",
		Method:             "POST",
		PathPattern:        "/v1/upgrades/{upgradeId}/prechecks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartUpgradePrecheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StartUpgradePrecheckOK:
		return value, nil, nil
	case *StartUpgradePrecheckAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgrades: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUpgradeSchedule changes a d r a f t upgrade to a s c h e d u l e d state

Commit/Reschedule an existing upgrade. It moves the upgrade from DRAFT state to SCHEDULED state and/or changes the upgrade scheduled date/time.
*/
func (a *Client) UpdateUpgradeSchedule(params *UpdateUpgradeScheduleParams, opts ...ClientOption) (*UpdateUpgradeScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUpgradeScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUpgradeSchedule",
		Method:             "PATCH",
		PathPattern:        "/v1/upgrades/{upgradeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUpgradeScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUpgradeScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUpgradeSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
