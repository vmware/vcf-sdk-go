// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package upgrades

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// NewUpdateUpgradeScheduleParams creates a new UpdateUpgradeScheduleParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateUpgradeScheduleParams() *UpdateUpgradeScheduleParams {
	return &UpdateUpgradeScheduleParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateUpgradeScheduleParamsWithTimeout creates a new UpdateUpgradeScheduleParams object
// with the ability to set a timeout on a request.
func NewUpdateUpgradeScheduleParamsWithTimeout(timeout time.Duration) *UpdateUpgradeScheduleParams {
	return &UpdateUpgradeScheduleParams{
		timeout: timeout,
	}
}

// NewUpdateUpgradeScheduleParamsWithContext creates a new UpdateUpgradeScheduleParams object
// with the ability to set a context for a request.
func NewUpdateUpgradeScheduleParamsWithContext(ctx context.Context) *UpdateUpgradeScheduleParams {
	return &UpdateUpgradeScheduleParams{
		Context: ctx,
	}
}

// NewUpdateUpgradeScheduleParamsWithHTTPClient creates a new UpdateUpgradeScheduleParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateUpgradeScheduleParamsWithHTTPClient(client *http.Client) *UpdateUpgradeScheduleParams {
	return &UpdateUpgradeScheduleParams{
		HTTPClient: client,
	}
}

/*
UpdateUpgradeScheduleParams contains all the parameters to send to the API endpoint

	for the update upgrade schedule operation.

	Typically these are written to a http.Request.
*/
type UpdateUpgradeScheduleParams struct {

	/* UpgradeCommitSpec.

	   Upgrade Commit/Reschedule Specification
	*/
	UpgradeCommitSpec *models.UpgradeCommitSpec

	/* UpgradeID.

	   upgradeId
	*/
	UpgradeID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update upgrade schedule params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateUpgradeScheduleParams) WithDefaults() *UpdateUpgradeScheduleParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update upgrade schedule params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateUpgradeScheduleParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update upgrade schedule params
func (o *UpdateUpgradeScheduleParams) WithTimeout(timeout time.Duration) *UpdateUpgradeScheduleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update upgrade schedule params
func (o *UpdateUpgradeScheduleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update upgrade schedule params
func (o *UpdateUpgradeScheduleParams) WithContext(ctx context.Context) *UpdateUpgradeScheduleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update upgrade schedule params
func (o *UpdateUpgradeScheduleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update upgrade schedule params
func (o *UpdateUpgradeScheduleParams) WithHTTPClient(client *http.Client) *UpdateUpgradeScheduleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update upgrade schedule params
func (o *UpdateUpgradeScheduleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUpgradeCommitSpec adds the upgradeCommitSpec to the update upgrade schedule params
func (o *UpdateUpgradeScheduleParams) WithUpgradeCommitSpec(upgradeCommitSpec *models.UpgradeCommitSpec) *UpdateUpgradeScheduleParams {
	o.SetUpgradeCommitSpec(upgradeCommitSpec)
	return o
}

// SetUpgradeCommitSpec adds the upgradeCommitSpec to the update upgrade schedule params
func (o *UpdateUpgradeScheduleParams) SetUpgradeCommitSpec(upgradeCommitSpec *models.UpgradeCommitSpec) {
	o.UpgradeCommitSpec = upgradeCommitSpec
}

// WithUpgradeID adds the upgradeID to the update upgrade schedule params
func (o *UpdateUpgradeScheduleParams) WithUpgradeID(upgradeID string) *UpdateUpgradeScheduleParams {
	o.SetUpgradeID(upgradeID)
	return o
}

// SetUpgradeID adds the upgradeId to the update upgrade schedule params
func (o *UpdateUpgradeScheduleParams) SetUpgradeID(upgradeID string) {
	o.UpgradeID = upgradeID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateUpgradeScheduleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.UpgradeCommitSpec != nil {
		if err := r.SetBodyParam(o.UpgradeCommitSpec); err != nil {
			return err
		}
	}

	// path param upgradeId
	if err := r.SetPathParam("upgradeId", o.UpgradeID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
