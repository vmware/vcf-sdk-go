// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package upgrades

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateUpgradeScheduleReader is a Reader for the UpdateUpgradeSchedule structure.
type UpdateUpgradeScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUpgradeScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUpgradeScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdateUpgradeScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateUpgradeScheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/upgrades/{upgradeId}] updateUpgradeSchedule", response, response.Code())
	}
}

// NewUpdateUpgradeScheduleOK creates a UpdateUpgradeScheduleOK with default headers values
func NewUpdateUpgradeScheduleOK() *UpdateUpgradeScheduleOK {
	return &UpdateUpgradeScheduleOK{}
}

/*
UpdateUpgradeScheduleOK describes a response with status code 200, with default header values.

Ok
*/
type UpdateUpgradeScheduleOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this update upgrade schedule o k response has a 2xx status code
func (o *UpdateUpgradeScheduleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update upgrade schedule o k response has a 3xx status code
func (o *UpdateUpgradeScheduleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update upgrade schedule o k response has a 4xx status code
func (o *UpdateUpgradeScheduleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update upgrade schedule o k response has a 5xx status code
func (o *UpdateUpgradeScheduleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update upgrade schedule o k response a status code equal to that given
func (o *UpdateUpgradeScheduleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update upgrade schedule o k response
func (o *UpdateUpgradeScheduleOK) Code() int {
	return 200
}

func (o *UpdateUpgradeScheduleOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/upgrades/{upgradeId}][%d] updateUpgradeScheduleOK  %+v", 200, o.Payload)
}

func (o *UpdateUpgradeScheduleOK) String() string {
	return fmt.Sprintf("[PATCH /v1/upgrades/{upgradeId}][%d] updateUpgradeScheduleOK  %+v", 200, o.Payload)
}

func (o *UpdateUpgradeScheduleOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *UpdateUpgradeScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUpgradeScheduleNotFound creates a UpdateUpgradeScheduleNotFound with default headers values
func NewUpdateUpgradeScheduleNotFound() *UpdateUpgradeScheduleNotFound {
	return &UpdateUpgradeScheduleNotFound{}
}

/*
UpdateUpgradeScheduleNotFound describes a response with status code 404, with default header values.

Upgrade not found
*/
type UpdateUpgradeScheduleNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update upgrade schedule not found response has a 2xx status code
func (o *UpdateUpgradeScheduleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update upgrade schedule not found response has a 3xx status code
func (o *UpdateUpgradeScheduleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update upgrade schedule not found response has a 4xx status code
func (o *UpdateUpgradeScheduleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update upgrade schedule not found response has a 5xx status code
func (o *UpdateUpgradeScheduleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update upgrade schedule not found response a status code equal to that given
func (o *UpdateUpgradeScheduleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update upgrade schedule not found response
func (o *UpdateUpgradeScheduleNotFound) Code() int {
	return 404
}

func (o *UpdateUpgradeScheduleNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/upgrades/{upgradeId}][%d] updateUpgradeScheduleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUpgradeScheduleNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/upgrades/{upgradeId}][%d] updateUpgradeScheduleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUpgradeScheduleNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUpgradeScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUpgradeScheduleInternalServerError creates a UpdateUpgradeScheduleInternalServerError with default headers values
func NewUpdateUpgradeScheduleInternalServerError() *UpdateUpgradeScheduleInternalServerError {
	return &UpdateUpgradeScheduleInternalServerError{}
}

/*
UpdateUpgradeScheduleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateUpgradeScheduleInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update upgrade schedule internal server error response has a 2xx status code
func (o *UpdateUpgradeScheduleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update upgrade schedule internal server error response has a 3xx status code
func (o *UpdateUpgradeScheduleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update upgrade schedule internal server error response has a 4xx status code
func (o *UpdateUpgradeScheduleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update upgrade schedule internal server error response has a 5xx status code
func (o *UpdateUpgradeScheduleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update upgrade schedule internal server error response a status code equal to that given
func (o *UpdateUpgradeScheduleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update upgrade schedule internal server error response
func (o *UpdateUpgradeScheduleInternalServerError) Code() int {
	return 500
}

func (o *UpdateUpgradeScheduleInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/upgrades/{upgradeId}][%d] updateUpgradeScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateUpgradeScheduleInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/upgrades/{upgradeId}][%d] updateUpgradeScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateUpgradeScheduleInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUpgradeScheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
