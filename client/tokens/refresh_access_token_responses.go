// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// RefreshAccessTokenReader is a Reader for the RefreshAccessToken structure.
type RefreshAccessTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefreshAccessTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRefreshAccessTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRefreshAccessTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRefreshAccessTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRefreshAccessTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/tokens/access-token/refresh] refreshAccessToken", response, response.Code())
	}
}

// NewRefreshAccessTokenOK creates a RefreshAccessTokenOK with default headers values
func NewRefreshAccessTokenOK() *RefreshAccessTokenOK {
	return &RefreshAccessTokenOK{}
}

/*
RefreshAccessTokenOK describes a response with status code 200, with default header values.

OK
*/
type RefreshAccessTokenOK struct {
	Payload string
}

// IsSuccess returns true when this refresh access token o k response has a 2xx status code
func (o *RefreshAccessTokenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this refresh access token o k response has a 3xx status code
func (o *RefreshAccessTokenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh access token o k response has a 4xx status code
func (o *RefreshAccessTokenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh access token o k response has a 5xx status code
func (o *RefreshAccessTokenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh access token o k response a status code equal to that given
func (o *RefreshAccessTokenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the refresh access token o k response
func (o *RefreshAccessTokenOK) Code() int {
	return 200
}

func (o *RefreshAccessTokenOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/tokens/access-token/refresh][%d] refreshAccessTokenOK  %+v", 200, o.Payload)
}

func (o *RefreshAccessTokenOK) String() string {
	return fmt.Sprintf("[PATCH /v1/tokens/access-token/refresh][%d] refreshAccessTokenOK  %+v", 200, o.Payload)
}

func (o *RefreshAccessTokenOK) GetPayload() string {
	return o.Payload
}

func (o *RefreshAccessTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshAccessTokenBadRequest creates a RefreshAccessTokenBadRequest with default headers values
func NewRefreshAccessTokenBadRequest() *RefreshAccessTokenBadRequest {
	return &RefreshAccessTokenBadRequest{}
}

/*
RefreshAccessTokenBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RefreshAccessTokenBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this refresh access token bad request response has a 2xx status code
func (o *RefreshAccessTokenBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh access token bad request response has a 3xx status code
func (o *RefreshAccessTokenBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh access token bad request response has a 4xx status code
func (o *RefreshAccessTokenBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh access token bad request response has a 5xx status code
func (o *RefreshAccessTokenBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh access token bad request response a status code equal to that given
func (o *RefreshAccessTokenBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the refresh access token bad request response
func (o *RefreshAccessTokenBadRequest) Code() int {
	return 400
}

func (o *RefreshAccessTokenBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/tokens/access-token/refresh][%d] refreshAccessTokenBadRequest  %+v", 400, o.Payload)
}

func (o *RefreshAccessTokenBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/tokens/access-token/refresh][%d] refreshAccessTokenBadRequest  %+v", 400, o.Payload)
}

func (o *RefreshAccessTokenBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RefreshAccessTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshAccessTokenNotFound creates a RefreshAccessTokenNotFound with default headers values
func NewRefreshAccessTokenNotFound() *RefreshAccessTokenNotFound {
	return &RefreshAccessTokenNotFound{}
}

/*
RefreshAccessTokenNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RefreshAccessTokenNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this refresh access token not found response has a 2xx status code
func (o *RefreshAccessTokenNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh access token not found response has a 3xx status code
func (o *RefreshAccessTokenNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh access token not found response has a 4xx status code
func (o *RefreshAccessTokenNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh access token not found response has a 5xx status code
func (o *RefreshAccessTokenNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh access token not found response a status code equal to that given
func (o *RefreshAccessTokenNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the refresh access token not found response
func (o *RefreshAccessTokenNotFound) Code() int {
	return 404
}

func (o *RefreshAccessTokenNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/tokens/access-token/refresh][%d] refreshAccessTokenNotFound  %+v", 404, o.Payload)
}

func (o *RefreshAccessTokenNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/tokens/access-token/refresh][%d] refreshAccessTokenNotFound  %+v", 404, o.Payload)
}

func (o *RefreshAccessTokenNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RefreshAccessTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshAccessTokenInternalServerError creates a RefreshAccessTokenInternalServerError with default headers values
func NewRefreshAccessTokenInternalServerError() *RefreshAccessTokenInternalServerError {
	return &RefreshAccessTokenInternalServerError{}
}

/*
RefreshAccessTokenInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RefreshAccessTokenInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this refresh access token internal server error response has a 2xx status code
func (o *RefreshAccessTokenInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh access token internal server error response has a 3xx status code
func (o *RefreshAccessTokenInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh access token internal server error response has a 4xx status code
func (o *RefreshAccessTokenInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh access token internal server error response has a 5xx status code
func (o *RefreshAccessTokenInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this refresh access token internal server error response a status code equal to that given
func (o *RefreshAccessTokenInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the refresh access token internal server error response
func (o *RefreshAccessTokenInternalServerError) Code() int {
	return 500
}

func (o *RefreshAccessTokenInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/tokens/access-token/refresh][%d] refreshAccessTokenInternalServerError  %+v", 500, o.Payload)
}

func (o *RefreshAccessTokenInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/tokens/access-token/refresh][%d] refreshAccessTokenInternalServerError  %+v", 500, o.Payload)
}

func (o *RefreshAccessTokenInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RefreshAccessTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
