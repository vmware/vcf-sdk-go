// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package vasa_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// RemoveVasaProviderStorageContainerReader is a Reader for the RemoveVasaProviderStorageContainer structure.
type RemoveVasaProviderStorageContainerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveVasaProviderStorageContainerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRemoveVasaProviderStorageContainerNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveVasaProviderStorageContainerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveVasaProviderStorageContainerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveVasaProviderStorageContainerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/vasa-providers/{id}/storage-containers/{storageContainerId}] removeVasaProviderStorageContainer", response, response.Code())
	}
}

// NewRemoveVasaProviderStorageContainerNoContent creates a RemoveVasaProviderStorageContainerNoContent with default headers values
func NewRemoveVasaProviderStorageContainerNoContent() *RemoveVasaProviderStorageContainerNoContent {
	return &RemoveVasaProviderStorageContainerNoContent{}
}

/*
RemoveVasaProviderStorageContainerNoContent describes a response with status code 204, with default header values.

No Content
*/
type RemoveVasaProviderStorageContainerNoContent struct {
}

// IsSuccess returns true when this remove vasa provider storage container no content response has a 2xx status code
func (o *RemoveVasaProviderStorageContainerNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove vasa provider storage container no content response has a 3xx status code
func (o *RemoveVasaProviderStorageContainerNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove vasa provider storage container no content response has a 4xx status code
func (o *RemoveVasaProviderStorageContainerNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove vasa provider storage container no content response has a 5xx status code
func (o *RemoveVasaProviderStorageContainerNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this remove vasa provider storage container no content response a status code equal to that given
func (o *RemoveVasaProviderStorageContainerNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the remove vasa provider storage container no content response
func (o *RemoveVasaProviderStorageContainerNoContent) Code() int {
	return 204
}

func (o *RemoveVasaProviderStorageContainerNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] removeVasaProviderStorageContainerNoContent ", 204)
}

func (o *RemoveVasaProviderStorageContainerNoContent) String() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] removeVasaProviderStorageContainerNoContent ", 204)
}

func (o *RemoveVasaProviderStorageContainerNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveVasaProviderStorageContainerBadRequest creates a RemoveVasaProviderStorageContainerBadRequest with default headers values
func NewRemoveVasaProviderStorageContainerBadRequest() *RemoveVasaProviderStorageContainerBadRequest {
	return &RemoveVasaProviderStorageContainerBadRequest{}
}

/*
RemoveVasaProviderStorageContainerBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RemoveVasaProviderStorageContainerBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove vasa provider storage container bad request response has a 2xx status code
func (o *RemoveVasaProviderStorageContainerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove vasa provider storage container bad request response has a 3xx status code
func (o *RemoveVasaProviderStorageContainerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove vasa provider storage container bad request response has a 4xx status code
func (o *RemoveVasaProviderStorageContainerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove vasa provider storage container bad request response has a 5xx status code
func (o *RemoveVasaProviderStorageContainerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove vasa provider storage container bad request response a status code equal to that given
func (o *RemoveVasaProviderStorageContainerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the remove vasa provider storage container bad request response
func (o *RemoveVasaProviderStorageContainerBadRequest) Code() int {
	return 400
}

func (o *RemoveVasaProviderStorageContainerBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] removeVasaProviderStorageContainerBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveVasaProviderStorageContainerBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] removeVasaProviderStorageContainerBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveVasaProviderStorageContainerBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveVasaProviderStorageContainerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVasaProviderStorageContainerNotFound creates a RemoveVasaProviderStorageContainerNotFound with default headers values
func NewRemoveVasaProviderStorageContainerNotFound() *RemoveVasaProviderStorageContainerNotFound {
	return &RemoveVasaProviderStorageContainerNotFound{}
}

/*
RemoveVasaProviderStorageContainerNotFound describes a response with status code 404, with default header values.

Storage container not found
*/
type RemoveVasaProviderStorageContainerNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove vasa provider storage container not found response has a 2xx status code
func (o *RemoveVasaProviderStorageContainerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove vasa provider storage container not found response has a 3xx status code
func (o *RemoveVasaProviderStorageContainerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove vasa provider storage container not found response has a 4xx status code
func (o *RemoveVasaProviderStorageContainerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove vasa provider storage container not found response has a 5xx status code
func (o *RemoveVasaProviderStorageContainerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this remove vasa provider storage container not found response a status code equal to that given
func (o *RemoveVasaProviderStorageContainerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the remove vasa provider storage container not found response
func (o *RemoveVasaProviderStorageContainerNotFound) Code() int {
	return 404
}

func (o *RemoveVasaProviderStorageContainerNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] removeVasaProviderStorageContainerNotFound  %+v", 404, o.Payload)
}

func (o *RemoveVasaProviderStorageContainerNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] removeVasaProviderStorageContainerNotFound  %+v", 404, o.Payload)
}

func (o *RemoveVasaProviderStorageContainerNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveVasaProviderStorageContainerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVasaProviderStorageContainerInternalServerError creates a RemoveVasaProviderStorageContainerInternalServerError with default headers values
func NewRemoveVasaProviderStorageContainerInternalServerError() *RemoveVasaProviderStorageContainerInternalServerError {
	return &RemoveVasaProviderStorageContainerInternalServerError{}
}

/*
RemoveVasaProviderStorageContainerInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type RemoveVasaProviderStorageContainerInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove vasa provider storage container internal server error response has a 2xx status code
func (o *RemoveVasaProviderStorageContainerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove vasa provider storage container internal server error response has a 3xx status code
func (o *RemoveVasaProviderStorageContainerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove vasa provider storage container internal server error response has a 4xx status code
func (o *RemoveVasaProviderStorageContainerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove vasa provider storage container internal server error response has a 5xx status code
func (o *RemoveVasaProviderStorageContainerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remove vasa provider storage container internal server error response a status code equal to that given
func (o *RemoveVasaProviderStorageContainerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remove vasa provider storage container internal server error response
func (o *RemoveVasaProviderStorageContainerInternalServerError) Code() int {
	return 500
}

func (o *RemoveVasaProviderStorageContainerInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] removeVasaProviderStorageContainerInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveVasaProviderStorageContainerInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] removeVasaProviderStorageContainerInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveVasaProviderStorageContainerInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveVasaProviderStorageContainerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
