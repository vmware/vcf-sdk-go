// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package vasa_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetUsersOfVasaProviderReader is a Reader for the GetUsersOfVasaProvider structure.
type GetUsersOfVasaProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUsersOfVasaProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUsersOfVasaProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUsersOfVasaProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUsersOfVasaProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUsersOfVasaProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUsersOfVasaProviderOK creates a GetUsersOfVasaProviderOK with default headers values
func NewGetUsersOfVasaProviderOK() *GetUsersOfVasaProviderOK {
	return &GetUsersOfVasaProviderOK{}
}

/*
GetUsersOfVasaProviderOK describes a response with status code 200, with default header values.

Ok
*/
type GetUsersOfVasaProviderOK struct {
	Payload []*models.VasaUser
}

// IsSuccess returns true when this get users of vasa provider o k response has a 2xx status code
func (o *GetUsersOfVasaProviderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get users of vasa provider o k response has a 3xx status code
func (o *GetUsersOfVasaProviderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users of vasa provider o k response has a 4xx status code
func (o *GetUsersOfVasaProviderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get users of vasa provider o k response has a 5xx status code
func (o *GetUsersOfVasaProviderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get users of vasa provider o k response a status code equal to that given
func (o *GetUsersOfVasaProviderOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetUsersOfVasaProviderOK) Error() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderOK  %+v", 200, o.Payload)
}

func (o *GetUsersOfVasaProviderOK) String() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderOK  %+v", 200, o.Payload)
}

func (o *GetUsersOfVasaProviderOK) GetPayload() []*models.VasaUser {
	return o.Payload
}

func (o *GetUsersOfVasaProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersOfVasaProviderBadRequest creates a GetUsersOfVasaProviderBadRequest with default headers values
func NewGetUsersOfVasaProviderBadRequest() *GetUsersOfVasaProviderBadRequest {
	return &GetUsersOfVasaProviderBadRequest{}
}

/*
GetUsersOfVasaProviderBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetUsersOfVasaProviderBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get users of vasa provider bad request response has a 2xx status code
func (o *GetUsersOfVasaProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get users of vasa provider bad request response has a 3xx status code
func (o *GetUsersOfVasaProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users of vasa provider bad request response has a 4xx status code
func (o *GetUsersOfVasaProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get users of vasa provider bad request response has a 5xx status code
func (o *GetUsersOfVasaProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get users of vasa provider bad request response a status code equal to that given
func (o *GetUsersOfVasaProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetUsersOfVasaProviderBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderBadRequest  %+v", 400, o.Payload)
}

func (o *GetUsersOfVasaProviderBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderBadRequest  %+v", 400, o.Payload)
}

func (o *GetUsersOfVasaProviderBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUsersOfVasaProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersOfVasaProviderNotFound creates a GetUsersOfVasaProviderNotFound with default headers values
func NewGetUsersOfVasaProviderNotFound() *GetUsersOfVasaProviderNotFound {
	return &GetUsersOfVasaProviderNotFound{}
}

/*
GetUsersOfVasaProviderNotFound describes a response with status code 404, with default header values.

VASA Provider not found
*/
type GetUsersOfVasaProviderNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get users of vasa provider not found response has a 2xx status code
func (o *GetUsersOfVasaProviderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get users of vasa provider not found response has a 3xx status code
func (o *GetUsersOfVasaProviderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users of vasa provider not found response has a 4xx status code
func (o *GetUsersOfVasaProviderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get users of vasa provider not found response has a 5xx status code
func (o *GetUsersOfVasaProviderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get users of vasa provider not found response a status code equal to that given
func (o *GetUsersOfVasaProviderNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetUsersOfVasaProviderNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderNotFound  %+v", 404, o.Payload)
}

func (o *GetUsersOfVasaProviderNotFound) String() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderNotFound  %+v", 404, o.Payload)
}

func (o *GetUsersOfVasaProviderNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUsersOfVasaProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersOfVasaProviderInternalServerError creates a GetUsersOfVasaProviderInternalServerError with default headers values
func NewGetUsersOfVasaProviderInternalServerError() *GetUsersOfVasaProviderInternalServerError {
	return &GetUsersOfVasaProviderInternalServerError{}
}

/*
GetUsersOfVasaProviderInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type GetUsersOfVasaProviderInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get users of vasa provider internal server error response has a 2xx status code
func (o *GetUsersOfVasaProviderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get users of vasa provider internal server error response has a 3xx status code
func (o *GetUsersOfVasaProviderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users of vasa provider internal server error response has a 4xx status code
func (o *GetUsersOfVasaProviderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get users of vasa provider internal server error response has a 5xx status code
func (o *GetUsersOfVasaProviderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get users of vasa provider internal server error response a status code equal to that given
func (o *GetUsersOfVasaProviderInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetUsersOfVasaProviderInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUsersOfVasaProviderInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUsersOfVasaProviderInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUsersOfVasaProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
