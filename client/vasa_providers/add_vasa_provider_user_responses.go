// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package vasa_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// AddVasaProviderUserReader is a Reader for the AddVasaProviderUser structure.
type AddVasaProviderUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddVasaProviderUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAddVasaProviderUserCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddVasaProviderUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddVasaProviderUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddVasaProviderUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/vasa-providers/{id}/users] addVasaProviderUser", response, response.Code())
	}
}

// NewAddVasaProviderUserCreated creates a AddVasaProviderUserCreated with default headers values
func NewAddVasaProviderUserCreated() *AddVasaProviderUserCreated {
	return &AddVasaProviderUserCreated{}
}

/*
AddVasaProviderUserCreated describes a response with status code 201, with default header values.

Created
*/
type AddVasaProviderUserCreated struct {
	Payload *models.VasaProvider
}

// IsSuccess returns true when this add vasa provider user created response has a 2xx status code
func (o *AddVasaProviderUserCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add vasa provider user created response has a 3xx status code
func (o *AddVasaProviderUserCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add vasa provider user created response has a 4xx status code
func (o *AddVasaProviderUserCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this add vasa provider user created response has a 5xx status code
func (o *AddVasaProviderUserCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this add vasa provider user created response a status code equal to that given
func (o *AddVasaProviderUserCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the add vasa provider user created response
func (o *AddVasaProviderUserCreated) Code() int {
	return 201
}

func (o *AddVasaProviderUserCreated) Error() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/{id}/users][%d] addVasaProviderUserCreated  %+v", 201, o.Payload)
}

func (o *AddVasaProviderUserCreated) String() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/{id}/users][%d] addVasaProviderUserCreated  %+v", 201, o.Payload)
}

func (o *AddVasaProviderUserCreated) GetPayload() *models.VasaProvider {
	return o.Payload
}

func (o *AddVasaProviderUserCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VasaProvider)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddVasaProviderUserBadRequest creates a AddVasaProviderUserBadRequest with default headers values
func NewAddVasaProviderUserBadRequest() *AddVasaProviderUserBadRequest {
	return &AddVasaProviderUserBadRequest{}
}

/*
AddVasaProviderUserBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddVasaProviderUserBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this add vasa provider user bad request response has a 2xx status code
func (o *AddVasaProviderUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add vasa provider user bad request response has a 3xx status code
func (o *AddVasaProviderUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add vasa provider user bad request response has a 4xx status code
func (o *AddVasaProviderUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add vasa provider user bad request response has a 5xx status code
func (o *AddVasaProviderUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add vasa provider user bad request response a status code equal to that given
func (o *AddVasaProviderUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add vasa provider user bad request response
func (o *AddVasaProviderUserBadRequest) Code() int {
	return 400
}

func (o *AddVasaProviderUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/{id}/users][%d] addVasaProviderUserBadRequest  %+v", 400, o.Payload)
}

func (o *AddVasaProviderUserBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/{id}/users][%d] addVasaProviderUserBadRequest  %+v", 400, o.Payload)
}

func (o *AddVasaProviderUserBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddVasaProviderUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddVasaProviderUserNotFound creates a AddVasaProviderUserNotFound with default headers values
func NewAddVasaProviderUserNotFound() *AddVasaProviderUserNotFound {
	return &AddVasaProviderUserNotFound{}
}

/*
AddVasaProviderUserNotFound describes a response with status code 404, with default header values.

VASA Provider not found
*/
type AddVasaProviderUserNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this add vasa provider user not found response has a 2xx status code
func (o *AddVasaProviderUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add vasa provider user not found response has a 3xx status code
func (o *AddVasaProviderUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add vasa provider user not found response has a 4xx status code
func (o *AddVasaProviderUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add vasa provider user not found response has a 5xx status code
func (o *AddVasaProviderUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add vasa provider user not found response a status code equal to that given
func (o *AddVasaProviderUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add vasa provider user not found response
func (o *AddVasaProviderUserNotFound) Code() int {
	return 404
}

func (o *AddVasaProviderUserNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/{id}/users][%d] addVasaProviderUserNotFound  %+v", 404, o.Payload)
}

func (o *AddVasaProviderUserNotFound) String() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/{id}/users][%d] addVasaProviderUserNotFound  %+v", 404, o.Payload)
}

func (o *AddVasaProviderUserNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddVasaProviderUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddVasaProviderUserInternalServerError creates a AddVasaProviderUserInternalServerError with default headers values
func NewAddVasaProviderUserInternalServerError() *AddVasaProviderUserInternalServerError {
	return &AddVasaProviderUserInternalServerError{}
}

/*
AddVasaProviderUserInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type AddVasaProviderUserInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this add vasa provider user internal server error response has a 2xx status code
func (o *AddVasaProviderUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add vasa provider user internal server error response has a 3xx status code
func (o *AddVasaProviderUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add vasa provider user internal server error response has a 4xx status code
func (o *AddVasaProviderUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add vasa provider user internal server error response has a 5xx status code
func (o *AddVasaProviderUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add vasa provider user internal server error response a status code equal to that given
func (o *AddVasaProviderUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add vasa provider user internal server error response
func (o *AddVasaProviderUserInternalServerError) Code() int {
	return 500
}

func (o *AddVasaProviderUserInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/{id}/users][%d] addVasaProviderUserInternalServerError  %+v", 500, o.Payload)
}

func (o *AddVasaProviderUserInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/{id}/users][%d] addVasaProviderUserInternalServerError  %+v", 500, o.Payload)
}

func (o *AddVasaProviderUserInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddVasaProviderUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
