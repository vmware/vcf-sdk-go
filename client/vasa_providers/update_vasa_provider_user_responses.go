// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package vasa_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateVasaProviderUserReader is a Reader for the UpdateVasaProviderUser structure.
type UpdateVasaProviderUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVasaProviderUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVasaProviderUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVasaProviderUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVasaProviderUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVasaProviderUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/vasa-providers/{id}/users/{userId}] updateVasaProviderUser", response, response.Code())
	}
}

// NewUpdateVasaProviderUserOK creates a UpdateVasaProviderUserOK with default headers values
func NewUpdateVasaProviderUserOK() *UpdateVasaProviderUserOK {
	return &UpdateVasaProviderUserOK{}
}

/*
UpdateVasaProviderUserOK describes a response with status code 200, with default header values.

Ok
*/
type UpdateVasaProviderUserOK struct {
	Payload *models.VasaProvider
}

// IsSuccess returns true when this update vasa provider user o k response has a 2xx status code
func (o *UpdateVasaProviderUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update vasa provider user o k response has a 3xx status code
func (o *UpdateVasaProviderUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vasa provider user o k response has a 4xx status code
func (o *UpdateVasaProviderUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update vasa provider user o k response has a 5xx status code
func (o *UpdateVasaProviderUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update vasa provider user o k response a status code equal to that given
func (o *UpdateVasaProviderUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update vasa provider user o k response
func (o *UpdateVasaProviderUserOK) Code() int {
	return 200
}

func (o *UpdateVasaProviderUserOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateVasaProviderUserOK  %+v", 200, o.Payload)
}

func (o *UpdateVasaProviderUserOK) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateVasaProviderUserOK  %+v", 200, o.Payload)
}

func (o *UpdateVasaProviderUserOK) GetPayload() *models.VasaProvider {
	return o.Payload
}

func (o *UpdateVasaProviderUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VasaProvider)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVasaProviderUserBadRequest creates a UpdateVasaProviderUserBadRequest with default headers values
func NewUpdateVasaProviderUserBadRequest() *UpdateVasaProviderUserBadRequest {
	return &UpdateVasaProviderUserBadRequest{}
}

/*
UpdateVasaProviderUserBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateVasaProviderUserBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vasa provider user bad request response has a 2xx status code
func (o *UpdateVasaProviderUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vasa provider user bad request response has a 3xx status code
func (o *UpdateVasaProviderUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vasa provider user bad request response has a 4xx status code
func (o *UpdateVasaProviderUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update vasa provider user bad request response has a 5xx status code
func (o *UpdateVasaProviderUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update vasa provider user bad request response a status code equal to that given
func (o *UpdateVasaProviderUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update vasa provider user bad request response
func (o *UpdateVasaProviderUserBadRequest) Code() int {
	return 400
}

func (o *UpdateVasaProviderUserBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateVasaProviderUserBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVasaProviderUserBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateVasaProviderUserBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVasaProviderUserBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVasaProviderUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVasaProviderUserNotFound creates a UpdateVasaProviderUserNotFound with default headers values
func NewUpdateVasaProviderUserNotFound() *UpdateVasaProviderUserNotFound {
	return &UpdateVasaProviderUserNotFound{}
}

/*
UpdateVasaProviderUserNotFound describes a response with status code 404, with default header values.

User not found
*/
type UpdateVasaProviderUserNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vasa provider user not found response has a 2xx status code
func (o *UpdateVasaProviderUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vasa provider user not found response has a 3xx status code
func (o *UpdateVasaProviderUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vasa provider user not found response has a 4xx status code
func (o *UpdateVasaProviderUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update vasa provider user not found response has a 5xx status code
func (o *UpdateVasaProviderUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update vasa provider user not found response a status code equal to that given
func (o *UpdateVasaProviderUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update vasa provider user not found response
func (o *UpdateVasaProviderUserNotFound) Code() int {
	return 404
}

func (o *UpdateVasaProviderUserNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateVasaProviderUserNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVasaProviderUserNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateVasaProviderUserNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVasaProviderUserNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVasaProviderUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVasaProviderUserInternalServerError creates a UpdateVasaProviderUserInternalServerError with default headers values
func NewUpdateVasaProviderUserInternalServerError() *UpdateVasaProviderUserInternalServerError {
	return &UpdateVasaProviderUserInternalServerError{}
}

/*
UpdateVasaProviderUserInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type UpdateVasaProviderUserInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vasa provider user internal server error response has a 2xx status code
func (o *UpdateVasaProviderUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vasa provider user internal server error response has a 3xx status code
func (o *UpdateVasaProviderUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vasa provider user internal server error response has a 4xx status code
func (o *UpdateVasaProviderUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update vasa provider user internal server error response has a 5xx status code
func (o *UpdateVasaProviderUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update vasa provider user internal server error response a status code equal to that given
func (o *UpdateVasaProviderUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update vasa provider user internal server error response
func (o *UpdateVasaProviderUserInternalServerError) Code() int {
	return 500
}

func (o *UpdateVasaProviderUserInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateVasaProviderUserInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVasaProviderUserInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateVasaProviderUserInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVasaProviderUserInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVasaProviderUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
