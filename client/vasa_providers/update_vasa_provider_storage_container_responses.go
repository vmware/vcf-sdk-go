// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package vasa_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateVasaProviderStorageContainerReader is a Reader for the UpdateVasaProviderStorageContainer structure.
type UpdateVasaProviderStorageContainerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVasaProviderStorageContainerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVasaProviderStorageContainerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVasaProviderStorageContainerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVasaProviderStorageContainerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVasaProviderStorageContainerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/vasa-providers/{id}/storage-containers/{storageContainerId}] updateVasaProviderStorageContainer", response, response.Code())
	}
}

// NewUpdateVasaProviderStorageContainerOK creates a UpdateVasaProviderStorageContainerOK with default headers values
func NewUpdateVasaProviderStorageContainerOK() *UpdateVasaProviderStorageContainerOK {
	return &UpdateVasaProviderStorageContainerOK{}
}

/*
UpdateVasaProviderStorageContainerOK describes a response with status code 200, with default header values.

Ok
*/
type UpdateVasaProviderStorageContainerOK struct {
	Payload *models.VasaProvider
}

// IsSuccess returns true when this update vasa provider storage container o k response has a 2xx status code
func (o *UpdateVasaProviderStorageContainerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update vasa provider storage container o k response has a 3xx status code
func (o *UpdateVasaProviderStorageContainerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vasa provider storage container o k response has a 4xx status code
func (o *UpdateVasaProviderStorageContainerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update vasa provider storage container o k response has a 5xx status code
func (o *UpdateVasaProviderStorageContainerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update vasa provider storage container o k response a status code equal to that given
func (o *UpdateVasaProviderStorageContainerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update vasa provider storage container o k response
func (o *UpdateVasaProviderStorageContainerOK) Code() int {
	return 200
}

func (o *UpdateVasaProviderStorageContainerOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] updateVasaProviderStorageContainerOK  %+v", 200, o.Payload)
}

func (o *UpdateVasaProviderStorageContainerOK) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] updateVasaProviderStorageContainerOK  %+v", 200, o.Payload)
}

func (o *UpdateVasaProviderStorageContainerOK) GetPayload() *models.VasaProvider {
	return o.Payload
}

func (o *UpdateVasaProviderStorageContainerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VasaProvider)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVasaProviderStorageContainerBadRequest creates a UpdateVasaProviderStorageContainerBadRequest with default headers values
func NewUpdateVasaProviderStorageContainerBadRequest() *UpdateVasaProviderStorageContainerBadRequest {
	return &UpdateVasaProviderStorageContainerBadRequest{}
}

/*
UpdateVasaProviderStorageContainerBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateVasaProviderStorageContainerBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vasa provider storage container bad request response has a 2xx status code
func (o *UpdateVasaProviderStorageContainerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vasa provider storage container bad request response has a 3xx status code
func (o *UpdateVasaProviderStorageContainerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vasa provider storage container bad request response has a 4xx status code
func (o *UpdateVasaProviderStorageContainerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update vasa provider storage container bad request response has a 5xx status code
func (o *UpdateVasaProviderStorageContainerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update vasa provider storage container bad request response a status code equal to that given
func (o *UpdateVasaProviderStorageContainerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update vasa provider storage container bad request response
func (o *UpdateVasaProviderStorageContainerBadRequest) Code() int {
	return 400
}

func (o *UpdateVasaProviderStorageContainerBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] updateVasaProviderStorageContainerBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVasaProviderStorageContainerBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] updateVasaProviderStorageContainerBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVasaProviderStorageContainerBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVasaProviderStorageContainerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVasaProviderStorageContainerNotFound creates a UpdateVasaProviderStorageContainerNotFound with default headers values
func NewUpdateVasaProviderStorageContainerNotFound() *UpdateVasaProviderStorageContainerNotFound {
	return &UpdateVasaProviderStorageContainerNotFound{}
}

/*
UpdateVasaProviderStorageContainerNotFound describes a response with status code 404, with default header values.

Storage container not found
*/
type UpdateVasaProviderStorageContainerNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vasa provider storage container not found response has a 2xx status code
func (o *UpdateVasaProviderStorageContainerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vasa provider storage container not found response has a 3xx status code
func (o *UpdateVasaProviderStorageContainerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vasa provider storage container not found response has a 4xx status code
func (o *UpdateVasaProviderStorageContainerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update vasa provider storage container not found response has a 5xx status code
func (o *UpdateVasaProviderStorageContainerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update vasa provider storage container not found response a status code equal to that given
func (o *UpdateVasaProviderStorageContainerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update vasa provider storage container not found response
func (o *UpdateVasaProviderStorageContainerNotFound) Code() int {
	return 404
}

func (o *UpdateVasaProviderStorageContainerNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] updateVasaProviderStorageContainerNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVasaProviderStorageContainerNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] updateVasaProviderStorageContainerNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVasaProviderStorageContainerNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVasaProviderStorageContainerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVasaProviderStorageContainerInternalServerError creates a UpdateVasaProviderStorageContainerInternalServerError with default headers values
func NewUpdateVasaProviderStorageContainerInternalServerError() *UpdateVasaProviderStorageContainerInternalServerError {
	return &UpdateVasaProviderStorageContainerInternalServerError{}
}

/*
UpdateVasaProviderStorageContainerInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type UpdateVasaProviderStorageContainerInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vasa provider storage container internal server error response has a 2xx status code
func (o *UpdateVasaProviderStorageContainerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vasa provider storage container internal server error response has a 3xx status code
func (o *UpdateVasaProviderStorageContainerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vasa provider storage container internal server error response has a 4xx status code
func (o *UpdateVasaProviderStorageContainerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update vasa provider storage container internal server error response has a 5xx status code
func (o *UpdateVasaProviderStorageContainerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update vasa provider storage container internal server error response a status code equal to that given
func (o *UpdateVasaProviderStorageContainerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update vasa provider storage container internal server error response
func (o *UpdateVasaProviderStorageContainerInternalServerError) Code() int {
	return 500
}

func (o *UpdateVasaProviderStorageContainerInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] updateVasaProviderStorageContainerInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVasaProviderStorageContainerInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/storage-containers/{storageContainerId}][%d] updateVasaProviderStorageContainerInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVasaProviderStorageContainerInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVasaProviderStorageContainerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
