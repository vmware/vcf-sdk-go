// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package vasa_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateVasaProviderReader is a Reader for the UpdateVasaProvider structure.
type UpdateVasaProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVasaProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVasaProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVasaProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVasaProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVasaProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/vasa-providers/{id}] updateVasaProvider", response, response.Code())
	}
}

// NewUpdateVasaProviderOK creates a UpdateVasaProviderOK with default headers values
func NewUpdateVasaProviderOK() *UpdateVasaProviderOK {
	return &UpdateVasaProviderOK{}
}

/*
UpdateVasaProviderOK describes a response with status code 200, with default header values.

Ok
*/
type UpdateVasaProviderOK struct {
	Payload *models.VasaProvider
}

// IsSuccess returns true when this update vasa provider o k response has a 2xx status code
func (o *UpdateVasaProviderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update vasa provider o k response has a 3xx status code
func (o *UpdateVasaProviderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vasa provider o k response has a 4xx status code
func (o *UpdateVasaProviderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update vasa provider o k response has a 5xx status code
func (o *UpdateVasaProviderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update vasa provider o k response a status code equal to that given
func (o *UpdateVasaProviderOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update vasa provider o k response
func (o *UpdateVasaProviderOK) Code() int {
	return 200
}

func (o *UpdateVasaProviderOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}][%d] updateVasaProviderOK  %+v", 200, o.Payload)
}

func (o *UpdateVasaProviderOK) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}][%d] updateVasaProviderOK  %+v", 200, o.Payload)
}

func (o *UpdateVasaProviderOK) GetPayload() *models.VasaProvider {
	return o.Payload
}

func (o *UpdateVasaProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VasaProvider)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVasaProviderBadRequest creates a UpdateVasaProviderBadRequest with default headers values
func NewUpdateVasaProviderBadRequest() *UpdateVasaProviderBadRequest {
	return &UpdateVasaProviderBadRequest{}
}

/*
UpdateVasaProviderBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateVasaProviderBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vasa provider bad request response has a 2xx status code
func (o *UpdateVasaProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vasa provider bad request response has a 3xx status code
func (o *UpdateVasaProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vasa provider bad request response has a 4xx status code
func (o *UpdateVasaProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update vasa provider bad request response has a 5xx status code
func (o *UpdateVasaProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update vasa provider bad request response a status code equal to that given
func (o *UpdateVasaProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update vasa provider bad request response
func (o *UpdateVasaProviderBadRequest) Code() int {
	return 400
}

func (o *UpdateVasaProviderBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}][%d] updateVasaProviderBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVasaProviderBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}][%d] updateVasaProviderBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVasaProviderBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVasaProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVasaProviderNotFound creates a UpdateVasaProviderNotFound with default headers values
func NewUpdateVasaProviderNotFound() *UpdateVasaProviderNotFound {
	return &UpdateVasaProviderNotFound{}
}

/*
UpdateVasaProviderNotFound describes a response with status code 404, with default header values.

VASA Provider not found
*/
type UpdateVasaProviderNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vasa provider not found response has a 2xx status code
func (o *UpdateVasaProviderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vasa provider not found response has a 3xx status code
func (o *UpdateVasaProviderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vasa provider not found response has a 4xx status code
func (o *UpdateVasaProviderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update vasa provider not found response has a 5xx status code
func (o *UpdateVasaProviderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update vasa provider not found response a status code equal to that given
func (o *UpdateVasaProviderNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update vasa provider not found response
func (o *UpdateVasaProviderNotFound) Code() int {
	return 404
}

func (o *UpdateVasaProviderNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}][%d] updateVasaProviderNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVasaProviderNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}][%d] updateVasaProviderNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVasaProviderNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVasaProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVasaProviderInternalServerError creates a UpdateVasaProviderInternalServerError with default headers values
func NewUpdateVasaProviderInternalServerError() *UpdateVasaProviderInternalServerError {
	return &UpdateVasaProviderInternalServerError{}
}

/*
UpdateVasaProviderInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type UpdateVasaProviderInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vasa provider internal server error response has a 2xx status code
func (o *UpdateVasaProviderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vasa provider internal server error response has a 3xx status code
func (o *UpdateVasaProviderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vasa provider internal server error response has a 4xx status code
func (o *UpdateVasaProviderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update vasa provider internal server error response has a 5xx status code
func (o *UpdateVasaProviderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update vasa provider internal server error response a status code equal to that given
func (o *UpdateVasaProviderInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update vasa provider internal server error response
func (o *UpdateVasaProviderInternalServerError) Code() int {
	return 500
}

func (o *UpdateVasaProviderInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}][%d] updateVasaProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVasaProviderInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}][%d] updateVasaProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVasaProviderInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVasaProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
