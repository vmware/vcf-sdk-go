// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package vasa_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetVasaProviderUserReader is a Reader for the GetVasaProviderUser structure.
type GetVasaProviderUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVasaProviderUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVasaProviderUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetVasaProviderUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVasaProviderUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetVasaProviderUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/vasa-providers/{id}/users] getVasaProviderUser", response, response.Code())
	}
}

// NewGetVasaProviderUserOK creates a GetVasaProviderUserOK with default headers values
func NewGetVasaProviderUserOK() *GetVasaProviderUserOK {
	return &GetVasaProviderUserOK{}
}

/*
GetVasaProviderUserOK describes a response with status code 200, with default header values.

Ok
*/
type GetVasaProviderUserOK struct {
	Payload []*models.VasaUser
}

// IsSuccess returns true when this get vasa provider user o k response has a 2xx status code
func (o *GetVasaProviderUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get vasa provider user o k response has a 3xx status code
func (o *GetVasaProviderUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vasa provider user o k response has a 4xx status code
func (o *GetVasaProviderUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get vasa provider user o k response has a 5xx status code
func (o *GetVasaProviderUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get vasa provider user o k response a status code equal to that given
func (o *GetVasaProviderUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get vasa provider user o k response
func (o *GetVasaProviderUserOK) Code() int {
	return 200
}

func (o *GetVasaProviderUserOK) Error() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getVasaProviderUserOK  %+v", 200, o.Payload)
}

func (o *GetVasaProviderUserOK) String() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getVasaProviderUserOK  %+v", 200, o.Payload)
}

func (o *GetVasaProviderUserOK) GetPayload() []*models.VasaUser {
	return o.Payload
}

func (o *GetVasaProviderUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVasaProviderUserBadRequest creates a GetVasaProviderUserBadRequest with default headers values
func NewGetVasaProviderUserBadRequest() *GetVasaProviderUserBadRequest {
	return &GetVasaProviderUserBadRequest{}
}

/*
GetVasaProviderUserBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetVasaProviderUserBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get vasa provider user bad request response has a 2xx status code
func (o *GetVasaProviderUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vasa provider user bad request response has a 3xx status code
func (o *GetVasaProviderUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vasa provider user bad request response has a 4xx status code
func (o *GetVasaProviderUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vasa provider user bad request response has a 5xx status code
func (o *GetVasaProviderUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get vasa provider user bad request response a status code equal to that given
func (o *GetVasaProviderUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get vasa provider user bad request response
func (o *GetVasaProviderUserBadRequest) Code() int {
	return 400
}

func (o *GetVasaProviderUserBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getVasaProviderUserBadRequest  %+v", 400, o.Payload)
}

func (o *GetVasaProviderUserBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getVasaProviderUserBadRequest  %+v", 400, o.Payload)
}

func (o *GetVasaProviderUserBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVasaProviderUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVasaProviderUserNotFound creates a GetVasaProviderUserNotFound with default headers values
func NewGetVasaProviderUserNotFound() *GetVasaProviderUserNotFound {
	return &GetVasaProviderUserNotFound{}
}

/*
GetVasaProviderUserNotFound describes a response with status code 404, with default header values.

VASA Provider not found
*/
type GetVasaProviderUserNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get vasa provider user not found response has a 2xx status code
func (o *GetVasaProviderUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vasa provider user not found response has a 3xx status code
func (o *GetVasaProviderUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vasa provider user not found response has a 4xx status code
func (o *GetVasaProviderUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vasa provider user not found response has a 5xx status code
func (o *GetVasaProviderUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get vasa provider user not found response a status code equal to that given
func (o *GetVasaProviderUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get vasa provider user not found response
func (o *GetVasaProviderUserNotFound) Code() int {
	return 404
}

func (o *GetVasaProviderUserNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getVasaProviderUserNotFound  %+v", 404, o.Payload)
}

func (o *GetVasaProviderUserNotFound) String() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getVasaProviderUserNotFound  %+v", 404, o.Payload)
}

func (o *GetVasaProviderUserNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVasaProviderUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVasaProviderUserInternalServerError creates a GetVasaProviderUserInternalServerError with default headers values
func NewGetVasaProviderUserInternalServerError() *GetVasaProviderUserInternalServerError {
	return &GetVasaProviderUserInternalServerError{}
}

/*
GetVasaProviderUserInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type GetVasaProviderUserInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get vasa provider user internal server error response has a 2xx status code
func (o *GetVasaProviderUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vasa provider user internal server error response has a 3xx status code
func (o *GetVasaProviderUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vasa provider user internal server error response has a 4xx status code
func (o *GetVasaProviderUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get vasa provider user internal server error response has a 5xx status code
func (o *GetVasaProviderUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get vasa provider user internal server error response a status code equal to that given
func (o *GetVasaProviderUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get vasa provider user internal server error response
func (o *GetVasaProviderUserInternalServerError) Code() int {
	return 500
}

func (o *GetVasaProviderUserInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getVasaProviderUserInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVasaProviderUserInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getVasaProviderUserInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVasaProviderUserInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVasaProviderUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
