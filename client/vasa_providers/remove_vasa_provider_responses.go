// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package vasa_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// RemoveVasaProviderReader is a Reader for the RemoveVasaProvider structure.
type RemoveVasaProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveVasaProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRemoveVasaProviderNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveVasaProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveVasaProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveVasaProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/vasa-providers/{id}] removeVasaProvider", response, response.Code())
	}
}

// NewRemoveVasaProviderNoContent creates a RemoveVasaProviderNoContent with default headers values
func NewRemoveVasaProviderNoContent() *RemoveVasaProviderNoContent {
	return &RemoveVasaProviderNoContent{}
}

/*
RemoveVasaProviderNoContent describes a response with status code 204, with default header values.

No Content
*/
type RemoveVasaProviderNoContent struct {
}

// IsSuccess returns true when this remove vasa provider no content response has a 2xx status code
func (o *RemoveVasaProviderNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove vasa provider no content response has a 3xx status code
func (o *RemoveVasaProviderNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove vasa provider no content response has a 4xx status code
func (o *RemoveVasaProviderNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove vasa provider no content response has a 5xx status code
func (o *RemoveVasaProviderNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this remove vasa provider no content response a status code equal to that given
func (o *RemoveVasaProviderNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the remove vasa provider no content response
func (o *RemoveVasaProviderNoContent) Code() int {
	return 204
}

func (o *RemoveVasaProviderNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}][%d] removeVasaProviderNoContent ", 204)
}

func (o *RemoveVasaProviderNoContent) String() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}][%d] removeVasaProviderNoContent ", 204)
}

func (o *RemoveVasaProviderNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveVasaProviderBadRequest creates a RemoveVasaProviderBadRequest with default headers values
func NewRemoveVasaProviderBadRequest() *RemoveVasaProviderBadRequest {
	return &RemoveVasaProviderBadRequest{}
}

/*
RemoveVasaProviderBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RemoveVasaProviderBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove vasa provider bad request response has a 2xx status code
func (o *RemoveVasaProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove vasa provider bad request response has a 3xx status code
func (o *RemoveVasaProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove vasa provider bad request response has a 4xx status code
func (o *RemoveVasaProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove vasa provider bad request response has a 5xx status code
func (o *RemoveVasaProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove vasa provider bad request response a status code equal to that given
func (o *RemoveVasaProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the remove vasa provider bad request response
func (o *RemoveVasaProviderBadRequest) Code() int {
	return 400
}

func (o *RemoveVasaProviderBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}][%d] removeVasaProviderBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveVasaProviderBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}][%d] removeVasaProviderBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveVasaProviderBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveVasaProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVasaProviderNotFound creates a RemoveVasaProviderNotFound with default headers values
func NewRemoveVasaProviderNotFound() *RemoveVasaProviderNotFound {
	return &RemoveVasaProviderNotFound{}
}

/*
RemoveVasaProviderNotFound describes a response with status code 404, with default header values.

VASA Provider not found
*/
type RemoveVasaProviderNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove vasa provider not found response has a 2xx status code
func (o *RemoveVasaProviderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove vasa provider not found response has a 3xx status code
func (o *RemoveVasaProviderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove vasa provider not found response has a 4xx status code
func (o *RemoveVasaProviderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove vasa provider not found response has a 5xx status code
func (o *RemoveVasaProviderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this remove vasa provider not found response a status code equal to that given
func (o *RemoveVasaProviderNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the remove vasa provider not found response
func (o *RemoveVasaProviderNotFound) Code() int {
	return 404
}

func (o *RemoveVasaProviderNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}][%d] removeVasaProviderNotFound  %+v", 404, o.Payload)
}

func (o *RemoveVasaProviderNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}][%d] removeVasaProviderNotFound  %+v", 404, o.Payload)
}

func (o *RemoveVasaProviderNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveVasaProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVasaProviderInternalServerError creates a RemoveVasaProviderInternalServerError with default headers values
func NewRemoveVasaProviderInternalServerError() *RemoveVasaProviderInternalServerError {
	return &RemoveVasaProviderInternalServerError{}
}

/*
RemoveVasaProviderInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type RemoveVasaProviderInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove vasa provider internal server error response has a 2xx status code
func (o *RemoveVasaProviderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove vasa provider internal server error response has a 3xx status code
func (o *RemoveVasaProviderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove vasa provider internal server error response has a 4xx status code
func (o *RemoveVasaProviderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove vasa provider internal server error response has a 5xx status code
func (o *RemoveVasaProviderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remove vasa provider internal server error response a status code equal to that given
func (o *RemoveVasaProviderInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remove vasa provider internal server error response
func (o *RemoveVasaProviderInternalServerError) Code() int {
	return 500
}

func (o *RemoveVasaProviderInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}][%d] removeVasaProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveVasaProviderInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/vasa-providers/{id}][%d] removeVasaProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveVasaProviderInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveVasaProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
