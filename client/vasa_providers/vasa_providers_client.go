// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package vasa_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vasa providers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vasa providers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddVasaProvider(params *AddVasaProviderParams, opts ...ClientOption) (*AddVasaProviderCreated, error)

	AddVasaProviderStorageContainer(params *AddVasaProviderStorageContainerParams, opts ...ClientOption) (*AddVasaProviderStorageContainerCreated, error)

	AddVasaProviderUser(params *AddVasaProviderUserParams, opts ...ClientOption) (*AddVasaProviderUserCreated, error)

	GetVasaProvider(params *GetVasaProviderParams, opts ...ClientOption) (*GetVasaProviderOK, error)

	GetVasaProviderStorageContainers(params *GetVasaProviderStorageContainersParams, opts ...ClientOption) (*GetVasaProviderStorageContainersOK, error)

	GetVasaProviderUser(params *GetVasaProviderUserParams, opts ...ClientOption) (*GetVasaProviderUserOK, error)

	GetVasaProviderValidation(params *GetVasaProviderValidationParams, opts ...ClientOption) (*GetVasaProviderValidationOK, error)

	GetVasaProviders(params *GetVasaProvidersParams, opts ...ClientOption) (*GetVasaProvidersOK, error)

	RemoveVasaProvider(params *RemoveVasaProviderParams, opts ...ClientOption) (*RemoveVasaProviderNoContent, error)

	RemoveVasaProviderStorageContainer(params *RemoveVasaProviderStorageContainerParams, opts ...ClientOption) (*RemoveVasaProviderStorageContainerNoContent, error)

	UpdateVasaProvider(params *UpdateVasaProviderParams, opts ...ClientOption) (*UpdateVasaProviderOK, error)

	UpdateVasaProviderStorageContainer(params *UpdateVasaProviderStorageContainerParams, opts ...ClientOption) (*UpdateVasaProviderStorageContainerOK, error)

	UpdateVasaProviderUser(params *UpdateVasaProviderUserParams, opts ...ClientOption) (*UpdateVasaProviderUserOK, error)

	ValidateVasaProviderSpec(params *ValidateVasaProviderSpecParams, opts ...ClientOption) (*ValidateVasaProviderSpecOK, *ValidateVasaProviderSpecAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddVasaProvider adds a v a s a provider
*/
func (a *Client) AddVasaProvider(params *AddVasaProviderParams, opts ...ClientOption) (*AddVasaProviderCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVasaProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addVasaProvider",
		Method:             "POST",
		PathPattern:        "/v1/vasa-providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddVasaProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVasaProviderCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addVasaProvider: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddVasaProviderStorageContainer adds the storage containers to a v a s a provider
*/
func (a *Client) AddVasaProviderStorageContainer(params *AddVasaProviderStorageContainerParams, opts ...ClientOption) (*AddVasaProviderStorageContainerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVasaProviderStorageContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addVasaProviderStorageContainer",
		Method:             "POST",
		PathPattern:        "/v1/vasa-providers/{id}/storage-containers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddVasaProviderStorageContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVasaProviderStorageContainerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addVasaProviderStorageContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddVasaProviderUser adds the users to a v a s a provider
*/
func (a *Client) AddVasaProviderUser(params *AddVasaProviderUserParams, opts ...ClientOption) (*AddVasaProviderUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVasaProviderUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addVasaProviderUser",
		Method:             "POST",
		PathPattern:        "/v1/vasa-providers/{id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddVasaProviderUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVasaProviderUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addVasaProviderUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVasaProvider gets a v a s a provider
*/
func (a *Client) GetVasaProvider(params *GetVasaProviderParams, opts ...ClientOption) (*GetVasaProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVasaProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVasaProvider",
		Method:             "GET",
		PathPattern:        "/v1/vasa-providers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVasaProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVasaProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVasaProvider: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVasaProviderStorageContainers gets the storage containers of a v a s a provider
*/
func (a *Client) GetVasaProviderStorageContainers(params *GetVasaProviderStorageContainersParams, opts ...ClientOption) (*GetVasaProviderStorageContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVasaProviderStorageContainersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVasaProviderStorageContainers",
		Method:             "GET",
		PathPattern:        "/v1/vasa-providers/{id}/storage-containers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVasaProviderStorageContainersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVasaProviderStorageContainersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVasaProviderStorageContainers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVasaProviderUser gets the users of a v a s a provider
*/
func (a *Client) GetVasaProviderUser(params *GetVasaProviderUserParams, opts ...ClientOption) (*GetVasaProviderUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVasaProviderUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVasaProviderUser",
		Method:             "GET",
		PathPattern:        "/v1/vasa-providers/{id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVasaProviderUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVasaProviderUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVasaProviderUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVasaProviderValidation gets the status of the validation of the v a s a provider
*/
func (a *Client) GetVasaProviderValidation(params *GetVasaProviderValidationParams, opts ...ClientOption) (*GetVasaProviderValidationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVasaProviderValidationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVasaProviderValidation",
		Method:             "GET",
		PathPattern:        "/v1/vasa-providers/validations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVasaProviderValidationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVasaProviderValidationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVasaProviderValidation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVasaProviders gets the v a s a providers
*/
func (a *Client) GetVasaProviders(params *GetVasaProvidersParams, opts ...ClientOption) (*GetVasaProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVasaProvidersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVasaProviders",
		Method:             "GET",
		PathPattern:        "/v1/vasa-providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVasaProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVasaProvidersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVasaProviders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveVasaProvider deletes a v a s a provider
*/
func (a *Client) RemoveVasaProvider(params *RemoveVasaProviderParams, opts ...ClientOption) (*RemoveVasaProviderNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveVasaProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeVasaProvider",
		Method:             "DELETE",
		PathPattern:        "/v1/vasa-providers/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveVasaProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveVasaProviderNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeVasaProvider: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveVasaProviderStorageContainer deletes a storage container of a v a s a provider
*/
func (a *Client) RemoveVasaProviderStorageContainer(params *RemoveVasaProviderStorageContainerParams, opts ...ClientOption) (*RemoveVasaProviderStorageContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveVasaProviderStorageContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeVasaProviderStorageContainer",
		Method:             "DELETE",
		PathPattern:        "/v1/vasa-providers/{id}/storage-containers/{storageContainerId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveVasaProviderStorageContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveVasaProviderStorageContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeVasaProviderStorageContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVasaProvider updates a v a s a provider
*/
func (a *Client) UpdateVasaProvider(params *UpdateVasaProviderParams, opts ...ClientOption) (*UpdateVasaProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVasaProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVasaProvider",
		Method:             "PATCH",
		PathPattern:        "/v1/vasa-providers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVasaProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVasaProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVasaProvider: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVasaProviderStorageContainer updates the storage container of a v a s a provider
*/
func (a *Client) UpdateVasaProviderStorageContainer(params *UpdateVasaProviderStorageContainerParams, opts ...ClientOption) (*UpdateVasaProviderStorageContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVasaProviderStorageContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVasaProviderStorageContainer",
		Method:             "PATCH",
		PathPattern:        "/v1/vasa-providers/{id}/storage-containers/{storageContainerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVasaProviderStorageContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVasaProviderStorageContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVasaProviderStorageContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVasaProviderUser updates the user of a v a s a provider
*/
func (a *Client) UpdateVasaProviderUser(params *UpdateVasaProviderUserParams, opts ...ClientOption) (*UpdateVasaProviderUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVasaProviderUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVasaProviderUser",
		Method:             "PATCH",
		PathPattern:        "/v1/vasa-providers/{id}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVasaProviderUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVasaProviderUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVasaProviderUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateVasaProviderSpec validates vasa provider input specification
*/
func (a *Client) ValidateVasaProviderSpec(params *ValidateVasaProviderSpecParams, opts ...ClientOption) (*ValidateVasaProviderSpecOK, *ValidateVasaProviderSpecAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateVasaProviderSpecParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateVasaProviderSpec",
		Method:             "POST",
		PathPattern:        "/v1/vasa-providers/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateVasaProviderSpecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateVasaProviderSpecOK:
		return value, nil, nil
	case *ValidateVasaProviderSpecAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for vasa_providers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
