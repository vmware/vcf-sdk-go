// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package identity_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateExternalIdentityProviderReader is a Reader for the UpdateExternalIdentityProvider structure.
type UpdateExternalIdentityProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateExternalIdentityProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateExternalIdentityProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateExternalIdentityProviderNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateExternalIdentityProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateExternalIdentityProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateExternalIdentityProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/identity-providers/{id}] updateExternalIdentityProvider", response, response.Code())
	}
}

// NewUpdateExternalIdentityProviderOK creates a UpdateExternalIdentityProviderOK with default headers values
func NewUpdateExternalIdentityProviderOK() *UpdateExternalIdentityProviderOK {
	return &UpdateExternalIdentityProviderOK{}
}

/*
UpdateExternalIdentityProviderOK describes a response with status code 200, with default header values.

OK
*/
type UpdateExternalIdentityProviderOK struct {
	Payload interface{}
}

// IsSuccess returns true when this update external identity provider o k response has a 2xx status code
func (o *UpdateExternalIdentityProviderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update external identity provider o k response has a 3xx status code
func (o *UpdateExternalIdentityProviderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update external identity provider o k response has a 4xx status code
func (o *UpdateExternalIdentityProviderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update external identity provider o k response has a 5xx status code
func (o *UpdateExternalIdentityProviderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update external identity provider o k response a status code equal to that given
func (o *UpdateExternalIdentityProviderOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update external identity provider o k response
func (o *UpdateExternalIdentityProviderOK) Code() int {
	return 200
}

func (o *UpdateExternalIdentityProviderOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}][%d] updateExternalIdentityProviderOK  %+v", 200, o.Payload)
}

func (o *UpdateExternalIdentityProviderOK) String() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}][%d] updateExternalIdentityProviderOK  %+v", 200, o.Payload)
}

func (o *UpdateExternalIdentityProviderOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateExternalIdentityProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExternalIdentityProviderNoContent creates a UpdateExternalIdentityProviderNoContent with default headers values
func NewUpdateExternalIdentityProviderNoContent() *UpdateExternalIdentityProviderNoContent {
	return &UpdateExternalIdentityProviderNoContent{}
}

/*
UpdateExternalIdentityProviderNoContent describes a response with status code 204, with default header values.

No content
*/
type UpdateExternalIdentityProviderNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this update external identity provider no content response has a 2xx status code
func (o *UpdateExternalIdentityProviderNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update external identity provider no content response has a 3xx status code
func (o *UpdateExternalIdentityProviderNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update external identity provider no content response has a 4xx status code
func (o *UpdateExternalIdentityProviderNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update external identity provider no content response has a 5xx status code
func (o *UpdateExternalIdentityProviderNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update external identity provider no content response a status code equal to that given
func (o *UpdateExternalIdentityProviderNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update external identity provider no content response
func (o *UpdateExternalIdentityProviderNoContent) Code() int {
	return 204
}

func (o *UpdateExternalIdentityProviderNoContent) Error() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}][%d] updateExternalIdentityProviderNoContent  %+v", 204, o.Payload)
}

func (o *UpdateExternalIdentityProviderNoContent) String() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}][%d] updateExternalIdentityProviderNoContent  %+v", 204, o.Payload)
}

func (o *UpdateExternalIdentityProviderNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateExternalIdentityProviderNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExternalIdentityProviderBadRequest creates a UpdateExternalIdentityProviderBadRequest with default headers values
func NewUpdateExternalIdentityProviderBadRequest() *UpdateExternalIdentityProviderBadRequest {
	return &UpdateExternalIdentityProviderBadRequest{}
}

/*
UpdateExternalIdentityProviderBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateExternalIdentityProviderBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update external identity provider bad request response has a 2xx status code
func (o *UpdateExternalIdentityProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update external identity provider bad request response has a 3xx status code
func (o *UpdateExternalIdentityProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update external identity provider bad request response has a 4xx status code
func (o *UpdateExternalIdentityProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update external identity provider bad request response has a 5xx status code
func (o *UpdateExternalIdentityProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update external identity provider bad request response a status code equal to that given
func (o *UpdateExternalIdentityProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update external identity provider bad request response
func (o *UpdateExternalIdentityProviderBadRequest) Code() int {
	return 400
}

func (o *UpdateExternalIdentityProviderBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}][%d] updateExternalIdentityProviderBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateExternalIdentityProviderBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}][%d] updateExternalIdentityProviderBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateExternalIdentityProviderBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateExternalIdentityProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExternalIdentityProviderNotFound creates a UpdateExternalIdentityProviderNotFound with default headers values
func NewUpdateExternalIdentityProviderNotFound() *UpdateExternalIdentityProviderNotFound {
	return &UpdateExternalIdentityProviderNotFound{}
}

/*
UpdateExternalIdentityProviderNotFound describes a response with status code 404, with default header values.

Identity Provider not found
*/
type UpdateExternalIdentityProviderNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update external identity provider not found response has a 2xx status code
func (o *UpdateExternalIdentityProviderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update external identity provider not found response has a 3xx status code
func (o *UpdateExternalIdentityProviderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update external identity provider not found response has a 4xx status code
func (o *UpdateExternalIdentityProviderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update external identity provider not found response has a 5xx status code
func (o *UpdateExternalIdentityProviderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update external identity provider not found response a status code equal to that given
func (o *UpdateExternalIdentityProviderNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update external identity provider not found response
func (o *UpdateExternalIdentityProviderNotFound) Code() int {
	return 404
}

func (o *UpdateExternalIdentityProviderNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}][%d] updateExternalIdentityProviderNotFound  %+v", 404, o.Payload)
}

func (o *UpdateExternalIdentityProviderNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}][%d] updateExternalIdentityProviderNotFound  %+v", 404, o.Payload)
}

func (o *UpdateExternalIdentityProviderNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateExternalIdentityProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExternalIdentityProviderInternalServerError creates a UpdateExternalIdentityProviderInternalServerError with default headers values
func NewUpdateExternalIdentityProviderInternalServerError() *UpdateExternalIdentityProviderInternalServerError {
	return &UpdateExternalIdentityProviderInternalServerError{}
}

/*
UpdateExternalIdentityProviderInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateExternalIdentityProviderInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update external identity provider internal server error response has a 2xx status code
func (o *UpdateExternalIdentityProviderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update external identity provider internal server error response has a 3xx status code
func (o *UpdateExternalIdentityProviderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update external identity provider internal server error response has a 4xx status code
func (o *UpdateExternalIdentityProviderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update external identity provider internal server error response has a 5xx status code
func (o *UpdateExternalIdentityProviderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update external identity provider internal server error response a status code equal to that given
func (o *UpdateExternalIdentityProviderInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update external identity provider internal server error response
func (o *UpdateExternalIdentityProviderInternalServerError) Code() int {
	return 500
}

func (o *UpdateExternalIdentityProviderInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}][%d] updateExternalIdentityProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateExternalIdentityProviderInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}][%d] updateExternalIdentityProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateExternalIdentityProviderInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateExternalIdentityProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
