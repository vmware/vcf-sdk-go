// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package identity_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateEmbeddedIdentitySourceReader is a Reader for the UpdateEmbeddedIdentitySource structure.
type UpdateEmbeddedIdentitySourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEmbeddedIdentitySourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateEmbeddedIdentitySourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateEmbeddedIdentitySourceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateEmbeddedIdentitySourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateEmbeddedIdentitySourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateEmbeddedIdentitySourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/identity-providers/{id}/identity-sources/{domainName}] updateEmbeddedIdentitySource", response, response.Code())
	}
}

// NewUpdateEmbeddedIdentitySourceOK creates a UpdateEmbeddedIdentitySourceOK with default headers values
func NewUpdateEmbeddedIdentitySourceOK() *UpdateEmbeddedIdentitySourceOK {
	return &UpdateEmbeddedIdentitySourceOK{}
}

/*
UpdateEmbeddedIdentitySourceOK describes a response with status code 200, with default header values.

OK
*/
type UpdateEmbeddedIdentitySourceOK struct {
	Payload interface{}
}

// IsSuccess returns true when this update embedded identity source o k response has a 2xx status code
func (o *UpdateEmbeddedIdentitySourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update embedded identity source o k response has a 3xx status code
func (o *UpdateEmbeddedIdentitySourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update embedded identity source o k response has a 4xx status code
func (o *UpdateEmbeddedIdentitySourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update embedded identity source o k response has a 5xx status code
func (o *UpdateEmbeddedIdentitySourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update embedded identity source o k response a status code equal to that given
func (o *UpdateEmbeddedIdentitySourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update embedded identity source o k response
func (o *UpdateEmbeddedIdentitySourceOK) Code() int {
	return 200
}

func (o *UpdateEmbeddedIdentitySourceOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}/identity-sources/{domainName}][%d] updateEmbeddedIdentitySourceOK  %+v", 200, o.Payload)
}

func (o *UpdateEmbeddedIdentitySourceOK) String() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}/identity-sources/{domainName}][%d] updateEmbeddedIdentitySourceOK  %+v", 200, o.Payload)
}

func (o *UpdateEmbeddedIdentitySourceOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateEmbeddedIdentitySourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEmbeddedIdentitySourceNoContent creates a UpdateEmbeddedIdentitySourceNoContent with default headers values
func NewUpdateEmbeddedIdentitySourceNoContent() *UpdateEmbeddedIdentitySourceNoContent {
	return &UpdateEmbeddedIdentitySourceNoContent{}
}

/*
UpdateEmbeddedIdentitySourceNoContent describes a response with status code 204, with default header values.

No content
*/
type UpdateEmbeddedIdentitySourceNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this update embedded identity source no content response has a 2xx status code
func (o *UpdateEmbeddedIdentitySourceNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update embedded identity source no content response has a 3xx status code
func (o *UpdateEmbeddedIdentitySourceNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update embedded identity source no content response has a 4xx status code
func (o *UpdateEmbeddedIdentitySourceNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update embedded identity source no content response has a 5xx status code
func (o *UpdateEmbeddedIdentitySourceNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update embedded identity source no content response a status code equal to that given
func (o *UpdateEmbeddedIdentitySourceNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update embedded identity source no content response
func (o *UpdateEmbeddedIdentitySourceNoContent) Code() int {
	return 204
}

func (o *UpdateEmbeddedIdentitySourceNoContent) Error() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}/identity-sources/{domainName}][%d] updateEmbeddedIdentitySourceNoContent  %+v", 204, o.Payload)
}

func (o *UpdateEmbeddedIdentitySourceNoContent) String() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}/identity-sources/{domainName}][%d] updateEmbeddedIdentitySourceNoContent  %+v", 204, o.Payload)
}

func (o *UpdateEmbeddedIdentitySourceNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateEmbeddedIdentitySourceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEmbeddedIdentitySourceBadRequest creates a UpdateEmbeddedIdentitySourceBadRequest with default headers values
func NewUpdateEmbeddedIdentitySourceBadRequest() *UpdateEmbeddedIdentitySourceBadRequest {
	return &UpdateEmbeddedIdentitySourceBadRequest{}
}

/*
UpdateEmbeddedIdentitySourceBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateEmbeddedIdentitySourceBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update embedded identity source bad request response has a 2xx status code
func (o *UpdateEmbeddedIdentitySourceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update embedded identity source bad request response has a 3xx status code
func (o *UpdateEmbeddedIdentitySourceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update embedded identity source bad request response has a 4xx status code
func (o *UpdateEmbeddedIdentitySourceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update embedded identity source bad request response has a 5xx status code
func (o *UpdateEmbeddedIdentitySourceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update embedded identity source bad request response a status code equal to that given
func (o *UpdateEmbeddedIdentitySourceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update embedded identity source bad request response
func (o *UpdateEmbeddedIdentitySourceBadRequest) Code() int {
	return 400
}

func (o *UpdateEmbeddedIdentitySourceBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}/identity-sources/{domainName}][%d] updateEmbeddedIdentitySourceBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateEmbeddedIdentitySourceBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}/identity-sources/{domainName}][%d] updateEmbeddedIdentitySourceBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateEmbeddedIdentitySourceBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateEmbeddedIdentitySourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEmbeddedIdentitySourceNotFound creates a UpdateEmbeddedIdentitySourceNotFound with default headers values
func NewUpdateEmbeddedIdentitySourceNotFound() *UpdateEmbeddedIdentitySourceNotFound {
	return &UpdateEmbeddedIdentitySourceNotFound{}
}

/*
UpdateEmbeddedIdentitySourceNotFound describes a response with status code 404, with default header values.

Identity Source not found
*/
type UpdateEmbeddedIdentitySourceNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update embedded identity source not found response has a 2xx status code
func (o *UpdateEmbeddedIdentitySourceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update embedded identity source not found response has a 3xx status code
func (o *UpdateEmbeddedIdentitySourceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update embedded identity source not found response has a 4xx status code
func (o *UpdateEmbeddedIdentitySourceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update embedded identity source not found response has a 5xx status code
func (o *UpdateEmbeddedIdentitySourceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update embedded identity source not found response a status code equal to that given
func (o *UpdateEmbeddedIdentitySourceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update embedded identity source not found response
func (o *UpdateEmbeddedIdentitySourceNotFound) Code() int {
	return 404
}

func (o *UpdateEmbeddedIdentitySourceNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}/identity-sources/{domainName}][%d] updateEmbeddedIdentitySourceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateEmbeddedIdentitySourceNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}/identity-sources/{domainName}][%d] updateEmbeddedIdentitySourceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateEmbeddedIdentitySourceNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateEmbeddedIdentitySourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEmbeddedIdentitySourceInternalServerError creates a UpdateEmbeddedIdentitySourceInternalServerError with default headers values
func NewUpdateEmbeddedIdentitySourceInternalServerError() *UpdateEmbeddedIdentitySourceInternalServerError {
	return &UpdateEmbeddedIdentitySourceInternalServerError{}
}

/*
UpdateEmbeddedIdentitySourceInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateEmbeddedIdentitySourceInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update embedded identity source internal server error response has a 2xx status code
func (o *UpdateEmbeddedIdentitySourceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update embedded identity source internal server error response has a 3xx status code
func (o *UpdateEmbeddedIdentitySourceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update embedded identity source internal server error response has a 4xx status code
func (o *UpdateEmbeddedIdentitySourceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update embedded identity source internal server error response has a 5xx status code
func (o *UpdateEmbeddedIdentitySourceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update embedded identity source internal server error response a status code equal to that given
func (o *UpdateEmbeddedIdentitySourceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update embedded identity source internal server error response
func (o *UpdateEmbeddedIdentitySourceInternalServerError) Code() int {
	return 500
}

func (o *UpdateEmbeddedIdentitySourceInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}/identity-sources/{domainName}][%d] updateEmbeddedIdentitySourceInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateEmbeddedIdentitySourceInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/identity-providers/{id}/identity-sources/{domainName}][%d] updateEmbeddedIdentitySourceInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateEmbeddedIdentitySourceInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateEmbeddedIdentitySourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
