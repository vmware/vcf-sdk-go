// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package trusted_certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// DeleteTrustedCertificateReader is a Reader for the DeleteTrustedCertificate structure.
type DeleteTrustedCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTrustedCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteTrustedCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteTrustedCertificateNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteTrustedCertificateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteTrustedCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/sddc-manager/trusted-certificates/{alias}] deleteTrustedCertificate", response, response.Code())
	}
}

// NewDeleteTrustedCertificateOK creates a DeleteTrustedCertificateOK with default headers values
func NewDeleteTrustedCertificateOK() *DeleteTrustedCertificateOK {
	return &DeleteTrustedCertificateOK{}
}

/*
DeleteTrustedCertificateOK describes a response with status code 200, with default header values.

OK
*/
type DeleteTrustedCertificateOK struct {
}

// IsSuccess returns true when this delete trusted certificate o k response has a 2xx status code
func (o *DeleteTrustedCertificateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete trusted certificate o k response has a 3xx status code
func (o *DeleteTrustedCertificateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete trusted certificate o k response has a 4xx status code
func (o *DeleteTrustedCertificateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete trusted certificate o k response has a 5xx status code
func (o *DeleteTrustedCertificateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete trusted certificate o k response a status code equal to that given
func (o *DeleteTrustedCertificateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete trusted certificate o k response
func (o *DeleteTrustedCertificateOK) Code() int {
	return 200
}

func (o *DeleteTrustedCertificateOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/sddc-manager/trusted-certificates/{alias}][%d] deleteTrustedCertificateOK ", 200)
}

func (o *DeleteTrustedCertificateOK) String() string {
	return fmt.Sprintf("[DELETE /v1/sddc-manager/trusted-certificates/{alias}][%d] deleteTrustedCertificateOK ", 200)
}

func (o *DeleteTrustedCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTrustedCertificateNoContent creates a DeleteTrustedCertificateNoContent with default headers values
func NewDeleteTrustedCertificateNoContent() *DeleteTrustedCertificateNoContent {
	return &DeleteTrustedCertificateNoContent{}
}

/*
DeleteTrustedCertificateNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteTrustedCertificateNoContent struct {
}

// IsSuccess returns true when this delete trusted certificate no content response has a 2xx status code
func (o *DeleteTrustedCertificateNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete trusted certificate no content response has a 3xx status code
func (o *DeleteTrustedCertificateNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete trusted certificate no content response has a 4xx status code
func (o *DeleteTrustedCertificateNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete trusted certificate no content response has a 5xx status code
func (o *DeleteTrustedCertificateNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete trusted certificate no content response a status code equal to that given
func (o *DeleteTrustedCertificateNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete trusted certificate no content response
func (o *DeleteTrustedCertificateNoContent) Code() int {
	return 204
}

func (o *DeleteTrustedCertificateNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/sddc-manager/trusted-certificates/{alias}][%d] deleteTrustedCertificateNoContent ", 204)
}

func (o *DeleteTrustedCertificateNoContent) String() string {
	return fmt.Sprintf("[DELETE /v1/sddc-manager/trusted-certificates/{alias}][%d] deleteTrustedCertificateNoContent ", 204)
}

func (o *DeleteTrustedCertificateNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTrustedCertificateNotFound creates a DeleteTrustedCertificateNotFound with default headers values
func NewDeleteTrustedCertificateNotFound() *DeleteTrustedCertificateNotFound {
	return &DeleteTrustedCertificateNotFound{}
}

/*
DeleteTrustedCertificateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteTrustedCertificateNotFound struct {
}

// IsSuccess returns true when this delete trusted certificate not found response has a 2xx status code
func (o *DeleteTrustedCertificateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete trusted certificate not found response has a 3xx status code
func (o *DeleteTrustedCertificateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete trusted certificate not found response has a 4xx status code
func (o *DeleteTrustedCertificateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete trusted certificate not found response has a 5xx status code
func (o *DeleteTrustedCertificateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete trusted certificate not found response a status code equal to that given
func (o *DeleteTrustedCertificateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete trusted certificate not found response
func (o *DeleteTrustedCertificateNotFound) Code() int {
	return 404
}

func (o *DeleteTrustedCertificateNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/sddc-manager/trusted-certificates/{alias}][%d] deleteTrustedCertificateNotFound ", 404)
}

func (o *DeleteTrustedCertificateNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/sddc-manager/trusted-certificates/{alias}][%d] deleteTrustedCertificateNotFound ", 404)
}

func (o *DeleteTrustedCertificateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTrustedCertificateInternalServerError creates a DeleteTrustedCertificateInternalServerError with default headers values
func NewDeleteTrustedCertificateInternalServerError() *DeleteTrustedCertificateInternalServerError {
	return &DeleteTrustedCertificateInternalServerError{}
}

/*
DeleteTrustedCertificateInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type DeleteTrustedCertificateInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete trusted certificate internal server error response has a 2xx status code
func (o *DeleteTrustedCertificateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete trusted certificate internal server error response has a 3xx status code
func (o *DeleteTrustedCertificateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete trusted certificate internal server error response has a 4xx status code
func (o *DeleteTrustedCertificateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete trusted certificate internal server error response has a 5xx status code
func (o *DeleteTrustedCertificateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete trusted certificate internal server error response a status code equal to that given
func (o *DeleteTrustedCertificateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete trusted certificate internal server error response
func (o *DeleteTrustedCertificateInternalServerError) Code() int {
	return 500
}

func (o *DeleteTrustedCertificateInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/sddc-manager/trusted-certificates/{alias}][%d] deleteTrustedCertificateInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteTrustedCertificateInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/sddc-manager/trusted-certificates/{alias}][%d] deleteTrustedCertificateInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteTrustedCertificateInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteTrustedCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
