// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package config_reconciler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// ReconcileConfigsReader is a Reader for the ReconcileConfigs structure.
type ReconcileConfigsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReconcileConfigsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReconcileConfigsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewReconcileConfigsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReconcileConfigsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReconcileConfigsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/config-drift-reconciliations] reconcileConfigs", response, response.Code())
	}
}

// NewReconcileConfigsOK creates a ReconcileConfigsOK with default headers values
func NewReconcileConfigsOK() *ReconcileConfigsOK {
	return &ReconcileConfigsOK{}
}

/*
ReconcileConfigsOK describes a response with status code 200, with default header values.

OK
*/
type ReconcileConfigsOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this reconcile configs o k response has a 2xx status code
func (o *ReconcileConfigsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reconcile configs o k response has a 3xx status code
func (o *ReconcileConfigsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reconcile configs o k response has a 4xx status code
func (o *ReconcileConfigsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this reconcile configs o k response has a 5xx status code
func (o *ReconcileConfigsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this reconcile configs o k response a status code equal to that given
func (o *ReconcileConfigsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the reconcile configs o k response
func (o *ReconcileConfigsOK) Code() int {
	return 200
}

func (o *ReconcileConfigsOK) Error() string {
	return fmt.Sprintf("[POST /v1/config-drift-reconciliations][%d] reconcileConfigsOK  %+v", 200, o.Payload)
}

func (o *ReconcileConfigsOK) String() string {
	return fmt.Sprintf("[POST /v1/config-drift-reconciliations][%d] reconcileConfigsOK  %+v", 200, o.Payload)
}

func (o *ReconcileConfigsOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *ReconcileConfigsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReconcileConfigsAccepted creates a ReconcileConfigsAccepted with default headers values
func NewReconcileConfigsAccepted() *ReconcileConfigsAccepted {
	return &ReconcileConfigsAccepted{}
}

/*
ReconcileConfigsAccepted describes a response with status code 202, with default header values.

Accepted
*/
type ReconcileConfigsAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this reconcile configs accepted response has a 2xx status code
func (o *ReconcileConfigsAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reconcile configs accepted response has a 3xx status code
func (o *ReconcileConfigsAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reconcile configs accepted response has a 4xx status code
func (o *ReconcileConfigsAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this reconcile configs accepted response has a 5xx status code
func (o *ReconcileConfigsAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this reconcile configs accepted response a status code equal to that given
func (o *ReconcileConfigsAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the reconcile configs accepted response
func (o *ReconcileConfigsAccepted) Code() int {
	return 202
}

func (o *ReconcileConfigsAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/config-drift-reconciliations][%d] reconcileConfigsAccepted  %+v", 202, o.Payload)
}

func (o *ReconcileConfigsAccepted) String() string {
	return fmt.Sprintf("[POST /v1/config-drift-reconciliations][%d] reconcileConfigsAccepted  %+v", 202, o.Payload)
}

func (o *ReconcileConfigsAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *ReconcileConfigsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReconcileConfigsBadRequest creates a ReconcileConfigsBadRequest with default headers values
func NewReconcileConfigsBadRequest() *ReconcileConfigsBadRequest {
	return &ReconcileConfigsBadRequest{}
}

/*
ReconcileConfigsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ReconcileConfigsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this reconcile configs bad request response has a 2xx status code
func (o *ReconcileConfigsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reconcile configs bad request response has a 3xx status code
func (o *ReconcileConfigsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reconcile configs bad request response has a 4xx status code
func (o *ReconcileConfigsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this reconcile configs bad request response has a 5xx status code
func (o *ReconcileConfigsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this reconcile configs bad request response a status code equal to that given
func (o *ReconcileConfigsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the reconcile configs bad request response
func (o *ReconcileConfigsBadRequest) Code() int {
	return 400
}

func (o *ReconcileConfigsBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/config-drift-reconciliations][%d] reconcileConfigsBadRequest  %+v", 400, o.Payload)
}

func (o *ReconcileConfigsBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/config-drift-reconciliations][%d] reconcileConfigsBadRequest  %+v", 400, o.Payload)
}

func (o *ReconcileConfigsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReconcileConfigsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReconcileConfigsInternalServerError creates a ReconcileConfigsInternalServerError with default headers values
func NewReconcileConfigsInternalServerError() *ReconcileConfigsInternalServerError {
	return &ReconcileConfigsInternalServerError{}
}

/*
ReconcileConfigsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ReconcileConfigsInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this reconcile configs internal server error response has a 2xx status code
func (o *ReconcileConfigsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reconcile configs internal server error response has a 3xx status code
func (o *ReconcileConfigsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reconcile configs internal server error response has a 4xx status code
func (o *ReconcileConfigsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this reconcile configs internal server error response has a 5xx status code
func (o *ReconcileConfigsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this reconcile configs internal server error response a status code equal to that given
func (o *ReconcileConfigsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the reconcile configs internal server error response
func (o *ReconcileConfigsInternalServerError) Code() int {
	return 500
}

func (o *ReconcileConfigsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/config-drift-reconciliations][%d] reconcileConfigsInternalServerError  %+v", 500, o.Payload)
}

func (o *ReconcileConfigsInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/config-drift-reconciliations][%d] reconcileConfigsInternalServerError  %+v", 500, o.Payload)
}

func (o *ReconcileConfigsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReconcileConfigsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
