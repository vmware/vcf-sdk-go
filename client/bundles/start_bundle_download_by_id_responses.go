// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// StartBundleDownloadByIDReader is a Reader for the StartBundleDownloadByID structure.
type StartBundleDownloadByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartBundleDownloadByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartBundleDownloadByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewStartBundleDownloadByIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStartBundleDownloadByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewStartBundleDownloadByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStartBundleDownloadByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/bundles/{id}] startBundleDownloadByID", response, response.Code())
	}
}

// NewStartBundleDownloadByIDOK creates a StartBundleDownloadByIDOK with default headers values
func NewStartBundleDownloadByIDOK() *StartBundleDownloadByIDOK {
	return &StartBundleDownloadByIDOK{}
}

/*
StartBundleDownloadByIDOK describes a response with status code 200, with default header values.

OK
*/
type StartBundleDownloadByIDOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this start bundle download by Id o k response has a 2xx status code
func (o *StartBundleDownloadByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this start bundle download by Id o k response has a 3xx status code
func (o *StartBundleDownloadByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start bundle download by Id o k response has a 4xx status code
func (o *StartBundleDownloadByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this start bundle download by Id o k response has a 5xx status code
func (o *StartBundleDownloadByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this start bundle download by Id o k response a status code equal to that given
func (o *StartBundleDownloadByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the start bundle download by Id o k response
func (o *StartBundleDownloadByIDOK) Code() int {
	return 200
}

func (o *StartBundleDownloadByIDOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] startBundleDownloadByIdOK  %+v", 200, o.Payload)
}

func (o *StartBundleDownloadByIDOK) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] startBundleDownloadByIdOK  %+v", 200, o.Payload)
}

func (o *StartBundleDownloadByIDOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *StartBundleDownloadByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBundleDownloadByIDAccepted creates a StartBundleDownloadByIDAccepted with default headers values
func NewStartBundleDownloadByIDAccepted() *StartBundleDownloadByIDAccepted {
	return &StartBundleDownloadByIDAccepted{}
}

/*
StartBundleDownloadByIDAccepted describes a response with status code 202, with default header values.

Accepted
*/
type StartBundleDownloadByIDAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this start bundle download by Id accepted response has a 2xx status code
func (o *StartBundleDownloadByIDAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this start bundle download by Id accepted response has a 3xx status code
func (o *StartBundleDownloadByIDAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start bundle download by Id accepted response has a 4xx status code
func (o *StartBundleDownloadByIDAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this start bundle download by Id accepted response has a 5xx status code
func (o *StartBundleDownloadByIDAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this start bundle download by Id accepted response a status code equal to that given
func (o *StartBundleDownloadByIDAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the start bundle download by Id accepted response
func (o *StartBundleDownloadByIDAccepted) Code() int {
	return 202
}

func (o *StartBundleDownloadByIDAccepted) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] startBundleDownloadByIdAccepted  %+v", 202, o.Payload)
}

func (o *StartBundleDownloadByIDAccepted) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] startBundleDownloadByIdAccepted  %+v", 202, o.Payload)
}

func (o *StartBundleDownloadByIDAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *StartBundleDownloadByIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBundleDownloadByIDBadRequest creates a StartBundleDownloadByIDBadRequest with default headers values
func NewStartBundleDownloadByIDBadRequest() *StartBundleDownloadByIDBadRequest {
	return &StartBundleDownloadByIDBadRequest{}
}

/*
StartBundleDownloadByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StartBundleDownloadByIDBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this start bundle download by Id bad request response has a 2xx status code
func (o *StartBundleDownloadByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start bundle download by Id bad request response has a 3xx status code
func (o *StartBundleDownloadByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start bundle download by Id bad request response has a 4xx status code
func (o *StartBundleDownloadByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this start bundle download by Id bad request response has a 5xx status code
func (o *StartBundleDownloadByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this start bundle download by Id bad request response a status code equal to that given
func (o *StartBundleDownloadByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the start bundle download by Id bad request response
func (o *StartBundleDownloadByIDBadRequest) Code() int {
	return 400
}

func (o *StartBundleDownloadByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] startBundleDownloadByIdBadRequest  %+v", 400, o.Payload)
}

func (o *StartBundleDownloadByIDBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] startBundleDownloadByIdBadRequest  %+v", 400, o.Payload)
}

func (o *StartBundleDownloadByIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *StartBundleDownloadByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBundleDownloadByIDConflict creates a StartBundleDownloadByIDConflict with default headers values
func NewStartBundleDownloadByIDConflict() *StartBundleDownloadByIDConflict {
	return &StartBundleDownloadByIDConflict{}
}

/*
StartBundleDownloadByIDConflict describes a response with status code 409, with default header values.

Conflict
*/
type StartBundleDownloadByIDConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this start bundle download by Id conflict response has a 2xx status code
func (o *StartBundleDownloadByIDConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start bundle download by Id conflict response has a 3xx status code
func (o *StartBundleDownloadByIDConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start bundle download by Id conflict response has a 4xx status code
func (o *StartBundleDownloadByIDConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this start bundle download by Id conflict response has a 5xx status code
func (o *StartBundleDownloadByIDConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this start bundle download by Id conflict response a status code equal to that given
func (o *StartBundleDownloadByIDConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the start bundle download by Id conflict response
func (o *StartBundleDownloadByIDConflict) Code() int {
	return 409
}

func (o *StartBundleDownloadByIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] startBundleDownloadByIdConflict  %+v", 409, o.Payload)
}

func (o *StartBundleDownloadByIDConflict) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] startBundleDownloadByIdConflict  %+v", 409, o.Payload)
}

func (o *StartBundleDownloadByIDConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *StartBundleDownloadByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBundleDownloadByIDInternalServerError creates a StartBundleDownloadByIDInternalServerError with default headers values
func NewStartBundleDownloadByIDInternalServerError() *StartBundleDownloadByIDInternalServerError {
	return &StartBundleDownloadByIDInternalServerError{}
}

/*
StartBundleDownloadByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type StartBundleDownloadByIDInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this start bundle download by Id internal server error response has a 2xx status code
func (o *StartBundleDownloadByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start bundle download by Id internal server error response has a 3xx status code
func (o *StartBundleDownloadByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start bundle download by Id internal server error response has a 4xx status code
func (o *StartBundleDownloadByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this start bundle download by Id internal server error response has a 5xx status code
func (o *StartBundleDownloadByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this start bundle download by Id internal server error response a status code equal to that given
func (o *StartBundleDownloadByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the start bundle download by Id internal server error response
func (o *StartBundleDownloadByIDInternalServerError) Code() int {
	return 500
}

func (o *StartBundleDownloadByIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] startBundleDownloadByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *StartBundleDownloadByIDInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] startBundleDownloadByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *StartBundleDownloadByIDInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *StartBundleDownloadByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
