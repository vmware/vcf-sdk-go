// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GetBundlesForSkipUpgradeReader is a Reader for the GetBundlesForSkipUpgrade structure.
type GetBundlesForSkipUpgradeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBundlesForSkipUpgradeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBundlesForSkipUpgradeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetBundlesForSkipUpgradeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetBundlesForSkipUpgradeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/bundles/domains/{id}] getBundlesForSkipUpgrade", response, response.Code())
	}
}

// NewGetBundlesForSkipUpgradeOK creates a GetBundlesForSkipUpgradeOK with default headers values
func NewGetBundlesForSkipUpgradeOK() *GetBundlesForSkipUpgradeOK {
	return &GetBundlesForSkipUpgradeOK{}
}

/*
GetBundlesForSkipUpgradeOK describes a response with status code 200, with default header values.

Ok
*/
type GetBundlesForSkipUpgradeOK struct {
	Payload *models.PageOfBundle
}

// IsSuccess returns true when this get bundles for skip upgrade o k response has a 2xx status code
func (o *GetBundlesForSkipUpgradeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get bundles for skip upgrade o k response has a 3xx status code
func (o *GetBundlesForSkipUpgradeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bundles for skip upgrade o k response has a 4xx status code
func (o *GetBundlesForSkipUpgradeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get bundles for skip upgrade o k response has a 5xx status code
func (o *GetBundlesForSkipUpgradeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get bundles for skip upgrade o k response a status code equal to that given
func (o *GetBundlesForSkipUpgradeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get bundles for skip upgrade o k response
func (o *GetBundlesForSkipUpgradeOK) Code() int {
	return 200
}

func (o *GetBundlesForSkipUpgradeOK) Error() string {
	return fmt.Sprintf("[GET /v1/bundles/domains/{id}][%d] getBundlesForSkipUpgradeOK  %+v", 200, o.Payload)
}

func (o *GetBundlesForSkipUpgradeOK) String() string {
	return fmt.Sprintf("[GET /v1/bundles/domains/{id}][%d] getBundlesForSkipUpgradeOK  %+v", 200, o.Payload)
}

func (o *GetBundlesForSkipUpgradeOK) GetPayload() *models.PageOfBundle {
	return o.Payload
}

func (o *GetBundlesForSkipUpgradeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageOfBundle)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBundlesForSkipUpgradeNotFound creates a GetBundlesForSkipUpgradeNotFound with default headers values
func NewGetBundlesForSkipUpgradeNotFound() *GetBundlesForSkipUpgradeNotFound {
	return &GetBundlesForSkipUpgradeNotFound{}
}

/*
GetBundlesForSkipUpgradeNotFound describes a response with status code 404, with default header values.

Domain not found with given ID.
*/
type GetBundlesForSkipUpgradeNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get bundles for skip upgrade not found response has a 2xx status code
func (o *GetBundlesForSkipUpgradeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bundles for skip upgrade not found response has a 3xx status code
func (o *GetBundlesForSkipUpgradeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bundles for skip upgrade not found response has a 4xx status code
func (o *GetBundlesForSkipUpgradeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bundles for skip upgrade not found response has a 5xx status code
func (o *GetBundlesForSkipUpgradeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get bundles for skip upgrade not found response a status code equal to that given
func (o *GetBundlesForSkipUpgradeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get bundles for skip upgrade not found response
func (o *GetBundlesForSkipUpgradeNotFound) Code() int {
	return 404
}

func (o *GetBundlesForSkipUpgradeNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/bundles/domains/{id}][%d] getBundlesForSkipUpgradeNotFound  %+v", 404, o.Payload)
}

func (o *GetBundlesForSkipUpgradeNotFound) String() string {
	return fmt.Sprintf("[GET /v1/bundles/domains/{id}][%d] getBundlesForSkipUpgradeNotFound  %+v", 404, o.Payload)
}

func (o *GetBundlesForSkipUpgradeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetBundlesForSkipUpgradeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBundlesForSkipUpgradeInternalServerError creates a GetBundlesForSkipUpgradeInternalServerError with default headers values
func NewGetBundlesForSkipUpgradeInternalServerError() *GetBundlesForSkipUpgradeInternalServerError {
	return &GetBundlesForSkipUpgradeInternalServerError{}
}

/*
GetBundlesForSkipUpgradeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetBundlesForSkipUpgradeInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get bundles for skip upgrade internal server error response has a 2xx status code
func (o *GetBundlesForSkipUpgradeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bundles for skip upgrade internal server error response has a 3xx status code
func (o *GetBundlesForSkipUpgradeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bundles for skip upgrade internal server error response has a 4xx status code
func (o *GetBundlesForSkipUpgradeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get bundles for skip upgrade internal server error response has a 5xx status code
func (o *GetBundlesForSkipUpgradeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get bundles for skip upgrade internal server error response a status code equal to that given
func (o *GetBundlesForSkipUpgradeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get bundles for skip upgrade internal server error response
func (o *GetBundlesForSkipUpgradeInternalServerError) Code() int {
	return 500
}

func (o *GetBundlesForSkipUpgradeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/bundles/domains/{id}][%d] getBundlesForSkipUpgradeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetBundlesForSkipUpgradeInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/bundles/domains/{id}][%d] getBundlesForSkipUpgradeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetBundlesForSkipUpgradeInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetBundlesForSkipUpgradeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
