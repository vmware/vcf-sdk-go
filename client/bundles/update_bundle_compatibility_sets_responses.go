// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateBundleCompatibilitySetsReader is a Reader for the UpdateBundleCompatibilitySets structure.
type UpdateBundleCompatibilitySetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateBundleCompatibilitySetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateBundleCompatibilitySetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewUpdateBundleCompatibilitySetsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateBundleCompatibilitySetsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateBundleCompatibilitySetsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateBundleCompatibilitySetsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/bundles/] updateBundleCompatibilitySets", response, response.Code())
	}
}

// NewUpdateBundleCompatibilitySetsOK creates a UpdateBundleCompatibilitySetsOK with default headers values
func NewUpdateBundleCompatibilitySetsOK() *UpdateBundleCompatibilitySetsOK {
	return &UpdateBundleCompatibilitySetsOK{}
}

/*
UpdateBundleCompatibilitySetsOK describes a response with status code 200, with default header values.

OK
*/
type UpdateBundleCompatibilitySetsOK struct {
}

// IsSuccess returns true when this update bundle compatibility sets o k response has a 2xx status code
func (o *UpdateBundleCompatibilitySetsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update bundle compatibility sets o k response has a 3xx status code
func (o *UpdateBundleCompatibilitySetsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bundle compatibility sets o k response has a 4xx status code
func (o *UpdateBundleCompatibilitySetsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update bundle compatibility sets o k response has a 5xx status code
func (o *UpdateBundleCompatibilitySetsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update bundle compatibility sets o k response a status code equal to that given
func (o *UpdateBundleCompatibilitySetsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update bundle compatibility sets o k response
func (o *UpdateBundleCompatibilitySetsOK) Code() int {
	return 200
}

func (o *UpdateBundleCompatibilitySetsOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/][%d] updateBundleCompatibilitySetsOK ", 200)
}

func (o *UpdateBundleCompatibilitySetsOK) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/][%d] updateBundleCompatibilitySetsOK ", 200)
}

func (o *UpdateBundleCompatibilitySetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateBundleCompatibilitySetsAccepted creates a UpdateBundleCompatibilitySetsAccepted with default headers values
func NewUpdateBundleCompatibilitySetsAccepted() *UpdateBundleCompatibilitySetsAccepted {
	return &UpdateBundleCompatibilitySetsAccepted{}
}

/*
UpdateBundleCompatibilitySetsAccepted describes a response with status code 202, with default header values.

Accepted
*/
type UpdateBundleCompatibilitySetsAccepted struct {
}

// IsSuccess returns true when this update bundle compatibility sets accepted response has a 2xx status code
func (o *UpdateBundleCompatibilitySetsAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update bundle compatibility sets accepted response has a 3xx status code
func (o *UpdateBundleCompatibilitySetsAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bundle compatibility sets accepted response has a 4xx status code
func (o *UpdateBundleCompatibilitySetsAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update bundle compatibility sets accepted response has a 5xx status code
func (o *UpdateBundleCompatibilitySetsAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update bundle compatibility sets accepted response a status code equal to that given
func (o *UpdateBundleCompatibilitySetsAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the update bundle compatibility sets accepted response
func (o *UpdateBundleCompatibilitySetsAccepted) Code() int {
	return 202
}

func (o *UpdateBundleCompatibilitySetsAccepted) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/][%d] updateBundleCompatibilitySetsAccepted ", 202)
}

func (o *UpdateBundleCompatibilitySetsAccepted) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/][%d] updateBundleCompatibilitySetsAccepted ", 202)
}

func (o *UpdateBundleCompatibilitySetsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateBundleCompatibilitySetsBadRequest creates a UpdateBundleCompatibilitySetsBadRequest with default headers values
func NewUpdateBundleCompatibilitySetsBadRequest() *UpdateBundleCompatibilitySetsBadRequest {
	return &UpdateBundleCompatibilitySetsBadRequest{}
}

/*
UpdateBundleCompatibilitySetsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateBundleCompatibilitySetsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update bundle compatibility sets bad request response has a 2xx status code
func (o *UpdateBundleCompatibilitySetsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update bundle compatibility sets bad request response has a 3xx status code
func (o *UpdateBundleCompatibilitySetsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bundle compatibility sets bad request response has a 4xx status code
func (o *UpdateBundleCompatibilitySetsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update bundle compatibility sets bad request response has a 5xx status code
func (o *UpdateBundleCompatibilitySetsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update bundle compatibility sets bad request response a status code equal to that given
func (o *UpdateBundleCompatibilitySetsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update bundle compatibility sets bad request response
func (o *UpdateBundleCompatibilitySetsBadRequest) Code() int {
	return 400
}

func (o *UpdateBundleCompatibilitySetsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/][%d] updateBundleCompatibilitySetsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateBundleCompatibilitySetsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/][%d] updateBundleCompatibilitySetsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateBundleCompatibilitySetsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateBundleCompatibilitySetsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBundleCompatibilitySetsConflict creates a UpdateBundleCompatibilitySetsConflict with default headers values
func NewUpdateBundleCompatibilitySetsConflict() *UpdateBundleCompatibilitySetsConflict {
	return &UpdateBundleCompatibilitySetsConflict{}
}

/*
UpdateBundleCompatibilitySetsConflict describes a response with status code 409, with default header values.

Conflict
*/
type UpdateBundleCompatibilitySetsConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this update bundle compatibility sets conflict response has a 2xx status code
func (o *UpdateBundleCompatibilitySetsConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update bundle compatibility sets conflict response has a 3xx status code
func (o *UpdateBundleCompatibilitySetsConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bundle compatibility sets conflict response has a 4xx status code
func (o *UpdateBundleCompatibilitySetsConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update bundle compatibility sets conflict response has a 5xx status code
func (o *UpdateBundleCompatibilitySetsConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update bundle compatibility sets conflict response a status code equal to that given
func (o *UpdateBundleCompatibilitySetsConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update bundle compatibility sets conflict response
func (o *UpdateBundleCompatibilitySetsConflict) Code() int {
	return 409
}

func (o *UpdateBundleCompatibilitySetsConflict) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/][%d] updateBundleCompatibilitySetsConflict  %+v", 409, o.Payload)
}

func (o *UpdateBundleCompatibilitySetsConflict) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/][%d] updateBundleCompatibilitySetsConflict  %+v", 409, o.Payload)
}

func (o *UpdateBundleCompatibilitySetsConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateBundleCompatibilitySetsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBundleCompatibilitySetsInternalServerError creates a UpdateBundleCompatibilitySetsInternalServerError with default headers values
func NewUpdateBundleCompatibilitySetsInternalServerError() *UpdateBundleCompatibilitySetsInternalServerError {
	return &UpdateBundleCompatibilitySetsInternalServerError{}
}

/*
UpdateBundleCompatibilitySetsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateBundleCompatibilitySetsInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update bundle compatibility sets internal server error response has a 2xx status code
func (o *UpdateBundleCompatibilitySetsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update bundle compatibility sets internal server error response has a 3xx status code
func (o *UpdateBundleCompatibilitySetsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bundle compatibility sets internal server error response has a 4xx status code
func (o *UpdateBundleCompatibilitySetsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update bundle compatibility sets internal server error response has a 5xx status code
func (o *UpdateBundleCompatibilitySetsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update bundle compatibility sets internal server error response a status code equal to that given
func (o *UpdateBundleCompatibilitySetsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update bundle compatibility sets internal server error response
func (o *UpdateBundleCompatibilitySetsInternalServerError) Code() int {
	return 500
}

func (o *UpdateBundleCompatibilitySetsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/][%d] updateBundleCompatibilitySetsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateBundleCompatibilitySetsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/][%d] updateBundleCompatibilitySetsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateBundleCompatibilitySetsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateBundleCompatibilitySetsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
