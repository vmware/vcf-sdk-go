// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new bundles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bundles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetBundle(params *GetBundleParams, opts ...ClientOption) (*GetBundleOK, error)

	GetBundles(params *GetBundlesParams, opts ...ClientOption) (*GetBundlesOK, error)

	GetBundlesForSkipUpgradeUsingGET(params *GetBundlesForSkipUpgradeUsingGETParams, opts ...ClientOption) (*GetBundlesForSkipUpgradeUsingGETOK, error)

	UpdateBundle(params *UpdateBundleParams, opts ...ClientOption) (*UpdateBundleOK, *UpdateBundleAccepted, error)

	UpdateBundleCompatibilitySets(params *UpdateBundleCompatibilitySetsParams, opts ...ClientOption) (*UpdateBundleCompatibilitySetsOK, *UpdateBundleCompatibilitySetsAccepted, error)

	UploadBundle(params *UploadBundleParams, opts ...ClientOption) (*UploadBundleOK, *UploadBundleAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetBundle gets a bundle

Get a Bundle
*/
func (a *Client) GetBundle(params *GetBundleParams, opts ...ClientOption) (*GetBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBundleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBundle",
		Method:             "GET",
		PathPattern:        "/v1/bundles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBundleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBundleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBundle: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBundles gets the bundles

Get all Bundles i.e uploaded bundles and also bundles available via depot access.
*/
func (a *Client) GetBundles(params *GetBundlesParams, opts ...ClientOption) (*GetBundlesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBundlesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBundles",
		Method:             "GET",
		PathPattern:        "/v1/bundles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBundlesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBundlesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBundles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBundlesForSkipUpgradeUsingGET gets bundles for skip upgrade a domain from current version to target version
*/
func (a *Client) GetBundlesForSkipUpgradeUsingGET(params *GetBundlesForSkipUpgradeUsingGETParams, opts ...ClientOption) (*GetBundlesForSkipUpgradeUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBundlesForSkipUpgradeUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBundlesForSkipUpgradeUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/bundles/domains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBundlesForSkipUpgradeUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBundlesForSkipUpgradeUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBundlesForSkipUpgradeUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBundle updates a bundle for downloading from depot

Update a Bundle for scheduling/triggering download. Only one download can triggered for a Bundle.
*/
func (a *Client) UpdateBundle(params *UpdateBundleParams, opts ...ClientOption) (*UpdateBundleOK, *UpdateBundleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBundleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBundle",
		Method:             "PATCH",
		PathPattern:        "/v1/bundles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBundleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateBundleOK:
		return value, nil, nil
	case *UpdateBundleAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bundles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBundleCompatibilitySets updates software compatibility sets for bundles

Update software compatibility sets for Bundles
*/
func (a *Client) UpdateBundleCompatibilitySets(params *UpdateBundleCompatibilitySetsParams, opts ...ClientOption) (*UpdateBundleCompatibilitySetsOK, *UpdateBundleCompatibilitySetsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBundleCompatibilitySetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBundleCompatibilitySets",
		Method:             "PATCH",
		PathPattern:        "/v1/bundles/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBundleCompatibilitySetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateBundleCompatibilitySetsOK:
		return value, nil, nil
	case *UpdateBundleCompatibilitySetsAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bundles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadBundle uploads a bundle

Upload Bundle to SDDC Manager. Used when you do not have internet connectivity for downloading bundles from VMWare/VxRail to SDDC Manager. The Bundles are manually downloaded from Depot using Bundle Transfer utility
*/
func (a *Client) UploadBundle(params *UploadBundleParams, opts ...ClientOption) (*UploadBundleOK, *UploadBundleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadBundleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadBundle",
		Method:             "POST",
		PathPattern:        "/v1/bundles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadBundleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UploadBundleOK:
		return value, nil, nil
	case *UploadBundleAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bundles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
