// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package check_sets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new check sets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for check sets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetLastAssessmentRunInfo(params *GetLastAssessmentRunInfoParams, opts ...ClientOption) (*GetLastAssessmentRunInfoOK, error)

	GetResult(params *GetResultParams, opts ...ClientOption) (*GetResultOK, error)

	QueryCheckSets(params *QueryCheckSetsParams, opts ...ClientOption) (*QueryCheckSetsOK, error)

	TriggerCheckRun(params *TriggerCheckRunParams, opts ...ClientOption) (*TriggerCheckRunAccepted, error)

	TriggerPartialRetryOfCheckRun(params *TriggerPartialRetryOfCheckRunParams, opts ...ClientOption) (*TriggerPartialRetryOfCheckRunAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetLastAssessmentRunInfo gets information about the last assessment run

Get information about the last assessment run
*/
func (a *Client) GetLastAssessmentRunInfo(params *GetLastAssessmentRunInfoParams, opts ...ClientOption) (*GetLastAssessmentRunInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLastAssessmentRunInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLastAssessmentRunInfo",
		Method:             "GET",
		PathPattern:        "/v1/system/check-sets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLastAssessmentRunInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLastAssessmentRunInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLastAssessmentRunInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResult gets the result for a given check run

Get the result for a given check run
*/
func (a *Client) GetResult(params *GetResultParams, opts ...ClientOption) (*GetResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResult",
		Method:             "GET",
		PathPattern:        "/v1/system/check-sets/{runId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryCheckSets queries for check sets for the given resources

Query for check-sets for the given resources
*/
func (a *Client) QueryCheckSets(params *QueryCheckSetsParams, opts ...ClientOption) (*QueryCheckSetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryCheckSetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "queryCheckSets",
		Method:             "POST",
		PathPattern:        "/v1/system/check-sets/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryCheckSetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryCheckSetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queryCheckSets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriggerCheckRun triggers a run of the selected checks

Trigger a run of the selected checks
*/
func (a *Client) TriggerCheckRun(params *TriggerCheckRunParams, opts ...ClientOption) (*TriggerCheckRunAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerCheckRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "triggerCheckRun",
		Method:             "POST",
		PathPattern:        "/v1/system/check-sets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TriggerCheckRunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriggerCheckRunAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for triggerCheckRun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriggerPartialRetryOfCheckRun triggers partial retry of a completed check run

Trigger partial retry of a completed check run
*/
func (a *Client) TriggerPartialRetryOfCheckRun(params *TriggerPartialRetryOfCheckRunParams, opts ...ClientOption) (*TriggerPartialRetryOfCheckRunAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerPartialRetryOfCheckRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "triggerPartialRetryOfCheckRun",
		Method:             "PATCH",
		PathPattern:        "/v1/system/check-sets/{runId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TriggerPartialRetryOfCheckRunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriggerPartialRetryOfCheckRunAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for triggerPartialRetryOfCheckRun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
