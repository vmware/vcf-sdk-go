// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package check_sets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetResultParams creates a new GetResultParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetResultParams() *GetResultParams {
	return &GetResultParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetResultParamsWithTimeout creates a new GetResultParams object
// with the ability to set a timeout on a request.
func NewGetResultParamsWithTimeout(timeout time.Duration) *GetResultParams {
	return &GetResultParams{
		timeout: timeout,
	}
}

// NewGetResultParamsWithContext creates a new GetResultParams object
// with the ability to set a context for a request.
func NewGetResultParamsWithContext(ctx context.Context) *GetResultParams {
	return &GetResultParams{
		Context: ctx,
	}
}

// NewGetResultParamsWithHTTPClient creates a new GetResultParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetResultParamsWithHTTPClient(client *http.Client) *GetResultParams {
	return &GetResultParams{
		HTTPClient: client,
	}
}

/*
GetResultParams contains all the parameters to send to the API endpoint

	for the get result operation.

	Typically these are written to a http.Request.
*/
type GetResultParams struct {

	/* Obfuscate.

	   Obfuscate. Only for internal use.
	*/
	Obfuscate *bool

	/* ReturnAllArtefacts.

	   Returns all artefacts. Only for internal use.
	*/
	ReturnAllArtefacts *bool

	/* RunID.

	   UUID of the task
	*/
	RunID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get result params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResultParams) WithDefaults() *GetResultParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get result params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResultParams) SetDefaults() {
	var (
		obfuscateDefault = bool(false)

		returnAllArtefactsDefault = bool(false)
	)

	val := GetResultParams{
		Obfuscate:          &obfuscateDefault,
		ReturnAllArtefacts: &returnAllArtefactsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get result params
func (o *GetResultParams) WithTimeout(timeout time.Duration) *GetResultParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get result params
func (o *GetResultParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get result params
func (o *GetResultParams) WithContext(ctx context.Context) *GetResultParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get result params
func (o *GetResultParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get result params
func (o *GetResultParams) WithHTTPClient(client *http.Client) *GetResultParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get result params
func (o *GetResultParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithObfuscate adds the obfuscate to the get result params
func (o *GetResultParams) WithObfuscate(obfuscate *bool) *GetResultParams {
	o.SetObfuscate(obfuscate)
	return o
}

// SetObfuscate adds the obfuscate to the get result params
func (o *GetResultParams) SetObfuscate(obfuscate *bool) {
	o.Obfuscate = obfuscate
}

// WithReturnAllArtefacts adds the returnAllArtefacts to the get result params
func (o *GetResultParams) WithReturnAllArtefacts(returnAllArtefacts *bool) *GetResultParams {
	o.SetReturnAllArtefacts(returnAllArtefacts)
	return o
}

// SetReturnAllArtefacts adds the returnAllArtefacts to the get result params
func (o *GetResultParams) SetReturnAllArtefacts(returnAllArtefacts *bool) {
	o.ReturnAllArtefacts = returnAllArtefacts
}

// WithRunID adds the runID to the get result params
func (o *GetResultParams) WithRunID(runID string) *GetResultParams {
	o.SetRunID(runID)
	return o
}

// SetRunID adds the runId to the get result params
func (o *GetResultParams) SetRunID(runID string) {
	o.RunID = runID
}

// WriteToRequest writes these params to a swagger request
func (o *GetResultParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Obfuscate != nil {

		// query param obfuscate
		var qrObfuscate bool

		if o.Obfuscate != nil {
			qrObfuscate = *o.Obfuscate
		}
		qObfuscate := swag.FormatBool(qrObfuscate)
		if qObfuscate != "" {

			if err := r.SetQueryParam("obfuscate", qObfuscate); err != nil {
				return err
			}
		}
	}

	if o.ReturnAllArtefacts != nil {

		// query param returnAllArtefacts
		var qrReturnAllArtefacts bool

		if o.ReturnAllArtefacts != nil {
			qrReturnAllArtefacts = *o.ReturnAllArtefacts
		}
		qReturnAllArtefacts := swag.FormatBool(qrReturnAllArtefacts)
		if qReturnAllArtefacts != "" {

			if err := r.SetQueryParam("returnAllArtefacts", qReturnAllArtefacts); err != nil {
				return err
			}
		}
	}

	// path param runId
	if err := r.SetPathParam("runId", o.RunID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
