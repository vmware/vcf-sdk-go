// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetDatastoreCriterion1Params creates a new GetDatastoreCriterion1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDatastoreCriterion1Params() *GetDatastoreCriterion1Params {
	return &GetDatastoreCriterion1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDatastoreCriterion1ParamsWithTimeout creates a new GetDatastoreCriterion1Params object
// with the ability to set a timeout on a request.
func NewGetDatastoreCriterion1ParamsWithTimeout(timeout time.Duration) *GetDatastoreCriterion1Params {
	return &GetDatastoreCriterion1Params{
		timeout: timeout,
	}
}

// NewGetDatastoreCriterion1ParamsWithContext creates a new GetDatastoreCriterion1Params object
// with the ability to set a context for a request.
func NewGetDatastoreCriterion1ParamsWithContext(ctx context.Context) *GetDatastoreCriterion1Params {
	return &GetDatastoreCriterion1Params{
		Context: ctx,
	}
}

// NewGetDatastoreCriterion1ParamsWithHTTPClient creates a new GetDatastoreCriterion1Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetDatastoreCriterion1ParamsWithHTTPClient(client *http.Client) *GetDatastoreCriterion1Params {
	return &GetDatastoreCriterion1Params{
		HTTPClient: client,
	}
}

/*
GetDatastoreCriterion1Params contains all the parameters to send to the API endpoint

	for the get datastore criterion 1 operation.

	Typically these are written to a http.Request.
*/
type GetDatastoreCriterion1Params struct {

	/* DomainID.

	   Domain ID
	*/
	DomainID string

	/* Name.

	   Criteria Name
	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get datastore criterion 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDatastoreCriterion1Params) WithDefaults() *GetDatastoreCriterion1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get datastore criterion 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDatastoreCriterion1Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get datastore criterion 1 params
func (o *GetDatastoreCriterion1Params) WithTimeout(timeout time.Duration) *GetDatastoreCriterion1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get datastore criterion 1 params
func (o *GetDatastoreCriterion1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get datastore criterion 1 params
func (o *GetDatastoreCriterion1Params) WithContext(ctx context.Context) *GetDatastoreCriterion1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get datastore criterion 1 params
func (o *GetDatastoreCriterion1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get datastore criterion 1 params
func (o *GetDatastoreCriterion1Params) WithHTTPClient(client *http.Client) *GetDatastoreCriterion1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get datastore criterion 1 params
func (o *GetDatastoreCriterion1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomainID adds the domainID to the get datastore criterion 1 params
func (o *GetDatastoreCriterion1Params) WithDomainID(domainID string) *GetDatastoreCriterion1Params {
	o.SetDomainID(domainID)
	return o
}

// SetDomainID adds the domainId to the get datastore criterion 1 params
func (o *GetDatastoreCriterion1Params) SetDomainID(domainID string) {
	o.DomainID = domainID
}

// WithName adds the name to the get datastore criterion 1 params
func (o *GetDatastoreCriterion1Params) WithName(name string) *GetDatastoreCriterion1Params {
	o.SetName(name)
	return o
}

// SetName adds the name to the get datastore criterion 1 params
func (o *GetDatastoreCriterion1Params) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *GetDatastoreCriterion1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param domainId
	if err := r.SetPathParam("domainId", o.DomainID); err != nil {
		return err
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
