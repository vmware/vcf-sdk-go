// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// AssignTagsToDomainReader is a Reader for the AssignTagsToDomain structure.
type AssignTagsToDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssignTagsToDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAssignTagsToDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAssignTagsToDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAssignTagsToDomainInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/domains/{id}/tags] assignTagsToDomain", response, response.Code())
	}
}

// NewAssignTagsToDomainOK creates a AssignTagsToDomainOK with default headers values
func NewAssignTagsToDomainOK() *AssignTagsToDomainOK {
	return &AssignTagsToDomainOK{}
}

/*
AssignTagsToDomainOK describes a response with status code 200, with default header values.

Ok
*/
type AssignTagsToDomainOK struct {
	Payload *models.TagAssignmentResult
}

// IsSuccess returns true when this assign tags to domain o k response has a 2xx status code
func (o *AssignTagsToDomainOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this assign tags to domain o k response has a 3xx status code
func (o *AssignTagsToDomainOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to domain o k response has a 4xx status code
func (o *AssignTagsToDomainOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign tags to domain o k response has a 5xx status code
func (o *AssignTagsToDomainOK) IsServerError() bool {
	return false
}

// IsCode returns true when this assign tags to domain o k response a status code equal to that given
func (o *AssignTagsToDomainOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the assign tags to domain o k response
func (o *AssignTagsToDomainOK) Code() int {
	return 200
}

func (o *AssignTagsToDomainOK) Error() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/tags][%d] assignTagsToDomainOK  %+v", 200, o.Payload)
}

func (o *AssignTagsToDomainOK) String() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/tags][%d] assignTagsToDomainOK  %+v", 200, o.Payload)
}

func (o *AssignTagsToDomainOK) GetPayload() *models.TagAssignmentResult {
	return o.Payload
}

func (o *AssignTagsToDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TagAssignmentResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignTagsToDomainBadRequest creates a AssignTagsToDomainBadRequest with default headers values
func NewAssignTagsToDomainBadRequest() *AssignTagsToDomainBadRequest {
	return &AssignTagsToDomainBadRequest{}
}

/*
AssignTagsToDomainBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AssignTagsToDomainBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign tags to domain bad request response has a 2xx status code
func (o *AssignTagsToDomainBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign tags to domain bad request response has a 3xx status code
func (o *AssignTagsToDomainBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to domain bad request response has a 4xx status code
func (o *AssignTagsToDomainBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this assign tags to domain bad request response has a 5xx status code
func (o *AssignTagsToDomainBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this assign tags to domain bad request response a status code equal to that given
func (o *AssignTagsToDomainBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the assign tags to domain bad request response
func (o *AssignTagsToDomainBadRequest) Code() int {
	return 400
}

func (o *AssignTagsToDomainBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/tags][%d] assignTagsToDomainBadRequest  %+v", 400, o.Payload)
}

func (o *AssignTagsToDomainBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/tags][%d] assignTagsToDomainBadRequest  %+v", 400, o.Payload)
}

func (o *AssignTagsToDomainBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignTagsToDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignTagsToDomainInternalServerError creates a AssignTagsToDomainInternalServerError with default headers values
func NewAssignTagsToDomainInternalServerError() *AssignTagsToDomainInternalServerError {
	return &AssignTagsToDomainInternalServerError{}
}

/*
AssignTagsToDomainInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type AssignTagsToDomainInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign tags to domain internal server error response has a 2xx status code
func (o *AssignTagsToDomainInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign tags to domain internal server error response has a 3xx status code
func (o *AssignTagsToDomainInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to domain internal server error response has a 4xx status code
func (o *AssignTagsToDomainInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign tags to domain internal server error response has a 5xx status code
func (o *AssignTagsToDomainInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this assign tags to domain internal server error response a status code equal to that given
func (o *AssignTagsToDomainInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the assign tags to domain internal server error response
func (o *AssignTagsToDomainInternalServerError) Code() int {
	return 500
}

func (o *AssignTagsToDomainInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/tags][%d] assignTagsToDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignTagsToDomainInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/tags][%d] assignTagsToDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignTagsToDomainInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignTagsToDomainInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
