// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// RemoveTagsFromDomainReader is a Reader for the RemoveTagsFromDomain structure.
type RemoveTagsFromDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveTagsFromDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveTagsFromDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveTagsFromDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveTagsFromDomainInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/domains/{id}/tags] removeTagsFromDomain", response, response.Code())
	}
}

// NewRemoveTagsFromDomainOK creates a RemoveTagsFromDomainOK with default headers values
func NewRemoveTagsFromDomainOK() *RemoveTagsFromDomainOK {
	return &RemoveTagsFromDomainOK{}
}

/*
RemoveTagsFromDomainOK describes a response with status code 200, with default header values.

Ok
*/
type RemoveTagsFromDomainOK struct {
	Payload *models.TagAssignmentResult
}

// IsSuccess returns true when this remove tags from domain o k response has a 2xx status code
func (o *RemoveTagsFromDomainOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove tags from domain o k response has a 3xx status code
func (o *RemoveTagsFromDomainOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove tags from domain o k response has a 4xx status code
func (o *RemoveTagsFromDomainOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove tags from domain o k response has a 5xx status code
func (o *RemoveTagsFromDomainOK) IsServerError() bool {
	return false
}

// IsCode returns true when this remove tags from domain o k response a status code equal to that given
func (o *RemoveTagsFromDomainOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the remove tags from domain o k response
func (o *RemoveTagsFromDomainOK) Code() int {
	return 200
}

func (o *RemoveTagsFromDomainOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/domains/{id}/tags][%d] removeTagsFromDomainOK  %+v", 200, o.Payload)
}

func (o *RemoveTagsFromDomainOK) String() string {
	return fmt.Sprintf("[DELETE /v1/domains/{id}/tags][%d] removeTagsFromDomainOK  %+v", 200, o.Payload)
}

func (o *RemoveTagsFromDomainOK) GetPayload() *models.TagAssignmentResult {
	return o.Payload
}

func (o *RemoveTagsFromDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TagAssignmentResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveTagsFromDomainBadRequest creates a RemoveTagsFromDomainBadRequest with default headers values
func NewRemoveTagsFromDomainBadRequest() *RemoveTagsFromDomainBadRequest {
	return &RemoveTagsFromDomainBadRequest{}
}

/*
RemoveTagsFromDomainBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RemoveTagsFromDomainBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove tags from domain bad request response has a 2xx status code
func (o *RemoveTagsFromDomainBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove tags from domain bad request response has a 3xx status code
func (o *RemoveTagsFromDomainBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove tags from domain bad request response has a 4xx status code
func (o *RemoveTagsFromDomainBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove tags from domain bad request response has a 5xx status code
func (o *RemoveTagsFromDomainBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove tags from domain bad request response a status code equal to that given
func (o *RemoveTagsFromDomainBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the remove tags from domain bad request response
func (o *RemoveTagsFromDomainBadRequest) Code() int {
	return 400
}

func (o *RemoveTagsFromDomainBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/domains/{id}/tags][%d] removeTagsFromDomainBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveTagsFromDomainBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/domains/{id}/tags][%d] removeTagsFromDomainBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveTagsFromDomainBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveTagsFromDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveTagsFromDomainInternalServerError creates a RemoveTagsFromDomainInternalServerError with default headers values
func NewRemoveTagsFromDomainInternalServerError() *RemoveTagsFromDomainInternalServerError {
	return &RemoveTagsFromDomainInternalServerError{}
}

/*
RemoveTagsFromDomainInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type RemoveTagsFromDomainInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove tags from domain internal server error response has a 2xx status code
func (o *RemoveTagsFromDomainInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove tags from domain internal server error response has a 3xx status code
func (o *RemoveTagsFromDomainInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove tags from domain internal server error response has a 4xx status code
func (o *RemoveTagsFromDomainInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove tags from domain internal server error response has a 5xx status code
func (o *RemoveTagsFromDomainInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remove tags from domain internal server error response a status code equal to that given
func (o *RemoveTagsFromDomainInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remove tags from domain internal server error response
func (o *RemoveTagsFromDomainInternalServerError) Code() int {
	return 500
}

func (o *RemoveTagsFromDomainInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/domains/{id}/tags][%d] removeTagsFromDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveTagsFromDomainInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/domains/{id}/tags][%d] removeTagsFromDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveTagsFromDomainInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveTagsFromDomainInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
