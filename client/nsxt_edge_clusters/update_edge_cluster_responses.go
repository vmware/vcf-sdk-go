// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package nsxt_edge_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateEdgeClusterReader is a Reader for the UpdateEdgeCluster structure.
type UpdateEdgeClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEdgeClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateEdgeClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewUpdateEdgeClusterAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateEdgeClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateEdgeClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewUpdateEdgeClusterNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/edge-clusters/{id}] updateEdgeCluster", response, response.Code())
	}
}

// NewUpdateEdgeClusterOK creates a UpdateEdgeClusterOK with default headers values
func NewUpdateEdgeClusterOK() *UpdateEdgeClusterOK {
	return &UpdateEdgeClusterOK{}
}

/*
UpdateEdgeClusterOK describes a response with status code 200, with default header values.

OK
*/
type UpdateEdgeClusterOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this update edge cluster o k response has a 2xx status code
func (o *UpdateEdgeClusterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update edge cluster o k response has a 3xx status code
func (o *UpdateEdgeClusterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update edge cluster o k response has a 4xx status code
func (o *UpdateEdgeClusterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update edge cluster o k response has a 5xx status code
func (o *UpdateEdgeClusterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update edge cluster o k response a status code equal to that given
func (o *UpdateEdgeClusterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update edge cluster o k response
func (o *UpdateEdgeClusterOK) Code() int {
	return 200
}

func (o *UpdateEdgeClusterOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/edge-clusters/{id}][%d] updateEdgeClusterOK  %+v", 200, o.Payload)
}

func (o *UpdateEdgeClusterOK) String() string {
	return fmt.Sprintf("[PATCH /v1/edge-clusters/{id}][%d] updateEdgeClusterOK  %+v", 200, o.Payload)
}

func (o *UpdateEdgeClusterOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *UpdateEdgeClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeClusterAccepted creates a UpdateEdgeClusterAccepted with default headers values
func NewUpdateEdgeClusterAccepted() *UpdateEdgeClusterAccepted {
	return &UpdateEdgeClusterAccepted{}
}

/*
UpdateEdgeClusterAccepted describes a response with status code 202, with default header values.

Accepted
*/
type UpdateEdgeClusterAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this update edge cluster accepted response has a 2xx status code
func (o *UpdateEdgeClusterAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update edge cluster accepted response has a 3xx status code
func (o *UpdateEdgeClusterAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update edge cluster accepted response has a 4xx status code
func (o *UpdateEdgeClusterAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update edge cluster accepted response has a 5xx status code
func (o *UpdateEdgeClusterAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update edge cluster accepted response a status code equal to that given
func (o *UpdateEdgeClusterAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the update edge cluster accepted response
func (o *UpdateEdgeClusterAccepted) Code() int {
	return 202
}

func (o *UpdateEdgeClusterAccepted) Error() string {
	return fmt.Sprintf("[PATCH /v1/edge-clusters/{id}][%d] updateEdgeClusterAccepted  %+v", 202, o.Payload)
}

func (o *UpdateEdgeClusterAccepted) String() string {
	return fmt.Sprintf("[PATCH /v1/edge-clusters/{id}][%d] updateEdgeClusterAccepted  %+v", 202, o.Payload)
}

func (o *UpdateEdgeClusterAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *UpdateEdgeClusterAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeClusterBadRequest creates a UpdateEdgeClusterBadRequest with default headers values
func NewUpdateEdgeClusterBadRequest() *UpdateEdgeClusterBadRequest {
	return &UpdateEdgeClusterBadRequest{}
}

/*
UpdateEdgeClusterBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateEdgeClusterBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update edge cluster bad request response has a 2xx status code
func (o *UpdateEdgeClusterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update edge cluster bad request response has a 3xx status code
func (o *UpdateEdgeClusterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update edge cluster bad request response has a 4xx status code
func (o *UpdateEdgeClusterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update edge cluster bad request response has a 5xx status code
func (o *UpdateEdgeClusterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update edge cluster bad request response a status code equal to that given
func (o *UpdateEdgeClusterBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update edge cluster bad request response
func (o *UpdateEdgeClusterBadRequest) Code() int {
	return 400
}

func (o *UpdateEdgeClusterBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/edge-clusters/{id}][%d] updateEdgeClusterBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateEdgeClusterBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/edge-clusters/{id}][%d] updateEdgeClusterBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateEdgeClusterBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateEdgeClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeClusterInternalServerError creates a UpdateEdgeClusterInternalServerError with default headers values
func NewUpdateEdgeClusterInternalServerError() *UpdateEdgeClusterInternalServerError {
	return &UpdateEdgeClusterInternalServerError{}
}

/*
UpdateEdgeClusterInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type UpdateEdgeClusterInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update edge cluster internal server error response has a 2xx status code
func (o *UpdateEdgeClusterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update edge cluster internal server error response has a 3xx status code
func (o *UpdateEdgeClusterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update edge cluster internal server error response has a 4xx status code
func (o *UpdateEdgeClusterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update edge cluster internal server error response has a 5xx status code
func (o *UpdateEdgeClusterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update edge cluster internal server error response a status code equal to that given
func (o *UpdateEdgeClusterInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update edge cluster internal server error response
func (o *UpdateEdgeClusterInternalServerError) Code() int {
	return 500
}

func (o *UpdateEdgeClusterInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/edge-clusters/{id}][%d] updateEdgeClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateEdgeClusterInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/edge-clusters/{id}][%d] updateEdgeClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateEdgeClusterInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateEdgeClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeClusterNotImplemented creates a UpdateEdgeClusterNotImplemented with default headers values
func NewUpdateEdgeClusterNotImplemented() *UpdateEdgeClusterNotImplemented {
	return &UpdateEdgeClusterNotImplemented{}
}

/*
UpdateEdgeClusterNotImplemented describes a response with status code 501, with default header values.

Not Implemented
*/
type UpdateEdgeClusterNotImplemented struct {
	Payload *models.Error
}

// IsSuccess returns true when this update edge cluster not implemented response has a 2xx status code
func (o *UpdateEdgeClusterNotImplemented) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update edge cluster not implemented response has a 3xx status code
func (o *UpdateEdgeClusterNotImplemented) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update edge cluster not implemented response has a 4xx status code
func (o *UpdateEdgeClusterNotImplemented) IsClientError() bool {
	return false
}

// IsServerError returns true when this update edge cluster not implemented response has a 5xx status code
func (o *UpdateEdgeClusterNotImplemented) IsServerError() bool {
	return true
}

// IsCode returns true when this update edge cluster not implemented response a status code equal to that given
func (o *UpdateEdgeClusterNotImplemented) IsCode(code int) bool {
	return code == 501
}

// Code gets the status code for the update edge cluster not implemented response
func (o *UpdateEdgeClusterNotImplemented) Code() int {
	return 501
}

func (o *UpdateEdgeClusterNotImplemented) Error() string {
	return fmt.Sprintf("[PATCH /v1/edge-clusters/{id}][%d] updateEdgeClusterNotImplemented  %+v", 501, o.Payload)
}

func (o *UpdateEdgeClusterNotImplemented) String() string {
	return fmt.Sprintf("[PATCH /v1/edge-clusters/{id}][%d] updateEdgeClusterNotImplemented  %+v", 501, o.Payload)
}

func (o *UpdateEdgeClusterNotImplemented) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateEdgeClusterNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
