// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// ConnectVROPSWithDomainReader is a Reader for the ConnectVROPSWithDomain structure.
type ConnectVROPSWithDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConnectVROPSWithDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewConnectVROPSWithDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewConnectVROPSWithDomainAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConnectVROPSWithDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConnectVROPSWithDomainInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/vrops/domains] connectVropsWithDomain", response, response.Code())
	}
}

// NewConnectVROPSWithDomainOK creates a ConnectVROPSWithDomainOK with default headers values
func NewConnectVROPSWithDomainOK() *ConnectVROPSWithDomainOK {
	return &ConnectVROPSWithDomainOK{}
}

/*
ConnectVROPSWithDomainOK describes a response with status code 200, with default header values.

OK
*/
type ConnectVROPSWithDomainOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this connect Vrops with domain o k response has a 2xx status code
func (o *ConnectVROPSWithDomainOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this connect Vrops with domain o k response has a 3xx status code
func (o *ConnectVROPSWithDomainOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this connect Vrops with domain o k response has a 4xx status code
func (o *ConnectVROPSWithDomainOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this connect Vrops with domain o k response has a 5xx status code
func (o *ConnectVROPSWithDomainOK) IsServerError() bool {
	return false
}

// IsCode returns true when this connect Vrops with domain o k response a status code equal to that given
func (o *ConnectVROPSWithDomainOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the connect Vrops with domain o k response
func (o *ConnectVROPSWithDomainOK) Code() int {
	return 200
}

func (o *ConnectVROPSWithDomainOK) Error() string {
	return fmt.Sprintf("[PUT /v1/vrops/domains][%d] connectVropsWithDomainOK  %+v", 200, o.Payload)
}

func (o *ConnectVROPSWithDomainOK) String() string {
	return fmt.Sprintf("[PUT /v1/vrops/domains][%d] connectVropsWithDomainOK  %+v", 200, o.Payload)
}

func (o *ConnectVROPSWithDomainOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *ConnectVROPSWithDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectVROPSWithDomainAccepted creates a ConnectVROPSWithDomainAccepted with default headers values
func NewConnectVROPSWithDomainAccepted() *ConnectVROPSWithDomainAccepted {
	return &ConnectVROPSWithDomainAccepted{}
}

/*
ConnectVROPSWithDomainAccepted describes a response with status code 202, with default header values.

Accepted
*/
type ConnectVROPSWithDomainAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this connect Vrops with domain accepted response has a 2xx status code
func (o *ConnectVROPSWithDomainAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this connect Vrops with domain accepted response has a 3xx status code
func (o *ConnectVROPSWithDomainAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this connect Vrops with domain accepted response has a 4xx status code
func (o *ConnectVROPSWithDomainAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this connect Vrops with domain accepted response has a 5xx status code
func (o *ConnectVROPSWithDomainAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this connect Vrops with domain accepted response a status code equal to that given
func (o *ConnectVROPSWithDomainAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the connect Vrops with domain accepted response
func (o *ConnectVROPSWithDomainAccepted) Code() int {
	return 202
}

func (o *ConnectVROPSWithDomainAccepted) Error() string {
	return fmt.Sprintf("[PUT /v1/vrops/domains][%d] connectVropsWithDomainAccepted  %+v", 202, o.Payload)
}

func (o *ConnectVROPSWithDomainAccepted) String() string {
	return fmt.Sprintf("[PUT /v1/vrops/domains][%d] connectVropsWithDomainAccepted  %+v", 202, o.Payload)
}

func (o *ConnectVROPSWithDomainAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *ConnectVROPSWithDomainAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectVROPSWithDomainBadRequest creates a ConnectVROPSWithDomainBadRequest with default headers values
func NewConnectVROPSWithDomainBadRequest() *ConnectVROPSWithDomainBadRequest {
	return &ConnectVROPSWithDomainBadRequest{}
}

/*
ConnectVROPSWithDomainBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ConnectVROPSWithDomainBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this connect Vrops with domain bad request response has a 2xx status code
func (o *ConnectVROPSWithDomainBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this connect Vrops with domain bad request response has a 3xx status code
func (o *ConnectVROPSWithDomainBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this connect Vrops with domain bad request response has a 4xx status code
func (o *ConnectVROPSWithDomainBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this connect Vrops with domain bad request response has a 5xx status code
func (o *ConnectVROPSWithDomainBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this connect Vrops with domain bad request response a status code equal to that given
func (o *ConnectVROPSWithDomainBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the connect Vrops with domain bad request response
func (o *ConnectVROPSWithDomainBadRequest) Code() int {
	return 400
}

func (o *ConnectVROPSWithDomainBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/vrops/domains][%d] connectVropsWithDomainBadRequest  %+v", 400, o.Payload)
}

func (o *ConnectVROPSWithDomainBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/vrops/domains][%d] connectVropsWithDomainBadRequest  %+v", 400, o.Payload)
}

func (o *ConnectVROPSWithDomainBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConnectVROPSWithDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectVROPSWithDomainInternalServerError creates a ConnectVROPSWithDomainInternalServerError with default headers values
func NewConnectVROPSWithDomainInternalServerError() *ConnectVROPSWithDomainInternalServerError {
	return &ConnectVROPSWithDomainInternalServerError{}
}

/*
ConnectVROPSWithDomainInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ConnectVROPSWithDomainInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this connect Vrops with domain internal server error response has a 2xx status code
func (o *ConnectVROPSWithDomainInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this connect Vrops with domain internal server error response has a 3xx status code
func (o *ConnectVROPSWithDomainInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this connect Vrops with domain internal server error response has a 4xx status code
func (o *ConnectVROPSWithDomainInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this connect Vrops with domain internal server error response has a 5xx status code
func (o *ConnectVROPSWithDomainInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this connect Vrops with domain internal server error response a status code equal to that given
func (o *ConnectVROPSWithDomainInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the connect Vrops with domain internal server error response
func (o *ConnectVROPSWithDomainInternalServerError) Code() int {
	return 500
}

func (o *ConnectVROPSWithDomainInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/vrops/domains][%d] connectVropsWithDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *ConnectVROPSWithDomainInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/vrops/domains][%d] connectVropsWithDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *ConnectVROPSWithDomainInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConnectVROPSWithDomainInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
