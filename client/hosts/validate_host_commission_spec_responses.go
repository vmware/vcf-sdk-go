// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// ValidateHostCommissionSpecReader is a Reader for the ValidateHostCommissionSpec structure.
type ValidateHostCommissionSpecReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateHostCommissionSpecReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateHostCommissionSpecOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewValidateHostCommissionSpecAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateHostCommissionSpecBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewValidateHostCommissionSpecInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/hosts/validations] validateHostCommissionSpec", response, response.Code())
	}
}

// NewValidateHostCommissionSpecOK creates a ValidateHostCommissionSpecOK with default headers values
func NewValidateHostCommissionSpecOK() *ValidateHostCommissionSpecOK {
	return &ValidateHostCommissionSpecOK{}
}

/*
ValidateHostCommissionSpecOK describes a response with status code 200, with default header values.

OK
*/
type ValidateHostCommissionSpecOK struct {
	Payload *models.Validation
}

// IsSuccess returns true when this validate host commission spec o k response has a 2xx status code
func (o *ValidateHostCommissionSpecOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate host commission spec o k response has a 3xx status code
func (o *ValidateHostCommissionSpecOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate host commission spec o k response has a 4xx status code
func (o *ValidateHostCommissionSpecOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate host commission spec o k response has a 5xx status code
func (o *ValidateHostCommissionSpecOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate host commission spec o k response a status code equal to that given
func (o *ValidateHostCommissionSpecOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate host commission spec o k response
func (o *ValidateHostCommissionSpecOK) Code() int {
	return 200
}

func (o *ValidateHostCommissionSpecOK) Error() string {
	return fmt.Sprintf("[POST /v1/hosts/validations][%d] validateHostCommissionSpecOK  %+v", 200, o.Payload)
}

func (o *ValidateHostCommissionSpecOK) String() string {
	return fmt.Sprintf("[POST /v1/hosts/validations][%d] validateHostCommissionSpecOK  %+v", 200, o.Payload)
}

func (o *ValidateHostCommissionSpecOK) GetPayload() *models.Validation {
	return o.Payload
}

func (o *ValidateHostCommissionSpecOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateHostCommissionSpecAccepted creates a ValidateHostCommissionSpecAccepted with default headers values
func NewValidateHostCommissionSpecAccepted() *ValidateHostCommissionSpecAccepted {
	return &ValidateHostCommissionSpecAccepted{}
}

/*
ValidateHostCommissionSpecAccepted describes a response with status code 202, with default header values.

Accepted
*/
type ValidateHostCommissionSpecAccepted struct {
	Payload *models.Validation
}

// IsSuccess returns true when this validate host commission spec accepted response has a 2xx status code
func (o *ValidateHostCommissionSpecAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate host commission spec accepted response has a 3xx status code
func (o *ValidateHostCommissionSpecAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate host commission spec accepted response has a 4xx status code
func (o *ValidateHostCommissionSpecAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate host commission spec accepted response has a 5xx status code
func (o *ValidateHostCommissionSpecAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this validate host commission spec accepted response a status code equal to that given
func (o *ValidateHostCommissionSpecAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the validate host commission spec accepted response
func (o *ValidateHostCommissionSpecAccepted) Code() int {
	return 202
}

func (o *ValidateHostCommissionSpecAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/hosts/validations][%d] validateHostCommissionSpecAccepted  %+v", 202, o.Payload)
}

func (o *ValidateHostCommissionSpecAccepted) String() string {
	return fmt.Sprintf("[POST /v1/hosts/validations][%d] validateHostCommissionSpecAccepted  %+v", 202, o.Payload)
}

func (o *ValidateHostCommissionSpecAccepted) GetPayload() *models.Validation {
	return o.Payload
}

func (o *ValidateHostCommissionSpecAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateHostCommissionSpecBadRequest creates a ValidateHostCommissionSpecBadRequest with default headers values
func NewValidateHostCommissionSpecBadRequest() *ValidateHostCommissionSpecBadRequest {
	return &ValidateHostCommissionSpecBadRequest{}
}

/*
ValidateHostCommissionSpecBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ValidateHostCommissionSpecBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate host commission spec bad request response has a 2xx status code
func (o *ValidateHostCommissionSpecBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate host commission spec bad request response has a 3xx status code
func (o *ValidateHostCommissionSpecBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate host commission spec bad request response has a 4xx status code
func (o *ValidateHostCommissionSpecBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate host commission spec bad request response has a 5xx status code
func (o *ValidateHostCommissionSpecBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this validate host commission spec bad request response a status code equal to that given
func (o *ValidateHostCommissionSpecBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the validate host commission spec bad request response
func (o *ValidateHostCommissionSpecBadRequest) Code() int {
	return 400
}

func (o *ValidateHostCommissionSpecBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/hosts/validations][%d] validateHostCommissionSpecBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateHostCommissionSpecBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/hosts/validations][%d] validateHostCommissionSpecBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateHostCommissionSpecBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateHostCommissionSpecBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateHostCommissionSpecInternalServerError creates a ValidateHostCommissionSpecInternalServerError with default headers values
func NewValidateHostCommissionSpecInternalServerError() *ValidateHostCommissionSpecInternalServerError {
	return &ValidateHostCommissionSpecInternalServerError{}
}

/*
ValidateHostCommissionSpecInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ValidateHostCommissionSpecInternalServerError struct {
}

// IsSuccess returns true when this validate host commission spec internal server error response has a 2xx status code
func (o *ValidateHostCommissionSpecInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate host commission spec internal server error response has a 3xx status code
func (o *ValidateHostCommissionSpecInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate host commission spec internal server error response has a 4xx status code
func (o *ValidateHostCommissionSpecInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate host commission spec internal server error response has a 5xx status code
func (o *ValidateHostCommissionSpecInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate host commission spec internal server error response a status code equal to that given
func (o *ValidateHostCommissionSpecInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the validate host commission spec internal server error response
func (o *ValidateHostCommissionSpecInternalServerError) Code() int {
	return 500
}

func (o *ValidateHostCommissionSpecInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/hosts/validations][%d] validateHostCommissionSpecInternalServerError ", 500)
}

func (o *ValidateHostCommissionSpecInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/hosts/validations][%d] validateHostCommissionSpecInternalServerError ", 500)
}

func (o *ValidateHostCommissionSpecInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
