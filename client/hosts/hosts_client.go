// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new hosts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hosts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AssignTagsToHost(params *AssignTagsToHostParams, opts ...ClientOption) (*AssignTagsToHostOK, error)

	CommissionHosts(params *CommissionHostsParams, opts ...ClientOption) (*CommissionHostsOK, *CommissionHostsAccepted, error)

	DecommissionHosts(params *DecommissionHostsParams, opts ...ClientOption) (*DecommissionHostsOK, *DecommissionHostsAccepted, error)

	GetAssignableTagForHost(params *GetAssignableTagForHostParams, opts ...ClientOption) (*GetAssignableTagForHostOK, error)

	GetCriteria(params *GetCriteriaParams, opts ...ClientOption) (*GetCriteriaOK, error)

	GetCriterion(params *GetCriterionParams, opts ...ClientOption) (*GetCriterionOK, error)

	GetHost(params *GetHostParams, opts ...ClientOption) (*GetHostOK, error)

	GetHostCommissionValidationByID(params *GetHostCommissionValidationByIDParams, opts ...ClientOption) (*GetHostCommissionValidationByIDOK, error)

	GetHostQueryResponse1(params *GetHostQueryResponse1Params, opts ...ClientOption) (*GetHostQueryResponse1OK, error)

	GetHostTagManagerURL(params *GetHostTagManagerURLParams, opts ...ClientOption) (*GetHostTagManagerURLOK, error)

	GetHosts(params *GetHostsParams, opts ...ClientOption) (*GetHostsOK, error)

	GetTagsAssignedToHost(params *GetTagsAssignedToHostParams, opts ...ClientOption) (*GetTagsAssignedToHostOK, error)

	GetTagsAssignedToHosts(params *GetTagsAssignedToHostsParams, opts ...ClientOption) (*GetTagsAssignedToHostsOK, error)

	PostQuery(params *PostQueryParams, opts ...ClientOption) (*PostQueryOK, error)

	RemoveTagsFromHost(params *RemoveTagsFromHostParams, opts ...ClientOption) (*RemoveTagsFromHostOK, error)

	ValidateHostCommissionSpec(params *ValidateHostCommissionSpecParams, opts ...ClientOption) (*ValidateHostCommissionSpecOK, *ValidateHostCommissionSpecAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AssignTagsToHost assigns tags to a host
*/
func (a *Client) AssignTagsToHost(params *AssignTagsToHostParams, opts ...ClientOption) (*AssignTagsToHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignTagsToHostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignTagsToHost",
		Method:             "PUT",
		PathPattern:        "/v1/hosts/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignTagsToHostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignTagsToHostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignTagsToHost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CommissionHosts commissions the hosts
*/
func (a *Client) CommissionHosts(params *CommissionHostsParams, opts ...ClientOption) (*CommissionHostsOK, *CommissionHostsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommissionHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "commissionHosts",
		Method:             "POST",
		PathPattern:        "/v1/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CommissionHostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CommissionHostsOK:
		return value, nil, nil
	case *CommissionHostsAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for hosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DecommissionHosts decommissions the hosts
*/
func (a *Client) DecommissionHosts(params *DecommissionHostsParams, opts ...ClientOption) (*DecommissionHostsOK, *DecommissionHostsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDecommissionHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "decommissionHosts",
		Method:             "DELETE",
		PathPattern:        "/v1/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DecommissionHostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DecommissionHostsOK:
		return value, nil, nil
	case *DecommissionHostsAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for hosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssignableTagForHost gets tags assignable to a host
*/
func (a *Client) GetAssignableTagForHost(params *GetAssignableTagForHostParams, opts ...ClientOption) (*GetAssignableTagForHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssignableTagForHostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAssignableTagForHost",
		Method:             "GET",
		PathPattern:        "/v1/hosts/{id}/tags/assignable-tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssignableTagForHostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssignableTagForHostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAssignableTagForHost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCriteria gets all criteria
*/
func (a *Client) GetCriteria(params *GetCriteriaParams, opts ...ClientOption) (*GetCriteriaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCriteriaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCriteria",
		Method:             "GET",
		PathPattern:        "/v1/hosts/criteria",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCriteriaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCriteriaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCriteria: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCriterion gets a criterion
*/
func (a *Client) GetCriterion(params *GetCriterionParams, opts ...ClientOption) (*GetCriterionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCriterionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCriterion",
		Method:             "GET",
		PathPattern:        "/v1/hosts/criteria/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCriterionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCriterionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCriterion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHost gets a host by its ID
*/
func (a *Client) GetHost(params *GetHostParams, opts ...ClientOption) (*GetHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHost",
		Method:             "GET",
		PathPattern:        "/v1/hosts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHostCommissionValidationByID retrieves the results of a host commission validation by its ID
*/
func (a *Client) GetHostCommissionValidationByID(params *GetHostCommissionValidationByIDParams, opts ...ClientOption) (*GetHostCommissionValidationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostCommissionValidationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHostCommissionValidationByID",
		Method:             "GET",
		PathPattern:        "/v1/hosts/validations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHostCommissionValidationByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostCommissionValidationByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHostCommissionValidationByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHostQueryResponse1 gets query response
*/
func (a *Client) GetHostQueryResponse1(params *GetHostQueryResponse1Params, opts ...ClientOption) (*GetHostQueryResponse1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostQueryResponse1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHostQueryResponse_1",
		Method:             "GET",
		PathPattern:        "/v1/hosts/queries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHostQueryResponse1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostQueryResponse1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHostQueryResponse_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHostTagManagerURL gets host tag manager Url
*/
func (a *Client) GetHostTagManagerURL(params *GetHostTagManagerURLParams, opts ...ClientOption) (*GetHostTagManagerURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostTagManagerURLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHostTagManagerUrl",
		Method:             "GET",
		PathPattern:        "/v1/hosts/{id}/tags/tag-manager",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHostTagManagerURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostTagManagerURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHostTagManagerUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHosts gets all hosts
*/
func (a *Client) GetHosts(params *GetHostsParams, opts ...ClientOption) (*GetHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHosts",
		Method:             "GET",
		PathPattern:        "/v1/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTagsAssignedToHost gets tags assigned to host
*/
func (a *Client) GetTagsAssignedToHost(params *GetTagsAssignedToHostParams, opts ...ClientOption) (*GetTagsAssignedToHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagsAssignedToHostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagsAssignedToHost",
		Method:             "GET",
		PathPattern:        "/v1/hosts/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTagsAssignedToHostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagsAssignedToHostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagsAssignedToHost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTagsAssignedToHosts gets tags assigned to hosts
*/
func (a *Client) GetTagsAssignedToHosts(params *GetTagsAssignedToHostsParams, opts ...ClientOption) (*GetTagsAssignedToHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagsAssignedToHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagsAssignedToHosts",
		Method:             "GET",
		PathPattern:        "/v1/hosts/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTagsAssignedToHostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagsAssignedToHostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagsAssignedToHosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostQuery posts a query
*/
func (a *Client) PostQuery(params *PostQueryParams, opts ...ClientOption) (*PostQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postQuery",
		Method:             "POST",
		PathPattern:        "/v1/hosts/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveTagsFromHost removes tags from host
*/
func (a *Client) RemoveTagsFromHost(params *RemoveTagsFromHostParams, opts ...ClientOption) (*RemoveTagsFromHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTagsFromHostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeTagsFromHost",
		Method:             "DELETE",
		PathPattern:        "/v1/hosts/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveTagsFromHostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveTagsFromHostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeTagsFromHost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateHostCommissionSpec performs validation of the host commission spec specification
*/
func (a *Client) ValidateHostCommissionSpec(params *ValidateHostCommissionSpecParams, opts ...ClientOption) (*ValidateHostCommissionSpecOK, *ValidateHostCommissionSpecAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateHostCommissionSpecParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateHostCommissionSpec",
		Method:             "POST",
		PathPattern:        "/v1/hosts/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateHostCommissionSpecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateHostCommissionSpecOK:
		return value, nil, nil
	case *ValidateHostCommissionSpecAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for hosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
