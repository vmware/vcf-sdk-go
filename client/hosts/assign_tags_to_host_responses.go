// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// AssignTagsToHostReader is a Reader for the AssignTagsToHost structure.
type AssignTagsToHostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssignTagsToHostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAssignTagsToHostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAssignTagsToHostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAssignTagsToHostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/hosts/{id}/tags] assignTagsToHost", response, response.Code())
	}
}

// NewAssignTagsToHostOK creates a AssignTagsToHostOK with default headers values
func NewAssignTagsToHostOK() *AssignTagsToHostOK {
	return &AssignTagsToHostOK{}
}

/*
AssignTagsToHostOK describes a response with status code 200, with default header values.

Ok
*/
type AssignTagsToHostOK struct {
	Payload *models.TagAssignmentResult
}

// IsSuccess returns true when this assign tags to host o k response has a 2xx status code
func (o *AssignTagsToHostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this assign tags to host o k response has a 3xx status code
func (o *AssignTagsToHostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to host o k response has a 4xx status code
func (o *AssignTagsToHostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign tags to host o k response has a 5xx status code
func (o *AssignTagsToHostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this assign tags to host o k response a status code equal to that given
func (o *AssignTagsToHostOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the assign tags to host o k response
func (o *AssignTagsToHostOK) Code() int {
	return 200
}

func (o *AssignTagsToHostOK) Error() string {
	return fmt.Sprintf("[PUT /v1/hosts/{id}/tags][%d] assignTagsToHostOK  %+v", 200, o.Payload)
}

func (o *AssignTagsToHostOK) String() string {
	return fmt.Sprintf("[PUT /v1/hosts/{id}/tags][%d] assignTagsToHostOK  %+v", 200, o.Payload)
}

func (o *AssignTagsToHostOK) GetPayload() *models.TagAssignmentResult {
	return o.Payload
}

func (o *AssignTagsToHostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TagAssignmentResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignTagsToHostBadRequest creates a AssignTagsToHostBadRequest with default headers values
func NewAssignTagsToHostBadRequest() *AssignTagsToHostBadRequest {
	return &AssignTagsToHostBadRequest{}
}

/*
AssignTagsToHostBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AssignTagsToHostBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign tags to host bad request response has a 2xx status code
func (o *AssignTagsToHostBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign tags to host bad request response has a 3xx status code
func (o *AssignTagsToHostBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to host bad request response has a 4xx status code
func (o *AssignTagsToHostBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this assign tags to host bad request response has a 5xx status code
func (o *AssignTagsToHostBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this assign tags to host bad request response a status code equal to that given
func (o *AssignTagsToHostBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the assign tags to host bad request response
func (o *AssignTagsToHostBadRequest) Code() int {
	return 400
}

func (o *AssignTagsToHostBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/hosts/{id}/tags][%d] assignTagsToHostBadRequest  %+v", 400, o.Payload)
}

func (o *AssignTagsToHostBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/hosts/{id}/tags][%d] assignTagsToHostBadRequest  %+v", 400, o.Payload)
}

func (o *AssignTagsToHostBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignTagsToHostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignTagsToHostInternalServerError creates a AssignTagsToHostInternalServerError with default headers values
func NewAssignTagsToHostInternalServerError() *AssignTagsToHostInternalServerError {
	return &AssignTagsToHostInternalServerError{}
}

/*
AssignTagsToHostInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type AssignTagsToHostInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign tags to host internal server error response has a 2xx status code
func (o *AssignTagsToHostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign tags to host internal server error response has a 3xx status code
func (o *AssignTagsToHostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to host internal server error response has a 4xx status code
func (o *AssignTagsToHostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign tags to host internal server error response has a 5xx status code
func (o *AssignTagsToHostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this assign tags to host internal server error response a status code equal to that given
func (o *AssignTagsToHostInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the assign tags to host internal server error response
func (o *AssignTagsToHostInternalServerError) Code() int {
	return 500
}

func (o *AssignTagsToHostInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/hosts/{id}/tags][%d] assignTagsToHostInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignTagsToHostInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/hosts/{id}/tags][%d] assignTagsToHostInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignTagsToHostInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignTagsToHostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
