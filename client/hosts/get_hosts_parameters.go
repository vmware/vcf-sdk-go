// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetHostsParams creates a new GetHostsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetHostsParams() *GetHostsParams {
	return &GetHostsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetHostsParamsWithTimeout creates a new GetHostsParams object
// with the ability to set a timeout on a request.
func NewGetHostsParamsWithTimeout(timeout time.Duration) *GetHostsParams {
	return &GetHostsParams{
		timeout: timeout,
	}
}

// NewGetHostsParamsWithContext creates a new GetHostsParams object
// with the ability to set a context for a request.
func NewGetHostsParamsWithContext(ctx context.Context) *GetHostsParams {
	return &GetHostsParams{
		Context: ctx,
	}
}

// NewGetHostsParamsWithHTTPClient creates a new GetHostsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetHostsParamsWithHTTPClient(client *http.Client) *GetHostsParams {
	return &GetHostsParams{
		HTTPClient: client,
	}
}

/*
GetHostsParams contains all the parameters to send to the API endpoint

	for the get hosts operation.

	Typically these are written to a http.Request.
*/
type GetHostsParams struct {

	/* ClusterID.

	   ID of the Cluster
	*/
	ClusterID *string

	/* DatastoreName.

	   Name of the datastore
	*/
	DatastoreName *string

	/* DomainID.

	   ID of the Domain
	*/
	DomainID *string

	/* NetworkpoolID.

	   ID of the Network pool
	*/
	NetworkpoolID *string

	/* Status.

	   Status of the Host.One among: ASSIGNED, UNASSIGNED_USEABLE, UNASSIGNED_UNUSEABLE
	*/
	Status *string

	/* StorageType.

	   Type of the Storage.VMFS_FC
	*/
	StorageType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get hosts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetHostsParams) WithDefaults() *GetHostsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get hosts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetHostsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get hosts params
func (o *GetHostsParams) WithTimeout(timeout time.Duration) *GetHostsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get hosts params
func (o *GetHostsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get hosts params
func (o *GetHostsParams) WithContext(ctx context.Context) *GetHostsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get hosts params
func (o *GetHostsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get hosts params
func (o *GetHostsParams) WithHTTPClient(client *http.Client) *GetHostsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get hosts params
func (o *GetHostsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the get hosts params
func (o *GetHostsParams) WithClusterID(clusterID *string) *GetHostsParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the get hosts params
func (o *GetHostsParams) SetClusterID(clusterID *string) {
	o.ClusterID = clusterID
}

// WithDatastoreName adds the datastoreName to the get hosts params
func (o *GetHostsParams) WithDatastoreName(datastoreName *string) *GetHostsParams {
	o.SetDatastoreName(datastoreName)
	return o
}

// SetDatastoreName adds the datastoreName to the get hosts params
func (o *GetHostsParams) SetDatastoreName(datastoreName *string) {
	o.DatastoreName = datastoreName
}

// WithDomainID adds the domainID to the get hosts params
func (o *GetHostsParams) WithDomainID(domainID *string) *GetHostsParams {
	o.SetDomainID(domainID)
	return o
}

// SetDomainID adds the domainId to the get hosts params
func (o *GetHostsParams) SetDomainID(domainID *string) {
	o.DomainID = domainID
}

// WithNetworkpoolID adds the networkpoolID to the get hosts params
func (o *GetHostsParams) WithNetworkpoolID(networkpoolID *string) *GetHostsParams {
	o.SetNetworkpoolID(networkpoolID)
	return o
}

// SetNetworkpoolID adds the networkpoolId to the get hosts params
func (o *GetHostsParams) SetNetworkpoolID(networkpoolID *string) {
	o.NetworkpoolID = networkpoolID
}

// WithStatus adds the status to the get hosts params
func (o *GetHostsParams) WithStatus(status *string) *GetHostsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get hosts params
func (o *GetHostsParams) SetStatus(status *string) {
	o.Status = status
}

// WithStorageType adds the storageType to the get hosts params
func (o *GetHostsParams) WithStorageType(storageType *string) *GetHostsParams {
	o.SetStorageType(storageType)
	return o
}

// SetStorageType adds the storageType to the get hosts params
func (o *GetHostsParams) SetStorageType(storageType *string) {
	o.StorageType = storageType
}

// WriteToRequest writes these params to a swagger request
func (o *GetHostsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterID != nil {

		// query param clusterId
		var qrClusterID string

		if o.ClusterID != nil {
			qrClusterID = *o.ClusterID
		}
		qClusterID := qrClusterID
		if qClusterID != "" {

			if err := r.SetQueryParam("clusterId", qClusterID); err != nil {
				return err
			}
		}
	}

	if o.DatastoreName != nil {

		// query param datastoreName
		var qrDatastoreName string

		if o.DatastoreName != nil {
			qrDatastoreName = *o.DatastoreName
		}
		qDatastoreName := qrDatastoreName
		if qDatastoreName != "" {

			if err := r.SetQueryParam("datastoreName", qDatastoreName); err != nil {
				return err
			}
		}
	}

	if o.DomainID != nil {

		// query param domainId
		var qrDomainID string

		if o.DomainID != nil {
			qrDomainID = *o.DomainID
		}
		qDomainID := qrDomainID
		if qDomainID != "" {

			if err := r.SetQueryParam("domainId", qDomainID); err != nil {
				return err
			}
		}
	}

	if o.NetworkpoolID != nil {

		// query param networkpoolId
		var qrNetworkpoolID string

		if o.NetworkpoolID != nil {
			qrNetworkpoolID = *o.NetworkpoolID
		}
		qNetworkpoolID := qrNetworkpoolID
		if qNetworkpoolID != "" {

			if err := r.SetQueryParam("networkpoolId", qNetworkpoolID); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.StorageType != nil {

		// query param storageType
		var qrStorageType string

		if o.StorageType != nil {
			qrStorageType = *o.StorageType
		}
		qStorageType := qrStorageType
		if qStorageType != "" {

			if err := r.SetQueryParam("storageType", qStorageType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
