// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package avns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// ValidateAvnSpecReader is a Reader for the ValidateAvnSpec structure.
type ValidateAvnSpecReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateAvnSpecReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateAvnSpecOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewValidateAvnSpecInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/avns/validations] validateAvnSpec", response, response.Code())
	}
}

// NewValidateAvnSpecOK creates a ValidateAvnSpecOK with default headers values
func NewValidateAvnSpecOK() *ValidateAvnSpecOK {
	return &ValidateAvnSpecOK{}
}

/*
ValidateAvnSpecOK describes a response with status code 200, with default header values.

Validation of AVN Creation spec completed
*/
type ValidateAvnSpecOK struct {
	Payload *models.Validation
}

// IsSuccess returns true when this validate avn spec o k response has a 2xx status code
func (o *ValidateAvnSpecOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate avn spec o k response has a 3xx status code
func (o *ValidateAvnSpecOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate avn spec o k response has a 4xx status code
func (o *ValidateAvnSpecOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate avn spec o k response has a 5xx status code
func (o *ValidateAvnSpecOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate avn spec o k response a status code equal to that given
func (o *ValidateAvnSpecOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate avn spec o k response
func (o *ValidateAvnSpecOK) Code() int {
	return 200
}

func (o *ValidateAvnSpecOK) Error() string {
	return fmt.Sprintf("[POST /v1/avns/validations][%d] validateAvnSpecOK  %+v", 200, o.Payload)
}

func (o *ValidateAvnSpecOK) String() string {
	return fmt.Sprintf("[POST /v1/avns/validations][%d] validateAvnSpecOK  %+v", 200, o.Payload)
}

func (o *ValidateAvnSpecOK) GetPayload() *models.Validation {
	return o.Payload
}

func (o *ValidateAvnSpecOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateAvnSpecInternalServerError creates a ValidateAvnSpecInternalServerError with default headers values
func NewValidateAvnSpecInternalServerError() *ValidateAvnSpecInternalServerError {
	return &ValidateAvnSpecInternalServerError{}
}

/*
ValidateAvnSpecInternalServerError describes a response with status code 500, with default header values.

Unexpected error
*/
type ValidateAvnSpecInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate avn spec internal server error response has a 2xx status code
func (o *ValidateAvnSpecInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate avn spec internal server error response has a 3xx status code
func (o *ValidateAvnSpecInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate avn spec internal server error response has a 4xx status code
func (o *ValidateAvnSpecInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate avn spec internal server error response has a 5xx status code
func (o *ValidateAvnSpecInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate avn spec internal server error response a status code equal to that given
func (o *ValidateAvnSpecInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the validate avn spec internal server error response
func (o *ValidateAvnSpecInternalServerError) Code() int {
	return 500
}

func (o *ValidateAvnSpecInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/avns/validations][%d] validateAvnSpecInternalServerError  %+v", 500, o.Payload)
}

func (o *ValidateAvnSpecInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/avns/validations][%d] validateAvnSpecInternalServerError  %+v", 500, o.Payload)
}

func (o *ValidateAvnSpecInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateAvnSpecInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
