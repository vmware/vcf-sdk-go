// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package avns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new a v ns API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for a v ns API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAvns(params *CreateAvnsParams, opts ...ClientOption) (*CreateAvnsOK, *CreateAvnsAccepted, error)

	GetAvns(params *GetAvnsParams, opts ...ClientOption) (*GetAvnsOK, error)

	ValidateAvnSpec(params *ValidateAvnSpecParams, opts ...ClientOption) (*ValidateAvnSpecOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAvns creates application virtual networks a v n
*/
func (a *Client) CreateAvns(params *CreateAvnsParams, opts ...ClientOption) (*CreateAvnsOK, *CreateAvnsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAvnsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAvns",
		Method:             "POST",
		PathPattern:        "/v1/avns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAvnsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAvnsOK:
		return value, nil, nil
	case *CreateAvnsAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for avns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAvns retrieves application virtual network a v n details

Returns all matching AVNs
*/
func (a *Client) GetAvns(params *GetAvnsParams, opts ...ClientOption) (*GetAvnsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvnsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAvns",
		Method:             "GET",
		PathPattern:        "/v1/avns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAvnsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAvnsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAvns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateAvnSpec performs validation of the avns creation spec specification

Returns Validation report
*/
func (a *Client) ValidateAvnSpec(params *ValidateAvnSpecParams, opts ...ClientOption) (*ValidateAvnSpecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateAvnSpecParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateAvnSpec",
		Method:             "POST",
		PathPattern:        "/v1/avns/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateAvnSpecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateAvnSpecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateAvnSpec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
