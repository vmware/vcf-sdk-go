// Code generated by ogen, DO NOT EDIT.

package vcf

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// AddDatastoreToCluster implements addDatastoreToCluster operation.
//
// Mount a datastore to a cluster.
//
// POST /v1/clusters/{id}/datastores
func (UnimplementedHandler) AddDatastoreToCluster(ctx context.Context, req *DatastoreMountSpec, params AddDatastoreToClusterParams) (r AddDatastoreToClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AddIpPoolToNetworkOfNetworkPool implements addIpPoolToNetworkOfNetworkPool operation.
//
// Add an IP Pool to a Network of a Network Pool.
//
// POST /v1/network-pools/{id}/networks/{networkId}/ip-pools
func (UnimplementedHandler) AddIpPoolToNetworkOfNetworkPool(ctx context.Context, req *IpPool, params AddIpPoolToNetworkOfNetworkPoolParams) (r AddIpPoolToNetworkOfNetworkPoolRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AddLicenseKey implements addLicenseKey operation.
//
// Add a a new license key.
//
// POST /v1/license-keys
func (UnimplementedHandler) AddLicenseKey(ctx context.Context, req *LicenseKey) (r AddLicenseKeyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AddUsers implements addUsers operation.
//
// Add list of users.
//
// POST /v1/users
func (UnimplementedHandler) AddUsers(ctx context.Context, req []User) (r AddUsersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AddVasaProvider implements addVasaProvider operation.
//
// Add a VASA Provider.
//
// POST /v1/vasa-providers
func (UnimplementedHandler) AddVasaProvider(ctx context.Context, req *VasaProvider) (r AddVasaProviderRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AddVasaProviderStorageContainer implements addVasaProviderStorageContainer operation.
//
// Add the storage containers to a VASA Provider.
//
// POST /v1/vasa-providers/{id}/storage-containers
func (UnimplementedHandler) AddVasaProviderStorageContainer(ctx context.Context, req []StorageContainer, params AddVasaProviderStorageContainerParams) (r AddVasaProviderStorageContainerRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AddVasaProviderUser implements addVasaProviderUser operation.
//
// Add the users to a VASA Provider.
//
// POST /v1/vasa-providers/{id}/users
func (UnimplementedHandler) AddVasaProviderUser(ctx context.Context, req []VasaUser, params AddVasaProviderUserParams) (r AddVasaProviderUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AssignTagsToCluster implements assignTagsToCluster operation.
//
// Assign Tags to Cluster.
//
// PUT /v1/clusters/{id}/tags
func (UnimplementedHandler) AssignTagsToCluster(ctx context.Context, req *TagsSpec, params AssignTagsToClusterParams) (r AssignTagsToClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AssignTagsToDomain implements assignTagsToDomain operation.
//
// Assign tags to a domain.
//
// PUT /v1/domains/{id}/tags
func (UnimplementedHandler) AssignTagsToDomain(ctx context.Context, req *TagsSpec, params AssignTagsToDomainParams) (r AssignTagsToDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AssignTagsToHost implements assignTagsToHost operation.
//
// Assign tags to a host.
//
// PUT /v1/hosts/{id}/tags
func (UnimplementedHandler) AssignTagsToHost(ctx context.Context, req *TagsSpec, params AssignTagsToHostParams) (r AssignTagsToHostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CancelCredentialsTask implements cancelCredentialsTask operation.
//
// Cancel a failed credential task by its ID.
//
// DELETE /v1/credentials/tasks/{id}
func (UnimplementedHandler) CancelCredentialsTask(ctx context.Context, params CancelCredentialsTaskParams) (r CancelCredentialsTaskRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CancelTask implements cancelTask operation.
//
// Cancel a Task by ID, if it exists.
//
// DELETE /v1/tasks/{id}
func (UnimplementedHandler) CancelTask(ctx context.Context, params CancelTaskParams) (r CancelTaskRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CommissionHosts implements commissionHosts operation.
//
// Commission the Hosts.
//
// POST /v1/hosts
func (UnimplementedHandler) CommissionHosts(ctx context.Context, req []HostCommissionSpec) (r CommissionHostsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ComplianceAudit implements complianceAudit operation.
//
// Compliance audit of resource.
//
// POST /v1/domains/{id}/compliance-audits
func (UnimplementedHandler) ComplianceAudit(ctx context.Context, req *ComplianceAuditSpec, params ComplianceAuditParams) (r ComplianceAuditRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ConfigureCertificateAuthority implements configureCertificateAuthority operation.
//
// Update the configuration of a Certificate Authority.
//
// PATCH /v1/certificate-authorities
func (UnimplementedHandler) ConfigureCertificateAuthority(ctx context.Context, req *CertificateAuthorityCreationSpec) (r ConfigureCertificateAuthorityRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ConfigureDns implements configureDns operation.
//
// Update the DNS configuration.
//
// PUT /v1/system/dns-configuration
func (UnimplementedHandler) ConfigureDns(ctx context.Context, req *DnsConfiguration) (r ConfigureDnsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ConfigureNtp implements configureNtp operation.
//
// Update the NTP configuration.
//
// PUT /v1/system/ntp-configuration
func (UnimplementedHandler) ConfigureNtp(ctx context.Context, req *NtpConfiguration) (r ConfigureNtpRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ConnectOpenId implements connectOpenId operation.
//
// POST /v1/nsxt-clusters/oidcs
func (UnimplementedHandler) ConnectOpenId(ctx context.Context, req *NsxtOidcSpec) error {
	return ht.ErrNotImplemented
}

// ConnectVrliWithDomain implements connectVrliWithDomain operation.
//
// Connect or disconnect a domain with VMware Aria Operations for Logs.
//
// PUT /v1/vrli/domains
func (UnimplementedHandler) ConnectVrliWithDomain(ctx context.Context, req *DomainIntegration) (r *Task, _ error) {
	return r, ht.ErrNotImplemented
}

// ConnectVropsWithDomain implements connectVropsWithDomain operation.
//
// Connects/disconnects a workload domains with VMware Aria Operations.
//
// Deprecated: schema marks this operation as deprecated.
//
// PUT /v1/vrops/domains
func (UnimplementedHandler) ConnectVropsWithDomain(ctx context.Context, req *DomainIntegration) (r ConnectVropsWithDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateAvns implements createAvns operation.
//
// Create Application Virtual Networks (AVN).
//
// POST /v1/avns
func (UnimplementedHandler) CreateAvns(ctx context.Context, req *AvnsCreationSpec) (r CreateAvnsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateCertificateAuthority implements createCertificateAuthority operation.
//
// Creates a certificate authority. This is required to generate signed certificates by supporting
// CAs.
//
// PUT /v1/certificate-authorities
func (UnimplementedHandler) CreateCertificateAuthority(ctx context.Context, req *CertificateAuthorityCreationSpec) (r CreateCertificateAuthorityRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateCluster implements createCluster operation.
//
// Create a cluster and add to an existing domain.
//
// POST /v1/clusters
func (UnimplementedHandler) CreateCluster(ctx context.Context, req *ClusterCreationSpec) (r CreateClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateDomain implements createDomain operation.
//
// Create a domain.
//
// POST /v1/domains
func (UnimplementedHandler) CreateDomain(ctx context.Context, req *DomainCreationSpec) (r CreateDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateEdgeCluster implements createEdgeCluster operation.
//
// Create an NSX Edge Cluster.
//
// POST /v1/edge-clusters
func (UnimplementedHandler) CreateEdgeCluster(ctx context.Context, req *EdgeClusterCreationSpec) (r CreateEdgeClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateNetworkPool implements createNetworkPool operation.
//
// Create a Network Pool.
//
// POST /v1/network-pools
func (UnimplementedHandler) CreateNetworkPool(ctx context.Context, req *NetworkPool) (r CreateNetworkPoolRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateResourceWarning implements createResourceWarning operation.
//
// Create a new Resource Warning.
//
// POST /v1/resource-warnings
func (UnimplementedHandler) CreateResourceWarning(ctx context.Context, req *ResourceWarningCreationSpec) (r CreateResourceWarningRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateToken implements createToken operation.
//
// Creates access token and refresh token for user access.
//
// POST /v1/tokens
func (UnimplementedHandler) CreateToken(ctx context.Context, req *TokenCreationSpec) (r CreateTokenRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DecommissionHosts implements decommissionHosts operation.
//
// Decommission the Hosts.
//
// DELETE /v1/hosts
func (UnimplementedHandler) DecommissionHosts(ctx context.Context, req []HostDecommissionSpec) (r DecommissionHostsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteALBCluster implements deleteALBCluster operation.
//
// Deletes an NSX ALB Cluster by its ID.
//
// DELETE /v1/nsx-alb-clusters/{id}
func (UnimplementedHandler) DeleteALBCluster(ctx context.Context, params DeleteALBClusterParams) (r DeleteALBClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteAliasVersionsBySoftwareTypeAndBaseVersion implements deleteAliasVersionsBySoftwareTypeAndBaseVersion operation.
//
// Delete Version Alias Configuration by bundle component type, version, and aliases.
//
// DELETE /v1/system/settings/version-aliases/{bundleComponentType}/{version}
func (UnimplementedHandler) DeleteAliasVersionsBySoftwareTypeAndBaseVersion(ctx context.Context, req []string, params DeleteAliasVersionsBySoftwareTypeAndBaseVersionParams) (r DeleteAliasVersionsBySoftwareTypeAndBaseVersionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteBundle implements deleteBundle operation.
//
// Delete a Bundle by bundle ID.
//
// DELETE /v1/bundles/{id}
func (UnimplementedHandler) DeleteBundle(ctx context.Context, params DeleteBundleParams) (r DeleteBundleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteCluster implements deleteCluster operation.
//
// Delete a cluster from a domain if it has been previously initialized for deletion.
//
// DELETE /v1/clusters/{id}
func (UnimplementedHandler) DeleteCluster(ctx context.Context, params DeleteClusterParams) (r DeleteClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteCustomIsoById implements deleteCustomIsoById operation.
//
// Delete the Custom ISO based on ID.
//
// DELETE /v1/custom-isos/{custom_iso_id}
func (UnimplementedHandler) DeleteCustomIsoById(ctx context.Context, params DeleteCustomIsoByIdParams) (r DeleteCustomIsoByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteDepotSettings implements deleteDepotSettings operation.
//
// Delete the depot configuration if such is present within VCF.
//
// DELETE /v1/system/settings/depot
func (UnimplementedHandler) DeleteDepotSettings(ctx context.Context, params DeleteDepotSettingsParams) (r DeleteDepotSettingsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteDomain implements deleteDomain operation.
//
// Remove a domain if it has been previously initialized for deletion.
//
// DELETE /v1/domains/{id}
func (UnimplementedHandler) DeleteDomain(ctx context.Context, params DeleteDomainParams) (r DeleteDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteIpPoolFromNetworkOfNetworkPool implements deleteIpPoolFromNetworkOfNetworkPool operation.
//
// Delete an IP Pool from a Network of a Network Pool.
//
// DELETE /v1/network-pools/{id}/networks/{networkId}/ip-pools
func (UnimplementedHandler) DeleteIpPoolFromNetworkOfNetworkPool(ctx context.Context, req *IpPool, params DeleteIpPoolFromNetworkOfNetworkPoolParams) (r DeleteIpPoolFromNetworkOfNetworkPoolRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteNetworkPool implements deleteNetworkPool operation.
//
// Delete the Network Pool by the ID, if it exists and is unused.
//
// DELETE /v1/network-pools/{id}
func (UnimplementedHandler) DeleteNetworkPool(ctx context.Context, params DeleteNetworkPoolParams) (r DeleteNetworkPoolRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeletePersonality implements deletePersonality operation.
//
// Delete the personality based on either name or id.
//
// DELETE /v1/personalities
func (UnimplementedHandler) DeletePersonality(ctx context.Context, params DeletePersonalityParams) (r DeletePersonalityRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteReleaseByDomainID implements deleteReleaseByDomainID operation.
//
// Delete last selected upgrade version for the domain.
//
// DELETE /v1/releases/domains/{domainId}
func (UnimplementedHandler) DeleteReleaseByDomainID(ctx context.Context, params DeleteReleaseByDomainIDParams) (r DeleteReleaseByDomainIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteTrustedCertificate implements deleteTrustedCertificate operation.
//
// Delete a trusted certificate from the SDDC Manager.
//
// DELETE /v1/sddc-manager/trusted-certificates/{alias}
func (UnimplementedHandler) DeleteTrustedCertificate(ctx context.Context, params DeleteTrustedCertificateParams) (r DeleteTrustedCertificateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteVersionAliasBySoftwareType implements deleteVersionAliasBySoftwareType operation.
//
// Removes Version Alias Configuration by component type.
//
// DELETE /v1/system/settings/version-aliases/{bundleComponentType}
func (UnimplementedHandler) DeleteVersionAliasBySoftwareType(ctx context.Context, params DeleteVersionAliasBySoftwareTypeParams) (r DeleteVersionAliasBySoftwareTypeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeployVrslcm implements deployVrslcm operation.
//
// Triggers the VMware Aria Suite Lifecycle deployment operation and returns an URL in the headers to
// track the operation status.
//
// POST /v1/vrslcms
func (UnimplementedHandler) DeployVrslcm(ctx context.Context, req *VrslcmDeploymentSpec) (r DeployVrslcmRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DisableLocalAccount implements disableLocalAccount operation.
//
// Disable local account.
//
// DELETE /v1/users/local/admin
func (UnimplementedHandler) DisableLocalAccount(ctx context.Context) (r DisableLocalAccountRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainCreateValidation implements domainCreateValidation operation.
//
// Gets the status of given domain create validation workflow by given validation id.
//
// GET /v1/domains/validations/{id}
func (UnimplementedHandler) DomainCreateValidation(ctx context.Context, params DomainCreateValidationParams) (r DomainCreateValidationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DownloadCSR implements downloadCSR operation.
//
// Download available CSR(s) in tar.gz format.
//
// Deprecated: schema marks this operation as deprecated.
//
// GET /v1/domains/{id}/csrs/downloads
func (UnimplementedHandler) DownloadCSR(ctx context.Context, params DownloadCSRParams) (r DownloadCSRRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DownloadVsanHcl implements downloadVsanHcl operation.
//
// Download vSAN HCL if online connectivity is available. Timestamp of vSAN HCL on SDDC Manager is
// checked with what is available online before download. vSAN HCL is downloaded only if new data is
// available.
//
// PATCH /v1/vsan-hcl
func (UnimplementedHandler) DownloadVsanHcl(ctx context.Context) (r DownloadVsanHclRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ExportBringupDetailReport implements exportBringupDetailReport operation.
//
// Returns the bringup report. Reports are generated in PDF and CSV formats.
//
// GET /v1/sddcs/{id}/detail-report
func (UnimplementedHandler) ExportBringupDetailReport(ctx context.Context, params ExportBringupDetailReportParams) (r ExportBringupDetailReportRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ExportBringupValidationReport implements exportBringupValidationReport operation.
//
// Returns the bringup report for a validation. Reports are generated in PDF format.
//
// GET /v1/sddcs/validations/{validationId}/report
func (UnimplementedHandler) ExportBringupValidationReport(ctx context.Context, params ExportBringupValidationReportParams) (r ExportBringupValidationReportRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GenerateCertificates implements generateCertificates operation.
//
// Generate certificate(s) for the selected resource(s) in a domain. CA must be configured and CSR
// must be generated beforehand.
//
// PUT /v1/domains/{id}/certificates
func (UnimplementedHandler) GenerateCertificates(ctx context.Context, req *CertificatesGenerationSpec, params GenerateCertificatesParams) (r GenerateCertificatesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GenerateSyncClientToken implements generateSyncClientToken operation.
//
// Generates a new sync client token.
//
// POST /v1/identity-providers/{id}/sync-client
func (UnimplementedHandler) GenerateSyncClientToken(ctx context.Context, params GenerateSyncClientTokenParams) (r GenerateSyncClientTokenRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GeneratesCSRs implements generatesCSRs operation.
//
// Generate CSR(s) for the selected resource(s) in the domain.
// *Warning:*
// _Avoid using wildcard certificates. Instead, use subdomain-specific certificates that are rotated
// often. A compromised wildcard certificate can lead to security repercussions_.
//
// PUT /v1/domains/{id}/csrs
func (UnimplementedHandler) GeneratesCSRs(ctx context.Context, req *CsrsGenerationSpec, params GeneratesCSRsParams) (r GeneratesCSRsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetALBCluster implements getALBCluster operation.
//
// Retrieve an NSX ALB Cluster by its ID.
//
// GET /v1/nsx-alb-clusters/{id}
func (UnimplementedHandler) GetALBCluster(ctx context.Context, params GetALBClusterParams) (r GetALBClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetALBClusters implements getALBClusters operation.
//
// Retrieve a list of NSX ALB Clusters.
//
// GET /v1/nsx-alb-clusters
func (UnimplementedHandler) GetALBClusters(ctx context.Context, params GetALBClustersParams) (r GetALBClustersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetALBClustersFormFactors implements getALBClustersFormFactors operation.
//
// Retrieve a list of NSX ALB Clusters Form Factors.
//
// GET /v1/nsx-alb-clusters/form-factors
func (UnimplementedHandler) GetALBClustersFormFactors(ctx context.Context) (r GetALBClustersFormFactorsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAssignableTagForHost implements getAssignableTagForHost operation.
//
// Get tags assignable to a host.
//
// GET /v1/hosts/{id}/tags/assignable-tags
func (UnimplementedHandler) GetAssignableTagForHost(ctx context.Context, params GetAssignableTagForHostParams) (r GetAssignableTagForHostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAssignableTagsForDomain implements getAssignableTagsForDomain operation.
//
// Get tags assignable to a domain.
//
// GET /v1/domains/{id}/tags/assignable-tags
func (UnimplementedHandler) GetAssignableTagsForDomain(ctx context.Context, params GetAssignableTagsForDomainParams) (r GetAssignableTagsForDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAvns implements getAvns operation.
//
// Returns all matching AVNs.
//
// GET /v1/avns
func (UnimplementedHandler) GetAvns(ctx context.Context, params GetAvnsParams) (r GetAvnsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBackupConfiguration implements getBackupConfiguration operation.
//
// Retrieve the backup configuration for SDDC Manager and NSX Manager.
//
// GET /v1/system/backup-configuration
func (UnimplementedHandler) GetBackupConfiguration(ctx context.Context) (r GetBackupConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBackupLocation implements getBackupLocation operation.
//
// Retrieve the backup location details.
//
// GET /v1/system/backup-configuration/backup-locations
func (UnimplementedHandler) GetBackupLocation(ctx context.Context, params GetBackupLocationParams) (r GetBackupLocationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBringupAppInfo implements getBringupAppInfo operation.
//
// GET Method to retrieve information about Bringup app.
//
// GET /v1/sddcs/about
func (UnimplementedHandler) GetBringupAppInfo(ctx context.Context) (r GetBringupAppInfoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBringupTaskByID implements getBringupTaskByID operation.
//
// Get a bringup task by its id.
//
// GET /v1/sddcs/{id}
func (UnimplementedHandler) GetBringupTaskByID(ctx context.Context, params GetBringupTaskByIDParams) (r GetBringupTaskByIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBringupTasks implements getBringupTasks operation.
//
// Retrieve all bringup tasks.
//
// GET /v1/sddcs
func (UnimplementedHandler) GetBringupTasks(ctx context.Context) (r GetBringupTasksRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBringupValidation implements getBringupValidation operation.
//
// Retrieve the results of a bringup validation by its ID.
//
// GET /v1/sddcs/validations/{id}
func (UnimplementedHandler) GetBringupValidation(ctx context.Context, params GetBringupValidationParams) (r GetBringupValidationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBringupValidations implements getBringupValidations operation.
//
// Retrieve a list of bringup validations.
//
// GET /v1/sddcs/validations
func (UnimplementedHandler) GetBringupValidations(ctx context.Context) (r GetBringupValidationsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBundle implements getBundle operation.
//
// Get a Bundle.
//
// GET /v1/bundles/{id}
func (UnimplementedHandler) GetBundle(ctx context.Context, params GetBundleParams) (r GetBundleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBundles implements getBundles operation.
//
// Get all Bundles i.e uploaded bundles and also bundles available via depot access.
//
// GET /v1/bundles
func (UnimplementedHandler) GetBundles(ctx context.Context, params GetBundlesParams) (r GetBundlesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBundlesForSkipUpgrade implements getBundlesForSkipUpgrade operation.
//
// Get bundles for skip upgrade a domain from current version to target version.
//
// GET /v1/bundles/domains/{id}
func (UnimplementedHandler) GetBundlesForSkipUpgrade(ctx context.Context, params GetBundlesForSkipUpgradeParams) (r GetBundlesForSkipUpgradeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCSRs implements getCSRs operation.
//
// Get available CSR(s) in json format.
//
// GET /v1/domains/{id}/csrs
func (UnimplementedHandler) GetCSRs(ctx context.Context, params GetCSRsParams) (r GetCSRsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCeipStatus implements getCeipStatus operation.
//
// Get CEIP status and instance id.
//
// GET /v1/system/ceip
func (UnimplementedHandler) GetCeipStatus(ctx context.Context) (r GetCeipStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCertificateAuthorities implements getCertificateAuthorities operation.
//
// Get certificate authorities information.
//
// GET /v1/certificate-authorities
func (UnimplementedHandler) GetCertificateAuthorities(ctx context.Context) (r GetCertificateAuthoritiesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCertificateAuthorityById implements getCertificateAuthorityById operation.
//
// Get certificate authority information.
//
// GET /v1/certificate-authorities/{id}
func (UnimplementedHandler) GetCertificateAuthorityById(ctx context.Context, params GetCertificateAuthorityByIdParams) (r GetCertificateAuthorityByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCertificatesByDomain implements getCertificatesByDomain operation.
//
// View detailed metadata about the certificate(s) of all the resources in a domain.
//
// GET /v1/domains/{id}/resource-certificates
func (UnimplementedHandler) GetCertificatesByDomain(ctx context.Context, params GetCertificatesByDomainParams) (r GetCertificatesByDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCluster implements getCluster operation.
//
// Get a cluster by its ID.
//
// GET /v1/clusters/{id}
func (UnimplementedHandler) GetCluster(ctx context.Context, params GetClusterParams) (r GetClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetClusterCreateValidation implements getClusterCreateValidation operation.
//
// Gets the status of given cluster create validation workflow by given validation id.
//
// GET /v1/clusters/validations/{id}
func (UnimplementedHandler) GetClusterCreateValidation(ctx context.Context, params GetClusterCreateValidationParams) (r GetClusterCreateValidationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetClusterCriteria implements getClusterCriteria operation.
//
// Get all cluster criteria.
//
// GET /v1/domains/{domainId}/clusters/criteria
func (UnimplementedHandler) GetClusterCriteria(ctx context.Context, params GetClusterCriteriaParams) (r *PageOfClusterCriterion, _ error) {
	return r, ht.ErrNotImplemented
}

// GetClusterCriterion implements getClusterCriterion operation.
//
// Get a criterion to query for cluster.
//
// GET /v1/domains/{domainId}/clusters/criteria/{name}
func (UnimplementedHandler) GetClusterCriterion(ctx context.Context, params GetClusterCriterionParams) (r GetClusterCriterionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetClusterDatastores implements getClusterDatastores operation.
//
// Get the list of all datastores associated with the cluster.
//
// GET /v1/clusters/{id}/datastores
func (UnimplementedHandler) GetClusterDatastores(ctx context.Context, params GetClusterDatastoresParams) (r GetClusterDatastoresRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetClusterNetworkConfiguration implements getClusterNetworkConfiguration operation.
//
// Get cluster network configuration.
//
// POST /v1/clusters/{id}/network/queries
func (UnimplementedHandler) GetClusterNetworkConfiguration(ctx context.Context, req *ClusterNetworkConfigurationCriterion, params GetClusterNetworkConfigurationParams) (r GetClusterNetworkConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetClusterNetworkConfigurationQueryResponse implements getClusterNetworkConfigurationQueryResponse operation.
//
// The response retrieved is only applicable for pure L2 domain clusters.
//
// GET /v1/clusters/{id}/network/queries/{queryId}
func (UnimplementedHandler) GetClusterNetworkConfigurationQueryResponse(ctx context.Context, params GetClusterNetworkConfigurationQueryResponseParams) (r GetClusterNetworkConfigurationQueryResponseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetClusterQueryResponse implements getClusterQueryResponse operation.
//
// Get cluster query response.
//
// GET /v1/domains/{domainId}/clusters/{clusterName}/queries/{queryId}
func (UnimplementedHandler) GetClusterQueryResponse(ctx context.Context, params GetClusterQueryResponseParams) (r GetClusterQueryResponseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetClusterTagManagerUrl implements getClusterTagManagerUrl operation.
//
// Get Cluster Tag Manager Url.
//
// GET /v1/clusters/{id}/tags/tag-manager
func (UnimplementedHandler) GetClusterTagManagerUrl(ctx context.Context, params GetClusterTagManagerUrlParams) (r GetClusterTagManagerUrlRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetClusterUpdateValidation implements getClusterUpdateValidation operation.
//
// Gets the status of given cluster updates validation workflow by given validation id.
//
// GET /v1/clusters/{id}/validations/{validationId}
func (UnimplementedHandler) GetClusterUpdateValidation(ctx context.Context, params GetClusterUpdateValidationParams) (r GetClusterUpdateValidationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetClusters implements getClusters operation.
//
// Retrieve a list of clusters.
//
// GET /v1/clusters
func (UnimplementedHandler) GetClusters(ctx context.Context, params GetClustersParams) (r GetClustersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetClustersQueryResponse implements getClustersQueryResponse operation.
//
// Get clusters query response.
//
// GET /v1/domains/{domainId}/clusters/queries/{queryId}
func (UnimplementedHandler) GetClustersQueryResponse(ctx context.Context, params GetClustersQueryResponseParams) (r GetClustersQueryResponseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCompatibilityMatrices implements getCompatibilityMatrices operation.
//
// Get Compatibility Matrices.
//
// GET /v1/compatibility-matrices
func (UnimplementedHandler) GetCompatibilityMatrices(ctx context.Context) (r GetCompatibilityMatricesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCompatibilityMatrix implements getCompatibilityMatrix operation.
//
// Get Compatibility Matrix.
//
// GET /v1/compatibility-matrices/{compatibilityMatrixSource}
func (UnimplementedHandler) GetCompatibilityMatrix(ctx context.Context, params GetCompatibilityMatrixParams) (r GetCompatibilityMatrixRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCompatibilityMatrixContent implements getCompatibilityMatrixContent operation.
//
// Get Compatibility Matrix content.
//
// GET /v1/compatibility-matrices/{compatibilityMatrixSource}/content
func (UnimplementedHandler) GetCompatibilityMatrixContent(ctx context.Context, params GetCompatibilityMatrixContentParams) (r GetCompatibilityMatrixContentRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCompatibilityMatrixMetadata implements getCompatibilityMatrixMetadata operation.
//
// Get Compatibility Matrix Metadata.
//
// GET /v1/compatibility-matrices/{compatibilityMatrixSource}/metadata
func (UnimplementedHandler) GetCompatibilityMatrixMetadata(ctx context.Context, params GetCompatibilityMatrixMetadataParams) (r GetCompatibilityMatrixMetadataRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetComplianceAudit implements getComplianceAudit operation.
//
// Get compliance audit.
//
// GET /v1/compliance-audits/{complianceAuditId}
func (UnimplementedHandler) GetComplianceAudit(ctx context.Context, params GetComplianceAuditParams) (r GetComplianceAuditRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetComplianceAuditForADomain implements getComplianceAuditForADomain operation.
//
// Get compliance audit for a domain.
//
// GET /v1/domains/{id}/compliance-audits/{complianceAuditId}
func (UnimplementedHandler) GetComplianceAuditForADomain(ctx context.Context, params GetComplianceAuditForADomainParams) (r GetComplianceAuditForADomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetComplianceAuditHistory implements getComplianceAuditHistory operation.
//
// Get compliance audit history.
//
// GET /v1/compliance-audits
func (UnimplementedHandler) GetComplianceAuditHistory(ctx context.Context) (r GetComplianceAuditHistoryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetComplianceAuditHistoryForADomain implements getComplianceAuditHistoryForADomain operation.
//
// Get compliance audit history for a domain.
//
// GET /v1/domains/{id}/compliance-audits
func (UnimplementedHandler) GetComplianceAuditHistoryForADomain(ctx context.Context, params GetComplianceAuditHistoryForADomainParams) (r GetComplianceAuditHistoryForADomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetComplianceAuditItems implements getComplianceAuditItems operation.
//
// Get compliance audit items.
//
// GET /v1/compliance-audits/{complianceAuditId}/compliance-audit-items
func (UnimplementedHandler) GetComplianceAuditItems(ctx context.Context, params GetComplianceAuditItemsParams) (r GetComplianceAuditItemsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetComplianceAuditItemsForADomain implements getComplianceAuditItemsForADomain operation.
//
// Get compliance audit items for a domain.
//
// GET /v1/domains/{id}/compliance-audits/{complianceAuditId}/compliance-audit-items
func (UnimplementedHandler) GetComplianceAuditItemsForADomain(ctx context.Context, params GetComplianceAuditItemsForADomainParams) (r GetComplianceAuditItemsForADomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetComplianceAuditTask implements getComplianceAuditTask operation.
//
// Get compliance audit task.
//
// GET /v1/domains/{id}/compliance-audits/tasks/{taskId}
func (UnimplementedHandler) GetComplianceAuditTask(ctx context.Context, params GetComplianceAuditTaskParams) (r GetComplianceAuditTaskRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetComplianceConfigurations implements getComplianceConfigurations operation.
//
// Get a list of all compliance configurations.
//
// GET /v1/compliance-configurations
func (UnimplementedHandler) GetComplianceConfigurations(ctx context.Context, params GetComplianceConfigurationsParams) (r GetComplianceConfigurationsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetComplianceStandards implements getComplianceStandards operation.
//
// Get a list of all compliance standards.
//
// GET /v1/compliance-standards
func (UnimplementedHandler) GetComplianceStandards(ctx context.Context) (r GetComplianceStandardsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetConfigs implements getConfigs operation.
//
// Get configs associated with the given criteria, all if no criteria is provided.
//
// GET /v1/config-drifts
func (UnimplementedHandler) GetConfigs(ctx context.Context, params GetConfigsParams) (r GetConfigsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCredential implements getCredential operation.
//
// Retrieve a credential by its ID.
//
// GET /v1/credentials/{id}
func (UnimplementedHandler) GetCredential(ctx context.Context, params GetCredentialParams) (r GetCredentialRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCredentialTaskByResourceID implements getCredentialTaskByResourceID operation.
//
// Retriece a credential taks by resource ID.
//
// GET /v1/credentials/tasks/{id}/resource-credentials
func (UnimplementedHandler) GetCredentialTaskByResourceID(ctx context.Context, params GetCredentialTaskByResourceIDParams) (r GetCredentialTaskByResourceIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCredentials implements getCredentials operation.
//
// Retrieve a list of credentials.
//
// GET /v1/credentials
func (UnimplementedHandler) GetCredentials(ctx context.Context, params GetCredentialsParams) (r GetCredentialsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCredentialsSubTask implements getCredentialsSubTask operation.
//
// Retrieve a credential sub task by its ID.
//
// GET /v1/credentials/tasks/{id}/subtasks/{subtaskId}
func (UnimplementedHandler) GetCredentialsSubTask(ctx context.Context, params GetCredentialsSubTaskParams) (r GetCredentialsSubTaskRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCredentialsTask implements getCredentialsTask operation.
//
// Retrieve a credential task by ID.
//
// GET /v1/credentials/tasks/{id}
func (UnimplementedHandler) GetCredentialsTask(ctx context.Context, params GetCredentialsTaskParams) (r GetCredentialsTaskRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCredentialsTasks implements getCredentialsTasks operation.
//
// Retrieve a list of credential tasks.
//
// GET /v1/credentials/tasks
func (UnimplementedHandler) GetCredentialsTasks(ctx context.Context, params GetCredentialsTasksParams) (r GetCredentialsTasksRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCriteria implements getCriteria operation.
//
// Get all criteria.
//
// GET /v1/hosts/criteria
func (UnimplementedHandler) GetCriteria(ctx context.Context) (r *PageOfHostCriterion, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCriterion implements getCriterion operation.
//
// Get a criterion.
//
// GET /v1/hosts/criteria/{name}
func (UnimplementedHandler) GetCriterion(ctx context.Context, params GetCriterionParams) (r GetCriterionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCustomIsoById implements getCustomIsoById operation.
//
// Get the Custom ISO based matching the ID.
//
// GET /v1/custom-isos/{custom_iso_id}
func (UnimplementedHandler) GetCustomIsoById(ctx context.Context, params GetCustomIsoByIdParams) (r GetCustomIsoByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCustomIsos implements getCustomIsos operation.
//
// Get all Custom ISOs or Custom ISOs that match specified parameters.
//
// GET /v1/custom-isos
func (UnimplementedHandler) GetCustomIsos(ctx context.Context, params GetCustomIsosParams) (r GetCustomIsosRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCustomPatches implements getCustomPatches operation.
//
// Filter applicable patches (current/target vcf releases) per product type per domain.
//
// GET /v1/releases/domains/{domainId}/custom-patches
func (UnimplementedHandler) GetCustomPatches(ctx context.Context, params GetCustomPatchesParams) (r *FlexibleProductPatches, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDatastoreCriterion implements getDatastoreCriterion operation.
//
// Get a criterion to query for datastore.
//
// GET /v1/domains/{domainId}/datastores/criteria/{name}
func (UnimplementedHandler) GetDatastoreCriterion(ctx context.Context, params GetDatastoreCriterionParams) (r GetDatastoreCriterionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDatastoreCriterion1 implements getDatastoreCriterion_1 operation.
//
// Get a criterion to query for datastore.
//
// GET /v1/clusters/{id}/datastores/criteria/{name}
func (UnimplementedHandler) GetDatastoreCriterion1(ctx context.Context, params GetDatastoreCriterion1Params) (r GetDatastoreCriterion1Res, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDatastoreQueryResponse implements getDatastoreQueryResponse operation.
//
// Get Datastore query response.
//
// GET /v1/domains/{domainId}/datastores/queries/{queryId}
func (UnimplementedHandler) GetDatastoreQueryResponse(ctx context.Context, params GetDatastoreQueryResponseParams) (r GetDatastoreQueryResponseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDatastoreQueryResponse1 implements getDatastoreQueryResponse_1 operation.
//
// Get Datastore query response.
//
// GET /v1/clusters/{clusterId}/datastores/queries/{queryId}
func (UnimplementedHandler) GetDatastoreQueryResponse1(ctx context.Context, params GetDatastoreQueryResponse1Params) (r GetDatastoreQueryResponse1Res, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDatastoresCriteria implements getDatastoresCriteria operation.
//
// Get all datastore criteria.
//
// GET /v1/domains/{domainId}/datastores/criteria
func (UnimplementedHandler) GetDatastoresCriteria(ctx context.Context, params GetDatastoresCriteriaParams) (r *PageOfDatastoreCriterion, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDatastoresCriteria1 implements getDatastoresCriteria_1 operation.
//
// Get all datastore criteria.
//
// GET /v1/clusters/{id}/datastores/criteria
func (UnimplementedHandler) GetDatastoresCriteria1(ctx context.Context, params GetDatastoresCriteria1Params) (r *PageOfDatastoreCriterion, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDepotSettings implements getDepotSettings operation.
//
// Get the depot configuration. In a fresh setup, this would be empty.
//
// GET /v1/system/settings/depot
func (UnimplementedHandler) GetDepotSettings(ctx context.Context) (r GetDepotSettingsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDnsConfiguration implements getDnsConfiguration operation.
//
// Retrieve the DNS configuration.
//
// GET /v1/system/dns-configuration
func (UnimplementedHandler) GetDnsConfiguration(ctx context.Context) (r GetDnsConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDomain implements getDomain operation.
//
// Get a domain by its ID.
//
// GET /v1/domains/{id}
func (UnimplementedHandler) GetDomain(ctx context.Context, params GetDomainParams) (r GetDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDomainCertificates implements getDomainCertificates operation.
//
// Get latest generated certificate(s) in a domain.
//
// GET /v1/domains/{id}/certificates
func (UnimplementedHandler) GetDomainCertificates(ctx context.Context, params GetDomainCertificatesParams) (r GetDomainCertificatesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDomainEndpoints implements getDomainEndpoints operation.
//
// Retrieve a list of endpoints or URLs for a domain by its ID.
//
// GET /v1/domains/{id}/endpoints
func (UnimplementedHandler) GetDomainEndpoints(ctx context.Context, params GetDomainEndpointsParams) (r GetDomainEndpointsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDomainIsolationPrecheckStatus implements getDomainIsolationPrecheckStatus operation.
//
// Get the status of the Domain Isolation Precheck.
//
// GET /v1/domains/{domainId}/isolation-prechecks/{precheckId}
func (UnimplementedHandler) GetDomainIsolationPrecheckStatus(ctx context.Context, params GetDomainIsolationPrecheckStatusParams) (r GetDomainIsolationPrecheckStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDomainReleaseViewValidation implements getDomainReleaseViewValidation operation.
//
// Monitor the progress of domain target state validation task by the validation id.
//
// GET /v1/releases/domains/validations/{validationId}
func (UnimplementedHandler) GetDomainReleaseViewValidation(ctx context.Context, params GetDomainReleaseViewValidationParams) (r GetDomainReleaseViewValidationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDomainTagManagerUrl implements getDomainTagManagerUrl operation.
//
// Get Domain Tag Manager Url.
//
// GET /v1/domains/{id}/tags/tag-manager
func (UnimplementedHandler) GetDomainTagManagerUrl(ctx context.Context, params GetDomainTagManagerUrlParams) (r GetDomainTagManagerUrlRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDomainUpdateValidation implements getDomainUpdateValidation operation.
//
// Gets the status of given domain update validation workflow by given validation id.
//
// GET /v1/domains/{id}/validations/{validationId}
func (UnimplementedHandler) GetDomainUpdateValidation(ctx context.Context, params GetDomainUpdateValidationParams) (r GetDomainUpdateValidationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDomains implements getDomains operation.
//
// Retrieve a list of domains.
//
// GET /v1/domains
func (UnimplementedHandler) GetDomains(ctx context.Context, params GetDomainsParams) (r GetDomainsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetEdgeCluster implements getEdgeCluster operation.
//
// Retrieve an NSX Edge Cluster by its ID.
//
// GET /v1/edge-clusters/{id}
func (UnimplementedHandler) GetEdgeCluster(ctx context.Context, params GetEdgeClusterParams) (r GetEdgeClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetEdgeClusterQueryCriteria implements getEdgeClusterQueryCriteria operation.
//
// Get the Edge Cluster criterion list for the NSX query.
//
// GET /v1/edge-clusters/{edgeClusterId}/criteria
func (UnimplementedHandler) GetEdgeClusterQueryCriteria(ctx context.Context, params GetEdgeClusterQueryCriteriaParams) (r GetEdgeClusterQueryCriteriaRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetEdgeClusterValidationByID implements getEdgeClusterValidationByID operation.
//
// Retrieve the results of a NSX Edge Cluster validation by its ID.
//
// GET /v1/edge-clusters/validations/{id}
func (UnimplementedHandler) GetEdgeClusterValidationByID(ctx context.Context, params GetEdgeClusterValidationByIDParams) (r GetEdgeClusterValidationByIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetEdgeClusters implements getEdgeClusters operation.
//
// Retrieve a list of NSX Edge Clusters.
//
// GET /v1/edge-clusters
func (UnimplementedHandler) GetEdgeClusters(ctx context.Context, params GetEdgeClustersParams) (r GetEdgeClustersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetFIPSConfiguration implements getFIPSConfiguration operation.
//
// Retrieve VCF security FIPS mode.
//
// GET /v1/system/security/fips
func (UnimplementedHandler) GetFIPSConfiguration(ctx context.Context) (r GetFIPSConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetFutureReleases implements getFutureReleases operation.
//
// Returns all known to the system future target versions for a domain. If some of them are not
// allowed (e.g. stepping stone) includes message why. If the domain does not have a product
// configured at that point, that product will not be included in the BOM or patch bundle list in
// each release.
//
// GET /v1/releases/domains/{domainId}/future-releases
func (UnimplementedHandler) GetFutureReleases(ctx context.Context, params GetFutureReleasesParams) (r GetFutureReleasesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetHealthCheckStatus implements getHealthCheckStatus operation.
//
// Retrieve the status of the Health Check operations.
//
// GET /v1/system/health-summary/{id}
func (UnimplementedHandler) GetHealthCheckStatus(ctx context.Context, params GetHealthCheckStatusParams) (r GetHealthCheckStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetHealthCheckTask implements getHealthCheckTask operation.
//
// Retieve a list of Health Check tasks.
//
// GET /v1/system/health-summary
func (UnimplementedHandler) GetHealthCheckTask(ctx context.Context) (r GetHealthCheckTaskRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetHost implements getHost operation.
//
// Get a host by its ID.
//
// GET /v1/hosts/{id}
func (UnimplementedHandler) GetHost(ctx context.Context, params GetHostParams) (r GetHostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetHostCommissionValidationByID implements getHostCommissionValidationByID operation.
//
// Retrieve the results of a host commission validation by its ID.
//
// GET /v1/hosts/validations/{id}
func (UnimplementedHandler) GetHostCommissionValidationByID(ctx context.Context, params GetHostCommissionValidationByIDParams) (r GetHostCommissionValidationByIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetHostCriteria implements getHostCriteria operation.
//
// Get all host criteria.
//
// GET /v1/clusters/{id}/hosts/criteria
func (UnimplementedHandler) GetHostCriteria(ctx context.Context, params GetHostCriteriaParams) (r *PageOfHostCriterion, _ error) {
	return r, ht.ErrNotImplemented
}

// GetHostCriterion implements getHostCriterion operation.
//
// Get a criterion to query for host.
//
// GET /v1/clusters/{id}/hosts/criteria/{name}
func (UnimplementedHandler) GetHostCriterion(ctx context.Context, params GetHostCriterionParams) (r GetHostCriterionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetHostQueryResponse implements getHostQueryResponse operation.
//
// Get query response.
//
// GET /v1/hosts/queries/{id}
func (UnimplementedHandler) GetHostQueryResponse(ctx context.Context, params GetHostQueryResponseParams) (r GetHostQueryResponseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetHostQueryResponse1 implements getHostQueryResponse_1 operation.
//
// Get query response.
//
// GET /v1/clusters/{clusterId}/hosts/queries/{queryId}
func (UnimplementedHandler) GetHostQueryResponse1(ctx context.Context, params GetHostQueryResponse1Params) (r GetHostQueryResponse1Res, _ error) {
	return r, ht.ErrNotImplemented
}

// GetHostTagManagerUrl implements getHostTagManagerUrl operation.
//
// Get Host Tag Manager Url.
//
// GET /v1/hosts/{id}/tags/tag-manager
func (UnimplementedHandler) GetHostTagManagerUrl(ctx context.Context, params GetHostTagManagerUrlParams) (r GetHostTagManagerUrlRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetHosts implements getHosts operation.
//
// Get all hosts.
//
// GET /v1/hosts
func (UnimplementedHandler) GetHosts(ctx context.Context, params GetHostsParams) (r GetHostsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetHostsPrechecksResponse implements getHostsPrechecksResponse operation.
//
// Get host(s) prechecks response.
//
// GET /v1/hosts/prechecks/{id}
func (UnimplementedHandler) GetHostsPrechecksResponse(ctx context.Context, params GetHostsPrechecksResponseParams) (r GetHostsPrechecksResponseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetIdentityPrecheckResult implements getIdentityPrecheckResult operation.
//
// Get a list precheck result with warnings/errors.
//
// GET /v1/identity-broker/prechecks
func (UnimplementedHandler) GetIdentityPrecheckResult(ctx context.Context, params GetIdentityPrecheckResultParams) (r GetIdentityPrecheckResultRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetIdentityProviderById implements getIdentityProviderById operation.
//
// Get a specific identity irovider using its id.
//
// GET /v1/identity-providers/{id}
func (UnimplementedHandler) GetIdentityProviderById(ctx context.Context, params GetIdentityProviderByIdParams) (r GetIdentityProviderByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetIdentityProviders implements getIdentityProviders operation.
//
// Get a list of all identity providers.
//
// GET /v1/identity-providers
func (UnimplementedHandler) GetIdentityProviders(ctx context.Context) (r GetIdentityProvidersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLastAssessmentRunInfo implements getLastAssessmentRunInfo operation.
//
// Get information about the last assessment run.
//
// GET /v1/system/check-sets
func (UnimplementedHandler) GetLastAssessmentRunInfo(ctx context.Context, params GetLastAssessmentRunInfoParams) (r GetLastAssessmentRunInfoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLicenseKey implements getLicenseKey operation.
//
// Retrieve a license key.
//
// GET /v1/license-keys/{key}
func (UnimplementedHandler) GetLicenseKey(ctx context.Context, params GetLicenseKeyParams) (r GetLicenseKeyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLicenseKeys implements getLicenseKeys operation.
//
// Retrieve a list of license keys.
//
// GET /v1/license-keys
func (UnimplementedHandler) GetLicenseKeys(ctx context.Context, params GetLicenseKeysParams) (r GetLicenseKeysRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLicenseProductTypes implements getLicenseProductTypes operation.
//
// Get product types.
//
// GET /v1/license-keys/product-types
func (UnimplementedHandler) GetLicenseProductTypes(ctx context.Context) (r GetLicenseProductTypesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLocalAccount implements getLocalAccount operation.
//
// Get information on the local account.
//
// GET /v1/users/local/admin
func (UnimplementedHandler) GetLocalAccount(ctx context.Context) (r GetLocalAccountRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLocalOsUserAccounts implements getLocalOsUserAccounts operation.
//
// Returns a list of local OS user accounts from the SDDC Manager appliance.
//
// GET /v1/sddc-manager/local-os-user-accounts
func (UnimplementedHandler) GetLocalOsUserAccounts(ctx context.Context) (r GetLocalOsUserAccountsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNetworkOfNetworkPool implements getNetworkOfNetworkPool operation.
//
// Get a Network that is part of a Network Pool.
//
// GET /v1/network-pools/{id}/networks/{networkId}
func (UnimplementedHandler) GetNetworkOfNetworkPool(ctx context.Context, params GetNetworkOfNetworkPoolParams) (r GetNetworkOfNetworkPoolRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNetworkPool implements getNetworkPool operation.
//
// Get the Network Pools.
//
// GET /v1/network-pools
func (UnimplementedHandler) GetNetworkPool(ctx context.Context) (r GetNetworkPoolRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNetworkPoolByID implements getNetworkPoolByID operation.
//
// Get a Network Pool by ID, if it exists.
//
// GET /v1/network-pools/{id}
func (UnimplementedHandler) GetNetworkPoolByID(ctx context.Context, params GetNetworkPoolByIDParams) (r GetNetworkPoolByIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNetworksOfNetworkPool implements getNetworksOfNetworkPool operation.
//
// Get the Networks that are part of a Network Pool.
//
// GET /v1/network-pools/{id}/networks
func (UnimplementedHandler) GetNetworksOfNetworkPool(ctx context.Context, params GetNetworksOfNetworkPoolParams) (r GetNetworksOfNetworkPoolRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNsxCluster implements getNsxCluster operation.
//
// Retrieve the details of an NSX cluster by its ID.
//
// GET /v1/nsxt-clusters/{id}
func (UnimplementedHandler) GetNsxCluster(ctx context.Context, params GetNsxClusterParams) (r GetNsxClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNsxClusterQueryResponse implements getNsxClusterQueryResponse operation.
//
// Get NSX cluster query response.
//
// GET /v1/nsxt-clusters/queries/{id}
func (UnimplementedHandler) GetNsxClusterQueryResponse(ctx context.Context, params GetNsxClusterQueryResponseParams) (r GetNsxClusterQueryResponseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNsxClusters implements getNsxClusters operation.
//
// Retrieve a list of NSX clusters.
//
// GET /v1/nsxt-clusters
func (UnimplementedHandler) GetNsxClusters(ctx context.Context, params GetNsxClustersParams) (r GetNsxClustersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNsxCriteria implements getNsxCriteria operation.
//
// Get all NSX criteria.
//
// GET /v1/nsxt-clusters/criteria
func (UnimplementedHandler) GetNsxCriteria(ctx context.Context) (r *PageOfNsxTCriterion, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNsxCriterion implements getNsxCriterion operation.
//
// Get a NSX criterion.
//
// GET /v1/nsxt-clusters/criteria/{name}
func (UnimplementedHandler) GetNsxCriterion(ctx context.Context, params GetNsxCriterionParams) (r GetNsxCriterionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNsxIpAddressPool implements getNsxIpAddressPool operation.
//
// Retrieve an NSX IP Address Pool by its name.
//
// GET /v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools/{name}
func (UnimplementedHandler) GetNsxIpAddressPool(ctx context.Context, params GetNsxIpAddressPoolParams) (r GetNsxIpAddressPoolRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNsxIpAddressPools implements getNsxIpAddressPools operation.
//
// Retrive a list of NSX IP Address Pools by the NSX cluster ID.
//
// GET /v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools
func (UnimplementedHandler) GetNsxIpAddressPools(ctx context.Context, params GetNsxIpAddressPoolsParams) (r GetNsxIpAddressPoolsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNsxTransportZones implements getNsxTransportZones operation.
//
// Retrieve list of all NSX transport zones.
//
// GET /v1/nsxt-clusters/{nsxt-cluster-id}/transport-zones
func (UnimplementedHandler) GetNsxTransportZones(ctx context.Context, params GetNsxTransportZonesParams) (r GetNsxTransportZonesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNsxUpgradeResources implements getNsxUpgradeResources operation.
//
// Get the list NSX upgradable reosurce with resource metadata info.
//
// GET /v1/upgradables/domains/{domainId}/nsxt
func (UnimplementedHandler) GetNsxUpgradeResources(ctx context.Context, params GetNsxUpgradeResourcesParams) (r GetNsxUpgradeResourcesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNtpConfiguration implements getNtpConfiguration operation.
//
// Retrieve the NTP configuration.
//
// GET /v1/system/ntp-configuration
func (UnimplementedHandler) GetNtpConfiguration(ctx context.Context) (r GetNtpConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPasswordExpiration implements getPasswordExpiration operation.
//
// Fetch expiration details of passwords for a list of credentials.
//
// POST /v1/credentials/expirations
func (UnimplementedHandler) GetPasswordExpiration(ctx context.Context, req *CredentialsExpirationSpec) (r GetPasswordExpirationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPasswordExpirationByTaskID implements getPasswordExpirationByTaskID operation.
//
// Retrive a password expiration task by ID.
//
// GET /v1/credentials/expirations/{id}
func (UnimplementedHandler) GetPasswordExpirationByTaskID(ctx context.Context, params GetPasswordExpirationByTaskIDParams) (r GetPasswordExpirationByTaskIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPersonalities implements getPersonalities operation.
//
// Get the Personalities which are available via depot access.
//
// GET /v1/personalities
func (UnimplementedHandler) GetPersonalities(ctx context.Context, params GetPersonalitiesParams) (r GetPersonalitiesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPersonality implements getPersonality operation.
//
// Get the Personality for id.
//
// GET /v1/personalities/{personalityId}
func (UnimplementedHandler) GetPersonality(ctx context.Context, params GetPersonalityParams) (r GetPersonalityRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPrecheckTask implements getPrecheckTask operation.
//
// Monitor the progress of precheck task by the precheck task ID. As this API is deprecated, please
// use the new LCM Prechecks API - /v1/system/check-sets/{taskId}.
//
// Deprecated: schema marks this operation as deprecated.
//
// GET /v1/system/prechecks/tasks/{id}
func (UnimplementedHandler) GetPrecheckTask(ctx context.Context, params GetPrecheckTaskParams) (r GetPrecheckTaskRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProductVersionCatalog implements getProductVersionCatalog operation.
//
// Get product version catalog. There should be only one valid product version catalog in the System.
//
// GET /v1/product-version-catalog
func (UnimplementedHandler) GetProductVersionCatalog(ctx context.Context) (r GetProductVersionCatalogRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProxyConfiguration implements getProxyConfiguration operation.
//
// Get the current Proxy configuration.
//
// GET /v1/system/proxy-configuration
func (UnimplementedHandler) GetProxyConfiguration(ctx context.Context) (r GetProxyConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPsc implements getPsc operation.
//
// Retrieve details of a Platform Service Controller (PSC).
//
// GET /v1/pscs/{id}
func (UnimplementedHandler) GetPsc(ctx context.Context, params GetPscParams) (r GetPscRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPscs implements getPscs operation.
//
// Retrieve a list of Platform Service Controller (PSC).
//
// GET /v1/pscs
func (UnimplementedHandler) GetPscs(ctx context.Context) (r GetPscsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetReconciliationTask implements getReconciliationTask operation.
//
// Get config reconciliation task associated with the given task Id.
//
// GET /v1/config-drift-reconciliations/{taskId}
func (UnimplementedHandler) GetReconciliationTask(ctx context.Context, params GetReconciliationTaskParams) (r GetReconciliationTaskRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetReleaseByDomain implements getReleaseByDomain operation.
//
// Get last selected upgrade version for the domain.
//
// GET /v1/releases/domains/{domainId}
func (UnimplementedHandler) GetReleaseByDomain(ctx context.Context, params GetReleaseByDomainParams) (r GetReleaseByDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetReleaseByDomains implements getReleaseByDomains operation.
//
// Get last selected upgrade version for WLDs.
//
// GET /v1/releases/domains
func (UnimplementedHandler) GetReleaseByDomains(ctx context.Context) (r GetReleaseByDomainsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetReleases implements getReleases operation.
//
// Get all Releases, with option to get current release for a domain, get release by version or get
// future releases for a versionor get all the applicable target release.
//
// GET /v1/releases
func (UnimplementedHandler) GetReleases(ctx context.Context, params GetReleasesParams) (r GetReleasesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetResourceCertificatesValidationByID implements getResourceCertificatesValidationByID operation.
//
// Get the resource certificate validation result.
//
// GET /v1/domains/{id}/resource-certificates/validations/{validationId}
func (UnimplementedHandler) GetResourceCertificatesValidationByID(ctx context.Context, params GetResourceCertificatesValidationByIDParams) (r GetResourceCertificatesValidationByIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetResourceFunctionalities implements getResourceFunctionalities operation.
//
// Get Resource Functionalities.
//
// GET /v1/resource-functionalities
func (UnimplementedHandler) GetResourceFunctionalities(ctx context.Context, params GetResourceFunctionalitiesParams) (r GetResourceFunctionalitiesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetResourceWarning implements getResourceWarning operation.
//
// Get a Resource Warning by ID.
//
// GET /v1/resource-warnings/{id}
func (UnimplementedHandler) GetResourceWarning(ctx context.Context, params GetResourceWarningParams) (r GetResourceWarningRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetResourceWarnings implements getResourceWarnings operation.
//
// Get Resource Warnings.
//
// GET /v1/resource-warnings
func (UnimplementedHandler) GetResourceWarnings(ctx context.Context, params GetResourceWarningsParams) (r GetResourceWarningsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetResourcesFunctionalitiesAllowedGlobal implements getResourcesFunctionalitiesAllowedGlobal operation.
//
// Get Resource Functionalities Allowed Global Configuration.
//
// GET /v1/resource-functionalities/global
func (UnimplementedHandler) GetResourcesFunctionalitiesAllowedGlobal(ctx context.Context) (r GetResourcesFunctionalitiesAllowedGlobalRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetRestoreTask implements getRestoreTask operation.
//
// Retrieve the restore task.
//
// GET /v1/restores/tasks/{id}
func (UnimplementedHandler) GetRestoreTask(ctx context.Context, params GetRestoreTaskParams) (r GetRestoreTaskRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetResult implements getResult operation.
//
// Get the result for a given check run.
//
// GET /v1/system/check-sets/{runId}
func (UnimplementedHandler) GetResult(ctx context.Context, params GetResultParams) (r GetResultRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetRoles implements getRoles operation.
//
// Get a list of all roles.
//
// GET /v1/roles
func (UnimplementedHandler) GetRoles(ctx context.Context) (r GetRolesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSSODomainEntities implements getSSODomainEntities operation.
//
// Get a list of all entities in the SSO domain.
//
// GET /v1/sso-domains/{sso-domain}/entities
func (UnimplementedHandler) GetSSODomainEntities(ctx context.Context, params GetSSODomainEntitiesParams) (r GetSSODomainEntitiesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSSODomains implements getSSODomains operation.
//
// Get a list of all SSO domains.
//
// GET /v1/sso-domains
func (UnimplementedHandler) GetSSODomains(ctx context.Context) (r GetSSODomainsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSddcManager implements getSddcManager operation.
//
// Retrieve the details of an SDDC Manager by its id.
//
// GET /v1/sddc-managers/{id}
func (UnimplementedHandler) GetSddcManager(ctx context.Context, params GetSddcManagerParams) (r GetSddcManagerRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSddcManagerHistory implements getSddcManagerHistory operation.
//
// Retrieve the history of SDDC Manager by its id.
//
// GET /v1/sddc-managers/{id}/history
func (UnimplementedHandler) GetSddcManagerHistory(ctx context.Context, params GetSddcManagerHistoryParams) (r GetSddcManagerHistoryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSddcManagerInfo implements getSddcManagerInfo operation.
//
// Retrieves the details of SDDC Manager VM.
//
// GET /v1/sddcs/{id}/sddc-manager
func (UnimplementedHandler) GetSddcManagerInfo(ctx context.Context, params GetSddcManagerInfoParams) (r GetSddcManagerInfoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSddcManagers implements getSddcManagers operation.
//
// Retrieve a list of SDDC Managers.
//
// GET /v1/sddc-managers
func (UnimplementedHandler) GetSddcManagers(ctx context.Context) (r GetSddcManagersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSddcWs1bOidcInfo implements getSddcWs1bOidcInfo operation.
//
// Get the SDDC Manager WS1B OIDC Information.
//
// GET /v1/identity-broker/sddc-manager-oidc
func (UnimplementedHandler) GetSddcWs1bOidcInfo(ctx context.Context) (r GetSddcWs1bOidcInfoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSupportBundleStatus implements getSupportBundleStatus operation.
//
// Retrive the status of the Support Bundle operation.
//
// GET /v1/system/support-bundles/{id}
func (UnimplementedHandler) GetSupportBundleStatus(ctx context.Context, params GetSupportBundleStatusParams) (r GetSupportBundleStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSupportBundleTask implements getSupportBundleTask operation.
//
// Retrieve a list of Support Bundle tasks.
//
// GET /v1/system/support-bundles
func (UnimplementedHandler) GetSupportBundleTask(ctx context.Context) (r GetSupportBundleTaskRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSystemConfiguration implements getSystemConfiguration operation.
//
// Retrieve the system configuration.
//
// GET /v1/system
func (UnimplementedHandler) GetSystemConfiguration(ctx context.Context) (r GetSystemConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSystemRelease implements getSystemRelease operation.
//
// Returns release for the lowest deployed VCF version for a domain on the environment.If Management
// domain is ahead of WLD domain, VCF BOM version for the WLDdomain will be returned.
//
// GET /v1/releases/system
func (UnimplementedHandler) GetSystemRelease(ctx context.Context) (r GetSystemReleaseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTagAssignableForCluster implements getTagAssignableForCluster operation.
//
// Get tags assignable to a cluster.
//
// GET /v1/clusters/{id}/tags/assignable-tags
func (UnimplementedHandler) GetTagAssignableForCluster(ctx context.Context, params GetTagAssignableForClusterParams) (r GetTagAssignableForClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTagsAssignedToCluster implements getTagsAssignedToCluster operation.
//
// Get tags assigned to a cluster by its ID.
//
// GET /v1/clusters/{id}/tags
func (UnimplementedHandler) GetTagsAssignedToCluster(ctx context.Context, params GetTagsAssignedToClusterParams) (r GetTagsAssignedToClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTagsAssignedToClusters implements getTagsAssignedToClusters operation.
//
// Get tags assigned to clusters.
//
// GET /v1/clusters/tags
func (UnimplementedHandler) GetTagsAssignedToClusters(ctx context.Context) (r GetTagsAssignedToClustersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTagsAssignedToDomain implements getTagsAssignedToDomain operation.
//
// Get tags assigned to a domain.
//
// GET /v1/domains/{id}/tags
func (UnimplementedHandler) GetTagsAssignedToDomain(ctx context.Context, params GetTagsAssignedToDomainParams) (r GetTagsAssignedToDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTagsAssignedToDomains implements getTagsAssignedToDomains operation.
//
// Get tags assigned to all domains.
//
// GET /v1/domains/tags
func (UnimplementedHandler) GetTagsAssignedToDomains(ctx context.Context) (r GetTagsAssignedToDomainsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTagsAssignedToHost implements getTagsAssignedToHost operation.
//
// Get Tags assigned to Host.
//
// GET /v1/hosts/{id}/tags
func (UnimplementedHandler) GetTagsAssignedToHost(ctx context.Context, params GetTagsAssignedToHostParams) (r GetTagsAssignedToHostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTagsAssignedToHosts implements getTagsAssignedToHosts operation.
//
// Get Tags assigned to Hosts.
//
// GET /v1/hosts/tags
func (UnimplementedHandler) GetTagsAssignedToHosts(ctx context.Context) (r GetTagsAssignedToHostsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTask implements getTask operation.
//
// Get a Task by ID, if it exists.
//
// GET /v1/tasks/{id}
func (UnimplementedHandler) GetTask(ctx context.Context, params GetTaskParams) (r GetTaskRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTasks implements getTasks operation.
//
// Get the tasks.
//
// GET /v1/tasks
func (UnimplementedHandler) GetTasks(ctx context.Context, params GetTasksParams) (r GetTasksRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTrustedCertificates implements getTrustedCertificates operation.
//
// Retrieve all trusted certificates from SDDC Manager.
//
// GET /v1/sddc-manager/trusted-certificates
func (UnimplementedHandler) GetTrustedCertificates(ctx context.Context) (r GetTrustedCertificatesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUiUsers implements getUiUsers operation.
//
// Retrieve a list of users assigned access via SDDC Manager.
//
// GET /v1/users/ui
func (UnimplementedHandler) GetUiUsers(ctx context.Context) (r GetUiUsersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUpgradables implements getUpgradables operation.
//
// Fetches the list of Upgradables in the System. Only one Upgradable becomes AVAILABLE for Upgrade.
// The Upgradables provides information that can be use for Precheck API and also in the actual
// Upgrade API call.
//
// GET /v1/system/upgradables
func (UnimplementedHandler) GetUpgradables(ctx context.Context) (r GetUpgradablesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUpgradablesByDomain implements getUpgradablesByDomain operation.
//
// Fetches the list of Upgradables for a given domain. If a target version is provided, Upgradables
// that are required for given target version become Available. The Upgradables providesinformation
// that can be use for Precheck API and also in the actual Upgrade API call.This API is used only for
// management domain, for all cases please use v1/system/upgradables.
//
// GET /v1/upgradables/domains/{domainId}
func (UnimplementedHandler) GetUpgradablesByDomain(ctx context.Context, params GetUpgradablesByDomainParams) (r GetUpgradablesByDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUpgradablesClusters implements getUpgradablesClusters operation.
//
// Fetches the list of available hardware support managers and configured hardware support managers
// for the give resource along with the hardware support packages and Software details.
//
// GET /v1/upgradables/domains/{domainId}/clusters
func (UnimplementedHandler) GetUpgradablesClusters(ctx context.Context, params GetUpgradablesClustersParams) (r GetUpgradablesClustersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUpgradeById implements getUpgradeById operation.
//
// Retrieve an upgrade by ID.
//
// GET /v1/upgrades/{upgradeId}
func (UnimplementedHandler) GetUpgradeById(ctx context.Context, params GetUpgradeByIdParams) (r GetUpgradeByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUpgradePrecheckByID implements getUpgradePrecheckByID operation.
//
// Gets upgrade precheck details.
//
// GET /v1/upgrades/{upgradeId}/prechecks/{precheckId}
func (UnimplementedHandler) GetUpgradePrecheckByID(ctx context.Context, params GetUpgradePrecheckByIDParams) (r GetUpgradePrecheckByIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUpgrades implements getUpgrades operation.
//
// Retrieve a list of upgrades.
//
// GET /v1/upgrades
func (UnimplementedHandler) GetUpgrades(ctx context.Context, params GetUpgradesParams) (r GetUpgradesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUsers implements getUsers operation.
//
// Get a list of all users.
//
// GET /v1/users
func (UnimplementedHandler) GetUsers(ctx context.Context) (r GetUsersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetValidationOfDnsConfiguration implements getValidationOfDnsConfiguration operation.
//
// Retrieve the results of a DNS configuration validation by its ID.
//
// GET /v1/system/dns-configuration/validations/{id}
func (UnimplementedHandler) GetValidationOfDnsConfiguration(ctx context.Context, params GetValidationOfDnsConfigurationParams) (r GetValidationOfDnsConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetValidationOfNtpConfiguration implements getValidationOfNtpConfiguration operation.
//
// Retrieve the results of a NTP configuration  validation by its ID.
//
// GET /v1/system/ntp-configuration/validations/{id}
func (UnimplementedHandler) GetValidationOfNtpConfiguration(ctx context.Context, params GetValidationOfNtpConfigurationParams) (r GetValidationOfNtpConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetValidationResult implements getValidationResult operation.
//
// GET /v1/nsxt-clusters/ip-address-pools/validations/{id}
func (UnimplementedHandler) GetValidationResult(ctx context.Context, params GetValidationResultParams) (r *Validation, _ error) {
	return r, ht.ErrNotImplemented
}

// GetValidationsOfDNSConfiguration implements getValidationsOfDNSConfiguration operation.
//
// Retrieve a list of DNS configuation validations.
//
// GET /v1/system/dns-configuration/validations
func (UnimplementedHandler) GetValidationsOfDNSConfiguration(ctx context.Context, params GetValidationsOfDNSConfigurationParams) (r GetValidationsOfDNSConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetValidationsOfNtpConfiguration implements getValidationsOfNtpConfiguration operation.
//
// Retrieve a list of NTP configuation validations.
//
// GET /v1/system/ntp-configuration/validations
func (UnimplementedHandler) GetValidationsOfNtpConfiguration(ctx context.Context, params GetValidationsOfNtpConfigurationParams) (r GetValidationsOfNtpConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVasaProvider implements getVasaProvider operation.
//
// Get a VASA Provider.
//
// GET /v1/vasa-providers/{id}
func (UnimplementedHandler) GetVasaProvider(ctx context.Context, params GetVasaProviderParams) (r GetVasaProviderRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVasaProviderStorageContainers implements getVasaProviderStorageContainers operation.
//
// Get the storage containers of a VASA Provider.
//
// GET /v1/vasa-providers/{id}/storage-containers
func (UnimplementedHandler) GetVasaProviderStorageContainers(ctx context.Context, params GetVasaProviderStorageContainersParams) (r GetVasaProviderStorageContainersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVasaProviderUser implements getVasaProviderUser operation.
//
// Get the users of a VASA Provider.
//
// GET /v1/vasa-providers/{id}/users
func (UnimplementedHandler) GetVasaProviderUser(ctx context.Context, params GetVasaProviderUserParams) (r GetVasaProviderUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVasaProviderValidation implements getVasaProviderValidation operation.
//
// Get the status of the validation of the VASA Provider.
//
// GET /v1/vasa-providers/validations/{id}
func (UnimplementedHandler) GetVasaProviderValidation(ctx context.Context, params GetVasaProviderValidationParams) (r GetVasaProviderValidationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVasaProviders implements getVasaProviders operation.
//
// Get the VASA Providers.
//
// GET /v1/vasa-providers
func (UnimplementedHandler) GetVasaProviders(ctx context.Context) (r GetVasaProvidersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVcenter implements getVcenter operation.
//
// Retrieve a vCenter Server by its ID.
//
// GET /v1/vcenters/{id}
func (UnimplementedHandler) GetVcenter(ctx context.Context, params GetVcenterParams) (r GetVcenterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVcenters implements getVcenters operation.
//
// Retrieve a list of vCenter Servers.
//
// GET /v1/vcenters
func (UnimplementedHandler) GetVcenters(ctx context.Context, params GetVcentersParams) (r GetVcentersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVcfService implements getVcfService operation.
//
// Retrieve an SDDC Manager service by its ID.
//
// GET /v1/vcf-services/{id}
func (UnimplementedHandler) GetVcfService(ctx context.Context, params GetVcfServiceParams) (r GetVcfServiceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVcfServices implements getVcfServices operation.
//
// Retrieve a list of SDDC Manager services.
//
// GET /v1/vcf-services
func (UnimplementedHandler) GetVcfServices(ctx context.Context) (r GetVcfServicesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVdses implements getVdses operation.
//
// Get the list of VDSes of a cluster.
//
// GET /v1/clusters/{clusterId}/vdses
func (UnimplementedHandler) GetVdses(ctx context.Context, params GetVdsesParams) (r GetVdsesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVersionAliasConfiguration implements getVersionAliasConfiguration operation.
//
// Get the Version Alias Configuration.
//
// GET /v1/system/settings/version-aliases
func (UnimplementedHandler) GetVersionAliasConfiguration(ctx context.Context) (r GetVersionAliasConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVras implements getVras operation.
//
// Retrieve a list of VMware Aria Automation instances.
//
// GET /v1/vras
func (UnimplementedHandler) GetVras(ctx context.Context) (r *PageOfVra, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVrliIntegratedDomains implements getVrliIntegratedDomains operation.
//
// Retrieve a list of VMware Aria Operations for Logs integration status for domains.
//
// GET /v1/vrli/domains
func (UnimplementedHandler) GetVrliIntegratedDomains(ctx context.Context) (r *PageOfDomainIntegration, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVrlis implements getVrlis operation.
//
// Retrieve a list of VMware Aria Operations for Logs instances.
//
// GET /v1/vrlis
func (UnimplementedHandler) GetVrlis(ctx context.Context) (r *PageOfVrli, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVropsIntegratedDomains implements getVropsIntegratedDomains operation.
//
// Retrieves the existing  domains and their connection status with Aria Operations.
//
// Deprecated: schema marks this operation as deprecated.
//
// GET /v1/vrops/domains
func (UnimplementedHandler) GetVropsIntegratedDomains(ctx context.Context) (r *PageOfDomainIntegration, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVropses implements getVropses operation.
//
// Retrieve a list of VMware Aria Operations instances.
//
// GET /v1/vropses
func (UnimplementedHandler) GetVropses(ctx context.Context) (r *PageOfVrops, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVrslcm implements getVrslcm operation.
//
// Gets the complete information about the existing VMware Aria Suite Lifecycle instance.
//
// GET /v1/vrslcm
func (UnimplementedHandler) GetVrslcm(ctx context.Context) (r GetVrslcmRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVrslcmStatus implements getVrslcmStatus operation.
//
// Get status on the VMware Aria Suite Lifecycle product and availability of different actions.
//
// GET /v1/vrslcm/status
func (UnimplementedHandler) GetVrslcmStatus(ctx context.Context) (r GetVrslcmStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVrslcmValidation implements getVrslcmValidation operation.
//
// Gets the status of given VMware Aria Suite Lifecycle validation workflow by given validation id.
//
// GET /v1/vrslcms/validations/{id}
func (UnimplementedHandler) GetVrslcmValidation(ctx context.Context, params GetVrslcmValidationParams) (r GetVrslcmValidationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVrslcms implements getVrslcms operation.
//
// Get all existing VMware Aria Suite Lifecycle instances.
//
// GET /v1/vrslcms
func (UnimplementedHandler) GetVrslcms(ctx context.Context) (r *PageOfVrslcm, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVsanHclAttributes implements getVsanHclAttributes operation.
//
// Attributes of vSAN HCL data such as timestamp of last update.
//
// GET /v1/vsan-hcl/attributes
func (UnimplementedHandler) GetVsanHclAttributes(ctx context.Context) (r GetVsanHclAttributesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVsanHclConfiguration implements getVsanHclConfiguration operation.
//
// Get vSAN HCL configuration.
//
// GET /v1/vsan-hcl/configuration
func (UnimplementedHandler) GetVsanHclConfiguration(ctx context.Context) (r GetVsanHclConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVsanHealthCheckByDomain implements getVsanHealthCheckByDomain operation.
//
// Get vSAN health check status for all cluster on the domain.
//
// GET /v1/domains/{domainId}/health-checks
func (UnimplementedHandler) GetVsanHealthCheckByDomain(ctx context.Context, params GetVsanHealthCheckByDomainParams) (r GetVsanHealthCheckByDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVsanHealthCheckByQueryID implements getVsanHealthCheckByQueryID operation.
//
// Get vSAN health check status for a given Query Id.
//
// GET /v1/domains/{domainId}/health-checks/queries/{queryId}
func (UnimplementedHandler) GetVsanHealthCheckByQueryID(ctx context.Context, params GetVsanHealthCheckByQueryIDParams) (r GetVsanHealthCheckByQueryIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVsanHealthCheckByTaskID implements getVsanHealthCheckByTaskID operation.
//
// Get vSAN health check update task status for a given task Id.
//
// GET /v1/domains/{domainId}/health-checks/tasks/{taskId}
func (UnimplementedHandler) GetVsanHealthCheckByTaskID(ctx context.Context, params GetVsanHealthCheckByTaskIDParams) (r GetVsanHealthCheckByTaskIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetWsas implements getWsas operation.
//
// Retrieve a list of Workspace ONE Access instances.
//
// GET /v1/wsas
func (UnimplementedHandler) GetWsas(ctx context.Context) (r *PageOfWsa, _ error) {
	return r, ht.ErrNotImplemented
}

// ImportVdsToInventory implements importVdsToInventory operation.
//
// Import Vds to inventory for the given cluster.
//
// POST /v1/clusters/{clusterId}/vdses
func (UnimplementedHandler) ImportVdsToInventory(ctx context.Context, req *ImportVdsSpec, params ImportVdsToInventoryParams) (r ImportVdsToInventoryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// InvalidateRefreshToken implements invalidateRefreshToken operation.
//
// Invalidate the provided refresh token.
//
// DELETE /v1/tokens/refresh-token
func (UnimplementedHandler) InvalidateRefreshToken(ctx context.Context, req string) error {
	return ht.ErrNotImplemented
}

// PerformDomainIsolationPrecheck implements performDomainIsolationPrecheck operation.
//
// Perform Domain Isolation Prechecks.
//
// POST /v1/domains/{domainId}/isolation-prechecks
func (UnimplementedHandler) PerformDomainIsolationPrecheck(ctx context.Context, req *IsolationSpec, params PerformDomainIsolationPrecheckParams) (r PerformDomainIsolationPrecheckRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PerformUpgrade implements performUpgrade operation.
//
// Schedule/Trigger Upgrade of a Resource. Ex: Resource can be DOMAIN, CLUSTER, UNMANAGED_HOST etc.
// Performing upgrades are supported on VMware Cloud Foundation 3.5 BOM resources and above. Supports
// scheduling/triggering of only 'parallel' upgrades and only Resource 'cluster' that are managed
// using both vSphere Lifecycle Manager Baselines and vSphere Lifecycle Manager Images in the same
// request.
//
// POST /v1/upgrades
func (UnimplementedHandler) PerformUpgrade(ctx context.Context, req *UpgradeSpec) (r PerformUpgradeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostClusterQuery implements postClusterQuery operation.
//
// Post a cluster query.
//
// POST /v1/domains/{domainId}/clusters/{clusterName}/queries
func (UnimplementedHandler) PostClusterQuery(ctx context.Context, req *ClusterCriterion, params PostClusterQueryParams) (r PostClusterQueryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostClustersQuery implements postClustersQuery operation.
//
// Post clusters query.
//
// POST /v1/domains/{domainId}/clusters/queries
func (UnimplementedHandler) PostClustersQuery(ctx context.Context, req *ClusterCriterion, params PostClustersQueryParams) (r PostClustersQueryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostDatastoreQuery implements postDatastoreQuery operation.
//
// Post a datastore query.
//
// POST /v1/domains/{domainId}/datastores/queries
func (UnimplementedHandler) PostDatastoreQuery(ctx context.Context, req *DatastoreCriterion, params PostDatastoreQueryParams) (r PostDatastoreQueryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostDatastoreQuery1 implements postDatastoreQuery_1 operation.
//
// Post a datastore query.
//
// POST /v1/clusters/{id}/datastores/queries
func (UnimplementedHandler) PostDatastoreQuery1(ctx context.Context, req *DatastoreCriterion, params PostDatastoreQuery1Params) (r PostDatastoreQuery1Res, _ error) {
	return r, ht.ErrNotImplemented
}

// PostHostQuery implements postHostQuery operation.
//
// Post a host query.
//
// POST /v1/clusters/{id}/hosts/queries
func (UnimplementedHandler) PostHostQuery(ctx context.Context, req *HostCriterion, params PostHostQueryParams) (r PostHostQueryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostHostsPrechecks1 implements postHostsPrechecks_1 operation.
//
// Post host(s) prechecks.
//
// POST /v1/hosts/prechecks
func (UnimplementedHandler) PostHostsPrechecks1(ctx context.Context, req PostHostsPrechecks1Req) (r PostHostsPrechecks1Res, _ error) {
	return r, ht.ErrNotImplemented
}

// PostQuery implements postQuery operation.
//
// Post a query.
//
// POST /v1/hosts/queries
func (UnimplementedHandler) PostQuery(ctx context.Context, req *HostCriterion) (r PostQueryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// QueryCheckSets implements queryCheckSets operation.
//
// Query for check-sets for the given resources.
//
// POST /v1/system/check-sets/queries
func (UnimplementedHandler) QueryCheckSets(ctx context.Context, req *CheckSetQueryInput) (r QueryCheckSetsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReconcileConfigs implements reconcileConfigs operation.
//
// For selective reconciliation, provide a config spec.
//
// POST /v1/config-drift-reconciliations
func (UnimplementedHandler) ReconcileConfigs(ctx context.Context, req *ConfigDriftApplySpec) (r ReconcileConfigsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RefreshAccessToken implements refreshAccessToken operation.
//
// Refresh the access token associated with the given refresh token.
//
// PATCH /v1/tokens/access-token/refresh
func (UnimplementedHandler) RefreshAccessToken(ctx context.Context, req string) (r RefreshAccessTokenRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveCertificateAuthority implements removeCertificateAuthority operation.
//
// Deletes CA configuration file.
//
// DELETE /v1/certificate-authorities/{id}
func (UnimplementedHandler) RemoveCertificateAuthority(ctx context.Context, params RemoveCertificateAuthorityParams) (r RemoveCertificateAuthorityRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveDatastoreFromCluster implements removeDatastoreFromCluster operation.
//
// Unmount a datastore from a cluster.
//
// DELETE /v1/clusters/{id}/datastores/{datastoreId}
func (UnimplementedHandler) RemoveDatastoreFromCluster(ctx context.Context, params RemoveDatastoreFromClusterParams) (r RemoveDatastoreFromClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveLicenseKey implements removeLicenseKey operation.
//
// Remove a license key.
//
// DELETE /v1/license-keys/{key}
func (UnimplementedHandler) RemoveLicenseKey(ctx context.Context, params RemoveLicenseKeyParams) (r RemoveLicenseKeyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveTagsFromCluster implements removeTagsFromCluster operation.
//
// Remove tags from a cluster.
//
// DELETE /v1/clusters/{id}/tags
func (UnimplementedHandler) RemoveTagsFromCluster(ctx context.Context, req *TagsSpec, params RemoveTagsFromClusterParams) (r RemoveTagsFromClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveTagsFromDomain implements removeTagsFromDomain operation.
//
// Remove Tags From Domain.
//
// DELETE /v1/domains/{id}/tags
func (UnimplementedHandler) RemoveTagsFromDomain(ctx context.Context, req *TagsSpec, params RemoveTagsFromDomainParams) (r RemoveTagsFromDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveTagsFromHost implements removeTagsFromHost operation.
//
// Remove Tags From Host.
//
// DELETE /v1/hosts/{id}/tags
func (UnimplementedHandler) RemoveTagsFromHost(ctx context.Context, req *TagsSpec, params RemoveTagsFromHostParams) (r RemoveTagsFromHostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveUser implements removeUser operation.
//
// Delete the user by the ID, if it exists.
//
// DELETE /v1/users/{id}
func (UnimplementedHandler) RemoveUser(ctx context.Context, params RemoveUserParams) (r RemoveUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveVasaProvider implements removeVasaProvider operation.
//
// Delete a VASA Provider.
//
// DELETE /v1/vasa-providers/{id}
func (UnimplementedHandler) RemoveVasaProvider(ctx context.Context, params RemoveVasaProviderParams) (r RemoveVasaProviderRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveVasaProviderStorageContainer implements removeVasaProviderStorageContainer operation.
//
// Delete a storage container of a VASA Provider.
//
// DELETE /v1/vasa-providers/{id}/storage-containers/{storageContainerId}
func (UnimplementedHandler) RemoveVasaProviderStorageContainer(ctx context.Context, params RemoveVasaProviderStorageContainerParams) (r RemoveVasaProviderStorageContainerRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RenameCustomIsoById implements renameCustomIsoById operation.
//
// Rename the Custom ISO corresponding to the ID.
//
// PATCH /v1/custom-isos/{custom_iso_id}
func (UnimplementedHandler) RenameCustomIsoById(ctx context.Context, req *CustomIsoRenameSpec, params RenameCustomIsoByIdParams) (r RenameCustomIsoByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RenamePersonalityById implements renamePersonalityById operation.
//
// Rename personality with the ID passed in the URL.
//
// PATCH /v1/personalities/{personalityId}
func (UnimplementedHandler) RenamePersonalityById(ctx context.Context, req *Personality, params RenamePersonalityByIdParams) (r RenamePersonalityByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReplaceCertificates implements replaceCertificates operation.
//
// Replace certificate(s) for the selected resource(s) in a domain.
//
// PATCH /v1/domains/{id}/certificates
func (UnimplementedHandler) ReplaceCertificates(ctx context.Context, req *CertificateOperationSpec, params ReplaceCertificatesParams) (r ReplaceCertificatesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReplaceResourceCertificates implements replaceResourceCertificates operation.
//
// Replace resource certificates.
//
// PUT /v1/domains/{id}/resource-certificates
func (UnimplementedHandler) ReplaceResourceCertificates(ctx context.Context, req []ResourceCertificateSpec, params ReplaceResourceCertificatesParams) (r ReplaceResourceCertificatesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RetryComplianceAuditTask implements retryComplianceAuditTask operation.
//
// Retry compliance audit task.
//
// PATCH /v1/domains/{id}/compliance-audits/tasks/{taskId}
func (UnimplementedHandler) RetryComplianceAuditTask(ctx context.Context, params RetryComplianceAuditTaskParams) (r RetryComplianceAuditTaskRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RetryCredentialsTask implements retryCredentialsTask operation.
//
// Retry a failed credentials task for a given ID.
//
// PATCH /v1/credentials/tasks/{id}
func (UnimplementedHandler) RetryCredentialsTask(ctx context.Context, req *CredentialsUpdateSpec, params RetryCredentialsTaskParams) (r RetryCredentialsTaskRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RetrySddc implements retrySddc operation.
//
// Retry failed SDDC creation.
//
// PATCH /v1/sddcs/{id}
func (UnimplementedHandler) RetrySddc(ctx context.Context, req OptSddcSpec, params RetrySddcParams) (r RetrySddcRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RetryTask implements retryTask operation.
//
// Retry a failed Task by ID, if it exists.
//
// PATCH /v1/tasks/{id}
func (UnimplementedHandler) RetryTask(ctx context.Context, params RetryTaskParams) (r RetryTaskRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RollbackVrslcm implements rollbackVrslcm operation.
//
// Triggers the VMware Aria Suite Lifecycle rollback operation and returns an URL in the headers to
// track the operation status.
//
// DELETE /v1/vrslcm
func (UnimplementedHandler) RollbackVrslcm(ctx context.Context) (r RollbackVrslcmRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SetBackupConfiguration implements setBackupConfiguration operation.
//
// Configure the backup configuration for SDDC Manager and NSX Manager.
//
// PUT /v1/system/backup-configuration
func (UnimplementedHandler) SetBackupConfiguration(ctx context.Context, req *BackupConfigurationSpec) (r SetBackupConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SetCeipStatus implements setCeipStatus operation.
//
// Opt-in or Opt-out of CEIP.
//
// PATCH /v1/system/ceip
func (UnimplementedHandler) SetCeipStatus(ctx context.Context, req SetCeipStatusReq) (r SetCeipStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SetLicenseKeyForResource implements setLicenseKeyForResource operation.
//
// Update a license key for a resource.
//
// PUT /v1/resources/licensing-infos
func (UnimplementedHandler) SetLicenseKeyForResource(ctx context.Context, req *LicensingSpec) (r SetLicenseKeyForResourceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StartBackup implements startBackup operation.
//
// Start a backup operation.
//
// POST /v1/backups/tasks
func (UnimplementedHandler) StartBackup(ctx context.Context, req *BackupSpec) (r StartBackupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StartBringup implements startBringup operation.
//
// Deploy a management domain.
//
// POST /v1/sddcs
func (UnimplementedHandler) StartBringup(ctx context.Context, req *SddcSpec) (r StartBringupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StartBringupSpecConversion implements startBringupSpecConversion operation.
//
// SDDC specification incorporates all the client inputs regarding VMW component parameters
// constituting the SDDC: NTP, DNS spec, ESXi, VC, VSAN, NSX spec et al.
//
// POST /v1/system/sddc-spec-converter
func (UnimplementedHandler) StartBringupSpecConversion(ctx context.Context, req OptStartBringupSpecConversionReq, params StartBringupSpecConversionParams) (r StartBringupSpecConversionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StartBundleDownloadByID implements startBundleDownloadByID operation.
//
// Update a Bundle for scheduling/triggering download. Only one download can triggered for a Bundle.
//
// PATCH /v1/bundles/{id}
func (UnimplementedHandler) StartBundleDownloadByID(ctx context.Context, req *BundleUpdateSpec, params StartBundleDownloadByIDParams) (r StartBundleDownloadByIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StartHealthCheck implements startHealthCheck operation.
//
// Start a Health Check operation using SoS.
//
// POST /v1/system/health-summary
func (UnimplementedHandler) StartHealthCheck(ctx context.Context, req *HealthSummarySpec) (r StartHealthCheckRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StartNsxCriteriaQuery implements startNsxCriteriaQuery operation.
//
// Start a query with NSX Criteria.
//
// POST /v1/nsxt-clusters/queries
func (UnimplementedHandler) StartNsxCriteriaQuery(ctx context.Context, req *NsxTCriterion) (r StartNsxCriteriaQueryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StartPrecheck implements startPrecheck operation.
//
// Perform precheck of resource(ex: Domain, Cluster). If only resource is specified, all
// resources/software components under it are included. If resource(Domain, Cluster etc) and specific
// resources/software components are provided, only those are included in precheck. As this API is
// deprecated, please use the new LCM Prechecks API - /v1/system/check-sets/queries and
// /v1/system/check-sets.
//
// Deprecated: schema marks this operation as deprecated.
//
// POST /v1/system/prechecks
func (UnimplementedHandler) StartPrecheck(ctx context.Context, req *PrecheckSpec) (r StartPrecheckRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StartRestore implements startRestore operation.
//
// Start a restore operation.
//
// POST /v1/restores/tasks
func (UnimplementedHandler) StartRestore(ctx context.Context, req *RestoreSpec) (r StartRestoreRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StartSupportBundle implements startSupportBundle operation.
//
// Start a Support Bundle operation using SoS.
//
// POST /v1/system/support-bundles
func (UnimplementedHandler) StartSupportBundle(ctx context.Context, req *SupportBundleSpec) (r StartSupportBundleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StartUpgradePrecheck implements startUpgradePrecheck operation.
//
// Perform Upgrade Prechecks.
//
// POST /v1/upgrades/{upgradeId}/prechecks
func (UnimplementedHandler) StartUpgradePrecheck(ctx context.Context, params StartUpgradePrecheckParams) (r StartUpgradePrecheckRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TriggerCheckRun implements triggerCheckRun operation.
//
// Trigger a run of the selected checks.
//
// POST /v1/system/check-sets
func (UnimplementedHandler) TriggerCheckRun(ctx context.Context, req *CheckSetRunInput) (r TriggerCheckRunRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TriggerPartialRetryOfCheckRun implements triggerPartialRetryOfCheckRun operation.
//
// Trigger partial retry of a completed check run.
//
// PATCH /v1/system/check-sets/{runId}
func (UnimplementedHandler) TriggerPartialRetryOfCheckRun(ctx context.Context, req *AssessmentPartialRetryInput, params TriggerPartialRetryOfCheckRunParams) (r TriggerPartialRetryOfCheckRunRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateBackupConfiguration implements updateBackupConfiguration operation.
//
// Update the backup configuration for SDDC Manager and NSX Manager.
//
// PATCH /v1/system/backup-configuration
func (UnimplementedHandler) UpdateBackupConfiguration(ctx context.Context, req *BackupConfigurationSpec) (r UpdateBackupConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateBundleCompatibilitySets implements updateBundleCompatibilitySets operation.
//
// Update software compatibility sets for Bundles.
//
// Deprecated: schema marks this operation as deprecated.
//
// PATCH /v1/bundles/
func (UnimplementedHandler) UpdateBundleCompatibilitySets(ctx context.Context, req *BundleUpdateSpec) (r UpdateBundleCompatibilitySetsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateCluster implements updateCluster operation.
//
// Update a Cluster by adding or removing Hosts, Stretching a standard vSAN cluster, Unstretching a
// stretched cluster or by marking for deletion.
//
// PATCH /v1/clusters/{id}
func (UnimplementedHandler) UpdateCluster(ctx context.Context, req *ClusterUpdateSpec, params UpdateClusterParams) (r UpdateClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateDepotSettings implements updateDepotSettings operation.
//
// Update depot settings. Depot settings can be updated with VMware Depot account.
//
// PUT /v1/system/settings/depot
func (UnimplementedHandler) UpdateDepotSettings(ctx context.Context, req *DepotSettings) (r UpdateDepotSettingsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateDomain implements updateDomain operation.
//
// Update a Domain.
//
// PATCH /v1/domains/{id}
func (UnimplementedHandler) UpdateDomain(ctx context.Context, req *DomainUpdateSpec, params UpdateDomainParams) (r UpdateDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateEdgeCluster implements updateEdgeCluster operation.
//
// Expand or shrink an NSX Edge Cluster.
//
// PATCH /v1/edge-clusters/{id}
func (UnimplementedHandler) UpdateEdgeCluster(ctx context.Context, req *EdgeClusterUpdateSpec, params UpdateEdgeClusterParams) (r UpdateEdgeClusterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateLicenseKey implements updateLicenseKey operation.
//
// Update the license key.
//
// PATCH /v1/license-keys/{key}
func (UnimplementedHandler) UpdateLicenseKey(ctx context.Context, req *LicenseKeyUpdateSpec, params UpdateLicenseKeyParams) (r UpdateLicenseKeyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateLocalUserPassword implements updateLocalUserPassword operation.
//
// Update the password for local account only if the old password is correct, or if user configures
// the local account for the first time.
//
// PATCH /v1/users/local/admin
func (UnimplementedHandler) UpdateLocalUserPassword(ctx context.Context, req *LocalAccountPasswordInfo) (r UpdateLocalUserPasswordRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateNetworkPool implements updateNetworkPool operation.
//
// Update a Network Pool by ID, if it exists.
//
// PATCH /v1/network-pools/{id}
func (UnimplementedHandler) UpdateNetworkPool(ctx context.Context, req *NetworkPoolUpdateSpec, params UpdateNetworkPoolParams) (r UpdateNetworkPoolRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateOrRotatePasswords implements updateOrRotatePasswords operation.
//
// Update passwords for given list of resources by supplying new passwords or rotate the passwords
// using system generated passwords.
//
// PATCH /v1/credentials
func (UnimplementedHandler) UpdateOrRotatePasswords(ctx context.Context, req *CredentialsUpdateSpec) (r UpdateOrRotatePasswordsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateReleaseByDomainID implements updateReleaseByDomainID operation.
//
// Update last selected upgrade version for the domain.
//
// PATCH /v1/releases/domains/{domainId}
func (UnimplementedHandler) UpdateReleaseByDomainID(ctx context.Context, req OptDomainRelease, params UpdateReleaseByDomainIDParams) (r UpdateReleaseByDomainIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateResourcesFunctionalities implements updateResourcesFunctionalities operation.
//
// Update Resources Functionalities.
//
// PATCH /v1/resource-functionalities
func (UnimplementedHandler) UpdateResourcesFunctionalities(ctx context.Context, req *ResourceFunctionalitiesUpdateSpec) (r UpdateResourcesFunctionalitiesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateResourcesFunctionalities1 implements updateResourcesFunctionalities_1 operation.
//
// Update Resources Functionalities Is Allowed Global Configuration.
//
// PATCH /v1/resource-functionalities/global
func (UnimplementedHandler) UpdateResourcesFunctionalities1(ctx context.Context, req *ResourceFunctionalitiesGlobalUpdateSpec) (r UpdateResourcesFunctionalities1Res, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateSystemConfiguration implements updateSystemConfiguration operation.
//
// Updates paramters of the system configuration.
//
// PATCH /v1/system
func (UnimplementedHandler) UpdateSystemConfiguration(ctx context.Context, req *SystemUpdateSpec) (r UpdateSystemConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateUpgradeSchedule implements updateUpgradeSchedule operation.
//
// Commit/Reschedule an existing upgrade. It moves the upgrade from DRAFT state to SCHEDULED state
// and/or changes the upgrade scheduled date/time.
//
// PATCH /v1/upgrades/{upgradeId}
func (UnimplementedHandler) UpdateUpgradeSchedule(ctx context.Context, req *UpgradeCommitSpec, params UpdateUpgradeScheduleParams) (r UpdateUpgradeScheduleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateVasaProvider implements updateVasaProvider operation.
//
// Update a VASA Provider.
//
// PATCH /v1/vasa-providers/{id}
func (UnimplementedHandler) UpdateVasaProvider(ctx context.Context, req *VasaProviderUpdateSpec, params UpdateVasaProviderParams) (r UpdateVasaProviderRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateVasaProviderStorageContainer implements updateVasaProviderStorageContainer operation.
//
// Update the storage container of a VASA Provider.
//
// PATCH /v1/vasa-providers/{id}/storage-containers/{storageContainerId}
func (UnimplementedHandler) UpdateVasaProviderStorageContainer(ctx context.Context, req *StorageContainerUpdateSpec, params UpdateVasaProviderStorageContainerParams) (r UpdateVasaProviderStorageContainerRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateVasaProviderUser implements updateVasaProviderUser operation.
//
// Update the user of a VASA Provider.
//
// PATCH /v1/vasa-providers/{id}/users/{userId}
func (UnimplementedHandler) UpdateVasaProviderUser(ctx context.Context, req *VasaUserUpdateSpec, params UpdateVasaProviderUserParams) (r UpdateVasaProviderUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateVersionAliasConfiguration implements updateVersionAliasConfiguration operation.
//
// Update Version Alias Configuration.
//
// PUT /v1/system/settings/version-aliases/{bundleComponentType}/{version}
func (UnimplementedHandler) UpdateVersionAliasConfiguration(ctx context.Context, req *AliasSpec, params UpdateVersionAliasConfigurationParams) (r UpdateVersionAliasConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateVersionAliasConfigurations implements updateVersionAliasConfigurations operation.
//
// Update Version Alias Configurations.
//
// PUT /v1/system/settings/version-aliases
func (UnimplementedHandler) UpdateVersionAliasConfigurations(ctx context.Context, req *VersionAliasesForBundleComponentTypeSpec) (r UpdateVersionAliasConfigurationsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateVrslcmVersionByIdInInventory implements updateVrslcmVersionByIdInInventory operation.
//
// Updates VMware Aria Suite Lifecycle version.
//
// PUT /v1/vrslcms/{id}
func (UnimplementedHandler) UpdateVrslcmVersionByIdInInventory(ctx context.Context, req *Vrslcm, params UpdateVrslcmVersionByIdInInventoryParams) (r UpdateVrslcmVersionByIdInInventoryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateVrslcmVersionInInventory implements updateVrslcmVersionInInventory operation.
//
// Updates VMware Aria Suite Lifecycle version in VCF inventory.
//
// PUT /v1/vrslcm
func (UnimplementedHandler) UpdateVrslcmVersionInInventory(ctx context.Context, req *Vrslcm) (r UpdateVrslcmVersionInInventoryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateVsanHclConfiguration implements updateVsanHclConfiguration operation.
//
// Update vSAN HCL configuration.
//
// PATCH /v1/vsan-hcl/configuration
func (UnimplementedHandler) UpdateVsanHclConfiguration(ctx context.Context, req *VsanHclConfiguration) (r UpdateVsanHclConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateVsanHealthCheckByDomain implements updateVsanHealthCheckByDomain operation.
//
// Update vSAN health check status for domain.
//
// PATCH /v1/domains/{domainId}/health-checks
func (UnimplementedHandler) UpdateVsanHealthCheckByDomain(ctx context.Context, req []HealthCheckSpec, params UpdateVsanHealthCheckByDomainParams) (r UpdateVsanHealthCheckByDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UploadBundle implements uploadBundle operation.
//
// Upload Bundle to SDDC Manager. Used when you do not have internet connectivity for downloading
// bundles from VMWare/VxRail to SDDC Manager. The Bundles are manually downloaded from Depot using
// Bundle Transfer utility.
//
// POST /v1/bundles
func (UnimplementedHandler) UploadBundle(ctx context.Context, req *BundleUploadSpec) (r UploadBundleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UploadCertificates implements uploadCertificates operation.
//
// Upload certificates to the certificate store.
//
// Deprecated: schema marks this operation as deprecated.
//
// PUT /v1/domains/{id}/certificates/uploads
func (UnimplementedHandler) UploadCertificates(ctx context.Context, req OptUploadCertificatesReq, params UploadCertificatesParams) (r UploadCertificatesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UploadCustomIso implements uploadCustomIso operation.
//
// Upload Custom ISO to SDDC Manager.
//
// POST /v1/custom-isos/file
func (UnimplementedHandler) UploadCustomIso(ctx context.Context, req OptUploadCustomIsoReq, params UploadCustomIsoParams) (r UploadCustomIsoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UploadPersonality implements uploadPersonality operation.
//
// Upload Personality to SDDC Manager.
//
// POST /v1/personalities
func (UnimplementedHandler) UploadPersonality(ctx context.Context, req *PersonalityUploadSpec) (r UploadPersonalityRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UploadPersonalityFiles implements uploadPersonalityFiles operation.
//
// Upload personality files to SDDC Manager.
//
// PUT /v1/personalities/files
func (UnimplementedHandler) UploadPersonalityFiles(ctx context.Context, req OptUploadPersonalityFilesReq) (r UploadPersonalityFilesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UploadProductVersionCatalog implements uploadProductVersionCatalog operation.
//
// Upload product version catalog. Make sure product version is a valid one.
//
// POST /v1/product-version-catalog
func (UnimplementedHandler) UploadProductVersionCatalog(ctx context.Context, req *ProductVersionCatalog) (r UploadProductVersionCatalogRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateALBClusterCreationSpec implements validateALBClusterCreationSpec operation.
//
// Perform validiation of the NsxAlbControllerClusterSpec specification.
//
// POST /v1/nsx-alb-clusters/validations
func (UnimplementedHandler) ValidateALBClusterCreationSpec(ctx context.Context, req *NsxAlbControllerClusterSpec, params ValidateALBClusterCreationSpecParams) (r ValidateALBClusterCreationSpecRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateAvnSpec implements validateAvnSpec operation.
//
// Returns Validation report.
//
// POST /v1/avns/validations
func (UnimplementedHandler) ValidateAvnSpec(ctx context.Context, req *AvnsCreationSpec) (r ValidateAvnSpecRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateBackupConfigurationsOperations implements validateBackupConfigurationsOperations operation.
//
// Validation API for backup configuration for SDDC Manager and NSX Manager.
//
// POST /v1/system/backup-configuration/validations
func (UnimplementedHandler) ValidateBackupConfigurationsOperations(ctx context.Context, req *BackupConfigurationSpec) (r ValidateBackupConfigurationsOperationsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateBringupSpec implements validateBringupSpec operation.
//
// SDDC specification incorporates all the client inputs regarding VMW component parameters
// constituting the SDDC: NTP, DNS spec, ESXi, VC, VSAN, NSX spec et al.
//
// POST /v1/sddcs/validations
func (UnimplementedHandler) ValidateBringupSpec(ctx context.Context, req *SddcSpec, params ValidateBringupSpecParams) (r ValidateBringupSpecRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateClusterCreationSpec implements validateClusterCreationSpec operation.
//
// Perform validation of the ClusterCreationSpec specification.
//
// POST /v1/clusters/validations
func (UnimplementedHandler) ValidateClusterCreationSpec(ctx context.Context, req *ClusterCreationSpec, params ValidateClusterCreationSpecParams) (r ValidateClusterCreationSpecRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateClusterUpdateSpec implements validateClusterUpdateSpec operation.
//
// Perform validation of the ClusterUpdateSpec specification.
//
// POST /v1/clusters/{id}/validations
func (UnimplementedHandler) ValidateClusterUpdateSpec(ctx context.Context, req *ClusterUpdateSpec, params ValidateClusterUpdateSpecParams) (r ValidateClusterUpdateSpecRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateCommissionHosts implements validateCommissionHosts operation.
//
// Validate the input specification to commission the Hosts.
//
// Deprecated: schema marks this operation as deprecated.
//
// POST /v1/hosts/validations/commissions
func (UnimplementedHandler) ValidateCommissionHosts(ctx context.Context, req []HostCommissionSpec) (r ValidateCommissionHostsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateDnsConfiguration implements validateDnsConfiguration operation.
//
// Perform validation of the DnsConfiguration specification.
//
// POST /v1/system/dns-configuration/validations
func (UnimplementedHandler) ValidateDnsConfiguration(ctx context.Context, req *DnsConfiguration) (r ValidateDnsConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateDomainCreationSpec implements validateDomainCreationSpec operation.
//
// Perform validation of the DomainCreationSpec specification.
//
// POST /v1/domains/validations
func (UnimplementedHandler) ValidateDomainCreationSpec(ctx context.Context, req *DomainCreationSpec, params ValidateDomainCreationSpecParams) (r ValidateDomainCreationSpecRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateDomainUpdateSpec implements validateDomainUpdateSpec operation.
//
// Perform validation of the DomainUpdateSpec specification.
//
// POST /v1/domains/{id}/validations
func (UnimplementedHandler) ValidateDomainUpdateSpec(ctx context.Context, req *DomainUpdateSpec, params ValidateDomainUpdateSpecParams) (r ValidateDomainUpdateSpecRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateEdgeClusterCreationSpec implements validateEdgeClusterCreationSpec operation.
//
// Perform validiation of the EdgeClusterCreationSpec specification.
//
// POST /v1/edge-clusters/validations
func (UnimplementedHandler) ValidateEdgeClusterCreationSpec(ctx context.Context, req *EdgeClusterCreationSpec) (r ValidateEdgeClusterCreationSpecRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateEdgeClusterUpdateSpec implements validateEdgeClusterUpdateSpec operation.
//
// Perform validation of the EdgeClusterUpdateSpec specification.
//
// POST /v1/edge-clusters/{id}/validations
func (UnimplementedHandler) ValidateEdgeClusterUpdateSpec(ctx context.Context, req *EdgeClusterUpdateSpec, params ValidateEdgeClusterUpdateSpecParams) (r ValidateEdgeClusterUpdateSpecRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateHostCommissionSpec implements validateHostCommissionSpec operation.
//
// Perform validation of the  HostCommissionSpec specification.
//
// POST /v1/hosts/validations
func (UnimplementedHandler) ValidateHostCommissionSpec(ctx context.Context, req []HostCommissionSpec) (r ValidateHostCommissionSpecRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateIpPool implements validateIpPool operation.
//
// POST /v1/nsxt-clusters/ip-address-pools/validations
func (UnimplementedHandler) ValidateIpPool(ctx context.Context, req *NsxtIpAddressPoolValidationSpec) (r *Validation, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateNsxALBCompatibility implements validateNsxALBCompatibility operation.
//
// Validate NSX ALB compatibility version.
//
// POST /v1/nsx-alb-clusters/validations/version
func (UnimplementedHandler) ValidateNsxALBCompatibility(ctx context.Context, req *NsxAlbVersionValidationSpec) (r ValidateNsxALBCompatibilityRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateNtpConfiguration implements validateNtpConfiguration operation.
//
// Perform validation of the NtpConfiguration specification.
//
// POST /v1/system/ntp-configuration/validations
func (UnimplementedHandler) ValidateNtpConfiguration(ctx context.Context, req *NtpConfiguration) (r ValidateNtpConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateReleaseByDomainID implements validateReleaseByDomainID operation.
//
// Validate the target selected upgrade release BOM or custom BOM for a domain by its ID.
//
// POST /v1/releases/domains/{domainId}/validations
func (UnimplementedHandler) ValidateReleaseByDomainID(ctx context.Context, req *DomainRelease, params ValidateReleaseByDomainIDParams) (r ValidateReleaseByDomainIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateResourceCertificates implements validateResourceCertificates operation.
//
// Validate resource certificates.
//
// PUT /v1/domains/{id}/resource-certificates/validations
func (UnimplementedHandler) ValidateResourceCertificates(ctx context.Context, req []ResourceCertificateSpec, params ValidateResourceCertificatesParams) (r ValidateResourceCertificatesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateVasaProviderSpec implements validateVasaProviderSpec operation.
//
// Validate VasaProvider input specification.
//
// POST /v1/vasa-providers/validations
func (UnimplementedHandler) ValidateVasaProviderSpec(ctx context.Context, req *VasaProvider) (r ValidateVasaProviderSpecRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateVrslcm implements validateVrslcm operation.
//
// Triggers VMware Aria Suite Lifecycle deployment specification validation workflow.
//
// POST /v1/vrslcms/validations
func (UnimplementedHandler) ValidateVrslcm(ctx context.Context, req *VrslcmDeploymentSpec) (r ValidateVrslcmRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateVsanRemoteDatastoreMountSpec implements validateVsanRemoteDatastoreMountSpec operation.
//
// Perform validation of the DatastoreMountSpec specification.
//
// POST /v1/clusters/{clusterId}/datastores/validations
func (UnimplementedHandler) ValidateVsanRemoteDatastoreMountSpec(ctx context.Context, req *DatastoreMountSpec, params ValidateVsanRemoteDatastoreMountSpecParams) (r ValidateVsanRemoteDatastoreMountSpecRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateVsanRemoteDatastoreSpec implements validateVsanRemoteDatastoreSpec operation.
//
// Perform validation of the DatastoreMountSpec specification.
//
// Deprecated: schema marks this operation as deprecated.
//
// POST /v1/clusters/{clusterId}/datastores/validation
func (UnimplementedHandler) ValidateVsanRemoteDatastoreSpec(ctx context.Context, req *DatastoreMountSpec, params ValidateVsanRemoteDatastoreSpecParams) (r ValidateVsanRemoteDatastoreSpecRes, _ error) {
	return r, ht.ErrNotImplemented
}
