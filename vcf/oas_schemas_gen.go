// Code generated by ogen, DO NOT EDIT.

package vcf

import (
	"io"

	"github.com/go-faster/errors"

	ht "github.com/ogen-go/ogen/http"
)

// NSX ALB Cluster node form factor.
// Ref: #/components/schemas/ALBControllerNodeFormFactor
type ALBControllerNodeFormFactor struct {
	// Disk size of the NSX Advanced Load Balancer controller node in Bytes.
	Disk OptInt64 `json:"disk"`
	// Memory size of the NSX Advanced Load Balancer controller node in Bytes.
	Memory OptInt64 `json:"memory"`
	// NSX Advanced Load Balancer controller node form factor type.
	Type OptString `json:"type"`
	// Number of virtual cpus on the NSX Advanced Load Balancer controller node.
	Vcpu OptInt64 `json:"vcpu"`
}

// GetDisk returns the value of Disk.
func (s *ALBControllerNodeFormFactor) GetDisk() OptInt64 {
	return s.Disk
}

// GetMemory returns the value of Memory.
func (s *ALBControllerNodeFormFactor) GetMemory() OptInt64 {
	return s.Memory
}

// GetType returns the value of Type.
func (s *ALBControllerNodeFormFactor) GetType() OptString {
	return s.Type
}

// GetVcpu returns the value of Vcpu.
func (s *ALBControllerNodeFormFactor) GetVcpu() OptInt64 {
	return s.Vcpu
}

// SetDisk sets the value of Disk.
func (s *ALBControllerNodeFormFactor) SetDisk(val OptInt64) {
	s.Disk = val
}

// SetMemory sets the value of Memory.
func (s *ALBControllerNodeFormFactor) SetMemory(val OptInt64) {
	s.Memory = val
}

// SetType sets the value of Type.
func (s *ALBControllerNodeFormFactor) SetType(val OptString) {
	s.Type = val
}

// SetVcpu sets the value of Vcpu.
func (s *ALBControllerNodeFormFactor) SetVcpu(val OptInt64) {
	s.Vcpu = val
}

// NSX ALB Cluster node form factors.
// Ref: #/components/schemas/ALBControllerNodeFormFactors
type ALBControllerNodeFormFactors struct {
	// List of NSX ALB Cluster node form factor.
	FormFactors []ALBControllerNodeFormFactor `json:"formFactors"`
}

// GetFormFactors returns the value of FormFactors.
func (s *ALBControllerNodeFormFactors) GetFormFactors() []ALBControllerNodeFormFactor {
	return s.FormFactors
}

// SetFormFactors sets the value of FormFactors.
func (s *ALBControllerNodeFormFactors) SetFormFactors(val []ALBControllerNodeFormFactor) {
	s.FormFactors = val
}

func (*ALBControllerNodeFormFactors) getALBClustersFormFactorsRes() {}

type AddDatastoreToClusterBadRequest Error

func (*AddDatastoreToClusterBadRequest) addDatastoreToClusterRes() {}

type AddDatastoreToClusterInternalServerError Error

func (*AddDatastoreToClusterInternalServerError) addDatastoreToClusterRes() {}

type AddDatastoreToClusterNotFound Error

func (*AddDatastoreToClusterNotFound) addDatastoreToClusterRes() {}

type AddIpPoolToNetworkOfNetworkPoolBadRequest Error

func (*AddIpPoolToNetworkOfNetworkPoolBadRequest) addIpPoolToNetworkOfNetworkPoolRes() {}

type AddIpPoolToNetworkOfNetworkPoolInternalServerError Error

func (*AddIpPoolToNetworkOfNetworkPoolInternalServerError) addIpPoolToNetworkOfNetworkPoolRes() {}

type AddIpPoolToNetworkOfNetworkPoolNotFound Error

func (*AddIpPoolToNetworkOfNetworkPoolNotFound) addIpPoolToNetworkOfNetworkPoolRes() {}

// AddLicenseKeyCreated is response for AddLicenseKey operation.
type AddLicenseKeyCreated struct{}

func (*AddLicenseKeyCreated) addLicenseKeyRes() {}

// AddOn contains bits to install/update the appropriate Cloud Foundation software components in your
// management domain or workload domain.
// Ref: #/components/schemas/AddOnInfo
type AddOnInfo struct {
	// Add on software version.
	Version string `json:"version"`
	// Component name.
	Name string `json:"name"`
	// Vendor.
	Vendor string `json:"vendor"`
	// Add On display name.
	DisplayName OptString `json:"displayName"`
	// Add On display version.
	DisplayVersion OptString `json:"displayVersion"`
}

// GetVersion returns the value of Version.
func (s *AddOnInfo) GetVersion() string {
	return s.Version
}

// GetName returns the value of Name.
func (s *AddOnInfo) GetName() string {
	return s.Name
}

// GetVendor returns the value of Vendor.
func (s *AddOnInfo) GetVendor() string {
	return s.Vendor
}

// GetDisplayName returns the value of DisplayName.
func (s *AddOnInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetDisplayVersion returns the value of DisplayVersion.
func (s *AddOnInfo) GetDisplayVersion() OptString {
	return s.DisplayVersion
}

// SetVersion sets the value of Version.
func (s *AddOnInfo) SetVersion(val string) {
	s.Version = val
}

// SetName sets the value of Name.
func (s *AddOnInfo) SetName(val string) {
	s.Name = val
}

// SetVendor sets the value of Vendor.
func (s *AddOnInfo) SetVendor(val string) {
	s.Vendor = val
}

// SetDisplayName sets the value of DisplayName.
func (s *AddOnInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetDisplayVersion sets the value of DisplayVersion.
func (s *AddOnInfo) SetDisplayVersion(val OptString) {
	s.DisplayVersion = val
}

type AddUsersBadRequest ErrorResponse

func (*AddUsersBadRequest) addUsersRes() {}

type AddUsersInternalServerError ErrorResponse

func (*AddUsersInternalServerError) addUsersRes() {}

type AddUsersUnauthorized ErrorResponse

func (*AddUsersUnauthorized) addUsersRes() {}

type AddVasaProviderBadRequest Error

func (*AddVasaProviderBadRequest) addVasaProviderRes() {}

type AddVasaProviderInternalServerError Error

func (*AddVasaProviderInternalServerError) addVasaProviderRes() {}

type AddVasaProviderStorageContainerBadRequest Error

func (*AddVasaProviderStorageContainerBadRequest) addVasaProviderStorageContainerRes() {}

type AddVasaProviderStorageContainerInternalServerError Error

func (*AddVasaProviderStorageContainerInternalServerError) addVasaProviderStorageContainerRes() {}

type AddVasaProviderStorageContainerNotFound Error

func (*AddVasaProviderStorageContainerNotFound) addVasaProviderStorageContainerRes() {}

type AddVasaProviderUserBadRequest Error

func (*AddVasaProviderUserBadRequest) addVasaProviderUserRes() {}

type AddVasaProviderUserInternalServerError Error

func (*AddVasaProviderUserInternalServerError) addVasaProviderUserRes() {}

type AddVasaProviderUserNotFound Error

func (*AddVasaProviderUserNotFound) addVasaProviderUserRes() {}

// Advanced Options used to add Cluster.
// Ref: #/components/schemas/AdvancedOptions
type AdvancedOptions struct {
	// EVC mode for new cluster, if needed.
	EvcMode          OptString           `json:"evcMode"`
	HighAvailability OptHighAvailability `json:"highAvailability"`
}

// GetEvcMode returns the value of EvcMode.
func (s *AdvancedOptions) GetEvcMode() OptString {
	return s.EvcMode
}

// GetHighAvailability returns the value of HighAvailability.
func (s *AdvancedOptions) GetHighAvailability() OptHighAvailability {
	return s.HighAvailability
}

// SetEvcMode sets the value of EvcMode.
func (s *AdvancedOptions) SetEvcMode(val OptString) {
	s.EvcMode = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *AdvancedOptions) SetHighAvailability(val OptHighAvailability) {
	s.HighAvailability = val
}

// Alias Specification.
// Ref: #/components/schemas/AliasSpec
type AliasSpec struct {
	// Aliases for bundle component type and version.
	Aliases []string `json:"aliases"`
	// Flag for force update version alias configuration.
	ForceUpdate OptBool `json:"forceUpdate"`
}

// GetAliases returns the value of Aliases.
func (s *AliasSpec) GetAliases() []string {
	return s.Aliases
}

// GetForceUpdate returns the value of ForceUpdate.
func (s *AliasSpec) GetForceUpdate() OptBool {
	return s.ForceUpdate
}

// SetAliases sets the value of Aliases.
func (s *AliasSpec) SetAliases(val []string) {
	s.Aliases = val
}

// SetForceUpdate sets the value of ForceUpdate.
func (s *AliasSpec) SetForceUpdate(val OptBool) {
	s.ForceUpdate = val
}

// Version of Target SDDC Manager.
// Ref: #/components/schemas/AlternativeApplicableSddcManagerVersion
type AlternativeApplicableSddcManagerVersion struct {
	// Version of target SDDC manger.
	Version OptString `json:"version"`
}

// GetVersion returns the value of Version.
func (s *AlternativeApplicableSddcManagerVersion) GetVersion() OptString {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *AlternativeApplicableSddcManagerVersion) SetVersion(val OptString) {
	s.Version = val
}

// Represents all applicability requirements for a Configuration Drift.
// Ref: #/components/schemas/Applicability
type Applicability struct {
	// List of product version related applicability.
	VersionApplicability []VersionApplicability `json:"versionApplicability"`
	// SKU Type for this Configuration Drift.
	SkuType string `json:"skuType"`
}

// GetVersionApplicability returns the value of VersionApplicability.
func (s *Applicability) GetVersionApplicability() []VersionApplicability {
	return s.VersionApplicability
}

// GetSkuType returns the value of SkuType.
func (s *Applicability) GetSkuType() string {
	return s.SkuType
}

// SetVersionApplicability sets the value of VersionApplicability.
func (s *Applicability) SetVersionApplicability(val []VersionApplicability) {
	s.VersionApplicability = val
}

// SetSkuType sets the value of SkuType.
func (s *Applicability) SetSkuType(val string) {
	s.SkuType = val
}

// Patch rest model that is located in the Product Version Catalog, these models are consumed by
// LCM's Flex BOM workflows.
// Ref: #/components/schemas/Artifact
type Artifact struct {
	// List of bundle artifacts for corresponding product patch version.
	Bundles []BundleInfo `json:"bundles"`
}

// GetBundles returns the value of Bundles.
func (s *Artifact) GetBundles() []BundleInfo {
	return s.Bundles
}

// SetBundles sets the value of Bundles.
func (s *Artifact) SetBundles(val []BundleInfo) {
	s.Bundles = val
}

// Metadata about the assessment run that is triggered and passed to the result.
// Ref: #/components/schemas/AssessmentMetadata
type AssessmentMetadata struct {
	// Version of target state definitions that is going to be used for assessment.
	TargetVersion OptString `json:"targetVersion"`
	// Resources of target state definitions that is going to be used for assessment.
	Resources []AssessmentResource `json:"resources"`
}

// GetTargetVersion returns the value of TargetVersion.
func (s *AssessmentMetadata) GetTargetVersion() OptString {
	return s.TargetVersion
}

// GetResources returns the value of Resources.
func (s *AssessmentMetadata) GetResources() []AssessmentResource {
	return s.Resources
}

// SetTargetVersion sets the value of TargetVersion.
func (s *AssessmentMetadata) SetTargetVersion(val OptString) {
	s.TargetVersion = val
}

// SetResources sets the value of Resources.
func (s *AssessmentMetadata) SetResources(val []AssessmentResource) {
	s.Resources = val
}

// Result from the baseliner assessment run (execution result, presented artifacts or ask for extra
// info).
// Ref: #/components/schemas/AssessmentOutput
type AssessmentOutput struct {
	PhysicalPresentedData OptEntityRest `json:"physicalPresentedData"`
	// Extra assessment artefacts produced by the workflow.
	PresentedArtifactsMap OptAssessmentOutputPresentedArtifactsMap `json:"presentedArtifactsMap"`
	ValidationResult      OptError                                 `json:"validationResult"`
	// Execution status.
	Status OptAssessmentOutputStatus `json:"status"`
	// Set of the input validation errors.
	InputValidationErrors []Error              `json:"inputValidationErrors"`
	DiscoveryProgress     OptDiscoveryProgress `json:"discoveryProgress"`
	// Related assessment run id.
	RelatedAssessmentId OptString `json:"relatedAssessmentId"`
	// Assessment task creation timestamp.
	Timestamp OptString `json:"timestamp"`
	// Assessment task completion timestamp.
	CompletionTimestamp OptString `json:"completionTimestamp"`
}

// GetPhysicalPresentedData returns the value of PhysicalPresentedData.
func (s *AssessmentOutput) GetPhysicalPresentedData() OptEntityRest {
	return s.PhysicalPresentedData
}

// GetPresentedArtifactsMap returns the value of PresentedArtifactsMap.
func (s *AssessmentOutput) GetPresentedArtifactsMap() OptAssessmentOutputPresentedArtifactsMap {
	return s.PresentedArtifactsMap
}

// GetValidationResult returns the value of ValidationResult.
func (s *AssessmentOutput) GetValidationResult() OptError {
	return s.ValidationResult
}

// GetStatus returns the value of Status.
func (s *AssessmentOutput) GetStatus() OptAssessmentOutputStatus {
	return s.Status
}

// GetInputValidationErrors returns the value of InputValidationErrors.
func (s *AssessmentOutput) GetInputValidationErrors() []Error {
	return s.InputValidationErrors
}

// GetDiscoveryProgress returns the value of DiscoveryProgress.
func (s *AssessmentOutput) GetDiscoveryProgress() OptDiscoveryProgress {
	return s.DiscoveryProgress
}

// GetRelatedAssessmentId returns the value of RelatedAssessmentId.
func (s *AssessmentOutput) GetRelatedAssessmentId() OptString {
	return s.RelatedAssessmentId
}

// GetTimestamp returns the value of Timestamp.
func (s *AssessmentOutput) GetTimestamp() OptString {
	return s.Timestamp
}

// GetCompletionTimestamp returns the value of CompletionTimestamp.
func (s *AssessmentOutput) GetCompletionTimestamp() OptString {
	return s.CompletionTimestamp
}

// SetPhysicalPresentedData sets the value of PhysicalPresentedData.
func (s *AssessmentOutput) SetPhysicalPresentedData(val OptEntityRest) {
	s.PhysicalPresentedData = val
}

// SetPresentedArtifactsMap sets the value of PresentedArtifactsMap.
func (s *AssessmentOutput) SetPresentedArtifactsMap(val OptAssessmentOutputPresentedArtifactsMap) {
	s.PresentedArtifactsMap = val
}

// SetValidationResult sets the value of ValidationResult.
func (s *AssessmentOutput) SetValidationResult(val OptError) {
	s.ValidationResult = val
}

// SetStatus sets the value of Status.
func (s *AssessmentOutput) SetStatus(val OptAssessmentOutputStatus) {
	s.Status = val
}

// SetInputValidationErrors sets the value of InputValidationErrors.
func (s *AssessmentOutput) SetInputValidationErrors(val []Error) {
	s.InputValidationErrors = val
}

// SetDiscoveryProgress sets the value of DiscoveryProgress.
func (s *AssessmentOutput) SetDiscoveryProgress(val OptDiscoveryProgress) {
	s.DiscoveryProgress = val
}

// SetRelatedAssessmentId sets the value of RelatedAssessmentId.
func (s *AssessmentOutput) SetRelatedAssessmentId(val OptString) {
	s.RelatedAssessmentId = val
}

// SetTimestamp sets the value of Timestamp.
func (s *AssessmentOutput) SetTimestamp(val OptString) {
	s.Timestamp = val
}

// SetCompletionTimestamp sets the value of CompletionTimestamp.
func (s *AssessmentOutput) SetCompletionTimestamp(val OptString) {
	s.CompletionTimestamp = val
}

func (*AssessmentOutput) getResultRes() {}

// Extra assessment artefacts produced by the workflow.
type AssessmentOutputPresentedArtifactsMap map[string]AssessmentOutputPresentedArtifactsMapItem

func (s *AssessmentOutputPresentedArtifactsMap) init() AssessmentOutputPresentedArtifactsMap {
	m := *s
	if m == nil {
		m = map[string]AssessmentOutputPresentedArtifactsMapItem{}
		*s = m
	}
	return m
}

// Extra assessment artefacts produced by the workflow.
type AssessmentOutputPresentedArtifactsMapItem struct{}

// Execution status.
type AssessmentOutputStatus string

const (
	AssessmentOutputStatusINPROGRESS           AssessmentOutputStatus = "IN_PROGRESS"
	AssessmentOutputStatusCOMPLETEDWITHSUCCESS AssessmentOutputStatus = "COMPLETED_WITH_SUCCESS"
	AssessmentOutputStatusCOMPLETEDWITHFAILURE AssessmentOutputStatus = "COMPLETED_WITH_FAILURE"
)

// AllValues returns all AssessmentOutputStatus values.
func (AssessmentOutputStatus) AllValues() []AssessmentOutputStatus {
	return []AssessmentOutputStatus{
		AssessmentOutputStatusINPROGRESS,
		AssessmentOutputStatusCOMPLETEDWITHSUCCESS,
		AssessmentOutputStatusCOMPLETEDWITHFAILURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AssessmentOutputStatus) MarshalText() ([]byte, error) {
	switch s {
	case AssessmentOutputStatusINPROGRESS:
		return []byte(s), nil
	case AssessmentOutputStatusCOMPLETEDWITHSUCCESS:
		return []byte(s), nil
	case AssessmentOutputStatusCOMPLETEDWITHFAILURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AssessmentOutputStatus) UnmarshalText(data []byte) error {
	switch AssessmentOutputStatus(data) {
	case AssessmentOutputStatusINPROGRESS:
		*s = AssessmentOutputStatusINPROGRESS
		return nil
	case AssessmentOutputStatusCOMPLETEDWITHSUCCESS:
		*s = AssessmentOutputStatusCOMPLETEDWITHSUCCESS
		return nil
	case AssessmentOutputStatusCOMPLETEDWITHFAILURE:
		*s = AssessmentOutputStatusCOMPLETEDWITHFAILURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Spec for assessment retry.
// Ref: #/components/schemas/AssessmentPartialRetryInput
type AssessmentPartialRetryInput struct {
	// List of error ids to retry.
	ErrorIds []string `json:"errorIds"`
	// Options map (toggles) to control assessment flow. Available toggles 'discoveryCaching' - if set to
	// true the assessment engine will use the Domain data (if present) from previous discovery execution.
	//  If any of the passed in the request domains is not present in the cache the Discovery is
	// triggered for ALL domains (even the ones existing in the cache).
	Options OptAssessmentPartialRetryInputOptions `json:"options"`
}

// GetErrorIds returns the value of ErrorIds.
func (s *AssessmentPartialRetryInput) GetErrorIds() []string {
	return s.ErrorIds
}

// GetOptions returns the value of Options.
func (s *AssessmentPartialRetryInput) GetOptions() OptAssessmentPartialRetryInputOptions {
	return s.Options
}

// SetErrorIds sets the value of ErrorIds.
func (s *AssessmentPartialRetryInput) SetErrorIds(val []string) {
	s.ErrorIds = val
}

// SetOptions sets the value of Options.
func (s *AssessmentPartialRetryInput) SetOptions(val OptAssessmentPartialRetryInputOptions) {
	s.Options = val
}

// Options map (toggles) to control assessment flow. Available toggles 'discoveryCaching' - if set to
// true the assessment engine will use the Domain data (if present) from previous discovery execution.
//
//	If any of the passed in the request domains is not present in the cache the Discovery is
//
// triggered for ALL domains (even the ones existing in the cache).
type AssessmentPartialRetryInputOptions map[string]string

func (s *AssessmentPartialRetryInputOptions) init() AssessmentPartialRetryInputOptions {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Resource information for the assessment.
// Ref: #/components/schemas/AssessmentResource
type AssessmentResource struct {
	// Type of the resource.
	Type OptString `json:"type"`
	// ID of the resource.
	ID OptString `json:"id"`
	// Name of the resource.
	Name OptString `json:"name"`
	// Domain ID of the resource.
	DomainId OptString `json:"domainId"`
	// Target upgrade version for the resource.
	TargetVersion OptString `json:"targetVersion"`
}

// GetType returns the value of Type.
func (s *AssessmentResource) GetType() OptString {
	return s.Type
}

// GetID returns the value of ID.
func (s *AssessmentResource) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *AssessmentResource) GetName() OptString {
	return s.Name
}

// GetDomainId returns the value of DomainId.
func (s *AssessmentResource) GetDomainId() OptString {
	return s.DomainId
}

// GetTargetVersion returns the value of TargetVersion.
func (s *AssessmentResource) GetTargetVersion() OptString {
	return s.TargetVersion
}

// SetType sets the value of Type.
func (s *AssessmentResource) SetType(val OptString) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *AssessmentResource) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AssessmentResource) SetName(val OptString) {
	s.Name = val
}

// SetDomainId sets the value of DomainId.
func (s *AssessmentResource) SetDomainId(val OptString) {
	s.DomainId = val
}

// SetTargetVersion sets the value of TargetVersion.
func (s *AssessmentResource) SetTargetVersion(val OptString) {
	s.TargetVersion = val
}

// A summary of an assessment execution.
// Ref: #/components/schemas/AssessmentTaskInfo
type AssessmentTaskInfo struct {
	// The id of the assessment run.
	ID OptString `json:"id"`
	// The related task state of the run associated to the given result.
	State OptString `json:"state"`
	// Timestamp corresponding to the time when the assessment was initiated.
	Timestamp OptInt64 `json:"timestamp"`
	// Timestamp corresponding to the time when the assessment was finished.
	CompletionTimestamp OptInt64 `json:"completionTimestamp"`
	// The domains that have been assessed in the run associated to the given result.
	DomainInputs []DomainInfo          `json:"domainInputs"`
	Metadata     OptAssessmentMetadata `json:"metadata"`
}

// GetID returns the value of ID.
func (s *AssessmentTaskInfo) GetID() OptString {
	return s.ID
}

// GetState returns the value of State.
func (s *AssessmentTaskInfo) GetState() OptString {
	return s.State
}

// GetTimestamp returns the value of Timestamp.
func (s *AssessmentTaskInfo) GetTimestamp() OptInt64 {
	return s.Timestamp
}

// GetCompletionTimestamp returns the value of CompletionTimestamp.
func (s *AssessmentTaskInfo) GetCompletionTimestamp() OptInt64 {
	return s.CompletionTimestamp
}

// GetDomainInputs returns the value of DomainInputs.
func (s *AssessmentTaskInfo) GetDomainInputs() []DomainInfo {
	return s.DomainInputs
}

// GetMetadata returns the value of Metadata.
func (s *AssessmentTaskInfo) GetMetadata() OptAssessmentMetadata {
	return s.Metadata
}

// SetID sets the value of ID.
func (s *AssessmentTaskInfo) SetID(val OptString) {
	s.ID = val
}

// SetState sets the value of State.
func (s *AssessmentTaskInfo) SetState(val OptString) {
	s.State = val
}

// SetTimestamp sets the value of Timestamp.
func (s *AssessmentTaskInfo) SetTimestamp(val OptInt64) {
	s.Timestamp = val
}

// SetCompletionTimestamp sets the value of CompletionTimestamp.
func (s *AssessmentTaskInfo) SetCompletionTimestamp(val OptInt64) {
	s.CompletionTimestamp = val
}

// SetDomainInputs sets the value of DomainInputs.
func (s *AssessmentTaskInfo) SetDomainInputs(val []DomainInfo) {
	s.DomainInputs = val
}

// SetMetadata sets the value of Metadata.
func (s *AssessmentTaskInfo) SetMetadata(val OptAssessmentMetadata) {
	s.Metadata = val
}

type AssignTagsToClusterBadRequest Error

func (*AssignTagsToClusterBadRequest) assignTagsToClusterRes() {}

type AssignTagsToClusterInternalServerError Error

func (*AssignTagsToClusterInternalServerError) assignTagsToClusterRes() {}

type AssignTagsToDomainBadRequest Error

func (*AssignTagsToDomainBadRequest) assignTagsToDomainRes() {}

type AssignTagsToDomainInternalServerError Error

func (*AssignTagsToDomainInternalServerError) assignTagsToDomainRes() {}

type AssignTagsToHostBadRequest Error

func (*AssignTagsToHostBadRequest) assignTagsToHostRes() {}

type AssignTagsToHostInternalServerError Error

func (*AssignTagsToHostInternalServerError) assignTagsToHostRes() {}

// Task association for a resource warning. Indicates in which task the resource warning occurred.
// Ref: #/components/schemas/AssociatedTask
type AssociatedTask struct {
	// ID of the task where the warning for the resource occurred.
	TaskId string `json:"taskId"`
	// ID of the subtask where the warning for the resource occurred.
	SubTaskId OptString `json:"subTaskId"`
}

// GetTaskId returns the value of TaskId.
func (s *AssociatedTask) GetTaskId() string {
	return s.TaskId
}

// GetSubTaskId returns the value of SubTaskId.
func (s *AssociatedTask) GetSubTaskId() OptString {
	return s.SubTaskId
}

// SetTaskId sets the value of TaskId.
func (s *AssociatedTask) SetTaskId(val string) {
	s.TaskId = val
}

// SetSubTaskId sets the value of SubTaskId.
func (s *AssociatedTask) SetSubTaskId(val OptString) {
	s.SubTaskId = val
}

// Represents the credential resource in the system.
// Ref: #/components/schemas/AuthenticatedResource
type AuthenticatedResource struct {
	// Resource ID.
	ResourceId string `json:"resourceId"`
	// Resource name.
	ResourceName string `json:"resourceName"`
	// Resource IP address.
	ResourceIp string `json:"resourceIp"`
	// Resource type.
	ResourceType string `json:"resourceType"`
	// Domain names.
	DomainNames []string `json:"domainNames"`
	// Domain name (deprecated).
	//
	// Deprecated: schema marks this property as deprecated.
	DomainName OptString `json:"domainName"`
}

// GetResourceId returns the value of ResourceId.
func (s *AuthenticatedResource) GetResourceId() string {
	return s.ResourceId
}

// GetResourceName returns the value of ResourceName.
func (s *AuthenticatedResource) GetResourceName() string {
	return s.ResourceName
}

// GetResourceIp returns the value of ResourceIp.
func (s *AuthenticatedResource) GetResourceIp() string {
	return s.ResourceIp
}

// GetResourceType returns the value of ResourceType.
func (s *AuthenticatedResource) GetResourceType() string {
	return s.ResourceType
}

// GetDomainNames returns the value of DomainNames.
func (s *AuthenticatedResource) GetDomainNames() []string {
	return s.DomainNames
}

// GetDomainName returns the value of DomainName.
func (s *AuthenticatedResource) GetDomainName() OptString {
	return s.DomainName
}

// SetResourceId sets the value of ResourceId.
func (s *AuthenticatedResource) SetResourceId(val string) {
	s.ResourceId = val
}

// SetResourceName sets the value of ResourceName.
func (s *AuthenticatedResource) SetResourceName(val string) {
	s.ResourceName = val
}

// SetResourceIp sets the value of ResourceIp.
func (s *AuthenticatedResource) SetResourceIp(val string) {
	s.ResourceIp = val
}

// SetResourceType sets the value of ResourceType.
func (s *AuthenticatedResource) SetResourceType(val string) {
	s.ResourceType = val
}

// SetDomainNames sets the value of DomainNames.
func (s *AuthenticatedResource) SetDomainNames(val []string) {
	s.DomainNames = val
}

// SetDomainName sets the value of DomainName.
func (s *AuthenticatedResource) SetDomainName(val OptString) {
	s.DomainName = val
}

// Represents a auto-rotate policy for a credential.
// Ref: #/components/schemas/AutoRotateCredentialPolicy
type AutoRotateCredentialPolicy struct {
	// Frequency in days.
	FrequencyInDays OptInt32 `json:"frequencyInDays"`
	// The timestamp at which auto-rotate for credential will run.
	NextSchedule string `json:"nextSchedule"`
}

// GetFrequencyInDays returns the value of FrequencyInDays.
func (s *AutoRotateCredentialPolicy) GetFrequencyInDays() OptInt32 {
	return s.FrequencyInDays
}

// GetNextSchedule returns the value of NextSchedule.
func (s *AutoRotateCredentialPolicy) GetNextSchedule() string {
	return s.NextSchedule
}

// SetFrequencyInDays sets the value of FrequencyInDays.
func (s *AutoRotateCredentialPolicy) SetFrequencyInDays(val OptInt32) {
	s.FrequencyInDays = val
}

// SetNextSchedule sets the value of NextSchedule.
func (s *AutoRotateCredentialPolicy) SetNextSchedule(val string) {
	s.NextSchedule = val
}

// Represents password auto rotate config details.
// Ref: #/components/schemas/AutoRotateCredentialPolicyInputSpec
type AutoRotateCredentialPolicyInputSpec struct {
	// Frequency in days.
	FrequencyInDays OptInt32 `json:"frequencyInDays"`
	// Enable or disable  auto rotate policy.
	EnableAutoRotatePolicy bool `json:"enableAutoRotatePolicy"`
}

// GetFrequencyInDays returns the value of FrequencyInDays.
func (s *AutoRotateCredentialPolicyInputSpec) GetFrequencyInDays() OptInt32 {
	return s.FrequencyInDays
}

// GetEnableAutoRotatePolicy returns the value of EnableAutoRotatePolicy.
func (s *AutoRotateCredentialPolicyInputSpec) GetEnableAutoRotatePolicy() bool {
	return s.EnableAutoRotatePolicy
}

// SetFrequencyInDays sets the value of FrequencyInDays.
func (s *AutoRotateCredentialPolicyInputSpec) SetFrequencyInDays(val OptInt32) {
	s.FrequencyInDays = val
}

// SetEnableAutoRotatePolicy sets the value of EnableAutoRotatePolicy.
func (s *AutoRotateCredentialPolicyInputSpec) SetEnableAutoRotatePolicy(val bool) {
	s.EnableAutoRotatePolicy = val
}

// Defines an Application virtual Network (AVN) and its attributes.
// Ref: #/components/schemas/Avn
type Avn struct {
	// The UUID of the AVN.
	ID OptString `json:"id"`
	// User provided name of the AVN.
	Name string `json:"name"`
	// The region type of AVN; X_REGION or REGION_A.
	RegionType string `json:"regionType"`
	// Subnet assigned to the AVN.
	Subnet string `json:"subnet"`
	// Subnet mask for the network assigned to the AVN.
	SubnetMask string `json:"subnetMask"`
	// Gateway of the AVN subnet.
	Gateway string `json:"gateway"`
	// MTU for the AVN.
	Mtu int32 `json:"mtu"`
	// VLAN ID for the VLAN backed AVN.
	VlanId OptInt32 `json:"vlanId"`
	// Port group name identifying the AVN on the distributed switch.
	PortGroupName OptString `json:"portGroupName"`
	// AVN search domain.
	DomainName OptString `json:"domainName"`
	// Name of Tier-1 Gateway AVN is connected to.
	RouterName OptString `json:"routerName"`
}

// GetID returns the value of ID.
func (s *Avn) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *Avn) GetName() string {
	return s.Name
}

// GetRegionType returns the value of RegionType.
func (s *Avn) GetRegionType() string {
	return s.RegionType
}

// GetSubnet returns the value of Subnet.
func (s *Avn) GetSubnet() string {
	return s.Subnet
}

// GetSubnetMask returns the value of SubnetMask.
func (s *Avn) GetSubnetMask() string {
	return s.SubnetMask
}

// GetGateway returns the value of Gateway.
func (s *Avn) GetGateway() string {
	return s.Gateway
}

// GetMtu returns the value of Mtu.
func (s *Avn) GetMtu() int32 {
	return s.Mtu
}

// GetVlanId returns the value of VlanId.
func (s *Avn) GetVlanId() OptInt32 {
	return s.VlanId
}

// GetPortGroupName returns the value of PortGroupName.
func (s *Avn) GetPortGroupName() OptString {
	return s.PortGroupName
}

// GetDomainName returns the value of DomainName.
func (s *Avn) GetDomainName() OptString {
	return s.DomainName
}

// GetRouterName returns the value of RouterName.
func (s *Avn) GetRouterName() OptString {
	return s.RouterName
}

// SetID sets the value of ID.
func (s *Avn) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Avn) SetName(val string) {
	s.Name = val
}

// SetRegionType sets the value of RegionType.
func (s *Avn) SetRegionType(val string) {
	s.RegionType = val
}

// SetSubnet sets the value of Subnet.
func (s *Avn) SetSubnet(val string) {
	s.Subnet = val
}

// SetSubnetMask sets the value of SubnetMask.
func (s *Avn) SetSubnetMask(val string) {
	s.SubnetMask = val
}

// SetGateway sets the value of Gateway.
func (s *Avn) SetGateway(val string) {
	s.Gateway = val
}

// SetMtu sets the value of Mtu.
func (s *Avn) SetMtu(val int32) {
	s.Mtu = val
}

// SetVlanId sets the value of VlanId.
func (s *Avn) SetVlanId(val OptInt32) {
	s.VlanId = val
}

// SetPortGroupName sets the value of PortGroupName.
func (s *Avn) SetPortGroupName(val OptString) {
	s.PortGroupName = val
}

// SetDomainName sets the value of DomainName.
func (s *Avn) SetDomainName(val OptString) {
	s.DomainName = val
}

// SetRouterName sets the value of RouterName.
func (s *Avn) SetRouterName(val OptString) {
	s.RouterName = val
}

// Provide the spec to create the AVNs.
// Ref: #/components/schemas/AvnsCreationSpec
type AvnsCreationSpec struct {
	// The UUID of the Edge Cluster to associate VLAN AVNs.
	EdgeClusterId OptString `json:"edgeClusterId"`
	// The list of AVNs to be created.
	Avns []Avn `json:"avns"`
}

// GetEdgeClusterId returns the value of EdgeClusterId.
func (s *AvnsCreationSpec) GetEdgeClusterId() OptString {
	return s.EdgeClusterId
}

// GetAvns returns the value of Avns.
func (s *AvnsCreationSpec) GetAvns() []Avn {
	return s.Avns
}

// SetEdgeClusterId sets the value of EdgeClusterId.
func (s *AvnsCreationSpec) SetEdgeClusterId(val OptString) {
	s.EdgeClusterId = val
}

// SetAvns sets the value of Avns.
func (s *AvnsCreationSpec) SetAvns(val []Avn) {
	s.Avns = val
}

// Backup configuration used to configure backup of NSX and SDDC manager.
// Ref: #/components/schemas/BackupConfiguration
type BackupConfiguration struct {
	Encryption OptEncryption `json:"encryption"`
	// List of backup locations.
	BackupLocations []BackupLocation `json:"backupLocations"`
	// List of backup schedules.
	BackupSchedules []BackupSchedule `json:"backupSchedules"`
	// Backup configuration status of both FTP server and passphrase.
	IsConfigured OptBool `json:"isConfigured"`
}

// GetEncryption returns the value of Encryption.
func (s *BackupConfiguration) GetEncryption() OptEncryption {
	return s.Encryption
}

// GetBackupLocations returns the value of BackupLocations.
func (s *BackupConfiguration) GetBackupLocations() []BackupLocation {
	return s.BackupLocations
}

// GetBackupSchedules returns the value of BackupSchedules.
func (s *BackupConfiguration) GetBackupSchedules() []BackupSchedule {
	return s.BackupSchedules
}

// GetIsConfigured returns the value of IsConfigured.
func (s *BackupConfiguration) GetIsConfigured() OptBool {
	return s.IsConfigured
}

// SetEncryption sets the value of Encryption.
func (s *BackupConfiguration) SetEncryption(val OptEncryption) {
	s.Encryption = val
}

// SetBackupLocations sets the value of BackupLocations.
func (s *BackupConfiguration) SetBackupLocations(val []BackupLocation) {
	s.BackupLocations = val
}

// SetBackupSchedules sets the value of BackupSchedules.
func (s *BackupConfiguration) SetBackupSchedules(val []BackupSchedule) {
	s.BackupSchedules = val
}

// SetIsConfigured sets the value of IsConfigured.
func (s *BackupConfiguration) SetIsConfigured(val OptBool) {
	s.IsConfigured = val
}

func (*BackupConfiguration) getBackupConfigurationRes() {}

// Backup configuration Specification.
// Ref: #/components/schemas/BackupConfigurationSpec
type BackupConfigurationSpec struct {
	Encryption OptEncryption `json:"encryption"`
	// List of backup locations.
	BackupLocations []BackupLocation `json:"backupLocations"`
	// List of backup schedules.
	BackupSchedules []BackupSchedule `json:"backupSchedules"`
}

// GetEncryption returns the value of Encryption.
func (s *BackupConfigurationSpec) GetEncryption() OptEncryption {
	return s.Encryption
}

// GetBackupLocations returns the value of BackupLocations.
func (s *BackupConfigurationSpec) GetBackupLocations() []BackupLocation {
	return s.BackupLocations
}

// GetBackupSchedules returns the value of BackupSchedules.
func (s *BackupConfigurationSpec) GetBackupSchedules() []BackupSchedule {
	return s.BackupSchedules
}

// SetEncryption sets the value of Encryption.
func (s *BackupConfigurationSpec) SetEncryption(val OptEncryption) {
	s.Encryption = val
}

// SetBackupLocations sets the value of BackupLocations.
func (s *BackupConfigurationSpec) SetBackupLocations(val []BackupLocation) {
	s.BackupLocations = val
}

// SetBackupSchedules sets the value of BackupSchedules.
func (s *BackupConfigurationSpec) SetBackupSchedules(val []BackupSchedule) {
	s.BackupSchedules = val
}

// Backup location to backup VCF resources.
// Ref: #/components/schemas/BackupLocation
type BackupLocation struct {
	// IP address or FQDN  of the backup server.
	Server string `json:"server"`
	// Port number for the backup server to connect.
	Port int32 `json:"port"`
	// Protocol to be used for transferring files.
	Protocol string `json:"protocol"`
	// Backup server username.
	Username string `json:"username"`
	// Backup server password.
	Password OptString `json:"password"`
	// Full directory path to save the backup files.
	DirectoryPath string `json:"directoryPath"`
	// SSH fingerprint of the backup server.
	SshFingerprint OptString `json:"sshFingerprint"`
}

// GetServer returns the value of Server.
func (s *BackupLocation) GetServer() string {
	return s.Server
}

// GetPort returns the value of Port.
func (s *BackupLocation) GetPort() int32 {
	return s.Port
}

// GetProtocol returns the value of Protocol.
func (s *BackupLocation) GetProtocol() string {
	return s.Protocol
}

// GetUsername returns the value of Username.
func (s *BackupLocation) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *BackupLocation) GetPassword() OptString {
	return s.Password
}

// GetDirectoryPath returns the value of DirectoryPath.
func (s *BackupLocation) GetDirectoryPath() string {
	return s.DirectoryPath
}

// GetSshFingerprint returns the value of SshFingerprint.
func (s *BackupLocation) GetSshFingerprint() OptString {
	return s.SshFingerprint
}

// SetServer sets the value of Server.
func (s *BackupLocation) SetServer(val string) {
	s.Server = val
}

// SetPort sets the value of Port.
func (s *BackupLocation) SetPort(val int32) {
	s.Port = val
}

// SetProtocol sets the value of Protocol.
func (s *BackupLocation) SetProtocol(val string) {
	s.Protocol = val
}

// SetUsername sets the value of Username.
func (s *BackupLocation) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *BackupLocation) SetPassword(val OptString) {
	s.Password = val
}

// SetDirectoryPath sets the value of DirectoryPath.
func (s *BackupLocation) SetDirectoryPath(val string) {
	s.DirectoryPath = val
}

// SetSshFingerprint sets the value of SshFingerprint.
func (s *BackupLocation) SetSshFingerprint(val OptString) {
	s.SshFingerprint = val
}

func (*BackupLocation) getBackupLocationRes() {}

// Element specification to trigger backup.
// Ref: #/components/schemas/BackupResource
type BackupResource struct {
	// Resource type.
	ResourceType string `json:"resourceType"`
}

// GetResourceType returns the value of ResourceType.
func (s *BackupResource) GetResourceType() string {
	return s.ResourceType
}

// SetResourceType sets the value of ResourceType.
func (s *BackupResource) SetResourceType(val string) {
	s.ResourceType = val
}

// Backup retention policy for SDDC Manager comprising three attributes. Backup files are deleted if
// they do not satisfy any of the three attributes.
// Ref: #/components/schemas/BackupRetentionPolicy
type BackupRetentionPolicy struct {
	// This attribute controls the number of recent backup files to retain. Range 1 to 600 backup files.
	NumberOfMostRecentBackups int32 `json:"numberOfMostRecentBackups"`
	// This attribute controls the number of hourly backup files to retain, measured in days. Range 0 to
	// 14 days. The system will filter the existing backup files, and retain one for every hour for the
	// specified number of days, counting back from the most recent backup.
	NumberOfDaysOfHourlyBackups OptInt32 `json:"numberOfDaysOfHourlyBackups"`
	// This attribute controls the number of daily backup files to retain, measured in days. Range 0 to
	// 30 days. The system will filter the existing backup files, and retain one for every day for the
	// specified number of days, counting back from the most recent backup.
	NumberOfDaysOfDailyBackups OptInt32 `json:"numberOfDaysOfDailyBackups"`
}

// GetNumberOfMostRecentBackups returns the value of NumberOfMostRecentBackups.
func (s *BackupRetentionPolicy) GetNumberOfMostRecentBackups() int32 {
	return s.NumberOfMostRecentBackups
}

// GetNumberOfDaysOfHourlyBackups returns the value of NumberOfDaysOfHourlyBackups.
func (s *BackupRetentionPolicy) GetNumberOfDaysOfHourlyBackups() OptInt32 {
	return s.NumberOfDaysOfHourlyBackups
}

// GetNumberOfDaysOfDailyBackups returns the value of NumberOfDaysOfDailyBackups.
func (s *BackupRetentionPolicy) GetNumberOfDaysOfDailyBackups() OptInt32 {
	return s.NumberOfDaysOfDailyBackups
}

// SetNumberOfMostRecentBackups sets the value of NumberOfMostRecentBackups.
func (s *BackupRetentionPolicy) SetNumberOfMostRecentBackups(val int32) {
	s.NumberOfMostRecentBackups = val
}

// SetNumberOfDaysOfHourlyBackups sets the value of NumberOfDaysOfHourlyBackups.
func (s *BackupRetentionPolicy) SetNumberOfDaysOfHourlyBackups(val OptInt32) {
	s.NumberOfDaysOfHourlyBackups = val
}

// SetNumberOfDaysOfDailyBackups sets the value of NumberOfDaysOfDailyBackups.
func (s *BackupRetentionPolicy) SetNumberOfDaysOfDailyBackups(val OptInt32) {
	s.NumberOfDaysOfDailyBackups = val
}

// Backup schedule configuration.
// Ref: #/components/schemas/BackupSchedule
type BackupSchedule struct {
	// Resource type to configure backup schedule.
	ResourceType string `json:"resourceType"`
	// Enable/disable scheduled backups.
	TakeScheduledBackups OptBool `json:"takeScheduledBackups"`
	// Backup frequency.
	Frequency string `json:"frequency"`
	// List of days of the week to schedule backup.
	DaysOfWeek []string `json:"daysOfWeek"`
	// Hour of the day to schedule backup.
	HourOfDay OptInt32 `json:"hourOfDay"`
	// Minute of the hour to schedule backup.
	MinuteOfHour OptInt32 `json:"minuteOfHour"`
	// Enable/disable backups on state change. If enabled, SDDC Manager will take a backup after the
	// successful completion of an operation that changes its state. This mode requires that scheduled
	// backups be enabled.
	TakeBackupOnStateChange OptBool                  `json:"takeBackupOnStateChange"`
	RetentionPolicy         OptBackupRetentionPolicy `json:"retentionPolicy"`
}

// GetResourceType returns the value of ResourceType.
func (s *BackupSchedule) GetResourceType() string {
	return s.ResourceType
}

// GetTakeScheduledBackups returns the value of TakeScheduledBackups.
func (s *BackupSchedule) GetTakeScheduledBackups() OptBool {
	return s.TakeScheduledBackups
}

// GetFrequency returns the value of Frequency.
func (s *BackupSchedule) GetFrequency() string {
	return s.Frequency
}

// GetDaysOfWeek returns the value of DaysOfWeek.
func (s *BackupSchedule) GetDaysOfWeek() []string {
	return s.DaysOfWeek
}

// GetHourOfDay returns the value of HourOfDay.
func (s *BackupSchedule) GetHourOfDay() OptInt32 {
	return s.HourOfDay
}

// GetMinuteOfHour returns the value of MinuteOfHour.
func (s *BackupSchedule) GetMinuteOfHour() OptInt32 {
	return s.MinuteOfHour
}

// GetTakeBackupOnStateChange returns the value of TakeBackupOnStateChange.
func (s *BackupSchedule) GetTakeBackupOnStateChange() OptBool {
	return s.TakeBackupOnStateChange
}

// GetRetentionPolicy returns the value of RetentionPolicy.
func (s *BackupSchedule) GetRetentionPolicy() OptBackupRetentionPolicy {
	return s.RetentionPolicy
}

// SetResourceType sets the value of ResourceType.
func (s *BackupSchedule) SetResourceType(val string) {
	s.ResourceType = val
}

// SetTakeScheduledBackups sets the value of TakeScheduledBackups.
func (s *BackupSchedule) SetTakeScheduledBackups(val OptBool) {
	s.TakeScheduledBackups = val
}

// SetFrequency sets the value of Frequency.
func (s *BackupSchedule) SetFrequency(val string) {
	s.Frequency = val
}

// SetDaysOfWeek sets the value of DaysOfWeek.
func (s *BackupSchedule) SetDaysOfWeek(val []string) {
	s.DaysOfWeek = val
}

// SetHourOfDay sets the value of HourOfDay.
func (s *BackupSchedule) SetHourOfDay(val OptInt32) {
	s.HourOfDay = val
}

// SetMinuteOfHour sets the value of MinuteOfHour.
func (s *BackupSchedule) SetMinuteOfHour(val OptInt32) {
	s.MinuteOfHour = val
}

// SetTakeBackupOnStateChange sets the value of TakeBackupOnStateChange.
func (s *BackupSchedule) SetTakeBackupOnStateChange(val OptBool) {
	s.TakeBackupOnStateChange = val
}

// SetRetentionPolicy sets the value of RetentionPolicy.
func (s *BackupSchedule) SetRetentionPolicy(val OptBackupRetentionPolicy) {
	s.RetentionPolicy = val
}

// Backup Specification.
// Ref: #/components/schemas/BackupSpec
type BackupSpec struct {
	// List of elements to be backed up.
	Elements []BackupResource `json:"elements"`
}

// GetElements returns the value of Elements.
func (s *BackupSpec) GetElements() []BackupResource {
	return s.Elements
}

// SetElements sets the value of Elements.
func (s *BackupSpec) SetElements(val []BackupResource) {
	s.Elements = val
}

// Ref: #/components/schemas/BackupTask
type BackupTask struct {
	// Backup task ID.
	ID OptString `json:"id"`
	// Backup task name.
	Name OptString `json:"name"`
	// Backup task status.
	Status OptString `json:"status"`
	// Backup resources, to get the backup details.
	Resources []Resource `json:"resources"`
	// List of errors in case of a failure.
	Errors []Error `json:"errors"`
}

// GetID returns the value of ID.
func (s *BackupTask) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *BackupTask) GetName() OptString {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *BackupTask) GetStatus() OptString {
	return s.Status
}

// GetResources returns the value of Resources.
func (s *BackupTask) GetResources() []Resource {
	return s.Resources
}

// GetErrors returns the value of Errors.
func (s *BackupTask) GetErrors() []Error {
	return s.Errors
}

// SetID sets the value of ID.
func (s *BackupTask) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *BackupTask) SetName(val OptString) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *BackupTask) SetStatus(val OptString) {
	s.Status = val
}

// SetResources sets the value of Resources.
func (s *BackupTask) SetResources(val []Resource) {
	s.Resources = val
}

// SetErrors sets the value of Errors.
func (s *BackupTask) SetErrors(val []Error) {
	s.Errors = val
}

func (*BackupTask) startBackupRes() {}

// Base Alias representation.
// Ref: #/components/schemas/BaseAlias
type BaseAlias struct {
	// Base version.
	Version string `json:"version"`
	// List of Alias versions.
	Aliases []string `json:"aliases"`
}

// GetVersion returns the value of Version.
func (s *BaseAlias) GetVersion() string {
	return s.Version
}

// GetAliases returns the value of Aliases.
func (s *BaseAlias) GetAliases() []string {
	return s.Aliases
}

// SetVersion sets the value of Version.
func (s *BaseAlias) SetVersion(val string) {
	s.Version = val
}

// SetAliases sets the value of Aliases.
func (s *BaseAlias) SetAliases(val []string) {
	s.Aliases = val
}

// Represents credentials of a resource in the system.
// Ref: #/components/schemas/BaseCredential
type BaseCredential struct {
	// Credential type.
	CredentialType OptString `json:"credentialType"`
	// Account type.
	AccountType OptString `json:"accountType"`
	// Username.
	Username string `json:"username"`
	// Password.
	Password OptString `json:"password"`
}

// GetCredentialType returns the value of CredentialType.
func (s *BaseCredential) GetCredentialType() OptString {
	return s.CredentialType
}

// GetAccountType returns the value of AccountType.
func (s *BaseCredential) GetAccountType() OptString {
	return s.AccountType
}

// GetUsername returns the value of Username.
func (s *BaseCredential) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *BaseCredential) GetPassword() OptString {
	return s.Password
}

// SetCredentialType sets the value of CredentialType.
func (s *BaseCredential) SetCredentialType(val OptString) {
	s.CredentialType = val
}

// SetAccountType sets the value of AccountType.
func (s *BaseCredential) SetAccountType(val OptString) {
	s.AccountType = val
}

// SetUsername sets the value of Username.
func (s *BaseCredential) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *BaseCredential) SetPassword(val OptString) {
	s.Password = val
}

// BaseImage contains bits to install/update the appropriate Cloud Foundation software components in
// your management domain or workload domain.
// Ref: #/components/schemas/BaseImageDetails
type BaseImageDetails struct {
	// BaseImage display name.
	DisplayName string `json:"displayName"`
	// BaseImage display version.
	DisplayVersion string `json:"displayVersion"`
	// BaseImage release date.
	//
	// Deprecated: schema marks this property as deprecated.
	ReleaseDate OptString `json:"releaseDate"`
	// Timestamp of BaseImage release.
	ReleaseTimestamp OptString `json:"releaseTimestamp"`
	// ESX Quick Patch compatible source image versions.
	QuickPatchCompatibleVersions []Version `json:"quickPatchCompatibleVersions"`
}

// GetDisplayName returns the value of DisplayName.
func (s *BaseImageDetails) GetDisplayName() string {
	return s.DisplayName
}

// GetDisplayVersion returns the value of DisplayVersion.
func (s *BaseImageDetails) GetDisplayVersion() string {
	return s.DisplayVersion
}

// GetReleaseDate returns the value of ReleaseDate.
func (s *BaseImageDetails) GetReleaseDate() OptString {
	return s.ReleaseDate
}

// GetReleaseTimestamp returns the value of ReleaseTimestamp.
func (s *BaseImageDetails) GetReleaseTimestamp() OptString {
	return s.ReleaseTimestamp
}

// GetQuickPatchCompatibleVersions returns the value of QuickPatchCompatibleVersions.
func (s *BaseImageDetails) GetQuickPatchCompatibleVersions() []Version {
	return s.QuickPatchCompatibleVersions
}

// SetDisplayName sets the value of DisplayName.
func (s *BaseImageDetails) SetDisplayName(val string) {
	s.DisplayName = val
}

// SetDisplayVersion sets the value of DisplayVersion.
func (s *BaseImageDetails) SetDisplayVersion(val string) {
	s.DisplayVersion = val
}

// SetReleaseDate sets the value of ReleaseDate.
func (s *BaseImageDetails) SetReleaseDate(val OptString) {
	s.ReleaseDate = val
}

// SetReleaseTimestamp sets the value of ReleaseTimestamp.
func (s *BaseImageDetails) SetReleaseTimestamp(val OptString) {
	s.ReleaseTimestamp = val
}

// SetQuickPatchCompatibleVersions sets the value of QuickPatchCompatibleVersions.
func (s *BaseImageDetails) SetQuickPatchCompatibleVersions(val []Version) {
	s.QuickPatchCompatibleVersions = val
}

// BaseImage contains bits to install/update the appropriate Cloud Foundation software components in
// your management domain or workload domain.
// Ref: #/components/schemas/BaseImageInfo
type BaseImageInfo struct {
	// BaseImage Version.
	Version string              `json:"version"`
	Details OptBaseImageDetails `json:"details"`
}

// GetVersion returns the value of Version.
func (s *BaseImageInfo) GetVersion() string {
	return s.Version
}

// GetDetails returns the value of Details.
func (s *BaseImageInfo) GetDetails() OptBaseImageDetails {
	return s.Details
}

// SetVersion sets the value of Version.
func (s *BaseImageInfo) SetVersion(val string) {
	s.Version = val
}

// SetDetails sets the value of Details.
func (s *BaseImageInfo) SetDetails(val OptBaseImageDetails) {
	s.Details = val
}

// Basic auth details.
// Ref: #/components/schemas/BasicAuthDetails
type BasicAuthDetails struct {
	// Basic auth status.
	Status string `json:"status"`
	// Basic auth username.
	Username OptString `json:"username"`
}

// GetStatus returns the value of Status.
func (s *BasicAuthDetails) GetStatus() string {
	return s.Status
}

// GetUsername returns the value of Username.
func (s *BasicAuthDetails) GetUsername() OptString {
	return s.Username
}

// SetStatus sets the value of Status.
func (s *BasicAuthDetails) SetStatus(val string) {
	s.Status = val
}

// SetUsername sets the value of Username.
func (s *BasicAuthDetails) SetUsername(val OptString) {
	s.Username = val
}

// This specification contains configuration inputs required for BGP configuration for an uplink.
// Ref: #/components/schemas/BgpPeerSpec
type BgpPeerSpec struct {
	// BGP Peer IP.
	IP string `json:"ip"`
	// ASN of Peer.
	Asn int64 `json:"asn"`
	// BGP Peer Password.
	Password string `json:"password"`
}

// GetIP returns the value of IP.
func (s *BgpPeerSpec) GetIP() string {
	return s.IP
}

// GetAsn returns the value of Asn.
func (s *BgpPeerSpec) GetAsn() int64 {
	return s.Asn
}

// GetPassword returns the value of Password.
func (s *BgpPeerSpec) GetPassword() string {
	return s.Password
}

// SetIP sets the value of IP.
func (s *BgpPeerSpec) SetIP(val string) {
	s.IP = val
}

// SetAsn sets the value of Asn.
func (s *BgpPeerSpec) SetAsn(val int64) {
	s.Asn = val
}

// SetPassword sets the value of Password.
func (s *BgpPeerSpec) SetPassword(val string) {
	s.Password = val
}

// Bundle contains bits to install/update the appropriate Cloud Foundation software components in
// your management domain or workload domain.
// Ref: #/components/schemas/Bundle
type Bundle struct {
	// Bundle ID.
	ID OptString `json:"id"`
	// Bundle Type.
	Type string `json:"type"`
	// Bundle Description.
	Description OptString `json:"description"`
	// Bundle Version.
	Version OptString `json:"version"`
	// Bundle Severity.
	Severity OptString `json:"severity"`
	// Bundle Vendor.
	Vendor OptString `json:"vendor"`
	// Bundle Release Date.
	ReleasedDate OptString `json:"releasedDate"`
	// Is Bundle Cumulative.
	IsCumulative OptBool `json:"isCumulative"`
	// Is compliant with the current VCF version.
	IsCompliant OptBool `json:"isCompliant"`
	// Bundle Size in MB.
	SizeMB OptFloat64 `json:"sizeMB"`
	// Bundle Download Status.
	DownloadStatus string `json:"downloadStatus"`
	// Bundle Components.
	Components []BundleComponent `json:"components"`
	// Bundle Applicability Status.
	ApplicabilityStatus OptString `json:"applicabilityStatus"`
	// Bundle Applicability Order.
	ApplicabilityOrder OptInt32 `json:"applicabilityOrder"`
	// Is Bundle partially upgraded.
	IsPartiallyUpgraded OptBool `json:"isPartiallyUpgraded"`
}

// GetID returns the value of ID.
func (s *Bundle) GetID() OptString {
	return s.ID
}

// GetType returns the value of Type.
func (s *Bundle) GetType() string {
	return s.Type
}

// GetDescription returns the value of Description.
func (s *Bundle) GetDescription() OptString {
	return s.Description
}

// GetVersion returns the value of Version.
func (s *Bundle) GetVersion() OptString {
	return s.Version
}

// GetSeverity returns the value of Severity.
func (s *Bundle) GetSeverity() OptString {
	return s.Severity
}

// GetVendor returns the value of Vendor.
func (s *Bundle) GetVendor() OptString {
	return s.Vendor
}

// GetReleasedDate returns the value of ReleasedDate.
func (s *Bundle) GetReleasedDate() OptString {
	return s.ReleasedDate
}

// GetIsCumulative returns the value of IsCumulative.
func (s *Bundle) GetIsCumulative() OptBool {
	return s.IsCumulative
}

// GetIsCompliant returns the value of IsCompliant.
func (s *Bundle) GetIsCompliant() OptBool {
	return s.IsCompliant
}

// GetSizeMB returns the value of SizeMB.
func (s *Bundle) GetSizeMB() OptFloat64 {
	return s.SizeMB
}

// GetDownloadStatus returns the value of DownloadStatus.
func (s *Bundle) GetDownloadStatus() string {
	return s.DownloadStatus
}

// GetComponents returns the value of Components.
func (s *Bundle) GetComponents() []BundleComponent {
	return s.Components
}

// GetApplicabilityStatus returns the value of ApplicabilityStatus.
func (s *Bundle) GetApplicabilityStatus() OptString {
	return s.ApplicabilityStatus
}

// GetApplicabilityOrder returns the value of ApplicabilityOrder.
func (s *Bundle) GetApplicabilityOrder() OptInt32 {
	return s.ApplicabilityOrder
}

// GetIsPartiallyUpgraded returns the value of IsPartiallyUpgraded.
func (s *Bundle) GetIsPartiallyUpgraded() OptBool {
	return s.IsPartiallyUpgraded
}

// SetID sets the value of ID.
func (s *Bundle) SetID(val OptString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *Bundle) SetType(val string) {
	s.Type = val
}

// SetDescription sets the value of Description.
func (s *Bundle) SetDescription(val OptString) {
	s.Description = val
}

// SetVersion sets the value of Version.
func (s *Bundle) SetVersion(val OptString) {
	s.Version = val
}

// SetSeverity sets the value of Severity.
func (s *Bundle) SetSeverity(val OptString) {
	s.Severity = val
}

// SetVendor sets the value of Vendor.
func (s *Bundle) SetVendor(val OptString) {
	s.Vendor = val
}

// SetReleasedDate sets the value of ReleasedDate.
func (s *Bundle) SetReleasedDate(val OptString) {
	s.ReleasedDate = val
}

// SetIsCumulative sets the value of IsCumulative.
func (s *Bundle) SetIsCumulative(val OptBool) {
	s.IsCumulative = val
}

// SetIsCompliant sets the value of IsCompliant.
func (s *Bundle) SetIsCompliant(val OptBool) {
	s.IsCompliant = val
}

// SetSizeMB sets the value of SizeMB.
func (s *Bundle) SetSizeMB(val OptFloat64) {
	s.SizeMB = val
}

// SetDownloadStatus sets the value of DownloadStatus.
func (s *Bundle) SetDownloadStatus(val string) {
	s.DownloadStatus = val
}

// SetComponents sets the value of Components.
func (s *Bundle) SetComponents(val []BundleComponent) {
	s.Components = val
}

// SetApplicabilityStatus sets the value of ApplicabilityStatus.
func (s *Bundle) SetApplicabilityStatus(val OptString) {
	s.ApplicabilityStatus = val
}

// SetApplicabilityOrder sets the value of ApplicabilityOrder.
func (s *Bundle) SetApplicabilityOrder(val OptInt32) {
	s.ApplicabilityOrder = val
}

// SetIsPartiallyUpgraded sets the value of IsPartiallyUpgraded.
func (s *Bundle) SetIsPartiallyUpgraded(val OptBool) {
	s.IsPartiallyUpgraded = val
}

func (*Bundle) getBundleRes() {}

// Bundle Software Component.
// Ref: #/components/schemas/BundleComponent
type BundleComponent struct {
	// Bundle Component Description.
	Description OptString `json:"description"`
	// Bundle Component Vendor.
	Vendor OptString `json:"vendor"`
	// Bundle Component Release Date.
	ReleasedDate OptString `json:"releasedDate"`
	// Bundle Component's to/target version after Upgrade.
	ToVersion OptString `json:"toVersion"`
	// Bundle Component's from/source version before Upgrade.
	FromVersion OptString `json:"fromVersion"`
	// Bundle Component Image Type.
	ImageType string `json:"imageType"`
	// ID of Resource/Software Component.
	ID OptString `json:"id"`
	// Type of Resource/Software Component.
	Type OptString `json:"type"`
}

// GetDescription returns the value of Description.
func (s *BundleComponent) GetDescription() OptString {
	return s.Description
}

// GetVendor returns the value of Vendor.
func (s *BundleComponent) GetVendor() OptString {
	return s.Vendor
}

// GetReleasedDate returns the value of ReleasedDate.
func (s *BundleComponent) GetReleasedDate() OptString {
	return s.ReleasedDate
}

// GetToVersion returns the value of ToVersion.
func (s *BundleComponent) GetToVersion() OptString {
	return s.ToVersion
}

// GetFromVersion returns the value of FromVersion.
func (s *BundleComponent) GetFromVersion() OptString {
	return s.FromVersion
}

// GetImageType returns the value of ImageType.
func (s *BundleComponent) GetImageType() string {
	return s.ImageType
}

// GetID returns the value of ID.
func (s *BundleComponent) GetID() OptString {
	return s.ID
}

// GetType returns the value of Type.
func (s *BundleComponent) GetType() OptString {
	return s.Type
}

// SetDescription sets the value of Description.
func (s *BundleComponent) SetDescription(val OptString) {
	s.Description = val
}

// SetVendor sets the value of Vendor.
func (s *BundleComponent) SetVendor(val OptString) {
	s.Vendor = val
}

// SetReleasedDate sets the value of ReleasedDate.
func (s *BundleComponent) SetReleasedDate(val OptString) {
	s.ReleasedDate = val
}

// SetToVersion sets the value of ToVersion.
func (s *BundleComponent) SetToVersion(val OptString) {
	s.ToVersion = val
}

// SetFromVersion sets the value of FromVersion.
func (s *BundleComponent) SetFromVersion(val OptString) {
	s.FromVersion = val
}

// SetImageType sets the value of ImageType.
func (s *BundleComponent) SetImageType(val string) {
	s.ImageType = val
}

// SetID sets the value of ID.
func (s *BundleComponent) SetID(val OptString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *BundleComponent) SetType(val OptString) {
	s.Type = val
}

// Bundle Download Specification. This specification gets used in the Bundle Download API.
// Ref: #/components/schemas/BundleDownloadSpec
type BundleDownloadSpec struct {
	// Bundle Download Scheduled Time.
	ScheduledTimestamp OptString `json:"scheduledTimestamp"`
	// Flag for enabling Download Now. If true, scheduledTimestamp is ignored.
	DownloadNow OptBool `json:"downloadNow"`
	// Flag for cancelling the download. If true, scheduledTimestamp/downloadNow is ignored.
	CancelNow OptBool `json:"cancelNow"`
}

// GetScheduledTimestamp returns the value of ScheduledTimestamp.
func (s *BundleDownloadSpec) GetScheduledTimestamp() OptString {
	return s.ScheduledTimestamp
}

// GetDownloadNow returns the value of DownloadNow.
func (s *BundleDownloadSpec) GetDownloadNow() OptBool {
	return s.DownloadNow
}

// GetCancelNow returns the value of CancelNow.
func (s *BundleDownloadSpec) GetCancelNow() OptBool {
	return s.CancelNow
}

// SetScheduledTimestamp sets the value of ScheduledTimestamp.
func (s *BundleDownloadSpec) SetScheduledTimestamp(val OptString) {
	s.ScheduledTimestamp = val
}

// SetDownloadNow sets the value of DownloadNow.
func (s *BundleDownloadSpec) SetDownloadNow(val OptBool) {
	s.DownloadNow = val
}

// SetCancelNow sets the value of CancelNow.
func (s *BundleDownloadSpec) SetCancelNow(val OptBool) {
	s.CancelNow = val
}

// Patch/Install bundle info to be used as part of ProductVersionCatalog patches.
// Ref: #/components/schemas/BundleInfo
type BundleInfo struct {
	// Bundle id.
	ID string `json:"id"`
	// Type of bundle. ex) PATCH, INSTALL.
	Type string `json:"type"`
	// Patch/Install bundle name.
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *BundleInfo) GetID() string {
	return s.ID
}

// GetType returns the value of Type.
func (s *BundleInfo) GetType() string {
	return s.Type
}

// GetName returns the value of Name.
func (s *BundleInfo) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *BundleInfo) SetID(val string) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *BundleInfo) SetType(val string) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *BundleInfo) SetName(val string) {
	s.Name = val
}

// Bundle Update Specification.
// Ref: #/components/schemas/BundleUpdateSpec
type BundleUpdateSpec struct {
	BundleDownloadSpec OptBundleDownloadSpec `json:"bundleDownloadSpec"`
	// [Deprecated] Path to the software compatibility sets file.
	//
	// Deprecated: schema marks this property as deprecated.
	CompatibilitySetsFilePath OptString `json:"compatibilitySetsFilePath"`
}

// GetBundleDownloadSpec returns the value of BundleDownloadSpec.
func (s *BundleUpdateSpec) GetBundleDownloadSpec() OptBundleDownloadSpec {
	return s.BundleDownloadSpec
}

// GetCompatibilitySetsFilePath returns the value of CompatibilitySetsFilePath.
func (s *BundleUpdateSpec) GetCompatibilitySetsFilePath() OptString {
	return s.CompatibilitySetsFilePath
}

// SetBundleDownloadSpec sets the value of BundleDownloadSpec.
func (s *BundleUpdateSpec) SetBundleDownloadSpec(val OptBundleDownloadSpec) {
	s.BundleDownloadSpec = val
}

// SetCompatibilitySetsFilePath sets the value of CompatibilitySetsFilePath.
func (s *BundleUpdateSpec) SetCompatibilitySetsFilePath(val OptString) {
	s.CompatibilitySetsFilePath = val
}

// Bundle Upload Specification.
// Ref: #/components/schemas/BundleUploadSpec
type BundleUploadSpec struct {
	// Bundle Upload File Path.
	BundleFilePath string `json:"bundleFilePath"`
	// Bundle Upload Manifest File Path.
	ManifestFilePath string `json:"manifestFilePath"`
	// Bundle Upload Signature File Path.
	SignatureFilePath OptString `json:"signatureFilePath"`
	// [Deprecated] Path to the software compatibility sets file.
	//
	// Deprecated: schema marks this property as deprecated.
	CompatibilitySetsFilePath OptString               `json:"compatibilitySetsFilePath"`
	PartnerExtensionSpec      OptPartnerExtensionSpec `json:"partnerExtensionSpec"`
}

// GetBundleFilePath returns the value of BundleFilePath.
func (s *BundleUploadSpec) GetBundleFilePath() string {
	return s.BundleFilePath
}

// GetManifestFilePath returns the value of ManifestFilePath.
func (s *BundleUploadSpec) GetManifestFilePath() string {
	return s.ManifestFilePath
}

// GetSignatureFilePath returns the value of SignatureFilePath.
func (s *BundleUploadSpec) GetSignatureFilePath() OptString {
	return s.SignatureFilePath
}

// GetCompatibilitySetsFilePath returns the value of CompatibilitySetsFilePath.
func (s *BundleUploadSpec) GetCompatibilitySetsFilePath() OptString {
	return s.CompatibilitySetsFilePath
}

// GetPartnerExtensionSpec returns the value of PartnerExtensionSpec.
func (s *BundleUploadSpec) GetPartnerExtensionSpec() OptPartnerExtensionSpec {
	return s.PartnerExtensionSpec
}

// SetBundleFilePath sets the value of BundleFilePath.
func (s *BundleUploadSpec) SetBundleFilePath(val string) {
	s.BundleFilePath = val
}

// SetManifestFilePath sets the value of ManifestFilePath.
func (s *BundleUploadSpec) SetManifestFilePath(val string) {
	s.ManifestFilePath = val
}

// SetSignatureFilePath sets the value of SignatureFilePath.
func (s *BundleUploadSpec) SetSignatureFilePath(val OptString) {
	s.SignatureFilePath = val
}

// SetCompatibilitySetsFilePath sets the value of CompatibilitySetsFilePath.
func (s *BundleUploadSpec) SetCompatibilitySetsFilePath(val OptString) {
	s.CompatibilitySetsFilePath = val
}

// SetPartnerExtensionSpec sets the value of PartnerExtensionSpec.
func (s *BundleUploadSpec) SetPartnerExtensionSpec(val OptPartnerExtensionSpec) {
	s.PartnerExtensionSpec = val
}

// Represents information about CPUs on a host.
// Ref: #/components/schemas/Cpu
type CPU struct {
	// Total CPU frequency in MHz.
	FrequencyMHz OptFloat64 `json:"frequencyMHz"`
	// Used CPU frequency in MHz.
	UsedFrequencyMHz OptFloat64 `json:"usedFrequencyMHz"`
	// Number of CPU cores.
	Cores OptInt32 `json:"cores"`
	// Information about each of the CPU cores.
	CpuCores []CpuCore `json:"cpuCores"`
}

// GetFrequencyMHz returns the value of FrequencyMHz.
func (s *CPU) GetFrequencyMHz() OptFloat64 {
	return s.FrequencyMHz
}

// GetUsedFrequencyMHz returns the value of UsedFrequencyMHz.
func (s *CPU) GetUsedFrequencyMHz() OptFloat64 {
	return s.UsedFrequencyMHz
}

// GetCores returns the value of Cores.
func (s *CPU) GetCores() OptInt32 {
	return s.Cores
}

// GetCpuCores returns the value of CpuCores.
func (s *CPU) GetCpuCores() []CpuCore {
	return s.CpuCores
}

// SetFrequencyMHz sets the value of FrequencyMHz.
func (s *CPU) SetFrequencyMHz(val OptFloat64) {
	s.FrequencyMHz = val
}

// SetUsedFrequencyMHz sets the value of UsedFrequencyMHz.
func (s *CPU) SetUsedFrequencyMHz(val OptFloat64) {
	s.UsedFrequencyMHz = val
}

// SetCores sets the value of Cores.
func (s *CPU) SetCores(val OptInt32) {
	s.Cores = val
}

// SetCpuCores sets the value of CpuCores.
func (s *CPU) SetCpuCores(val []CpuCore) {
	s.CpuCores = val
}

type CancelCredentialsTaskBadRequest Error

func (*CancelCredentialsTaskBadRequest) cancelCredentialsTaskRes() {}

type CancelCredentialsTaskInternalServerError Error

func (*CancelCredentialsTaskInternalServerError) cancelCredentialsTaskRes() {}

type CancelTaskConflict Error

func (*CancelTaskConflict) cancelTaskRes() {}

type CancelTaskInternalServerError Error

func (*CancelTaskInternalServerError) cancelTaskRes() {}

type CancelTaskNotFound Error

func (*CancelTaskNotFound) cancelTaskRes() {}

// CancelTaskOK is response for CancelTask operation.
type CancelTaskOK struct{}

func (*CancelTaskOK) cancelTaskRes() {}

// Represents a usage and capacity information of a Resource.
// Ref: #/components/schemas/Capacity
type Capacity struct {
	CPU     OptCpuInfo     `json:"cpu"`
	Memory  OptMemoryInfo  `json:"memory"`
	Storage OptStorageInfo `json:"storage"`
}

// GetCPU returns the value of CPU.
func (s *Capacity) GetCPU() OptCpuInfo {
	return s.CPU
}

// GetMemory returns the value of Memory.
func (s *Capacity) GetMemory() OptMemoryInfo {
	return s.Memory
}

// GetStorage returns the value of Storage.
func (s *Capacity) GetStorage() OptStorageInfo {
	return s.Storage
}

// SetCPU sets the value of CPU.
func (s *Capacity) SetCPU(val OptCpuInfo) {
	s.CPU = val
}

// SetMemory sets the value of Memory.
func (s *Capacity) SetMemory(val OptMemoryInfo) {
	s.Memory = val
}

// SetStorage sets the value of Storage.
func (s *Capacity) SetStorage(val OptStorageInfo) {
	s.Storage = val
}

// Defines VCF CEIP status and instance id.
// Ref: #/components/schemas/Ceip
type Ceip struct {
	// CEIP status.
	Status string `json:"status"`
	// Instance Id of VCF.
	InstanceId OptString `json:"instanceId"`
}

// GetStatus returns the value of Status.
func (s *Ceip) GetStatus() string {
	return s.Status
}

// GetInstanceId returns the value of InstanceId.
func (s *Ceip) GetInstanceId() OptString {
	return s.InstanceId
}

// SetStatus sets the value of Status.
func (s *Ceip) SetStatus(val string) {
	s.Status = val
}

// SetInstanceId sets the value of InstanceId.
func (s *Ceip) SetInstanceId(val OptString) {
	s.InstanceId = val
}

func (*Ceip) getCeipStatusRes() {}

// Represents certificate and its attributes.
// Ref: #/components/schemas/Certificate
type Certificate struct {
	// Whether the certificate is installed or not.
	IsInstalled bool `json:"isInstalled"`
	// The X.509 version of the certificate.
	Version string `json:"version"`
	// The serial number of the certificate.
	SerialNumber string `json:"serialNumber"`
	// To whom the certificate is issued.
	IssuedTo string `json:"issuedTo"`
	// Resource type.
	ResourceType string `json:"resourceType"`
	// Resource fqdn.
	ResourceName OptString `json:"resourceName"`
	// The certificate authority that issued the certificate.
	IssuedBy string `json:"issuedBy"`
	// The timestamp before which certificate is not valid.
	NotBefore string `json:"notBefore"`
	// The timestamp after which certificate is not valid.
	NotAfter string `json:"notAfter"`
	// Algorithm used to sign the certificate.
	SignatureAlgorithm string `json:"signatureAlgorithm"`
	// Complete distinguished name to which the certificate is issued.
	Subject string `json:"subject"`
	// Domain of the resource certificate.
	Domain string `json:"domain"`
	// The alternative names to which the certificate is issued.
	SubjectAlternativeName []string `json:"subjectAlternativeName"`
	// The public key of the certificate.
	PublicKey string `json:"publicKey"`
	// The public key algorithm of the certificate.
	PublicKeyAlgorithm string `json:"publicKeyAlgorithm"`
	// The key size of the certificate.
	KeySize string `json:"keySize"`
	// Algorithm used to generate thumbprint.
	ThumbprintAlgorithm string `json:"thumbprintAlgorithm"`
	// Thumbprint generated using certificate content.
	Thumbprint string `json:"thumbprint"`
	// Number of days left for the certificate to expire.
	NumberOfDaysToExpire int32 `json:"numberOfDaysToExpire"`
	// Certificate expiry status.
	ExpirationStatus string `json:"expirationStatus"`
	// The PEM encoded certificate content.
	PemEncoded string `json:"pemEncoded"`
	// Error if certificate cannot be fetched.
	GetCertificateError string `json:"getCertificateError"`
	// The last operation type.
	OperationType OptString `json:"operationType"`
	// The last operation status.
	OperationStatus OptString `json:"operationStatus"`
	// The last operation status message.
	OperationMessage OptString `json:"operationMessage"`
	// Certificate chain ordered from intermediate to root certificates.
	CaChain []Certificate `json:"caChain"`
}

// GetIsInstalled returns the value of IsInstalled.
func (s *Certificate) GetIsInstalled() bool {
	return s.IsInstalled
}

// GetVersion returns the value of Version.
func (s *Certificate) GetVersion() string {
	return s.Version
}

// GetSerialNumber returns the value of SerialNumber.
func (s *Certificate) GetSerialNumber() string {
	return s.SerialNumber
}

// GetIssuedTo returns the value of IssuedTo.
func (s *Certificate) GetIssuedTo() string {
	return s.IssuedTo
}

// GetResourceType returns the value of ResourceType.
func (s *Certificate) GetResourceType() string {
	return s.ResourceType
}

// GetResourceName returns the value of ResourceName.
func (s *Certificate) GetResourceName() OptString {
	return s.ResourceName
}

// GetIssuedBy returns the value of IssuedBy.
func (s *Certificate) GetIssuedBy() string {
	return s.IssuedBy
}

// GetNotBefore returns the value of NotBefore.
func (s *Certificate) GetNotBefore() string {
	return s.NotBefore
}

// GetNotAfter returns the value of NotAfter.
func (s *Certificate) GetNotAfter() string {
	return s.NotAfter
}

// GetSignatureAlgorithm returns the value of SignatureAlgorithm.
func (s *Certificate) GetSignatureAlgorithm() string {
	return s.SignatureAlgorithm
}

// GetSubject returns the value of Subject.
func (s *Certificate) GetSubject() string {
	return s.Subject
}

// GetDomain returns the value of Domain.
func (s *Certificate) GetDomain() string {
	return s.Domain
}

// GetSubjectAlternativeName returns the value of SubjectAlternativeName.
func (s *Certificate) GetSubjectAlternativeName() []string {
	return s.SubjectAlternativeName
}

// GetPublicKey returns the value of PublicKey.
func (s *Certificate) GetPublicKey() string {
	return s.PublicKey
}

// GetPublicKeyAlgorithm returns the value of PublicKeyAlgorithm.
func (s *Certificate) GetPublicKeyAlgorithm() string {
	return s.PublicKeyAlgorithm
}

// GetKeySize returns the value of KeySize.
func (s *Certificate) GetKeySize() string {
	return s.KeySize
}

// GetThumbprintAlgorithm returns the value of ThumbprintAlgorithm.
func (s *Certificate) GetThumbprintAlgorithm() string {
	return s.ThumbprintAlgorithm
}

// GetThumbprint returns the value of Thumbprint.
func (s *Certificate) GetThumbprint() string {
	return s.Thumbprint
}

// GetNumberOfDaysToExpire returns the value of NumberOfDaysToExpire.
func (s *Certificate) GetNumberOfDaysToExpire() int32 {
	return s.NumberOfDaysToExpire
}

// GetExpirationStatus returns the value of ExpirationStatus.
func (s *Certificate) GetExpirationStatus() string {
	return s.ExpirationStatus
}

// GetPemEncoded returns the value of PemEncoded.
func (s *Certificate) GetPemEncoded() string {
	return s.PemEncoded
}

// GetGetCertificateError returns the value of GetCertificateError.
func (s *Certificate) GetGetCertificateError() string {
	return s.GetCertificateError
}

// GetOperationType returns the value of OperationType.
func (s *Certificate) GetOperationType() OptString {
	return s.OperationType
}

// GetOperationStatus returns the value of OperationStatus.
func (s *Certificate) GetOperationStatus() OptString {
	return s.OperationStatus
}

// GetOperationMessage returns the value of OperationMessage.
func (s *Certificate) GetOperationMessage() OptString {
	return s.OperationMessage
}

// GetCaChain returns the value of CaChain.
func (s *Certificate) GetCaChain() []Certificate {
	return s.CaChain
}

// SetIsInstalled sets the value of IsInstalled.
func (s *Certificate) SetIsInstalled(val bool) {
	s.IsInstalled = val
}

// SetVersion sets the value of Version.
func (s *Certificate) SetVersion(val string) {
	s.Version = val
}

// SetSerialNumber sets the value of SerialNumber.
func (s *Certificate) SetSerialNumber(val string) {
	s.SerialNumber = val
}

// SetIssuedTo sets the value of IssuedTo.
func (s *Certificate) SetIssuedTo(val string) {
	s.IssuedTo = val
}

// SetResourceType sets the value of ResourceType.
func (s *Certificate) SetResourceType(val string) {
	s.ResourceType = val
}

// SetResourceName sets the value of ResourceName.
func (s *Certificate) SetResourceName(val OptString) {
	s.ResourceName = val
}

// SetIssuedBy sets the value of IssuedBy.
func (s *Certificate) SetIssuedBy(val string) {
	s.IssuedBy = val
}

// SetNotBefore sets the value of NotBefore.
func (s *Certificate) SetNotBefore(val string) {
	s.NotBefore = val
}

// SetNotAfter sets the value of NotAfter.
func (s *Certificate) SetNotAfter(val string) {
	s.NotAfter = val
}

// SetSignatureAlgorithm sets the value of SignatureAlgorithm.
func (s *Certificate) SetSignatureAlgorithm(val string) {
	s.SignatureAlgorithm = val
}

// SetSubject sets the value of Subject.
func (s *Certificate) SetSubject(val string) {
	s.Subject = val
}

// SetDomain sets the value of Domain.
func (s *Certificate) SetDomain(val string) {
	s.Domain = val
}

// SetSubjectAlternativeName sets the value of SubjectAlternativeName.
func (s *Certificate) SetSubjectAlternativeName(val []string) {
	s.SubjectAlternativeName = val
}

// SetPublicKey sets the value of PublicKey.
func (s *Certificate) SetPublicKey(val string) {
	s.PublicKey = val
}

// SetPublicKeyAlgorithm sets the value of PublicKeyAlgorithm.
func (s *Certificate) SetPublicKeyAlgorithm(val string) {
	s.PublicKeyAlgorithm = val
}

// SetKeySize sets the value of KeySize.
func (s *Certificate) SetKeySize(val string) {
	s.KeySize = val
}

// SetThumbprintAlgorithm sets the value of ThumbprintAlgorithm.
func (s *Certificate) SetThumbprintAlgorithm(val string) {
	s.ThumbprintAlgorithm = val
}

// SetThumbprint sets the value of Thumbprint.
func (s *Certificate) SetThumbprint(val string) {
	s.Thumbprint = val
}

// SetNumberOfDaysToExpire sets the value of NumberOfDaysToExpire.
func (s *Certificate) SetNumberOfDaysToExpire(val int32) {
	s.NumberOfDaysToExpire = val
}

// SetExpirationStatus sets the value of ExpirationStatus.
func (s *Certificate) SetExpirationStatus(val string) {
	s.ExpirationStatus = val
}

// SetPemEncoded sets the value of PemEncoded.
func (s *Certificate) SetPemEncoded(val string) {
	s.PemEncoded = val
}

// SetGetCertificateError sets the value of GetCertificateError.
func (s *Certificate) SetGetCertificateError(val string) {
	s.GetCertificateError = val
}

// SetOperationType sets the value of OperationType.
func (s *Certificate) SetOperationType(val OptString) {
	s.OperationType = val
}

// SetOperationStatus sets the value of OperationStatus.
func (s *Certificate) SetOperationStatus(val OptString) {
	s.OperationStatus = val
}

// SetOperationMessage sets the value of OperationMessage.
func (s *Certificate) SetOperationMessage(val OptString) {
	s.OperationMessage = val
}

// SetCaChain sets the value of CaChain.
func (s *Certificate) SetCaChain(val []Certificate) {
	s.CaChain = val
}

// The Certificate Authority (CA) details.
// Ref: #/components/schemas/CertificateAuthority
type CertificateAuthority struct {
	// CA type. Only supports Microsoft and OpenSSL CAs.
	ID string `json:"id"`
	// Microsoft CA server username.
	Username OptString `json:"username"`
	// Microsoft CA server url.
	ServerUrl OptString `json:"serverUrl"`
	// Microsoft CA server template name.
	TemplateName OptString `json:"templateName"`
	// OpenSSL CA domain name.
	CommonName OptString `json:"commonName"`
	// ISO 3166 country code where company is legally registered.
	Country OptString `json:"country"`
	// The full name of the state where company is legally registered.
	State OptString `json:"state"`
	// The city or locality where company is legally registered.
	Locality OptString `json:"locality"`
	// The name under which company is legally registered.
	Organization OptString `json:"organization"`
	// Organization with which the certificate is associated.
	OrganizationUnit OptString `json:"organizationUnit"`
}

// GetID returns the value of ID.
func (s *CertificateAuthority) GetID() string {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *CertificateAuthority) GetUsername() OptString {
	return s.Username
}

// GetServerUrl returns the value of ServerUrl.
func (s *CertificateAuthority) GetServerUrl() OptString {
	return s.ServerUrl
}

// GetTemplateName returns the value of TemplateName.
func (s *CertificateAuthority) GetTemplateName() OptString {
	return s.TemplateName
}

// GetCommonName returns the value of CommonName.
func (s *CertificateAuthority) GetCommonName() OptString {
	return s.CommonName
}

// GetCountry returns the value of Country.
func (s *CertificateAuthority) GetCountry() OptString {
	return s.Country
}

// GetState returns the value of State.
func (s *CertificateAuthority) GetState() OptString {
	return s.State
}

// GetLocality returns the value of Locality.
func (s *CertificateAuthority) GetLocality() OptString {
	return s.Locality
}

// GetOrganization returns the value of Organization.
func (s *CertificateAuthority) GetOrganization() OptString {
	return s.Organization
}

// GetOrganizationUnit returns the value of OrganizationUnit.
func (s *CertificateAuthority) GetOrganizationUnit() OptString {
	return s.OrganizationUnit
}

// SetID sets the value of ID.
func (s *CertificateAuthority) SetID(val string) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *CertificateAuthority) SetUsername(val OptString) {
	s.Username = val
}

// SetServerUrl sets the value of ServerUrl.
func (s *CertificateAuthority) SetServerUrl(val OptString) {
	s.ServerUrl = val
}

// SetTemplateName sets the value of TemplateName.
func (s *CertificateAuthority) SetTemplateName(val OptString) {
	s.TemplateName = val
}

// SetCommonName sets the value of CommonName.
func (s *CertificateAuthority) SetCommonName(val OptString) {
	s.CommonName = val
}

// SetCountry sets the value of Country.
func (s *CertificateAuthority) SetCountry(val OptString) {
	s.Country = val
}

// SetState sets the value of State.
func (s *CertificateAuthority) SetState(val OptString) {
	s.State = val
}

// SetLocality sets the value of Locality.
func (s *CertificateAuthority) SetLocality(val OptString) {
	s.Locality = val
}

// SetOrganization sets the value of Organization.
func (s *CertificateAuthority) SetOrganization(val OptString) {
	s.Organization = val
}

// SetOrganizationUnit sets the value of OrganizationUnit.
func (s *CertificateAuthority) SetOrganizationUnit(val OptString) {
	s.OrganizationUnit = val
}

func (*CertificateAuthority) getCertificateAuthorityByIdRes() {}

// This specification contains Certificate Authority (CA) creation details. Either
// openSSLCertificateAuthoritySpec or microsoftCertificateAuthoritySpec should be specified.
// Ref: #/components/schemas/CertificateAuthorityCreationSpec
type CertificateAuthorityCreationSpec struct {
	OpenSSLCertificateAuthoritySpec   OptOpenSSLCertificateAuthoritySpec   `json:"openSSLCertificateAuthoritySpec"`
	MicrosoftCertificateAuthoritySpec OptMicrosoftCertificateAuthoritySpec `json:"microsoftCertificateAuthoritySpec"`
}

// GetOpenSSLCertificateAuthoritySpec returns the value of OpenSSLCertificateAuthoritySpec.
func (s *CertificateAuthorityCreationSpec) GetOpenSSLCertificateAuthoritySpec() OptOpenSSLCertificateAuthoritySpec {
	return s.OpenSSLCertificateAuthoritySpec
}

// GetMicrosoftCertificateAuthoritySpec returns the value of MicrosoftCertificateAuthoritySpec.
func (s *CertificateAuthorityCreationSpec) GetMicrosoftCertificateAuthoritySpec() OptMicrosoftCertificateAuthoritySpec {
	return s.MicrosoftCertificateAuthoritySpec
}

// SetOpenSSLCertificateAuthoritySpec sets the value of OpenSSLCertificateAuthoritySpec.
func (s *CertificateAuthorityCreationSpec) SetOpenSSLCertificateAuthoritySpec(val OptOpenSSLCertificateAuthoritySpec) {
	s.OpenSSLCertificateAuthoritySpec = val
}

// SetMicrosoftCertificateAuthoritySpec sets the value of MicrosoftCertificateAuthoritySpec.
func (s *CertificateAuthorityCreationSpec) SetMicrosoftCertificateAuthoritySpec(val OptMicrosoftCertificateAuthoritySpec) {
	s.MicrosoftCertificateAuthoritySpec = val
}

// This specification contains certificate operation request details.
// Ref: #/components/schemas/CertificateOperationSpec
type CertificateOperationSpec struct {
	// The Certificates operation type.
	OperationType string `json:"operationType"`
	// Resource(s) in a domain.
	Resources []Resource `json:"resources"`
}

// GetOperationType returns the value of OperationType.
func (s *CertificateOperationSpec) GetOperationType() string {
	return s.OperationType
}

// GetResources returns the value of Resources.
func (s *CertificateOperationSpec) GetResources() []Resource {
	return s.Resources
}

// SetOperationType sets the value of OperationType.
func (s *CertificateOperationSpec) SetOperationType(val string) {
	s.OperationType = val
}

// SetResources sets the value of Resources.
func (s *CertificateOperationSpec) SetResources(val []Resource) {
	s.Resources = val
}

// The Certificate Validation details.
// Ref: #/components/schemas/CertificateValidation
type CertificateValidation struct {
	// Resource ID.
	ResourceId string `json:"resourceId"`
	// Resource FQDN.
	ResourceFqdn string `json:"resourceFqdn"`
	// Start Timestamp.
	StartTimestamp string `json:"startTimestamp"`
	// End Timestamp.
	EndTimestamp OptString `json:"endTimestamp"`
	// Validation Status.
	ValidationStatus string `json:"validationStatus"`
	// Validation Message.
	ValidationMessage OptString `json:"validationMessage"`
}

// GetResourceId returns the value of ResourceId.
func (s *CertificateValidation) GetResourceId() string {
	return s.ResourceId
}

// GetResourceFqdn returns the value of ResourceFqdn.
func (s *CertificateValidation) GetResourceFqdn() string {
	return s.ResourceFqdn
}

// GetStartTimestamp returns the value of StartTimestamp.
func (s *CertificateValidation) GetStartTimestamp() string {
	return s.StartTimestamp
}

// GetEndTimestamp returns the value of EndTimestamp.
func (s *CertificateValidation) GetEndTimestamp() OptString {
	return s.EndTimestamp
}

// GetValidationStatus returns the value of ValidationStatus.
func (s *CertificateValidation) GetValidationStatus() string {
	return s.ValidationStatus
}

// GetValidationMessage returns the value of ValidationMessage.
func (s *CertificateValidation) GetValidationMessage() OptString {
	return s.ValidationMessage
}

// SetResourceId sets the value of ResourceId.
func (s *CertificateValidation) SetResourceId(val string) {
	s.ResourceId = val
}

// SetResourceFqdn sets the value of ResourceFqdn.
func (s *CertificateValidation) SetResourceFqdn(val string) {
	s.ResourceFqdn = val
}

// SetStartTimestamp sets the value of StartTimestamp.
func (s *CertificateValidation) SetStartTimestamp(val string) {
	s.StartTimestamp = val
}

// SetEndTimestamp sets the value of EndTimestamp.
func (s *CertificateValidation) SetEndTimestamp(val OptString) {
	s.EndTimestamp = val
}

// SetValidationStatus sets the value of ValidationStatus.
func (s *CertificateValidation) SetValidationStatus(val string) {
	s.ValidationStatus = val
}

// SetValidationMessage sets the value of ValidationMessage.
func (s *CertificateValidation) SetValidationMessage(val OptString) {
	s.ValidationMessage = val
}

// The Certificate Validation Task.
// Ref: #/components/schemas/CertificateValidationTask
type CertificateValidationTask struct {
	// Validation ID.
	ValidationId string `json:"validationId"`
	// Validation Task Start Time.
	StartTimestamp OptString `json:"startTimestamp"`
	// Validation Task End Time.
	EndTimestamp OptString `json:"endTimestamp"`
	// Validation Task Completed.
	Completed bool `json:"completed"`
	// Resource Certificate Validations.
	Validations []CertificateValidation `json:"validations"`
}

// GetValidationId returns the value of ValidationId.
func (s *CertificateValidationTask) GetValidationId() string {
	return s.ValidationId
}

// GetStartTimestamp returns the value of StartTimestamp.
func (s *CertificateValidationTask) GetStartTimestamp() OptString {
	return s.StartTimestamp
}

// GetEndTimestamp returns the value of EndTimestamp.
func (s *CertificateValidationTask) GetEndTimestamp() OptString {
	return s.EndTimestamp
}

// GetCompleted returns the value of Completed.
func (s *CertificateValidationTask) GetCompleted() bool {
	return s.Completed
}

// GetValidations returns the value of Validations.
func (s *CertificateValidationTask) GetValidations() []CertificateValidation {
	return s.Validations
}

// SetValidationId sets the value of ValidationId.
func (s *CertificateValidationTask) SetValidationId(val string) {
	s.ValidationId = val
}

// SetStartTimestamp sets the value of StartTimestamp.
func (s *CertificateValidationTask) SetStartTimestamp(val OptString) {
	s.StartTimestamp = val
}

// SetEndTimestamp sets the value of EndTimestamp.
func (s *CertificateValidationTask) SetEndTimestamp(val OptString) {
	s.EndTimestamp = val
}

// SetCompleted sets the value of Completed.
func (s *CertificateValidationTask) SetCompleted(val bool) {
	s.Completed = val
}

// SetValidations sets the value of Validations.
func (s *CertificateValidationTask) SetValidations(val []CertificateValidation) {
	s.Validations = val
}

func (*CertificateValidationTask) validateResourceCertificatesRes() {}

// This specification contains certificates generation request details.
// Ref: #/components/schemas/CertificatesGenerationSpec
type CertificatesGenerationSpec struct {
	// CA type. Only supports Microsoft and OpenSSL CAs.
	CaType string `json:"caType"`
	// Resource(s) in a domain.
	Resources []Resource `json:"resources"`
}

// GetCaType returns the value of CaType.
func (s *CertificatesGenerationSpec) GetCaType() string {
	return s.CaType
}

// GetResources returns the value of Resources.
func (s *CertificatesGenerationSpec) GetResources() []Resource {
	return s.Resources
}

// SetCaType sets the value of CaType.
func (s *CertificatesGenerationSpec) SetCaType(val string) {
	s.CaType = val
}

// SetResources sets the value of Resources.
func (s *CertificatesGenerationSpec) SetResources(val []Resource) {
	s.Resources = val
}

// Represents a check-set id that can be used to run checks for a resource.
// Ref: #/components/schemas/CheckSetCandidates
type CheckSetCandidates struct {
	// Id of the check-set.
	CheckSetId OptString `json:"checkSetId"`
	// Name of the check-set.
	CheckSetName OptString `json:"checkSetName"`
	// Type of the check-set.
	CheckSetType OptString `json:"checkSetType"`
}

// GetCheckSetId returns the value of CheckSetId.
func (s *CheckSetCandidates) GetCheckSetId() OptString {
	return s.CheckSetId
}

// GetCheckSetName returns the value of CheckSetName.
func (s *CheckSetCandidates) GetCheckSetName() OptString {
	return s.CheckSetName
}

// GetCheckSetType returns the value of CheckSetType.
func (s *CheckSetCandidates) GetCheckSetType() OptString {
	return s.CheckSetType
}

// SetCheckSetId sets the value of CheckSetId.
func (s *CheckSetCandidates) SetCheckSetId(val OptString) {
	s.CheckSetId = val
}

// SetCheckSetName sets the value of CheckSetName.
func (s *CheckSetCandidates) SetCheckSetName(val OptString) {
	s.CheckSetName = val
}

// SetCheckSetType sets the value of CheckSetType.
func (s *CheckSetCandidates) SetCheckSetType(val OptString) {
	s.CheckSetType = val
}

// Spec representing a set of resources in a domain to query check-sets for.
// Ref: #/components/schemas/CheckSetQueryDomainResources
type CheckSetQueryDomainResources struct {
	// Id of the domain to search for resources in.
	DomainId string `json:"domainId"`
	// Resources in the domain to generate check-set candidates for.
	Resources []CheckSetQueryResource `json:"resources"`
}

// GetDomainId returns the value of DomainId.
func (s *CheckSetQueryDomainResources) GetDomainId() string {
	return s.DomainId
}

// GetResources returns the value of Resources.
func (s *CheckSetQueryDomainResources) GetResources() []CheckSetQueryResource {
	return s.Resources
}

// SetDomainId sets the value of DomainId.
func (s *CheckSetQueryDomainResources) SetDomainId(val string) {
	s.DomainId = val
}

// SetResources sets the value of Resources.
func (s *CheckSetQueryDomainResources) SetResources(val []CheckSetQueryResource) {
	s.Resources = val
}

// Check-set query input.
// Ref: #/components/schemas/CheckSetQueryInput
type CheckSetQueryInput struct {
	// Type of the check sets to query for. e.g. 'UPGRADE'.
	CheckSetType string `json:"checkSetType"`
	// List of domain resources to query check-sets of the given type for.
	Domains []CheckSetQueryDomainResources `json:"domains"`
}

// GetCheckSetType returns the value of CheckSetType.
func (s *CheckSetQueryInput) GetCheckSetType() string {
	return s.CheckSetType
}

// GetDomains returns the value of Domains.
func (s *CheckSetQueryInput) GetDomains() []CheckSetQueryDomainResources {
	return s.Domains
}

// SetCheckSetType sets the value of CheckSetType.
func (s *CheckSetQueryInput) SetCheckSetType(val string) {
	s.CheckSetType = val
}

// SetDomains sets the value of Domains.
func (s *CheckSetQueryInput) SetDomains(val []CheckSetQueryDomainResources) {
	s.Domains = val
}

// Resource input to query check-sets for.
// Ref: #/components/schemas/CheckSetQueryResource
type CheckSetQueryResource struct {
	// Type of the resource.
	ResourceType string `json:"resourceType"`
	// UUID of the resource, if used adds additional filtering.
	ResourceId OptString `json:"resourceId"`
	// Upgrade target version for the resources.
	ResourceTargetVersion OptString `json:"resourceTargetVersion"`
}

// GetResourceType returns the value of ResourceType.
func (s *CheckSetQueryResource) GetResourceType() string {
	return s.ResourceType
}

// GetResourceId returns the value of ResourceId.
func (s *CheckSetQueryResource) GetResourceId() OptString {
	return s.ResourceId
}

// GetResourceTargetVersion returns the value of ResourceTargetVersion.
func (s *CheckSetQueryResource) GetResourceTargetVersion() OptString {
	return s.ResourceTargetVersion
}

// SetResourceType sets the value of ResourceType.
func (s *CheckSetQueryResource) SetResourceType(val string) {
	s.ResourceType = val
}

// SetResourceId sets the value of ResourceId.
func (s *CheckSetQueryResource) SetResourceId(val OptString) {
	s.ResourceId = val
}

// SetResourceTargetVersion sets the value of ResourceTargetVersion.
func (s *CheckSetQueryResource) SetResourceTargetVersion(val OptString) {
	s.ResourceTargetVersion = val
}

// Represents a result of a check-set query call for a given resource.
// Ref: #/components/schemas/CheckSetQueryResourceResult
type CheckSetQueryResourceResult struct {
	// Name of the resource.
	ResourceName OptString `json:"resourceName"`
	// Id of the resource.
	ResourceId OptString `json:"resourceId"`
	// Type of the resource.
	ResourceType OptString `json:"resourceType"`
	// Current version of the resource.
	ResourceVersion OptString             `json:"resourceVersion"`
	Domain          OptResourceDomainInfo `json:"domain"`
	// Check set candidates to select from.
	CheckSets    []CheckSetCandidates                       `json:"checkSets"`
	ExtraContext OptCheckSetQueryResourceResultExtraContext `json:"extraContext"`
}

// GetResourceName returns the value of ResourceName.
func (s *CheckSetQueryResourceResult) GetResourceName() OptString {
	return s.ResourceName
}

// GetResourceId returns the value of ResourceId.
func (s *CheckSetQueryResourceResult) GetResourceId() OptString {
	return s.ResourceId
}

// GetResourceType returns the value of ResourceType.
func (s *CheckSetQueryResourceResult) GetResourceType() OptString {
	return s.ResourceType
}

// GetResourceVersion returns the value of ResourceVersion.
func (s *CheckSetQueryResourceResult) GetResourceVersion() OptString {
	return s.ResourceVersion
}

// GetDomain returns the value of Domain.
func (s *CheckSetQueryResourceResult) GetDomain() OptResourceDomainInfo {
	return s.Domain
}

// GetCheckSets returns the value of CheckSets.
func (s *CheckSetQueryResourceResult) GetCheckSets() []CheckSetCandidates {
	return s.CheckSets
}

// GetExtraContext returns the value of ExtraContext.
func (s *CheckSetQueryResourceResult) GetExtraContext() OptCheckSetQueryResourceResultExtraContext {
	return s.ExtraContext
}

// SetResourceName sets the value of ResourceName.
func (s *CheckSetQueryResourceResult) SetResourceName(val OptString) {
	s.ResourceName = val
}

// SetResourceId sets the value of ResourceId.
func (s *CheckSetQueryResourceResult) SetResourceId(val OptString) {
	s.ResourceId = val
}

// SetResourceType sets the value of ResourceType.
func (s *CheckSetQueryResourceResult) SetResourceType(val OptString) {
	s.ResourceType = val
}

// SetResourceVersion sets the value of ResourceVersion.
func (s *CheckSetQueryResourceResult) SetResourceVersion(val OptString) {
	s.ResourceVersion = val
}

// SetDomain sets the value of Domain.
func (s *CheckSetQueryResourceResult) SetDomain(val OptResourceDomainInfo) {
	s.Domain = val
}

// SetCheckSets sets the value of CheckSets.
func (s *CheckSetQueryResourceResult) SetCheckSets(val []CheckSetCandidates) {
	s.CheckSets = val
}

// SetExtraContext sets the value of ExtraContext.
func (s *CheckSetQueryResourceResult) SetExtraContext(val OptCheckSetQueryResourceResultExtraContext) {
	s.ExtraContext = val
}

type CheckSetQueryResourceResultExtraContext map[string]CheckSetQueryResourceResultExtraContextItem

func (s *CheckSetQueryResourceResultExtraContext) init() CheckSetQueryResourceResultExtraContext {
	m := *s
	if m == nil {
		m = map[string]CheckSetQueryResourceResultExtraContextItem{}
		*s = m
	}
	return m
}

type CheckSetQueryResourceResultExtraContextItem struct{}

// Represents a result of a check-set query call.
// Ref: #/components/schemas/CheckSetQueryResult
type CheckSetQueryResult struct {
	// Id of the query, to be provided in the selection API.
	QueryId string `json:"queryId"`
	// Resources with check-sets result from the query.
	Resources []CheckSetQueryResourceResult `json:"resources"`
}

// GetQueryId returns the value of QueryId.
func (s *CheckSetQueryResult) GetQueryId() string {
	return s.QueryId
}

// GetResources returns the value of Resources.
func (s *CheckSetQueryResult) GetResources() []CheckSetQueryResourceResult {
	return s.Resources
}

// SetQueryId sets the value of QueryId.
func (s *CheckSetQueryResult) SetQueryId(val string) {
	s.QueryId = val
}

// SetResources sets the value of Resources.
func (s *CheckSetQueryResult) SetResources(val []CheckSetQueryResourceResult) {
	s.Resources = val
}

func (*CheckSetQueryResult) queryCheckSetsRes() {}

// Represents a selection of check-set candidates over a given resource.
// Ref: #/components/schemas/CheckSetResourceSelection
type CheckSetResourceSelection struct {
	// Name of the resource.
	ResourceName string `json:"resourceName"`
	// Id of the resource.
	ResourceId string `json:"resourceId"`
	// Type of the resource.
	ResourceType string        `json:"resourceType"`
	Domain       OptDomainInfo `json:"domain"`
	// Information about the selected check-set candidates.
	CheckSets []SelectedCheckSetCandidate `json:"checkSets"`
}

// GetResourceName returns the value of ResourceName.
func (s *CheckSetResourceSelection) GetResourceName() string {
	return s.ResourceName
}

// GetResourceId returns the value of ResourceId.
func (s *CheckSetResourceSelection) GetResourceId() string {
	return s.ResourceId
}

// GetResourceType returns the value of ResourceType.
func (s *CheckSetResourceSelection) GetResourceType() string {
	return s.ResourceType
}

// GetDomain returns the value of Domain.
func (s *CheckSetResourceSelection) GetDomain() OptDomainInfo {
	return s.Domain
}

// GetCheckSets returns the value of CheckSets.
func (s *CheckSetResourceSelection) GetCheckSets() []SelectedCheckSetCandidate {
	return s.CheckSets
}

// SetResourceName sets the value of ResourceName.
func (s *CheckSetResourceSelection) SetResourceName(val string) {
	s.ResourceName = val
}

// SetResourceId sets the value of ResourceId.
func (s *CheckSetResourceSelection) SetResourceId(val string) {
	s.ResourceId = val
}

// SetResourceType sets the value of ResourceType.
func (s *CheckSetResourceSelection) SetResourceType(val string) {
	s.ResourceType = val
}

// SetDomain sets the value of Domain.
func (s *CheckSetResourceSelection) SetDomain(val OptDomainInfo) {
	s.Domain = val
}

// SetCheckSets sets the value of CheckSets.
func (s *CheckSetResourceSelection) SetCheckSets(val []SelectedCheckSetCandidate) {
	s.CheckSets = val
}

// Check-set selection for resources.
// Ref: #/components/schemas/CheckSetRunInput
type CheckSetRunInput struct {
	// Id of the query the selection was based on.
	QueryId string `json:"queryId"`
	// Information about the resource and its selection.
	Resources []CheckSetResourceSelection `json:"resources"`
}

// GetQueryId returns the value of QueryId.
func (s *CheckSetRunInput) GetQueryId() string {
	return s.QueryId
}

// GetResources returns the value of Resources.
func (s *CheckSetRunInput) GetResources() []CheckSetResourceSelection {
	return s.Resources
}

// SetQueryId sets the value of QueryId.
func (s *CheckSetRunInput) SetQueryId(val string) {
	s.QueryId = val
}

// SetResources sets the value of Resources.
func (s *CheckSetRunInput) SetResources(val []CheckSetResourceSelection) {
	s.Resources = val
}

// Describes the source of the classification,classification can be acquired by a classifier, user
// input or inherited from a parent entity.
// Ref: #/components/schemas/Classification
type Classification struct {
	// Type of the classification, e.g. domainType.
	Type OptString `json:"type"`
	// Value of the classification, e.g. MGMT_DOMAIN.
	Value OptString `json:"value"`
	// Description of the classification.
	Description OptString `json:"description"`
	// Source of the classification.
	Source OptClassificationSource `json:"source"`
}

// GetType returns the value of Type.
func (s *Classification) GetType() OptString {
	return s.Type
}

// GetValue returns the value of Value.
func (s *Classification) GetValue() OptString {
	return s.Value
}

// GetDescription returns the value of Description.
func (s *Classification) GetDescription() OptString {
	return s.Description
}

// GetSource returns the value of Source.
func (s *Classification) GetSource() OptClassificationSource {
	return s.Source
}

// SetType sets the value of Type.
func (s *Classification) SetType(val OptString) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *Classification) SetValue(val OptString) {
	s.Value = val
}

// SetDescription sets the value of Description.
func (s *Classification) SetDescription(val OptString) {
	s.Description = val
}

// SetSource sets the value of Source.
func (s *Classification) SetSource(val OptClassificationSource) {
	s.Source = val
}

// Source of the classification.
type ClassificationSource string

const (
	ClassificationSourceCLASSIFIER ClassificationSource = "CLASSIFIER"
	ClassificationSourceUSERINPUT  ClassificationSource = "USER_INPUT"
	ClassificationSourceINHERITED  ClassificationSource = "INHERITED"
)

// AllValues returns all ClassificationSource values.
func (ClassificationSource) AllValues() []ClassificationSource {
	return []ClassificationSource{
		ClassificationSourceCLASSIFIER,
		ClassificationSourceUSERINPUT,
		ClassificationSourceINHERITED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ClassificationSource) MarshalText() ([]byte, error) {
	switch s {
	case ClassificationSourceCLASSIFIER:
		return []byte(s), nil
	case ClassificationSourceUSERINPUT:
		return []byte(s), nil
	case ClassificationSourceINHERITED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ClassificationSource) UnmarshalText(data []byte) error {
	switch ClassificationSource(data) {
	case ClassificationSourceCLASSIFIER:
		*s = ClassificationSourceCLASSIFIER
		return nil
	case ClassificationSourceUSERINPUT:
		*s = ClassificationSourceUSERINPUT
		return nil
	case ClassificationSourceINHERITED:
		*s = ClassificationSourceINHERITED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Cluster representation.
// Ref: #/components/schemas/Cluster
type Cluster struct {
	// ID of the cluster.
	ID     OptString          `json:"id"`
	Domain OptDomainReference `json:"domain"`
	// Name of the cluster.
	Name OptString `json:"name"`
	// Status of the cluster.
	Status      OptString      `json:"status"`
	HciMeshData OptHciMeshData `json:"hciMeshData"`
	// Name of the primary datastore.
	PrimaryDatastoreName OptString `json:"primaryDatastoreName"`
	// Storage type of the primary datastore.
	PrimaryDatastoreType OptString `json:"primaryDatastoreType"`
	// List of hosts associated with the cluster.
	Hosts []HostReference `json:"hosts"`
	// Status of the cluster if Stretched or not.
	IsStretched OptBool `json:"isStretched"`
	// Status of the cluster if default or not.
	IsDefault OptBool `json:"isDefault"`
	// Number of ESXi host failures to tolerate in the vSAN cluster. Applicable only for clusters with
	// vSAN datastore.
	FailuresToTolerate OptInt32 `json:"failuresToTolerate"`
	// Distributed switches to added to the cluster.
	VdsSpecs []VdsSpec `json:"vdsSpecs"`
	// Deprecated, this list will always be returned empty.
	//
	// Deprecated: schema marks this property as deprecated.
	Tags []Tag `json:"tags"`
	// Is cluster managed by vSphere Lifecycle Manager Images - true if managed, false if managed by
	// vSphere Lifecycle Manager Baselines.
	IsImageBased OptBool             `json:"isImageBased"`
	Capacity     OptCapacity         `json:"capacity"`
	Vcenter      OptVcenterReference `json:"vcenter"`
	// Managed Object Reference Id of this cluster in vCenter.
	ManagedObjectReferenceId OptString `json:"managedObjectReferenceId"`
	// VSAN cluster mode.
	VsanClusterMode OptString `json:"vsanClusterMode"`
}

// GetID returns the value of ID.
func (s *Cluster) GetID() OptString {
	return s.ID
}

// GetDomain returns the value of Domain.
func (s *Cluster) GetDomain() OptDomainReference {
	return s.Domain
}

// GetName returns the value of Name.
func (s *Cluster) GetName() OptString {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *Cluster) GetStatus() OptString {
	return s.Status
}

// GetHciMeshData returns the value of HciMeshData.
func (s *Cluster) GetHciMeshData() OptHciMeshData {
	return s.HciMeshData
}

// GetPrimaryDatastoreName returns the value of PrimaryDatastoreName.
func (s *Cluster) GetPrimaryDatastoreName() OptString {
	return s.PrimaryDatastoreName
}

// GetPrimaryDatastoreType returns the value of PrimaryDatastoreType.
func (s *Cluster) GetPrimaryDatastoreType() OptString {
	return s.PrimaryDatastoreType
}

// GetHosts returns the value of Hosts.
func (s *Cluster) GetHosts() []HostReference {
	return s.Hosts
}

// GetIsStretched returns the value of IsStretched.
func (s *Cluster) GetIsStretched() OptBool {
	return s.IsStretched
}

// GetIsDefault returns the value of IsDefault.
func (s *Cluster) GetIsDefault() OptBool {
	return s.IsDefault
}

// GetFailuresToTolerate returns the value of FailuresToTolerate.
func (s *Cluster) GetFailuresToTolerate() OptInt32 {
	return s.FailuresToTolerate
}

// GetVdsSpecs returns the value of VdsSpecs.
func (s *Cluster) GetVdsSpecs() []VdsSpec {
	return s.VdsSpecs
}

// GetTags returns the value of Tags.
func (s *Cluster) GetTags() []Tag {
	return s.Tags
}

// GetIsImageBased returns the value of IsImageBased.
func (s *Cluster) GetIsImageBased() OptBool {
	return s.IsImageBased
}

// GetCapacity returns the value of Capacity.
func (s *Cluster) GetCapacity() OptCapacity {
	return s.Capacity
}

// GetVcenter returns the value of Vcenter.
func (s *Cluster) GetVcenter() OptVcenterReference {
	return s.Vcenter
}

// GetManagedObjectReferenceId returns the value of ManagedObjectReferenceId.
func (s *Cluster) GetManagedObjectReferenceId() OptString {
	return s.ManagedObjectReferenceId
}

// GetVsanClusterMode returns the value of VsanClusterMode.
func (s *Cluster) GetVsanClusterMode() OptString {
	return s.VsanClusterMode
}

// SetID sets the value of ID.
func (s *Cluster) SetID(val OptString) {
	s.ID = val
}

// SetDomain sets the value of Domain.
func (s *Cluster) SetDomain(val OptDomainReference) {
	s.Domain = val
}

// SetName sets the value of Name.
func (s *Cluster) SetName(val OptString) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *Cluster) SetStatus(val OptString) {
	s.Status = val
}

// SetHciMeshData sets the value of HciMeshData.
func (s *Cluster) SetHciMeshData(val OptHciMeshData) {
	s.HciMeshData = val
}

// SetPrimaryDatastoreName sets the value of PrimaryDatastoreName.
func (s *Cluster) SetPrimaryDatastoreName(val OptString) {
	s.PrimaryDatastoreName = val
}

// SetPrimaryDatastoreType sets the value of PrimaryDatastoreType.
func (s *Cluster) SetPrimaryDatastoreType(val OptString) {
	s.PrimaryDatastoreType = val
}

// SetHosts sets the value of Hosts.
func (s *Cluster) SetHosts(val []HostReference) {
	s.Hosts = val
}

// SetIsStretched sets the value of IsStretched.
func (s *Cluster) SetIsStretched(val OptBool) {
	s.IsStretched = val
}

// SetIsDefault sets the value of IsDefault.
func (s *Cluster) SetIsDefault(val OptBool) {
	s.IsDefault = val
}

// SetFailuresToTolerate sets the value of FailuresToTolerate.
func (s *Cluster) SetFailuresToTolerate(val OptInt32) {
	s.FailuresToTolerate = val
}

// SetVdsSpecs sets the value of VdsSpecs.
func (s *Cluster) SetVdsSpecs(val []VdsSpec) {
	s.VdsSpecs = val
}

// SetTags sets the value of Tags.
func (s *Cluster) SetTags(val []Tag) {
	s.Tags = val
}

// SetIsImageBased sets the value of IsImageBased.
func (s *Cluster) SetIsImageBased(val OptBool) {
	s.IsImageBased = val
}

// SetCapacity sets the value of Capacity.
func (s *Cluster) SetCapacity(val OptCapacity) {
	s.Capacity = val
}

// SetVcenter sets the value of Vcenter.
func (s *Cluster) SetVcenter(val OptVcenterReference) {
	s.Vcenter = val
}

// SetManagedObjectReferenceId sets the value of ManagedObjectReferenceId.
func (s *Cluster) SetManagedObjectReferenceId(val OptString) {
	s.ManagedObjectReferenceId = val
}

// SetVsanClusterMode sets the value of VsanClusterMode.
func (s *Cluster) SetVsanClusterMode(val OptString) {
	s.VsanClusterMode = val
}

func (*Cluster) getClusterRes() {}

// This specification contains the parameters required to remove one or more vSphere hosts from
// existing cluster in a workload domain.
// Ref: #/components/schemas/ClusterCompactionSpec
type ClusterCompactionSpec struct {
	// List of vSphere hosts to be removed.
	Hosts []HostReference `json:"hosts"`
	// Force removal of vSphere host.
	Force OptBool `json:"force"`
	// Remove dead hosts from cluster, bypassing validations. Forced removal may result in permanent data
	// loss. Review recovery plan with VMware Support before using.
	ForceByPassingSafeMinSize OptBool `json:"forceByPassingSafeMinSize"`
}

// GetHosts returns the value of Hosts.
func (s *ClusterCompactionSpec) GetHosts() []HostReference {
	return s.Hosts
}

// GetForce returns the value of Force.
func (s *ClusterCompactionSpec) GetForce() OptBool {
	return s.Force
}

// GetForceByPassingSafeMinSize returns the value of ForceByPassingSafeMinSize.
func (s *ClusterCompactionSpec) GetForceByPassingSafeMinSize() OptBool {
	return s.ForceByPassingSafeMinSize
}

// SetHosts sets the value of Hosts.
func (s *ClusterCompactionSpec) SetHosts(val []HostReference) {
	s.Hosts = val
}

// SetForce sets the value of Force.
func (s *ClusterCompactionSpec) SetForce(val OptBool) {
	s.Force = val
}

// SetForceByPassingSafeMinSize sets the value of ForceByPassingSafeMinSize.
func (s *ClusterCompactionSpec) SetForceByPassingSafeMinSize(val OptBool) {
	s.ForceByPassingSafeMinSize = val
}

// Cluster creation specification.
// Ref: #/components/schemas/ClusterCreationSpec
type ClusterCreationSpec struct {
	// ID of the domain to which the clusters will be added.
	DomainId    string      `json:"domainId"`
	ComputeSpec ComputeSpec `json:"computeSpec"`
	// Flag that indicates if the deployment should happen without license keys.
	DeployWithoutLicenseKeys OptBool `json:"deployWithoutLicenseKeys"`
}

// GetDomainId returns the value of DomainId.
func (s *ClusterCreationSpec) GetDomainId() string {
	return s.DomainId
}

// GetComputeSpec returns the value of ComputeSpec.
func (s *ClusterCreationSpec) GetComputeSpec() ComputeSpec {
	return s.ComputeSpec
}

// GetDeployWithoutLicenseKeys returns the value of DeployWithoutLicenseKeys.
func (s *ClusterCreationSpec) GetDeployWithoutLicenseKeys() OptBool {
	return s.DeployWithoutLicenseKeys
}

// SetDomainId sets the value of DomainId.
func (s *ClusterCreationSpec) SetDomainId(val string) {
	s.DomainId = val
}

// SetComputeSpec sets the value of ComputeSpec.
func (s *ClusterCreationSpec) SetComputeSpec(val ComputeSpec) {
	s.ComputeSpec = val
}

// SetDeployWithoutLicenseKeys sets the value of DeployWithoutLicenseKeys.
func (s *ClusterCreationSpec) SetDeployWithoutLicenseKeys(val OptBool) {
	s.DeployWithoutLicenseKeys = val
}

// Represents a criterion for querying the cluster.
// Ref: #/components/schemas/ClusterCriterion
type ClusterCriterion struct {
	// Name of the criterion.
	Name OptString `json:"name"`
	// Arguments required for a particular criterion.
	Arguments OptClusterCriterionArguments `json:"arguments"`
	// Description of the criterion.
	Description OptString `json:"description"`
}

// GetName returns the value of Name.
func (s *ClusterCriterion) GetName() OptString {
	return s.Name
}

// GetArguments returns the value of Arguments.
func (s *ClusterCriterion) GetArguments() OptClusterCriterionArguments {
	return s.Arguments
}

// GetDescription returns the value of Description.
func (s *ClusterCriterion) GetDescription() OptString {
	return s.Description
}

// SetName sets the value of Name.
func (s *ClusterCriterion) SetName(val OptString) {
	s.Name = val
}

// SetArguments sets the value of Arguments.
func (s *ClusterCriterion) SetArguments(val OptClusterCriterionArguments) {
	s.Arguments = val
}

// SetDescription sets the value of Description.
func (s *ClusterCriterion) SetDescription(val OptString) {
	s.Description = val
}

func (*ClusterCriterion) getClusterCriterionRes() {}

// Arguments required for a particular criterion.
type ClusterCriterionArguments map[string]string

func (s *ClusterCriterionArguments) init() ClusterCriterionArguments {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// This specification contains the host switch configurations for the NSX transport node.
// Ref: #/components/schemas/ClusterExpansionNetworkProfile
type ClusterExpansionNetworkProfile struct {
	// The network profile name.
	Name string `json:"name"`
	// The network profile description.
	Description OptString `json:"description"`
	// The list of NSX host switch configurations.
	NsxtHostSwitchConfigs []NsxtHostSwitchConfig `json:"nsxtHostSwitchConfigs"`
}

// GetName returns the value of Name.
func (s *ClusterExpansionNetworkProfile) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ClusterExpansionNetworkProfile) GetDescription() OptString {
	return s.Description
}

// GetNsxtHostSwitchConfigs returns the value of NsxtHostSwitchConfigs.
func (s *ClusterExpansionNetworkProfile) GetNsxtHostSwitchConfigs() []NsxtHostSwitchConfig {
	return s.NsxtHostSwitchConfigs
}

// SetName sets the value of Name.
func (s *ClusterExpansionNetworkProfile) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ClusterExpansionNetworkProfile) SetDescription(val OptString) {
	s.Description = val
}

// SetNsxtHostSwitchConfigs sets the value of NsxtHostSwitchConfigs.
func (s *ClusterExpansionNetworkProfile) SetNsxtHostSwitchConfigs(val []NsxtHostSwitchConfig) {
	s.NsxtHostSwitchConfigs = val
}

// This specification contains cluster network configuration.
// Ref: #/components/schemas/ClusterExpansionNetworkSpec
type ClusterExpansionNetworkSpec struct {
	NsxClusterSpec ClusterExpansionNsxSpec `json:"nsxClusterSpec"`
	// The list of network profiles.
	NetworkProfiles []ClusterExpansionNetworkProfile `json:"networkProfiles"`
}

// GetNsxClusterSpec returns the value of NsxClusterSpec.
func (s *ClusterExpansionNetworkSpec) GetNsxClusterSpec() ClusterExpansionNsxSpec {
	return s.NsxClusterSpec
}

// GetNetworkProfiles returns the value of NetworkProfiles.
func (s *ClusterExpansionNetworkSpec) GetNetworkProfiles() []ClusterExpansionNetworkProfile {
	return s.NetworkProfiles
}

// SetNsxClusterSpec sets the value of NsxClusterSpec.
func (s *ClusterExpansionNetworkSpec) SetNsxClusterSpec(val ClusterExpansionNsxSpec) {
	s.NsxClusterSpec = val
}

// SetNetworkProfiles sets the value of NetworkProfiles.
func (s *ClusterExpansionNetworkSpec) SetNetworkProfiles(val []ClusterExpansionNetworkProfile) {
	s.NetworkProfiles = val
}

// This specification contains NSX configuration for cluster expansion.
// Ref: #/components/schemas/ClusterExpansionNsxSpec
type ClusterExpansionNsxSpec struct {
	// The IP address pools specification.
	IpAddressPoolsSpec []IpAddressPoolSpec `json:"ipAddressPoolsSpec"`
	// The list of uplink profile specifications.
	UplinkProfiles []UplinkProfile `json:"uplinkProfiles"`
}

// GetIpAddressPoolsSpec returns the value of IpAddressPoolsSpec.
func (s *ClusterExpansionNsxSpec) GetIpAddressPoolsSpec() []IpAddressPoolSpec {
	return s.IpAddressPoolsSpec
}

// GetUplinkProfiles returns the value of UplinkProfiles.
func (s *ClusterExpansionNsxSpec) GetUplinkProfiles() []UplinkProfile {
	return s.UplinkProfiles
}

// SetIpAddressPoolsSpec sets the value of IpAddressPoolsSpec.
func (s *ClusterExpansionNsxSpec) SetIpAddressPoolsSpec(val []IpAddressPoolSpec) {
	s.IpAddressPoolsSpec = val
}

// SetUplinkProfiles sets the value of UplinkProfiles.
func (s *ClusterExpansionNsxSpec) SetUplinkProfiles(val []UplinkProfile) {
	s.UplinkProfiles = val
}

// This specification contains the parameters required to add one or more vSphere hosts to an
// existing cluster in a workload domain.
// Ref: #/components/schemas/ClusterExpansionSpec
type ClusterExpansionSpec struct {
	// List of vSphere host information from the free pool to consume in the workload domain.
	HostSpecs   []HostSpec                     `json:"hostSpecs"`
	NetworkSpec OptClusterExpansionNetworkSpec `json:"networkSpec"`
	// VSAN Network Pool Spec.
	VsanNetworkSpecs []VSANNetworkSpec `json:"vsanNetworkSpecs"`
	WitnessSpec      OptWitnessSpec    `json:"witnessSpec"`
	// Witness traffic to be shared with vSAN traffic.
	WitnessTrafficSharedWithVsanTraffic OptBool `json:"witnessTrafficSharedWithVsanTraffic"`
	// Flag that indicates if the deployment should happen without license keys.
	DeployWithoutLicenseKeys OptBool `json:"deployWithoutLicenseKeys"`
	// Is inter-rack cluster(true for L2 non-uniform and L3 : At least one of management, uplink, Edge
	// and host TEP networks is different for hosts of the cluster, false for L2 uniform :  All hosts in
	// cluster have identical management, uplink, Edge and host TEP networks) expansion. Required, only
	// if Cluster contains NSX Edge Cluster.
	InterRackExpansion OptBool `json:"interRackExpansion"`
	// Use to add host to a cluster with dead host(s). Bypasses validation of disconnected hosts and vSAN
	// cluster health. Review recovery plan VMware Support before using. False if omitted. This property
	// is deprecated and it has no effect when using it.
	//
	// Deprecated: schema marks this property as deprecated.
	ForceHostAdditionInPresenceofDeadHosts OptBool `json:"forceHostAdditionInPresenceofDeadHosts"`
	// Skip thumbprint validation for ESXi hosts during add host operation.
	// This property is deprecated.
	//
	// Deprecated: schema marks this property as deprecated.
	SkipThumbprintValidation OptBool `json:"skipThumbprintValidation"`
}

// GetHostSpecs returns the value of HostSpecs.
func (s *ClusterExpansionSpec) GetHostSpecs() []HostSpec {
	return s.HostSpecs
}

// GetNetworkSpec returns the value of NetworkSpec.
func (s *ClusterExpansionSpec) GetNetworkSpec() OptClusterExpansionNetworkSpec {
	return s.NetworkSpec
}

// GetVsanNetworkSpecs returns the value of VsanNetworkSpecs.
func (s *ClusterExpansionSpec) GetVsanNetworkSpecs() []VSANNetworkSpec {
	return s.VsanNetworkSpecs
}

// GetWitnessSpec returns the value of WitnessSpec.
func (s *ClusterExpansionSpec) GetWitnessSpec() OptWitnessSpec {
	return s.WitnessSpec
}

// GetWitnessTrafficSharedWithVsanTraffic returns the value of WitnessTrafficSharedWithVsanTraffic.
func (s *ClusterExpansionSpec) GetWitnessTrafficSharedWithVsanTraffic() OptBool {
	return s.WitnessTrafficSharedWithVsanTraffic
}

// GetDeployWithoutLicenseKeys returns the value of DeployWithoutLicenseKeys.
func (s *ClusterExpansionSpec) GetDeployWithoutLicenseKeys() OptBool {
	return s.DeployWithoutLicenseKeys
}

// GetInterRackExpansion returns the value of InterRackExpansion.
func (s *ClusterExpansionSpec) GetInterRackExpansion() OptBool {
	return s.InterRackExpansion
}

// GetForceHostAdditionInPresenceofDeadHosts returns the value of ForceHostAdditionInPresenceofDeadHosts.
func (s *ClusterExpansionSpec) GetForceHostAdditionInPresenceofDeadHosts() OptBool {
	return s.ForceHostAdditionInPresenceofDeadHosts
}

// GetSkipThumbprintValidation returns the value of SkipThumbprintValidation.
func (s *ClusterExpansionSpec) GetSkipThumbprintValidation() OptBool {
	return s.SkipThumbprintValidation
}

// SetHostSpecs sets the value of HostSpecs.
func (s *ClusterExpansionSpec) SetHostSpecs(val []HostSpec) {
	s.HostSpecs = val
}

// SetNetworkSpec sets the value of NetworkSpec.
func (s *ClusterExpansionSpec) SetNetworkSpec(val OptClusterExpansionNetworkSpec) {
	s.NetworkSpec = val
}

// SetVsanNetworkSpecs sets the value of VsanNetworkSpecs.
func (s *ClusterExpansionSpec) SetVsanNetworkSpecs(val []VSANNetworkSpec) {
	s.VsanNetworkSpecs = val
}

// SetWitnessSpec sets the value of WitnessSpec.
func (s *ClusterExpansionSpec) SetWitnessSpec(val OptWitnessSpec) {
	s.WitnessSpec = val
}

// SetWitnessTrafficSharedWithVsanTraffic sets the value of WitnessTrafficSharedWithVsanTraffic.
func (s *ClusterExpansionSpec) SetWitnessTrafficSharedWithVsanTraffic(val OptBool) {
	s.WitnessTrafficSharedWithVsanTraffic = val
}

// SetDeployWithoutLicenseKeys sets the value of DeployWithoutLicenseKeys.
func (s *ClusterExpansionSpec) SetDeployWithoutLicenseKeys(val OptBool) {
	s.DeployWithoutLicenseKeys = val
}

// SetInterRackExpansion sets the value of InterRackExpansion.
func (s *ClusterExpansionSpec) SetInterRackExpansion(val OptBool) {
	s.InterRackExpansion = val
}

// SetForceHostAdditionInPresenceofDeadHosts sets the value of ForceHostAdditionInPresenceofDeadHosts.
func (s *ClusterExpansionSpec) SetForceHostAdditionInPresenceofDeadHosts(val OptBool) {
	s.ForceHostAdditionInPresenceofDeadHosts = val
}

// SetSkipThumbprintValidation sets the value of SkipThumbprintValidation.
func (s *ClusterExpansionSpec) SetSkipThumbprintValidation(val OptBool) {
	s.SkipThumbprintValidation = val
}

// Represents the cluster network configuration.
// Ref: #/components/schemas/ClusterNetworkConfiguration
type ClusterNetworkConfiguration struct {
	// List of host details.
	HostDetails []HostDetail `json:"hostDetails"`
	// List of VDS configuration.
	VdsConfigurations []VdsConfiguration `json:"vdsConfigurations"`
	// List of VDS names that is not present in VCF inventory.
	NonVcfCreatedVds []string `json:"nonVcfCreatedVds"`
	// List of IP address pool configuration.
	IpAddressPools []NsxtIpAddressPool `json:"ipAddressPools"`
	// List of uplink profile configuration.
	UplinkProfiles []UplinkProfile `json:"uplinkProfiles"`
	// List of network profiles.
	NetworkProfiles []NetworkProfileConfiguration `json:"networkProfiles"`
}

// GetHostDetails returns the value of HostDetails.
func (s *ClusterNetworkConfiguration) GetHostDetails() []HostDetail {
	return s.HostDetails
}

// GetVdsConfigurations returns the value of VdsConfigurations.
func (s *ClusterNetworkConfiguration) GetVdsConfigurations() []VdsConfiguration {
	return s.VdsConfigurations
}

// GetNonVcfCreatedVds returns the value of NonVcfCreatedVds.
func (s *ClusterNetworkConfiguration) GetNonVcfCreatedVds() []string {
	return s.NonVcfCreatedVds
}

// GetIpAddressPools returns the value of IpAddressPools.
func (s *ClusterNetworkConfiguration) GetIpAddressPools() []NsxtIpAddressPool {
	return s.IpAddressPools
}

// GetUplinkProfiles returns the value of UplinkProfiles.
func (s *ClusterNetworkConfiguration) GetUplinkProfiles() []UplinkProfile {
	return s.UplinkProfiles
}

// GetNetworkProfiles returns the value of NetworkProfiles.
func (s *ClusterNetworkConfiguration) GetNetworkProfiles() []NetworkProfileConfiguration {
	return s.NetworkProfiles
}

// SetHostDetails sets the value of HostDetails.
func (s *ClusterNetworkConfiguration) SetHostDetails(val []HostDetail) {
	s.HostDetails = val
}

// SetVdsConfigurations sets the value of VdsConfigurations.
func (s *ClusterNetworkConfiguration) SetVdsConfigurations(val []VdsConfiguration) {
	s.VdsConfigurations = val
}

// SetNonVcfCreatedVds sets the value of NonVcfCreatedVds.
func (s *ClusterNetworkConfiguration) SetNonVcfCreatedVds(val []string) {
	s.NonVcfCreatedVds = val
}

// SetIpAddressPools sets the value of IpAddressPools.
func (s *ClusterNetworkConfiguration) SetIpAddressPools(val []NsxtIpAddressPool) {
	s.IpAddressPools = val
}

// SetUplinkProfiles sets the value of UplinkProfiles.
func (s *ClusterNetworkConfiguration) SetUplinkProfiles(val []UplinkProfile) {
	s.UplinkProfiles = val
}

// SetNetworkProfiles sets the value of NetworkProfiles.
func (s *ClusterNetworkConfiguration) SetNetworkProfiles(val []NetworkProfileConfiguration) {
	s.NetworkProfiles = val
}

// Represents criterion for querying the network properties of a cluster.
// Ref: #/components/schemas/ClusterNetworkConfigurationCriterion
type ClusterNetworkConfigurationCriterion struct {
	// Name of the criterion.
	Name OptString `json:"name"`
	// Arguments required for a particular criterion.
	Arguments OptClusterNetworkConfigurationCriterionArguments `json:"arguments"`
	// Description of the criterion.
	Description OptString `json:"description"`
}

// GetName returns the value of Name.
func (s *ClusterNetworkConfigurationCriterion) GetName() OptString {
	return s.Name
}

// GetArguments returns the value of Arguments.
func (s *ClusterNetworkConfigurationCriterion) GetArguments() OptClusterNetworkConfigurationCriterionArguments {
	return s.Arguments
}

// GetDescription returns the value of Description.
func (s *ClusterNetworkConfigurationCriterion) GetDescription() OptString {
	return s.Description
}

// SetName sets the value of Name.
func (s *ClusterNetworkConfigurationCriterion) SetName(val OptString) {
	s.Name = val
}

// SetArguments sets the value of Arguments.
func (s *ClusterNetworkConfigurationCriterion) SetArguments(val OptClusterNetworkConfigurationCriterionArguments) {
	s.Arguments = val
}

// SetDescription sets the value of Description.
func (s *ClusterNetworkConfigurationCriterion) SetDescription(val OptString) {
	s.Description = val
}

// Arguments required for a particular criterion.
type ClusterNetworkConfigurationCriterionArguments map[string]string

func (s *ClusterNetworkConfigurationCriterionArguments) init() ClusterNetworkConfigurationCriterionArguments {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Represents the cluster network configuration query response.
// Ref: #/components/schemas/ClusterNetworkConfigurationQueryResponse
type ClusterNetworkConfigurationQueryResponse struct {
	QueryInfo OptQueryInfo                       `json:"queryInfo"`
	Result    OptPageClusterNetworkConfiguration `json:"result"`
}

// GetQueryInfo returns the value of QueryInfo.
func (s *ClusterNetworkConfigurationQueryResponse) GetQueryInfo() OptQueryInfo {
	return s.QueryInfo
}

// GetResult returns the value of Result.
func (s *ClusterNetworkConfigurationQueryResponse) GetResult() OptPageClusterNetworkConfiguration {
	return s.Result
}

// SetQueryInfo sets the value of QueryInfo.
func (s *ClusterNetworkConfigurationQueryResponse) SetQueryInfo(val OptQueryInfo) {
	s.QueryInfo = val
}

// SetResult sets the value of Result.
func (s *ClusterNetworkConfigurationQueryResponse) SetResult(val OptPageClusterNetworkConfiguration) {
	s.Result = val
}

func (*ClusterNetworkConfigurationQueryResponse) getClusterNetworkConfigurationQueryResponseRes() {}
func (*ClusterNetworkConfigurationQueryResponse) getClusterNetworkConfigurationRes()              {}

// Represents a cluster query response.
// Ref: #/components/schemas/ClusterQueryResponse
type ClusterQueryResponse struct {
	QueryInfo OptQueryInfo   `json:"queryInfo"`
	Result    OptPageCluster `json:"result"`
}

// GetQueryInfo returns the value of QueryInfo.
func (s *ClusterQueryResponse) GetQueryInfo() OptQueryInfo {
	return s.QueryInfo
}

// GetResult returns the value of Result.
func (s *ClusterQueryResponse) GetResult() OptPageCluster {
	return s.Result
}

// SetQueryInfo sets the value of QueryInfo.
func (s *ClusterQueryResponse) SetQueryInfo(val OptQueryInfo) {
	s.QueryInfo = val
}

// SetResult sets the value of Result.
func (s *ClusterQueryResponse) SetResult(val OptPageCluster) {
	s.Result = val
}

func (*ClusterQueryResponse) getClusterQueryResponseRes()  {}
func (*ClusterQueryResponse) getClustersQueryResponseRes() {}
func (*ClusterQueryResponse) postClusterQueryRes()         {}
func (*ClusterQueryResponse) postClustersQueryRes()        {}

// Represents a reference to the cluster.
// Ref: #/components/schemas/ClusterReference
type ClusterReference struct {
	// ID of the cluster.
	ID string `json:"id"`
	// Name of the cluster.
	Name OptString `json:"name"`
}

// GetID returns the value of ID.
func (s *ClusterReference) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *ClusterReference) GetName() OptString {
	return s.Name
}

// SetID sets the value of ID.
func (s *ClusterReference) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ClusterReference) SetName(val OptString) {
	s.Name = val
}

// This specification contains the parameters required to add a cluster to a workload domain.
// Ref: #/components/schemas/ClusterSpec
type ClusterSpec struct {
	// Name of the new cluster that will be added to the specified workload domain.
	Name OptString `json:"name"`
	// ID of the Cluster Image to be used with the Cluster.
	ClusterImageId OptString        `json:"clusterImageId"`
	VxRailDetails  OptVxRailDetails `json:"vxRailDetails"`
	// List of vSphere host information from the free pool to consume in the workload domain.
	HostSpecs       []HostSpec         `json:"hostSpecs"`
	DatastoreSpec   DatastoreSpec      `json:"datastoreSpec"`
	NetworkSpec     NetworkSpec        `json:"networkSpec"`
	AdvancedOptions OptAdvancedOptions `json:"advancedOptions"`
	// Skip thumbprint validation for ESXi and VxRail Manager during add cluster/host operation.
	// This property is deprecated.
	//
	// Deprecated: schema marks this property as deprecated.
	SkipThumbprintValidation OptBool `json:"skipThumbprintValidation"`
}

// GetName returns the value of Name.
func (s *ClusterSpec) GetName() OptString {
	return s.Name
}

// GetClusterImageId returns the value of ClusterImageId.
func (s *ClusterSpec) GetClusterImageId() OptString {
	return s.ClusterImageId
}

// GetVxRailDetails returns the value of VxRailDetails.
func (s *ClusterSpec) GetVxRailDetails() OptVxRailDetails {
	return s.VxRailDetails
}

// GetHostSpecs returns the value of HostSpecs.
func (s *ClusterSpec) GetHostSpecs() []HostSpec {
	return s.HostSpecs
}

// GetDatastoreSpec returns the value of DatastoreSpec.
func (s *ClusterSpec) GetDatastoreSpec() DatastoreSpec {
	return s.DatastoreSpec
}

// GetNetworkSpec returns the value of NetworkSpec.
func (s *ClusterSpec) GetNetworkSpec() NetworkSpec {
	return s.NetworkSpec
}

// GetAdvancedOptions returns the value of AdvancedOptions.
func (s *ClusterSpec) GetAdvancedOptions() OptAdvancedOptions {
	return s.AdvancedOptions
}

// GetSkipThumbprintValidation returns the value of SkipThumbprintValidation.
func (s *ClusterSpec) GetSkipThumbprintValidation() OptBool {
	return s.SkipThumbprintValidation
}

// SetName sets the value of Name.
func (s *ClusterSpec) SetName(val OptString) {
	s.Name = val
}

// SetClusterImageId sets the value of ClusterImageId.
func (s *ClusterSpec) SetClusterImageId(val OptString) {
	s.ClusterImageId = val
}

// SetVxRailDetails sets the value of VxRailDetails.
func (s *ClusterSpec) SetVxRailDetails(val OptVxRailDetails) {
	s.VxRailDetails = val
}

// SetHostSpecs sets the value of HostSpecs.
func (s *ClusterSpec) SetHostSpecs(val []HostSpec) {
	s.HostSpecs = val
}

// SetDatastoreSpec sets the value of DatastoreSpec.
func (s *ClusterSpec) SetDatastoreSpec(val DatastoreSpec) {
	s.DatastoreSpec = val
}

// SetNetworkSpec sets the value of NetworkSpec.
func (s *ClusterSpec) SetNetworkSpec(val NetworkSpec) {
	s.NetworkSpec = val
}

// SetAdvancedOptions sets the value of AdvancedOptions.
func (s *ClusterSpec) SetAdvancedOptions(val OptAdvancedOptions) {
	s.AdvancedOptions = val
}

// SetSkipThumbprintValidation sets the value of SkipThumbprintValidation.
func (s *ClusterSpec) SetSkipThumbprintValidation(val OptBool) {
	s.SkipThumbprintValidation = val
}

// This specification contains network configuration for stretiching a vSan Cluster.
// Ref: #/components/schemas/ClusterStretchNetworkSpec
type ClusterStretchNetworkSpec struct {
	NsxClusterSpec NsxStretchClusterSpec `json:"nsxClusterSpec"`
	// The network profile to be associated with Secondary AZ Hosts in NSX.
	NetworkProfiles []StretchClusterNetworkProfile `json:"networkProfiles"`
}

// GetNsxClusterSpec returns the value of NsxClusterSpec.
func (s *ClusterStretchNetworkSpec) GetNsxClusterSpec() NsxStretchClusterSpec {
	return s.NsxClusterSpec
}

// GetNetworkProfiles returns the value of NetworkProfiles.
func (s *ClusterStretchNetworkSpec) GetNetworkProfiles() []StretchClusterNetworkProfile {
	return s.NetworkProfiles
}

// SetNsxClusterSpec sets the value of NsxClusterSpec.
func (s *ClusterStretchNetworkSpec) SetNsxClusterSpec(val NsxStretchClusterSpec) {
	s.NsxClusterSpec = val
}

// SetNetworkProfiles sets the value of NetworkProfiles.
func (s *ClusterStretchNetworkSpec) SetNetworkProfiles(val []StretchClusterNetworkProfile) {
	s.NetworkProfiles = val
}

// This spec contains the parameters required to convert a Standard vSAN cluster to a Stretched
// cluster.
// Ref: #/components/schemas/ClusterStretchSpec
type ClusterStretchSpec struct {
	// List of vSphere host information from the free pool to consume in the workload domain.
	HostSpecs   []HostSpec  `json:"hostSpecs"`
	WitnessSpec WitnessSpec `json:"witnessSpec"`
	// Witness traffic to be shared with vSAN traffic.
	WitnessTrafficSharedWithVsanTraffic OptBool `json:"witnessTrafficSharedWithVsanTraffic"`
	// VSAN Network Pool Specs.
	VsanNetworkSpecs []VSANNetworkSpec `json:"vsanNetworkSpecs"`
	// Secondary AZ Overlay Vlan Id. This field is deprecated. The secondary AZ overlay vlan id should be
	// mentioned in the uplinkProfile field instead.
	//
	// Deprecated: schema marks this property as deprecated.
	SecondaryAzOverlayVlanId OptInt32                     `json:"secondaryAzOverlayVlanId"`
	NetworkSpec              OptClusterStretchNetworkSpec `json:"networkSpec"`
	// Edge cluster configured for multi AZ.
	IsEdgeClusterConfiguredForMultiAZ OptBool `json:"isEdgeClusterConfiguredForMultiAZ"`
	// Flag that indicates if the deployment should happen without license keys.
	DeployWithoutLicenseKeys OptBool `json:"deployWithoutLicenseKeys"`
}

// GetHostSpecs returns the value of HostSpecs.
func (s *ClusterStretchSpec) GetHostSpecs() []HostSpec {
	return s.HostSpecs
}

// GetWitnessSpec returns the value of WitnessSpec.
func (s *ClusterStretchSpec) GetWitnessSpec() WitnessSpec {
	return s.WitnessSpec
}

// GetWitnessTrafficSharedWithVsanTraffic returns the value of WitnessTrafficSharedWithVsanTraffic.
func (s *ClusterStretchSpec) GetWitnessTrafficSharedWithVsanTraffic() OptBool {
	return s.WitnessTrafficSharedWithVsanTraffic
}

// GetVsanNetworkSpecs returns the value of VsanNetworkSpecs.
func (s *ClusterStretchSpec) GetVsanNetworkSpecs() []VSANNetworkSpec {
	return s.VsanNetworkSpecs
}

// GetSecondaryAzOverlayVlanId returns the value of SecondaryAzOverlayVlanId.
func (s *ClusterStretchSpec) GetSecondaryAzOverlayVlanId() OptInt32 {
	return s.SecondaryAzOverlayVlanId
}

// GetNetworkSpec returns the value of NetworkSpec.
func (s *ClusterStretchSpec) GetNetworkSpec() OptClusterStretchNetworkSpec {
	return s.NetworkSpec
}

// GetIsEdgeClusterConfiguredForMultiAZ returns the value of IsEdgeClusterConfiguredForMultiAZ.
func (s *ClusterStretchSpec) GetIsEdgeClusterConfiguredForMultiAZ() OptBool {
	return s.IsEdgeClusterConfiguredForMultiAZ
}

// GetDeployWithoutLicenseKeys returns the value of DeployWithoutLicenseKeys.
func (s *ClusterStretchSpec) GetDeployWithoutLicenseKeys() OptBool {
	return s.DeployWithoutLicenseKeys
}

// SetHostSpecs sets the value of HostSpecs.
func (s *ClusterStretchSpec) SetHostSpecs(val []HostSpec) {
	s.HostSpecs = val
}

// SetWitnessSpec sets the value of WitnessSpec.
func (s *ClusterStretchSpec) SetWitnessSpec(val WitnessSpec) {
	s.WitnessSpec = val
}

// SetWitnessTrafficSharedWithVsanTraffic sets the value of WitnessTrafficSharedWithVsanTraffic.
func (s *ClusterStretchSpec) SetWitnessTrafficSharedWithVsanTraffic(val OptBool) {
	s.WitnessTrafficSharedWithVsanTraffic = val
}

// SetVsanNetworkSpecs sets the value of VsanNetworkSpecs.
func (s *ClusterStretchSpec) SetVsanNetworkSpecs(val []VSANNetworkSpec) {
	s.VsanNetworkSpecs = val
}

// SetSecondaryAzOverlayVlanId sets the value of SecondaryAzOverlayVlanId.
func (s *ClusterStretchSpec) SetSecondaryAzOverlayVlanId(val OptInt32) {
	s.SecondaryAzOverlayVlanId = val
}

// SetNetworkSpec sets the value of NetworkSpec.
func (s *ClusterStretchSpec) SetNetworkSpec(val OptClusterStretchNetworkSpec) {
	s.NetworkSpec = val
}

// SetIsEdgeClusterConfiguredForMultiAZ sets the value of IsEdgeClusterConfiguredForMultiAZ.
func (s *ClusterStretchSpec) SetIsEdgeClusterConfiguredForMultiAZ(val OptBool) {
	s.IsEdgeClusterConfiguredForMultiAZ = val
}

// SetDeployWithoutLicenseKeys sets the value of DeployWithoutLicenseKeys.
func (s *ClusterStretchSpec) SetDeployWithoutLicenseKeys(val OptBool) {
	s.DeployWithoutLicenseKeys = val
}

// This spec contains the parameters required to convert a Stretched cluster to a Standard vSAN
// cluster.
// Ref: #/components/schemas/ClusterUnstretchSpec
type ClusterUnstretchSpec struct{}

// Cluster Update Data.
// Ref: #/components/schemas/ClusterUpdateSpec
type ClusterUpdateSpec struct {
	// Cluster Name.
	Name                  OptString                `json:"name"`
	ClusterExpansionSpec  OptClusterExpansionSpec  `json:"clusterExpansionSpec"`
	ClusterCompactionSpec OptClusterCompactionSpec `json:"clusterCompactionSpec"`
	ClusterStretchSpec    OptClusterStretchSpec    `json:"clusterStretchSpec"`
	ClusterUnstretchSpec  *ClusterUnstretchSpec    `json:"clusterUnstretchSpec"`
	// Prepare the cluster for deletion.
	MarkForDeletion OptBool `json:"markForDeletion"`
	// Prepare the cluster for stretch.
	PrepareForStretch OptBool `json:"prepareForStretch"`
}

// GetName returns the value of Name.
func (s *ClusterUpdateSpec) GetName() OptString {
	return s.Name
}

// GetClusterExpansionSpec returns the value of ClusterExpansionSpec.
func (s *ClusterUpdateSpec) GetClusterExpansionSpec() OptClusterExpansionSpec {
	return s.ClusterExpansionSpec
}

// GetClusterCompactionSpec returns the value of ClusterCompactionSpec.
func (s *ClusterUpdateSpec) GetClusterCompactionSpec() OptClusterCompactionSpec {
	return s.ClusterCompactionSpec
}

// GetClusterStretchSpec returns the value of ClusterStretchSpec.
func (s *ClusterUpdateSpec) GetClusterStretchSpec() OptClusterStretchSpec {
	return s.ClusterStretchSpec
}

// GetClusterUnstretchSpec returns the value of ClusterUnstretchSpec.
func (s *ClusterUpdateSpec) GetClusterUnstretchSpec() *ClusterUnstretchSpec {
	return s.ClusterUnstretchSpec
}

// GetMarkForDeletion returns the value of MarkForDeletion.
func (s *ClusterUpdateSpec) GetMarkForDeletion() OptBool {
	return s.MarkForDeletion
}

// GetPrepareForStretch returns the value of PrepareForStretch.
func (s *ClusterUpdateSpec) GetPrepareForStretch() OptBool {
	return s.PrepareForStretch
}

// SetName sets the value of Name.
func (s *ClusterUpdateSpec) SetName(val OptString) {
	s.Name = val
}

// SetClusterExpansionSpec sets the value of ClusterExpansionSpec.
func (s *ClusterUpdateSpec) SetClusterExpansionSpec(val OptClusterExpansionSpec) {
	s.ClusterExpansionSpec = val
}

// SetClusterCompactionSpec sets the value of ClusterCompactionSpec.
func (s *ClusterUpdateSpec) SetClusterCompactionSpec(val OptClusterCompactionSpec) {
	s.ClusterCompactionSpec = val
}

// SetClusterStretchSpec sets the value of ClusterStretchSpec.
func (s *ClusterUpdateSpec) SetClusterStretchSpec(val OptClusterStretchSpec) {
	s.ClusterStretchSpec = val
}

// SetClusterUnstretchSpec sets the value of ClusterUnstretchSpec.
func (s *ClusterUpdateSpec) SetClusterUnstretchSpec(val *ClusterUnstretchSpec) {
	s.ClusterUnstretchSpec = val
}

// SetMarkForDeletion sets the value of MarkForDeletion.
func (s *ClusterUpdateSpec) SetMarkForDeletion(val OptBool) {
	s.MarkForDeletion = val
}

// SetPrepareForStretch sets the value of PrepareForStretch.
func (s *ClusterUpdateSpec) SetPrepareForStretch(val OptBool) {
	s.PrepareForStretch = val
}

type CommissionHostsInternalServerErrorApplicationJSON string

func (*CommissionHostsInternalServerErrorApplicationJSON) commissionHostsRes() {}

// Model for metadata of compatibility matrix.
// Ref: #/components/schemas/CompatibilityMatrix
type CompatibilityMatrix struct {
	CompatibilityMatrixMetadata CompatibilityMatrixMetadata `json:"compatibilityMatrixMetadata"`
	// Source type of the compatibility matrix content.
	CompatibilityMatrixSource string `json:"compatibilityMatrixSource"`
	// Content of the compatibility matrix.
	CompatibilityMatrixContent string `json:"compatibilityMatrixContent"`
}

// GetCompatibilityMatrixMetadata returns the value of CompatibilityMatrixMetadata.
func (s *CompatibilityMatrix) GetCompatibilityMatrixMetadata() CompatibilityMatrixMetadata {
	return s.CompatibilityMatrixMetadata
}

// GetCompatibilityMatrixSource returns the value of CompatibilityMatrixSource.
func (s *CompatibilityMatrix) GetCompatibilityMatrixSource() string {
	return s.CompatibilityMatrixSource
}

// GetCompatibilityMatrixContent returns the value of CompatibilityMatrixContent.
func (s *CompatibilityMatrix) GetCompatibilityMatrixContent() string {
	return s.CompatibilityMatrixContent
}

// SetCompatibilityMatrixMetadata sets the value of CompatibilityMatrixMetadata.
func (s *CompatibilityMatrix) SetCompatibilityMatrixMetadata(val CompatibilityMatrixMetadata) {
	s.CompatibilityMatrixMetadata = val
}

// SetCompatibilityMatrixSource sets the value of CompatibilityMatrixSource.
func (s *CompatibilityMatrix) SetCompatibilityMatrixSource(val string) {
	s.CompatibilityMatrixSource = val
}

// SetCompatibilityMatrixContent sets the value of CompatibilityMatrixContent.
func (s *CompatibilityMatrix) SetCompatibilityMatrixContent(val string) {
	s.CompatibilityMatrixContent = val
}

func (*CompatibilityMatrix) getCompatibilityMatrixRes() {}

// Model for metadata of compatibility matrix.
// Ref: #/components/schemas/CompatibilityMatrixMetadata
type CompatibilityMatrixMetadata struct {
	// Staleness of the compatibility matrix content.
	IsStale OptBool `json:"isStale"`
	// Existence of the compatibility matrix content.
	IsMissing OptBool `json:"isMissing"`
	// Last modified date of the compatibility matrix content.
	LastModifiedDate OptInt64 `json:"lastModifiedDate"`
	// Info message for the compatibility matrix content.
	Message OptString `json:"message"`
	// Error message for the compatibility matrix content.
	ErrorMessage OptString `json:"errorMessage"`
	// Warning message for the compatibility matrix content.
	WarningMessage OptString `json:"warningMessage"`
}

// GetIsStale returns the value of IsStale.
func (s *CompatibilityMatrixMetadata) GetIsStale() OptBool {
	return s.IsStale
}

// GetIsMissing returns the value of IsMissing.
func (s *CompatibilityMatrixMetadata) GetIsMissing() OptBool {
	return s.IsMissing
}

// GetLastModifiedDate returns the value of LastModifiedDate.
func (s *CompatibilityMatrixMetadata) GetLastModifiedDate() OptInt64 {
	return s.LastModifiedDate
}

// GetMessage returns the value of Message.
func (s *CompatibilityMatrixMetadata) GetMessage() OptString {
	return s.Message
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *CompatibilityMatrixMetadata) GetErrorMessage() OptString {
	return s.ErrorMessage
}

// GetWarningMessage returns the value of WarningMessage.
func (s *CompatibilityMatrixMetadata) GetWarningMessage() OptString {
	return s.WarningMessage
}

// SetIsStale sets the value of IsStale.
func (s *CompatibilityMatrixMetadata) SetIsStale(val OptBool) {
	s.IsStale = val
}

// SetIsMissing sets the value of IsMissing.
func (s *CompatibilityMatrixMetadata) SetIsMissing(val OptBool) {
	s.IsMissing = val
}

// SetLastModifiedDate sets the value of LastModifiedDate.
func (s *CompatibilityMatrixMetadata) SetLastModifiedDate(val OptInt64) {
	s.LastModifiedDate = val
}

// SetMessage sets the value of Message.
func (s *CompatibilityMatrixMetadata) SetMessage(val OptString) {
	s.Message = val
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *CompatibilityMatrixMetadata) SetErrorMessage(val OptString) {
	s.ErrorMessage = val
}

// SetWarningMessage sets the value of WarningMessage.
func (s *CompatibilityMatrixMetadata) SetWarningMessage(val OptString) {
	s.WarningMessage = val
}

func (*CompatibilityMatrixMetadata) getCompatibilityMatrixMetadataRes() {}

// Represents a compliance audit report.
// Ref: #/components/schemas/ComplianceAudit
type ComplianceAudit struct {
	// Compliance audit id.
	ID OptString `json:"id"`
	// The timestamp at which audit was initiated.
	CreationTimestamp OptString `json:"creationTimestamp"`
	// The timestamp at which audit was completed.
	CompletionTimestamp OptString `json:"completionTimestamp"`
	// Compliance standard type.
	StandardType OptString `json:"standardType"`
	// Compliance standard version.
	StandardVersion OptString `json:"standardVersion"`
	// Domain id.
	DomainId OptString `json:"domainId"`
	// Configuration evaluation status.
	ConfigurationEvaluationStatus OptString `json:"configurationEvaluationStatus"`
	// Details about evaluation status.
	ConfigurationEvaluationStatusDetails OptString `json:"configurationEvaluationStatusDetails"`
	// Compliant status of overall task.
	CompliantStatus OptString `json:"compliantStatus"`
	// Total number of configurations evaluated.
	TotalConfigurationsEvaluated OptInt32 `json:"totalConfigurationsEvaluated"`
	// Number of non compliant configurations.
	NumberOfNonCompliantConfigurations OptInt32 `json:"numberOfNonCompliantConfigurations"`
	// Number of configurations skipped.
	NumberOfSkippedConfigurations OptInt32 `json:"numberOfSkippedConfigurations"`
	// Number of audit items.
	NumberOfAuditItems OptInt32 `json:"numberOfAuditItems"`
	// Compliance audit items.
	AuditItems []ComplianceAuditItem `json:"auditItems"`
}

// GetID returns the value of ID.
func (s *ComplianceAudit) GetID() OptString {
	return s.ID
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *ComplianceAudit) GetCreationTimestamp() OptString {
	return s.CreationTimestamp
}

// GetCompletionTimestamp returns the value of CompletionTimestamp.
func (s *ComplianceAudit) GetCompletionTimestamp() OptString {
	return s.CompletionTimestamp
}

// GetStandardType returns the value of StandardType.
func (s *ComplianceAudit) GetStandardType() OptString {
	return s.StandardType
}

// GetStandardVersion returns the value of StandardVersion.
func (s *ComplianceAudit) GetStandardVersion() OptString {
	return s.StandardVersion
}

// GetDomainId returns the value of DomainId.
func (s *ComplianceAudit) GetDomainId() OptString {
	return s.DomainId
}

// GetConfigurationEvaluationStatus returns the value of ConfigurationEvaluationStatus.
func (s *ComplianceAudit) GetConfigurationEvaluationStatus() OptString {
	return s.ConfigurationEvaluationStatus
}

// GetConfigurationEvaluationStatusDetails returns the value of ConfigurationEvaluationStatusDetails.
func (s *ComplianceAudit) GetConfigurationEvaluationStatusDetails() OptString {
	return s.ConfigurationEvaluationStatusDetails
}

// GetCompliantStatus returns the value of CompliantStatus.
func (s *ComplianceAudit) GetCompliantStatus() OptString {
	return s.CompliantStatus
}

// GetTotalConfigurationsEvaluated returns the value of TotalConfigurationsEvaluated.
func (s *ComplianceAudit) GetTotalConfigurationsEvaluated() OptInt32 {
	return s.TotalConfigurationsEvaluated
}

// GetNumberOfNonCompliantConfigurations returns the value of NumberOfNonCompliantConfigurations.
func (s *ComplianceAudit) GetNumberOfNonCompliantConfigurations() OptInt32 {
	return s.NumberOfNonCompliantConfigurations
}

// GetNumberOfSkippedConfigurations returns the value of NumberOfSkippedConfigurations.
func (s *ComplianceAudit) GetNumberOfSkippedConfigurations() OptInt32 {
	return s.NumberOfSkippedConfigurations
}

// GetNumberOfAuditItems returns the value of NumberOfAuditItems.
func (s *ComplianceAudit) GetNumberOfAuditItems() OptInt32 {
	return s.NumberOfAuditItems
}

// GetAuditItems returns the value of AuditItems.
func (s *ComplianceAudit) GetAuditItems() []ComplianceAuditItem {
	return s.AuditItems
}

// SetID sets the value of ID.
func (s *ComplianceAudit) SetID(val OptString) {
	s.ID = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *ComplianceAudit) SetCreationTimestamp(val OptString) {
	s.CreationTimestamp = val
}

// SetCompletionTimestamp sets the value of CompletionTimestamp.
func (s *ComplianceAudit) SetCompletionTimestamp(val OptString) {
	s.CompletionTimestamp = val
}

// SetStandardType sets the value of StandardType.
func (s *ComplianceAudit) SetStandardType(val OptString) {
	s.StandardType = val
}

// SetStandardVersion sets the value of StandardVersion.
func (s *ComplianceAudit) SetStandardVersion(val OptString) {
	s.StandardVersion = val
}

// SetDomainId sets the value of DomainId.
func (s *ComplianceAudit) SetDomainId(val OptString) {
	s.DomainId = val
}

// SetConfigurationEvaluationStatus sets the value of ConfigurationEvaluationStatus.
func (s *ComplianceAudit) SetConfigurationEvaluationStatus(val OptString) {
	s.ConfigurationEvaluationStatus = val
}

// SetConfigurationEvaluationStatusDetails sets the value of ConfigurationEvaluationStatusDetails.
func (s *ComplianceAudit) SetConfigurationEvaluationStatusDetails(val OptString) {
	s.ConfigurationEvaluationStatusDetails = val
}

// SetCompliantStatus sets the value of CompliantStatus.
func (s *ComplianceAudit) SetCompliantStatus(val OptString) {
	s.CompliantStatus = val
}

// SetTotalConfigurationsEvaluated sets the value of TotalConfigurationsEvaluated.
func (s *ComplianceAudit) SetTotalConfigurationsEvaluated(val OptInt32) {
	s.TotalConfigurationsEvaluated = val
}

// SetNumberOfNonCompliantConfigurations sets the value of NumberOfNonCompliantConfigurations.
func (s *ComplianceAudit) SetNumberOfNonCompliantConfigurations(val OptInt32) {
	s.NumberOfNonCompliantConfigurations = val
}

// SetNumberOfSkippedConfigurations sets the value of NumberOfSkippedConfigurations.
func (s *ComplianceAudit) SetNumberOfSkippedConfigurations(val OptInt32) {
	s.NumberOfSkippedConfigurations = val
}

// SetNumberOfAuditItems sets the value of NumberOfAuditItems.
func (s *ComplianceAudit) SetNumberOfAuditItems(val OptInt32) {
	s.NumberOfAuditItems = val
}

// SetAuditItems sets the value of AuditItems.
func (s *ComplianceAudit) SetAuditItems(val []ComplianceAuditItem) {
	s.AuditItems = val
}

func (*ComplianceAudit) getComplianceAuditForADomainRes() {}
func (*ComplianceAudit) getComplianceAuditRes()           {}

type ComplianceAuditBadRequest Error

func (*ComplianceAuditBadRequest) complianceAuditRes() {}

type ComplianceAuditInternalServerError Error

func (*ComplianceAuditInternalServerError) complianceAuditRes() {}

// Represents a compliance audit item.
// Ref: #/components/schemas/ComplianceAuditItem
type ComplianceAuditItem struct {
	// Compliance resource type.
	ResourceType OptString `json:"resourceType"`
	// Compliance resource version.
	ResourceVersion OptString `json:"resourceVersion"`
	// Compliance resource name.
	ResourceName OptString `json:"resourceName"`
	// Compliance configuration id.
	ConfigurationId OptString `json:"configurationId"`
	// Compliance configuration title.
	ConfigurationTitle OptString `json:"configurationTitle"`
	// Whether the configuration is recommended by compliance standard.
	IsConfigurationRecommendedByStandard OptBool `json:"isConfigurationRecommendedByStandard"`
	// Compliance configuration citation in compliance standard documentation.
	CitationReference OptString `json:"citationReference"`
	// Recommended value for compliance configuration.
	RecommendedValue OptString `json:"recommendedValue"`
	// Actual value for compliance configuration.
	ActualValue OptString `json:"actualValue"`
	// Compliance status of the configuration.
	ComplianceStatus OptString `json:"complianceStatus"`
	// Remediation steps if the configuration is non compliant.
	RemediationStep OptString `json:"remediationStep"`
	// Compliance audit task status.
	ComplianceAuditStatus OptString `json:"complianceAuditStatus"`
	// Error message if compliance audit fails.
	ErrorMessage OptString `json:"errorMessage"`
}

// GetResourceType returns the value of ResourceType.
func (s *ComplianceAuditItem) GetResourceType() OptString {
	return s.ResourceType
}

// GetResourceVersion returns the value of ResourceVersion.
func (s *ComplianceAuditItem) GetResourceVersion() OptString {
	return s.ResourceVersion
}

// GetResourceName returns the value of ResourceName.
func (s *ComplianceAuditItem) GetResourceName() OptString {
	return s.ResourceName
}

// GetConfigurationId returns the value of ConfigurationId.
func (s *ComplianceAuditItem) GetConfigurationId() OptString {
	return s.ConfigurationId
}

// GetConfigurationTitle returns the value of ConfigurationTitle.
func (s *ComplianceAuditItem) GetConfigurationTitle() OptString {
	return s.ConfigurationTitle
}

// GetIsConfigurationRecommendedByStandard returns the value of IsConfigurationRecommendedByStandard.
func (s *ComplianceAuditItem) GetIsConfigurationRecommendedByStandard() OptBool {
	return s.IsConfigurationRecommendedByStandard
}

// GetCitationReference returns the value of CitationReference.
func (s *ComplianceAuditItem) GetCitationReference() OptString {
	return s.CitationReference
}

// GetRecommendedValue returns the value of RecommendedValue.
func (s *ComplianceAuditItem) GetRecommendedValue() OptString {
	return s.RecommendedValue
}

// GetActualValue returns the value of ActualValue.
func (s *ComplianceAuditItem) GetActualValue() OptString {
	return s.ActualValue
}

// GetComplianceStatus returns the value of ComplianceStatus.
func (s *ComplianceAuditItem) GetComplianceStatus() OptString {
	return s.ComplianceStatus
}

// GetRemediationStep returns the value of RemediationStep.
func (s *ComplianceAuditItem) GetRemediationStep() OptString {
	return s.RemediationStep
}

// GetComplianceAuditStatus returns the value of ComplianceAuditStatus.
func (s *ComplianceAuditItem) GetComplianceAuditStatus() OptString {
	return s.ComplianceAuditStatus
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *ComplianceAuditItem) GetErrorMessage() OptString {
	return s.ErrorMessage
}

// SetResourceType sets the value of ResourceType.
func (s *ComplianceAuditItem) SetResourceType(val OptString) {
	s.ResourceType = val
}

// SetResourceVersion sets the value of ResourceVersion.
func (s *ComplianceAuditItem) SetResourceVersion(val OptString) {
	s.ResourceVersion = val
}

// SetResourceName sets the value of ResourceName.
func (s *ComplianceAuditItem) SetResourceName(val OptString) {
	s.ResourceName = val
}

// SetConfigurationId sets the value of ConfigurationId.
func (s *ComplianceAuditItem) SetConfigurationId(val OptString) {
	s.ConfigurationId = val
}

// SetConfigurationTitle sets the value of ConfigurationTitle.
func (s *ComplianceAuditItem) SetConfigurationTitle(val OptString) {
	s.ConfigurationTitle = val
}

// SetIsConfigurationRecommendedByStandard sets the value of IsConfigurationRecommendedByStandard.
func (s *ComplianceAuditItem) SetIsConfigurationRecommendedByStandard(val OptBool) {
	s.IsConfigurationRecommendedByStandard = val
}

// SetCitationReference sets the value of CitationReference.
func (s *ComplianceAuditItem) SetCitationReference(val OptString) {
	s.CitationReference = val
}

// SetRecommendedValue sets the value of RecommendedValue.
func (s *ComplianceAuditItem) SetRecommendedValue(val OptString) {
	s.RecommendedValue = val
}

// SetActualValue sets the value of ActualValue.
func (s *ComplianceAuditItem) SetActualValue(val OptString) {
	s.ActualValue = val
}

// SetComplianceStatus sets the value of ComplianceStatus.
func (s *ComplianceAuditItem) SetComplianceStatus(val OptString) {
	s.ComplianceStatus = val
}

// SetRemediationStep sets the value of RemediationStep.
func (s *ComplianceAuditItem) SetRemediationStep(val OptString) {
	s.RemediationStep = val
}

// SetComplianceAuditStatus sets the value of ComplianceAuditStatus.
func (s *ComplianceAuditItem) SetComplianceAuditStatus(val OptString) {
	s.ComplianceAuditStatus = val
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *ComplianceAuditItem) SetErrorMessage(val OptString) {
	s.ErrorMessage = val
}

type ComplianceAuditNotFound Error

func (*ComplianceAuditNotFound) complianceAuditRes() {}

// This specification contains compliance to be audited.
// Ref: #/components/schemas/ComplianceAuditSpec
type ComplianceAuditSpec struct {
	// Compliance standard type.
	StandardType string `json:"standardType"`
	// Compliance standard version.
	StandardVersion string `json:"standardVersion"`
	// Compliance resource and configuration spec.
	ComplianceResourcesConfigurationSpec []ComplianceResourcesConfigurationSpec `json:"complianceResourcesConfigurationSpec"`
}

// GetStandardType returns the value of StandardType.
func (s *ComplianceAuditSpec) GetStandardType() string {
	return s.StandardType
}

// GetStandardVersion returns the value of StandardVersion.
func (s *ComplianceAuditSpec) GetStandardVersion() string {
	return s.StandardVersion
}

// GetComplianceResourcesConfigurationSpec returns the value of ComplianceResourcesConfigurationSpec.
func (s *ComplianceAuditSpec) GetComplianceResourcesConfigurationSpec() []ComplianceResourcesConfigurationSpec {
	return s.ComplianceResourcesConfigurationSpec
}

// SetStandardType sets the value of StandardType.
func (s *ComplianceAuditSpec) SetStandardType(val string) {
	s.StandardType = val
}

// SetStandardVersion sets the value of StandardVersion.
func (s *ComplianceAuditSpec) SetStandardVersion(val string) {
	s.StandardVersion = val
}

// SetComplianceResourcesConfigurationSpec sets the value of ComplianceResourcesConfigurationSpec.
func (s *ComplianceAuditSpec) SetComplianceResourcesConfigurationSpec(val []ComplianceResourcesConfigurationSpec) {
	s.ComplianceResourcesConfigurationSpec = val
}

// Represents a compliance configuration.
// Ref: #/components/schemas/ComplianceConfiguration
type ComplianceConfiguration struct {
	// Compliance configuration id.
	ConfigurationId OptString `json:"configurationId"`
	// Compliance configuration title.
	ConfigurationTitle OptString `json:"configurationTitle"`
	// Compliance resource standard configuration details.
	ComplianceResourceStandardConfigurationDetails []ComplianceResourceStandardConfiguration `json:"complianceResourceStandardConfigurationDetails"`
}

// GetConfigurationId returns the value of ConfigurationId.
func (s *ComplianceConfiguration) GetConfigurationId() OptString {
	return s.ConfigurationId
}

// GetConfigurationTitle returns the value of ConfigurationTitle.
func (s *ComplianceConfiguration) GetConfigurationTitle() OptString {
	return s.ConfigurationTitle
}

// GetComplianceResourceStandardConfigurationDetails returns the value of ComplianceResourceStandardConfigurationDetails.
func (s *ComplianceConfiguration) GetComplianceResourceStandardConfigurationDetails() []ComplianceResourceStandardConfiguration {
	return s.ComplianceResourceStandardConfigurationDetails
}

// SetConfigurationId sets the value of ConfigurationId.
func (s *ComplianceConfiguration) SetConfigurationId(val OptString) {
	s.ConfigurationId = val
}

// SetConfigurationTitle sets the value of ConfigurationTitle.
func (s *ComplianceConfiguration) SetConfigurationTitle(val OptString) {
	s.ConfigurationTitle = val
}

// SetComplianceResourceStandardConfigurationDetails sets the value of ComplianceResourceStandardConfigurationDetails.
func (s *ComplianceConfiguration) SetComplianceResourceStandardConfigurationDetails(val []ComplianceResourceStandardConfiguration) {
	s.ComplianceResourceStandardConfigurationDetails = val
}

// This specification contains compliance resource details.
// Ref: #/components/schemas/ComplianceResource
type ComplianceResource struct {
	// Compliance Resource Type.
	ResourceType string `json:"resourceType"`
	// Compliance Resource FQDN.
	ResourceName OptString `json:"resourceName"`
}

// GetResourceType returns the value of ResourceType.
func (s *ComplianceResource) GetResourceType() string {
	return s.ResourceType
}

// GetResourceName returns the value of ResourceName.
func (s *ComplianceResource) GetResourceName() OptString {
	return s.ResourceName
}

// SetResourceType sets the value of ResourceType.
func (s *ComplianceResource) SetResourceType(val string) {
	s.ResourceType = val
}

// SetResourceName sets the value of ResourceName.
func (s *ComplianceResource) SetResourceName(val OptString) {
	s.ResourceName = val
}

// Represents a compliance resource and standard configuration.
// Ref: #/components/schemas/ComplianceResourceStandardConfiguration
type ComplianceResourceStandardConfiguration struct {
	// Compliance resource type.
	ResourceType OptString `json:"resourceType"`
	// Compliance resource version.
	ResourceVersion OptString `json:"resourceVersion"`
	// Compliance standard configuration.
	StandardConfigurationDetails []ComplianceStandardConfiguration `json:"standardConfigurationDetails"`
}

// GetResourceType returns the value of ResourceType.
func (s *ComplianceResourceStandardConfiguration) GetResourceType() OptString {
	return s.ResourceType
}

// GetResourceVersion returns the value of ResourceVersion.
func (s *ComplianceResourceStandardConfiguration) GetResourceVersion() OptString {
	return s.ResourceVersion
}

// GetStandardConfigurationDetails returns the value of StandardConfigurationDetails.
func (s *ComplianceResourceStandardConfiguration) GetStandardConfigurationDetails() []ComplianceStandardConfiguration {
	return s.StandardConfigurationDetails
}

// SetResourceType sets the value of ResourceType.
func (s *ComplianceResourceStandardConfiguration) SetResourceType(val OptString) {
	s.ResourceType = val
}

// SetResourceVersion sets the value of ResourceVersion.
func (s *ComplianceResourceStandardConfiguration) SetResourceVersion(val OptString) {
	s.ResourceVersion = val
}

// SetStandardConfigurationDetails sets the value of StandardConfigurationDetails.
func (s *ComplianceResourceStandardConfiguration) SetStandardConfigurationDetails(val []ComplianceStandardConfiguration) {
	s.StandardConfigurationDetails = val
}

// This specification contains compliance configuration and resource request details.
// Ref: #/components/schemas/ComplianceResourcesConfigurationSpec
type ComplianceResourcesConfigurationSpec struct {
	// Compliance configuration id.
	ConfigurationId OptString `json:"configurationId"`
	// Compliance Resource details.
	Resources []ComplianceResource `json:"resources"`
}

// GetConfigurationId returns the value of ConfigurationId.
func (s *ComplianceResourcesConfigurationSpec) GetConfigurationId() OptString {
	return s.ConfigurationId
}

// GetResources returns the value of Resources.
func (s *ComplianceResourcesConfigurationSpec) GetResources() []ComplianceResource {
	return s.Resources
}

// SetConfigurationId sets the value of ConfigurationId.
func (s *ComplianceResourcesConfigurationSpec) SetConfigurationId(val OptString) {
	s.ConfigurationId = val
}

// SetResources sets the value of Resources.
func (s *ComplianceResourcesConfigurationSpec) SetResources(val []ComplianceResource) {
	s.Resources = val
}

// Represents a compliance standard.
// Ref: #/components/schemas/ComplianceStandard
type ComplianceStandard struct {
	// Compliance standard type.
	StandardType OptString `json:"standardType"`
	// Compliance standard versions.
	StandardVersions []string `json:"standardVersions"`
}

// GetStandardType returns the value of StandardType.
func (s *ComplianceStandard) GetStandardType() OptString {
	return s.StandardType
}

// GetStandardVersions returns the value of StandardVersions.
func (s *ComplianceStandard) GetStandardVersions() []string {
	return s.StandardVersions
}

// SetStandardType sets the value of StandardType.
func (s *ComplianceStandard) SetStandardType(val OptString) {
	s.StandardType = val
}

// SetStandardVersions sets the value of StandardVersions.
func (s *ComplianceStandard) SetStandardVersions(val []string) {
	s.StandardVersions = val
}

// Represents a compliance standard configuration.
// Ref: #/components/schemas/ComplianceStandardConfiguration
type ComplianceStandardConfiguration struct {
	// Compliance standard type.
	StandardType OptString `json:"standardType"`
	// Compliance standard version.
	StandardVersion OptString `json:"standardVersion"`
	// Whether the config is recommended by the standard or it's a VMware best practice.
	IsRecommendedByStandard OptBool `json:"isRecommendedByStandard"`
	// Whether an automated or manual audit is supported.
	IsAuditAutomated OptBool `json:"isAuditAutomated"`
	// Citation reference of the configuration in the standard's documentation.
	CitationReference OptString `json:"citationReference"`
	// How the configuration can be audited.
	AuditProcedure OptString `json:"auditProcedure"`
	// Recommended value of the configuration by the standard.
	RecommendedValue OptString `json:"recommendedValue"`
	// Remediation procedure if the configuration is not compliant.
	RemediationProcedure OptString `json:"remediationProcedure"`
}

// GetStandardType returns the value of StandardType.
func (s *ComplianceStandardConfiguration) GetStandardType() OptString {
	return s.StandardType
}

// GetStandardVersion returns the value of StandardVersion.
func (s *ComplianceStandardConfiguration) GetStandardVersion() OptString {
	return s.StandardVersion
}

// GetIsRecommendedByStandard returns the value of IsRecommendedByStandard.
func (s *ComplianceStandardConfiguration) GetIsRecommendedByStandard() OptBool {
	return s.IsRecommendedByStandard
}

// GetIsAuditAutomated returns the value of IsAuditAutomated.
func (s *ComplianceStandardConfiguration) GetIsAuditAutomated() OptBool {
	return s.IsAuditAutomated
}

// GetCitationReference returns the value of CitationReference.
func (s *ComplianceStandardConfiguration) GetCitationReference() OptString {
	return s.CitationReference
}

// GetAuditProcedure returns the value of AuditProcedure.
func (s *ComplianceStandardConfiguration) GetAuditProcedure() OptString {
	return s.AuditProcedure
}

// GetRecommendedValue returns the value of RecommendedValue.
func (s *ComplianceStandardConfiguration) GetRecommendedValue() OptString {
	return s.RecommendedValue
}

// GetRemediationProcedure returns the value of RemediationProcedure.
func (s *ComplianceStandardConfiguration) GetRemediationProcedure() OptString {
	return s.RemediationProcedure
}

// SetStandardType sets the value of StandardType.
func (s *ComplianceStandardConfiguration) SetStandardType(val OptString) {
	s.StandardType = val
}

// SetStandardVersion sets the value of StandardVersion.
func (s *ComplianceStandardConfiguration) SetStandardVersion(val OptString) {
	s.StandardVersion = val
}

// SetIsRecommendedByStandard sets the value of IsRecommendedByStandard.
func (s *ComplianceStandardConfiguration) SetIsRecommendedByStandard(val OptBool) {
	s.IsRecommendedByStandard = val
}

// SetIsAuditAutomated sets the value of IsAuditAutomated.
func (s *ComplianceStandardConfiguration) SetIsAuditAutomated(val OptBool) {
	s.IsAuditAutomated = val
}

// SetCitationReference sets the value of CitationReference.
func (s *ComplianceStandardConfiguration) SetCitationReference(val OptString) {
	s.CitationReference = val
}

// SetAuditProcedure sets the value of AuditProcedure.
func (s *ComplianceStandardConfiguration) SetAuditProcedure(val OptString) {
	s.AuditProcedure = val
}

// SetRecommendedValue sets the value of RecommendedValue.
func (s *ComplianceStandardConfiguration) SetRecommendedValue(val OptString) {
	s.RecommendedValue = val
}

// SetRemediationProcedure sets the value of RemediationProcedure.
func (s *ComplianceStandardConfiguration) SetRemediationProcedure(val OptString) {
	s.RemediationProcedure = val
}

// Represents a compliance task.
// Ref: #/components/schemas/ComplianceTask
type ComplianceTask struct {
	// Compliance task id.
	ID OptString `json:"id"`
	// Compliance task status.
	Status OptString `json:"status"`
	// Compliance audit id.
	ComplianceAuditId OptString `json:"complianceAuditId"`
}

// GetID returns the value of ID.
func (s *ComplianceTask) GetID() OptString {
	return s.ID
}

// GetStatus returns the value of Status.
func (s *ComplianceTask) GetStatus() OptString {
	return s.Status
}

// GetComplianceAuditId returns the value of ComplianceAuditId.
func (s *ComplianceTask) GetComplianceAuditId() OptString {
	return s.ComplianceAuditId
}

// SetID sets the value of ID.
func (s *ComplianceTask) SetID(val OptString) {
	s.ID = val
}

// SetStatus sets the value of Status.
func (s *ComplianceTask) SetStatus(val OptString) {
	s.Status = val
}

// SetComplianceAuditId sets the value of ComplianceAuditId.
func (s *ComplianceTask) SetComplianceAuditId(val OptString) {
	s.ComplianceAuditId = val
}

func (*ComplianceTask) complianceAuditRes()          {}
func (*ComplianceTask) getComplianceAuditTaskRes()   {}
func (*ComplianceTask) retryComplianceAuditTaskRes() {}

// Component contains bits to install/update the appropriate Cloud Foundation software components in
// your management domain or workload domain.
// Ref: #/components/schemas/ComponentDetails
type ComponentDetails struct {
	// Component vendor.
	Vendor string `json:"vendor"`
	// Component display name.
	DisplayName string `json:"displayName"`
	// Component display version.
	DisplayVersion OptString `json:"displayVersion"`
}

// GetVendor returns the value of Vendor.
func (s *ComponentDetails) GetVendor() string {
	return s.Vendor
}

// GetDisplayName returns the value of DisplayName.
func (s *ComponentDetails) GetDisplayName() string {
	return s.DisplayName
}

// GetDisplayVersion returns the value of DisplayVersion.
func (s *ComponentDetails) GetDisplayVersion() OptString {
	return s.DisplayVersion
}

// SetVendor sets the value of Vendor.
func (s *ComponentDetails) SetVendor(val string) {
	s.Vendor = val
}

// SetDisplayName sets the value of DisplayName.
func (s *ComponentDetails) SetDisplayName(val string) {
	s.DisplayName = val
}

// SetDisplayVersion sets the value of DisplayVersion.
func (s *ComponentDetails) SetDisplayVersion(val OptString) {
	s.DisplayVersion = val
}

// Component contains bits to install/update the appropriate Cloud Foundation software components in
// your management domain or workload domain.
// Ref: #/components/schemas/ComponentInfo
type ComponentInfo struct {
	// Component Version.
	Version string           `json:"version"`
	Details ComponentDetails `json:"details"`
}

// GetVersion returns the value of Version.
func (s *ComponentInfo) GetVersion() string {
	return s.Version
}

// GetDetails returns the value of Details.
func (s *ComponentInfo) GetDetails() ComponentDetails {
	return s.Details
}

// SetVersion sets the value of Version.
func (s *ComponentInfo) SetVersion(val string) {
	s.Version = val
}

// SetDetails sets the value of Details.
func (s *ComponentInfo) SetDetails(val ComponentDetails) {
	s.Details = val
}

// This specification contains the parameters required to add each cluster to a workload domain.
// Ref: #/components/schemas/ComputeSpec
type ComputeSpec struct {
	// List of clusters to be added to workload domain.
	ClusterSpecs []ClusterSpec `json:"clusterSpecs"`
	// Skip failed ESXi Hosts and proceed with the rest of the ESXi Hosts during add Cluster. This is not
	// supported for VCF VxRail.
	SkipFailedHosts OptBool `json:"skipFailedHosts"`
}

// GetClusterSpecs returns the value of ClusterSpecs.
func (s *ComputeSpec) GetClusterSpecs() []ClusterSpec {
	return s.ClusterSpecs
}

// GetSkipFailedHosts returns the value of SkipFailedHosts.
func (s *ComputeSpec) GetSkipFailedHosts() OptBool {
	return s.SkipFailedHosts
}

// SetClusterSpecs sets the value of ClusterSpecs.
func (s *ComputeSpec) SetClusterSpecs(val []ClusterSpec) {
	s.ClusterSpecs = val
}

// SetSkipFailedHosts sets the value of SkipFailedHosts.
func (s *ComputeSpec) SetSkipFailedHosts(val OptBool) {
	s.SkipFailedHosts = val
}

// Describes Configuration Reconciliation operations.
// Ref: #/components/schemas/ConfigDriftApplySpec
type ConfigDriftApplySpec struct {
	// List of Configuration Reconciliation for resource, mutually exclusive with reconciliationForDrifts.
	ReconciliationForResources []ReconciliationForResource `json:"reconciliationForResources"`
}

// GetReconciliationForResources returns the value of ReconciliationForResources.
func (s *ConfigDriftApplySpec) GetReconciliationForResources() []ReconciliationForResource {
	return s.ReconciliationForResources
}

// SetReconciliationForResources sets the value of ReconciliationForResources.
func (s *ConfigDriftApplySpec) SetReconciliationForResources(val []ReconciliationForResource) {
	s.ReconciliationForResources = val
}

// Represents a Configuration Drift workflow.
// Ref: #/components/schemas/ConfigDriftSpec
type ConfigDriftSpec struct {
	// The UUID of the Configuration Drift.
	ID OptString `json:"id"`
	// Name of the Configuration Drift.
	Name OptString `json:"name"`
	// Description of the Configuration Drift.
	Description OptString `json:"description"`
	// The infrastructure resource on which this Configuration Drift operates.
	ResourceType OptString `json:"resourceType"`
	// The type of Configuration Drift.
	Type          OptString        `json:"type"`
	Applicability OptApplicability `json:"applicability"`
}

// GetID returns the value of ID.
func (s *ConfigDriftSpec) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *ConfigDriftSpec) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ConfigDriftSpec) GetDescription() OptString {
	return s.Description
}

// GetResourceType returns the value of ResourceType.
func (s *ConfigDriftSpec) GetResourceType() OptString {
	return s.ResourceType
}

// GetType returns the value of Type.
func (s *ConfigDriftSpec) GetType() OptString {
	return s.Type
}

// GetApplicability returns the value of Applicability.
func (s *ConfigDriftSpec) GetApplicability() OptApplicability {
	return s.Applicability
}

// SetID sets the value of ID.
func (s *ConfigDriftSpec) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ConfigDriftSpec) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ConfigDriftSpec) SetDescription(val OptString) {
	s.Description = val
}

// SetResourceType sets the value of ResourceType.
func (s *ConfigDriftSpec) SetResourceType(val OptString) {
	s.ResourceType = val
}

// SetType sets the value of Type.
func (s *ConfigDriftSpec) SetType(val OptString) {
	s.Type = val
}

// SetApplicability sets the value of Applicability.
func (s *ConfigDriftSpec) SetApplicability(val OptApplicability) {
	s.Applicability = val
}

type ConfigureCertificateAuthorityBadRequest Error

func (*ConfigureCertificateAuthorityBadRequest) configureCertificateAuthorityRes() {}

type ConfigureCertificateAuthorityInternalServerError Error

func (*ConfigureCertificateAuthorityInternalServerError) configureCertificateAuthorityRes() {}

type ConfigureCertificateAuthorityNotFound Error

func (*ConfigureCertificateAuthorityNotFound) configureCertificateAuthorityRes() {}

// ConfigureCertificateAuthorityOK is response for ConfigureCertificateAuthority operation.
type ConfigureCertificateAuthorityOK struct{}

func (*ConfigureCertificateAuthorityOK) configureCertificateAuthorityRes() {}

type ConfigureDnsBadRequest Error

func (*ConfigureDnsBadRequest) configureDnsRes() {}

type ConfigureDnsInternalServerError Error

func (*ConfigureDnsInternalServerError) configureDnsRes() {}

type ConfigureNtpBadRequest Error

func (*ConfigureNtpBadRequest) configureNtpRes() {}

type ConfigureNtpInternalServerError Error

func (*ConfigureNtpInternalServerError) configureNtpRes() {}

// ConnectOpenIdOK is response for ConnectOpenId operation.
type ConnectOpenIdOK struct{}

type ConnectVropsWithDomainBadRequest Error

func (*ConnectVropsWithDomainBadRequest) connectVropsWithDomainRes() {}

type ConnectVropsWithDomainInternalServerError Error

func (*ConnectVropsWithDomainInternalServerError) connectVropsWithDomainRes() {}

// Represents a CPU core.
// Ref: #/components/schemas/CpuCore
type CpuCore struct {
	// CPU frequency in MHz.
	FrequencyMHz OptFloat64 `json:"frequencyMHz"`
	// Hardware model of the CPU.
	Model OptString `json:"model"`
	// Hardware manufacturer of the CPU.
	Manufacturer OptString `json:"manufacturer"`
}

// GetFrequencyMHz returns the value of FrequencyMHz.
func (s *CpuCore) GetFrequencyMHz() OptFloat64 {
	return s.FrequencyMHz
}

// GetModel returns the value of Model.
func (s *CpuCore) GetModel() OptString {
	return s.Model
}

// GetManufacturer returns the value of Manufacturer.
func (s *CpuCore) GetManufacturer() OptString {
	return s.Manufacturer
}

// SetFrequencyMHz sets the value of FrequencyMHz.
func (s *CpuCore) SetFrequencyMHz(val OptFloat64) {
	s.FrequencyMHz = val
}

// SetModel sets the value of Model.
func (s *CpuCore) SetModel(val OptString) {
	s.Model = val
}

// SetManufacturer sets the value of Manufacturer.
func (s *CpuCore) SetManufacturer(val OptString) {
	s.Manufacturer = val
}

// Represents CPU information.
// Ref: #/components/schemas/CpuInfo
type CpuInfo struct {
	Used  OptFrequencyMetric `json:"used"`
	Total OptFrequencyMetric `json:"total"`
	// Number of cores.
	NumberOfCores OptInt32 `json:"numberOfCores"`
	// Number of CPU Packages.
	NumberOfCPUPackages OptInt32 `json:"numberOfCPUPackages"`
}

// GetUsed returns the value of Used.
func (s *CpuInfo) GetUsed() OptFrequencyMetric {
	return s.Used
}

// GetTotal returns the value of Total.
func (s *CpuInfo) GetTotal() OptFrequencyMetric {
	return s.Total
}

// GetNumberOfCores returns the value of NumberOfCores.
func (s *CpuInfo) GetNumberOfCores() OptInt32 {
	return s.NumberOfCores
}

// GetNumberOfCPUPackages returns the value of NumberOfCPUPackages.
func (s *CpuInfo) GetNumberOfCPUPackages() OptInt32 {
	return s.NumberOfCPUPackages
}

// SetUsed sets the value of Used.
func (s *CpuInfo) SetUsed(val OptFrequencyMetric) {
	s.Used = val
}

// SetTotal sets the value of Total.
func (s *CpuInfo) SetTotal(val OptFrequencyMetric) {
	s.Total = val
}

// SetNumberOfCores sets the value of NumberOfCores.
func (s *CpuInfo) SetNumberOfCores(val OptInt32) {
	s.NumberOfCores = val
}

// SetNumberOfCPUPackages sets the value of NumberOfCPUPackages.
func (s *CpuInfo) SetNumberOfCPUPackages(val OptInt32) {
	s.NumberOfCPUPackages = val
}

type CreateAvnsBadRequest Error

func (*CreateAvnsBadRequest) createAvnsRes() {}

type CreateAvnsInternalServerError Error

func (*CreateAvnsInternalServerError) createAvnsRes() {}

type CreateCertificateAuthorityBadRequest Error

func (*CreateCertificateAuthorityBadRequest) createCertificateAuthorityRes() {}

type CreateCertificateAuthorityInternalServerError Error

func (*CreateCertificateAuthorityInternalServerError) createCertificateAuthorityRes() {}

// CreateCertificateAuthorityOK is response for CreateCertificateAuthority operation.
type CreateCertificateAuthorityOK struct{}

func (*CreateCertificateAuthorityOK) createCertificateAuthorityRes() {}

type CreateClusterBadRequest Error

func (*CreateClusterBadRequest) createClusterRes() {}

type CreateClusterInternalServerError Error

func (*CreateClusterInternalServerError) createClusterRes() {}

type CreateDomainBadRequest Error

func (*CreateDomainBadRequest) createDomainRes() {}

type CreateDomainInternalServerError Error

func (*CreateDomainInternalServerError) createDomainRes() {}

type CreateEdgeClusterBadRequest Error

func (*CreateEdgeClusterBadRequest) createEdgeClusterRes() {}

type CreateEdgeClusterInternalServerError Error

func (*CreateEdgeClusterInternalServerError) createEdgeClusterRes() {}

type CreateNetworkPoolBadRequest Error

func (*CreateNetworkPoolBadRequest) createNetworkPoolRes() {}

type CreateNetworkPoolInternalServerError Error

func (*CreateNetworkPoolInternalServerError) createNetworkPoolRes() {}

type CreateResourceWarningBadRequest Error

func (*CreateResourceWarningBadRequest) createResourceWarningRes() {}

type CreateResourceWarningInternalServerError Error

func (*CreateResourceWarningInternalServerError) createResourceWarningRes() {}

type CreateTokenBadRequest Error

func (*CreateTokenBadRequest) createTokenRes() {}

type CreateTokenCreated TokenPair

func (*CreateTokenCreated) createTokenRes() {}

type CreateTokenInternalServerError Error

func (*CreateTokenInternalServerError) createTokenRes() {}

type CreateTokenOK TokenPair

func (*CreateTokenOK) createTokenRes() {}

type CreateTokenUnauthorized Error

func (*CreateTokenUnauthorized) createTokenRes() {}

// Represents a credential and the resource to which it is associated with.
// Ref: #/components/schemas/Credential
type Credential struct {
	// Credential ID.
	ID string `json:"id"`
	// Credential type.
	CredentialType string `json:"credentialType"`
	// Account type.
	AccountType string `json:"accountType"`
	// Username.
	Username string `json:"username"`
	// Password.
	Password OptString `json:"password"`
	// The timestamp at which credential was created.
	CreationTimestamp string `json:"creationTimestamp"`
	// The timestamp at which credential was last modified.
	ModificationTimestamp string                        `json:"modificationTimestamp"`
	Expiry                OptExpirationDetails          `json:"expiry"`
	Resource              AuthenticatedResource         `json:"resource"`
	AutoRotatePolicy      OptAutoRotateCredentialPolicy `json:"autoRotatePolicy"`
}

// GetID returns the value of ID.
func (s *Credential) GetID() string {
	return s.ID
}

// GetCredentialType returns the value of CredentialType.
func (s *Credential) GetCredentialType() string {
	return s.CredentialType
}

// GetAccountType returns the value of AccountType.
func (s *Credential) GetAccountType() string {
	return s.AccountType
}

// GetUsername returns the value of Username.
func (s *Credential) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *Credential) GetPassword() OptString {
	return s.Password
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *Credential) GetCreationTimestamp() string {
	return s.CreationTimestamp
}

// GetModificationTimestamp returns the value of ModificationTimestamp.
func (s *Credential) GetModificationTimestamp() string {
	return s.ModificationTimestamp
}

// GetExpiry returns the value of Expiry.
func (s *Credential) GetExpiry() OptExpirationDetails {
	return s.Expiry
}

// GetResource returns the value of Resource.
func (s *Credential) GetResource() AuthenticatedResource {
	return s.Resource
}

// GetAutoRotatePolicy returns the value of AutoRotatePolicy.
func (s *Credential) GetAutoRotatePolicy() OptAutoRotateCredentialPolicy {
	return s.AutoRotatePolicy
}

// SetID sets the value of ID.
func (s *Credential) SetID(val string) {
	s.ID = val
}

// SetCredentialType sets the value of CredentialType.
func (s *Credential) SetCredentialType(val string) {
	s.CredentialType = val
}

// SetAccountType sets the value of AccountType.
func (s *Credential) SetAccountType(val string) {
	s.AccountType = val
}

// SetUsername sets the value of Username.
func (s *Credential) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *Credential) SetPassword(val OptString) {
	s.Password = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *Credential) SetCreationTimestamp(val string) {
	s.CreationTimestamp = val
}

// SetModificationTimestamp sets the value of ModificationTimestamp.
func (s *Credential) SetModificationTimestamp(val string) {
	s.ModificationTimestamp = val
}

// SetExpiry sets the value of Expiry.
func (s *Credential) SetExpiry(val OptExpirationDetails) {
	s.Expiry = val
}

// SetResource sets the value of Resource.
func (s *Credential) SetResource(val AuthenticatedResource) {
	s.Resource = val
}

// SetAutoRotatePolicy sets the value of AutoRotatePolicy.
func (s *Credential) SetAutoRotatePolicy(val OptAutoRotateCredentialPolicy) {
	s.AutoRotatePolicy = val
}

func (*Credential) getCredentialRes() {}

// Represents credential expiration check details.
// Ref: #/components/schemas/CredentialExpirationCheck
type CredentialExpirationCheck struct {
	// Credential ID.
	ID OptString `json:"id"`
	// Username.
	Username OptString                `json:"username"`
	Resource OptAuthenticatedResource `json:"resource"`
	Expiry   OptExpirationDetails     `json:"expiry"`
	// List of errors in case of a failure.
	Errors []Error `json:"errors"`
	// Creation timestamp.
	CreationTimestamp OptString `json:"creationTimestamp"`
	// Completion timestamp.
	CompletionTimestamp OptString `json:"completionTimestamp"`
}

// GetID returns the value of ID.
func (s *CredentialExpirationCheck) GetID() OptString {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *CredentialExpirationCheck) GetUsername() OptString {
	return s.Username
}

// GetResource returns the value of Resource.
func (s *CredentialExpirationCheck) GetResource() OptAuthenticatedResource {
	return s.Resource
}

// GetExpiry returns the value of Expiry.
func (s *CredentialExpirationCheck) GetExpiry() OptExpirationDetails {
	return s.Expiry
}

// GetErrors returns the value of Errors.
func (s *CredentialExpirationCheck) GetErrors() []Error {
	return s.Errors
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *CredentialExpirationCheck) GetCreationTimestamp() OptString {
	return s.CreationTimestamp
}

// GetCompletionTimestamp returns the value of CompletionTimestamp.
func (s *CredentialExpirationCheck) GetCompletionTimestamp() OptString {
	return s.CompletionTimestamp
}

// SetID sets the value of ID.
func (s *CredentialExpirationCheck) SetID(val OptString) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *CredentialExpirationCheck) SetUsername(val OptString) {
	s.Username = val
}

// SetResource sets the value of Resource.
func (s *CredentialExpirationCheck) SetResource(val OptAuthenticatedResource) {
	s.Resource = val
}

// SetExpiry sets the value of Expiry.
func (s *CredentialExpirationCheck) SetExpiry(val OptExpirationDetails) {
	s.Expiry = val
}

// SetErrors sets the value of Errors.
func (s *CredentialExpirationCheck) SetErrors(val []Error) {
	s.Errors = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *CredentialExpirationCheck) SetCreationTimestamp(val OptString) {
	s.CreationTimestamp = val
}

// SetCompletionTimestamp sets the value of CompletionTimestamp.
func (s *CredentialExpirationCheck) SetCompletionTimestamp(val OptString) {
	s.CompletionTimestamp = val
}

// Represents a credentials expiration task response.
// Ref: #/components/schemas/CredentialsExpiration
type CredentialsExpiration struct {
	// ID of expiration task.
	ID OptString `json:"id"`
	// Execution status of the expiration.
	Status string `json:"status"`
	// List of one or more expiration checks that are performed as part of the credentials expiration task.
	Elements []CredentialExpirationCheck `json:"elements"`
	// Creation timestamp.
	CreationTimestamp OptString `json:"creationTimestamp"`
	// Completion timestamp.
	CompletionTimestamp OptString `json:"completionTimestamp"`
}

// GetID returns the value of ID.
func (s *CredentialsExpiration) GetID() OptString {
	return s.ID
}

// GetStatus returns the value of Status.
func (s *CredentialsExpiration) GetStatus() string {
	return s.Status
}

// GetElements returns the value of Elements.
func (s *CredentialsExpiration) GetElements() []CredentialExpirationCheck {
	return s.Elements
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *CredentialsExpiration) GetCreationTimestamp() OptString {
	return s.CreationTimestamp
}

// GetCompletionTimestamp returns the value of CompletionTimestamp.
func (s *CredentialsExpiration) GetCompletionTimestamp() OptString {
	return s.CompletionTimestamp
}

// SetID sets the value of ID.
func (s *CredentialsExpiration) SetID(val OptString) {
	s.ID = val
}

// SetStatus sets the value of Status.
func (s *CredentialsExpiration) SetStatus(val string) {
	s.Status = val
}

// SetElements sets the value of Elements.
func (s *CredentialsExpiration) SetElements(val []CredentialExpirationCheck) {
	s.Elements = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *CredentialsExpiration) SetCreationTimestamp(val OptString) {
	s.CreationTimestamp = val
}

// SetCompletionTimestamp sets the value of CompletionTimestamp.
func (s *CredentialsExpiration) SetCompletionTimestamp(val OptString) {
	s.CompletionTimestamp = val
}

func (*CredentialsExpiration) getPasswordExpirationByTaskIDRes() {}
func (*CredentialsExpiration) getPasswordExpirationRes()         {}

// This specification contains password expiration fetch request details.
// Ref: #/components/schemas/CredentialsExpirationSpec
type CredentialsExpirationSpec struct {
	// Domain name.
	DomainName OptString `json:"domainName"`
	// Authenticated Resource Type.
	ResourceType string `json:"resourceType"`
	// List of credential ids.
	CredentialIds []string `json:"credentialIds"`
}

// GetDomainName returns the value of DomainName.
func (s *CredentialsExpirationSpec) GetDomainName() OptString {
	return s.DomainName
}

// GetResourceType returns the value of ResourceType.
func (s *CredentialsExpirationSpec) GetResourceType() string {
	return s.ResourceType
}

// GetCredentialIds returns the value of CredentialIds.
func (s *CredentialsExpirationSpec) GetCredentialIds() []string {
	return s.CredentialIds
}

// SetDomainName sets the value of DomainName.
func (s *CredentialsExpirationSpec) SetDomainName(val OptString) {
	s.DomainName = val
}

// SetResourceType sets the value of ResourceType.
func (s *CredentialsExpirationSpec) SetResourceType(val string) {
	s.ResourceType = val
}

// SetCredentialIds sets the value of CredentialIds.
func (s *CredentialsExpirationSpec) SetCredentialIds(val []string) {
	s.CredentialIds = val
}

// Represents the credentials sub-task in the system.
// Ref: #/components/schemas/CredentialsSubTask
type CredentialsSubTask struct {
	// Credential sub-task ID.
	ID OptString `json:"id"`
	// Resource name.
	ResourceName OptString `json:"resourceName"`
	// Credential sub-task name.
	Name string `json:"name"`
	// Credential sub-task description.
	Description string `json:"description"`
	// Credential sub-task creation timestamp.
	CreationTimestamp string `json:"creationTimestamp"`
	// Credential sub-task status.
	Status string `json:"status"`
	// List of dependent sub-tasks of the credential sub-task.
	DependentSubTasks []CredentialsSubTask `json:"dependentSubTasks"`
	// List of errors in case of a failure.
	Errors []Error `json:"errors"`
	// Credential sub-task old password.
	OldPassword OptString `json:"oldPassword"`
	// Credential sub-task new password.
	NewPassword OptString `json:"newPassword"`
	// Credential sub-task entity type.
	EntityType OptString `json:"entityType"`
	// Credential sub-task username.
	Username OptString `json:"username"`
	// Credential sub-task credential type.
	CredentialType OptString `json:"credentialType"`
}

// GetID returns the value of ID.
func (s *CredentialsSubTask) GetID() OptString {
	return s.ID
}

// GetResourceName returns the value of ResourceName.
func (s *CredentialsSubTask) GetResourceName() OptString {
	return s.ResourceName
}

// GetName returns the value of Name.
func (s *CredentialsSubTask) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CredentialsSubTask) GetDescription() string {
	return s.Description
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *CredentialsSubTask) GetCreationTimestamp() string {
	return s.CreationTimestamp
}

// GetStatus returns the value of Status.
func (s *CredentialsSubTask) GetStatus() string {
	return s.Status
}

// GetDependentSubTasks returns the value of DependentSubTasks.
func (s *CredentialsSubTask) GetDependentSubTasks() []CredentialsSubTask {
	return s.DependentSubTasks
}

// GetErrors returns the value of Errors.
func (s *CredentialsSubTask) GetErrors() []Error {
	return s.Errors
}

// GetOldPassword returns the value of OldPassword.
func (s *CredentialsSubTask) GetOldPassword() OptString {
	return s.OldPassword
}

// GetNewPassword returns the value of NewPassword.
func (s *CredentialsSubTask) GetNewPassword() OptString {
	return s.NewPassword
}

// GetEntityType returns the value of EntityType.
func (s *CredentialsSubTask) GetEntityType() OptString {
	return s.EntityType
}

// GetUsername returns the value of Username.
func (s *CredentialsSubTask) GetUsername() OptString {
	return s.Username
}

// GetCredentialType returns the value of CredentialType.
func (s *CredentialsSubTask) GetCredentialType() OptString {
	return s.CredentialType
}

// SetID sets the value of ID.
func (s *CredentialsSubTask) SetID(val OptString) {
	s.ID = val
}

// SetResourceName sets the value of ResourceName.
func (s *CredentialsSubTask) SetResourceName(val OptString) {
	s.ResourceName = val
}

// SetName sets the value of Name.
func (s *CredentialsSubTask) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CredentialsSubTask) SetDescription(val string) {
	s.Description = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *CredentialsSubTask) SetCreationTimestamp(val string) {
	s.CreationTimestamp = val
}

// SetStatus sets the value of Status.
func (s *CredentialsSubTask) SetStatus(val string) {
	s.Status = val
}

// SetDependentSubTasks sets the value of DependentSubTasks.
func (s *CredentialsSubTask) SetDependentSubTasks(val []CredentialsSubTask) {
	s.DependentSubTasks = val
}

// SetErrors sets the value of Errors.
func (s *CredentialsSubTask) SetErrors(val []Error) {
	s.Errors = val
}

// SetOldPassword sets the value of OldPassword.
func (s *CredentialsSubTask) SetOldPassword(val OptString) {
	s.OldPassword = val
}

// SetNewPassword sets the value of NewPassword.
func (s *CredentialsSubTask) SetNewPassword(val OptString) {
	s.NewPassword = val
}

// SetEntityType sets the value of EntityType.
func (s *CredentialsSubTask) SetEntityType(val OptString) {
	s.EntityType = val
}

// SetUsername sets the value of Username.
func (s *CredentialsSubTask) SetUsername(val OptString) {
	s.Username = val
}

// SetCredentialType sets the value of CredentialType.
func (s *CredentialsSubTask) SetCredentialType(val OptString) {
	s.CredentialType = val
}

// Represents the credentials task in the system.
// Ref: #/components/schemas/CredentialsTask
type CredentialsTask struct {
	// Credential task ID.
	ID string `json:"id"`
	// Credential task name.
	Name string `json:"name"`
	// Credential task type.
	Type string `json:"type"`
	// Credential task creation timestamp.
	CreationTimestamp string `json:"creationTimestamp"`
	// Credential task status.
	Status string `json:"status"`
	// List of credential sub-tasks of the credential task.
	SubTasks []CredentialsSubTask `json:"subTasks"`
	// List of errors in case of a failure.
	Errors []Error `json:"errors"`
	// Is Credential task an auto rotate task.
	IsAutoRotate OptBool `json:"isAutoRotate"`
}

// GetID returns the value of ID.
func (s *CredentialsTask) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *CredentialsTask) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *CredentialsTask) GetType() string {
	return s.Type
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *CredentialsTask) GetCreationTimestamp() string {
	return s.CreationTimestamp
}

// GetStatus returns the value of Status.
func (s *CredentialsTask) GetStatus() string {
	return s.Status
}

// GetSubTasks returns the value of SubTasks.
func (s *CredentialsTask) GetSubTasks() []CredentialsSubTask {
	return s.SubTasks
}

// GetErrors returns the value of Errors.
func (s *CredentialsTask) GetErrors() []Error {
	return s.Errors
}

// GetIsAutoRotate returns the value of IsAutoRotate.
func (s *CredentialsTask) GetIsAutoRotate() OptBool {
	return s.IsAutoRotate
}

// SetID sets the value of ID.
func (s *CredentialsTask) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CredentialsTask) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *CredentialsTask) SetType(val string) {
	s.Type = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *CredentialsTask) SetCreationTimestamp(val string) {
	s.CreationTimestamp = val
}

// SetStatus sets the value of Status.
func (s *CredentialsTask) SetStatus(val string) {
	s.Status = val
}

// SetSubTasks sets the value of SubTasks.
func (s *CredentialsTask) SetSubTasks(val []CredentialsSubTask) {
	s.SubTasks = val
}

// SetErrors sets the value of Errors.
func (s *CredentialsTask) SetErrors(val []Error) {
	s.Errors = val
}

// SetIsAutoRotate sets the value of IsAutoRotate.
func (s *CredentialsTask) SetIsAutoRotate(val OptBool) {
	s.IsAutoRotate = val
}

func (*CredentialsTask) getCredentialsSubTaskRes() {}
func (*CredentialsTask) getCredentialsTaskRes()    {}

// This specification contains password operation request details.
// Ref: #/components/schemas/CredentialsUpdateSpec
type CredentialsUpdateSpec struct {
	// Operation type.
	OperationType string `json:"operationType"`
	// List of resource credentials to be changed.
	Elements         []ResourceCredentials                  `json:"elements"`
	AutoRotatePolicy OptAutoRotateCredentialPolicyInputSpec `json:"autoRotatePolicy"`
}

// GetOperationType returns the value of OperationType.
func (s *CredentialsUpdateSpec) GetOperationType() string {
	return s.OperationType
}

// GetElements returns the value of Elements.
func (s *CredentialsUpdateSpec) GetElements() []ResourceCredentials {
	return s.Elements
}

// GetAutoRotatePolicy returns the value of AutoRotatePolicy.
func (s *CredentialsUpdateSpec) GetAutoRotatePolicy() OptAutoRotateCredentialPolicyInputSpec {
	return s.AutoRotatePolicy
}

// SetOperationType sets the value of OperationType.
func (s *CredentialsUpdateSpec) SetOperationType(val string) {
	s.OperationType = val
}

// SetElements sets the value of Elements.
func (s *CredentialsUpdateSpec) SetElements(val []ResourceCredentials) {
	s.Elements = val
}

// SetAutoRotatePolicy sets the value of AutoRotatePolicy.
func (s *CredentialsUpdateSpec) SetAutoRotatePolicy(val OptAutoRotateCredentialPolicyInputSpec) {
	s.AutoRotatePolicy = val
}

// The Certificate Signing Request (CSR) details.
// Ref: #/components/schemas/Csr
type Csr struct {
	// The CSR encoded content.
	CsrEncodedContent string   `json:"csrEncodedContent"`
	Resource          Resource `json:"resource"`
	// The CSR decoded content.
	CsrDecodedContent string `json:"csrDecodedContent"`
}

// GetCsrEncodedContent returns the value of CsrEncodedContent.
func (s *Csr) GetCsrEncodedContent() string {
	return s.CsrEncodedContent
}

// GetResource returns the value of Resource.
func (s *Csr) GetResource() Resource {
	return s.Resource
}

// GetCsrDecodedContent returns the value of CsrDecodedContent.
func (s *Csr) GetCsrDecodedContent() string {
	return s.CsrDecodedContent
}

// SetCsrEncodedContent sets the value of CsrEncodedContent.
func (s *Csr) SetCsrEncodedContent(val string) {
	s.CsrEncodedContent = val
}

// SetResource sets the value of Resource.
func (s *Csr) SetResource(val Resource) {
	s.Resource = val
}

// SetCsrDecodedContent sets the value of CsrDecodedContent.
func (s *Csr) SetCsrDecodedContent(val string) {
	s.CsrDecodedContent = val
}

// This specification contains Certificate Signing Request (CSR) details.
// Ref: #/components/schemas/CsrGenerationSpec
type CsrGenerationSpec struct {
	// ISO 3166 country code where company is legally registered.
	Country string `json:"country"`
	// The full name of the state where company is legally registered.
	State string `json:"state"`
	// The city or locality where company is legally registered.
	Locality string `json:"locality"`
	// The name under which company is legally registered.
	Organization string `json:"organization"`
	// Organization with which the certificate is associated.
	OrganizationUnit string `json:"organizationUnit"`
	// Contact email address.
	Email OptString `json:"email"`
	// Certificate public key size.
	KeySize string `json:"keySize"`
	// The public key algorithm of the certificate.
	KeyAlgorithm string `json:"keyAlgorithm"`
}

// GetCountry returns the value of Country.
func (s *CsrGenerationSpec) GetCountry() string {
	return s.Country
}

// GetState returns the value of State.
func (s *CsrGenerationSpec) GetState() string {
	return s.State
}

// GetLocality returns the value of Locality.
func (s *CsrGenerationSpec) GetLocality() string {
	return s.Locality
}

// GetOrganization returns the value of Organization.
func (s *CsrGenerationSpec) GetOrganization() string {
	return s.Organization
}

// GetOrganizationUnit returns the value of OrganizationUnit.
func (s *CsrGenerationSpec) GetOrganizationUnit() string {
	return s.OrganizationUnit
}

// GetEmail returns the value of Email.
func (s *CsrGenerationSpec) GetEmail() OptString {
	return s.Email
}

// GetKeySize returns the value of KeySize.
func (s *CsrGenerationSpec) GetKeySize() string {
	return s.KeySize
}

// GetKeyAlgorithm returns the value of KeyAlgorithm.
func (s *CsrGenerationSpec) GetKeyAlgorithm() string {
	return s.KeyAlgorithm
}

// SetCountry sets the value of Country.
func (s *CsrGenerationSpec) SetCountry(val string) {
	s.Country = val
}

// SetState sets the value of State.
func (s *CsrGenerationSpec) SetState(val string) {
	s.State = val
}

// SetLocality sets the value of Locality.
func (s *CsrGenerationSpec) SetLocality(val string) {
	s.Locality = val
}

// SetOrganization sets the value of Organization.
func (s *CsrGenerationSpec) SetOrganization(val string) {
	s.Organization = val
}

// SetOrganizationUnit sets the value of OrganizationUnit.
func (s *CsrGenerationSpec) SetOrganizationUnit(val string) {
	s.OrganizationUnit = val
}

// SetEmail sets the value of Email.
func (s *CsrGenerationSpec) SetEmail(val OptString) {
	s.Email = val
}

// SetKeySize sets the value of KeySize.
func (s *CsrGenerationSpec) SetKeySize(val string) {
	s.KeySize = val
}

// SetKeyAlgorithm sets the value of KeyAlgorithm.
func (s *CsrGenerationSpec) SetKeyAlgorithm(val string) {
	s.KeyAlgorithm = val
}

// This specification contains CSR Generation request details.
// Ref: #/components/schemas/CsrsGenerationSpec
type CsrsGenerationSpec struct {
	CsrGenerationSpec CsrGenerationSpec `json:"csrGenerationSpec"`
	// Resource(s) in a domain.
	Resources []Resource `json:"resources"`
}

// GetCsrGenerationSpec returns the value of CsrGenerationSpec.
func (s *CsrsGenerationSpec) GetCsrGenerationSpec() CsrGenerationSpec {
	return s.CsrGenerationSpec
}

// GetResources returns the value of Resources.
func (s *CsrsGenerationSpec) GetResources() []Resource {
	return s.Resources
}

// SetCsrGenerationSpec sets the value of CsrGenerationSpec.
func (s *CsrsGenerationSpec) SetCsrGenerationSpec(val CsrGenerationSpec) {
	s.CsrGenerationSpec = val
}

// SetResources sets the value of Resources.
func (s *CsrsGenerationSpec) SetResources(val []Resource) {
	s.Resources = val
}

// Custom ISO Specifications for VUM Clusters Upgrade with Custom ISO.
// Ref: #/components/schemas/CustomISOSpec
type CustomISOSpec struct {
	// Custom ISO Id for VUM Clusters Upgrade.
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *CustomISOSpec) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *CustomISOSpec) SetID(val string) {
	s.ID = val
}

// Custom Iso contains bits to install/update the appropriate Cloud Foundation software components
// and vendor add ons in your management domain or workload domain hosts.
// Ref: #/components/schemas/CustomIso
type CustomIso struct {
	// Custom Iso Id.
	ID string `json:"id"`
	// Custom Image Name.
	Name string `json:"name"`
	// Custom Iso ESXi Version.
	Version OptString `json:"version"`
	// Vendor of the Custom Iso.
	Vendor OptString `json:"vendor"`
	// Date when the ISO was uploaded.
	UploadedTimestamp OptString `json:"uploadedTimestamp"`
}

// GetID returns the value of ID.
func (s *CustomIso) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *CustomIso) GetName() string {
	return s.Name
}

// GetVersion returns the value of Version.
func (s *CustomIso) GetVersion() OptString {
	return s.Version
}

// GetVendor returns the value of Vendor.
func (s *CustomIso) GetVendor() OptString {
	return s.Vendor
}

// GetUploadedTimestamp returns the value of UploadedTimestamp.
func (s *CustomIso) GetUploadedTimestamp() OptString {
	return s.UploadedTimestamp
}

// SetID sets the value of ID.
func (s *CustomIso) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CustomIso) SetName(val string) {
	s.Name = val
}

// SetVersion sets the value of Version.
func (s *CustomIso) SetVersion(val OptString) {
	s.Version = val
}

// SetVendor sets the value of Vendor.
func (s *CustomIso) SetVendor(val OptString) {
	s.Vendor = val
}

// SetUploadedTimestamp sets the value of UploadedTimestamp.
func (s *CustomIso) SetUploadedTimestamp(val OptString) {
	s.UploadedTimestamp = val
}

func (*CustomIso) getCustomIsoByIdRes()    {}
func (*CustomIso) renameCustomIsoByIdRes() {}

// Custom Iso rename spec contains the name field in which the new name is to be entered.
// Ref: #/components/schemas/CustomIsoRenameSpec
type CustomIsoRenameSpec struct {
	// Custom Iso name.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *CustomIsoRenameSpec) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *CustomIsoRenameSpec) SetName(val string) {
	s.Name = val
}

// Represents a single metric representing digital data.
// Ref: #/components/schemas/DataMetric
type DataMetric struct {
	// Value of the metric.
	Value OptFloat64 `json:"value"`
	// Unit of the metric.
	Unit OptDataMetricUnit `json:"unit"`
}

// GetValue returns the value of Value.
func (s *DataMetric) GetValue() OptFloat64 {
	return s.Value
}

// GetUnit returns the value of Unit.
func (s *DataMetric) GetUnit() OptDataMetricUnit {
	return s.Unit
}

// SetValue sets the value of Value.
func (s *DataMetric) SetValue(val OptFloat64) {
	s.Value = val
}

// SetUnit sets the value of Unit.
func (s *DataMetric) SetUnit(val OptDataMetricUnit) {
	s.Unit = val
}

// Unit of the metric.
type DataMetricUnit string

const (
	DataMetricUnitB  DataMetricUnit = "B"
	DataMetricUnitKB DataMetricUnit = "KB"
	DataMetricUnitMB DataMetricUnit = "MB"
	DataMetricUnitGB DataMetricUnit = "GB"
	DataMetricUnitTB DataMetricUnit = "TB"
	DataMetricUnitPB DataMetricUnit = "PB"
)

// AllValues returns all DataMetricUnit values.
func (DataMetricUnit) AllValues() []DataMetricUnit {
	return []DataMetricUnit{
		DataMetricUnitB,
		DataMetricUnitKB,
		DataMetricUnitMB,
		DataMetricUnitGB,
		DataMetricUnitTB,
		DataMetricUnitPB,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DataMetricUnit) MarshalText() ([]byte, error) {
	switch s {
	case DataMetricUnitB:
		return []byte(s), nil
	case DataMetricUnitKB:
		return []byte(s), nil
	case DataMetricUnitMB:
		return []byte(s), nil
	case DataMetricUnitGB:
		return []byte(s), nil
	case DataMetricUnitTB:
		return []byte(s), nil
	case DataMetricUnitPB:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DataMetricUnit) UnmarshalText(data []byte) error {
	switch DataMetricUnit(data) {
	case DataMetricUnitB:
		*s = DataMetricUnitB
		return nil
	case DataMetricUnitKB:
		*s = DataMetricUnitKB
		return nil
	case DataMetricUnitMB:
		*s = DataMetricUnitMB
		return nil
	case DataMetricUnitGB:
		*s = DataMetricUnitGB
		return nil
	case DataMetricUnitTB:
		*s = DataMetricUnitTB
		return nil
	case DataMetricUnitPB:
		*s = DataMetricUnitPB
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents a datastore in the system.
// Ref: #/components/schemas/Datastore
type Datastore struct {
	// Id of the datastore.
	ID OptString `json:"id"`
	// Name of the datastore.
	Name OptString `json:"name"`
	// URL of the datastore.
	URL OptString `json:"url"`
	// Instance UUID of the vCenter that manages this datastore.
	VcInstanceUuid OptString `json:"vcInstanceUuid"`
	// Name of the vCenter datacenter that this datastore resides.
	VcDatacenterName OptString `json:"vcDatacenterName"`
	// Datastore Type.
	DatastoreType OptString `json:"datastoreType"`
	// Total storage capacity in GB.
	TotalCapacityGB OptFloat64 `json:"totalCapacityGB"`
	// Free storage capacity in GB.
	FreeCapacityGB OptFloat64 `json:"freeCapacityGB"`
	// Number of VMs on the datastore.
	VmCount OptInt32 `json:"vmCount"`
	// List of assigned tags for the datastore.
	Tags []Tag `json:"tags"`
}

// GetID returns the value of ID.
func (s *Datastore) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *Datastore) GetName() OptString {
	return s.Name
}

// GetURL returns the value of URL.
func (s *Datastore) GetURL() OptString {
	return s.URL
}

// GetVcInstanceUuid returns the value of VcInstanceUuid.
func (s *Datastore) GetVcInstanceUuid() OptString {
	return s.VcInstanceUuid
}

// GetVcDatacenterName returns the value of VcDatacenterName.
func (s *Datastore) GetVcDatacenterName() OptString {
	return s.VcDatacenterName
}

// GetDatastoreType returns the value of DatastoreType.
func (s *Datastore) GetDatastoreType() OptString {
	return s.DatastoreType
}

// GetTotalCapacityGB returns the value of TotalCapacityGB.
func (s *Datastore) GetTotalCapacityGB() OptFloat64 {
	return s.TotalCapacityGB
}

// GetFreeCapacityGB returns the value of FreeCapacityGB.
func (s *Datastore) GetFreeCapacityGB() OptFloat64 {
	return s.FreeCapacityGB
}

// GetVmCount returns the value of VmCount.
func (s *Datastore) GetVmCount() OptInt32 {
	return s.VmCount
}

// GetTags returns the value of Tags.
func (s *Datastore) GetTags() []Tag {
	return s.Tags
}

// SetID sets the value of ID.
func (s *Datastore) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Datastore) SetName(val OptString) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *Datastore) SetURL(val OptString) {
	s.URL = val
}

// SetVcInstanceUuid sets the value of VcInstanceUuid.
func (s *Datastore) SetVcInstanceUuid(val OptString) {
	s.VcInstanceUuid = val
}

// SetVcDatacenterName sets the value of VcDatacenterName.
func (s *Datastore) SetVcDatacenterName(val OptString) {
	s.VcDatacenterName = val
}

// SetDatastoreType sets the value of DatastoreType.
func (s *Datastore) SetDatastoreType(val OptString) {
	s.DatastoreType = val
}

// SetTotalCapacityGB sets the value of TotalCapacityGB.
func (s *Datastore) SetTotalCapacityGB(val OptFloat64) {
	s.TotalCapacityGB = val
}

// SetFreeCapacityGB sets the value of FreeCapacityGB.
func (s *Datastore) SetFreeCapacityGB(val OptFloat64) {
	s.FreeCapacityGB = val
}

// SetVmCount sets the value of VmCount.
func (s *Datastore) SetVmCount(val OptInt32) {
	s.VmCount = val
}

// SetTags sets the value of Tags.
func (s *Datastore) SetTags(val []Tag) {
	s.Tags = val
}

// Represents a criterion for querying the datastores.
// Ref: #/components/schemas/DatastoreCriterion
type DatastoreCriterion struct {
	// Name of the criterion for querying datastores.
	Name OptString `json:"name"`
	// Arguments required for a particular criterion.
	Arguments OptDatastoreCriterionArguments `json:"arguments"`
	// Description of the criterion.
	Description OptString `json:"description"`
}

// GetName returns the value of Name.
func (s *DatastoreCriterion) GetName() OptString {
	return s.Name
}

// GetArguments returns the value of Arguments.
func (s *DatastoreCriterion) GetArguments() OptDatastoreCriterionArguments {
	return s.Arguments
}

// GetDescription returns the value of Description.
func (s *DatastoreCriterion) GetDescription() OptString {
	return s.Description
}

// SetName sets the value of Name.
func (s *DatastoreCriterion) SetName(val OptString) {
	s.Name = val
}

// SetArguments sets the value of Arguments.
func (s *DatastoreCriterion) SetArguments(val OptDatastoreCriterionArguments) {
	s.Arguments = val
}

// SetDescription sets the value of Description.
func (s *DatastoreCriterion) SetDescription(val OptString) {
	s.Description = val
}

func (*DatastoreCriterion) getDatastoreCriterion1Res() {}
func (*DatastoreCriterion) getDatastoreCriterionRes()  {}

// Arguments required for a particular criterion.
type DatastoreCriterionArguments map[string]string

func (s *DatastoreCriterionArguments) init() DatastoreCriterionArguments {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Datastore Mount Spec.
// Ref: #/components/schemas/DatastoreMountSpec
type DatastoreMountSpec struct {
	DatastoreSpec DatastoreSpec `json:"datastoreSpec"`
}

// GetDatastoreSpec returns the value of DatastoreSpec.
func (s *DatastoreMountSpec) GetDatastoreSpec() DatastoreSpec {
	return s.DatastoreSpec
}

// SetDatastoreSpec sets the value of DatastoreSpec.
func (s *DatastoreMountSpec) SetDatastoreSpec(val DatastoreSpec) {
	s.DatastoreSpec = val
}

// Represents a datastore query response.
// Ref: #/components/schemas/DatastoreQueryResponse
type DatastoreQueryResponse struct {
	QueryInfo OptQueryInfo     `json:"queryInfo"`
	Result    OptPageDatastore `json:"result"`
}

// GetQueryInfo returns the value of QueryInfo.
func (s *DatastoreQueryResponse) GetQueryInfo() OptQueryInfo {
	return s.QueryInfo
}

// GetResult returns the value of Result.
func (s *DatastoreQueryResponse) GetResult() OptPageDatastore {
	return s.Result
}

// SetQueryInfo sets the value of QueryInfo.
func (s *DatastoreQueryResponse) SetQueryInfo(val OptQueryInfo) {
	s.QueryInfo = val
}

// SetResult sets the value of Result.
func (s *DatastoreQueryResponse) SetResult(val OptPageDatastore) {
	s.Result = val
}

func (*DatastoreQueryResponse) getDatastoreQueryResponse1Res() {}
func (*DatastoreQueryResponse) getDatastoreQueryResponseRes()  {}
func (*DatastoreQueryResponse) postDatastoreQuery1Res()        {}
func (*DatastoreQueryResponse) postDatastoreQueryRes()         {}

// This specification contains cluster storage configuration.
// Ref: #/components/schemas/DatastoreSpec
type DatastoreSpec struct {
	VsanDatastoreSpec OptVsanDatastoreSpec `json:"vsanDatastoreSpec"`
	// Cluster storage configuration for NFS.
	NfsDatastoreSpecs []NfsDatastoreSpec   `json:"nfsDatastoreSpecs"`
	VmfsDatastoreSpec OptVmfsDatastoreSpec `json:"vmfsDatastoreSpec"`
	// Cluster storage configuration for VVOL.
	VvolDatastoreSpecs             []VvolDatastoreSpec               `json:"vvolDatastoreSpecs"`
	VsanRemoteDatastoreClusterSpec OptVsanRemoteDatastoreClusterSpec `json:"vsanRemoteDatastoreClusterSpec"`
}

// GetVsanDatastoreSpec returns the value of VsanDatastoreSpec.
func (s *DatastoreSpec) GetVsanDatastoreSpec() OptVsanDatastoreSpec {
	return s.VsanDatastoreSpec
}

// GetNfsDatastoreSpecs returns the value of NfsDatastoreSpecs.
func (s *DatastoreSpec) GetNfsDatastoreSpecs() []NfsDatastoreSpec {
	return s.NfsDatastoreSpecs
}

// GetVmfsDatastoreSpec returns the value of VmfsDatastoreSpec.
func (s *DatastoreSpec) GetVmfsDatastoreSpec() OptVmfsDatastoreSpec {
	return s.VmfsDatastoreSpec
}

// GetVvolDatastoreSpecs returns the value of VvolDatastoreSpecs.
func (s *DatastoreSpec) GetVvolDatastoreSpecs() []VvolDatastoreSpec {
	return s.VvolDatastoreSpecs
}

// GetVsanRemoteDatastoreClusterSpec returns the value of VsanRemoteDatastoreClusterSpec.
func (s *DatastoreSpec) GetVsanRemoteDatastoreClusterSpec() OptVsanRemoteDatastoreClusterSpec {
	return s.VsanRemoteDatastoreClusterSpec
}

// SetVsanDatastoreSpec sets the value of VsanDatastoreSpec.
func (s *DatastoreSpec) SetVsanDatastoreSpec(val OptVsanDatastoreSpec) {
	s.VsanDatastoreSpec = val
}

// SetNfsDatastoreSpecs sets the value of NfsDatastoreSpecs.
func (s *DatastoreSpec) SetNfsDatastoreSpecs(val []NfsDatastoreSpec) {
	s.NfsDatastoreSpecs = val
}

// SetVmfsDatastoreSpec sets the value of VmfsDatastoreSpec.
func (s *DatastoreSpec) SetVmfsDatastoreSpec(val OptVmfsDatastoreSpec) {
	s.VmfsDatastoreSpec = val
}

// SetVvolDatastoreSpecs sets the value of VvolDatastoreSpecs.
func (s *DatastoreSpec) SetVvolDatastoreSpecs(val []VvolDatastoreSpec) {
	s.VvolDatastoreSpecs = val
}

// SetVsanRemoteDatastoreClusterSpec sets the value of VsanRemoteDatastoreClusterSpec.
func (s *DatastoreSpec) SetVsanRemoteDatastoreClusterSpec(val OptVsanRemoteDatastoreClusterSpec) {
	s.VsanRemoteDatastoreClusterSpec = val
}

type DecommissionHostsAccepted Task

func (*DecommissionHostsAccepted) decommissionHostsRes() {}

type DecommissionHostsInternalServerError Task

func (*DecommissionHostsInternalServerError) decommissionHostsRes() {}

type DeleteALBClusterInternalServerError Error

func (*DeleteALBClusterInternalServerError) deleteALBClusterRes() {}

type DeleteALBClusterNotFound Error

func (*DeleteALBClusterNotFound) deleteALBClusterRes() {}

type DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest Error

func (*DeleteAliasVersionsBySoftwareTypeAndBaseVersionBadRequest) deleteAliasVersionsBySoftwareTypeAndBaseVersionRes() {
}

type DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError Error

func (*DeleteAliasVersionsBySoftwareTypeAndBaseVersionInternalServerError) deleteAliasVersionsBySoftwareTypeAndBaseVersionRes() {
}

// DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent is response for DeleteAliasVersionsBySoftwareTypeAndBaseVersion operation.
type DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent struct{}

func (*DeleteAliasVersionsBySoftwareTypeAndBaseVersionNoContent) deleteAliasVersionsBySoftwareTypeAndBaseVersionRes() {
}

type DeleteBundleBadRequest Error

func (*DeleteBundleBadRequest) deleteBundleRes() {}

type DeleteBundleConflict Error

func (*DeleteBundleConflict) deleteBundleRes() {}

type DeleteBundleInternalServerError Error

func (*DeleteBundleInternalServerError) deleteBundleRes() {}

type DeleteClusterBadRequest Error

func (*DeleteClusterBadRequest) deleteClusterRes() {}

type DeleteClusterInternalServerError Error

func (*DeleteClusterInternalServerError) deleteClusterRes() {}

type DeleteClusterNotFound Error

func (*DeleteClusterNotFound) deleteClusterRes() {}

type DeleteCustomIsoByIdBadRequest Error

func (*DeleteCustomIsoByIdBadRequest) deleteCustomIsoByIdRes() {}

type DeleteCustomIsoByIdInternalServerError Error

func (*DeleteCustomIsoByIdInternalServerError) deleteCustomIsoByIdRes() {}

type DeleteCustomIsoByIdNotFound Error

func (*DeleteCustomIsoByIdNotFound) deleteCustomIsoByIdRes() {}

// DeleteCustomIsoByIdOK is response for DeleteCustomIsoById operation.
type DeleteCustomIsoByIdOK struct{}

func (*DeleteCustomIsoByIdOK) deleteCustomIsoByIdRes() {}

type DeleteDepotSettingsBadRequest Error

func (*DeleteDepotSettingsBadRequest) deleteDepotSettingsRes() {}

type DeleteDepotSettingsInternalServerError Error

func (*DeleteDepotSettingsInternalServerError) deleteDepotSettingsRes() {}

// DeleteDepotSettingsNoContent is response for DeleteDepotSettings operation.
type DeleteDepotSettingsNoContent struct{}

func (*DeleteDepotSettingsNoContent) deleteDepotSettingsRes() {}

type DeleteDomainBadRequest Error

func (*DeleteDomainBadRequest) deleteDomainRes() {}

type DeleteDomainInternalServerError Error

func (*DeleteDomainInternalServerError) deleteDomainRes() {}

type DeleteDomainNotFound Error

func (*DeleteDomainNotFound) deleteDomainRes() {}

type DeleteIpPoolFromNetworkOfNetworkPoolBadRequest Error

func (*DeleteIpPoolFromNetworkOfNetworkPoolBadRequest) deleteIpPoolFromNetworkOfNetworkPoolRes() {}

type DeleteIpPoolFromNetworkOfNetworkPoolInternalServerError Error

func (*DeleteIpPoolFromNetworkOfNetworkPoolInternalServerError) deleteIpPoolFromNetworkOfNetworkPoolRes() {
}

// DeleteIpPoolFromNetworkOfNetworkPoolNoContent is response for DeleteIpPoolFromNetworkOfNetworkPool operation.
type DeleteIpPoolFromNetworkOfNetworkPoolNoContent struct{}

func (*DeleteIpPoolFromNetworkOfNetworkPoolNoContent) deleteIpPoolFromNetworkOfNetworkPoolRes() {}

type DeleteIpPoolFromNetworkOfNetworkPoolNotFound Error

func (*DeleteIpPoolFromNetworkOfNetworkPoolNotFound) deleteIpPoolFromNetworkOfNetworkPoolRes() {}

type DeleteNetworkPoolBadRequest Error

func (*DeleteNetworkPoolBadRequest) deleteNetworkPoolRes() {}

type DeleteNetworkPoolInternalServerError Error

func (*DeleteNetworkPoolInternalServerError) deleteNetworkPoolRes() {}

// DeleteNetworkPoolNoContent is response for DeleteNetworkPool operation.
type DeleteNetworkPoolNoContent struct{}

func (*DeleteNetworkPoolNoContent) deleteNetworkPoolRes() {}

type DeleteNetworkPoolNotFound Error

func (*DeleteNetworkPoolNotFound) deleteNetworkPoolRes() {}

type DeletePersonalityInternalServerError Error

func (*DeletePersonalityInternalServerError) deletePersonalityRes() {}

type DeletePersonalityNotFound Error

func (*DeletePersonalityNotFound) deletePersonalityRes() {}

// DeletePersonalityOK is response for DeletePersonality operation.
type DeletePersonalityOK struct{}

func (*DeletePersonalityOK) deletePersonalityRes() {}

// DeleteReleaseByDomainIDOK is response for DeleteReleaseByDomainID operation.
type DeleteReleaseByDomainIDOK struct{}

func (*DeleteReleaseByDomainIDOK) deleteReleaseByDomainIDRes() {}

// DeleteTrustedCertificateNoContent is response for DeleteTrustedCertificate operation.
type DeleteTrustedCertificateNoContent struct{}

func (*DeleteTrustedCertificateNoContent) deleteTrustedCertificateRes() {}

// DeleteTrustedCertificateNotFound is response for DeleteTrustedCertificate operation.
type DeleteTrustedCertificateNotFound struct{}

func (*DeleteTrustedCertificateNotFound) deleteTrustedCertificateRes() {}

type DeleteVersionAliasBySoftwareTypeBadRequest Error

func (*DeleteVersionAliasBySoftwareTypeBadRequest) deleteVersionAliasBySoftwareTypeRes() {}

type DeleteVersionAliasBySoftwareTypeInternalServerError Error

func (*DeleteVersionAliasBySoftwareTypeInternalServerError) deleteVersionAliasBySoftwareTypeRes() {}

// DeleteVersionAliasBySoftwareTypeNoContent is response for DeleteVersionAliasBySoftwareType operation.
type DeleteVersionAliasBySoftwareTypeNoContent struct{}

func (*DeleteVersionAliasBySoftwareTypeNoContent) deleteVersionAliasBySoftwareTypeRes() {}

type DeployVrslcmBadRequest Error

func (*DeployVrslcmBadRequest) deployVrslcmRes() {}

type DeployVrslcmInternalServerError Error

func (*DeployVrslcmInternalServerError) deployVrslcmRes() {}

type DeployVrslcmMethodNotAllowed Error

func (*DeployVrslcmMethodNotAllowed) deployVrslcmRes() {}

// VMware Depot Account Information.
// Ref: #/components/schemas/DepotAccount
type DepotAccount struct {
	// Depot Username for Access.
	Username string `json:"username"`
	// Depot Password for Access.
	Password string `json:"password"`
	// Depot Status.
	Status OptString `json:"status"`
	// Message explaining depot status.
	Message OptString `json:"message"`
}

// GetUsername returns the value of Username.
func (s *DepotAccount) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *DepotAccount) GetPassword() string {
	return s.Password
}

// GetStatus returns the value of Status.
func (s *DepotAccount) GetStatus() OptString {
	return s.Status
}

// GetMessage returns the value of Message.
func (s *DepotAccount) GetMessage() OptString {
	return s.Message
}

// SetUsername sets the value of Username.
func (s *DepotAccount) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *DepotAccount) SetPassword(val string) {
	s.Password = val
}

// SetStatus sets the value of Status.
func (s *DepotAccount) SetStatus(val OptString) {
	s.Status = val
}

// SetMessage sets the value of Message.
func (s *DepotAccount) SetMessage(val OptString) {
	s.Message = val
}

// Depot Configuration.
// Ref: #/components/schemas/DepotConfiguration
type DepotConfiguration struct {
	// Flag indicating if the depot is in offline mode.
	IsOfflineDepot bool `json:"isOfflineDepot"`
	// IP/Hostname of the depot.
	Hostname string `json:"hostname"`
	// Port of the depot.
	Port int32 `json:"port"`
}

// GetIsOfflineDepot returns the value of IsOfflineDepot.
func (s *DepotConfiguration) GetIsOfflineDepot() bool {
	return s.IsOfflineDepot
}

// GetHostname returns the value of Hostname.
func (s *DepotConfiguration) GetHostname() string {
	return s.Hostname
}

// GetPort returns the value of Port.
func (s *DepotConfiguration) GetPort() int32 {
	return s.Port
}

// SetIsOfflineDepot sets the value of IsOfflineDepot.
func (s *DepotConfiguration) SetIsOfflineDepot(val bool) {
	s.IsOfflineDepot = val
}

// SetHostname sets the value of Hostname.
func (s *DepotConfiguration) SetHostname(val string) {
	s.Hostname = val
}

// SetPort sets the value of Port.
func (s *DepotConfiguration) SetPort(val int32) {
	s.Port = val
}

// VMware Depot Settings. At least one of vmwareAccount, dellEmcSupportAccount or offlineAccount
// value must be provided.
// Ref: #/components/schemas/DepotSettings
type DepotSettings struct {
	VmwareAccount         OptDepotAccount       `json:"vmwareAccount"`
	DellEmcSupportAccount OptDepotAccount       `json:"dellEmcSupportAccount"`
	OfflineAccount        OptDepotAccount       `json:"offlineAccount"`
	DepotConfiguration    OptDepotConfiguration `json:"depotConfiguration"`
}

// GetVmwareAccount returns the value of VmwareAccount.
func (s *DepotSettings) GetVmwareAccount() OptDepotAccount {
	return s.VmwareAccount
}

// GetDellEmcSupportAccount returns the value of DellEmcSupportAccount.
func (s *DepotSettings) GetDellEmcSupportAccount() OptDepotAccount {
	return s.DellEmcSupportAccount
}

// GetOfflineAccount returns the value of OfflineAccount.
func (s *DepotSettings) GetOfflineAccount() OptDepotAccount {
	return s.OfflineAccount
}

// GetDepotConfiguration returns the value of DepotConfiguration.
func (s *DepotSettings) GetDepotConfiguration() OptDepotConfiguration {
	return s.DepotConfiguration
}

// SetVmwareAccount sets the value of VmwareAccount.
func (s *DepotSettings) SetVmwareAccount(val OptDepotAccount) {
	s.VmwareAccount = val
}

// SetDellEmcSupportAccount sets the value of DellEmcSupportAccount.
func (s *DepotSettings) SetDellEmcSupportAccount(val OptDepotAccount) {
	s.DellEmcSupportAccount = val
}

// SetOfflineAccount sets the value of OfflineAccount.
func (s *DepotSettings) SetOfflineAccount(val OptDepotAccount) {
	s.OfflineAccount = val
}

// SetDepotConfiguration sets the value of DepotConfiguration.
func (s *DepotSettings) SetDepotConfiguration(val OptDepotConfiguration) {
	s.DepotConfiguration = val
}

func (*DepotSettings) getDepotSettingsRes()    {}
func (*DepotSettings) updateDepotSettingsRes() {}

// Represents Identity Management pre-check details and user messages.
// Ref: #/components/schemas/details
type Details struct {
	// Precheck response type.
	Type string `json:"type"`
	// User messages for WARNING and FAILURE.
	Message OptString `json:"message"`
}

// GetType returns the value of Type.
func (s *Details) GetType() string {
	return s.Type
}

// GetMessage returns the value of Message.
func (s *Details) GetMessage() OptString {
	return s.Message
}

// SetType sets the value of Type.
func (s *Details) SetType(val string) {
	s.Type = val
}

// SetMessage sets the value of Message.
func (s *Details) SetMessage(val OptString) {
	s.Message = val
}

type DisableLocalAccountInternalServerError ErrorResponse

func (*DisableLocalAccountInternalServerError) disableLocalAccountRes() {}

// DisableLocalAccountNoContent is response for DisableLocalAccount operation.
type DisableLocalAccountNoContent struct{}

func (*DisableLocalAccountNoContent) disableLocalAccountRes() {}

type DisableLocalAccountUnauthorized ErrorResponse

func (*DisableLocalAccountUnauthorized) disableLocalAccountRes() {}

// Information about the assessment run progress.
// Ref: #/components/schemas/DiscoveryProgress
type DiscoveryProgress struct {
	// Progress messages.
	ProgressMessages []string `json:"progressMessages"`
	// Percentage completed.
	PercentageComplete OptInt32 `json:"percentageComplete"`
}

// GetProgressMessages returns the value of ProgressMessages.
func (s *DiscoveryProgress) GetProgressMessages() []string {
	return s.ProgressMessages
}

// GetPercentageComplete returns the value of PercentageComplete.
func (s *DiscoveryProgress) GetPercentageComplete() OptInt32 {
	return s.PercentageComplete
}

// SetProgressMessages sets the value of ProgressMessages.
func (s *DiscoveryProgress) SetProgressMessages(val []string) {
	s.ProgressMessages = val
}

// SetPercentageComplete sets the value of PercentageComplete.
func (s *DiscoveryProgress) SetPercentageComplete(val OptInt32) {
	s.PercentageComplete = val
}

// Represents a disk.
// Ref: #/components/schemas/Disk
type Disk struct {
	// Total capacity of the disk in MB.
	CapacityMB OptFloat64 `json:"capacityMB"`
	// Type of the disk.
	DiskType OptString `json:"diskType"`
	// Hardware manufacturer of the disk.
	Manufacturer OptString `json:"manufacturer"`
	// Hardware model of the disk.
	Model OptString `json:"model"`
}

// GetCapacityMB returns the value of CapacityMB.
func (s *Disk) GetCapacityMB() OptFloat64 {
	return s.CapacityMB
}

// GetDiskType returns the value of DiskType.
func (s *Disk) GetDiskType() OptString {
	return s.DiskType
}

// GetManufacturer returns the value of Manufacturer.
func (s *Disk) GetManufacturer() OptString {
	return s.Manufacturer
}

// GetModel returns the value of Model.
func (s *Disk) GetModel() OptString {
	return s.Model
}

// SetCapacityMB sets the value of CapacityMB.
func (s *Disk) SetCapacityMB(val OptFloat64) {
	s.CapacityMB = val
}

// SetDiskType sets the value of DiskType.
func (s *Disk) SetDiskType(val OptString) {
	s.DiskType = val
}

// SetManufacturer sets the value of Manufacturer.
func (s *Disk) SetManufacturer(val OptString) {
	s.Manufacturer = val
}

// SetModel sets the value of Model.
func (s *Disk) SetModel(val OptString) {
	s.Model = val
}

// DNS Configuration.
// Ref: #/components/schemas/DnsConfiguration
type DnsConfiguration struct {
	// List of DNS servers. A maximum of 2 DNS servers are allowed.
	DnsServers []DnsServer `json:"dnsServers"`
}

// GetDnsServers returns the value of DnsServers.
func (s *DnsConfiguration) GetDnsServers() []DnsServer {
	return s.DnsServers
}

// SetDnsServers sets the value of DnsServers.
func (s *DnsConfiguration) SetDnsServers(val []DnsServer) {
	s.DnsServers = val
}

func (*DnsConfiguration) getDnsConfigurationRes() {}

// DNS server details.
// Ref: #/components/schemas/DnsServer
type DnsServer struct {
	// IP address/FQDN of DNS server.
	IpAddress string `json:"ipAddress"`
	// Is DNS server primary.
	IsPrimary bool `json:"isPrimary"`
}

// GetIpAddress returns the value of IpAddress.
func (s *DnsServer) GetIpAddress() string {
	return s.IpAddress
}

// GetIsPrimary returns the value of IsPrimary.
func (s *DnsServer) GetIsPrimary() bool {
	return s.IsPrimary
}

// SetIpAddress sets the value of IpAddress.
func (s *DnsServer) SetIpAddress(val string) {
	s.IpAddress = val
}

// SetIsPrimary sets the value of IsPrimary.
func (s *DnsServer) SetIsPrimary(val bool) {
	s.IsPrimary = val
}

// Spec contains parameters of Domain Name System.
// Ref: #/components/schemas/DnsSpec
type DnsSpec struct {
	// Tenant Sub domain. Includes the full domain suffix.
	Subdomain string `json:"subdomain"`
	// Tenant domain. Parent tenant domain including TLD suffix. This property is deprecated in favor of
	// subdomain.
	//
	// Deprecated: schema marks this property as deprecated.
	Domain OptString `json:"domain"`
	// Primary nameserver to be configured for vCenter/ESXi's/NSX. Deprecated in favor of 'nameservers'.
	//
	// Deprecated: schema marks this property as deprecated.
	Nameserver OptString `json:"nameserver"`
	// Secondary nameserver to be configured for vCenter/ESXi's/NSX. Deprecated in favor of 'nameservers'.
	//
	// Deprecated: schema marks this property as deprecated.
	SecondaryNameserver OptString `json:"secondaryNameserver"`
	// Nameservers to be configured for vCenter/ESXi's/NSX. The first is the primary nameserver. Maximum
	// allowed is two entries.
	Nameservers []string `json:"nameservers"`
}

// GetSubdomain returns the value of Subdomain.
func (s *DnsSpec) GetSubdomain() string {
	return s.Subdomain
}

// GetDomain returns the value of Domain.
func (s *DnsSpec) GetDomain() OptString {
	return s.Domain
}

// GetNameserver returns the value of Nameserver.
func (s *DnsSpec) GetNameserver() OptString {
	return s.Nameserver
}

// GetSecondaryNameserver returns the value of SecondaryNameserver.
func (s *DnsSpec) GetSecondaryNameserver() OptString {
	return s.SecondaryNameserver
}

// GetNameservers returns the value of Nameservers.
func (s *DnsSpec) GetNameservers() []string {
	return s.Nameservers
}

// SetSubdomain sets the value of Subdomain.
func (s *DnsSpec) SetSubdomain(val string) {
	s.Subdomain = val
}

// SetDomain sets the value of Domain.
func (s *DnsSpec) SetDomain(val OptString) {
	s.Domain = val
}

// SetNameserver sets the value of Nameserver.
func (s *DnsSpec) SetNameserver(val OptString) {
	s.Nameserver = val
}

// SetSecondaryNameserver sets the value of SecondaryNameserver.
func (s *DnsSpec) SetSecondaryNameserver(val OptString) {
	s.SecondaryNameserver = val
}

// SetNameservers sets the value of Nameservers.
func (s *DnsSpec) SetNameservers(val []string) {
	s.Nameservers = val
}

// Represents a domain.
// Ref: #/components/schemas/Domain
type Domain struct {
	// ID of the workload domain.
	ID OptString `json:"id"`
	// Name of the workload domain.
	Name OptString `json:"name"`
	// Organization name of the workload domain.
	OrgName OptString `json:"orgName"`
	// Status of the workload domain.
	Status OptString `json:"status"`
	// Workload domain upgrade state.
	UpgradeState  OptString        `json:"upgradeState"`
	UpgradeStatus OptUpgradeStatus `json:"upgradeStatus"`
	// Type of the workload domain.
	Type OptString `json:"type"`
	// Status that represents the workload domain integration with VMware Aria Automation.
	VraIntegrationStatus OptString `json:"vraIntegrationStatus"`
	// Status that represents the workload domain integration with VMware Aria Operations.
	VropsIntegrationStatus OptString `json:"vropsIntegrationStatus"`
	// Status that represents the workload domain integration with VMware Aria Operations for Logs.
	VrliIntegrationStatus OptString `json:"vrliIntegrationStatus"`
	// List of users owning the workload domain.
	Owners []string `json:"owners"`
	// List of vCenters associated with the workload domain.
	Vcenters []VcenterReference `json:"vcenters"`
	// ID of the SSO domain associated with the workload domain.
	SsoId OptString `json:"ssoId"`
	// Name of the SSO domain associated with the workload domain.
	SsoName OptString `json:"ssoName"`
	// Shows whether the workload domain is joined to the Management domain SSO.
	IsManagementSsoDomain OptBool `json:"isManagementSsoDomain"`
	// List of clusters associated with the workload domain.
	Clusters      []ClusterReference        `json:"clusters"`
	NsxtCluster   OptNsxTClusterReference   `json:"nsxtCluster"`
	LicensingInfo OptLicensingInfoReference `json:"licensingInfo"`
	Capacity      OptCapacity               `json:"capacity"`
	// Deprecated, this list will always be returned empty.
	//
	// Deprecated: schema marks this property as deprecated.
	Tags []Tag `json:"tags"`
	// ELM status of the domain: ISOLATED, IN_TRANSIT, or LINKED.
	ElmStatus OptString `json:"elmStatus"`
	// Lifecycle Management mode of the domain.
	LifecycleManagementMode OptString `json:"lifecycleManagementMode"`
	// Domain network separation status.
	IsNetworkSeparationEnabled OptBool `json:"isNetworkSeparationEnabled"`
	// Domain security status.
	IsSecurityEnabled OptBool `json:"isSecurityEnabled"`
	// Is Primary Domain of NSX.
	IsPrimaryDomainForNsx OptBool `json:"isPrimaryDomainForNsx"`
}

// GetID returns the value of ID.
func (s *Domain) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *Domain) GetName() OptString {
	return s.Name
}

// GetOrgName returns the value of OrgName.
func (s *Domain) GetOrgName() OptString {
	return s.OrgName
}

// GetStatus returns the value of Status.
func (s *Domain) GetStatus() OptString {
	return s.Status
}

// GetUpgradeState returns the value of UpgradeState.
func (s *Domain) GetUpgradeState() OptString {
	return s.UpgradeState
}

// GetUpgradeStatus returns the value of UpgradeStatus.
func (s *Domain) GetUpgradeStatus() OptUpgradeStatus {
	return s.UpgradeStatus
}

// GetType returns the value of Type.
func (s *Domain) GetType() OptString {
	return s.Type
}

// GetVraIntegrationStatus returns the value of VraIntegrationStatus.
func (s *Domain) GetVraIntegrationStatus() OptString {
	return s.VraIntegrationStatus
}

// GetVropsIntegrationStatus returns the value of VropsIntegrationStatus.
func (s *Domain) GetVropsIntegrationStatus() OptString {
	return s.VropsIntegrationStatus
}

// GetVrliIntegrationStatus returns the value of VrliIntegrationStatus.
func (s *Domain) GetVrliIntegrationStatus() OptString {
	return s.VrliIntegrationStatus
}

// GetOwners returns the value of Owners.
func (s *Domain) GetOwners() []string {
	return s.Owners
}

// GetVcenters returns the value of Vcenters.
func (s *Domain) GetVcenters() []VcenterReference {
	return s.Vcenters
}

// GetSsoId returns the value of SsoId.
func (s *Domain) GetSsoId() OptString {
	return s.SsoId
}

// GetSsoName returns the value of SsoName.
func (s *Domain) GetSsoName() OptString {
	return s.SsoName
}

// GetIsManagementSsoDomain returns the value of IsManagementSsoDomain.
func (s *Domain) GetIsManagementSsoDomain() OptBool {
	return s.IsManagementSsoDomain
}

// GetClusters returns the value of Clusters.
func (s *Domain) GetClusters() []ClusterReference {
	return s.Clusters
}

// GetNsxtCluster returns the value of NsxtCluster.
func (s *Domain) GetNsxtCluster() OptNsxTClusterReference {
	return s.NsxtCluster
}

// GetLicensingInfo returns the value of LicensingInfo.
func (s *Domain) GetLicensingInfo() OptLicensingInfoReference {
	return s.LicensingInfo
}

// GetCapacity returns the value of Capacity.
func (s *Domain) GetCapacity() OptCapacity {
	return s.Capacity
}

// GetTags returns the value of Tags.
func (s *Domain) GetTags() []Tag {
	return s.Tags
}

// GetElmStatus returns the value of ElmStatus.
func (s *Domain) GetElmStatus() OptString {
	return s.ElmStatus
}

// GetLifecycleManagementMode returns the value of LifecycleManagementMode.
func (s *Domain) GetLifecycleManagementMode() OptString {
	return s.LifecycleManagementMode
}

// GetIsNetworkSeparationEnabled returns the value of IsNetworkSeparationEnabled.
func (s *Domain) GetIsNetworkSeparationEnabled() OptBool {
	return s.IsNetworkSeparationEnabled
}

// GetIsSecurityEnabled returns the value of IsSecurityEnabled.
func (s *Domain) GetIsSecurityEnabled() OptBool {
	return s.IsSecurityEnabled
}

// GetIsPrimaryDomainForNsx returns the value of IsPrimaryDomainForNsx.
func (s *Domain) GetIsPrimaryDomainForNsx() OptBool {
	return s.IsPrimaryDomainForNsx
}

// SetID sets the value of ID.
func (s *Domain) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Domain) SetName(val OptString) {
	s.Name = val
}

// SetOrgName sets the value of OrgName.
func (s *Domain) SetOrgName(val OptString) {
	s.OrgName = val
}

// SetStatus sets the value of Status.
func (s *Domain) SetStatus(val OptString) {
	s.Status = val
}

// SetUpgradeState sets the value of UpgradeState.
func (s *Domain) SetUpgradeState(val OptString) {
	s.UpgradeState = val
}

// SetUpgradeStatus sets the value of UpgradeStatus.
func (s *Domain) SetUpgradeStatus(val OptUpgradeStatus) {
	s.UpgradeStatus = val
}

// SetType sets the value of Type.
func (s *Domain) SetType(val OptString) {
	s.Type = val
}

// SetVraIntegrationStatus sets the value of VraIntegrationStatus.
func (s *Domain) SetVraIntegrationStatus(val OptString) {
	s.VraIntegrationStatus = val
}

// SetVropsIntegrationStatus sets the value of VropsIntegrationStatus.
func (s *Domain) SetVropsIntegrationStatus(val OptString) {
	s.VropsIntegrationStatus = val
}

// SetVrliIntegrationStatus sets the value of VrliIntegrationStatus.
func (s *Domain) SetVrliIntegrationStatus(val OptString) {
	s.VrliIntegrationStatus = val
}

// SetOwners sets the value of Owners.
func (s *Domain) SetOwners(val []string) {
	s.Owners = val
}

// SetVcenters sets the value of Vcenters.
func (s *Domain) SetVcenters(val []VcenterReference) {
	s.Vcenters = val
}

// SetSsoId sets the value of SsoId.
func (s *Domain) SetSsoId(val OptString) {
	s.SsoId = val
}

// SetSsoName sets the value of SsoName.
func (s *Domain) SetSsoName(val OptString) {
	s.SsoName = val
}

// SetIsManagementSsoDomain sets the value of IsManagementSsoDomain.
func (s *Domain) SetIsManagementSsoDomain(val OptBool) {
	s.IsManagementSsoDomain = val
}

// SetClusters sets the value of Clusters.
func (s *Domain) SetClusters(val []ClusterReference) {
	s.Clusters = val
}

// SetNsxtCluster sets the value of NsxtCluster.
func (s *Domain) SetNsxtCluster(val OptNsxTClusterReference) {
	s.NsxtCluster = val
}

// SetLicensingInfo sets the value of LicensingInfo.
func (s *Domain) SetLicensingInfo(val OptLicensingInfoReference) {
	s.LicensingInfo = val
}

// SetCapacity sets the value of Capacity.
func (s *Domain) SetCapacity(val OptCapacity) {
	s.Capacity = val
}

// SetTags sets the value of Tags.
func (s *Domain) SetTags(val []Tag) {
	s.Tags = val
}

// SetElmStatus sets the value of ElmStatus.
func (s *Domain) SetElmStatus(val OptString) {
	s.ElmStatus = val
}

// SetLifecycleManagementMode sets the value of LifecycleManagementMode.
func (s *Domain) SetLifecycleManagementMode(val OptString) {
	s.LifecycleManagementMode = val
}

// SetIsNetworkSeparationEnabled sets the value of IsNetworkSeparationEnabled.
func (s *Domain) SetIsNetworkSeparationEnabled(val OptBool) {
	s.IsNetworkSeparationEnabled = val
}

// SetIsSecurityEnabled sets the value of IsSecurityEnabled.
func (s *Domain) SetIsSecurityEnabled(val OptBool) {
	s.IsSecurityEnabled = val
}

// SetIsPrimaryDomainForNsx sets the value of IsPrimaryDomainForNsx.
func (s *Domain) SetIsPrimaryDomainForNsx(val OptBool) {
	s.IsPrimaryDomainForNsx = val
}

func (*Domain) getDomainRes() {}

type DomainCreateValidationBadRequest Error

func (*DomainCreateValidationBadRequest) domainCreateValidationRes() {}

type DomainCreateValidationNotFound Error

func (*DomainCreateValidationNotFound) domainCreateValidationRes() {}

// Domain Creation Spec.
// Ref: #/components/schemas/DomainCreationSpec
type DomainCreationSpec struct {
	// Name of the workload domain.
	DomainName OptString `json:"domainName"`
	// Organization name of the workload domain.
	OrgName       OptString        `json:"orgName"`
	VcenterSpec   VcenterSpec      `json:"vcenterSpec"`
	ComputeSpec   ComputeSpec      `json:"computeSpec"`
	NsxTSpec      OptNsxTSpec      `json:"nsxTSpec"`
	SsoDomainSpec OptSsoDomainSpec `json:"ssoDomainSpec"`
	SecuritySpec  OptSecuritySpec  `json:"securitySpec"`
	// Flag that indicates if the deployment should happen without license keys.
	DeployWithoutLicenseKeys OptBool `json:"deployWithoutLicenseKeys"`
}

// GetDomainName returns the value of DomainName.
func (s *DomainCreationSpec) GetDomainName() OptString {
	return s.DomainName
}

// GetOrgName returns the value of OrgName.
func (s *DomainCreationSpec) GetOrgName() OptString {
	return s.OrgName
}

// GetVcenterSpec returns the value of VcenterSpec.
func (s *DomainCreationSpec) GetVcenterSpec() VcenterSpec {
	return s.VcenterSpec
}

// GetComputeSpec returns the value of ComputeSpec.
func (s *DomainCreationSpec) GetComputeSpec() ComputeSpec {
	return s.ComputeSpec
}

// GetNsxTSpec returns the value of NsxTSpec.
func (s *DomainCreationSpec) GetNsxTSpec() OptNsxTSpec {
	return s.NsxTSpec
}

// GetSsoDomainSpec returns the value of SsoDomainSpec.
func (s *DomainCreationSpec) GetSsoDomainSpec() OptSsoDomainSpec {
	return s.SsoDomainSpec
}

// GetSecuritySpec returns the value of SecuritySpec.
func (s *DomainCreationSpec) GetSecuritySpec() OptSecuritySpec {
	return s.SecuritySpec
}

// GetDeployWithoutLicenseKeys returns the value of DeployWithoutLicenseKeys.
func (s *DomainCreationSpec) GetDeployWithoutLicenseKeys() OptBool {
	return s.DeployWithoutLicenseKeys
}

// SetDomainName sets the value of DomainName.
func (s *DomainCreationSpec) SetDomainName(val OptString) {
	s.DomainName = val
}

// SetOrgName sets the value of OrgName.
func (s *DomainCreationSpec) SetOrgName(val OptString) {
	s.OrgName = val
}

// SetVcenterSpec sets the value of VcenterSpec.
func (s *DomainCreationSpec) SetVcenterSpec(val VcenterSpec) {
	s.VcenterSpec = val
}

// SetComputeSpec sets the value of ComputeSpec.
func (s *DomainCreationSpec) SetComputeSpec(val ComputeSpec) {
	s.ComputeSpec = val
}

// SetNsxTSpec sets the value of NsxTSpec.
func (s *DomainCreationSpec) SetNsxTSpec(val OptNsxTSpec) {
	s.NsxTSpec = val
}

// SetSsoDomainSpec sets the value of SsoDomainSpec.
func (s *DomainCreationSpec) SetSsoDomainSpec(val OptSsoDomainSpec) {
	s.SsoDomainSpec = val
}

// SetSecuritySpec sets the value of SecuritySpec.
func (s *DomainCreationSpec) SetSecuritySpec(val OptSecuritySpec) {
	s.SecuritySpec = val
}

// SetDeployWithoutLicenseKeys sets the value of DeployWithoutLicenseKeys.
func (s *DomainCreationSpec) SetDeployWithoutLicenseKeys(val OptBool) {
	s.DeployWithoutLicenseKeys = val
}

// Model for releases with details if applicable to current domain version or not.
// Ref: #/components/schemas/DomainFutureRelease
type DomainFutureRelease struct {
	ReasonNotApplicable OptMessagePack `json:"reasonNotApplicable"`
	// List of Incompatibility details for not applicable.
	ReasonsNotApplicable []MessagePack `json:"reasonsNotApplicable"`
	// List of warning messages for product compatibility.
	Warnings []MessagePack `json:"warnings"`
	// List of AlternativeApplicableSddcManagerVersions.
	AlternativeApplicableSddcManagerVersions []AlternativeApplicableSddcManagerVersion `json:"alternativeApplicableSddcManagerVersions"`
	// Whether bundle is applicable or not.
	ApplicabilityStatus OptString `json:"applicabilityStatus"`
	// Name of the product e.g. "VCF".
	Product string `json:"product"`
	// Version of the release.
	Version string `json:"version"`
	// Minimum compatible VCF version, used to represent compatibility of SDDC Manager and VMware BOM
	// components.
	MinCompatibleVcfVersion string `json:"minCompatibleVcfVersion"`
	// Release description with all major features.
	Description string `json:"description"`
	// Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format.
	ReleaseDate string `json:"releaseDate"`
	// Release bill of materials.
	Bom []ProductVersion `json:"bom"`
	// [Deprecated] Whether bundle is applicable or not.
	//
	// Deprecated: schema marks this property as deprecated.
	IsApplicable OptBool `json:"isApplicable"`
	// [Deprecated] Incompatibility reason for not applicable.
	//
	// Deprecated: schema marks this property as deprecated.
	NotApplicableReason OptString `json:"notApplicableReason"`
	// Release sku specific patch and bill of materials.
	Sku []SkuBomDetails `json:"sku"`
	// Collection of release updates.
	Updates []ReleaseUpdate `json:"updates"`
	// List of patch bundles in this release.
	PatchBundles []PatchBundle `json:"patchBundles"`
	// Release eol information e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601
	// format.
	Eol OptString `json:"eol"`
	// Custom upgrade order. Comma separated list of components in upgrade order. Supported components
	// types: NSX_T_MANAGER, VCENTER, ESX_HOST.
	UpgradeOrder OptString `json:"upgradeOrder"`
}

// GetReasonNotApplicable returns the value of ReasonNotApplicable.
func (s *DomainFutureRelease) GetReasonNotApplicable() OptMessagePack {
	return s.ReasonNotApplicable
}

// GetReasonsNotApplicable returns the value of ReasonsNotApplicable.
func (s *DomainFutureRelease) GetReasonsNotApplicable() []MessagePack {
	return s.ReasonsNotApplicable
}

// GetWarnings returns the value of Warnings.
func (s *DomainFutureRelease) GetWarnings() []MessagePack {
	return s.Warnings
}

// GetAlternativeApplicableSddcManagerVersions returns the value of AlternativeApplicableSddcManagerVersions.
func (s *DomainFutureRelease) GetAlternativeApplicableSddcManagerVersions() []AlternativeApplicableSddcManagerVersion {
	return s.AlternativeApplicableSddcManagerVersions
}

// GetApplicabilityStatus returns the value of ApplicabilityStatus.
func (s *DomainFutureRelease) GetApplicabilityStatus() OptString {
	return s.ApplicabilityStatus
}

// GetProduct returns the value of Product.
func (s *DomainFutureRelease) GetProduct() string {
	return s.Product
}

// GetVersion returns the value of Version.
func (s *DomainFutureRelease) GetVersion() string {
	return s.Version
}

// GetMinCompatibleVcfVersion returns the value of MinCompatibleVcfVersion.
func (s *DomainFutureRelease) GetMinCompatibleVcfVersion() string {
	return s.MinCompatibleVcfVersion
}

// GetDescription returns the value of Description.
func (s *DomainFutureRelease) GetDescription() string {
	return s.Description
}

// GetReleaseDate returns the value of ReleaseDate.
func (s *DomainFutureRelease) GetReleaseDate() string {
	return s.ReleaseDate
}

// GetBom returns the value of Bom.
func (s *DomainFutureRelease) GetBom() []ProductVersion {
	return s.Bom
}

// GetIsApplicable returns the value of IsApplicable.
func (s *DomainFutureRelease) GetIsApplicable() OptBool {
	return s.IsApplicable
}

// GetNotApplicableReason returns the value of NotApplicableReason.
func (s *DomainFutureRelease) GetNotApplicableReason() OptString {
	return s.NotApplicableReason
}

// GetSku returns the value of Sku.
func (s *DomainFutureRelease) GetSku() []SkuBomDetails {
	return s.Sku
}

// GetUpdates returns the value of Updates.
func (s *DomainFutureRelease) GetUpdates() []ReleaseUpdate {
	return s.Updates
}

// GetPatchBundles returns the value of PatchBundles.
func (s *DomainFutureRelease) GetPatchBundles() []PatchBundle {
	return s.PatchBundles
}

// GetEol returns the value of Eol.
func (s *DomainFutureRelease) GetEol() OptString {
	return s.Eol
}

// GetUpgradeOrder returns the value of UpgradeOrder.
func (s *DomainFutureRelease) GetUpgradeOrder() OptString {
	return s.UpgradeOrder
}

// SetReasonNotApplicable sets the value of ReasonNotApplicable.
func (s *DomainFutureRelease) SetReasonNotApplicable(val OptMessagePack) {
	s.ReasonNotApplicable = val
}

// SetReasonsNotApplicable sets the value of ReasonsNotApplicable.
func (s *DomainFutureRelease) SetReasonsNotApplicable(val []MessagePack) {
	s.ReasonsNotApplicable = val
}

// SetWarnings sets the value of Warnings.
func (s *DomainFutureRelease) SetWarnings(val []MessagePack) {
	s.Warnings = val
}

// SetAlternativeApplicableSddcManagerVersions sets the value of AlternativeApplicableSddcManagerVersions.
func (s *DomainFutureRelease) SetAlternativeApplicableSddcManagerVersions(val []AlternativeApplicableSddcManagerVersion) {
	s.AlternativeApplicableSddcManagerVersions = val
}

// SetApplicabilityStatus sets the value of ApplicabilityStatus.
func (s *DomainFutureRelease) SetApplicabilityStatus(val OptString) {
	s.ApplicabilityStatus = val
}

// SetProduct sets the value of Product.
func (s *DomainFutureRelease) SetProduct(val string) {
	s.Product = val
}

// SetVersion sets the value of Version.
func (s *DomainFutureRelease) SetVersion(val string) {
	s.Version = val
}

// SetMinCompatibleVcfVersion sets the value of MinCompatibleVcfVersion.
func (s *DomainFutureRelease) SetMinCompatibleVcfVersion(val string) {
	s.MinCompatibleVcfVersion = val
}

// SetDescription sets the value of Description.
func (s *DomainFutureRelease) SetDescription(val string) {
	s.Description = val
}

// SetReleaseDate sets the value of ReleaseDate.
func (s *DomainFutureRelease) SetReleaseDate(val string) {
	s.ReleaseDate = val
}

// SetBom sets the value of Bom.
func (s *DomainFutureRelease) SetBom(val []ProductVersion) {
	s.Bom = val
}

// SetIsApplicable sets the value of IsApplicable.
func (s *DomainFutureRelease) SetIsApplicable(val OptBool) {
	s.IsApplicable = val
}

// SetNotApplicableReason sets the value of NotApplicableReason.
func (s *DomainFutureRelease) SetNotApplicableReason(val OptString) {
	s.NotApplicableReason = val
}

// SetSku sets the value of Sku.
func (s *DomainFutureRelease) SetSku(val []SkuBomDetails) {
	s.Sku = val
}

// SetUpdates sets the value of Updates.
func (s *DomainFutureRelease) SetUpdates(val []ReleaseUpdate) {
	s.Updates = val
}

// SetPatchBundles sets the value of PatchBundles.
func (s *DomainFutureRelease) SetPatchBundles(val []PatchBundle) {
	s.PatchBundles = val
}

// SetEol sets the value of Eol.
func (s *DomainFutureRelease) SetEol(val OptString) {
	s.Eol = val
}

// SetUpgradeOrder sets the value of UpgradeOrder.
func (s *DomainFutureRelease) SetUpgradeOrder(val OptString) {
	s.UpgradeOrder = val
}

// Information about the assessed domain.
// Ref: #/components/schemas/DomainInfo
type DomainInfo struct {
	// Name of the domain.
	DomainName OptString `json:"domainName"`
	// Type of the domain.
	DomainType OptDomainInfoDomainType `json:"domainType"`
	// Id of the domain.
	DomainId OptString `json:"domainId"`
}

// GetDomainName returns the value of DomainName.
func (s *DomainInfo) GetDomainName() OptString {
	return s.DomainName
}

// GetDomainType returns the value of DomainType.
func (s *DomainInfo) GetDomainType() OptDomainInfoDomainType {
	return s.DomainType
}

// GetDomainId returns the value of DomainId.
func (s *DomainInfo) GetDomainId() OptString {
	return s.DomainId
}

// SetDomainName sets the value of DomainName.
func (s *DomainInfo) SetDomainName(val OptString) {
	s.DomainName = val
}

// SetDomainType sets the value of DomainType.
func (s *DomainInfo) SetDomainType(val OptDomainInfoDomainType) {
	s.DomainType = val
}

// SetDomainId sets the value of DomainId.
func (s *DomainInfo) SetDomainId(val OptString) {
	s.DomainId = val
}

// Type of the domain.
type DomainInfoDomainType string

const (
	DomainInfoDomainTypeMANAGEMENT DomainInfoDomainType = "MANAGEMENT"
	DomainInfoDomainTypeVI         DomainInfoDomainType = "VI"
)

// AllValues returns all DomainInfoDomainType values.
func (DomainInfoDomainType) AllValues() []DomainInfoDomainType {
	return []DomainInfoDomainType{
		DomainInfoDomainTypeMANAGEMENT,
		DomainInfoDomainTypeVI,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DomainInfoDomainType) MarshalText() ([]byte, error) {
	switch s {
	case DomainInfoDomainTypeMANAGEMENT:
		return []byte(s), nil
	case DomainInfoDomainTypeVI:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DomainInfoDomainType) UnmarshalText(data []byte) error {
	switch DomainInfoDomainType(data) {
	case DomainInfoDomainTypeMANAGEMENT:
		*s = DomainInfoDomainTypeMANAGEMENT
		return nil
	case DomainInfoDomainTypeVI:
		*s = DomainInfoDomainTypeVI
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// This specification contains information related to the existing VMware Aria Operations instance
// deployment.
// Ref: #/components/schemas/DomainIntegration
type DomainIntegration struct {
	// The ID of the workload domain.
	DomainId string `json:"domainId"`
	// The association status of the workload domain.
	Status DomainIntegrationStatus `json:"status"`
}

// GetDomainId returns the value of DomainId.
func (s *DomainIntegration) GetDomainId() string {
	return s.DomainId
}

// GetStatus returns the value of Status.
func (s *DomainIntegration) GetStatus() DomainIntegrationStatus {
	return s.Status
}

// SetDomainId sets the value of DomainId.
func (s *DomainIntegration) SetDomainId(val string) {
	s.DomainId = val
}

// SetStatus sets the value of Status.
func (s *DomainIntegration) SetStatus(val DomainIntegrationStatus) {
	s.Status = val
}

// The association status of the workload domain.
type DomainIntegrationStatus string

const (
	DomainIntegrationStatusENABLED  DomainIntegrationStatus = "ENABLED"
	DomainIntegrationStatusDISABLED DomainIntegrationStatus = "DISABLED"
)

// AllValues returns all DomainIntegrationStatus values.
func (DomainIntegrationStatus) AllValues() []DomainIntegrationStatus {
	return []DomainIntegrationStatus{
		DomainIntegrationStatusENABLED,
		DomainIntegrationStatusDISABLED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DomainIntegrationStatus) MarshalText() ([]byte, error) {
	switch s {
	case DomainIntegrationStatusENABLED:
		return []byte(s), nil
	case DomainIntegrationStatusDISABLED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DomainIntegrationStatus) UnmarshalText(data []byte) error {
	switch DomainIntegrationStatus(data) {
	case DomainIntegrationStatusENABLED:
		*s = DomainIntegrationStatusENABLED
		return nil
	case DomainIntegrationStatusDISABLED:
		*s = DomainIntegrationStatusDISABLED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents a domain reference.
// Ref: #/components/schemas/DomainReference
type DomainReference struct {
	// ID of the domain.
	ID string `json:"id"`
	// Name of the domain.
	Name OptString `json:"name"`
	// Type of the domain.
	Type OptString `json:"type"`
}

// GetID returns the value of ID.
func (s *DomainReference) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *DomainReference) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *DomainReference) GetType() OptString {
	return s.Type
}

// SetID sets the value of ID.
func (s *DomainReference) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DomainReference) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *DomainReference) SetType(val OptString) {
	s.Type = val
}

// Target domain VCF version.
// Ref: #/components/schemas/DomainRelease
type DomainRelease struct {
	// Target version.
	TargetVersion OptString `json:"targetVersion"`
	// Target VxRail version.
	TargetVxRailVersion OptString `json:"targetVxRailVersion"`
	// Target SDDC Manager version.
	TargetSddcManagerVersion OptString `json:"targetSddcManagerVersion"`
	// Target product release and patch versions.
	Patches []TargetProductVersion `json:"patches"`
}

// GetTargetVersion returns the value of TargetVersion.
func (s *DomainRelease) GetTargetVersion() OptString {
	return s.TargetVersion
}

// GetTargetVxRailVersion returns the value of TargetVxRailVersion.
func (s *DomainRelease) GetTargetVxRailVersion() OptString {
	return s.TargetVxRailVersion
}

// GetTargetSddcManagerVersion returns the value of TargetSddcManagerVersion.
func (s *DomainRelease) GetTargetSddcManagerVersion() OptString {
	return s.TargetSddcManagerVersion
}

// GetPatches returns the value of Patches.
func (s *DomainRelease) GetPatches() []TargetProductVersion {
	return s.Patches
}

// SetTargetVersion sets the value of TargetVersion.
func (s *DomainRelease) SetTargetVersion(val OptString) {
	s.TargetVersion = val
}

// SetTargetVxRailVersion sets the value of TargetVxRailVersion.
func (s *DomainRelease) SetTargetVxRailVersion(val OptString) {
	s.TargetVxRailVersion = val
}

// SetTargetSddcManagerVersion sets the value of TargetSddcManagerVersion.
func (s *DomainRelease) SetTargetSddcManagerVersion(val OptString) {
	s.TargetSddcManagerVersion = val
}

// SetPatches sets the value of Patches.
func (s *DomainRelease) SetPatches(val []TargetProductVersion) {
	s.Patches = val
}

// Model for domain release view.
// Ref: #/components/schemas/DomainReleaseView
type DomainReleaseView struct {
	// Domain ID.
	DomainId string `json:"domainId"`
	// Target upgrade version of the domain.
	TargetVersion string `json:"targetVersion"`
	// Target VxRail version.
	TargetVxRailVersion OptString `json:"targetVxRailVersion"`
	// Target SDDC Manager version.
	TargetSddcManagerVersion OptString `json:"targetSddcManagerVersion"`
	// Target product release and patch versions.
	Patches []TargetProductVersion `json:"patches"`
	// Identifier for VCF Release vs Customized BOM.
	IsCustomizedBom OptBool `json:"isCustomizedBom"`
}

// GetDomainId returns the value of DomainId.
func (s *DomainReleaseView) GetDomainId() string {
	return s.DomainId
}

// GetTargetVersion returns the value of TargetVersion.
func (s *DomainReleaseView) GetTargetVersion() string {
	return s.TargetVersion
}

// GetTargetVxRailVersion returns the value of TargetVxRailVersion.
func (s *DomainReleaseView) GetTargetVxRailVersion() OptString {
	return s.TargetVxRailVersion
}

// GetTargetSddcManagerVersion returns the value of TargetSddcManagerVersion.
func (s *DomainReleaseView) GetTargetSddcManagerVersion() OptString {
	return s.TargetSddcManagerVersion
}

// GetPatches returns the value of Patches.
func (s *DomainReleaseView) GetPatches() []TargetProductVersion {
	return s.Patches
}

// GetIsCustomizedBom returns the value of IsCustomizedBom.
func (s *DomainReleaseView) GetIsCustomizedBom() OptBool {
	return s.IsCustomizedBom
}

// SetDomainId sets the value of DomainId.
func (s *DomainReleaseView) SetDomainId(val string) {
	s.DomainId = val
}

// SetTargetVersion sets the value of TargetVersion.
func (s *DomainReleaseView) SetTargetVersion(val string) {
	s.TargetVersion = val
}

// SetTargetVxRailVersion sets the value of TargetVxRailVersion.
func (s *DomainReleaseView) SetTargetVxRailVersion(val OptString) {
	s.TargetVxRailVersion = val
}

// SetTargetSddcManagerVersion sets the value of TargetSddcManagerVersion.
func (s *DomainReleaseView) SetTargetSddcManagerVersion(val OptString) {
	s.TargetSddcManagerVersion = val
}

// SetPatches sets the value of Patches.
func (s *DomainReleaseView) SetPatches(val []TargetProductVersion) {
	s.Patches = val
}

// SetIsCustomizedBom sets the value of IsCustomizedBom.
func (s *DomainReleaseView) SetIsCustomizedBom(val OptBool) {
	s.IsCustomizedBom = val
}

func (*DomainReleaseView) getReleaseByDomainRes() {}

// Domain Update Data.
// Ref: #/components/schemas/DomainUpdateSpec
type DomainUpdateSpec struct {
	ClusterSpec OptClusterSpec `json:"clusterSpec"`
	NsxTSpec    OptNsxTSpec    `json:"nsxTSpec"`
	// Enable deletion for the domain.
	MarkForDeletion OptBool `json:"markForDeletion"`
	// Name of the domain.
	Name          OptString        `json:"name"`
	IsolationSpec OptIsolationSpec `json:"isolationSpec"`
}

// GetClusterSpec returns the value of ClusterSpec.
func (s *DomainUpdateSpec) GetClusterSpec() OptClusterSpec {
	return s.ClusterSpec
}

// GetNsxTSpec returns the value of NsxTSpec.
func (s *DomainUpdateSpec) GetNsxTSpec() OptNsxTSpec {
	return s.NsxTSpec
}

// GetMarkForDeletion returns the value of MarkForDeletion.
func (s *DomainUpdateSpec) GetMarkForDeletion() OptBool {
	return s.MarkForDeletion
}

// GetName returns the value of Name.
func (s *DomainUpdateSpec) GetName() OptString {
	return s.Name
}

// GetIsolationSpec returns the value of IsolationSpec.
func (s *DomainUpdateSpec) GetIsolationSpec() OptIsolationSpec {
	return s.IsolationSpec
}

// SetClusterSpec sets the value of ClusterSpec.
func (s *DomainUpdateSpec) SetClusterSpec(val OptClusterSpec) {
	s.ClusterSpec = val
}

// SetNsxTSpec sets the value of NsxTSpec.
func (s *DomainUpdateSpec) SetNsxTSpec(val OptNsxTSpec) {
	s.NsxTSpec = val
}

// SetMarkForDeletion sets the value of MarkForDeletion.
func (s *DomainUpdateSpec) SetMarkForDeletion(val OptBool) {
	s.MarkForDeletion = val
}

// SetName sets the value of Name.
func (s *DomainUpdateSpec) SetName(val OptString) {
	s.Name = val
}

// SetIsolationSpec sets the value of IsolationSpec.
func (s *DomainUpdateSpec) SetIsolationSpec(val OptIsolationSpec) {
	s.IsolationSpec = val
}

// Domains and Clusters for SOS operation.
// Ref: #/components/schemas/Domains
type Domains struct {
	// Domain name.
	DomainName OptString `json:"domainName"`
	// Clusters for the operation.
	ClusterNames []string `json:"clusterNames"`
}

// GetDomainName returns the value of DomainName.
func (s *Domains) GetDomainName() OptString {
	return s.DomainName
}

// GetClusterNames returns the value of ClusterNames.
func (s *Domains) GetClusterNames() []string {
	return s.ClusterNames
}

// SetDomainName sets the value of DomainName.
func (s *Domains) SetDomainName(val OptString) {
	s.DomainName = val
}

// SetClusterNames sets the value of ClusterNames.
func (s *Domains) SetClusterNames(val []string) {
	s.ClusterNames = val
}

type DownloadCSRInternalServerError Error

func (*DownloadCSRInternalServerError) downloadCSRRes() {}

type DownloadCSRNotFound Error

func (*DownloadCSRNotFound) downloadCSRRes() {}

type DownloadCSROKApplicationJSON []byte

func (*DownloadCSROKApplicationJSON) downloadCSRRes() {}

// DownloadVsanHclAccepted is response for DownloadVsanHcl operation.
type DownloadVsanHclAccepted struct{}

func (*DownloadVsanHclAccepted) downloadVsanHclRes() {}

type DownloadVsanHclBadRequest Error

func (*DownloadVsanHclBadRequest) downloadVsanHclRes() {}

type DownloadVsanHclInternalServerError Error

func (*DownloadVsanHclInternalServerError) downloadVsanHclRes() {}

// Spec contains parameters for DVS.
// Ref: #/components/schemas/DvsSpec
type DvsSpec struct {
	// VSphere Distributed Switch Name. It will be auto-generated if blank.
	DvsName OptString `json:"dvsName"`
	// Vmnics to be attached to the DVS.
	// This property is deprecated in favor of vmnicsToUplinks fields.
	//
	// Deprecated: schema marks this property as deprecated.
	Vmnics []string `json:"vmnics"`
	// Types of networks in this Distributed vSphere Switch. One among: VSAN, VMOTION, MANAGEMENT,
	// VM_MANAGEMENT or any custom network types defined in networkSpecs.
	Networks []string `json:"networks"`
	// List of Network IO Control Specification for networks.
	NiocSpecs []NiocSpec `json:"niocSpecs"`
	// Distributed vSphere Switch MTU (default value is 9000).
	Mtu OptInt32 `json:"mtu"`
	// Flag indicating whether the Distributed vSphere Switch is used by NSX.
	// This property is deprecated in favor of nsxtSwitchConfig field.
	//
	// Deprecated: schema marks this property as deprecated.
	IsUsedByNsxt     OptBool             `json:"isUsedByNsxt"`
	NsxtSwitchConfig OptNsxtSwitchConfig `json:"nsxtSwitchConfig"`
	// List of vmnic to uplink mapping.
	VmnicsToUplinks []VmnicToUplink `json:"vmnicsToUplinks"`
	// The teaming policies to be associated with the uplink profile in NSX.
	NsxTeamings []TeamingSpec `json:"nsxTeamings"`
}

// GetDvsName returns the value of DvsName.
func (s *DvsSpec) GetDvsName() OptString {
	return s.DvsName
}

// GetVmnics returns the value of Vmnics.
func (s *DvsSpec) GetVmnics() []string {
	return s.Vmnics
}

// GetNetworks returns the value of Networks.
func (s *DvsSpec) GetNetworks() []string {
	return s.Networks
}

// GetNiocSpecs returns the value of NiocSpecs.
func (s *DvsSpec) GetNiocSpecs() []NiocSpec {
	return s.NiocSpecs
}

// GetMtu returns the value of Mtu.
func (s *DvsSpec) GetMtu() OptInt32 {
	return s.Mtu
}

// GetIsUsedByNsxt returns the value of IsUsedByNsxt.
func (s *DvsSpec) GetIsUsedByNsxt() OptBool {
	return s.IsUsedByNsxt
}

// GetNsxtSwitchConfig returns the value of NsxtSwitchConfig.
func (s *DvsSpec) GetNsxtSwitchConfig() OptNsxtSwitchConfig {
	return s.NsxtSwitchConfig
}

// GetVmnicsToUplinks returns the value of VmnicsToUplinks.
func (s *DvsSpec) GetVmnicsToUplinks() []VmnicToUplink {
	return s.VmnicsToUplinks
}

// GetNsxTeamings returns the value of NsxTeamings.
func (s *DvsSpec) GetNsxTeamings() []TeamingSpec {
	return s.NsxTeamings
}

// SetDvsName sets the value of DvsName.
func (s *DvsSpec) SetDvsName(val OptString) {
	s.DvsName = val
}

// SetVmnics sets the value of Vmnics.
func (s *DvsSpec) SetVmnics(val []string) {
	s.Vmnics = val
}

// SetNetworks sets the value of Networks.
func (s *DvsSpec) SetNetworks(val []string) {
	s.Networks = val
}

// SetNiocSpecs sets the value of NiocSpecs.
func (s *DvsSpec) SetNiocSpecs(val []NiocSpec) {
	s.NiocSpecs = val
}

// SetMtu sets the value of Mtu.
func (s *DvsSpec) SetMtu(val OptInt32) {
	s.Mtu = val
}

// SetIsUsedByNsxt sets the value of IsUsedByNsxt.
func (s *DvsSpec) SetIsUsedByNsxt(val OptBool) {
	s.IsUsedByNsxt = val
}

// SetNsxtSwitchConfig sets the value of NsxtSwitchConfig.
func (s *DvsSpec) SetNsxtSwitchConfig(val OptNsxtSwitchConfig) {
	s.NsxtSwitchConfig = val
}

// SetVmnicsToUplinks sets the value of VmnicsToUplinks.
func (s *DvsSpec) SetVmnicsToUplinks(val []VmnicToUplink) {
	s.VmnicsToUplinks = val
}

// SetNsxTeamings sets the value of NsxTeamings.
func (s *DvsSpec) SetNsxTeamings(val []TeamingSpec) {
	s.NsxTeamings = val
}

// EdgeCluster representation.
// Ref: #/components/schemas/EdgeCluster
type EdgeCluster struct {
	// ID of the egde cluster.
	ID OptString `json:"id"`
	// Name of the edge cluster.
	Name OptString `json:"name"`
	// List of clusters associated with the edge cluster.
	Clusters []ClusterReference `json:"clusters"`
	// NSX Edge cluster status.
	Status      OptString               `json:"status"`
	NsxtCluster OptNsxTClusterReference `json:"nsxtCluster"`
	// List of edge nodes associated with the edge cluster.
	EdgeNodes []EdgeNodeReference `json:"edgeNodes"`
	// Whether or not this edge cluster's tier 0 is managed by system.
	IsTier0ManagedBySystem OptBool `json:"isTier0ManagedBySystem"`
	// Whether or not host/TEP network checks were done for this edge cluster.
	SkipTepRoutabilityCheck OptBool `json:"skipTepRoutabilityCheck"`
}

// GetID returns the value of ID.
func (s *EdgeCluster) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *EdgeCluster) GetName() OptString {
	return s.Name
}

// GetClusters returns the value of Clusters.
func (s *EdgeCluster) GetClusters() []ClusterReference {
	return s.Clusters
}

// GetStatus returns the value of Status.
func (s *EdgeCluster) GetStatus() OptString {
	return s.Status
}

// GetNsxtCluster returns the value of NsxtCluster.
func (s *EdgeCluster) GetNsxtCluster() OptNsxTClusterReference {
	return s.NsxtCluster
}

// GetEdgeNodes returns the value of EdgeNodes.
func (s *EdgeCluster) GetEdgeNodes() []EdgeNodeReference {
	return s.EdgeNodes
}

// GetIsTier0ManagedBySystem returns the value of IsTier0ManagedBySystem.
func (s *EdgeCluster) GetIsTier0ManagedBySystem() OptBool {
	return s.IsTier0ManagedBySystem
}

// GetSkipTepRoutabilityCheck returns the value of SkipTepRoutabilityCheck.
func (s *EdgeCluster) GetSkipTepRoutabilityCheck() OptBool {
	return s.SkipTepRoutabilityCheck
}

// SetID sets the value of ID.
func (s *EdgeCluster) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *EdgeCluster) SetName(val OptString) {
	s.Name = val
}

// SetClusters sets the value of Clusters.
func (s *EdgeCluster) SetClusters(val []ClusterReference) {
	s.Clusters = val
}

// SetStatus sets the value of Status.
func (s *EdgeCluster) SetStatus(val OptString) {
	s.Status = val
}

// SetNsxtCluster sets the value of NsxtCluster.
func (s *EdgeCluster) SetNsxtCluster(val OptNsxTClusterReference) {
	s.NsxtCluster = val
}

// SetEdgeNodes sets the value of EdgeNodes.
func (s *EdgeCluster) SetEdgeNodes(val []EdgeNodeReference) {
	s.EdgeNodes = val
}

// SetIsTier0ManagedBySystem sets the value of IsTier0ManagedBySystem.
func (s *EdgeCluster) SetIsTier0ManagedBySystem(val OptBool) {
	s.IsTier0ManagedBySystem = val
}

// SetSkipTepRoutabilityCheck sets the value of SkipTepRoutabilityCheck.
func (s *EdgeCluster) SetSkipTepRoutabilityCheck(val OptBool) {
	s.SkipTepRoutabilityCheck = val
}

func (*EdgeCluster) getEdgeClusterRes() {}

// NSX Edge cluster creation data to be validated.
// Ref: #/components/schemas/EdgeClusterCreationSpec
type EdgeClusterCreationSpec struct {
	// Name for the edge cluster.
	EdgeClusterName string `json:"edgeClusterName"`
	// Type of edge cluster.
	EdgeClusterType string `json:"edgeClusterType"`
	// Edge Password for root user.
	EdgeRootPassword string `json:"edgeRootPassword"`
	// Edge Password for admin user.
	EdgeAdminPassword string `json:"edgeAdminPassword"`
	// Edge Password for audit.
	EdgeAuditPassword string `json:"edgeAuditPassword"`
	// Edge Form Factor.
	EdgeFormFactor string `json:"edgeFormFactor"`
	// High-availability Mode for Tier-0.
	Tier0ServicesHighAvailability OptString `json:"tier0ServicesHighAvailability"`
	// Maximum transmission unit.
	Mtu int32 `json:"mtu"`
	// ASN to be used for the edge cluster.
	Asn OptInt64 `json:"asn"`
	// Specifications for Edge Node. Number of Edge Nodes cannot exceed 8 if HA mode is ACTIVE-ACTIVE and
	// can not exceed 2 if HA mode is ACTIVE-STANDBY.
	EdgeNodeSpecs []NsxTEdgeNodeSpec `json:"edgeNodeSpecs"`
	// Specifications for new NSX IP address pool(s).
	NewIpAddressPoolSpecs []IpAddressPoolSpec `json:"newIpAddressPoolSpecs"`
	// Tier 0 Routing type -eg eBGP, Static.
	Tier0RoutingType OptString `json:"tier0RoutingType"`
	// Name for the Tier-0.
	Tier0Name OptString `json:"tier0Name"`
	// Name for the Tier-1.
	Tier1Name OptString `json:"tier1Name"`
	// Select whether Tier-1 being created per this spec is hosted on the new Edge cluster or not
	// (default value is false, meaning hosted).
	Tier1Unhosted OptBool `json:"tier1Unhosted"`
	// Type of edge cluster profile.
	EdgeClusterProfileType string                     `json:"edgeClusterProfileType"`
	EdgeClusterProfileSpec NsxTEdgeClusterProfileSpec `json:"edgeClusterProfileSpec"`
	// Set to true to bypass normal ICMP-based check of Edge TEP / host TEP routability (default is false,
	//  meaning do check).
	SkipTepRoutabilityCheck OptBool `json:"skipTepRoutabilityCheck"`
	// Transit subnet addresses in CIDR notation that are used to assign addresses to logical links
	// connecting Tier-0 and Tier-1s.
	TransitSubnets []string `json:"transitSubnets"`
	// Subnet addresses in CIDR notation that are used to assign addresses to logical links connecting
	// service routers and distributed routers.
	InternalTransitSubnets []string `json:"internalTransitSubnets"`
}

// GetEdgeClusterName returns the value of EdgeClusterName.
func (s *EdgeClusterCreationSpec) GetEdgeClusterName() string {
	return s.EdgeClusterName
}

// GetEdgeClusterType returns the value of EdgeClusterType.
func (s *EdgeClusterCreationSpec) GetEdgeClusterType() string {
	return s.EdgeClusterType
}

// GetEdgeRootPassword returns the value of EdgeRootPassword.
func (s *EdgeClusterCreationSpec) GetEdgeRootPassword() string {
	return s.EdgeRootPassword
}

// GetEdgeAdminPassword returns the value of EdgeAdminPassword.
func (s *EdgeClusterCreationSpec) GetEdgeAdminPassword() string {
	return s.EdgeAdminPassword
}

// GetEdgeAuditPassword returns the value of EdgeAuditPassword.
func (s *EdgeClusterCreationSpec) GetEdgeAuditPassword() string {
	return s.EdgeAuditPassword
}

// GetEdgeFormFactor returns the value of EdgeFormFactor.
func (s *EdgeClusterCreationSpec) GetEdgeFormFactor() string {
	return s.EdgeFormFactor
}

// GetTier0ServicesHighAvailability returns the value of Tier0ServicesHighAvailability.
func (s *EdgeClusterCreationSpec) GetTier0ServicesHighAvailability() OptString {
	return s.Tier0ServicesHighAvailability
}

// GetMtu returns the value of Mtu.
func (s *EdgeClusterCreationSpec) GetMtu() int32 {
	return s.Mtu
}

// GetAsn returns the value of Asn.
func (s *EdgeClusterCreationSpec) GetAsn() OptInt64 {
	return s.Asn
}

// GetEdgeNodeSpecs returns the value of EdgeNodeSpecs.
func (s *EdgeClusterCreationSpec) GetEdgeNodeSpecs() []NsxTEdgeNodeSpec {
	return s.EdgeNodeSpecs
}

// GetNewIpAddressPoolSpecs returns the value of NewIpAddressPoolSpecs.
func (s *EdgeClusterCreationSpec) GetNewIpAddressPoolSpecs() []IpAddressPoolSpec {
	return s.NewIpAddressPoolSpecs
}

// GetTier0RoutingType returns the value of Tier0RoutingType.
func (s *EdgeClusterCreationSpec) GetTier0RoutingType() OptString {
	return s.Tier0RoutingType
}

// GetTier0Name returns the value of Tier0Name.
func (s *EdgeClusterCreationSpec) GetTier0Name() OptString {
	return s.Tier0Name
}

// GetTier1Name returns the value of Tier1Name.
func (s *EdgeClusterCreationSpec) GetTier1Name() OptString {
	return s.Tier1Name
}

// GetTier1Unhosted returns the value of Tier1Unhosted.
func (s *EdgeClusterCreationSpec) GetTier1Unhosted() OptBool {
	return s.Tier1Unhosted
}

// GetEdgeClusterProfileType returns the value of EdgeClusterProfileType.
func (s *EdgeClusterCreationSpec) GetEdgeClusterProfileType() string {
	return s.EdgeClusterProfileType
}

// GetEdgeClusterProfileSpec returns the value of EdgeClusterProfileSpec.
func (s *EdgeClusterCreationSpec) GetEdgeClusterProfileSpec() NsxTEdgeClusterProfileSpec {
	return s.EdgeClusterProfileSpec
}

// GetSkipTepRoutabilityCheck returns the value of SkipTepRoutabilityCheck.
func (s *EdgeClusterCreationSpec) GetSkipTepRoutabilityCheck() OptBool {
	return s.SkipTepRoutabilityCheck
}

// GetTransitSubnets returns the value of TransitSubnets.
func (s *EdgeClusterCreationSpec) GetTransitSubnets() []string {
	return s.TransitSubnets
}

// GetInternalTransitSubnets returns the value of InternalTransitSubnets.
func (s *EdgeClusterCreationSpec) GetInternalTransitSubnets() []string {
	return s.InternalTransitSubnets
}

// SetEdgeClusterName sets the value of EdgeClusterName.
func (s *EdgeClusterCreationSpec) SetEdgeClusterName(val string) {
	s.EdgeClusterName = val
}

// SetEdgeClusterType sets the value of EdgeClusterType.
func (s *EdgeClusterCreationSpec) SetEdgeClusterType(val string) {
	s.EdgeClusterType = val
}

// SetEdgeRootPassword sets the value of EdgeRootPassword.
func (s *EdgeClusterCreationSpec) SetEdgeRootPassword(val string) {
	s.EdgeRootPassword = val
}

// SetEdgeAdminPassword sets the value of EdgeAdminPassword.
func (s *EdgeClusterCreationSpec) SetEdgeAdminPassword(val string) {
	s.EdgeAdminPassword = val
}

// SetEdgeAuditPassword sets the value of EdgeAuditPassword.
func (s *EdgeClusterCreationSpec) SetEdgeAuditPassword(val string) {
	s.EdgeAuditPassword = val
}

// SetEdgeFormFactor sets the value of EdgeFormFactor.
func (s *EdgeClusterCreationSpec) SetEdgeFormFactor(val string) {
	s.EdgeFormFactor = val
}

// SetTier0ServicesHighAvailability sets the value of Tier0ServicesHighAvailability.
func (s *EdgeClusterCreationSpec) SetTier0ServicesHighAvailability(val OptString) {
	s.Tier0ServicesHighAvailability = val
}

// SetMtu sets the value of Mtu.
func (s *EdgeClusterCreationSpec) SetMtu(val int32) {
	s.Mtu = val
}

// SetAsn sets the value of Asn.
func (s *EdgeClusterCreationSpec) SetAsn(val OptInt64) {
	s.Asn = val
}

// SetEdgeNodeSpecs sets the value of EdgeNodeSpecs.
func (s *EdgeClusterCreationSpec) SetEdgeNodeSpecs(val []NsxTEdgeNodeSpec) {
	s.EdgeNodeSpecs = val
}

// SetNewIpAddressPoolSpecs sets the value of NewIpAddressPoolSpecs.
func (s *EdgeClusterCreationSpec) SetNewIpAddressPoolSpecs(val []IpAddressPoolSpec) {
	s.NewIpAddressPoolSpecs = val
}

// SetTier0RoutingType sets the value of Tier0RoutingType.
func (s *EdgeClusterCreationSpec) SetTier0RoutingType(val OptString) {
	s.Tier0RoutingType = val
}

// SetTier0Name sets the value of Tier0Name.
func (s *EdgeClusterCreationSpec) SetTier0Name(val OptString) {
	s.Tier0Name = val
}

// SetTier1Name sets the value of Tier1Name.
func (s *EdgeClusterCreationSpec) SetTier1Name(val OptString) {
	s.Tier1Name = val
}

// SetTier1Unhosted sets the value of Tier1Unhosted.
func (s *EdgeClusterCreationSpec) SetTier1Unhosted(val OptBool) {
	s.Tier1Unhosted = val
}

// SetEdgeClusterProfileType sets the value of EdgeClusterProfileType.
func (s *EdgeClusterCreationSpec) SetEdgeClusterProfileType(val string) {
	s.EdgeClusterProfileType = val
}

// SetEdgeClusterProfileSpec sets the value of EdgeClusterProfileSpec.
func (s *EdgeClusterCreationSpec) SetEdgeClusterProfileSpec(val NsxTEdgeClusterProfileSpec) {
	s.EdgeClusterProfileSpec = val
}

// SetSkipTepRoutabilityCheck sets the value of SkipTepRoutabilityCheck.
func (s *EdgeClusterCreationSpec) SetSkipTepRoutabilityCheck(val OptBool) {
	s.SkipTepRoutabilityCheck = val
}

// SetTransitSubnets sets the value of TransitSubnets.
func (s *EdgeClusterCreationSpec) SetTransitSubnets(val []string) {
	s.TransitSubnets = val
}

// SetInternalTransitSubnets sets the value of InternalTransitSubnets.
func (s *EdgeClusterCreationSpec) SetInternalTransitSubnets(val []string) {
	s.InternalTransitSubnets = val
}

// This specification contains the parameters required to expand a NSX edge cluster.
// Ref: #/components/schemas/EdgeClusterExpansionSpec
type EdgeClusterExpansionSpec struct {
	// Edge Password for root user.
	EdgeNodeRootPassword string `json:"edgeNodeRootPassword"`
	// Edge Password for admin user.
	EdgeNodeAdminPassword string `json:"edgeNodeAdminPassword"`
	// Edge Password for audit user.
	EdgeNodeAuditPassword string `json:"edgeNodeAuditPassword"`
	// Set to true to bypass normal ICMP-based check of Edge TEP / host TEP routability (default is false,
	//  meaning do check).
	SkipTepRoutabilityCheck OptBool `json:"skipTepRoutabilityCheck"`
	// Specifications for Edge Node.
	EdgeNodeSpecs []NsxTEdgeNodeSpec `json:"edgeNodeSpecs"`
	// Specifications for new NSX IP address pool(s).
	NewIpAddressPoolSpecs []IpAddressPoolSpec `json:"newIpAddressPoolSpecs"`
	// List of names for the additional Tier-1(s) to be created during expansion.
	AdditionalTier1Names []string `json:"additionalTier1Names"`
	// Select whether all Tier-1(s) being created per this spec are hosted on the Edge cluster or not
	// (default is false, meaning hosted).
	Tier1Unhosted OptBool `json:"tier1Unhosted"`
}

// GetEdgeNodeRootPassword returns the value of EdgeNodeRootPassword.
func (s *EdgeClusterExpansionSpec) GetEdgeNodeRootPassword() string {
	return s.EdgeNodeRootPassword
}

// GetEdgeNodeAdminPassword returns the value of EdgeNodeAdminPassword.
func (s *EdgeClusterExpansionSpec) GetEdgeNodeAdminPassword() string {
	return s.EdgeNodeAdminPassword
}

// GetEdgeNodeAuditPassword returns the value of EdgeNodeAuditPassword.
func (s *EdgeClusterExpansionSpec) GetEdgeNodeAuditPassword() string {
	return s.EdgeNodeAuditPassword
}

// GetSkipTepRoutabilityCheck returns the value of SkipTepRoutabilityCheck.
func (s *EdgeClusterExpansionSpec) GetSkipTepRoutabilityCheck() OptBool {
	return s.SkipTepRoutabilityCheck
}

// GetEdgeNodeSpecs returns the value of EdgeNodeSpecs.
func (s *EdgeClusterExpansionSpec) GetEdgeNodeSpecs() []NsxTEdgeNodeSpec {
	return s.EdgeNodeSpecs
}

// GetNewIpAddressPoolSpecs returns the value of NewIpAddressPoolSpecs.
func (s *EdgeClusterExpansionSpec) GetNewIpAddressPoolSpecs() []IpAddressPoolSpec {
	return s.NewIpAddressPoolSpecs
}

// GetAdditionalTier1Names returns the value of AdditionalTier1Names.
func (s *EdgeClusterExpansionSpec) GetAdditionalTier1Names() []string {
	return s.AdditionalTier1Names
}

// GetTier1Unhosted returns the value of Tier1Unhosted.
func (s *EdgeClusterExpansionSpec) GetTier1Unhosted() OptBool {
	return s.Tier1Unhosted
}

// SetEdgeNodeRootPassword sets the value of EdgeNodeRootPassword.
func (s *EdgeClusterExpansionSpec) SetEdgeNodeRootPassword(val string) {
	s.EdgeNodeRootPassword = val
}

// SetEdgeNodeAdminPassword sets the value of EdgeNodeAdminPassword.
func (s *EdgeClusterExpansionSpec) SetEdgeNodeAdminPassword(val string) {
	s.EdgeNodeAdminPassword = val
}

// SetEdgeNodeAuditPassword sets the value of EdgeNodeAuditPassword.
func (s *EdgeClusterExpansionSpec) SetEdgeNodeAuditPassword(val string) {
	s.EdgeNodeAuditPassword = val
}

// SetSkipTepRoutabilityCheck sets the value of SkipTepRoutabilityCheck.
func (s *EdgeClusterExpansionSpec) SetSkipTepRoutabilityCheck(val OptBool) {
	s.SkipTepRoutabilityCheck = val
}

// SetEdgeNodeSpecs sets the value of EdgeNodeSpecs.
func (s *EdgeClusterExpansionSpec) SetEdgeNodeSpecs(val []NsxTEdgeNodeSpec) {
	s.EdgeNodeSpecs = val
}

// SetNewIpAddressPoolSpecs sets the value of NewIpAddressPoolSpecs.
func (s *EdgeClusterExpansionSpec) SetNewIpAddressPoolSpecs(val []IpAddressPoolSpec) {
	s.NewIpAddressPoolSpecs = val
}

// SetAdditionalTier1Names sets the value of AdditionalTier1Names.
func (s *EdgeClusterExpansionSpec) SetAdditionalTier1Names(val []string) {
	s.AdditionalTier1Names = val
}

// SetTier1Unhosted sets the value of Tier1Unhosted.
func (s *EdgeClusterExpansionSpec) SetTier1Unhosted(val OptBool) {
	s.Tier1Unhosted = val
}

// Represents a criterion for querying the Edge Cluster.
// Ref: #/components/schemas/EdgeClusterNsxtEntityCriterion
type EdgeClusterNsxtEntityCriterion struct {
	// Name of the criterion.
	Name OptString `json:"name"`
	// Arguments required for a particular criterion.
	Arguments OptEdgeClusterNsxtEntityCriterionArguments `json:"arguments"`
	// Description of the criterion.
	Description OptString `json:"description"`
}

// GetName returns the value of Name.
func (s *EdgeClusterNsxtEntityCriterion) GetName() OptString {
	return s.Name
}

// GetArguments returns the value of Arguments.
func (s *EdgeClusterNsxtEntityCriterion) GetArguments() OptEdgeClusterNsxtEntityCriterionArguments {
	return s.Arguments
}

// GetDescription returns the value of Description.
func (s *EdgeClusterNsxtEntityCriterion) GetDescription() OptString {
	return s.Description
}

// SetName sets the value of Name.
func (s *EdgeClusterNsxtEntityCriterion) SetName(val OptString) {
	s.Name = val
}

// SetArguments sets the value of Arguments.
func (s *EdgeClusterNsxtEntityCriterion) SetArguments(val OptEdgeClusterNsxtEntityCriterionArguments) {
	s.Arguments = val
}

// SetDescription sets the value of Description.
func (s *EdgeClusterNsxtEntityCriterion) SetDescription(val OptString) {
	s.Description = val
}

// Arguments required for a particular criterion.
type EdgeClusterNsxtEntityCriterionArguments map[string]string

func (s *EdgeClusterNsxtEntityCriterionArguments) init() EdgeClusterNsxtEntityCriterionArguments {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// This specification contains the parameters required to shrink a NSX edge cluster.
// Ref: #/components/schemas/EdgeClusterShrinkageSpec
type EdgeClusterShrinkageSpec struct {
	// List of VCF Edge Node ID's to be removed for shrinkage.
	EdgeNodeIds []string `json:"edgeNodeIds"`
}

// GetEdgeNodeIds returns the value of EdgeNodeIds.
func (s *EdgeClusterShrinkageSpec) GetEdgeNodeIds() []string {
	return s.EdgeNodeIds
}

// SetEdgeNodeIds sets the value of EdgeNodeIds.
func (s *EdgeClusterShrinkageSpec) SetEdgeNodeIds(val []string) {
	s.EdgeNodeIds = val
}

// NSX Edge cluster update specification.
// Ref: #/components/schemas/EdgeClusterUpdateSpec
type EdgeClusterUpdateSpec struct {
	EdgeClusterExpansionSpec OptEdgeClusterExpansionSpec `json:"edgeClusterExpansionSpec"`
	EdgeClusterShrinkageSpec OptEdgeClusterShrinkageSpec `json:"edgeClusterShrinkageSpec"`
	// Edge cluster operation Type.
	Operation string `json:"operation"`
}

// GetEdgeClusterExpansionSpec returns the value of EdgeClusterExpansionSpec.
func (s *EdgeClusterUpdateSpec) GetEdgeClusterExpansionSpec() OptEdgeClusterExpansionSpec {
	return s.EdgeClusterExpansionSpec
}

// GetEdgeClusterShrinkageSpec returns the value of EdgeClusterShrinkageSpec.
func (s *EdgeClusterUpdateSpec) GetEdgeClusterShrinkageSpec() OptEdgeClusterShrinkageSpec {
	return s.EdgeClusterShrinkageSpec
}

// GetOperation returns the value of Operation.
func (s *EdgeClusterUpdateSpec) GetOperation() string {
	return s.Operation
}

// SetEdgeClusterExpansionSpec sets the value of EdgeClusterExpansionSpec.
func (s *EdgeClusterUpdateSpec) SetEdgeClusterExpansionSpec(val OptEdgeClusterExpansionSpec) {
	s.EdgeClusterExpansionSpec = val
}

// SetEdgeClusterShrinkageSpec sets the value of EdgeClusterShrinkageSpec.
func (s *EdgeClusterUpdateSpec) SetEdgeClusterShrinkageSpec(val OptEdgeClusterShrinkageSpec) {
	s.EdgeClusterShrinkageSpec = val
}

// SetOperation sets the value of Operation.
func (s *EdgeClusterUpdateSpec) SetOperation(val string) {
	s.Operation = val
}

// Represents a reference to the edge node.
// Ref: #/components/schemas/EdgeNodeReference
type EdgeNodeReference struct {
	// ID of the edge node.
	ID string `json:"id"`
	// Hostname of the edge node.
	HostName string `json:"hostName"`
}

// GetID returns the value of ID.
func (s *EdgeNodeReference) GetID() string {
	return s.ID
}

// GetHostName returns the value of HostName.
func (s *EdgeNodeReference) GetHostName() string {
	return s.HostName
}

// SetID sets the value of ID.
func (s *EdgeNodeReference) SetID(val string) {
	s.ID = val
}

// SetHostName sets the value of HostName.
func (s *EdgeNodeReference) SetHostName(val string) {
	s.HostName = val
}

// This specification indicates which NSX IP pool to use for an Edge node's TEPs.
// Ref: #/components/schemas/EdgeTepIpAddressPoolSpec
type EdgeTepIpAddressPoolSpec struct {
	// NSX IP Pool Name.
	Name OptString `json:"name"`
	// NSX IP Pool ID.
	NsxId OptString `json:"nsxId"`
}

// GetName returns the value of Name.
func (s *EdgeTepIpAddressPoolSpec) GetName() OptString {
	return s.Name
}

// GetNsxId returns the value of NsxId.
func (s *EdgeTepIpAddressPoolSpec) GetNsxId() OptString {
	return s.NsxId
}

// SetName sets the value of Name.
func (s *EdgeTepIpAddressPoolSpec) SetName(val OptString) {
	s.Name = val
}

// SetNsxId sets the value of NsxId.
func (s *EdgeTepIpAddressPoolSpec) SetNsxId(val OptString) {
	s.NsxId = val
}

// Restore Specification.
// Ref: #/components/schemas/Encryption
type Encryption struct {
	// Passphrase.
	Passphrase string `json:"passphrase"`
}

// GetPassphrase returns the value of Passphrase.
func (s *Encryption) GetPassphrase() string {
	return s.Passphrase
}

// SetPassphrase sets the value of Passphrase.
func (s *Encryption) SetPassphrase(val string) {
	s.Passphrase = val
}

// Represents an Endpoint in a Domain.
// Ref: #/components/schemas/Endpoint
type Endpoint struct {
	// Type of the Endpoint.
	Type string `json:"type"`
	// Url of the Endpoint.
	URL string `json:"url"`
}

// GetType returns the value of Type.
func (s *Endpoint) GetType() string {
	return s.Type
}

// GetURL returns the value of URL.
func (s *Endpoint) GetURL() string {
	return s.URL
}

// SetType sets the value of Type.
func (s *Endpoint) SetType(val string) {
	s.Type = val
}

// SetURL sets the value of URL.
func (s *Endpoint) SetURL(val string) {
	s.URL = val
}

// Entity model representing the physical data output of the assessment workflow.
// Ref: #/components/schemas/EntityRest
type EntityRest struct {
	// Id of the entity.
	ID OptString `json:"id"`
	// Type of the entity.
	Type OptString `json:"type"`
	// Name of the entity.
	Name OptString `json:"name"`
	// Properties for this entity.
	Properties OptEntityRestProperties `json:"properties"`
	// Child entities of this entity.
	ChildEntities []EntityRest `json:"childEntities"`
	// Description of the entity.
	Description OptString `json:"description"`
	// The address of the source.
	SourceAddress OptString `json:"sourceAddress"`
	// Classifications of the entity.
	Classifications []Classification `json:"classifications"`
}

// GetID returns the value of ID.
func (s *EntityRest) GetID() OptString {
	return s.ID
}

// GetType returns the value of Type.
func (s *EntityRest) GetType() OptString {
	return s.Type
}

// GetName returns the value of Name.
func (s *EntityRest) GetName() OptString {
	return s.Name
}

// GetProperties returns the value of Properties.
func (s *EntityRest) GetProperties() OptEntityRestProperties {
	return s.Properties
}

// GetChildEntities returns the value of ChildEntities.
func (s *EntityRest) GetChildEntities() []EntityRest {
	return s.ChildEntities
}

// GetDescription returns the value of Description.
func (s *EntityRest) GetDescription() OptString {
	return s.Description
}

// GetSourceAddress returns the value of SourceAddress.
func (s *EntityRest) GetSourceAddress() OptString {
	return s.SourceAddress
}

// GetClassifications returns the value of Classifications.
func (s *EntityRest) GetClassifications() []Classification {
	return s.Classifications
}

// SetID sets the value of ID.
func (s *EntityRest) SetID(val OptString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *EntityRest) SetType(val OptString) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *EntityRest) SetName(val OptString) {
	s.Name = val
}

// SetProperties sets the value of Properties.
func (s *EntityRest) SetProperties(val OptEntityRestProperties) {
	s.Properties = val
}

// SetChildEntities sets the value of ChildEntities.
func (s *EntityRest) SetChildEntities(val []EntityRest) {
	s.ChildEntities = val
}

// SetDescription sets the value of Description.
func (s *EntityRest) SetDescription(val OptString) {
	s.Description = val
}

// SetSourceAddress sets the value of SourceAddress.
func (s *EntityRest) SetSourceAddress(val OptString) {
	s.SourceAddress = val
}

// SetClassifications sets the value of Classifications.
func (s *EntityRest) SetClassifications(val []Classification) {
	s.Classifications = val
}

// Properties for this entity.
type EntityRestProperties map[string]EntityRestPropertiesItem

func (s *EntityRestProperties) init() EntityRestProperties {
	m := *s
	if m == nil {
		m = map[string]EntityRestPropertiesItem{}
		*s = m
	}
	return m
}

// Properties for this entity.
type EntityRestPropertiesItem struct{}

// Error response containing a minor error code, a localized error message, a localized remediation
// message and optionally a reference token to correlate the error with the logs.
// Ref: #/components/schemas/Error
type Error struct {
	// The minor error code.
	ErrorCode OptString `json:"errorCode"`
	// The error type.
	ErrorType OptString `json:"errorType"`
	// The arguments used to localize the message, Can be used by scripts to automate the error
	// processing.
	Arguments []string `json:"arguments"`
	// The error context (e.g. the component where it occurred).
	Context OptErrorContext `json:"context"`
	// The localized error message.
	Message OptString `json:"message"`
	// The localized remediation error message.
	RemediationMessage OptString `json:"remediationMessage"`
	// The underlying cause exceptions.
	Causes []ErrorCause `json:"causes"`
	// The nested errors when the error is a composite one.
	NestedErrors []Error `json:"nestedErrors"`
	// A reference token correlating the error with the relevant detailed error logs. Should be sent to
	// the service provider when reporting issues.
	ReferenceToken OptString `json:"referenceToken"`
}

// GetErrorCode returns the value of ErrorCode.
func (s *Error) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetErrorType returns the value of ErrorType.
func (s *Error) GetErrorType() OptString {
	return s.ErrorType
}

// GetArguments returns the value of Arguments.
func (s *Error) GetArguments() []string {
	return s.Arguments
}

// GetContext returns the value of Context.
func (s *Error) GetContext() OptErrorContext {
	return s.Context
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() OptString {
	return s.Message
}

// GetRemediationMessage returns the value of RemediationMessage.
func (s *Error) GetRemediationMessage() OptString {
	return s.RemediationMessage
}

// GetCauses returns the value of Causes.
func (s *Error) GetCauses() []ErrorCause {
	return s.Causes
}

// GetNestedErrors returns the value of NestedErrors.
func (s *Error) GetNestedErrors() []Error {
	return s.NestedErrors
}

// GetReferenceToken returns the value of ReferenceToken.
func (s *Error) GetReferenceToken() OptString {
	return s.ReferenceToken
}

// SetErrorCode sets the value of ErrorCode.
func (s *Error) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetErrorType sets the value of ErrorType.
func (s *Error) SetErrorType(val OptString) {
	s.ErrorType = val
}

// SetArguments sets the value of Arguments.
func (s *Error) SetArguments(val []string) {
	s.Arguments = val
}

// SetContext sets the value of Context.
func (s *Error) SetContext(val OptErrorContext) {
	s.Context = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val OptString) {
	s.Message = val
}

// SetRemediationMessage sets the value of RemediationMessage.
func (s *Error) SetRemediationMessage(val OptString) {
	s.RemediationMessage = val
}

// SetCauses sets the value of Causes.
func (s *Error) SetCauses(val []ErrorCause) {
	s.Causes = val
}

// SetNestedErrors sets the value of NestedErrors.
func (s *Error) SetNestedErrors(val []Error) {
	s.NestedErrors = val
}

// SetReferenceToken sets the value of ReferenceToken.
func (s *Error) SetReferenceToken(val OptString) {
	s.ReferenceToken = val
}

func (*Error) addLicenseKeyRes()                    {}
func (*Error) commissionHostsRes()                  {}
func (*Error) decommissionHostsRes()                {}
func (*Error) deleteReleaseByDomainIDRes()          {}
func (*Error) deleteTrustedCertificateRes()         {}
func (*Error) getALBClustersFormFactorsRes()        {}
func (*Error) getAvnsRes()                          {}
func (*Error) getBringupTasksRes()                  {}
func (*Error) getBundlesRes()                       {}
func (*Error) getCeipStatusRes()                    {}
func (*Error) getCertificateAuthoritiesRes()        {}
func (*Error) getClusterCriterionRes()              {}
func (*Error) getCriterionRes()                     {}
func (*Error) getCustomIsosRes()                    {}
func (*Error) getDatastoreCriterion1Res()           {}
func (*Error) getDatastoreCriterionRes()            {}
func (*Error) getDepotSettingsRes()                 {}
func (*Error) getEdgeClusterQueryCriteriaRes()      {}
func (*Error) getEdgeClusterValidationByIDRes()     {}
func (*Error) getHostCommissionValidationByIDRes()  {}
func (*Error) getHostCriterionRes()                 {}
func (*Error) getHostRes()                          {}
func (*Error) getIdentityProviderByIdRes()          {}
func (*Error) getLicenseKeysRes()                   {}
func (*Error) getLicenseProductTypesRes()           {}
func (*Error) getLocalOsUserAccountsRes()           {}
func (*Error) getNsxCriterionRes()                  {}
func (*Error) getNsxTransportZonesRes()             {}
func (*Error) getPersonalitiesRes()                 {}
func (*Error) getProxyConfigurationRes()            {}
func (*Error) getReleaseByDomainsRes()              {}
func (*Error) getTasksRes()                         {}
func (*Error) getTrustedCertificatesRes()           {}
func (*Error) getUpgradablesRes()                   {}
func (*Error) getValidationOfDnsConfigurationRes()  {}
func (*Error) getValidationOfNtpConfigurationRes()  {}
func (*Error) getValidationsOfDNSConfigurationRes() {}
func (*Error) getValidationsOfNtpConfigurationRes() {}
func (*Error) getVersionAliasConfigurationRes()     {}
func (*Error) getVrslcmRes()                        {}
func (*Error) getVrslcmStatusRes()                  {}
func (*Error) getVsanHealthCheckByDomainRes()       {}
func (*Error) removeLicenseKeyRes()                 {}
func (*Error) rollbackVrslcmRes()                   {}
func (*Error) validateAvnSpecRes()                  {}
func (*Error) validateCommissionHostsRes()          {}
func (*Error) validateDnsConfigurationRes()         {}
func (*Error) validateHostCommissionSpecRes()       {}
func (*Error) validateNtpConfigurationRes()         {}
func (*Error) validateVasaProviderSpecRes()         {}
func (*Error) validateVrslcmRes()                   {}

// Describes a single error cause.
// Ref: #/components/schemas/ErrorCause
type ErrorCause struct {
	// The type of the error cause.
	Type OptString `json:"type"`
	// The message describing the reason for the error.
	Message OptString `json:"message"`
}

// GetType returns the value of Type.
func (s *ErrorCause) GetType() OptString {
	return s.Type
}

// GetMessage returns the value of Message.
func (s *ErrorCause) GetMessage() OptString {
	return s.Message
}

// SetType sets the value of Type.
func (s *ErrorCause) SetType(val OptString) {
	s.Type = val
}

// SetMessage sets the value of Message.
func (s *ErrorCause) SetMessage(val OptString) {
	s.Message = val
}

// The error context (e.g. the component where it occurred).
type ErrorContext map[string]string

func (s *ErrorContext) init() ErrorContext {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	ErrorCode          OptString               `json:"errorCode"`
	Arguments          []string                `json:"arguments"`
	Context            OptErrorResponseContext `json:"context"`
	Message            OptString               `json:"message"`
	RemediationMessage OptString               `json:"remediationMessage"`
	Cause              []ErrorCause            `json:"cause"`
	NestedErrors       []ErrorResponse         `json:"nestedErrors"`
	ReferenceToken     OptString               `json:"referenceToken"`
}

// GetErrorCode returns the value of ErrorCode.
func (s *ErrorResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetArguments returns the value of Arguments.
func (s *ErrorResponse) GetArguments() []string {
	return s.Arguments
}

// GetContext returns the value of Context.
func (s *ErrorResponse) GetContext() OptErrorResponseContext {
	return s.Context
}

// GetMessage returns the value of Message.
func (s *ErrorResponse) GetMessage() OptString {
	return s.Message
}

// GetRemediationMessage returns the value of RemediationMessage.
func (s *ErrorResponse) GetRemediationMessage() OptString {
	return s.RemediationMessage
}

// GetCause returns the value of Cause.
func (s *ErrorResponse) GetCause() []ErrorCause {
	return s.Cause
}

// GetNestedErrors returns the value of NestedErrors.
func (s *ErrorResponse) GetNestedErrors() []ErrorResponse {
	return s.NestedErrors
}

// GetReferenceToken returns the value of ReferenceToken.
func (s *ErrorResponse) GetReferenceToken() OptString {
	return s.ReferenceToken
}

// SetErrorCode sets the value of ErrorCode.
func (s *ErrorResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetArguments sets the value of Arguments.
func (s *ErrorResponse) SetArguments(val []string) {
	s.Arguments = val
}

// SetContext sets the value of Context.
func (s *ErrorResponse) SetContext(val OptErrorResponseContext) {
	s.Context = val
}

// SetMessage sets the value of Message.
func (s *ErrorResponse) SetMessage(val OptString) {
	s.Message = val
}

// SetRemediationMessage sets the value of RemediationMessage.
func (s *ErrorResponse) SetRemediationMessage(val OptString) {
	s.RemediationMessage = val
}

// SetCause sets the value of Cause.
func (s *ErrorResponse) SetCause(val []ErrorCause) {
	s.Cause = val
}

// SetNestedErrors sets the value of NestedErrors.
func (s *ErrorResponse) SetNestedErrors(val []ErrorResponse) {
	s.NestedErrors = val
}

// SetReferenceToken sets the value of ReferenceToken.
func (s *ErrorResponse) SetReferenceToken(val OptString) {
	s.ReferenceToken = val
}

func (*ErrorResponse) getIdentityProviderByIdRes() {}
func (*ErrorResponse) updateLocalUserPasswordRes() {}

type ErrorResponseContext map[string]string

func (s *ErrorResponseContext) init() ErrorResponseContext {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// This spec contains cluster vSAN ESA configuration.
// Ref: #/components/schemas/EsaConfig
type EsaConfig struct {
	// VSAN ESA enablement status.
	Enabled       bool             `json:"enabled"`
	VsanMaxConfig OptVsanMaxConfig `json:"vsanMaxConfig"`
}

// GetEnabled returns the value of Enabled.
func (s *EsaConfig) GetEnabled() bool {
	return s.Enabled
}

// GetVsanMaxConfig returns the value of VsanMaxConfig.
func (s *EsaConfig) GetVsanMaxConfig() OptVsanMaxConfig {
	return s.VsanMaxConfig
}

// SetEnabled sets the value of Enabled.
func (s *EsaConfig) SetEnabled(val bool) {
	s.Enabled = val
}

// SetVsanMaxConfig sets the value of VsanMaxConfig.
func (s *EsaConfig) SetVsanMaxConfig(val OptVsanMaxConfig) {
	s.VsanMaxConfig = val
}

// Esx Upgrade failure actions to be taken if host entering maintenance mode failed during esx
// cluster upgrade.
// Ref: #/components/schemas/EsxUpgradeFailureAction
type EsxUpgradeFailureAction struct {
	// Time to wait before we retry the failed operation in seconds. If action is RETRY, the value should
	// be between 300 and 3600 seconds. If action is FAIL, the value should not be set.
	RetryDelay int64 `json:"retryDelay"`
	// Number of times to retry the failed operation. If the action is RETRY, the value should be between
	// 3 and 100. If the action is FAIL, the value should not be set.
	RetryCount int64 `json:"retryCount"`
	// Action to be taken if entering maintenance mode fails for a host.
	Action string `json:"action"`
}

// GetRetryDelay returns the value of RetryDelay.
func (s *EsxUpgradeFailureAction) GetRetryDelay() int64 {
	return s.RetryDelay
}

// GetRetryCount returns the value of RetryCount.
func (s *EsxUpgradeFailureAction) GetRetryCount() int64 {
	return s.RetryCount
}

// GetAction returns the value of Action.
func (s *EsxUpgradeFailureAction) GetAction() string {
	return s.Action
}

// SetRetryDelay sets the value of RetryDelay.
func (s *EsxUpgradeFailureAction) SetRetryDelay(val int64) {
	s.RetryDelay = val
}

// SetRetryCount sets the value of RetryCount.
func (s *EsxUpgradeFailureAction) SetRetryCount(val int64) {
	s.RetryCount = val
}

// SetAction sets the value of Action.
func (s *EsxUpgradeFailureAction) SetAction(val string) {
	s.Action = val
}

// Options for ESXi upgrade. These are applicable to vSphere Lifecycle Manager Images based upgrade
// only.
// Ref: #/components/schemas/EsxUpgradeOptionsSpec
type EsxUpgradeOptionsSpec struct {
	EsxUpgradeFailureAction OptEsxUpgradeFailureAction `json:"esxUpgradeFailureAction"`
	// Flag for enforcing HCL validation for ESXi upgrade, when applicable, to prevent remediation if
	// hardware compatibility issues are found.
	EnforceHclValidation OptBool `json:"enforceHclValidation"`
	// Flag for enabling quick patch policy for ESXi upgrade, when applicable, to do live remediation and
	// not require full maintenance mode or reboot. This option is only applicable to vLCM based ESXi
	// upgrade.
	EnableQuickPatch OptBool `json:"enableQuickPatch"`
	// Flag for requesting Quick Boot.
	EnableQuickboot OptBool `json:"enableQuickboot"`
	// Flag for requesting Evacuation of Offline VMs.
	EvacuateOfflineVms OptBool `json:"evacuateOfflineVms"`
	// Flag for disabling HA admission control on the cluster.
	DisableHac OptBool `json:"disableHac"`
	// Flag for disabling DPM on the cluster.
	DisableDpm OptBool `json:"disableDpm"`
	// Flag for setting VM power state before entering maintenance mode.
	PreRemediationPowerAction OptString `json:"preRemediationPowerAction"`
}

// GetEsxUpgradeFailureAction returns the value of EsxUpgradeFailureAction.
func (s *EsxUpgradeOptionsSpec) GetEsxUpgradeFailureAction() OptEsxUpgradeFailureAction {
	return s.EsxUpgradeFailureAction
}

// GetEnforceHclValidation returns the value of EnforceHclValidation.
func (s *EsxUpgradeOptionsSpec) GetEnforceHclValidation() OptBool {
	return s.EnforceHclValidation
}

// GetEnableQuickPatch returns the value of EnableQuickPatch.
func (s *EsxUpgradeOptionsSpec) GetEnableQuickPatch() OptBool {
	return s.EnableQuickPatch
}

// GetEnableQuickboot returns the value of EnableQuickboot.
func (s *EsxUpgradeOptionsSpec) GetEnableQuickboot() OptBool {
	return s.EnableQuickboot
}

// GetEvacuateOfflineVms returns the value of EvacuateOfflineVms.
func (s *EsxUpgradeOptionsSpec) GetEvacuateOfflineVms() OptBool {
	return s.EvacuateOfflineVms
}

// GetDisableHac returns the value of DisableHac.
func (s *EsxUpgradeOptionsSpec) GetDisableHac() OptBool {
	return s.DisableHac
}

// GetDisableDpm returns the value of DisableDpm.
func (s *EsxUpgradeOptionsSpec) GetDisableDpm() OptBool {
	return s.DisableDpm
}

// GetPreRemediationPowerAction returns the value of PreRemediationPowerAction.
func (s *EsxUpgradeOptionsSpec) GetPreRemediationPowerAction() OptString {
	return s.PreRemediationPowerAction
}

// SetEsxUpgradeFailureAction sets the value of EsxUpgradeFailureAction.
func (s *EsxUpgradeOptionsSpec) SetEsxUpgradeFailureAction(val OptEsxUpgradeFailureAction) {
	s.EsxUpgradeFailureAction = val
}

// SetEnforceHclValidation sets the value of EnforceHclValidation.
func (s *EsxUpgradeOptionsSpec) SetEnforceHclValidation(val OptBool) {
	s.EnforceHclValidation = val
}

// SetEnableQuickPatch sets the value of EnableQuickPatch.
func (s *EsxUpgradeOptionsSpec) SetEnableQuickPatch(val OptBool) {
	s.EnableQuickPatch = val
}

// SetEnableQuickboot sets the value of EnableQuickboot.
func (s *EsxUpgradeOptionsSpec) SetEnableQuickboot(val OptBool) {
	s.EnableQuickboot = val
}

// SetEvacuateOfflineVms sets the value of EvacuateOfflineVms.
func (s *EsxUpgradeOptionsSpec) SetEvacuateOfflineVms(val OptBool) {
	s.EvacuateOfflineVms = val
}

// SetDisableHac sets the value of DisableHac.
func (s *EsxUpgradeOptionsSpec) SetDisableHac(val OptBool) {
	s.DisableHac = val
}

// SetDisableDpm sets the value of DisableDpm.
func (s *EsxUpgradeOptionsSpec) SetDisableDpm(val OptBool) {
	s.DisableDpm = val
}

// SetPreRemediationPowerAction sets the value of PreRemediationPowerAction.
func (s *EsxUpgradeOptionsSpec) SetPreRemediationPowerAction(val OptString) {
	s.PreRemediationPowerAction = val
}

// Represents expiration details of the credential.
// Ref: #/components/schemas/ExpirationDetails
type ExpirationDetails struct {
	// Expiration date.
	ExpiryDate OptString `json:"expiryDate"`
	// Last checked date.
	LastCheckedDate OptString `json:"lastCheckedDate"`
	// Connectivity status.
	ConnectivityStatus OptString `json:"connectivityStatus"`
	// Expiration status.
	Status OptString `json:"status"`
}

// GetExpiryDate returns the value of ExpiryDate.
func (s *ExpirationDetails) GetExpiryDate() OptString {
	return s.ExpiryDate
}

// GetLastCheckedDate returns the value of LastCheckedDate.
func (s *ExpirationDetails) GetLastCheckedDate() OptString {
	return s.LastCheckedDate
}

// GetConnectivityStatus returns the value of ConnectivityStatus.
func (s *ExpirationDetails) GetConnectivityStatus() OptString {
	return s.ConnectivityStatus
}

// GetStatus returns the value of Status.
func (s *ExpirationDetails) GetStatus() OptString {
	return s.Status
}

// SetExpiryDate sets the value of ExpiryDate.
func (s *ExpirationDetails) SetExpiryDate(val OptString) {
	s.ExpiryDate = val
}

// SetLastCheckedDate sets the value of LastCheckedDate.
func (s *ExpirationDetails) SetLastCheckedDate(val OptString) {
	s.LastCheckedDate = val
}

// SetConnectivityStatus sets the value of ConnectivityStatus.
func (s *ExpirationDetails) SetConnectivityStatus(val OptString) {
	s.ConnectivityStatus = val
}

// SetStatus sets the value of Status.
func (s *ExpirationDetails) SetStatus(val OptString) {
	s.Status = val
}

type ExportBringupDetailReportFormat string

const (
	ExportBringupDetailReportFormatPdf ExportBringupDetailReportFormat = "pdf"
	ExportBringupDetailReportFormatCsv ExportBringupDetailReportFormat = "csv"
)

// AllValues returns all ExportBringupDetailReportFormat values.
func (ExportBringupDetailReportFormat) AllValues() []ExportBringupDetailReportFormat {
	return []ExportBringupDetailReportFormat{
		ExportBringupDetailReportFormatPdf,
		ExportBringupDetailReportFormatCsv,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExportBringupDetailReportFormat) MarshalText() ([]byte, error) {
	switch s {
	case ExportBringupDetailReportFormatPdf:
		return []byte(s), nil
	case ExportBringupDetailReportFormatCsv:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExportBringupDetailReportFormat) UnmarshalText(data []byte) error {
	switch ExportBringupDetailReportFormat(data) {
	case ExportBringupDetailReportFormatPdf:
		*s = ExportBringupDetailReportFormatPdf
		return nil
	case ExportBringupDetailReportFormatCsv:
		*s = ExportBringupDetailReportFormatCsv
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ExportBringupDetailReportInternalServerErrorApplicationPdf struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportBringupDetailReportInternalServerErrorApplicationPdf) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportBringupDetailReportInternalServerErrorApplicationPdf) exportBringupDetailReportRes() {}

type ExportBringupDetailReportInternalServerErrorTextCsv struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportBringupDetailReportInternalServerErrorTextCsv) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportBringupDetailReportInternalServerErrorTextCsv) exportBringupDetailReportRes() {}

type ExportBringupDetailReportNoContentApplicationJSON string

func (*ExportBringupDetailReportNoContentApplicationJSON) exportBringupDetailReportRes() {}

type ExportBringupDetailReportNotImplementedApplicationPdf struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportBringupDetailReportNotImplementedApplicationPdf) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportBringupDetailReportNotImplementedApplicationPdf) exportBringupDetailReportRes() {}

type ExportBringupDetailReportNotImplementedTextCsv struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportBringupDetailReportNotImplementedTextCsv) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportBringupDetailReportNotImplementedTextCsv) exportBringupDetailReportRes() {}

type ExportBringupDetailReportOKApplicationJSON string

func (*ExportBringupDetailReportOKApplicationJSON) exportBringupDetailReportRes() {}

type ExportBringupValidationReportInternalServerError struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportBringupValidationReportInternalServerError) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportBringupValidationReportInternalServerError) exportBringupValidationReportRes() {}

type ExportBringupValidationReportNotImplemented struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportBringupValidationReportNotImplemented) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportBringupValidationReportNotImplemented) exportBringupValidationReportRes() {}

type ExportBringupValidationReportOKApplicationJSON string

func (*ExportBringupValidationReportOKApplicationJSON) exportBringupValidationReportRes() {}

// Cluster storage configuration for VMFS on FC.
// Ref: #/components/schemas/FcSpec
type FcSpec struct {
	// Datastore name used for cluster creation.
	DatastoreName string `json:"datastoreName"`
}

// GetDatastoreName returns the value of DatastoreName.
func (s *FcSpec) GetDatastoreName() string {
	return s.DatastoreName
}

// SetDatastoreName sets the value of DatastoreName.
func (s *FcSpec) SetDatastoreName(val string) {
	s.DatastoreName = val
}

// The identity management info when the provider is via broker federation.
// Ref: #/components/schemas/FederatedIdentityProviderInfo
type FederatedIdentityProviderInfo struct {
	// The user-friendly name for the Identity Provider.
	Name OptString `json:"name"`
	// The source of the Identity Provider.
	Source        OptString                    `json:"source"`
	DirectoryList OptIdentityProviderDirectory `json:"directoryList"`
	OidcInfo      OptOidcInfo                  `json:"oidcInfo"`
	// The lifetime in seconds of the sync client bear token.
	SyncClientTokenTTL  OptInt64               `json:"syncClientTokenTTL"`
	SyncClientTokenInfo OptSyncClientTokenInfo `json:"syncClientTokenInfo"`
}

// GetName returns the value of Name.
func (s *FederatedIdentityProviderInfo) GetName() OptString {
	return s.Name
}

// GetSource returns the value of Source.
func (s *FederatedIdentityProviderInfo) GetSource() OptString {
	return s.Source
}

// GetDirectoryList returns the value of DirectoryList.
func (s *FederatedIdentityProviderInfo) GetDirectoryList() OptIdentityProviderDirectory {
	return s.DirectoryList
}

// GetOidcInfo returns the value of OidcInfo.
func (s *FederatedIdentityProviderInfo) GetOidcInfo() OptOidcInfo {
	return s.OidcInfo
}

// GetSyncClientTokenTTL returns the value of SyncClientTokenTTL.
func (s *FederatedIdentityProviderInfo) GetSyncClientTokenTTL() OptInt64 {
	return s.SyncClientTokenTTL
}

// GetSyncClientTokenInfo returns the value of SyncClientTokenInfo.
func (s *FederatedIdentityProviderInfo) GetSyncClientTokenInfo() OptSyncClientTokenInfo {
	return s.SyncClientTokenInfo
}

// SetName sets the value of Name.
func (s *FederatedIdentityProviderInfo) SetName(val OptString) {
	s.Name = val
}

// SetSource sets the value of Source.
func (s *FederatedIdentityProviderInfo) SetSource(val OptString) {
	s.Source = val
}

// SetDirectoryList sets the value of DirectoryList.
func (s *FederatedIdentityProviderInfo) SetDirectoryList(val OptIdentityProviderDirectory) {
	s.DirectoryList = val
}

// SetOidcInfo sets the value of OidcInfo.
func (s *FederatedIdentityProviderInfo) SetOidcInfo(val OptOidcInfo) {
	s.OidcInfo = val
}

// SetSyncClientTokenTTL sets the value of SyncClientTokenTTL.
func (s *FederatedIdentityProviderInfo) SetSyncClientTokenTTL(val OptInt64) {
	s.SyncClientTokenTTL = val
}

// SetSyncClientTokenInfo sets the value of SyncClientTokenInfo.
func (s *FederatedIdentityProviderInfo) SetSyncClientTokenInfo(val OptSyncClientTokenInfo) {
	s.SyncClientTokenInfo = val
}

// Represents VCF FIPS mode status (enabled/disabled).
// Ref: #/components/schemas/Fips
type Fips struct {
	// VCF FIPS mode status.
	Enabled bool `json:"enabled"`
}

// GetEnabled returns the value of Enabled.
func (s *Fips) GetEnabled() bool {
	return s.Enabled
}

// SetEnabled sets the value of Enabled.
func (s *Fips) SetEnabled(val bool) {
	s.Enabled = val
}

// Model for product async/hot patches with their supported product versions.
// Ref: #/components/schemas/FlexibleProductPatch
type FlexibleProductPatch struct {
	// Product type of patch.
	ProductType string `json:"productType"`
	// Supported versions of patch.
	Versions []string `json:"versions"`
}

// GetProductType returns the value of ProductType.
func (s *FlexibleProductPatch) GetProductType() string {
	return s.ProductType
}

// GetVersions returns the value of Versions.
func (s *FlexibleProductPatch) GetVersions() []string {
	return s.Versions
}

// SetProductType sets the value of ProductType.
func (s *FlexibleProductPatch) SetProductType(val string) {
	s.ProductType = val
}

// SetVersions sets the value of Versions.
func (s *FlexibleProductPatch) SetVersions(val []string) {
	s.Versions = val
}

// Model for supported product async/hot patches associated with a VCF release.
// Ref: #/components/schemas/FlexibleProductPatches
type FlexibleProductPatches struct {
	// Domain VCF release version.
	Version string `json:"version"`
	// List of available patches on the VCF release.
	Patches []FlexibleProductPatch `json:"patches"`
}

// GetVersion returns the value of Version.
func (s *FlexibleProductPatches) GetVersion() string {
	return s.Version
}

// GetPatches returns the value of Patches.
func (s *FlexibleProductPatches) GetPatches() []FlexibleProductPatch {
	return s.Patches
}

// SetVersion sets the value of Version.
func (s *FlexibleProductPatches) SetVersion(val string) {
	s.Version = val
}

// SetPatches sets the value of Patches.
func (s *FlexibleProductPatches) SetPatches(val []FlexibleProductPatch) {
	s.Patches = val
}

// Represents a single metric representing frequency.
// Ref: #/components/schemas/FrequencyMetric
type FrequencyMetric struct {
	// Value of the metric.
	Value OptFloat64 `json:"value"`
	// Unit of the metric.
	Unit OptFrequencyMetricUnit `json:"unit"`
}

// GetValue returns the value of Value.
func (s *FrequencyMetric) GetValue() OptFloat64 {
	return s.Value
}

// GetUnit returns the value of Unit.
func (s *FrequencyMetric) GetUnit() OptFrequencyMetricUnit {
	return s.Unit
}

// SetValue sets the value of Value.
func (s *FrequencyMetric) SetValue(val OptFloat64) {
	s.Value = val
}

// SetUnit sets the value of Unit.
func (s *FrequencyMetric) SetUnit(val OptFrequencyMetricUnit) {
	s.Unit = val
}

// Unit of the metric.
type FrequencyMetricUnit string

const (
	FrequencyMetricUnitHz  FrequencyMetricUnit = "Hz"
	FrequencyMetricUnitKHz FrequencyMetricUnit = "KHz"
	FrequencyMetricUnitMHz FrequencyMetricUnit = "MHz"
	FrequencyMetricUnitGHz FrequencyMetricUnit = "GHz"
	FrequencyMetricUnitTHz FrequencyMetricUnit = "THz"
)

// AllValues returns all FrequencyMetricUnit values.
func (FrequencyMetricUnit) AllValues() []FrequencyMetricUnit {
	return []FrequencyMetricUnit{
		FrequencyMetricUnitHz,
		FrequencyMetricUnitKHz,
		FrequencyMetricUnitMHz,
		FrequencyMetricUnitGHz,
		FrequencyMetricUnitTHz,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FrequencyMetricUnit) MarshalText() ([]byte, error) {
	switch s {
	case FrequencyMetricUnitHz:
		return []byte(s), nil
	case FrequencyMetricUnitKHz:
		return []byte(s), nil
	case FrequencyMetricUnitMHz:
		return []byte(s), nil
	case FrequencyMetricUnitGHz:
		return []byte(s), nil
	case FrequencyMetricUnitTHz:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FrequencyMetricUnit) UnmarshalText(data []byte) error {
	switch FrequencyMetricUnit(data) {
	case FrequencyMetricUnitHz:
		*s = FrequencyMetricUnitHz
		return nil
	case FrequencyMetricUnitKHz:
		*s = FrequencyMetricUnitKHz
		return nil
	case FrequencyMetricUnitMHz:
		*s = FrequencyMetricUnitMHz
		return nil
	case FrequencyMetricUnitGHz:
		*s = FrequencyMetricUnitGHz
		return nil
	case FrequencyMetricUnitTHz:
		*s = FrequencyMetricUnitTHz
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines a functionality model.
// Ref: #/components/schemas/Functionality
type Functionality struct {
	// Operation that is represented in machine readable format. The convention is <resource>_<operation>.
	Type string `json:"type"`
	// Flag indicating if a given functionality is allowed/disallowed.
	IsAllowed bool `json:"isAllowed"`
	// The localized error message.
	ErrorMessage OptString `json:"errorMessage"`
}

// GetType returns the value of Type.
func (s *Functionality) GetType() string {
	return s.Type
}

// GetIsAllowed returns the value of IsAllowed.
func (s *Functionality) GetIsAllowed() bool {
	return s.IsAllowed
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *Functionality) GetErrorMessage() OptString {
	return s.ErrorMessage
}

// SetType sets the value of Type.
func (s *Functionality) SetType(val string) {
	s.Type = val
}

// SetIsAllowed sets the value of IsAllowed.
func (s *Functionality) SetIsAllowed(val bool) {
	s.IsAllowed = val
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *Functionality) SetErrorMessage(val OptString) {
	s.ErrorMessage = val
}

type GenerateCertificatesBadRequest Error

func (*GenerateCertificatesBadRequest) generateCertificatesRes() {}

type GenerateCertificatesConflict Error

func (*GenerateCertificatesConflict) generateCertificatesRes() {}

type GenerateCertificatesInternalServerError Error

func (*GenerateCertificatesInternalServerError) generateCertificatesRes() {}

type GenerateCertificatesNotFound Error

func (*GenerateCertificatesNotFound) generateCertificatesRes() {}

type GenerateSyncClientTokenInternalServerError Error

func (*GenerateSyncClientTokenInternalServerError) generateSyncClientTokenRes() {}

type GenerateSyncClientTokenNotFound Error

func (*GenerateSyncClientTokenNotFound) generateSyncClientTokenRes() {}

type GenerateSyncClientTokenUnauthorized Error

func (*GenerateSyncClientTokenUnauthorized) generateSyncClientTokenRes() {}

type GeneratesCSRsBadRequest Error

func (*GeneratesCSRsBadRequest) generatesCSRsRes() {}

type GeneratesCSRsConflict Error

func (*GeneratesCSRsConflict) generatesCSRsRes() {}

type GeneratesCSRsInternalServerError Error

func (*GeneratesCSRsInternalServerError) generatesCSRsRes() {}

type GeneratesCSRsNotFound Error

func (*GeneratesCSRsNotFound) generatesCSRsRes() {}

type GetALBClusterInternalServerError Error

func (*GetALBClusterInternalServerError) getALBClusterRes() {}

type GetALBClusterNotFound Error

func (*GetALBClusterNotFound) getALBClusterRes() {}

type GetALBClustersBadRequest Error

func (*GetALBClustersBadRequest) getALBClustersRes() {}

type GetALBClustersInternalServerError Error

func (*GetALBClustersInternalServerError) getALBClustersRes() {}

type GetAssignableTagForHostBadRequest Error

func (*GetAssignableTagForHostBadRequest) getAssignableTagForHostRes() {}

type GetAssignableTagForHostInternalServerError Error

func (*GetAssignableTagForHostInternalServerError) getAssignableTagForHostRes() {}

type GetAssignableTagsForDomainBadRequest Error

func (*GetAssignableTagsForDomainBadRequest) getAssignableTagsForDomainRes() {}

type GetAssignableTagsForDomainInternalServerError Error

func (*GetAssignableTagsForDomainInternalServerError) getAssignableTagsForDomainRes() {}

type GetAvnsOKApplicationJSON []Avn

func (*GetAvnsOKApplicationJSON) getAvnsRes() {}

type GetBackupConfigurationBadRequest Error

func (*GetBackupConfigurationBadRequest) getBackupConfigurationRes() {}

type GetBackupConfigurationInternalServerError Error

func (*GetBackupConfigurationInternalServerError) getBackupConfigurationRes() {}

type GetBackupLocationBadRequest Error

func (*GetBackupLocationBadRequest) getBackupLocationRes() {}

type GetBackupLocationInternalServerError Error

func (*GetBackupLocationInternalServerError) getBackupLocationRes() {}

type GetBringupAppInfoInternalServerError VcfService

func (*GetBringupAppInfoInternalServerError) getBringupAppInfoRes() {}

type GetBringupAppInfoNotFound VcfService

func (*GetBringupAppInfoNotFound) getBringupAppInfoRes() {}

type GetBringupAppInfoNotImplemented VcfService

func (*GetBringupAppInfoNotImplemented) getBringupAppInfoRes() {}

type GetBringupAppInfoOK VcfService

func (*GetBringupAppInfoOK) getBringupAppInfoRes() {}

type GetBringupTaskByIDBadRequest Error

func (*GetBringupTaskByIDBadRequest) getBringupTaskByIDRes() {}

type GetBringupTaskByIDInternalServerError Error

func (*GetBringupTaskByIDInternalServerError) getBringupTaskByIDRes() {}

type GetBringupTaskByIDNotFound Error

func (*GetBringupTaskByIDNotFound) getBringupTaskByIDRes() {}

type GetBringupValidationBadRequest Validation

func (*GetBringupValidationBadRequest) getBringupValidationRes() {}

type GetBringupValidationInternalServerError Error

func (*GetBringupValidationInternalServerError) getBringupValidationRes() {}

type GetBringupValidationNotFound Error

func (*GetBringupValidationNotFound) getBringupValidationRes() {}

type GetBringupValidationNotImplemented Error

func (*GetBringupValidationNotImplemented) getBringupValidationRes() {}

type GetBringupValidationOK Validation

func (*GetBringupValidationOK) getBringupValidationRes() {}

type GetBringupValidationsInternalServerError Error

func (*GetBringupValidationsInternalServerError) getBringupValidationsRes() {}

type GetBringupValidationsNotFound Error

func (*GetBringupValidationsNotFound) getBringupValidationsRes() {}

type GetBringupValidationsNotImplemented Error

func (*GetBringupValidationsNotImplemented) getBringupValidationsRes() {}

type GetBundleInternalServerError Error

func (*GetBundleInternalServerError) getBundleRes() {}

type GetBundleNotFound Error

func (*GetBundleNotFound) getBundleRes() {}

type GetBundlesForSkipUpgradeInternalServerError Error

func (*GetBundlesForSkipUpgradeInternalServerError) getBundlesForSkipUpgradeRes() {}

type GetBundlesForSkipUpgradeNotFound Error

func (*GetBundlesForSkipUpgradeNotFound) getBundlesForSkipUpgradeRes() {}

type GetCSRsInternalServerError Error

func (*GetCSRsInternalServerError) getCSRsRes() {}

type GetCSRsNotFound Error

func (*GetCSRsNotFound) getCSRsRes() {}

type GetCertificateAuthorityByIdInternalServerError Error

func (*GetCertificateAuthorityByIdInternalServerError) getCertificateAuthorityByIdRes() {}

type GetCertificateAuthorityByIdNotFound Error

func (*GetCertificateAuthorityByIdNotFound) getCertificateAuthorityByIdRes() {}

type GetCertificatesByDomainInternalServerError Error

func (*GetCertificatesByDomainInternalServerError) getCertificatesByDomainRes() {}

type GetCertificatesByDomainNotFound Error

func (*GetCertificatesByDomainNotFound) getCertificatesByDomainRes() {}

type GetClusterCreateValidationBadRequest Error

func (*GetClusterCreateValidationBadRequest) getClusterCreateValidationRes() {}

type GetClusterCreateValidationNotFound Error

func (*GetClusterCreateValidationNotFound) getClusterCreateValidationRes() {}

type GetClusterDatastoresBadRequest Error

func (*GetClusterDatastoresBadRequest) getClusterDatastoresRes() {}

type GetClusterDatastoresInternalServerError Error

func (*GetClusterDatastoresInternalServerError) getClusterDatastoresRes() {}

type GetClusterDatastoresNotFound Error

func (*GetClusterDatastoresNotFound) getClusterDatastoresRes() {}

type GetClusterDatastoresOKApplicationJSON []Datastore

func (*GetClusterDatastoresOKApplicationJSON) getClusterDatastoresRes() {}

type GetClusterInternalServerError Error

func (*GetClusterInternalServerError) getClusterRes() {}

type GetClusterNetworkConfigurationBadRequest Error

func (*GetClusterNetworkConfigurationBadRequest) getClusterNetworkConfigurationRes() {}

type GetClusterNetworkConfigurationInternalServerError Error

func (*GetClusterNetworkConfigurationInternalServerError) getClusterNetworkConfigurationRes() {}

type GetClusterNetworkConfigurationQueryResponseBadRequest Error

func (*GetClusterNetworkConfigurationQueryResponseBadRequest) getClusterNetworkConfigurationQueryResponseRes() {
}

type GetClusterNetworkConfigurationQueryResponseInternalServerError Error

func (*GetClusterNetworkConfigurationQueryResponseInternalServerError) getClusterNetworkConfigurationQueryResponseRes() {
}

type GetClusterNotFound Error

func (*GetClusterNotFound) getClusterRes() {}

type GetClusterQueryResponseBadRequest Error

func (*GetClusterQueryResponseBadRequest) getClusterQueryResponseRes() {}

type GetClusterQueryResponseInternalServerError Error

func (*GetClusterQueryResponseInternalServerError) getClusterQueryResponseRes() {}

type GetClusterQueryResponseNotFound Error

func (*GetClusterQueryResponseNotFound) getClusterQueryResponseRes() {}

type GetClusterTagManagerUrlBadRequest Error

func (*GetClusterTagManagerUrlBadRequest) getClusterTagManagerUrlRes() {}

type GetClusterTagManagerUrlInternalServerError Error

func (*GetClusterTagManagerUrlInternalServerError) getClusterTagManagerUrlRes() {}

type GetClusterUpdateValidationBadRequest Error

func (*GetClusterUpdateValidationBadRequest) getClusterUpdateValidationRes() {}

type GetClusterUpdateValidationNotFound Error

func (*GetClusterUpdateValidationNotFound) getClusterUpdateValidationRes() {}

type GetClustersBadRequest Error

func (*GetClustersBadRequest) getClustersRes() {}

type GetClustersInternalServerError Error

func (*GetClustersInternalServerError) getClustersRes() {}

type GetClustersQueryResponseBadRequest Error

func (*GetClustersQueryResponseBadRequest) getClustersQueryResponseRes() {}

type GetClustersQueryResponseInternalServerError Error

func (*GetClustersQueryResponseInternalServerError) getClustersQueryResponseRes() {}

type GetClustersQueryResponseNotFound Error

func (*GetClustersQueryResponseNotFound) getClustersQueryResponseRes() {}

type GetCompatibilityMatricesInternalServerError Error

func (*GetCompatibilityMatricesInternalServerError) getCompatibilityMatricesRes() {}

type GetCompatibilityMatricesNotFound Error

func (*GetCompatibilityMatricesNotFound) getCompatibilityMatricesRes() {}

type GetCompatibilityMatrixContentInternalServerError Error

func (*GetCompatibilityMatrixContentInternalServerError) getCompatibilityMatrixContentRes() {}

type GetCompatibilityMatrixContentNotFound Error

func (*GetCompatibilityMatrixContentNotFound) getCompatibilityMatrixContentRes() {}

type GetCompatibilityMatrixContentOKApplicationJSON string

func (*GetCompatibilityMatrixContentOKApplicationJSON) getCompatibilityMatrixContentRes() {}

type GetCompatibilityMatrixInternalServerError Error

func (*GetCompatibilityMatrixInternalServerError) getCompatibilityMatrixRes() {}

type GetCompatibilityMatrixMetadataInternalServerError Error

func (*GetCompatibilityMatrixMetadataInternalServerError) getCompatibilityMatrixMetadataRes() {}

type GetCompatibilityMatrixMetadataNotFound Error

func (*GetCompatibilityMatrixMetadataNotFound) getCompatibilityMatrixMetadataRes() {}

type GetCompatibilityMatrixNotFound Error

func (*GetCompatibilityMatrixNotFound) getCompatibilityMatrixRes() {}

type GetComplianceAuditForADomainInternalServerError Error

func (*GetComplianceAuditForADomainInternalServerError) getComplianceAuditForADomainRes() {}

type GetComplianceAuditForADomainNotFound Error

func (*GetComplianceAuditForADomainNotFound) getComplianceAuditForADomainRes() {}

type GetComplianceAuditForADomainUnauthorized Error

func (*GetComplianceAuditForADomainUnauthorized) getComplianceAuditForADomainRes() {}

type GetComplianceAuditHistoryForADomainInternalServerError Error

func (*GetComplianceAuditHistoryForADomainInternalServerError) getComplianceAuditHistoryForADomainRes() {
}

type GetComplianceAuditHistoryForADomainNotFound Error

func (*GetComplianceAuditHistoryForADomainNotFound) getComplianceAuditHistoryForADomainRes() {}

type GetComplianceAuditHistoryForADomainUnauthorized Error

func (*GetComplianceAuditHistoryForADomainUnauthorized) getComplianceAuditHistoryForADomainRes() {}

type GetComplianceAuditHistoryInternalServerError Error

func (*GetComplianceAuditHistoryInternalServerError) getComplianceAuditHistoryRes() {}

type GetComplianceAuditHistoryNotFound Error

func (*GetComplianceAuditHistoryNotFound) getComplianceAuditHistoryRes() {}

type GetComplianceAuditHistoryUnauthorized Error

func (*GetComplianceAuditHistoryUnauthorized) getComplianceAuditHistoryRes() {}

type GetComplianceAuditInternalServerError Error

func (*GetComplianceAuditInternalServerError) getComplianceAuditRes() {}

type GetComplianceAuditItemsForADomainInternalServerError Error

func (*GetComplianceAuditItemsForADomainInternalServerError) getComplianceAuditItemsForADomainRes() {}

type GetComplianceAuditItemsForADomainNotFound Error

func (*GetComplianceAuditItemsForADomainNotFound) getComplianceAuditItemsForADomainRes() {}

type GetComplianceAuditItemsForADomainUnauthorized Error

func (*GetComplianceAuditItemsForADomainUnauthorized) getComplianceAuditItemsForADomainRes() {}

type GetComplianceAuditItemsInternalServerError Error

func (*GetComplianceAuditItemsInternalServerError) getComplianceAuditItemsRes() {}

type GetComplianceAuditItemsNotFound Error

func (*GetComplianceAuditItemsNotFound) getComplianceAuditItemsRes() {}

type GetComplianceAuditItemsUnauthorized Error

func (*GetComplianceAuditItemsUnauthorized) getComplianceAuditItemsRes() {}

type GetComplianceAuditNotFound Error

func (*GetComplianceAuditNotFound) getComplianceAuditRes() {}

type GetComplianceAuditTaskInternalServerError Error

func (*GetComplianceAuditTaskInternalServerError) getComplianceAuditTaskRes() {}

type GetComplianceAuditTaskNotFound Error

func (*GetComplianceAuditTaskNotFound) getComplianceAuditTaskRes() {}

type GetComplianceAuditTaskUnauthorized Error

func (*GetComplianceAuditTaskUnauthorized) getComplianceAuditTaskRes() {}

type GetComplianceAuditUnauthorized Error

func (*GetComplianceAuditUnauthorized) getComplianceAuditRes() {}

type GetComplianceConfigurationsBadRequest Error

func (*GetComplianceConfigurationsBadRequest) getComplianceConfigurationsRes() {}

type GetComplianceConfigurationsInternalServerError Error

func (*GetComplianceConfigurationsInternalServerError) getComplianceConfigurationsRes() {}

type GetComplianceConfigurationsUnauthorized Error

func (*GetComplianceConfigurationsUnauthorized) getComplianceConfigurationsRes() {}

type GetComplianceStandardsInternalServerError Error

func (*GetComplianceStandardsInternalServerError) getComplianceStandardsRes() {}

type GetComplianceStandardsUnauthorized Error

func (*GetComplianceStandardsUnauthorized) getComplianceStandardsRes() {}

type GetConfigsInternalServerError Error

func (*GetConfigsInternalServerError) getConfigsRes() {}

type GetConfigsServiceUnavailable Error

func (*GetConfigsServiceUnavailable) getConfigsRes() {}

type GetCredentialBadRequest Error

func (*GetCredentialBadRequest) getCredentialRes() {}

type GetCredentialForbidden Error

func (*GetCredentialForbidden) getCredentialRes() {}

type GetCredentialInternalServerError Error

func (*GetCredentialInternalServerError) getCredentialRes() {}

type GetCredentialNotFound Error

func (*GetCredentialNotFound) getCredentialRes() {}

type GetCredentialTaskByResourceIDBadRequest Error

func (*GetCredentialTaskByResourceIDBadRequest) getCredentialTaskByResourceIDRes() {}

type GetCredentialTaskByResourceIDInternalServerError Error

func (*GetCredentialTaskByResourceIDInternalServerError) getCredentialTaskByResourceIDRes() {}

type GetCredentialTaskByResourceIDOKApplicationJSON []ResourceCredentials

func (*GetCredentialTaskByResourceIDOKApplicationJSON) getCredentialTaskByResourceIDRes() {}

type GetCredentialUnauthorized Error

func (*GetCredentialUnauthorized) getCredentialRes() {}

type GetCredentialsBadRequest Error

func (*GetCredentialsBadRequest) getCredentialsRes() {}

type GetCredentialsForbidden Error

func (*GetCredentialsForbidden) getCredentialsRes() {}

type GetCredentialsInternalServerError Error

func (*GetCredentialsInternalServerError) getCredentialsRes() {}

type GetCredentialsSubTaskBadRequest Error

func (*GetCredentialsSubTaskBadRequest) getCredentialsSubTaskRes() {}

type GetCredentialsSubTaskInternalServerError Error

func (*GetCredentialsSubTaskInternalServerError) getCredentialsSubTaskRes() {}

type GetCredentialsTaskBadRequest Error

func (*GetCredentialsTaskBadRequest) getCredentialsTaskRes() {}

type GetCredentialsTaskInternalServerError Error

func (*GetCredentialsTaskInternalServerError) getCredentialsTaskRes() {}

type GetCredentialsTasksBadRequest Error

func (*GetCredentialsTasksBadRequest) getCredentialsTasksRes() {}

type GetCredentialsTasksInternalServerError Error

func (*GetCredentialsTasksInternalServerError) getCredentialsTasksRes() {}

type GetCredentialsUnauthorized Error

func (*GetCredentialsUnauthorized) getCredentialsRes() {}

type GetCustomIsoByIdBadRequest Error

func (*GetCustomIsoByIdBadRequest) getCustomIsoByIdRes() {}

type GetCustomIsoByIdInternalServerError Error

func (*GetCustomIsoByIdInternalServerError) getCustomIsoByIdRes() {}

type GetCustomIsoByIdNotFound Error

func (*GetCustomIsoByIdNotFound) getCustomIsoByIdRes() {}

type GetDatastoreQueryResponse1BadRequest Error

func (*GetDatastoreQueryResponse1BadRequest) getDatastoreQueryResponse1Res() {}

type GetDatastoreQueryResponse1InternalServerError Error

func (*GetDatastoreQueryResponse1InternalServerError) getDatastoreQueryResponse1Res() {}

type GetDatastoreQueryResponseBadRequest Error

func (*GetDatastoreQueryResponseBadRequest) getDatastoreQueryResponseRes() {}

type GetDatastoreQueryResponseInternalServerError Error

func (*GetDatastoreQueryResponseInternalServerError) getDatastoreQueryResponseRes() {}

type GetDatastoreQueryResponseNotFound Error

func (*GetDatastoreQueryResponseNotFound) getDatastoreQueryResponseRes() {}

type GetDnsConfigurationBadRequest Error

func (*GetDnsConfigurationBadRequest) getDnsConfigurationRes() {}

type GetDnsConfigurationInternalServerError Error

func (*GetDnsConfigurationInternalServerError) getDnsConfigurationRes() {}

type GetDomainCertificatesInternalServerError Error

func (*GetDomainCertificatesInternalServerError) getDomainCertificatesRes() {}

type GetDomainCertificatesNotFound Error

func (*GetDomainCertificatesNotFound) getDomainCertificatesRes() {}

type GetDomainEndpointsInternalServerError Error

func (*GetDomainEndpointsInternalServerError) getDomainEndpointsRes() {}

type GetDomainEndpointsNotFound Error

func (*GetDomainEndpointsNotFound) getDomainEndpointsRes() {}

type GetDomainInternalServerError Error

func (*GetDomainInternalServerError) getDomainRes() {}

type GetDomainIsolationPrecheckStatusBadRequest Error

func (*GetDomainIsolationPrecheckStatusBadRequest) getDomainIsolationPrecheckStatusRes() {}

type GetDomainIsolationPrecheckStatusInternalServerError Error

func (*GetDomainIsolationPrecheckStatusInternalServerError) getDomainIsolationPrecheckStatusRes() {}

type GetDomainNotFound Error

func (*GetDomainNotFound) getDomainRes() {}

type GetDomainReleaseViewValidationInternalServerError Error

func (*GetDomainReleaseViewValidationInternalServerError) getDomainReleaseViewValidationRes() {}

type GetDomainReleaseViewValidationNotFound Error

func (*GetDomainReleaseViewValidationNotFound) getDomainReleaseViewValidationRes() {}

type GetDomainTagManagerUrlBadRequest Error

func (*GetDomainTagManagerUrlBadRequest) getDomainTagManagerUrlRes() {}

type GetDomainTagManagerUrlInternalServerError Error

func (*GetDomainTagManagerUrlInternalServerError) getDomainTagManagerUrlRes() {}

type GetDomainUpdateValidationBadRequest Error

func (*GetDomainUpdateValidationBadRequest) getDomainUpdateValidationRes() {}

type GetDomainUpdateValidationNotFound Error

func (*GetDomainUpdateValidationNotFound) getDomainUpdateValidationRes() {}

type GetDomainsBadRequest Error

func (*GetDomainsBadRequest) getDomainsRes() {}

type GetDomainsInternalServerError Error

func (*GetDomainsInternalServerError) getDomainsRes() {}

type GetEdgeClusterInternalServerError Error

func (*GetEdgeClusterInternalServerError) getEdgeClusterRes() {}

type GetEdgeClusterNotFound Error

func (*GetEdgeClusterNotFound) getEdgeClusterRes() {}

type GetEdgeClusterValidationByIDInternalServerError Validation

func (*GetEdgeClusterValidationByIDInternalServerError) getEdgeClusterValidationByIDRes() {}

type GetEdgeClusterValidationByIDOK Validation

func (*GetEdgeClusterValidationByIDOK) getEdgeClusterValidationByIDRes() {}

type GetEdgeClustersBadRequest Error

func (*GetEdgeClustersBadRequest) getEdgeClustersRes() {}

type GetEdgeClustersInternalServerError Error

func (*GetEdgeClustersInternalServerError) getEdgeClustersRes() {}

type GetFIPSConfigurationInternalServerError Fips

func (*GetFIPSConfigurationInternalServerError) getFIPSConfigurationRes() {}

type GetFIPSConfigurationOK Fips

func (*GetFIPSConfigurationOK) getFIPSConfigurationRes() {}

type GetFutureReleasesInternalServerError Error

func (*GetFutureReleasesInternalServerError) getFutureReleasesRes() {}

type GetFutureReleasesNotFound Error

func (*GetFutureReleasesNotFound) getFutureReleasesRes() {}

type GetHealthCheckStatusBadRequest Error

func (*GetHealthCheckStatusBadRequest) getHealthCheckStatusRes() {}

type GetHealthCheckStatusInternalServerError Error

func (*GetHealthCheckStatusInternalServerError) getHealthCheckStatusRes() {}

type GetHealthCheckStatusUnauthorized Error

func (*GetHealthCheckStatusUnauthorized) getHealthCheckStatusRes() {}

type GetHealthCheckTaskBadRequest Error

func (*GetHealthCheckTaskBadRequest) getHealthCheckTaskRes() {}

type GetHealthCheckTaskInternalServerError Error

func (*GetHealthCheckTaskInternalServerError) getHealthCheckTaskRes() {}

type GetHealthCheckTaskUnauthorized Error

func (*GetHealthCheckTaskUnauthorized) getHealthCheckTaskRes() {}

type GetHostCommissionValidationByIDAccepted Validation

func (*GetHostCommissionValidationByIDAccepted) getHostCommissionValidationByIDRes() {}

type GetHostCommissionValidationByIDInternalServerError Validation

func (*GetHostCommissionValidationByIDInternalServerError) getHostCommissionValidationByIDRes() {}

type GetHostInternalServerErrorApplicationJSON string

func (*GetHostInternalServerErrorApplicationJSON) getHostRes() {}

type GetHostQueryResponse1Accepted HostQueryResponse

func (*GetHostQueryResponse1Accepted) getHostQueryResponse1Res() {}

type GetHostQueryResponse1BadRequest Error

func (*GetHostQueryResponse1BadRequest) getHostQueryResponse1Res() {}

type GetHostQueryResponse1InternalServerError Error

func (*GetHostQueryResponse1InternalServerError) getHostQueryResponse1Res() {}

type GetHostQueryResponse1NotFound Error

func (*GetHostQueryResponse1NotFound) getHostQueryResponse1Res() {}

type GetHostQueryResponse1OK HostQueryResponse

func (*GetHostQueryResponse1OK) getHostQueryResponse1Res() {}

type GetHostQueryResponseBadRequest Error

func (*GetHostQueryResponseBadRequest) getHostQueryResponseRes() {}

type GetHostQueryResponseInternalServerError Error

func (*GetHostQueryResponseInternalServerError) getHostQueryResponseRes() {}

type GetHostQueryResponseNotFound Error

func (*GetHostQueryResponseNotFound) getHostQueryResponseRes() {}

type GetHostTagManagerUrlBadRequest Error

func (*GetHostTagManagerUrlBadRequest) getHostTagManagerUrlRes() {}

type GetHostTagManagerUrlInternalServerError Error

func (*GetHostTagManagerUrlInternalServerError) getHostTagManagerUrlRes() {}

type GetHostsBadRequest Error

func (*GetHostsBadRequest) getHostsRes() {}

type GetHostsInternalServerError Error

func (*GetHostsInternalServerError) getHostsRes() {}

type GetHostsPrechecksResponseInternalServerError Error

func (*GetHostsPrechecksResponseInternalServerError) getHostsPrechecksResponseRes() {}

type GetHostsPrechecksResponseNotFound Error

func (*GetHostsPrechecksResponseNotFound) getHostsPrechecksResponseRes() {}

type GetIdentityPrecheckResultInternalServerError ErrorResponse

func (*GetIdentityPrecheckResultInternalServerError) getIdentityPrecheckResultRes() {}

type GetIdentityPrecheckResultNotFound ErrorResponse

func (*GetIdentityPrecheckResultNotFound) getIdentityPrecheckResultRes() {}

type GetIdentityProvidersBadRequest ErrorResponse

func (*GetIdentityProvidersBadRequest) getIdentityProvidersRes() {}

type GetIdentityProvidersInternalServerError ErrorResponse

func (*GetIdentityProvidersInternalServerError) getIdentityProvidersRes() {}

type GetIdentityProvidersUnauthorized ErrorResponse

func (*GetIdentityProvidersUnauthorized) getIdentityProvidersRes() {}

type GetLastAssessmentRunInfoBadRequest Error

func (*GetLastAssessmentRunInfoBadRequest) getLastAssessmentRunInfoRes() {}

type GetLastAssessmentRunInfoInternalServerError Error

func (*GetLastAssessmentRunInfoInternalServerError) getLastAssessmentRunInfoRes() {}

type GetLastAssessmentRunInfoOKApplicationJSON []AssessmentTaskInfo

func (*GetLastAssessmentRunInfoOKApplicationJSON) getLastAssessmentRunInfoRes() {}

type GetLicenseKeyInternalServerError Error

func (*GetLicenseKeyInternalServerError) getLicenseKeyRes() {}

type GetLicenseKeyNotFound Error

func (*GetLicenseKeyNotFound) getLicenseKeyRes() {}

type GetLicenseProductTypesOKApplicationJSON []string

func (*GetLicenseProductTypesOKApplicationJSON) getLicenseProductTypesRes() {}

type GetLocalAccountBadRequest ErrorResponse

func (*GetLocalAccountBadRequest) getLocalAccountRes() {}

type GetLocalAccountInternalServerError ErrorResponse

func (*GetLocalAccountInternalServerError) getLocalAccountRes() {}

type GetLocalAccountUnauthorized ErrorResponse

func (*GetLocalAccountUnauthorized) getLocalAccountRes() {}

type GetLocalOsUserAccountsOKApplicationJSON []LocalOsUserAccount

func (*GetLocalOsUserAccountsOKApplicationJSON) getLocalOsUserAccountsRes() {}

type GetNetworkOfNetworkPoolInternalServerError Error

func (*GetNetworkOfNetworkPoolInternalServerError) getNetworkOfNetworkPoolRes() {}

type GetNetworkOfNetworkPoolNotFound Error

func (*GetNetworkOfNetworkPoolNotFound) getNetworkOfNetworkPoolRes() {}

type GetNetworkPoolByIDInternalServerError Error

func (*GetNetworkPoolByIDInternalServerError) getNetworkPoolByIDRes() {}

type GetNetworkPoolByIDNotFound Error

func (*GetNetworkPoolByIDNotFound) getNetworkPoolByIDRes() {}

type GetNetworkPoolInternalServerError Error

func (*GetNetworkPoolInternalServerError) getNetworkPoolRes() {}

type GetNetworkPoolNotFound Error

func (*GetNetworkPoolNotFound) getNetworkPoolRes() {}

type GetNetworksOfNetworkPoolInternalServerError Error

func (*GetNetworksOfNetworkPoolInternalServerError) getNetworksOfNetworkPoolRes() {}

type GetNetworksOfNetworkPoolNotFound Error

func (*GetNetworksOfNetworkPoolNotFound) getNetworksOfNetworkPoolRes() {}

type GetNsxClusterInternalServerError Error

func (*GetNsxClusterInternalServerError) getNsxClusterRes() {}

type GetNsxClusterNotFound Error

func (*GetNsxClusterNotFound) getNsxClusterRes() {}

type GetNsxClusterQueryResponseAccepted NsxTQueryResponse

func (*GetNsxClusterQueryResponseAccepted) getNsxClusterQueryResponseRes() {}

type GetNsxClusterQueryResponseBadRequest Error

func (*GetNsxClusterQueryResponseBadRequest) getNsxClusterQueryResponseRes() {}

type GetNsxClusterQueryResponseInternalServerError Error

func (*GetNsxClusterQueryResponseInternalServerError) getNsxClusterQueryResponseRes() {}

type GetNsxClusterQueryResponseNotFound Error

func (*GetNsxClusterQueryResponseNotFound) getNsxClusterQueryResponseRes() {}

type GetNsxClusterQueryResponseOK NsxTQueryResponse

func (*GetNsxClusterQueryResponseOK) getNsxClusterQueryResponseRes() {}

type GetNsxClustersBadRequest Error

func (*GetNsxClustersBadRequest) getNsxClustersRes() {}

type GetNsxClustersInternalServerError Error

func (*GetNsxClustersInternalServerError) getNsxClustersRes() {}

type GetNsxIpAddressPoolInternalServerError Error

func (*GetNsxIpAddressPoolInternalServerError) getNsxIpAddressPoolRes() {}

type GetNsxIpAddressPoolNotFound Error

func (*GetNsxIpAddressPoolNotFound) getNsxIpAddressPoolRes() {}

type GetNsxIpAddressPoolsInternalServerError Error

func (*GetNsxIpAddressPoolsInternalServerError) getNsxIpAddressPoolsRes() {}

type GetNsxIpAddressPoolsNotFound Error

func (*GetNsxIpAddressPoolsNotFound) getNsxIpAddressPoolsRes() {}

type GetNsxUpgradeResourcesInternalServerError Error

func (*GetNsxUpgradeResourcesInternalServerError) getNsxUpgradeResourcesRes() {}

type GetNsxUpgradeResourcesNotFound Error

func (*GetNsxUpgradeResourcesNotFound) getNsxUpgradeResourcesRes() {}

type GetNtpConfigurationBadRequest Error

func (*GetNtpConfigurationBadRequest) getNtpConfigurationRes() {}

type GetNtpConfigurationInternalServerError Error

func (*GetNtpConfigurationInternalServerError) getNtpConfigurationRes() {}

type GetPasswordExpirationBadRequest Error

func (*GetPasswordExpirationBadRequest) getPasswordExpirationRes() {}

type GetPasswordExpirationByTaskIDBadRequest Error

func (*GetPasswordExpirationByTaskIDBadRequest) getPasswordExpirationByTaskIDRes() {}

type GetPasswordExpirationByTaskIDInternalServerError Error

func (*GetPasswordExpirationByTaskIDInternalServerError) getPasswordExpirationByTaskIDRes() {}

type GetPasswordExpirationByTaskIDNotFound Error

func (*GetPasswordExpirationByTaskIDNotFound) getPasswordExpirationByTaskIDRes() {}

type GetPasswordExpirationForbidden Error

func (*GetPasswordExpirationForbidden) getPasswordExpirationRes() {}

type GetPasswordExpirationInternalServerError Error

func (*GetPasswordExpirationInternalServerError) getPasswordExpirationRes() {}

type GetPasswordExpirationTooManyRequests Error

func (*GetPasswordExpirationTooManyRequests) getPasswordExpirationRes() {}

type GetPasswordExpirationUnauthorized Error

func (*GetPasswordExpirationUnauthorized) getPasswordExpirationRes() {}

type GetPersonalityInternalServerError Error

func (*GetPersonalityInternalServerError) getPersonalityRes() {}

type GetPersonalityNotFound Error

func (*GetPersonalityNotFound) getPersonalityRes() {}

type GetPrecheckTaskInternalServerError Error

func (*GetPrecheckTaskInternalServerError) getPrecheckTaskRes() {}

type GetPrecheckTaskNotFound Error

func (*GetPrecheckTaskNotFound) getPrecheckTaskRes() {}

type GetProductVersionCatalogInternalServerError Error

func (*GetProductVersionCatalogInternalServerError) getProductVersionCatalogRes() {}

type GetProductVersionCatalogNotFound Error

func (*GetProductVersionCatalogNotFound) getProductVersionCatalogRes() {}

type GetProxyConfigurationInternalServerError ProxyConfiguration

func (*GetProxyConfigurationInternalServerError) getProxyConfigurationRes() {}

type GetProxyConfigurationOK ProxyConfiguration

func (*GetProxyConfigurationOK) getProxyConfigurationRes() {}

type GetPscInternalServerError Error

func (*GetPscInternalServerError) getPscRes() {}

type GetPscNotFound Error

func (*GetPscNotFound) getPscRes() {}

type GetPscsBadRequest Error

func (*GetPscsBadRequest) getPscsRes() {}

type GetPscsInternalServerError Error

func (*GetPscsInternalServerError) getPscsRes() {}

type GetReconciliationTaskBadRequest Error

func (*GetReconciliationTaskBadRequest) getReconciliationTaskRes() {}

type GetReconciliationTaskInternalServerError Error

func (*GetReconciliationTaskInternalServerError) getReconciliationTaskRes() {}

type GetReconciliationTaskNotFound Error

func (*GetReconciliationTaskNotFound) getReconciliationTaskRes() {}

type GetReleaseByDomainInternalServerError Error

func (*GetReleaseByDomainInternalServerError) getReleaseByDomainRes() {}

type GetReleaseByDomainNotFound Error

func (*GetReleaseByDomainNotFound) getReleaseByDomainRes() {}

type GetReleasesInternalServerError Error

func (*GetReleasesInternalServerError) getReleasesRes() {}

type GetReleasesNotFound Error

func (*GetReleasesNotFound) getReleasesRes() {}

type GetResourceCertificatesValidationByIDInternalServerError Error

func (*GetResourceCertificatesValidationByIDInternalServerError) getResourceCertificatesValidationByIDRes() {
}

type GetResourceCertificatesValidationByIDNotFound Error

func (*GetResourceCertificatesValidationByIDNotFound) getResourceCertificatesValidationByIDRes() {}

type GetResourceFunctionalitiesBadRequest Error

func (*GetResourceFunctionalitiesBadRequest) getResourceFunctionalitiesRes() {}

type GetResourceFunctionalitiesInternalServerError Error

func (*GetResourceFunctionalitiesInternalServerError) getResourceFunctionalitiesRes() {}

type GetResourceWarningInternalServerError Error

func (*GetResourceWarningInternalServerError) getResourceWarningRes() {}

type GetResourceWarningNotFound Error

func (*GetResourceWarningNotFound) getResourceWarningRes() {}

type GetResourceWarningsBadRequest Error

func (*GetResourceWarningsBadRequest) getResourceWarningsRes() {}

type GetResourceWarningsInternalServerError Error

func (*GetResourceWarningsInternalServerError) getResourceWarningsRes() {}

type GetResourcesFunctionalitiesAllowedGlobalBadRequest Error

func (*GetResourcesFunctionalitiesAllowedGlobalBadRequest) getResourcesFunctionalitiesAllowedGlobalRes() {
}

type GetResourcesFunctionalitiesAllowedGlobalInternalServerError Error

func (*GetResourcesFunctionalitiesAllowedGlobalInternalServerError) getResourcesFunctionalitiesAllowedGlobalRes() {
}

type GetRestoreTaskBadRequest Error

func (*GetRestoreTaskBadRequest) getRestoreTaskRes() {}

type GetRestoreTaskInternalServerError Error

func (*GetRestoreTaskInternalServerError) getRestoreTaskRes() {}

type GetResultBadRequest Error

func (*GetResultBadRequest) getResultRes() {}

type GetResultInternalServerError Error

func (*GetResultInternalServerError) getResultRes() {}

type GetResultNotFound Error

func (*GetResultNotFound) getResultRes() {}

type GetRolesBadRequest ErrorResponse

func (*GetRolesBadRequest) getRolesRes() {}

type GetRolesInternalServerError ErrorResponse

func (*GetRolesInternalServerError) getRolesRes() {}

type GetRolesUnauthorized ErrorResponse

func (*GetRolesUnauthorized) getRolesRes() {}

type GetSSODomainEntitiesForbidden ErrorResponse

func (*GetSSODomainEntitiesForbidden) getSSODomainEntitiesRes() {}

type GetSSODomainEntitiesInternalServerError ErrorResponse

func (*GetSSODomainEntitiesInternalServerError) getSSODomainEntitiesRes() {}

type GetSSODomainEntitiesUnauthorized ErrorResponse

func (*GetSSODomainEntitiesUnauthorized) getSSODomainEntitiesRes() {}

type GetSSODomainsForbidden ErrorResponse

func (*GetSSODomainsForbidden) getSSODomainsRes() {}

type GetSSODomainsInternalServerError ErrorResponse

func (*GetSSODomainsInternalServerError) getSSODomainsRes() {}

type GetSSODomainsUnauthorized ErrorResponse

func (*GetSSODomainsUnauthorized) getSSODomainsRes() {}

type GetSddcManagerHistoryInternalServerError Error

func (*GetSddcManagerHistoryInternalServerError) getSddcManagerHistoryRes() {}

type GetSddcManagerHistoryNotFound Error

func (*GetSddcManagerHistoryNotFound) getSddcManagerHistoryRes() {}

type GetSddcManagerInfoInternalServerError SddcManagerInfo

func (*GetSddcManagerInfoInternalServerError) getSddcManagerInfoRes() {}

type GetSddcManagerInfoNotFound SddcManagerInfo

func (*GetSddcManagerInfoNotFound) getSddcManagerInfoRes() {}

type GetSddcManagerInfoNotImplemented SddcManagerInfo

func (*GetSddcManagerInfoNotImplemented) getSddcManagerInfoRes() {}

type GetSddcManagerInfoOK SddcManagerInfo

func (*GetSddcManagerInfoOK) getSddcManagerInfoRes() {}

type GetSddcManagerInternalServerError Error

func (*GetSddcManagerInternalServerError) getSddcManagerRes() {}

type GetSddcManagerNotFound Error

func (*GetSddcManagerNotFound) getSddcManagerRes() {}

type GetSddcManagersBadRequest Error

func (*GetSddcManagersBadRequest) getSddcManagersRes() {}

type GetSddcManagersInternalServerError Error

func (*GetSddcManagersInternalServerError) getSddcManagersRes() {}

type GetSddcWs1bOidcInfoBadRequest ErrorResponse

func (*GetSddcWs1bOidcInfoBadRequest) getSddcWs1bOidcInfoRes() {}

type GetSddcWs1bOidcInfoInternalServerError ErrorResponse

func (*GetSddcWs1bOidcInfoInternalServerError) getSddcWs1bOidcInfoRes() {}

type GetSddcWs1bOidcInfoUnauthorized ErrorResponse

func (*GetSddcWs1bOidcInfoUnauthorized) getSddcWs1bOidcInfoRes() {}

type GetSupportBundleStatusBadRequest Error

func (*GetSupportBundleStatusBadRequest) getSupportBundleStatusRes() {}

type GetSupportBundleStatusInternalServerError Error

func (*GetSupportBundleStatusInternalServerError) getSupportBundleStatusRes() {}

type GetSupportBundleStatusUnauthorized Error

func (*GetSupportBundleStatusUnauthorized) getSupportBundleStatusRes() {}

type GetSupportBundleTaskBadRequest Error

func (*GetSupportBundleTaskBadRequest) getSupportBundleTaskRes() {}

type GetSupportBundleTaskInternalServerError Error

func (*GetSupportBundleTaskInternalServerError) getSupportBundleTaskRes() {}

type GetSupportBundleTaskUnauthorized Error

func (*GetSupportBundleTaskUnauthorized) getSupportBundleTaskRes() {}

type GetSystemConfigurationBadRequest ErrorResponse

func (*GetSystemConfigurationBadRequest) getSystemConfigurationRes() {}

type GetSystemConfigurationInternalServerError ErrorResponse

func (*GetSystemConfigurationInternalServerError) getSystemConfigurationRes() {}

type GetSystemReleaseInternalServerError Error

func (*GetSystemReleaseInternalServerError) getSystemReleaseRes() {}

type GetSystemReleaseNotFound Error

func (*GetSystemReleaseNotFound) getSystemReleaseRes() {}

type GetTagAssignableForClusterBadRequest Error

func (*GetTagAssignableForClusterBadRequest) getTagAssignableForClusterRes() {}

type GetTagAssignableForClusterInternalServerError Error

func (*GetTagAssignableForClusterInternalServerError) getTagAssignableForClusterRes() {}

type GetTagsAssignedToClusterBadRequest Error

func (*GetTagsAssignedToClusterBadRequest) getTagsAssignedToClusterRes() {}

type GetTagsAssignedToClusterInternalServerError Error

func (*GetTagsAssignedToClusterInternalServerError) getTagsAssignedToClusterRes() {}

type GetTagsAssignedToClustersBadRequest Error

func (*GetTagsAssignedToClustersBadRequest) getTagsAssignedToClustersRes() {}

type GetTagsAssignedToClustersInternalServerError Error

func (*GetTagsAssignedToClustersInternalServerError) getTagsAssignedToClustersRes() {}

type GetTagsAssignedToDomainBadRequest Error

func (*GetTagsAssignedToDomainBadRequest) getTagsAssignedToDomainRes() {}

type GetTagsAssignedToDomainInternalServerError Error

func (*GetTagsAssignedToDomainInternalServerError) getTagsAssignedToDomainRes() {}

type GetTagsAssignedToDomainsBadRequest Error

func (*GetTagsAssignedToDomainsBadRequest) getTagsAssignedToDomainsRes() {}

type GetTagsAssignedToDomainsInternalServerError Error

func (*GetTagsAssignedToDomainsInternalServerError) getTagsAssignedToDomainsRes() {}

type GetTagsAssignedToHostBadRequest Error

func (*GetTagsAssignedToHostBadRequest) getTagsAssignedToHostRes() {}

type GetTagsAssignedToHostInternalServerError Error

func (*GetTagsAssignedToHostInternalServerError) getTagsAssignedToHostRes() {}

type GetTagsAssignedToHostsBadRequest Error

func (*GetTagsAssignedToHostsBadRequest) getTagsAssignedToHostsRes() {}

type GetTagsAssignedToHostsInternalServerError Error

func (*GetTagsAssignedToHostsInternalServerError) getTagsAssignedToHostsRes() {}

type GetTaskInternalServerError Error

func (*GetTaskInternalServerError) getTaskRes() {}

type GetTaskNotFound Error

func (*GetTaskNotFound) getTaskRes() {}

type GetUiUsersBadRequest ErrorResponse

func (*GetUiUsersBadRequest) getUiUsersRes() {}

type GetUiUsersInternalServerError ErrorResponse

func (*GetUiUsersInternalServerError) getUiUsersRes() {}

type GetUiUsersUnauthorized ErrorResponse

func (*GetUiUsersUnauthorized) getUiUsersRes() {}

type GetUpgradablesByDomainInternalServerError Error

func (*GetUpgradablesByDomainInternalServerError) getUpgradablesByDomainRes() {}

type GetUpgradablesByDomainNotFound Error

func (*GetUpgradablesByDomainNotFound) getUpgradablesByDomainRes() {}

type GetUpgradablesClustersInternalServerError Error

func (*GetUpgradablesClustersInternalServerError) getUpgradablesClustersRes() {}

type GetUpgradablesClustersNotFound Error

func (*GetUpgradablesClustersNotFound) getUpgradablesClustersRes() {}

type GetUpgradeByIdInternalServerError Error

func (*GetUpgradeByIdInternalServerError) getUpgradeByIdRes() {}

type GetUpgradeByIdNotFound Error

func (*GetUpgradeByIdNotFound) getUpgradeByIdRes() {}

type GetUpgradePrecheckByIDBadRequest Error

func (*GetUpgradePrecheckByIDBadRequest) getUpgradePrecheckByIDRes() {}

type GetUpgradePrecheckByIDForbidden Error

func (*GetUpgradePrecheckByIDForbidden) getUpgradePrecheckByIDRes() {}

type GetUpgradePrecheckByIDInternalServerError Error

func (*GetUpgradePrecheckByIDInternalServerError) getUpgradePrecheckByIDRes() {}

type GetUpgradesBadRequest Error

func (*GetUpgradesBadRequest) getUpgradesRes() {}

type GetUpgradesInternalServerError Error

func (*GetUpgradesInternalServerError) getUpgradesRes() {}

type GetUpgradesNotFound Error

func (*GetUpgradesNotFound) getUpgradesRes() {}

type GetUsersBadRequest ErrorResponse

func (*GetUsersBadRequest) getUsersRes() {}

type GetUsersInternalServerError ErrorResponse

func (*GetUsersInternalServerError) getUsersRes() {}

type GetUsersUnauthorized ErrorResponse

func (*GetUsersUnauthorized) getUsersRes() {}

type GetValidationOfDnsConfigurationInternalServerError Validation

func (*GetValidationOfDnsConfigurationInternalServerError) getValidationOfDnsConfigurationRes() {}

type GetValidationOfDnsConfigurationOK Validation

func (*GetValidationOfDnsConfigurationOK) getValidationOfDnsConfigurationRes() {}

type GetValidationOfNtpConfigurationInternalServerError Validation

func (*GetValidationOfNtpConfigurationInternalServerError) getValidationOfNtpConfigurationRes() {}

type GetValidationOfNtpConfigurationOK Validation

func (*GetValidationOfNtpConfigurationOK) getValidationOfNtpConfigurationRes() {}

type GetValidationsOfDNSConfigurationInternalServerErrorApplicationJSON []Validation

func (*GetValidationsOfDNSConfigurationInternalServerErrorApplicationJSON) getValidationsOfDNSConfigurationRes() {
}

type GetValidationsOfNtpConfigurationInternalServerErrorApplicationJSON []Validation

func (*GetValidationsOfNtpConfigurationInternalServerErrorApplicationJSON) getValidationsOfNtpConfigurationRes() {
}

type GetVasaProviderInternalServerError Error

func (*GetVasaProviderInternalServerError) getVasaProviderRes() {}

type GetVasaProviderNotFound Error

func (*GetVasaProviderNotFound) getVasaProviderRes() {}

type GetVasaProviderStorageContainersBadRequest Error

func (*GetVasaProviderStorageContainersBadRequest) getVasaProviderStorageContainersRes() {}

type GetVasaProviderStorageContainersInternalServerError Error

func (*GetVasaProviderStorageContainersInternalServerError) getVasaProviderStorageContainersRes() {}

type GetVasaProviderStorageContainersNotFound Error

func (*GetVasaProviderStorageContainersNotFound) getVasaProviderStorageContainersRes() {}

type GetVasaProviderStorageContainersOKApplicationJSON []StorageContainer

func (*GetVasaProviderStorageContainersOKApplicationJSON) getVasaProviderStorageContainersRes() {}

type GetVasaProviderUserBadRequest Error

func (*GetVasaProviderUserBadRequest) getVasaProviderUserRes() {}

type GetVasaProviderUserInternalServerError Error

func (*GetVasaProviderUserInternalServerError) getVasaProviderUserRes() {}

type GetVasaProviderUserNotFound Error

func (*GetVasaProviderUserNotFound) getVasaProviderUserRes() {}

type GetVasaProviderUserOKApplicationJSON []VasaUser

func (*GetVasaProviderUserOKApplicationJSON) getVasaProviderUserRes() {}

type GetVasaProviderValidationBadRequest Error

func (*GetVasaProviderValidationBadRequest) getVasaProviderValidationRes() {}

type GetVasaProviderValidationInternalServerError Validation

func (*GetVasaProviderValidationInternalServerError) getVasaProviderValidationRes() {}

type GetVasaProviderValidationNotFound Error

func (*GetVasaProviderValidationNotFound) getVasaProviderValidationRes() {}

type GetVasaProviderValidationOK Validation

func (*GetVasaProviderValidationOK) getVasaProviderValidationRes() {}

type GetVasaProvidersBadRequest Error

func (*GetVasaProvidersBadRequest) getVasaProvidersRes() {}

type GetVasaProvidersInternalServerError Error

func (*GetVasaProvidersInternalServerError) getVasaProvidersRes() {}

type GetVcenterInternalServerError Error

func (*GetVcenterInternalServerError) getVcenterRes() {}

type GetVcenterNotFound Error

func (*GetVcenterNotFound) getVcenterRes() {}

type GetVcentersBadRequest Error

func (*GetVcentersBadRequest) getVcentersRes() {}

type GetVcentersInternalServerError Error

func (*GetVcentersInternalServerError) getVcentersRes() {}

type GetVcfServiceInternalServerError Error

func (*GetVcfServiceInternalServerError) getVcfServiceRes() {}

type GetVcfServiceNotFound Error

func (*GetVcfServiceNotFound) getVcfServiceRes() {}

type GetVcfServicesBadRequest Error

func (*GetVcfServicesBadRequest) getVcfServicesRes() {}

type GetVcfServicesInternalServerError Error

func (*GetVcfServicesInternalServerError) getVcfServicesRes() {}

type GetVdsesBadRequest Error

func (*GetVdsesBadRequest) getVdsesRes() {}

type GetVdsesInternalServerError Error

func (*GetVdsesInternalServerError) getVdsesRes() {}

type GetVdsesNotFound Error

func (*GetVdsesNotFound) getVdsesRes() {}

type GetVdsesOKApplicationJSON []Vds

func (*GetVdsesOKApplicationJSON) getVdsesRes() {}

type GetVrslcmValidationBadRequest Error

func (*GetVrslcmValidationBadRequest) getVrslcmValidationRes() {}

type GetVrslcmValidationNotFound Error

func (*GetVrslcmValidationNotFound) getVrslcmValidationRes() {}

type GetVsanHclAttributesInternalServerError Error

func (*GetVsanHclAttributesInternalServerError) getVsanHclAttributesRes() {}

type GetVsanHclAttributesNotFound Error

func (*GetVsanHclAttributesNotFound) getVsanHclAttributesRes() {}

type GetVsanHclConfigurationInternalServerError Error

func (*GetVsanHclConfigurationInternalServerError) getVsanHclConfigurationRes() {}

type GetVsanHclConfigurationNotFound Error

func (*GetVsanHclConfigurationNotFound) getVsanHclConfigurationRes() {}

type GetVsanHealthCheckByQueryIDBadRequest Error

func (*GetVsanHealthCheckByQueryIDBadRequest) getVsanHealthCheckByQueryIDRes() {}

type GetVsanHealthCheckByQueryIDInternalServerError Error

func (*GetVsanHealthCheckByQueryIDInternalServerError) getVsanHealthCheckByQueryIDRes() {}

type GetVsanHealthCheckByTaskIDBadRequest Error

func (*GetVsanHealthCheckByTaskIDBadRequest) getVsanHealthCheckByTaskIDRes() {}

type GetVsanHealthCheckByTaskIDInternalServerError Error

func (*GetVsanHealthCheckByTaskIDInternalServerError) getVsanHealthCheckByTaskIDRes() {}

// Hardware support contains base os, components, hardware support, addOn metadata to install/update
// the appropriate Cloud Foundation software components in your management domain or workload domain.
// Ref: #/components/schemas/HardwareSupportInfo
type HardwareSupportInfo struct {
	// Hardware support packages.
	Packages HardwareSupportInfoPackages `json:"packages"`
}

// GetPackages returns the value of Packages.
func (s *HardwareSupportInfo) GetPackages() HardwareSupportInfoPackages {
	return s.Packages
}

// SetPackages sets the value of Packages.
func (s *HardwareSupportInfo) SetPackages(val HardwareSupportInfoPackages) {
	s.Packages = val
}

// Hardware support packages.
type HardwareSupportInfoPackages map[string]HardwareSupportPackageInfo

func (s *HardwareSupportInfoPackages) init() HardwareSupportInfoPackages {
	m := *s
	if m == nil {
		m = map[string]HardwareSupportPackageInfo{}
		*s = m
	}
	return m
}

// Hardware Support Specification for Firmware Upgrade.
// Ref: #/components/schemas/HardwareSupportPackage
type HardwareSupportPackage struct {
	// Hardware Support Manager name.
	Name string `json:"name"`
	// Hardware Support Manager display name.
	DisplayName OptString `json:"displayName"`
	Pkg         Package   `json:"pkg"`
}

// GetName returns the value of Name.
func (s *HardwareSupportPackage) GetName() string {
	return s.Name
}

// GetDisplayName returns the value of DisplayName.
func (s *HardwareSupportPackage) GetDisplayName() OptString {
	return s.DisplayName
}

// GetPkg returns the value of Pkg.
func (s *HardwareSupportPackage) GetPkg() Package {
	return s.Pkg
}

// SetName sets the value of Name.
func (s *HardwareSupportPackage) SetName(val string) {
	s.Name = val
}

// SetDisplayName sets the value of DisplayName.
func (s *HardwareSupportPackage) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetPkg sets the value of Pkg.
func (s *HardwareSupportPackage) SetPkg(val Package) {
	s.Pkg = val
}

// Hardware Support Package contains metadata regarding the package, version to install/update the
// appropriate Cloud Foundation software components in your management domain or workload domain.
// Ref: #/components/schemas/HardwareSupportPackageInfo
type HardwareSupportPackageInfo struct {
	// Hardware support package name.
	Pkg string `json:"pkg"`
	// Hardware support package version.
	Version string `json:"version"`
}

// GetPkg returns the value of Pkg.
func (s *HardwareSupportPackageInfo) GetPkg() string {
	return s.Pkg
}

// GetVersion returns the value of Version.
func (s *HardwareSupportPackageInfo) GetVersion() string {
	return s.Version
}

// SetPkg sets the value of Pkg.
func (s *HardwareSupportPackageInfo) SetPkg(val string) {
	s.Pkg = val
}

// SetVersion sets the value of Version.
func (s *HardwareSupportPackageInfo) SetVersion(val string) {
	s.Version = val
}

// Available Hardware Support Manager details.
// Ref: #/components/schemas/HardwareSupportPackages
type HardwareSupportPackages struct {
	// Hardware Support Manager name.
	Name string `json:"name"`
	// Hardware Support Manager display name.
	DisplayName string `json:"displayName"`
	// Hardware Support Packages.
	Packages []Package `json:"packages"`
}

// GetName returns the value of Name.
func (s *HardwareSupportPackages) GetName() string {
	return s.Name
}

// GetDisplayName returns the value of DisplayName.
func (s *HardwareSupportPackages) GetDisplayName() string {
	return s.DisplayName
}

// GetPackages returns the value of Packages.
func (s *HardwareSupportPackages) GetPackages() []Package {
	return s.Packages
}

// SetName sets the value of Name.
func (s *HardwareSupportPackages) SetName(val string) {
	s.Name = val
}

// SetDisplayName sets the value of DisplayName.
func (s *HardwareSupportPackages) SetDisplayName(val string) {
	s.DisplayName = val
}

// SetPackages sets the value of Packages.
func (s *HardwareSupportPackages) SetPackages(val []Package) {
	s.Packages = val
}

// Hardware Support Specification for Firmware Upgrade.
// Ref: #/components/schemas/HardwareSupportSpec
type HardwareSupportSpec struct {
	// Hardware Support Manager name.
	Name        string      `json:"name"`
	PackageSpec PackageSpec `json:"packageSpec"`
}

// GetName returns the value of Name.
func (s *HardwareSupportSpec) GetName() string {
	return s.Name
}

// GetPackageSpec returns the value of PackageSpec.
func (s *HardwareSupportSpec) GetPackageSpec() PackageSpec {
	return s.PackageSpec
}

// SetName sets the value of Name.
func (s *HardwareSupportSpec) SetName(val string) {
	s.Name = val
}

// SetPackageSpec sets the value of PackageSpec.
func (s *HardwareSupportSpec) SetPackageSpec(val PackageSpec) {
	s.PackageSpec = val
}

// VSAN remote datastore mount related data for Cluster.
// Ref: #/components/schemas/HciMeshData
type HciMeshData struct {
	// Cluster name.
	Name OptString `json:"name"`
	// VSAN remote datastore mount enabled status.
	IsHciMeshEnabled OptBool `json:"isHciMeshEnabled"`
	// Remote Datastore.
	RemoteDatastore OptString `json:"remoteDatastore"`
	// Primary Datastore Id.
	PrimaryDataStoreId OptString `json:"primaryDataStoreId"`
	// VSAN Datastores.
	VsanDataStores []string `json:"vsanDataStores"`
	// Client Cluster.
	ClientClusters []string `json:"clientClusters"`
	// Remote Datastore Infos.
	RemoteDatastoreInfos []RemoteDatastoreInfo `json:"remoteDatastoreInfos"`
	// Is Cluster Server.
	IsServer OptBool `json:"isServer"`
	// Is Cluster Client.
	IsClient OptBool `json:"isClient"`
	// Is Cluster Compute only.
	ComputeOnlyClient OptBool `json:"computeOnlyClient"`
	// Client clusters count.
	NumberOfClients OptInt32 `json:"numberOfClients"`
	// Server clusters count.
	NumberOfServers OptInt32 `json:"numberOfServers"`
}

// GetName returns the value of Name.
func (s *HciMeshData) GetName() OptString {
	return s.Name
}

// GetIsHciMeshEnabled returns the value of IsHciMeshEnabled.
func (s *HciMeshData) GetIsHciMeshEnabled() OptBool {
	return s.IsHciMeshEnabled
}

// GetRemoteDatastore returns the value of RemoteDatastore.
func (s *HciMeshData) GetRemoteDatastore() OptString {
	return s.RemoteDatastore
}

// GetPrimaryDataStoreId returns the value of PrimaryDataStoreId.
func (s *HciMeshData) GetPrimaryDataStoreId() OptString {
	return s.PrimaryDataStoreId
}

// GetVsanDataStores returns the value of VsanDataStores.
func (s *HciMeshData) GetVsanDataStores() []string {
	return s.VsanDataStores
}

// GetClientClusters returns the value of ClientClusters.
func (s *HciMeshData) GetClientClusters() []string {
	return s.ClientClusters
}

// GetRemoteDatastoreInfos returns the value of RemoteDatastoreInfos.
func (s *HciMeshData) GetRemoteDatastoreInfos() []RemoteDatastoreInfo {
	return s.RemoteDatastoreInfos
}

// GetIsServer returns the value of IsServer.
func (s *HciMeshData) GetIsServer() OptBool {
	return s.IsServer
}

// GetIsClient returns the value of IsClient.
func (s *HciMeshData) GetIsClient() OptBool {
	return s.IsClient
}

// GetComputeOnlyClient returns the value of ComputeOnlyClient.
func (s *HciMeshData) GetComputeOnlyClient() OptBool {
	return s.ComputeOnlyClient
}

// GetNumberOfClients returns the value of NumberOfClients.
func (s *HciMeshData) GetNumberOfClients() OptInt32 {
	return s.NumberOfClients
}

// GetNumberOfServers returns the value of NumberOfServers.
func (s *HciMeshData) GetNumberOfServers() OptInt32 {
	return s.NumberOfServers
}

// SetName sets the value of Name.
func (s *HciMeshData) SetName(val OptString) {
	s.Name = val
}

// SetIsHciMeshEnabled sets the value of IsHciMeshEnabled.
func (s *HciMeshData) SetIsHciMeshEnabled(val OptBool) {
	s.IsHciMeshEnabled = val
}

// SetRemoteDatastore sets the value of RemoteDatastore.
func (s *HciMeshData) SetRemoteDatastore(val OptString) {
	s.RemoteDatastore = val
}

// SetPrimaryDataStoreId sets the value of PrimaryDataStoreId.
func (s *HciMeshData) SetPrimaryDataStoreId(val OptString) {
	s.PrimaryDataStoreId = val
}

// SetVsanDataStores sets the value of VsanDataStores.
func (s *HciMeshData) SetVsanDataStores(val []string) {
	s.VsanDataStores = val
}

// SetClientClusters sets the value of ClientClusters.
func (s *HciMeshData) SetClientClusters(val []string) {
	s.ClientClusters = val
}

// SetRemoteDatastoreInfos sets the value of RemoteDatastoreInfos.
func (s *HciMeshData) SetRemoteDatastoreInfos(val []RemoteDatastoreInfo) {
	s.RemoteDatastoreInfos = val
}

// SetIsServer sets the value of IsServer.
func (s *HciMeshData) SetIsServer(val OptBool) {
	s.IsServer = val
}

// SetIsClient sets the value of IsClient.
func (s *HciMeshData) SetIsClient(val OptBool) {
	s.IsClient = val
}

// SetComputeOnlyClient sets the value of ComputeOnlyClient.
func (s *HciMeshData) SetComputeOnlyClient(val OptBool) {
	s.ComputeOnlyClient = val
}

// SetNumberOfClients sets the value of NumberOfClients.
func (s *HciMeshData) SetNumberOfClients(val OptInt32) {
	s.NumberOfClients = val
}

// SetNumberOfServers sets the value of NumberOfServers.
func (s *HciMeshData) SetNumberOfServers(val OptInt32) {
	s.NumberOfServers = val
}

// HealthCheckQueryResult.
// Ref: #/components/schemas/HealthCheckQueryResult
type HealthCheckQueryResult struct {
	// Result id.
	ResultId string `json:"resultId"`
	// Status.
	Status string `json:"status"`
	// Result.
	Result []HealthCheckResult `json:"result"`
}

// GetResultId returns the value of ResultId.
func (s *HealthCheckQueryResult) GetResultId() string {
	return s.ResultId
}

// GetStatus returns the value of Status.
func (s *HealthCheckQueryResult) GetStatus() string {
	return s.Status
}

// GetResult returns the value of Result.
func (s *HealthCheckQueryResult) GetResult() []HealthCheckResult {
	return s.Result
}

// SetResultId sets the value of ResultId.
func (s *HealthCheckQueryResult) SetResultId(val string) {
	s.ResultId = val
}

// SetStatus sets the value of Status.
func (s *HealthCheckQueryResult) SetStatus(val string) {
	s.Status = val
}

// SetResult sets the value of Result.
func (s *HealthCheckQueryResult) SetResult(val []HealthCheckResult) {
	s.Result = val
}

func (*HealthCheckQueryResult) getVsanHealthCheckByDomainRes()  {}
func (*HealthCheckQueryResult) getVsanHealthCheckByQueryIDRes() {}

// HealthCheckResult.
// Ref: #/components/schemas/HealthCheckResult
type HealthCheckResult struct {
	// Health Check id.
	ID string `json:"id"`
	// Health Check name.
	Name string `json:"name"`
	// Health check description.
	Description string `json:"description"`
	// Type of the health check.
	Type OptString `json:"type"`
	// Type of the health status.
	Status OptString `json:"status"`
	// Type of the health status.
	ResourceType OptString `json:"resourceType"`
	// ID of the resource, if the ResourceType is CLUSTER, then the resourceId == ClusterId.
	ResourceId OptString `json:"resourceId"`
	// Name of  resource, if the ResourceType is CLUSTER, then the resourceName == ClusterName.
	ResourceName OptString `json:"resourceName"`
}

// GetID returns the value of ID.
func (s *HealthCheckResult) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *HealthCheckResult) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *HealthCheckResult) GetDescription() string {
	return s.Description
}

// GetType returns the value of Type.
func (s *HealthCheckResult) GetType() OptString {
	return s.Type
}

// GetStatus returns the value of Status.
func (s *HealthCheckResult) GetStatus() OptString {
	return s.Status
}

// GetResourceType returns the value of ResourceType.
func (s *HealthCheckResult) GetResourceType() OptString {
	return s.ResourceType
}

// GetResourceId returns the value of ResourceId.
func (s *HealthCheckResult) GetResourceId() OptString {
	return s.ResourceId
}

// GetResourceName returns the value of ResourceName.
func (s *HealthCheckResult) GetResourceName() OptString {
	return s.ResourceName
}

// SetID sets the value of ID.
func (s *HealthCheckResult) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *HealthCheckResult) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *HealthCheckResult) SetDescription(val string) {
	s.Description = val
}

// SetType sets the value of Type.
func (s *HealthCheckResult) SetType(val OptString) {
	s.Type = val
}

// SetStatus sets the value of Status.
func (s *HealthCheckResult) SetStatus(val OptString) {
	s.Status = val
}

// SetResourceType sets the value of ResourceType.
func (s *HealthCheckResult) SetResourceType(val OptString) {
	s.ResourceType = val
}

// SetResourceId sets the value of ResourceId.
func (s *HealthCheckResult) SetResourceId(val OptString) {
	s.ResourceId = val
}

// SetResourceName sets the value of ResourceName.
func (s *HealthCheckResult) SetResourceName(val OptString) {
	s.ResourceName = val
}

// HealthCheck.
// Ref: #/components/schemas/HealthCheckSpec
type HealthCheckSpec struct {
	// Health Check id.
	ID string `json:"id"`
	// Health Check name.
	Name string `json:"name"`
	// Health check status.
	Status string `json:"status"`
	// Resource Type.
	ResourceType string `json:"resourceType"`
	// Name of the resource, if the ResourceType is CLUSTER, then the resourceName == ClusterName.
	ResourceName OptString `json:"resourceName"`
}

// GetID returns the value of ID.
func (s *HealthCheckSpec) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *HealthCheckSpec) GetName() string {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *HealthCheckSpec) GetStatus() string {
	return s.Status
}

// GetResourceType returns the value of ResourceType.
func (s *HealthCheckSpec) GetResourceType() string {
	return s.ResourceType
}

// GetResourceName returns the value of ResourceName.
func (s *HealthCheckSpec) GetResourceName() OptString {
	return s.ResourceName
}

// SetID sets the value of ID.
func (s *HealthCheckSpec) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *HealthCheckSpec) SetName(val string) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *HealthCheckSpec) SetStatus(val string) {
	s.Status = val
}

// SetResourceType sets the value of ResourceType.
func (s *HealthCheckSpec) SetResourceType(val string) {
	s.ResourceType = val
}

// SetResourceName sets the value of ResourceName.
func (s *HealthCheckSpec) SetResourceName(val OptString) {
	s.ResourceName = val
}

// HealthCheckTask.
// Ref: #/components/schemas/HealthCheckTask
type HealthCheckTask struct {
	// Health Check task id.
	ID string `json:"id"`
	// Health Check task status.
	Status string `json:"status"`
	// Health Check resource status.
	ResourceStatus HealthCheckTaskResourceStatus `json:"resourceStatus"`
}

// GetID returns the value of ID.
func (s *HealthCheckTask) GetID() string {
	return s.ID
}

// GetStatus returns the value of Status.
func (s *HealthCheckTask) GetStatus() string {
	return s.Status
}

// GetResourceStatus returns the value of ResourceStatus.
func (s *HealthCheckTask) GetResourceStatus() HealthCheckTaskResourceStatus {
	return s.ResourceStatus
}

// SetID sets the value of ID.
func (s *HealthCheckTask) SetID(val string) {
	s.ID = val
}

// SetStatus sets the value of Status.
func (s *HealthCheckTask) SetStatus(val string) {
	s.Status = val
}

// SetResourceStatus sets the value of ResourceStatus.
func (s *HealthCheckTask) SetResourceStatus(val HealthCheckTaskResourceStatus) {
	s.ResourceStatus = val
}

func (*HealthCheckTask) getVsanHealthCheckByTaskIDRes()    {}
func (*HealthCheckTask) updateVsanHealthCheckByDomainRes() {}

// Health Check resource status.
type HealthCheckTaskResourceStatus map[string]string

func (s *HealthCheckTaskResourceStatus) init() HealthCheckTaskResourceStatus {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Sos Health Checks.
// Ref: #/components/schemas/HealthChecks
type HealthChecks struct {
	// Performs checks on Services health.
	ServicesHealth OptBool `json:"servicesHealth"`
	// Performs NTP checks for components.
	NtpHealth OptBool `json:"ntpHealth"`
	// Performs some generic health checks.
	GeneralHealth OptBool `json:"generalHealth"`
	// Performs Certificate health checks.
	CertificateHealth OptBool `json:"certificateHealth"`
	// Performs Password Expiry checks.
	PasswordHealth OptBool `json:"passwordHealth"`
	// Performs Connectivity health checks.
	ConnectivityHealth OptBool `json:"connectivityHealth"`
	// Performs Compute Health checks.
	ComputeHealth OptBool `json:"computeHealth"`
	// Performs Storage Health checks.
	StorageHealth OptBool `json:"storageHealth"`
	// Performs DNS Health checks.
	DnsHealth OptBool `json:"dnsHealth"`
	// Performs HardwareCompatibilityHealth Health checks.
	HardwareCompatibilityHealth OptBool `json:"hardwareCompatibilityHealth"`
	// Perform version checks for VCF components.
	VersionHealth OptBool `json:"versionHealth"`
}

// GetServicesHealth returns the value of ServicesHealth.
func (s *HealthChecks) GetServicesHealth() OptBool {
	return s.ServicesHealth
}

// GetNtpHealth returns the value of NtpHealth.
func (s *HealthChecks) GetNtpHealth() OptBool {
	return s.NtpHealth
}

// GetGeneralHealth returns the value of GeneralHealth.
func (s *HealthChecks) GetGeneralHealth() OptBool {
	return s.GeneralHealth
}

// GetCertificateHealth returns the value of CertificateHealth.
func (s *HealthChecks) GetCertificateHealth() OptBool {
	return s.CertificateHealth
}

// GetPasswordHealth returns the value of PasswordHealth.
func (s *HealthChecks) GetPasswordHealth() OptBool {
	return s.PasswordHealth
}

// GetConnectivityHealth returns the value of ConnectivityHealth.
func (s *HealthChecks) GetConnectivityHealth() OptBool {
	return s.ConnectivityHealth
}

// GetComputeHealth returns the value of ComputeHealth.
func (s *HealthChecks) GetComputeHealth() OptBool {
	return s.ComputeHealth
}

// GetStorageHealth returns the value of StorageHealth.
func (s *HealthChecks) GetStorageHealth() OptBool {
	return s.StorageHealth
}

// GetDnsHealth returns the value of DnsHealth.
func (s *HealthChecks) GetDnsHealth() OptBool {
	return s.DnsHealth
}

// GetHardwareCompatibilityHealth returns the value of HardwareCompatibilityHealth.
func (s *HealthChecks) GetHardwareCompatibilityHealth() OptBool {
	return s.HardwareCompatibilityHealth
}

// GetVersionHealth returns the value of VersionHealth.
func (s *HealthChecks) GetVersionHealth() OptBool {
	return s.VersionHealth
}

// SetServicesHealth sets the value of ServicesHealth.
func (s *HealthChecks) SetServicesHealth(val OptBool) {
	s.ServicesHealth = val
}

// SetNtpHealth sets the value of NtpHealth.
func (s *HealthChecks) SetNtpHealth(val OptBool) {
	s.NtpHealth = val
}

// SetGeneralHealth sets the value of GeneralHealth.
func (s *HealthChecks) SetGeneralHealth(val OptBool) {
	s.GeneralHealth = val
}

// SetCertificateHealth sets the value of CertificateHealth.
func (s *HealthChecks) SetCertificateHealth(val OptBool) {
	s.CertificateHealth = val
}

// SetPasswordHealth sets the value of PasswordHealth.
func (s *HealthChecks) SetPasswordHealth(val OptBool) {
	s.PasswordHealth = val
}

// SetConnectivityHealth sets the value of ConnectivityHealth.
func (s *HealthChecks) SetConnectivityHealth(val OptBool) {
	s.ConnectivityHealth = val
}

// SetComputeHealth sets the value of ComputeHealth.
func (s *HealthChecks) SetComputeHealth(val OptBool) {
	s.ComputeHealth = val
}

// SetStorageHealth sets the value of StorageHealth.
func (s *HealthChecks) SetStorageHealth(val OptBool) {
	s.StorageHealth = val
}

// SetDnsHealth sets the value of DnsHealth.
func (s *HealthChecks) SetDnsHealth(val OptBool) {
	s.DnsHealth = val
}

// SetHardwareCompatibilityHealth sets the value of HardwareCompatibilityHealth.
func (s *HealthChecks) SetHardwareCompatibilityHealth(val OptBool) {
	s.HardwareCompatibilityHealth = val
}

// SetVersionHealth sets the value of VersionHealth.
func (s *HealthChecks) SetVersionHealth(val OptBool) {
	s.VersionHealth = val
}

// Ref: #/components/schemas/HealthSummary
type HealthSummary struct {
	// Health summary collection status.
	Status OptString `json:"status"`
	// CreationTimestamp.
	CreationTimestamp OptString `json:"creationTimestamp"`
	// Name of the Operation.
	Description OptString `json:"description"`
	// Indicate if bundle is available in file system.
	BundleAvailable OptString `json:"bundleAvailable"`
	// Id of the Support Bundle task.
	ID OptString `json:"id"`
	// CompletionTimestamp.
	CompletionTimestamp OptString `json:"completionTimestamp"`
	// Name of the Support Bundle.
	BundleName OptString `json:"bundleName"`
}

// GetStatus returns the value of Status.
func (s *HealthSummary) GetStatus() OptString {
	return s.Status
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *HealthSummary) GetCreationTimestamp() OptString {
	return s.CreationTimestamp
}

// GetDescription returns the value of Description.
func (s *HealthSummary) GetDescription() OptString {
	return s.Description
}

// GetBundleAvailable returns the value of BundleAvailable.
func (s *HealthSummary) GetBundleAvailable() OptString {
	return s.BundleAvailable
}

// GetID returns the value of ID.
func (s *HealthSummary) GetID() OptString {
	return s.ID
}

// GetCompletionTimestamp returns the value of CompletionTimestamp.
func (s *HealthSummary) GetCompletionTimestamp() OptString {
	return s.CompletionTimestamp
}

// GetBundleName returns the value of BundleName.
func (s *HealthSummary) GetBundleName() OptString {
	return s.BundleName
}

// SetStatus sets the value of Status.
func (s *HealthSummary) SetStatus(val OptString) {
	s.Status = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *HealthSummary) SetCreationTimestamp(val OptString) {
	s.CreationTimestamp = val
}

// SetDescription sets the value of Description.
func (s *HealthSummary) SetDescription(val OptString) {
	s.Description = val
}

// SetBundleAvailable sets the value of BundleAvailable.
func (s *HealthSummary) SetBundleAvailable(val OptString) {
	s.BundleAvailable = val
}

// SetID sets the value of ID.
func (s *HealthSummary) SetID(val OptString) {
	s.ID = val
}

// SetCompletionTimestamp sets the value of CompletionTimestamp.
func (s *HealthSummary) SetCompletionTimestamp(val OptString) {
	s.CompletionTimestamp = val
}

// SetBundleName sets the value of BundleName.
func (s *HealthSummary) SetBundleName(val OptString) {
	s.BundleName = val
}

func (*HealthSummary) getHealthCheckStatusRes() {}
func (*HealthSummary) startHealthCheckRes()     {}

// HealthSummary config.
// Ref: #/components/schemas/HealthSummaryConfig
type HealthSummaryConfig struct {
	// Skip known_hosts file for HealthSummary.
	SkipKnownHostCheck OptBool `json:"skipKnownHostCheck"`
	// Run SOS operations, even if there is a Workload running.
	Force OptBool `json:"force"`
}

// GetSkipKnownHostCheck returns the value of SkipKnownHostCheck.
func (s *HealthSummaryConfig) GetSkipKnownHostCheck() OptBool {
	return s.SkipKnownHostCheck
}

// GetForce returns the value of Force.
func (s *HealthSummaryConfig) GetForce() OptBool {
	return s.Force
}

// SetSkipKnownHostCheck sets the value of SkipKnownHostCheck.
func (s *HealthSummaryConfig) SetSkipKnownHostCheck(val OptBool) {
	s.SkipKnownHostCheck = val
}

// SetForce sets the value of Force.
func (s *HealthSummaryConfig) SetForce(val OptBool) {
	s.Force = val
}

// Sos Additional Reports for Health Checks.
// Ref: #/components/schemas/HealthSummaryIncludeItems
type HealthSummaryIncludeItems struct {
	// Collect Vcf Summary Reports.
	SummaryReport OptBool `json:"summaryReport"`
	// Collect VCF LCM Upgrade Pre-check Reports, Default value is False.
	PrecheckReport OptBool `json:"precheckReport"`
}

// GetSummaryReport returns the value of SummaryReport.
func (s *HealthSummaryIncludeItems) GetSummaryReport() OptBool {
	return s.SummaryReport
}

// GetPrecheckReport returns the value of PrecheckReport.
func (s *HealthSummaryIncludeItems) GetPrecheckReport() OptBool {
	return s.PrecheckReport
}

// SetSummaryReport sets the value of SummaryReport.
func (s *HealthSummaryIncludeItems) SetSummaryReport(val OptBool) {
	s.SummaryReport = val
}

// SetPrecheckReport sets the value of PrecheckReport.
func (s *HealthSummaryIncludeItems) SetPrecheckReport(val OptBool) {
	s.PrecheckReport = val
}

// Sos options for support health checks.
// Ref: #/components/schemas/HealthSummaryOption
type HealthSummaryOption struct {
	Config  OptHealthSummaryConfig       `json:"config"`
	Include OptHealthSummaryIncludeItems `json:"include"`
}

// GetConfig returns the value of Config.
func (s *HealthSummaryOption) GetConfig() OptHealthSummaryConfig {
	return s.Config
}

// GetInclude returns the value of Include.
func (s *HealthSummaryOption) GetInclude() OptHealthSummaryIncludeItems {
	return s.Include
}

// SetConfig sets the value of Config.
func (s *HealthSummaryOption) SetConfig(val OptHealthSummaryConfig) {
	s.Config = val
}

// SetInclude sets the value of Include.
func (s *HealthSummaryOption) SetInclude(val OptHealthSummaryIncludeItems) {
	s.Include = val
}

// Domain and cluster under which logs should be collected.
// Ref: #/components/schemas/HealthSummaryScope
type HealthSummaryScope struct {
	// Include free hosts.
	IncludeFreeHosts OptBool `json:"includeFreeHosts"`
	// Include all domains for SOS operation.
	IncludeAllDomains OptBool `json:"includeAllDomains"`
	// Domains and Clusters for SOS operation.
	Domains []Domains `json:"domains"`
}

// GetIncludeFreeHosts returns the value of IncludeFreeHosts.
func (s *HealthSummaryScope) GetIncludeFreeHosts() OptBool {
	return s.IncludeFreeHosts
}

// GetIncludeAllDomains returns the value of IncludeAllDomains.
func (s *HealthSummaryScope) GetIncludeAllDomains() OptBool {
	return s.IncludeAllDomains
}

// GetDomains returns the value of Domains.
func (s *HealthSummaryScope) GetDomains() []Domains {
	return s.Domains
}

// SetIncludeFreeHosts sets the value of IncludeFreeHosts.
func (s *HealthSummaryScope) SetIncludeFreeHosts(val OptBool) {
	s.IncludeFreeHosts = val
}

// SetIncludeAllDomains sets the value of IncludeAllDomains.
func (s *HealthSummaryScope) SetIncludeAllDomains(val OptBool) {
	s.IncludeAllDomains = val
}

// SetDomains sets the value of Domains.
func (s *HealthSummaryScope) SetDomains(val []Domains) {
	s.Domains = val
}

// Ref: #/components/schemas/HealthSummarySpec
type HealthSummarySpec struct {
	Options      OptHealthSummaryOption `json:"options"`
	Scope        OptHealthSummaryScope  `json:"scope"`
	HealthChecks OptHealthChecks        `json:"healthChecks"`
}

// GetOptions returns the value of Options.
func (s *HealthSummarySpec) GetOptions() OptHealthSummaryOption {
	return s.Options
}

// GetScope returns the value of Scope.
func (s *HealthSummarySpec) GetScope() OptHealthSummaryScope {
	return s.Scope
}

// GetHealthChecks returns the value of HealthChecks.
func (s *HealthSummarySpec) GetHealthChecks() OptHealthChecks {
	return s.HealthChecks
}

// SetOptions sets the value of Options.
func (s *HealthSummarySpec) SetOptions(val OptHealthSummaryOption) {
	s.Options = val
}

// SetScope sets the value of Scope.
func (s *HealthSummarySpec) SetScope(val OptHealthSummaryScope) {
	s.Scope = val
}

// SetHealthChecks sets the value of HealthChecks.
func (s *HealthSummarySpec) SetHealthChecks(val OptHealthChecks) {
	s.HealthChecks = val
}

// This specification contains high availability settings.
// Ref: #/components/schemas/HighAvailability
type HighAvailability struct {
	Enabled bool `json:"enabled"`
}

// GetEnabled returns the value of Enabled.
func (s *HighAvailability) GetEnabled() bool {
	return s.Enabled
}

// SetEnabled sets the value of Enabled.
func (s *HighAvailability) SetEnabled(val bool) {
	s.Enabled = val
}

// Represents version change history for a resource.
// Ref: #/components/schemas/History
type History struct {
	// The list of version change.
	Versions []Version `json:"versions"`
}

// GetVersions returns the value of Versions.
func (s *History) GetVersions() []Version {
	return s.Versions
}

// SetVersions sets the value of Versions.
func (s *History) SetVersions(val []Version) {
	s.Versions = val
}

func (*History) getSddcManagerHistoryRes() {}

// Represents an Esxi host in the system.
// Ref: #/components/schemas/Host
type Host struct {
	// ID of the host.
	ID OptString `json:"id"`
	// Serial Number of the host.
	SerialNumber OptString `json:"serialNumber"`
	// ESXi software version of the host.
	EsxiVersion OptString `json:"esxiVersion"`
	// SSH Thumbprint of the host.
	SshThumbprint OptString `json:"sshThumbprint"`
	// SSL Thumbprint of the host.
	SslThumbprint OptString `json:"sslThumbprint"`
	// FQDN of the host.
	Fqdn OptString `json:"fqdn"`
	// Hardware vendor of the host.
	HardwareVendor OptString `json:"hardwareVendor"`
	// Hardware model of the host.
	HardwareModel OptString `json:"hardwareModel"`
	// Is the host a primary host in VxRail HCI Context.
	IsPrimary OptBool `json:"isPrimary"`
	// Is the host vSAN ESA eligible in VxRail HCI Context.
	IsVsanEsaEligible OptBool `json:"isVsanEsaEligible"`
	// Information about IP addresses assigned to the host.
	IpAddresses []IpAddress `json:"ipAddresses"`
	CPU         OptCPU      `json:"cpu"`
	Memory      OptMemory   `json:"memory"`
	Storage     OptStorage  `json:"storage"`
	// Information about physical NICs on the host.
	PhysicalNics []PhysicalNic `json:"physicalNics"`
	// Information about Networks on the host This is deprecated.
	//
	// Deprecated: schema marks this property as deprecated.
	Networks []Network `json:"networks"`
	// Information about Networks on the host.
	HostNetworks []HostNetwork           `json:"hostNetworks"`
	Domain       OptDomainReference      `json:"domain"`
	Networkpool  OptNetworkPoolReference `json:"networkpool"`
	Cluster      OptClusterReference     `json:"cluster"`
	// Status of the host.
	Status OptString `json:"status"`
	// Information about the host compatible storage type.
	CompatibleStorageType OptString `json:"compatibleStorageType"`
	// Bundle repositry datastore for this host.
	BundleRepoDatastore OptString `json:"bundleRepoDatastore"`
	// Information about the storage type of the host, true if the host is hybrid.
	Hybrid       OptBool         `json:"hybrid"`
	SoftwareInfo OptSoftwareInfo `json:"softwareInfo"`
	// Deprecated, this list will always be returned empty.
	//
	// Deprecated: schema marks this property as deprecated.
	Tags []Tag `json:"tags"`
	// Information about the configuration status of the host.
	ConfigurationStatus OptString `json:"configurationStatus"`
	// Information about the datastore type of the host.
	DatastoreType OptString `json:"datastoreType"`
}

// GetID returns the value of ID.
func (s *Host) GetID() OptString {
	return s.ID
}

// GetSerialNumber returns the value of SerialNumber.
func (s *Host) GetSerialNumber() OptString {
	return s.SerialNumber
}

// GetEsxiVersion returns the value of EsxiVersion.
func (s *Host) GetEsxiVersion() OptString {
	return s.EsxiVersion
}

// GetSshThumbprint returns the value of SshThumbprint.
func (s *Host) GetSshThumbprint() OptString {
	return s.SshThumbprint
}

// GetSslThumbprint returns the value of SslThumbprint.
func (s *Host) GetSslThumbprint() OptString {
	return s.SslThumbprint
}

// GetFqdn returns the value of Fqdn.
func (s *Host) GetFqdn() OptString {
	return s.Fqdn
}

// GetHardwareVendor returns the value of HardwareVendor.
func (s *Host) GetHardwareVendor() OptString {
	return s.HardwareVendor
}

// GetHardwareModel returns the value of HardwareModel.
func (s *Host) GetHardwareModel() OptString {
	return s.HardwareModel
}

// GetIsPrimary returns the value of IsPrimary.
func (s *Host) GetIsPrimary() OptBool {
	return s.IsPrimary
}

// GetIsVsanEsaEligible returns the value of IsVsanEsaEligible.
func (s *Host) GetIsVsanEsaEligible() OptBool {
	return s.IsVsanEsaEligible
}

// GetIpAddresses returns the value of IpAddresses.
func (s *Host) GetIpAddresses() []IpAddress {
	return s.IpAddresses
}

// GetCPU returns the value of CPU.
func (s *Host) GetCPU() OptCPU {
	return s.CPU
}

// GetMemory returns the value of Memory.
func (s *Host) GetMemory() OptMemory {
	return s.Memory
}

// GetStorage returns the value of Storage.
func (s *Host) GetStorage() OptStorage {
	return s.Storage
}

// GetPhysicalNics returns the value of PhysicalNics.
func (s *Host) GetPhysicalNics() []PhysicalNic {
	return s.PhysicalNics
}

// GetNetworks returns the value of Networks.
func (s *Host) GetNetworks() []Network {
	return s.Networks
}

// GetHostNetworks returns the value of HostNetworks.
func (s *Host) GetHostNetworks() []HostNetwork {
	return s.HostNetworks
}

// GetDomain returns the value of Domain.
func (s *Host) GetDomain() OptDomainReference {
	return s.Domain
}

// GetNetworkpool returns the value of Networkpool.
func (s *Host) GetNetworkpool() OptNetworkPoolReference {
	return s.Networkpool
}

// GetCluster returns the value of Cluster.
func (s *Host) GetCluster() OptClusterReference {
	return s.Cluster
}

// GetStatus returns the value of Status.
func (s *Host) GetStatus() OptString {
	return s.Status
}

// GetCompatibleStorageType returns the value of CompatibleStorageType.
func (s *Host) GetCompatibleStorageType() OptString {
	return s.CompatibleStorageType
}

// GetBundleRepoDatastore returns the value of BundleRepoDatastore.
func (s *Host) GetBundleRepoDatastore() OptString {
	return s.BundleRepoDatastore
}

// GetHybrid returns the value of Hybrid.
func (s *Host) GetHybrid() OptBool {
	return s.Hybrid
}

// GetSoftwareInfo returns the value of SoftwareInfo.
func (s *Host) GetSoftwareInfo() OptSoftwareInfo {
	return s.SoftwareInfo
}

// GetTags returns the value of Tags.
func (s *Host) GetTags() []Tag {
	return s.Tags
}

// GetConfigurationStatus returns the value of ConfigurationStatus.
func (s *Host) GetConfigurationStatus() OptString {
	return s.ConfigurationStatus
}

// GetDatastoreType returns the value of DatastoreType.
func (s *Host) GetDatastoreType() OptString {
	return s.DatastoreType
}

// SetID sets the value of ID.
func (s *Host) SetID(val OptString) {
	s.ID = val
}

// SetSerialNumber sets the value of SerialNumber.
func (s *Host) SetSerialNumber(val OptString) {
	s.SerialNumber = val
}

// SetEsxiVersion sets the value of EsxiVersion.
func (s *Host) SetEsxiVersion(val OptString) {
	s.EsxiVersion = val
}

// SetSshThumbprint sets the value of SshThumbprint.
func (s *Host) SetSshThumbprint(val OptString) {
	s.SshThumbprint = val
}

// SetSslThumbprint sets the value of SslThumbprint.
func (s *Host) SetSslThumbprint(val OptString) {
	s.SslThumbprint = val
}

// SetFqdn sets the value of Fqdn.
func (s *Host) SetFqdn(val OptString) {
	s.Fqdn = val
}

// SetHardwareVendor sets the value of HardwareVendor.
func (s *Host) SetHardwareVendor(val OptString) {
	s.HardwareVendor = val
}

// SetHardwareModel sets the value of HardwareModel.
func (s *Host) SetHardwareModel(val OptString) {
	s.HardwareModel = val
}

// SetIsPrimary sets the value of IsPrimary.
func (s *Host) SetIsPrimary(val OptBool) {
	s.IsPrimary = val
}

// SetIsVsanEsaEligible sets the value of IsVsanEsaEligible.
func (s *Host) SetIsVsanEsaEligible(val OptBool) {
	s.IsVsanEsaEligible = val
}

// SetIpAddresses sets the value of IpAddresses.
func (s *Host) SetIpAddresses(val []IpAddress) {
	s.IpAddresses = val
}

// SetCPU sets the value of CPU.
func (s *Host) SetCPU(val OptCPU) {
	s.CPU = val
}

// SetMemory sets the value of Memory.
func (s *Host) SetMemory(val OptMemory) {
	s.Memory = val
}

// SetStorage sets the value of Storage.
func (s *Host) SetStorage(val OptStorage) {
	s.Storage = val
}

// SetPhysicalNics sets the value of PhysicalNics.
func (s *Host) SetPhysicalNics(val []PhysicalNic) {
	s.PhysicalNics = val
}

// SetNetworks sets the value of Networks.
func (s *Host) SetNetworks(val []Network) {
	s.Networks = val
}

// SetHostNetworks sets the value of HostNetworks.
func (s *Host) SetHostNetworks(val []HostNetwork) {
	s.HostNetworks = val
}

// SetDomain sets the value of Domain.
func (s *Host) SetDomain(val OptDomainReference) {
	s.Domain = val
}

// SetNetworkpool sets the value of Networkpool.
func (s *Host) SetNetworkpool(val OptNetworkPoolReference) {
	s.Networkpool = val
}

// SetCluster sets the value of Cluster.
func (s *Host) SetCluster(val OptClusterReference) {
	s.Cluster = val
}

// SetStatus sets the value of Status.
func (s *Host) SetStatus(val OptString) {
	s.Status = val
}

// SetCompatibleStorageType sets the value of CompatibleStorageType.
func (s *Host) SetCompatibleStorageType(val OptString) {
	s.CompatibleStorageType = val
}

// SetBundleRepoDatastore sets the value of BundleRepoDatastore.
func (s *Host) SetBundleRepoDatastore(val OptString) {
	s.BundleRepoDatastore = val
}

// SetHybrid sets the value of Hybrid.
func (s *Host) SetHybrid(val OptBool) {
	s.Hybrid = val
}

// SetSoftwareInfo sets the value of SoftwareInfo.
func (s *Host) SetSoftwareInfo(val OptSoftwareInfo) {
	s.SoftwareInfo = val
}

// SetTags sets the value of Tags.
func (s *Host) SetTags(val []Tag) {
	s.Tags = val
}

// SetConfigurationStatus sets the value of ConfigurationStatus.
func (s *Host) SetConfigurationStatus(val OptString) {
	s.ConfigurationStatus = val
}

// SetDatastoreType sets the value of DatastoreType.
func (s *Host) SetDatastoreType(val OptString) {
	s.DatastoreType = val
}

func (*Host) getHostRes() {}

// This specification contains the input to commission a host to VMware Cloud Foundation.
// Ref: #/components/schemas/HostCommissionSpec
type HostCommissionSpec struct {
	// FQDN of the host.
	Fqdn string `json:"fqdn"`
	// Username of the host.
	Username string `json:"username"`
	// Password of the host.
	Password string `json:"password"`
	// Storage Type.
	StorageType string `json:"storageType"`
	// VVol Storage Protocol Type.
	VvolStorageProtocolType OptString `json:"vvolStorageProtocolType"`
	// ID of the network pool to associate the host with.
	NetworkPoolId string `json:"networkPoolId"`
	// Name of the network pool to associate the host with.
	NetworkPoolName OptString `json:"networkPoolName"`
	// SSH thumbprint of the host.
	SshThumbprint OptString `json:"sshThumbprint"`
	// SSL thumbprint of the host.
	SslThumbprint OptString `json:"sslThumbprint"`
}

// GetFqdn returns the value of Fqdn.
func (s *HostCommissionSpec) GetFqdn() string {
	return s.Fqdn
}

// GetUsername returns the value of Username.
func (s *HostCommissionSpec) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *HostCommissionSpec) GetPassword() string {
	return s.Password
}

// GetStorageType returns the value of StorageType.
func (s *HostCommissionSpec) GetStorageType() string {
	return s.StorageType
}

// GetVvolStorageProtocolType returns the value of VvolStorageProtocolType.
func (s *HostCommissionSpec) GetVvolStorageProtocolType() OptString {
	return s.VvolStorageProtocolType
}

// GetNetworkPoolId returns the value of NetworkPoolId.
func (s *HostCommissionSpec) GetNetworkPoolId() string {
	return s.NetworkPoolId
}

// GetNetworkPoolName returns the value of NetworkPoolName.
func (s *HostCommissionSpec) GetNetworkPoolName() OptString {
	return s.NetworkPoolName
}

// GetSshThumbprint returns the value of SshThumbprint.
func (s *HostCommissionSpec) GetSshThumbprint() OptString {
	return s.SshThumbprint
}

// GetSslThumbprint returns the value of SslThumbprint.
func (s *HostCommissionSpec) GetSslThumbprint() OptString {
	return s.SslThumbprint
}

// SetFqdn sets the value of Fqdn.
func (s *HostCommissionSpec) SetFqdn(val string) {
	s.Fqdn = val
}

// SetUsername sets the value of Username.
func (s *HostCommissionSpec) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *HostCommissionSpec) SetPassword(val string) {
	s.Password = val
}

// SetStorageType sets the value of StorageType.
func (s *HostCommissionSpec) SetStorageType(val string) {
	s.StorageType = val
}

// SetVvolStorageProtocolType sets the value of VvolStorageProtocolType.
func (s *HostCommissionSpec) SetVvolStorageProtocolType(val OptString) {
	s.VvolStorageProtocolType = val
}

// SetNetworkPoolId sets the value of NetworkPoolId.
func (s *HostCommissionSpec) SetNetworkPoolId(val string) {
	s.NetworkPoolId = val
}

// SetNetworkPoolName sets the value of NetworkPoolName.
func (s *HostCommissionSpec) SetNetworkPoolName(val OptString) {
	s.NetworkPoolName = val
}

// SetSshThumbprint sets the value of SshThumbprint.
func (s *HostCommissionSpec) SetSshThumbprint(val OptString) {
	s.SshThumbprint = val
}

// SetSslThumbprint sets the value of SslThumbprint.
func (s *HostCommissionSpec) SetSslThumbprint(val OptString) {
	s.SslThumbprint = val
}

// Represents a criterion for querying the host.
// Ref: #/components/schemas/HostCriterion
type HostCriterion struct {
	// Name of the criterion.
	Name OptString `json:"name"`
	// Collection of sub-criterion supported on this criterion.
	SubCriteria []HostCriterion `json:"subCriteria"`
	// Arguments required for a particular criterion.
	Arguments OptHostCriterionArguments `json:"arguments"`
	// Description of the criterion.
	Description OptString `json:"description"`
}

// GetName returns the value of Name.
func (s *HostCriterion) GetName() OptString {
	return s.Name
}

// GetSubCriteria returns the value of SubCriteria.
func (s *HostCriterion) GetSubCriteria() []HostCriterion {
	return s.SubCriteria
}

// GetArguments returns the value of Arguments.
func (s *HostCriterion) GetArguments() OptHostCriterionArguments {
	return s.Arguments
}

// GetDescription returns the value of Description.
func (s *HostCriterion) GetDescription() OptString {
	return s.Description
}

// SetName sets the value of Name.
func (s *HostCriterion) SetName(val OptString) {
	s.Name = val
}

// SetSubCriteria sets the value of SubCriteria.
func (s *HostCriterion) SetSubCriteria(val []HostCriterion) {
	s.SubCriteria = val
}

// SetArguments sets the value of Arguments.
func (s *HostCriterion) SetArguments(val OptHostCriterionArguments) {
	s.Arguments = val
}

// SetDescription sets the value of Description.
func (s *HostCriterion) SetDescription(val OptString) {
	s.Description = val
}

func (*HostCriterion) getCriterionRes()     {}
func (*HostCriterion) getHostCriterionRes() {}

// Arguments required for a particular criterion.
type HostCriterionArguments map[string]string

func (s *HostCriterionArguments) init() HostCriterionArguments {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// This specification contains host details required to decommission a host from VMware Cloud
// Foundation.
// Ref: #/components/schemas/HostDecommissionSpec
type HostDecommissionSpec struct {
	// FQDN of the host.
	Fqdn string `json:"fqdn"`
}

// GetFqdn returns the value of Fqdn.
func (s *HostDecommissionSpec) GetFqdn() string {
	return s.Fqdn
}

// SetFqdn sets the value of Fqdn.
func (s *HostDecommissionSpec) SetFqdn(val string) {
	s.Fqdn = val
}

// Host Configuration.
// Ref: #/components/schemas/HostDetail
type HostDetail struct {
	// ID of the host.
	ID OptString `json:"id"`
	// Host name of the vSphere host.
	HostName                 OptString                   `json:"hostName"`
	HostNetworkConfiguration OptHostNetworkConfiguration `json:"hostNetworkConfiguration"`
	// Availability zone to which the host belongs when the cluster is stretched.
	AzName OptString `json:"azName"`
}

// GetID returns the value of ID.
func (s *HostDetail) GetID() OptString {
	return s.ID
}

// GetHostName returns the value of HostName.
func (s *HostDetail) GetHostName() OptString {
	return s.HostName
}

// GetHostNetworkConfiguration returns the value of HostNetworkConfiguration.
func (s *HostDetail) GetHostNetworkConfiguration() OptHostNetworkConfiguration {
	return s.HostNetworkConfiguration
}

// GetAzName returns the value of AzName.
func (s *HostDetail) GetAzName() OptString {
	return s.AzName
}

// SetID sets the value of ID.
func (s *HostDetail) SetID(val OptString) {
	s.ID = val
}

// SetHostName sets the value of HostName.
func (s *HostDetail) SetHostName(val OptString) {
	s.HostName = val
}

// SetHostNetworkConfiguration sets the value of HostNetworkConfiguration.
func (s *HostDetail) SetHostNetworkConfiguration(val OptHostNetworkConfiguration) {
	s.HostNetworkConfiguration = val
}

// SetAzName sets the value of AzName.
func (s *HostDetail) SetAzName(val OptString) {
	s.AzName = val
}

// Represents a network in a Host.
// Ref: #/components/schemas/HostNetwork
type HostNetwork struct {
	// Network Type of the network.
	Type string `json:"type"`
	// VLAN ID associated with the network.
	VlanId int32 `json:"vlanId"`
	// MTU of the network.
	Mtu int32 `json:"mtu"`
}

// GetType returns the value of Type.
func (s *HostNetwork) GetType() string {
	return s.Type
}

// GetVlanId returns the value of VlanId.
func (s *HostNetwork) GetVlanId() int32 {
	return s.VlanId
}

// GetMtu returns the value of Mtu.
func (s *HostNetwork) GetMtu() int32 {
	return s.Mtu
}

// SetType sets the value of Type.
func (s *HostNetwork) SetType(val string) {
	s.Type = val
}

// SetVlanId sets the value of VlanId.
func (s *HostNetwork) SetVlanId(val int32) {
	s.VlanId = val
}

// SetMtu sets the value of Mtu.
func (s *HostNetwork) SetMtu(val int32) {
	s.Mtu = val
}

// Host Network Configuration.
// Ref: #/components/schemas/HostNetworkConfiguration
type HostNetworkConfiguration struct {
	// Vmnic-Uplink configuration of the vSphere host.
	VmNics []HostVmnicUplinkConfiguration `json:"vmNics"`
	// The network profile associated with the Host.
	NetworkProfileName OptString `json:"networkProfileName"`
}

// GetVmNics returns the value of VmNics.
func (s *HostNetworkConfiguration) GetVmNics() []HostVmnicUplinkConfiguration {
	return s.VmNics
}

// GetNetworkProfileName returns the value of NetworkProfileName.
func (s *HostNetworkConfiguration) GetNetworkProfileName() OptString {
	return s.NetworkProfileName
}

// SetVmNics sets the value of VmNics.
func (s *HostNetworkConfiguration) SetVmNics(val []HostVmnicUplinkConfiguration) {
	s.VmNics = val
}

// SetNetworkProfileName sets the value of NetworkProfileName.
func (s *HostNetworkConfiguration) SetNetworkProfileName(val OptString) {
	s.NetworkProfileName = val
}

// This specification contains network details required when adding a vSphere host to a cluster.
// Ref: #/components/schemas/HostNetworkSpec
type HostNetworkSpec struct {
	// List of the vSphere host vmNics.
	VmNics []VmNic `json:"vmNics"`
	// Network profile name.
	NetworkProfileName OptString `json:"networkProfileName"`
}

// GetVmNics returns the value of VmNics.
func (s *HostNetworkSpec) GetVmNics() []VmNic {
	return s.VmNics
}

// GetNetworkProfileName returns the value of NetworkProfileName.
func (s *HostNetworkSpec) GetNetworkProfileName() OptString {
	return s.NetworkProfileName
}

// SetVmNics sets the value of VmNics.
func (s *HostNetworkSpec) SetVmNics(val []VmNic) {
	s.VmNics = val
}

// SetNetworkProfileName sets the value of NetworkProfileName.
func (s *HostNetworkSpec) SetNetworkProfileName(val OptString) {
	s.NetworkProfileName = val
}

// Represents the status of prechecks done on host.
// Ref: #/components/schemas/HostPrechecks
type HostPrechecks struct {
	Host OptHost `json:"host"`
	// Result of the prechecks.
	Result OptString `json:"result"`
	// Error found during prechecks.
	Error OptString `json:"error"`
}

// GetHost returns the value of Host.
func (s *HostPrechecks) GetHost() OptHost {
	return s.Host
}

// GetResult returns the value of Result.
func (s *HostPrechecks) GetResult() OptString {
	return s.Result
}

// GetError returns the value of Error.
func (s *HostPrechecks) GetError() OptString {
	return s.Error
}

// SetHost sets the value of Host.
func (s *HostPrechecks) SetHost(val OptHost) {
	s.Host = val
}

// SetResult sets the value of Result.
func (s *HostPrechecks) SetResult(val OptString) {
	s.Result = val
}

// SetError sets the value of Error.
func (s *HostPrechecks) SetError(val OptString) {
	s.Error = val
}

// Represents a host query response.
// Ref: #/components/schemas/HostQueryResponse
type HostQueryResponse struct {
	QueryInfo OptQueryInfo `json:"queryInfo"`
	Result    OptPageHost  `json:"result"`
}

// GetQueryInfo returns the value of QueryInfo.
func (s *HostQueryResponse) GetQueryInfo() OptQueryInfo {
	return s.QueryInfo
}

// GetResult returns the value of Result.
func (s *HostQueryResponse) GetResult() OptPageHost {
	return s.Result
}

// SetQueryInfo sets the value of QueryInfo.
func (s *HostQueryResponse) SetQueryInfo(val OptQueryInfo) {
	s.QueryInfo = val
}

// SetResult sets the value of Result.
func (s *HostQueryResponse) SetResult(val OptPageHost) {
	s.Result = val
}

func (*HostQueryResponse) getHostQueryResponseRes() {}
func (*HostQueryResponse) postHostQueryRes()        {}
func (*HostQueryResponse) postQueryRes()            {}

// Represents an ESXi host reference.
// Ref: #/components/schemas/HostReference
type HostReference struct {
	// ID of the host.
	ID OptString `json:"id"`
	// IP address of the host.
	IpAddress OptString `json:"ipAddress"`
	// FQDN of the host.
	Fqdn OptString `json:"fqdn"`
	// VM NICs of the host.
	VmNics []VMNicInfo `json:"vmNics"`
	// Fault domain name of the host.
	AzName OptString `json:"azName"`
}

// GetID returns the value of ID.
func (s *HostReference) GetID() OptString {
	return s.ID
}

// GetIpAddress returns the value of IpAddress.
func (s *HostReference) GetIpAddress() OptString {
	return s.IpAddress
}

// GetFqdn returns the value of Fqdn.
func (s *HostReference) GetFqdn() OptString {
	return s.Fqdn
}

// GetVmNics returns the value of VmNics.
func (s *HostReference) GetVmNics() []VMNicInfo {
	return s.VmNics
}

// GetAzName returns the value of AzName.
func (s *HostReference) GetAzName() OptString {
	return s.AzName
}

// SetID sets the value of ID.
func (s *HostReference) SetID(val OptString) {
	s.ID = val
}

// SetIpAddress sets the value of IpAddress.
func (s *HostReference) SetIpAddress(val OptString) {
	s.IpAddress = val
}

// SetFqdn sets the value of Fqdn.
func (s *HostReference) SetFqdn(val OptString) {
	s.Fqdn = val
}

// SetVmNics sets the value of VmNics.
func (s *HostReference) SetVmNics(val []VMNicInfo) {
	s.VmNics = val
}

// SetAzName sets the value of AzName.
func (s *HostReference) SetAzName(val OptString) {
	s.AzName = val
}

// This specification contains information required to add vSphere host to a cluster.
// Ref: #/components/schemas/HostSpec
type HostSpec struct {
	// ID of a vSphere host in the free pool.
	ID string `json:"id"`
	// License key of a vSphere host in the free pool
	// (This is required except in cases where the ESXi host has already been licensed outside of the
	// VMware Cloud Foundation system).
	LicenseKey OptString `json:"licenseKey"`
	// IP address of the vSphere host.
	IpAddress OptString `json:"ipAddress"`
	// Host name of the vSphere host.
	HostName OptString `json:"hostName"`
	// Username of the vSphere host.
	Username OptString `json:"username"`
	// SSH password of the vSphere host.
	Password        OptString          `json:"password"`
	HostNetworkSpec OptHostNetworkSpec `json:"hostNetworkSpec"`
	// Availability Zone Name
	// (This is required while performing a stretched cluster expand operation).
	AzName OptString `json:"azName"`
	// SSH thumbprint(fingerprint) of the vSphere host
	// Note:This field will be mandatory in future releases.
	SshThumbprint OptString `json:"sshThumbprint"`
	// Serial Number of the vSphere host.
	SerialNumber OptString `json:"serialNumber"`
}

// GetID returns the value of ID.
func (s *HostSpec) GetID() string {
	return s.ID
}

// GetLicenseKey returns the value of LicenseKey.
func (s *HostSpec) GetLicenseKey() OptString {
	return s.LicenseKey
}

// GetIpAddress returns the value of IpAddress.
func (s *HostSpec) GetIpAddress() OptString {
	return s.IpAddress
}

// GetHostName returns the value of HostName.
func (s *HostSpec) GetHostName() OptString {
	return s.HostName
}

// GetUsername returns the value of Username.
func (s *HostSpec) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *HostSpec) GetPassword() OptString {
	return s.Password
}

// GetHostNetworkSpec returns the value of HostNetworkSpec.
func (s *HostSpec) GetHostNetworkSpec() OptHostNetworkSpec {
	return s.HostNetworkSpec
}

// GetAzName returns the value of AzName.
func (s *HostSpec) GetAzName() OptString {
	return s.AzName
}

// GetSshThumbprint returns the value of SshThumbprint.
func (s *HostSpec) GetSshThumbprint() OptString {
	return s.SshThumbprint
}

// GetSerialNumber returns the value of SerialNumber.
func (s *HostSpec) GetSerialNumber() OptString {
	return s.SerialNumber
}

// SetID sets the value of ID.
func (s *HostSpec) SetID(val string) {
	s.ID = val
}

// SetLicenseKey sets the value of LicenseKey.
func (s *HostSpec) SetLicenseKey(val OptString) {
	s.LicenseKey = val
}

// SetIpAddress sets the value of IpAddress.
func (s *HostSpec) SetIpAddress(val OptString) {
	s.IpAddress = val
}

// SetHostName sets the value of HostName.
func (s *HostSpec) SetHostName(val OptString) {
	s.HostName = val
}

// SetUsername sets the value of Username.
func (s *HostSpec) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *HostSpec) SetPassword(val OptString) {
	s.Password = val
}

// SetHostNetworkSpec sets the value of HostNetworkSpec.
func (s *HostSpec) SetHostNetworkSpec(val OptHostNetworkSpec) {
	s.HostNetworkSpec = val
}

// SetAzName sets the value of AzName.
func (s *HostSpec) SetAzName(val OptString) {
	s.AzName = val
}

// SetSshThumbprint sets the value of SshThumbprint.
func (s *HostSpec) SetSshThumbprint(val OptString) {
	s.SshThumbprint = val
}

// SetSerialNumber sets the value of SerialNumber.
func (s *HostSpec) SetSerialNumber(val OptString) {
	s.SerialNumber = val
}

// This specification contains vmnic-uplink network configuration of host in a cluster.
// Ref: #/components/schemas/HostVmnicUplinkConfiguration
type HostVmnicUplinkConfiguration struct {
	// VmNic ID.
	ID OptString `json:"id"`
	// VDS name.
	VdsName OptString `json:"vdsName"`
	// Uplink of the VDS associated with the vmnic.
	Uplink OptString `json:"uplink"`
}

// GetID returns the value of ID.
func (s *HostVmnicUplinkConfiguration) GetID() OptString {
	return s.ID
}

// GetVdsName returns the value of VdsName.
func (s *HostVmnicUplinkConfiguration) GetVdsName() OptString {
	return s.VdsName
}

// GetUplink returns the value of Uplink.
func (s *HostVmnicUplinkConfiguration) GetUplink() OptString {
	return s.Uplink
}

// SetID sets the value of ID.
func (s *HostVmnicUplinkConfiguration) SetID(val OptString) {
	s.ID = val
}

// SetVdsName sets the value of VdsName.
func (s *HostVmnicUplinkConfiguration) SetVdsName(val OptString) {
	s.VdsName = val
}

// SetUplink sets the value of Uplink.
func (s *HostVmnicUplinkConfiguration) SetUplink(val OptString) {
	s.Uplink = val
}

// Represents hosts prechecks request.
// Ref: #/components/schemas/HostsPrechecksRequest
type HostsPrechecksRequest struct {
	// List of hosts on which prechecks will be done.
	Hosts []HostCommissionSpec `json:"hosts"`
}

// GetHosts returns the value of Hosts.
func (s *HostsPrechecksRequest) GetHosts() []HostCommissionSpec {
	return s.Hosts
}

// SetHosts sets the value of Hosts.
func (s *HostsPrechecksRequest) SetHosts(val []HostCommissionSpec) {
	s.Hosts = val
}

func (*HostsPrechecksRequest) postHostsPrechecks1Req() {}

// Represents hosts prechecks response.
// Ref: #/components/schemas/HostsPrechecksResponse
type HostsPrechecksResponse struct {
	// The ID for hosts prechecks.
	ID string `json:"id"`
	// Overall execution status of hosts prechecks.
	ExecutionStatus string `json:"executionStatus"`
	// Result status of the hosts prechecks after it has completed its execution.
	Result string `json:"result"`
	// Precheck done on each host.
	HostPrechecks []HostPrechecks `json:"hostPrechecks"`
}

// GetID returns the value of ID.
func (s *HostsPrechecksResponse) GetID() string {
	return s.ID
}

// GetExecutionStatus returns the value of ExecutionStatus.
func (s *HostsPrechecksResponse) GetExecutionStatus() string {
	return s.ExecutionStatus
}

// GetResult returns the value of Result.
func (s *HostsPrechecksResponse) GetResult() string {
	return s.Result
}

// GetHostPrechecks returns the value of HostPrechecks.
func (s *HostsPrechecksResponse) GetHostPrechecks() []HostPrechecks {
	return s.HostPrechecks
}

// SetID sets the value of ID.
func (s *HostsPrechecksResponse) SetID(val string) {
	s.ID = val
}

// SetExecutionStatus sets the value of ExecutionStatus.
func (s *HostsPrechecksResponse) SetExecutionStatus(val string) {
	s.ExecutionStatus = val
}

// SetResult sets the value of Result.
func (s *HostsPrechecksResponse) SetResult(val string) {
	s.Result = val
}

// SetHostPrechecks sets the value of HostPrechecks.
func (s *HostsPrechecksResponse) SetHostPrechecks(val []HostPrechecks) {
	s.HostPrechecks = val
}

func (*HostsPrechecksResponse) getHostsPrechecksResponseRes() {}
func (*HostsPrechecksResponse) postHostsPrechecks1Res()       {}

// Represents Identity Provider and its attributes.
// Ref: #/components/schemas/IdentityProvider
type IdentityProvider struct {
	// ID of the Identity Provider.
	ID OptString `json:"id"`
	// The user-friendly name for the Identity Provider.
	Name OptString `json:"name"`
	// The type of the Identity Provider.
	Type OptString `json:"type"`
	// The Domains of the Identity Provider.
	DomainNames []string `json:"domainNames"`
	// The Identity Sources of the Identity Provider.
	IdentitySources []VcIdentitySources `json:"identitySources"`
	Ldap            OptLdapInfo         `json:"ldap"`
	Oidc            OptOidcInfo         `json:"oidc"`
	// The status of the Identity Provider (set as ACTIVE for currently enabled Identity Provider).
	Status OptString `json:"status"`
	// The message conveyed by VCF for managing the Identity Provider.
	IdpMessage OptString                        `json:"idpMessage"`
	FedIdp     OptFederatedIdentityProviderInfo `json:"fedIdp"`
}

// GetID returns the value of ID.
func (s *IdentityProvider) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *IdentityProvider) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *IdentityProvider) GetType() OptString {
	return s.Type
}

// GetDomainNames returns the value of DomainNames.
func (s *IdentityProvider) GetDomainNames() []string {
	return s.DomainNames
}

// GetIdentitySources returns the value of IdentitySources.
func (s *IdentityProvider) GetIdentitySources() []VcIdentitySources {
	return s.IdentitySources
}

// GetLdap returns the value of Ldap.
func (s *IdentityProvider) GetLdap() OptLdapInfo {
	return s.Ldap
}

// GetOidc returns the value of Oidc.
func (s *IdentityProvider) GetOidc() OptOidcInfo {
	return s.Oidc
}

// GetStatus returns the value of Status.
func (s *IdentityProvider) GetStatus() OptString {
	return s.Status
}

// GetIdpMessage returns the value of IdpMessage.
func (s *IdentityProvider) GetIdpMessage() OptString {
	return s.IdpMessage
}

// GetFedIdp returns the value of FedIdp.
func (s *IdentityProvider) GetFedIdp() OptFederatedIdentityProviderInfo {
	return s.FedIdp
}

// SetID sets the value of ID.
func (s *IdentityProvider) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *IdentityProvider) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *IdentityProvider) SetType(val OptString) {
	s.Type = val
}

// SetDomainNames sets the value of DomainNames.
func (s *IdentityProvider) SetDomainNames(val []string) {
	s.DomainNames = val
}

// SetIdentitySources sets the value of IdentitySources.
func (s *IdentityProvider) SetIdentitySources(val []VcIdentitySources) {
	s.IdentitySources = val
}

// SetLdap sets the value of Ldap.
func (s *IdentityProvider) SetLdap(val OptLdapInfo) {
	s.Ldap = val
}

// SetOidc sets the value of Oidc.
func (s *IdentityProvider) SetOidc(val OptOidcInfo) {
	s.Oidc = val
}

// SetStatus sets the value of Status.
func (s *IdentityProvider) SetStatus(val OptString) {
	s.Status = val
}

// SetIdpMessage sets the value of IdpMessage.
func (s *IdentityProvider) SetIdpMessage(val OptString) {
	s.IdpMessage = val
}

// SetFedIdp sets the value of FedIdp.
func (s *IdentityProvider) SetFedIdp(val OptFederatedIdentityProviderInfo) {
	s.FedIdp = val
}

func (*IdentityProvider) getIdentityProviderByIdRes() {}

// The directory configuration when the provider is via broker federation.
// Ref: #/components/schemas/IdentityProviderDirectory
type IdentityProviderDirectory struct {
	// The id of the directory.
	DirectoryId OptString `json:"directoryId"`
	// The user-friendly name for the directory. This must be unique and the allowed symbols are letters
	// in any language, digits (0-9), space, underscore and hyphen.
	Name string `json:"name"`
	// The trusted default domain of the directory.
	DefaultDomain string `json:"defaultDomain"`
	// The set of trusted domains of the directory.
	Domains []string `json:"domains"`
	// The type of the Federated IDP.
	FederatedIdpSourceType string `json:"federatedIdpSourceType"`
}

// GetDirectoryId returns the value of DirectoryId.
func (s *IdentityProviderDirectory) GetDirectoryId() OptString {
	return s.DirectoryId
}

// GetName returns the value of Name.
func (s *IdentityProviderDirectory) GetName() string {
	return s.Name
}

// GetDefaultDomain returns the value of DefaultDomain.
func (s *IdentityProviderDirectory) GetDefaultDomain() string {
	return s.DefaultDomain
}

// GetDomains returns the value of Domains.
func (s *IdentityProviderDirectory) GetDomains() []string {
	return s.Domains
}

// GetFederatedIdpSourceType returns the value of FederatedIdpSourceType.
func (s *IdentityProviderDirectory) GetFederatedIdpSourceType() string {
	return s.FederatedIdpSourceType
}

// SetDirectoryId sets the value of DirectoryId.
func (s *IdentityProviderDirectory) SetDirectoryId(val OptString) {
	s.DirectoryId = val
}

// SetName sets the value of Name.
func (s *IdentityProviderDirectory) SetName(val string) {
	s.Name = val
}

// SetDefaultDomain sets the value of DefaultDomain.
func (s *IdentityProviderDirectory) SetDefaultDomain(val string) {
	s.DefaultDomain = val
}

// SetDomains sets the value of Domains.
func (s *IdentityProviderDirectory) SetDomains(val []string) {
	s.Domains = val
}

// SetFederatedIdpSourceType sets the value of FederatedIdpSourceType.
func (s *IdentityProviderDirectory) SetFederatedIdpSourceType(val string) {
	s.FederatedIdpSourceType = val
}

// Represents Identity Management pre-check result.
// Ref: #/components/schemas/IdentityProviderPrecheckResult
type IdentityProviderPrecheckResult struct {
	// One of SUCCESS, WARNING, FAILURE.
	Status string `json:"status"`
	// Details about status type and error messages.
	Details []Details `json:"details"`
}

// GetStatus returns the value of Status.
func (s *IdentityProviderPrecheckResult) GetStatus() string {
	return s.Status
}

// GetDetails returns the value of Details.
func (s *IdentityProviderPrecheckResult) GetDetails() []Details {
	return s.Details
}

// SetStatus sets the value of Status.
func (s *IdentityProviderPrecheckResult) SetStatus(val string) {
	s.Status = val
}

// SetDetails sets the value of Details.
func (s *IdentityProviderPrecheckResult) SetDetails(val []Details) {
	s.Details = val
}

func (*IdentityProviderPrecheckResult) getIdentityPrecheckResultRes() {}

// Import Vds Spec.
// Ref: #/components/schemas/ImportVdsSpec
type ImportVdsSpec struct {
	// List of details of vSphere Distributed Switches to be imported to the inventory.
	ListOfVdsDetails []VdsDetail `json:"listOfVdsDetails"`
}

// GetListOfVdsDetails returns the value of ListOfVdsDetails.
func (s *ImportVdsSpec) GetListOfVdsDetails() []VdsDetail {
	return s.ListOfVdsDetails
}

// SetListOfVdsDetails sets the value of ListOfVdsDetails.
func (s *ImportVdsSpec) SetListOfVdsDetails(val []VdsDetail) {
	s.ListOfVdsDetails = val
}

type ImportVdsToInventoryBadRequest Error

func (*ImportVdsToInventoryBadRequest) importVdsToInventoryRes() {}

type ImportVdsToInventoryInternalServerError Error

func (*ImportVdsToInventoryInternalServerError) importVdsToInventoryRes() {}

// InvalidateRefreshTokenNoContent is response for InvalidateRefreshToken operation.
type InvalidateRefreshTokenNoContent struct{}

// Represents the inventory mismatch info.
// Ref: #/components/schemas/InventoryMismatchInfo
type InventoryMismatchInfo struct {
	// Inventory mismatch type.
	Type OptString `json:"type"`
	// Inventory object names associated with the mismatch.
	InventoryObjects []string `json:"inventoryObjects"`
}

// GetType returns the value of Type.
func (s *InventoryMismatchInfo) GetType() OptString {
	return s.Type
}

// GetInventoryObjects returns the value of InventoryObjects.
func (s *InventoryMismatchInfo) GetInventoryObjects() []string {
	return s.InventoryObjects
}

// SetType sets the value of Type.
func (s *InventoryMismatchInfo) SetType(val OptString) {
	s.Type = val
}

// SetInventoryObjects sets the value of InventoryObjects.
func (s *InventoryMismatchInfo) SetInventoryObjects(val []string) {
	s.InventoryObjects = val
}

// Represents IP address.
// Ref: #/components/schemas/IpAddress
type IpAddress struct {
	// IP address.
	IpAddress OptString `json:"ipAddress"`
	// Type of IP addresss.
	Type OptString `json:"type"`
}

// GetIpAddress returns the value of IpAddress.
func (s *IpAddress) GetIpAddress() OptString {
	return s.IpAddress
}

// GetType returns the value of Type.
func (s *IpAddress) GetType() OptString {
	return s.Type
}

// SetIpAddress sets the value of IpAddress.
func (s *IpAddress) SetIpAddress(val OptString) {
	s.IpAddress = val
}

// SetType sets the value of Type.
func (s *IpAddress) SetType(val OptString) {
	s.Type = val
}

// This specification contains the parameters required to create an IP address range.
// Ref: #/components/schemas/IpAddressPoolRangeSpec
type IpAddressPoolRangeSpec struct {
	// The first IP Address of the IP Address Range.
	Start string `json:"start"`
	// The last IP Address of the IP Address Range.
	End string `json:"end"`
}

// GetStart returns the value of Start.
func (s *IpAddressPoolRangeSpec) GetStart() string {
	return s.Start
}

// GetEnd returns the value of End.
func (s *IpAddressPoolRangeSpec) GetEnd() string {
	return s.End
}

// SetStart sets the value of Start.
func (s *IpAddressPoolRangeSpec) SetStart(val string) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *IpAddressPoolRangeSpec) SetEnd(val string) {
	s.End = val
}

// This specification contains the parameters required to create or reuse an IP address pool.
// Ref: #/components/schemas/IpAddressPoolSpec
type IpAddressPoolSpec struct {
	// Name of the IP address pool.
	Name string `json:"name"`
	// Description of the IP address pool.
	Description OptString `json:"description"`
	// Ignore unavailable NSX cluster(s) during IP pool spec validation.
	IgnoreUnavailableNsxtCluster OptBool `json:"ignoreUnavailableNsxtCluster"`
	// List of IP address pool subnet specification.
	Subnets []IpAddressPoolSubnetSpec `json:"subnets"`
}

// GetName returns the value of Name.
func (s *IpAddressPoolSpec) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *IpAddressPoolSpec) GetDescription() OptString {
	return s.Description
}

// GetIgnoreUnavailableNsxtCluster returns the value of IgnoreUnavailableNsxtCluster.
func (s *IpAddressPoolSpec) GetIgnoreUnavailableNsxtCluster() OptBool {
	return s.IgnoreUnavailableNsxtCluster
}

// GetSubnets returns the value of Subnets.
func (s *IpAddressPoolSpec) GetSubnets() []IpAddressPoolSubnetSpec {
	return s.Subnets
}

// SetName sets the value of Name.
func (s *IpAddressPoolSpec) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *IpAddressPoolSpec) SetDescription(val OptString) {
	s.Description = val
}

// SetIgnoreUnavailableNsxtCluster sets the value of IgnoreUnavailableNsxtCluster.
func (s *IpAddressPoolSpec) SetIgnoreUnavailableNsxtCluster(val OptBool) {
	s.IgnoreUnavailableNsxtCluster = val
}

// SetSubnets sets the value of Subnets.
func (s *IpAddressPoolSpec) SetSubnets(val []IpAddressPoolSubnetSpec) {
	s.Subnets = val
}

// This specification contains the parameters required to create an IP address pool subnet.
// Ref: #/components/schemas/IpAddressPoolSubnetSpec
type IpAddressPoolSubnetSpec struct {
	// List of the IP allocation ranges. Atleast 1 IP address range has to be specified.
	IpAddressPoolRanges []IpAddressPoolRangeSpec `json:"ipAddressPoolRanges"`
	// The subnet representation, contains the network address and the prefix length.
	Cidr string `json:"cidr"`
	// The default gateway address of the network.
	Gateway string `json:"gateway"`
}

// GetIpAddressPoolRanges returns the value of IpAddressPoolRanges.
func (s *IpAddressPoolSubnetSpec) GetIpAddressPoolRanges() []IpAddressPoolRangeSpec {
	return s.IpAddressPoolRanges
}

// GetCidr returns the value of Cidr.
func (s *IpAddressPoolSubnetSpec) GetCidr() string {
	return s.Cidr
}

// GetGateway returns the value of Gateway.
func (s *IpAddressPoolSubnetSpec) GetGateway() string {
	return s.Gateway
}

// SetIpAddressPoolRanges sets the value of IpAddressPoolRanges.
func (s *IpAddressPoolSubnetSpec) SetIpAddressPoolRanges(val []IpAddressPoolRangeSpec) {
	s.IpAddressPoolRanges = val
}

// SetCidr sets the value of Cidr.
func (s *IpAddressPoolSubnetSpec) SetCidr(val string) {
	s.Cidr = val
}

// SetGateway sets the value of Gateway.
func (s *IpAddressPoolSubnetSpec) SetGateway(val string) {
	s.Gateway = val
}

// Defines an IP address with gateway and subnet.
// Ref: #/components/schemas/IpAllocation
type IpAllocation struct {
	// IP Address of the ESXi host.
	IpAddress string `json:"ipAddress"`
	// Gateway.
	Gateway OptString `json:"gateway"`
	// Subnet.
	Subnet OptString `json:"subnet"`
	// Classless Inter-Domain Routing (CIDR).
	Cidr OptString `json:"cidr"`
}

// GetIpAddress returns the value of IpAddress.
func (s *IpAllocation) GetIpAddress() string {
	return s.IpAddress
}

// GetGateway returns the value of Gateway.
func (s *IpAllocation) GetGateway() OptString {
	return s.Gateway
}

// GetSubnet returns the value of Subnet.
func (s *IpAllocation) GetSubnet() OptString {
	return s.Subnet
}

// GetCidr returns the value of Cidr.
func (s *IpAllocation) GetCidr() OptString {
	return s.Cidr
}

// SetIpAddress sets the value of IpAddress.
func (s *IpAllocation) SetIpAddress(val string) {
	s.IpAddress = val
}

// SetGateway sets the value of Gateway.
func (s *IpAllocation) SetGateway(val OptString) {
	s.Gateway = val
}

// SetSubnet sets the value of Subnet.
func (s *IpAllocation) SetSubnet(val OptString) {
	s.Subnet = val
}

// SetCidr sets the value of Cidr.
func (s *IpAllocation) SetCidr(val OptString) {
	s.Cidr = val
}

// Represents an IP Pool of a network in a network pool.
// Ref: #/components/schemas/IpPool
type IpPool struct {
	// Start IP address of the IP pool.
	Start string `json:"start"`
	// End IP address of the IP pool.
	End string `json:"end"`
}

// GetStart returns the value of Start.
func (s *IpPool) GetStart() string {
	return s.Start
}

// GetEnd returns the value of End.
func (s *IpPool) GetEnd() string {
	return s.End
}

// SetStart sets the value of Start.
func (s *IpPool) SetStart(val string) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *IpPool) SetEnd(val string) {
	s.End = val
}

// Spec contains parameters for range of IP addresses.
// Ref: #/components/schemas/IpRange
type IpRange struct {
	// Start IP Address.
	StartIpAddress string `json:"startIpAddress"`
	// End IP Address.
	EndIpAddress string `json:"endIpAddress"`
}

// GetStartIpAddress returns the value of StartIpAddress.
func (s *IpRange) GetStartIpAddress() string {
	return s.StartIpAddress
}

// GetEndIpAddress returns the value of EndIpAddress.
func (s *IpRange) GetEndIpAddress() string {
	return s.EndIpAddress
}

// SetStartIpAddress sets the value of StartIpAddress.
func (s *IpRange) SetStartIpAddress(val string) {
	s.StartIpAddress = val
}

// SetEndIpAddress sets the value of EndIpAddress.
func (s *IpRange) SetEndIpAddress(val string) {
	s.EndIpAddress = val
}

// Isolation Precheck Results.
// Ref: #/components/schemas/IsolationPrecheckResult
type IsolationPrecheckResult struct {
	// Conditions that will have to be remediated inorder to proceed with isolation operation.
	PrecheckFailures []string `json:"precheckFailures"`
	// Conditions that may have to cause side effects if not remediated during execution of isolation
	// operation.
	PrecheckWarnings []string `json:"precheckWarnings"`
	// Implications of breaking ELM.
	Implications []string `json:"implications"`
	// Execution status of the prechecks.
	ExecutionStatus string `json:"executionStatus"`
}

// GetPrecheckFailures returns the value of PrecheckFailures.
func (s *IsolationPrecheckResult) GetPrecheckFailures() []string {
	return s.PrecheckFailures
}

// GetPrecheckWarnings returns the value of PrecheckWarnings.
func (s *IsolationPrecheckResult) GetPrecheckWarnings() []string {
	return s.PrecheckWarnings
}

// GetImplications returns the value of Implications.
func (s *IsolationPrecheckResult) GetImplications() []string {
	return s.Implications
}

// GetExecutionStatus returns the value of ExecutionStatus.
func (s *IsolationPrecheckResult) GetExecutionStatus() string {
	return s.ExecutionStatus
}

// SetPrecheckFailures sets the value of PrecheckFailures.
func (s *IsolationPrecheckResult) SetPrecheckFailures(val []string) {
	s.PrecheckFailures = val
}

// SetPrecheckWarnings sets the value of PrecheckWarnings.
func (s *IsolationPrecheckResult) SetPrecheckWarnings(val []string) {
	s.PrecheckWarnings = val
}

// SetImplications sets the value of Implications.
func (s *IsolationPrecheckResult) SetImplications(val []string) {
	s.Implications = val
}

// SetExecutionStatus sets the value of ExecutionStatus.
func (s *IsolationPrecheckResult) SetExecutionStatus(val string) {
	s.ExecutionStatus = val
}

func (*IsolationPrecheckResult) getDomainIsolationPrecheckStatusRes() {}

// Domain Isolation Details.
// Ref: #/components/schemas/IsolationSpec
type IsolationSpec struct {
	SsoDomainSpec OptSsoDomainSpec `json:"ssoDomainSpec"`
	// Id of the domain that needs to be isolated.
	DomainIdForIsolation OptString `json:"domainIdForIsolation"`
	// Name of the domain that needs to be isolated.
	WorkloadDomainName OptString `json:"workloadDomainName"`
}

// GetSsoDomainSpec returns the value of SsoDomainSpec.
func (s *IsolationSpec) GetSsoDomainSpec() OptSsoDomainSpec {
	return s.SsoDomainSpec
}

// GetDomainIdForIsolation returns the value of DomainIdForIsolation.
func (s *IsolationSpec) GetDomainIdForIsolation() OptString {
	return s.DomainIdForIsolation
}

// GetWorkloadDomainName returns the value of WorkloadDomainName.
func (s *IsolationSpec) GetWorkloadDomainName() OptString {
	return s.WorkloadDomainName
}

// SetSsoDomainSpec sets the value of SsoDomainSpec.
func (s *IsolationSpec) SetSsoDomainSpec(val OptSsoDomainSpec) {
	s.SsoDomainSpec = val
}

// SetDomainIdForIsolation sets the value of DomainIdForIsolation.
func (s *IsolationSpec) SetDomainIdForIsolation(val OptString) {
	s.DomainIdForIsolation = val
}

// SetWorkloadDomainName sets the value of WorkloadDomainName.
func (s *IsolationSpec) SetWorkloadDomainName(val OptString) {
	s.WorkloadDomainName = val
}

// Represents Identity management configuration when the protocol is LDAP.
// Ref: #/components/schemas/LdapInfo
type LdapInfo struct {
	// The type of the LDAP Server.
	Type OptString `json:"type"`
	// The name to associate with the created Domain.
	DomainName OptString `json:"domainName"`
	// The optional alias to associate the Domain name.
	DomainAlias OptString `json:"domainAlias"`
	// User name to connect to LDAP(s) server.
	Username      OptString        `json:"username"`
	SourceDetails OptSourceDetails `json:"sourceDetails"`
}

// GetType returns the value of Type.
func (s *LdapInfo) GetType() OptString {
	return s.Type
}

// GetDomainName returns the value of DomainName.
func (s *LdapInfo) GetDomainName() OptString {
	return s.DomainName
}

// GetDomainAlias returns the value of DomainAlias.
func (s *LdapInfo) GetDomainAlias() OptString {
	return s.DomainAlias
}

// GetUsername returns the value of Username.
func (s *LdapInfo) GetUsername() OptString {
	return s.Username
}

// GetSourceDetails returns the value of SourceDetails.
func (s *LdapInfo) GetSourceDetails() OptSourceDetails {
	return s.SourceDetails
}

// SetType sets the value of Type.
func (s *LdapInfo) SetType(val OptString) {
	s.Type = val
}

// SetDomainName sets the value of DomainName.
func (s *LdapInfo) SetDomainName(val OptString) {
	s.DomainName = val
}

// SetDomainAlias sets the value of DomainAlias.
func (s *LdapInfo) SetDomainAlias(val OptString) {
	s.DomainAlias = val
}

// SetUsername sets the value of Username.
func (s *LdapInfo) SetUsername(val OptString) {
	s.Username = val
}

// SetSourceDetails sets the value of SourceDetails.
func (s *LdapInfo) SetSourceDetails(val OptSourceDetails) {
	s.SourceDetails = val
}

// Defines a license key and its attributes.
// Ref: #/components/schemas/LicenseKey
type LicenseKey struct {
	// The ID of the license key.
	ID OptString `json:"id"`
	// The 29 alpha numeric character license key with hyphens.
	Key string `json:"key"`
	// The type of the product to which the license key is applicable.
	ProductType string `json:"productType"`
	// Description of the license key given by user.
	Description string `json:"description"`
	// Product version.
	ProductVersion OptString `json:"productVersion"`
	// Indicates if the license key has unlimited usage.
	IsUnlimited        OptBool               `json:"isUnlimited"`
	LicenseKeyUsage    OptLicenseKeyUsage    `json:"licenseKeyUsage"`
	LicenseKeyValidity OptLicenseKeyValidity `json:"licenseKeyValidity"`
	// License key features.
	Features []string `json:"features"`
	// License key edition.
	LicenseEdition OptString `json:"licenseEdition"`
	// License capacity unit.
	LicenseUnit OptString `json:"licenseUnit"`
	// The minimum number of core licenses required per CPU, when license unit is cpu core.
	MinimumCore OptInt32 `json:"minimumCore"`
}

// GetID returns the value of ID.
func (s *LicenseKey) GetID() OptString {
	return s.ID
}

// GetKey returns the value of Key.
func (s *LicenseKey) GetKey() string {
	return s.Key
}

// GetProductType returns the value of ProductType.
func (s *LicenseKey) GetProductType() string {
	return s.ProductType
}

// GetDescription returns the value of Description.
func (s *LicenseKey) GetDescription() string {
	return s.Description
}

// GetProductVersion returns the value of ProductVersion.
func (s *LicenseKey) GetProductVersion() OptString {
	return s.ProductVersion
}

// GetIsUnlimited returns the value of IsUnlimited.
func (s *LicenseKey) GetIsUnlimited() OptBool {
	return s.IsUnlimited
}

// GetLicenseKeyUsage returns the value of LicenseKeyUsage.
func (s *LicenseKey) GetLicenseKeyUsage() OptLicenseKeyUsage {
	return s.LicenseKeyUsage
}

// GetLicenseKeyValidity returns the value of LicenseKeyValidity.
func (s *LicenseKey) GetLicenseKeyValidity() OptLicenseKeyValidity {
	return s.LicenseKeyValidity
}

// GetFeatures returns the value of Features.
func (s *LicenseKey) GetFeatures() []string {
	return s.Features
}

// GetLicenseEdition returns the value of LicenseEdition.
func (s *LicenseKey) GetLicenseEdition() OptString {
	return s.LicenseEdition
}

// GetLicenseUnit returns the value of LicenseUnit.
func (s *LicenseKey) GetLicenseUnit() OptString {
	return s.LicenseUnit
}

// GetMinimumCore returns the value of MinimumCore.
func (s *LicenseKey) GetMinimumCore() OptInt32 {
	return s.MinimumCore
}

// SetID sets the value of ID.
func (s *LicenseKey) SetID(val OptString) {
	s.ID = val
}

// SetKey sets the value of Key.
func (s *LicenseKey) SetKey(val string) {
	s.Key = val
}

// SetProductType sets the value of ProductType.
func (s *LicenseKey) SetProductType(val string) {
	s.ProductType = val
}

// SetDescription sets the value of Description.
func (s *LicenseKey) SetDescription(val string) {
	s.Description = val
}

// SetProductVersion sets the value of ProductVersion.
func (s *LicenseKey) SetProductVersion(val OptString) {
	s.ProductVersion = val
}

// SetIsUnlimited sets the value of IsUnlimited.
func (s *LicenseKey) SetIsUnlimited(val OptBool) {
	s.IsUnlimited = val
}

// SetLicenseKeyUsage sets the value of LicenseKeyUsage.
func (s *LicenseKey) SetLicenseKeyUsage(val OptLicenseKeyUsage) {
	s.LicenseKeyUsage = val
}

// SetLicenseKeyValidity sets the value of LicenseKeyValidity.
func (s *LicenseKey) SetLicenseKeyValidity(val OptLicenseKeyValidity) {
	s.LicenseKeyValidity = val
}

// SetFeatures sets the value of Features.
func (s *LicenseKey) SetFeatures(val []string) {
	s.Features = val
}

// SetLicenseEdition sets the value of LicenseEdition.
func (s *LicenseKey) SetLicenseEdition(val OptString) {
	s.LicenseEdition = val
}

// SetLicenseUnit sets the value of LicenseUnit.
func (s *LicenseKey) SetLicenseUnit(val OptString) {
	s.LicenseUnit = val
}

// SetMinimumCore sets the value of MinimumCore.
func (s *LicenseKey) SetMinimumCore(val OptInt32) {
	s.MinimumCore = val
}

func (*LicenseKey) getLicenseKeyRes() {}

// Spec for updating a license key.
// Ref: #/components/schemas/LicenseKeyUpdateSpec
type LicenseKeyUpdateSpec struct {
	// String for updating the description of the license key.
	Description string `json:"description"`
}

// GetDescription returns the value of Description.
func (s *LicenseKeyUpdateSpec) GetDescription() string {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *LicenseKeyUpdateSpec) SetDescription(val string) {
	s.Description = val
}

// Defines license key usage.
// Ref: #/components/schemas/LicenseKeyUsage
type LicenseKeyUsage struct {
	// The total units of the license key.
	Total OptInt32 `json:"total"`
	// The remaining/free units of the license key.
	Remaining OptInt32 `json:"remaining"`
	// The consumed/used units of the license key.
	Used OptInt32 `json:"used"`
	// Units of the license key.
	LicenseUnit OptString `json:"licenseUnit"`
}

// GetTotal returns the value of Total.
func (s *LicenseKeyUsage) GetTotal() OptInt32 {
	return s.Total
}

// GetRemaining returns the value of Remaining.
func (s *LicenseKeyUsage) GetRemaining() OptInt32 {
	return s.Remaining
}

// GetUsed returns the value of Used.
func (s *LicenseKeyUsage) GetUsed() OptInt32 {
	return s.Used
}

// GetLicenseUnit returns the value of LicenseUnit.
func (s *LicenseKeyUsage) GetLicenseUnit() OptString {
	return s.LicenseUnit
}

// SetTotal sets the value of Total.
func (s *LicenseKeyUsage) SetTotal(val OptInt32) {
	s.Total = val
}

// SetRemaining sets the value of Remaining.
func (s *LicenseKeyUsage) SetRemaining(val OptInt32) {
	s.Remaining = val
}

// SetUsed sets the value of Used.
func (s *LicenseKeyUsage) SetUsed(val OptInt32) {
	s.Used = val
}

// SetLicenseUnit sets the value of LicenseUnit.
func (s *LicenseKeyUsage) SetLicenseUnit(val OptString) {
	s.LicenseUnit = val
}

// Defines license key validity details.
// Ref: #/components/schemas/LicenseKeyValidity
type LicenseKeyValidity struct {
	// The validity status of the license key.
	LicenseKeyStatus OptString `json:"licenseKeyStatus"`
	// The license key expiry date.
	ExpiryDate OptString `json:"expiryDate"`
}

// GetLicenseKeyStatus returns the value of LicenseKeyStatus.
func (s *LicenseKeyValidity) GetLicenseKeyStatus() OptString {
	return s.LicenseKeyStatus
}

// GetExpiryDate returns the value of ExpiryDate.
func (s *LicenseKeyValidity) GetExpiryDate() OptString {
	return s.ExpiryDate
}

// SetLicenseKeyStatus sets the value of LicenseKeyStatus.
func (s *LicenseKeyValidity) SetLicenseKeyStatus(val OptString) {
	s.LicenseKeyStatus = val
}

// SetExpiryDate sets the value of ExpiryDate.
func (s *LicenseKeyValidity) SetExpiryDate(val OptString) {
	s.ExpiryDate = val
}

// Represents a Licensing information.
// Ref: #/components/schemas/LicensingInfoReference
type LicensingInfoReference struct {
	// Licensing mode.
	LicensingMode OptString `json:"licensingMode"`
	// Status of the subscription mode.
	SubscriptionStatus OptString `json:"subscriptionStatus"`
	// Flag indicating the resource is registered for subscription or not.
	IsRegistered OptBool `json:"isRegistered"`
	// Flag indicating the resource is subscribed or not.
	IsSubscribed OptBool `json:"isSubscribed"`
	// Number of days remaining to subscribe.
	DaysRemainingToSubscribe OptInt32 `json:"daysRemainingToSubscribe"`
}

// GetLicensingMode returns the value of LicensingMode.
func (s *LicensingInfoReference) GetLicensingMode() OptString {
	return s.LicensingMode
}

// GetSubscriptionStatus returns the value of SubscriptionStatus.
func (s *LicensingInfoReference) GetSubscriptionStatus() OptString {
	return s.SubscriptionStatus
}

// GetIsRegistered returns the value of IsRegistered.
func (s *LicensingInfoReference) GetIsRegistered() OptBool {
	return s.IsRegistered
}

// GetIsSubscribed returns the value of IsSubscribed.
func (s *LicensingInfoReference) GetIsSubscribed() OptBool {
	return s.IsSubscribed
}

// GetDaysRemainingToSubscribe returns the value of DaysRemainingToSubscribe.
func (s *LicensingInfoReference) GetDaysRemainingToSubscribe() OptInt32 {
	return s.DaysRemainingToSubscribe
}

// SetLicensingMode sets the value of LicensingMode.
func (s *LicensingInfoReference) SetLicensingMode(val OptString) {
	s.LicensingMode = val
}

// SetSubscriptionStatus sets the value of SubscriptionStatus.
func (s *LicensingInfoReference) SetSubscriptionStatus(val OptString) {
	s.SubscriptionStatus = val
}

// SetIsRegistered sets the value of IsRegistered.
func (s *LicensingInfoReference) SetIsRegistered(val OptBool) {
	s.IsRegistered = val
}

// SetIsSubscribed sets the value of IsSubscribed.
func (s *LicensingInfoReference) SetIsSubscribed(val OptBool) {
	s.IsSubscribed = val
}

// SetDaysRemainingToSubscribe sets the value of DaysRemainingToSubscribe.
func (s *LicensingInfoReference) SetDaysRemainingToSubscribe(val OptInt32) {
	s.DaysRemainingToSubscribe = val
}

// License Information of resources.
// Ref: #/components/schemas/LicensingSpec
type LicensingSpec struct {
	// List of LicensingInfos of resources.
	ResourceLicensingInfos []ResourceLicensingInfo `json:"resourceLicensingInfos"`
}

// GetResourceLicensingInfos returns the value of ResourceLicensingInfos.
func (s *LicensingSpec) GetResourceLicensingInfos() []ResourceLicensingInfo {
	return s.ResourceLicensingInfos
}

// SetResourceLicensingInfos sets the value of ResourceLicensingInfos.
func (s *LicensingSpec) SetResourceLicensingInfos(val []ResourceLicensingInfo) {
	s.ResourceLicensingInfos = val
}

// Local user password details.
// Ref: #/components/schemas/LocalAccountPasswordInfo
type LocalAccountPasswordInfo struct {
	// The old password of the local account.
	OldPassword OptString `json:"oldPassword"`
	// The new password of the local account.
	NewPassword string `json:"newPassword"`
}

// GetOldPassword returns the value of OldPassword.
func (s *LocalAccountPasswordInfo) GetOldPassword() OptString {
	return s.OldPassword
}

// GetNewPassword returns the value of NewPassword.
func (s *LocalAccountPasswordInfo) GetNewPassword() string {
	return s.NewPassword
}

// SetOldPassword sets the value of OldPassword.
func (s *LocalAccountPasswordInfo) SetOldPassword(val OptString) {
	s.OldPassword = val
}

// SetNewPassword sets the value of NewPassword.
func (s *LocalAccountPasswordInfo) SetNewPassword(val string) {
	s.NewPassword = val
}

// Local OS user account details.
// Ref: #/components/schemas/LocalOsUserAccount
type LocalOsUserAccount struct {
	// The username of the local OS account.
	Username OptString `json:"username"`
	// The date and time when the user last changed their password.
	LastPasswordChange OptString `json:"lastPasswordChange"`
	// The date and time when the user's password will expire.
	PasswordExpiresAt OptString `json:"passwordExpiresAt"`
	// The date and time when the user's password becomes inactive.
	PasswordInactiveAt OptString `json:"passwordInactiveAt"`
	// The date and time when the user's account will expire.
	AccountExpiresAt OptString `json:"accountExpiresAt"`
	// The maximum number of days that a user can keep the same password before being required to change
	// it.
	MaxDaysBetweenPasswordChange OptInt32 `json:"maxDaysBetweenPasswordChange"`
	// The minimum number of days that must elapse before a user can change their password again.
	MinDaysBetweenPasswordChange OptInt32 `json:"minDaysBetweenPasswordChange"`
	// The number of days before the password expiration date that the user will be warned.
	WarnDaysBeforePasswordExpiration OptInt32 `json:"warnDaysBeforePasswordExpiration"`
}

// GetUsername returns the value of Username.
func (s *LocalOsUserAccount) GetUsername() OptString {
	return s.Username
}

// GetLastPasswordChange returns the value of LastPasswordChange.
func (s *LocalOsUserAccount) GetLastPasswordChange() OptString {
	return s.LastPasswordChange
}

// GetPasswordExpiresAt returns the value of PasswordExpiresAt.
func (s *LocalOsUserAccount) GetPasswordExpiresAt() OptString {
	return s.PasswordExpiresAt
}

// GetPasswordInactiveAt returns the value of PasswordInactiveAt.
func (s *LocalOsUserAccount) GetPasswordInactiveAt() OptString {
	return s.PasswordInactiveAt
}

// GetAccountExpiresAt returns the value of AccountExpiresAt.
func (s *LocalOsUserAccount) GetAccountExpiresAt() OptString {
	return s.AccountExpiresAt
}

// GetMaxDaysBetweenPasswordChange returns the value of MaxDaysBetweenPasswordChange.
func (s *LocalOsUserAccount) GetMaxDaysBetweenPasswordChange() OptInt32 {
	return s.MaxDaysBetweenPasswordChange
}

// GetMinDaysBetweenPasswordChange returns the value of MinDaysBetweenPasswordChange.
func (s *LocalOsUserAccount) GetMinDaysBetweenPasswordChange() OptInt32 {
	return s.MinDaysBetweenPasswordChange
}

// GetWarnDaysBeforePasswordExpiration returns the value of WarnDaysBeforePasswordExpiration.
func (s *LocalOsUserAccount) GetWarnDaysBeforePasswordExpiration() OptInt32 {
	return s.WarnDaysBeforePasswordExpiration
}

// SetUsername sets the value of Username.
func (s *LocalOsUserAccount) SetUsername(val OptString) {
	s.Username = val
}

// SetLastPasswordChange sets the value of LastPasswordChange.
func (s *LocalOsUserAccount) SetLastPasswordChange(val OptString) {
	s.LastPasswordChange = val
}

// SetPasswordExpiresAt sets the value of PasswordExpiresAt.
func (s *LocalOsUserAccount) SetPasswordExpiresAt(val OptString) {
	s.PasswordExpiresAt = val
}

// SetPasswordInactiveAt sets the value of PasswordInactiveAt.
func (s *LocalOsUserAccount) SetPasswordInactiveAt(val OptString) {
	s.PasswordInactiveAt = val
}

// SetAccountExpiresAt sets the value of AccountExpiresAt.
func (s *LocalOsUserAccount) SetAccountExpiresAt(val OptString) {
	s.AccountExpiresAt = val
}

// SetMaxDaysBetweenPasswordChange sets the value of MaxDaysBetweenPasswordChange.
func (s *LocalOsUserAccount) SetMaxDaysBetweenPasswordChange(val OptInt32) {
	s.MaxDaysBetweenPasswordChange = val
}

// SetMinDaysBetweenPasswordChange sets the value of MinDaysBetweenPasswordChange.
func (s *LocalOsUserAccount) SetMinDaysBetweenPasswordChange(val OptInt32) {
	s.MinDaysBetweenPasswordChange = val
}

// SetWarnDaysBeforePasswordExpiration sets the value of WarnDaysBeforePasswordExpiration.
func (s *LocalOsUserAccount) SetWarnDaysBeforePasswordExpiration(val OptInt32) {
	s.WarnDaysBeforePasswordExpiration = val
}

// Represents Local User and its attributes.
// Ref: #/components/schemas/LocalUser
type LocalUser struct {
	// Flag indicating whether or not local account is configured.
	IsConfigured OptBool `json:"isConfigured"`
	// The ID of the user.
	ID OptString `json:"id"`
	// The name of the user.
	Name string `json:"name"`
	// The domain of the user.
	Domain OptString `json:"domain"`
	// The type of the user.
	Type string `json:"type"`
	// The API key of the user.
	ApiKey OptString     `json:"apiKey"`
	Role   RoleReference `json:"role"`
	// The timestamp at which the user was created.
	CreationTimestamp OptString `json:"creationTimestamp"`
}

// GetIsConfigured returns the value of IsConfigured.
func (s *LocalUser) GetIsConfigured() OptBool {
	return s.IsConfigured
}

// GetID returns the value of ID.
func (s *LocalUser) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *LocalUser) GetName() string {
	return s.Name
}

// GetDomain returns the value of Domain.
func (s *LocalUser) GetDomain() OptString {
	return s.Domain
}

// GetType returns the value of Type.
func (s *LocalUser) GetType() string {
	return s.Type
}

// GetApiKey returns the value of ApiKey.
func (s *LocalUser) GetApiKey() OptString {
	return s.ApiKey
}

// GetRole returns the value of Role.
func (s *LocalUser) GetRole() RoleReference {
	return s.Role
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *LocalUser) GetCreationTimestamp() OptString {
	return s.CreationTimestamp
}

// SetIsConfigured sets the value of IsConfigured.
func (s *LocalUser) SetIsConfigured(val OptBool) {
	s.IsConfigured = val
}

// SetID sets the value of ID.
func (s *LocalUser) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *LocalUser) SetName(val string) {
	s.Name = val
}

// SetDomain sets the value of Domain.
func (s *LocalUser) SetDomain(val OptString) {
	s.Domain = val
}

// SetType sets the value of Type.
func (s *LocalUser) SetType(val string) {
	s.Type = val
}

// SetApiKey sets the value of ApiKey.
func (s *LocalUser) SetApiKey(val OptString) {
	s.ApiKey = val
}

// SetRole sets the value of Role.
func (s *LocalUser) SetRole(val RoleReference) {
	s.Role = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *LocalUser) SetCreationTimestamp(val OptString) {
	s.CreationTimestamp = val
}

func (*LocalUser) getLocalAccountRes() {}

// Localization warning pack containing all required data to provide localized warning messages.
// Ref: #/components/schemas/LocalizableWarningPack
type LocalizableWarningPack struct {
	// Minor warning code.
	WarningCode string `json:"warningCode"`
	// Local bundle to be used for localization.
	LocalBundle string `json:"localBundle"`
	// VIP component that contains the message.
	VipComponent string `json:"vipComponent"`
	// Default warning message in English. Will be used as fallback if a localized message cannot be
	// obtained.
	DefaultMessage string `json:"defaultMessage"`
	// Arguments used to localize the message.
	Arguments []string `json:"arguments"`
	// A reference token correlating the warning with the relevant detailed logs. Should be sent to the
	// service provider when reporting issues.
	ReferenceToken OptString `json:"referenceToken"`
}

// GetWarningCode returns the value of WarningCode.
func (s *LocalizableWarningPack) GetWarningCode() string {
	return s.WarningCode
}

// GetLocalBundle returns the value of LocalBundle.
func (s *LocalizableWarningPack) GetLocalBundle() string {
	return s.LocalBundle
}

// GetVipComponent returns the value of VipComponent.
func (s *LocalizableWarningPack) GetVipComponent() string {
	return s.VipComponent
}

// GetDefaultMessage returns the value of DefaultMessage.
func (s *LocalizableWarningPack) GetDefaultMessage() string {
	return s.DefaultMessage
}

// GetArguments returns the value of Arguments.
func (s *LocalizableWarningPack) GetArguments() []string {
	return s.Arguments
}

// GetReferenceToken returns the value of ReferenceToken.
func (s *LocalizableWarningPack) GetReferenceToken() OptString {
	return s.ReferenceToken
}

// SetWarningCode sets the value of WarningCode.
func (s *LocalizableWarningPack) SetWarningCode(val string) {
	s.WarningCode = val
}

// SetLocalBundle sets the value of LocalBundle.
func (s *LocalizableWarningPack) SetLocalBundle(val string) {
	s.LocalBundle = val
}

// SetVipComponent sets the value of VipComponent.
func (s *LocalizableWarningPack) SetVipComponent(val string) {
	s.VipComponent = val
}

// SetDefaultMessage sets the value of DefaultMessage.
func (s *LocalizableWarningPack) SetDefaultMessage(val string) {
	s.DefaultMessage = val
}

// SetArguments sets the value of Arguments.
func (s *LocalizableWarningPack) SetArguments(val []string) {
	s.Arguments = val
}

// SetReferenceToken sets the value of ReferenceToken.
func (s *LocalizableWarningPack) SetReferenceToken(val OptString) {
	s.ReferenceToken = val
}

// Logs of different components.
// Ref: #/components/schemas/Logs
type Logs struct {
	// Collect vCenter Logs.
	VcLogs OptBool `json:"vcLogs"`
	// Collect NSX Logs.
	NsxLogs OptBool `json:"nsxLogs"`
	// Collect ESX Logs.
	EsxLogs OptBool `json:"esxLogs"`
	// Collect WCP Logs.
	WcpLogs OptBool `json:"wcpLogs"`
	// Collect SDDC Manager Logs.
	SddcManagerLogs OptBool `json:"sddcManagerLogs"`
	// Collect API Logs.
	ApiLogs OptBool `json:"apiLogs"`
	// Collect VXRailManager Logs.
	VxrailManagerLogs OptBool `json:"vxrailManagerLogs"`
	// Collect SystemDebug Logs.
	SystemDebugLogs OptBool `json:"systemDebugLogs"`
	// Collect VMScreenshots.
	VmScreenshots OptBool `json:"vmScreenshots"`
	// [Deprecated] Collect VMware Aria Automation Logs.
	//
	// Deprecated: schema marks this property as deprecated.
	VraLogs OptBool `json:"vraLogs"`
	// [Deprecated] Collect VMware Aria Operations Logs.
	//
	// Deprecated: schema marks this property as deprecated.
	VropsLogs OptBool `json:"vropsLogs"`
	// [Deprecated] Collect VMware Aria Operations for Logs Logs.
	//
	// Deprecated: schema marks this property as deprecated.
	VrliLogs OptBool `json:"vrliLogs"`
	// [Deprecated] Collect VMware Aria Suite Lifecycle Logs.
	//
	// Deprecated: schema marks this property as deprecated.
	VrslcmLogs OptBool `json:"vrslcmLogs"`
	// Collect VMware Aria Automation support logs.
	AutomationLogs OptBool `json:"automationLogs"`
	// Collect VMware Aria Operations support logs.
	OperationsLogs OptBool `json:"operationsLogs"`
	// Collect VMware Aria Operations For Logs support logs.
	OperationsForLogs OptBool `json:"operationsForLogs"`
	// Collect VMware Aria Suite Lifecycle support logs.
	LifecycleLogs OptBool `json:"lifecycleLogs"`
}

// GetVcLogs returns the value of VcLogs.
func (s *Logs) GetVcLogs() OptBool {
	return s.VcLogs
}

// GetNsxLogs returns the value of NsxLogs.
func (s *Logs) GetNsxLogs() OptBool {
	return s.NsxLogs
}

// GetEsxLogs returns the value of EsxLogs.
func (s *Logs) GetEsxLogs() OptBool {
	return s.EsxLogs
}

// GetWcpLogs returns the value of WcpLogs.
func (s *Logs) GetWcpLogs() OptBool {
	return s.WcpLogs
}

// GetSddcManagerLogs returns the value of SddcManagerLogs.
func (s *Logs) GetSddcManagerLogs() OptBool {
	return s.SddcManagerLogs
}

// GetApiLogs returns the value of ApiLogs.
func (s *Logs) GetApiLogs() OptBool {
	return s.ApiLogs
}

// GetVxrailManagerLogs returns the value of VxrailManagerLogs.
func (s *Logs) GetVxrailManagerLogs() OptBool {
	return s.VxrailManagerLogs
}

// GetSystemDebugLogs returns the value of SystemDebugLogs.
func (s *Logs) GetSystemDebugLogs() OptBool {
	return s.SystemDebugLogs
}

// GetVmScreenshots returns the value of VmScreenshots.
func (s *Logs) GetVmScreenshots() OptBool {
	return s.VmScreenshots
}

// GetVraLogs returns the value of VraLogs.
func (s *Logs) GetVraLogs() OptBool {
	return s.VraLogs
}

// GetVropsLogs returns the value of VropsLogs.
func (s *Logs) GetVropsLogs() OptBool {
	return s.VropsLogs
}

// GetVrliLogs returns the value of VrliLogs.
func (s *Logs) GetVrliLogs() OptBool {
	return s.VrliLogs
}

// GetVrslcmLogs returns the value of VrslcmLogs.
func (s *Logs) GetVrslcmLogs() OptBool {
	return s.VrslcmLogs
}

// GetAutomationLogs returns the value of AutomationLogs.
func (s *Logs) GetAutomationLogs() OptBool {
	return s.AutomationLogs
}

// GetOperationsLogs returns the value of OperationsLogs.
func (s *Logs) GetOperationsLogs() OptBool {
	return s.OperationsLogs
}

// GetOperationsForLogs returns the value of OperationsForLogs.
func (s *Logs) GetOperationsForLogs() OptBool {
	return s.OperationsForLogs
}

// GetLifecycleLogs returns the value of LifecycleLogs.
func (s *Logs) GetLifecycleLogs() OptBool {
	return s.LifecycleLogs
}

// SetVcLogs sets the value of VcLogs.
func (s *Logs) SetVcLogs(val OptBool) {
	s.VcLogs = val
}

// SetNsxLogs sets the value of NsxLogs.
func (s *Logs) SetNsxLogs(val OptBool) {
	s.NsxLogs = val
}

// SetEsxLogs sets the value of EsxLogs.
func (s *Logs) SetEsxLogs(val OptBool) {
	s.EsxLogs = val
}

// SetWcpLogs sets the value of WcpLogs.
func (s *Logs) SetWcpLogs(val OptBool) {
	s.WcpLogs = val
}

// SetSddcManagerLogs sets the value of SddcManagerLogs.
func (s *Logs) SetSddcManagerLogs(val OptBool) {
	s.SddcManagerLogs = val
}

// SetApiLogs sets the value of ApiLogs.
func (s *Logs) SetApiLogs(val OptBool) {
	s.ApiLogs = val
}

// SetVxrailManagerLogs sets the value of VxrailManagerLogs.
func (s *Logs) SetVxrailManagerLogs(val OptBool) {
	s.VxrailManagerLogs = val
}

// SetSystemDebugLogs sets the value of SystemDebugLogs.
func (s *Logs) SetSystemDebugLogs(val OptBool) {
	s.SystemDebugLogs = val
}

// SetVmScreenshots sets the value of VmScreenshots.
func (s *Logs) SetVmScreenshots(val OptBool) {
	s.VmScreenshots = val
}

// SetVraLogs sets the value of VraLogs.
func (s *Logs) SetVraLogs(val OptBool) {
	s.VraLogs = val
}

// SetVropsLogs sets the value of VropsLogs.
func (s *Logs) SetVropsLogs(val OptBool) {
	s.VropsLogs = val
}

// SetVrliLogs sets the value of VrliLogs.
func (s *Logs) SetVrliLogs(val OptBool) {
	s.VrliLogs = val
}

// SetVrslcmLogs sets the value of VrslcmLogs.
func (s *Logs) SetVrslcmLogs(val OptBool) {
	s.VrslcmLogs = val
}

// SetAutomationLogs sets the value of AutomationLogs.
func (s *Logs) SetAutomationLogs(val OptBool) {
	s.AutomationLogs = val
}

// SetOperationsLogs sets the value of OperationsLogs.
func (s *Logs) SetOperationsLogs(val OptBool) {
	s.OperationsLogs = val
}

// SetOperationsForLogs sets the value of OperationsForLogs.
func (s *Logs) SetOperationsForLogs(val OptBool) {
	s.OperationsForLogs = val
}

// SetLifecycleLogs sets the value of LifecycleLogs.
func (s *Logs) SetLifecycleLogs(val OptBool) {
	s.LifecycleLogs = val
}

// Represents information about memory on a host.
// Ref: #/components/schemas/Memory
type Memory struct {
	// Total memory in MB.
	TotalCapacityMB OptFloat64 `json:"totalCapacityMB"`
	// Used memory in MB.
	UsedCapacityMB OptFloat64 `json:"usedCapacityMB"`
}

// GetTotalCapacityMB returns the value of TotalCapacityMB.
func (s *Memory) GetTotalCapacityMB() OptFloat64 {
	return s.TotalCapacityMB
}

// GetUsedCapacityMB returns the value of UsedCapacityMB.
func (s *Memory) GetUsedCapacityMB() OptFloat64 {
	return s.UsedCapacityMB
}

// SetTotalCapacityMB sets the value of TotalCapacityMB.
func (s *Memory) SetTotalCapacityMB(val OptFloat64) {
	s.TotalCapacityMB = val
}

// SetUsedCapacityMB sets the value of UsedCapacityMB.
func (s *Memory) SetUsedCapacityMB(val OptFloat64) {
	s.UsedCapacityMB = val
}

// Represents a memory metric with used and total for a resource.
// Ref: #/components/schemas/MemoryInfo
type MemoryInfo struct {
	Used  OptDataMetric `json:"used"`
	Total OptDataMetric `json:"total"`
}

// GetUsed returns the value of Used.
func (s *MemoryInfo) GetUsed() OptDataMetric {
	return s.Used
}

// GetTotal returns the value of Total.
func (s *MemoryInfo) GetTotal() OptDataMetric {
	return s.Total
}

// SetUsed sets the value of Used.
func (s *MemoryInfo) SetUsed(val OptDataMetric) {
	s.Used = val
}

// SetTotal sets the value of Total.
func (s *MemoryInfo) SetTotal(val OptDataMetric) {
	s.Total = val
}

// A message pack representing a localizable message and suitable for machine processing. Contains a
// message key unique in the scope of the specified component, as well as the arguments needed to
// generate the localized message.
// Ref: #/components/schemas/MessagePack
type MessagePack struct {
	// The component the message belongs to.
	Component OptString `json:"component"`
	// The machine-readable key of the message.
	MessageKey string `json:"messageKey"`
	// The arguments used to localize the message. Can be used by scripts to automate the response
	// processing.
	Arguments []string `json:"arguments"`
	// The localized message (if not provided by another property).
	Message OptString `json:"message"`
	// The local resource bundle details.
	Bundle OptString `json:"bundle"`
}

// GetComponent returns the value of Component.
func (s *MessagePack) GetComponent() OptString {
	return s.Component
}

// GetMessageKey returns the value of MessageKey.
func (s *MessagePack) GetMessageKey() string {
	return s.MessageKey
}

// GetArguments returns the value of Arguments.
func (s *MessagePack) GetArguments() []string {
	return s.Arguments
}

// GetMessage returns the value of Message.
func (s *MessagePack) GetMessage() OptString {
	return s.Message
}

// GetBundle returns the value of Bundle.
func (s *MessagePack) GetBundle() OptString {
	return s.Bundle
}

// SetComponent sets the value of Component.
func (s *MessagePack) SetComponent(val OptString) {
	s.Component = val
}

// SetMessageKey sets the value of MessageKey.
func (s *MessagePack) SetMessageKey(val string) {
	s.MessageKey = val
}

// SetArguments sets the value of Arguments.
func (s *MessagePack) SetArguments(val []string) {
	s.Arguments = val
}

// SetMessage sets the value of Message.
func (s *MessagePack) SetMessage(val OptString) {
	s.Message = val
}

// SetBundle sets the value of Bundle.
func (s *MessagePack) SetBundle(val OptString) {
	s.Bundle = val
}

// This specification contains Microsoft CA configuration details.
// Ref: #/components/schemas/MicrosoftCertificateAuthoritySpec
type MicrosoftCertificateAuthoritySpec struct {
	// CA server username.
	Username string `json:"username"`
	// CA server password.
	Secret string `json:"secret"`
	// CA server url.
	ServerUrl string `json:"serverUrl"`
	// CA server template name.
	TemplateName string `json:"templateName"`
}

// GetUsername returns the value of Username.
func (s *MicrosoftCertificateAuthoritySpec) GetUsername() string {
	return s.Username
}

// GetSecret returns the value of Secret.
func (s *MicrosoftCertificateAuthoritySpec) GetSecret() string {
	return s.Secret
}

// GetServerUrl returns the value of ServerUrl.
func (s *MicrosoftCertificateAuthoritySpec) GetServerUrl() string {
	return s.ServerUrl
}

// GetTemplateName returns the value of TemplateName.
func (s *MicrosoftCertificateAuthoritySpec) GetTemplateName() string {
	return s.TemplateName
}

// SetUsername sets the value of Username.
func (s *MicrosoftCertificateAuthoritySpec) SetUsername(val string) {
	s.Username = val
}

// SetSecret sets the value of Secret.
func (s *MicrosoftCertificateAuthoritySpec) SetSecret(val string) {
	s.Secret = val
}

// SetServerUrl sets the value of ServerUrl.
func (s *MicrosoftCertificateAuthoritySpec) SetServerUrl(val string) {
	s.ServerUrl = val
}

// SetTemplateName sets the value of TemplateName.
func (s *MicrosoftCertificateAuthoritySpec) SetTemplateName(val string) {
	s.TemplateName = val
}

// NAS configuration for NFS based cluster.
// Ref: #/components/schemas/NasVolumeSpec
type NasVolumeSpec struct {
	// NFS Server name used for cluster creation.
	ServerName []string `json:"serverName"`
	// Shared directory path used for NFS based cluster creation.
	Path string `json:"path"`
	// Readonly is used to identify whether to mount the directory as readOnly or not.
	ReadOnly bool `json:"readOnly"`
	// User tag used to annotate NFS share.
	UserTag OptString `json:"userTag"`
}

// GetServerName returns the value of ServerName.
func (s *NasVolumeSpec) GetServerName() []string {
	return s.ServerName
}

// GetPath returns the value of Path.
func (s *NasVolumeSpec) GetPath() string {
	return s.Path
}

// GetReadOnly returns the value of ReadOnly.
func (s *NasVolumeSpec) GetReadOnly() bool {
	return s.ReadOnly
}

// GetUserTag returns the value of UserTag.
func (s *NasVolumeSpec) GetUserTag() OptString {
	return s.UserTag
}

// SetServerName sets the value of ServerName.
func (s *NasVolumeSpec) SetServerName(val []string) {
	s.ServerName = val
}

// SetPath sets the value of Path.
func (s *NasVolumeSpec) SetPath(val string) {
	s.Path = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *NasVolumeSpec) SetReadOnly(val bool) {
	s.ReadOnly = val
}

// SetUserTag sets the value of UserTag.
func (s *NasVolumeSpec) SetUserTag(val OptString) {
	s.UserTag = val
}

// Represents a network in a network pool.
//
// Deprecated: schema marks this type as deprecated.
// Ref: #/components/schemas/Network
type Network struct {
	// The ID of the network.
	ID OptString `json:"id"`
	// Network Type of the network.
	Type string `json:"type"`
	// VLAN ID associated with the network.
	VlanId int32 `json:"vlanId"`
	// MTU of the network.
	Mtu int32 `json:"mtu"`
	// Subnet associated with the network.
	Subnet string `json:"subnet"`
	// Subnet mask for the subnet of the network.
	Mask string `json:"mask"`
	// Gateway for the network.
	Gateway string `json:"gateway"`
	// List of IP pool ranges to use.
	IpPools []IpPool `json:"ipPools"`
	// List of free IPs to use.
	FreeIps []string `json:"freeIps"`
	// List of used IPs.
	UsedIps []string `json:"usedIps"`
}

// GetID returns the value of ID.
func (s *Network) GetID() OptString {
	return s.ID
}

// GetType returns the value of Type.
func (s *Network) GetType() string {
	return s.Type
}

// GetVlanId returns the value of VlanId.
func (s *Network) GetVlanId() int32 {
	return s.VlanId
}

// GetMtu returns the value of Mtu.
func (s *Network) GetMtu() int32 {
	return s.Mtu
}

// GetSubnet returns the value of Subnet.
func (s *Network) GetSubnet() string {
	return s.Subnet
}

// GetMask returns the value of Mask.
func (s *Network) GetMask() string {
	return s.Mask
}

// GetGateway returns the value of Gateway.
func (s *Network) GetGateway() string {
	return s.Gateway
}

// GetIpPools returns the value of IpPools.
func (s *Network) GetIpPools() []IpPool {
	return s.IpPools
}

// GetFreeIps returns the value of FreeIps.
func (s *Network) GetFreeIps() []string {
	return s.FreeIps
}

// GetUsedIps returns the value of UsedIps.
func (s *Network) GetUsedIps() []string {
	return s.UsedIps
}

// SetID sets the value of ID.
func (s *Network) SetID(val OptString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *Network) SetType(val string) {
	s.Type = val
}

// SetVlanId sets the value of VlanId.
func (s *Network) SetVlanId(val int32) {
	s.VlanId = val
}

// SetMtu sets the value of Mtu.
func (s *Network) SetMtu(val int32) {
	s.Mtu = val
}

// SetSubnet sets the value of Subnet.
func (s *Network) SetSubnet(val string) {
	s.Subnet = val
}

// SetMask sets the value of Mask.
func (s *Network) SetMask(val string) {
	s.Mask = val
}

// SetGateway sets the value of Gateway.
func (s *Network) SetGateway(val string) {
	s.Gateway = val
}

// SetIpPools sets the value of IpPools.
func (s *Network) SetIpPools(val []IpPool) {
	s.IpPools = val
}

// SetFreeIps sets the value of FreeIps.
func (s *Network) SetFreeIps(val []string) {
	s.FreeIps = val
}

// SetUsedIps sets the value of UsedIps.
func (s *Network) SetUsedIps(val []string) {
	s.UsedIps = val
}

func (*Network) addIpPoolToNetworkOfNetworkPoolRes() {}
func (*Network) getNetworkOfNetworkPoolRes()         {}

// This specification contains network parameters required for new virtual machines being added to a
// workload domain.
// Ref: #/components/schemas/NetworkDetailsSpec
type NetworkDetailsSpec struct {
	// IPv4 address of the virtual machine. Can be omitted if hostname (dnsName) is provded.
	IpAddress OptString `json:"ipAddress"`
	// DNS name of the virtual machine, e.g., vc-1.domain1.vsphere.local.
	DnsName string `json:"dnsName"`
	// IPv4 gateway the VM can use to connect to the outside world.
	Gateway OptString `json:"gateway"`
	// Subnet mask.
	SubnetMask OptString `json:"subnetMask"`
}

// GetIpAddress returns the value of IpAddress.
func (s *NetworkDetailsSpec) GetIpAddress() OptString {
	return s.IpAddress
}

// GetDnsName returns the value of DnsName.
func (s *NetworkDetailsSpec) GetDnsName() string {
	return s.DnsName
}

// GetGateway returns the value of Gateway.
func (s *NetworkDetailsSpec) GetGateway() OptString {
	return s.Gateway
}

// GetSubnetMask returns the value of SubnetMask.
func (s *NetworkDetailsSpec) GetSubnetMask() OptString {
	return s.SubnetMask
}

// SetIpAddress sets the value of IpAddress.
func (s *NetworkDetailsSpec) SetIpAddress(val OptString) {
	s.IpAddress = val
}

// SetDnsName sets the value of DnsName.
func (s *NetworkDetailsSpec) SetDnsName(val string) {
	s.DnsName = val
}

// SetGateway sets the value of Gateway.
func (s *NetworkDetailsSpec) SetGateway(val OptString) {
	s.Gateway = val
}

// SetSubnetMask sets the value of SubnetMask.
func (s *NetworkDetailsSpec) SetSubnetMask(val OptString) {
	s.SubnetMask = val
}

// Represents a network pool in the system.
// Ref: #/components/schemas/NetworkPool
type NetworkPool struct {
	// The ID of the network pool.
	ID OptString `json:"id"`
	// User specified name of the network pool.
	Name string `json:"name"`
	// Representing the networks associated with the network pool.
	Networks []Network `json:"networks"`
}

// GetID returns the value of ID.
func (s *NetworkPool) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *NetworkPool) GetName() string {
	return s.Name
}

// GetNetworks returns the value of Networks.
func (s *NetworkPool) GetNetworks() []Network {
	return s.Networks
}

// SetID sets the value of ID.
func (s *NetworkPool) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *NetworkPool) SetName(val string) {
	s.Name = val
}

// SetNetworks sets the value of Networks.
func (s *NetworkPool) SetNetworks(val []Network) {
	s.Networks = val
}

func (*NetworkPool) createNetworkPoolRes()  {}
func (*NetworkPool) getNetworkPoolByIDRes() {}
func (*NetworkPool) updateNetworkPoolRes()  {}

// Represents a network pool reference.
// Ref: #/components/schemas/NetworkPoolReference
type NetworkPoolReference struct {
	// ID of the network pool.
	ID string `json:"id"`
	// Name of the network pool.
	Name OptString `json:"name"`
}

// GetID returns the value of ID.
func (s *NetworkPoolReference) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *NetworkPoolReference) GetName() OptString {
	return s.Name
}

// SetID sets the value of ID.
func (s *NetworkPoolReference) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *NetworkPoolReference) SetName(val OptString) {
	s.Name = val
}

// Network Pool update data.
// Ref: #/components/schemas/NetworkPoolUpdateSpec
type NetworkPoolUpdateSpec struct {
	// Name of the Network Pool.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *NetworkPoolUpdateSpec) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *NetworkPoolUpdateSpec) SetName(val string) {
	s.Name = val
}

// This specification contains the host switch configurations for the NSX transport node.
// Ref: #/components/schemas/NetworkProfile
type NetworkProfile struct {
	// The network profile name.
	Name string `json:"name"`
	// The network profile description.
	Description OptString `json:"description"`
	// Designates the network profile as a Global Network Config or Sub Network Config.
	IsDefault OptBool `json:"isDefault"`
	// The list of NSX host switch configurations.
	NsxtHostSwitchConfigs []NsxtHostSwitchConfig `json:"nsxtHostSwitchConfigs"`
}

// GetName returns the value of Name.
func (s *NetworkProfile) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *NetworkProfile) GetDescription() OptString {
	return s.Description
}

// GetIsDefault returns the value of IsDefault.
func (s *NetworkProfile) GetIsDefault() OptBool {
	return s.IsDefault
}

// GetNsxtHostSwitchConfigs returns the value of NsxtHostSwitchConfigs.
func (s *NetworkProfile) GetNsxtHostSwitchConfigs() []NsxtHostSwitchConfig {
	return s.NsxtHostSwitchConfigs
}

// SetName sets the value of Name.
func (s *NetworkProfile) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *NetworkProfile) SetDescription(val OptString) {
	s.Description = val
}

// SetIsDefault sets the value of IsDefault.
func (s *NetworkProfile) SetIsDefault(val OptBool) {
	s.IsDefault = val
}

// SetNsxtHostSwitchConfigs sets the value of NsxtHostSwitchConfigs.
func (s *NetworkProfile) SetNsxtHostSwitchConfigs(val []NsxtHostSwitchConfig) {
	s.NsxtHostSwitchConfigs = val
}

// This configuration contains the host switch configurations for the NSX transport node.
// Ref: #/components/schemas/NetworkProfileConfiguration
type NetworkProfileConfiguration struct {
	// The network profile name.
	Name OptString `json:"name"`
	// Flag that denotes if the profile is default or not.
	IsDefault OptBool `json:"isDefault"`
	// The list of NSX host switch configurations.
	NsxtHostSwitchConfigs []NsxtHostSwitchConfiguration `json:"nsxtHostSwitchConfigs"`
}

// GetName returns the value of Name.
func (s *NetworkProfileConfiguration) GetName() OptString {
	return s.Name
}

// GetIsDefault returns the value of IsDefault.
func (s *NetworkProfileConfiguration) GetIsDefault() OptBool {
	return s.IsDefault
}

// GetNsxtHostSwitchConfigs returns the value of NsxtHostSwitchConfigs.
func (s *NetworkProfileConfiguration) GetNsxtHostSwitchConfigs() []NsxtHostSwitchConfiguration {
	return s.NsxtHostSwitchConfigs
}

// SetName sets the value of Name.
func (s *NetworkProfileConfiguration) SetName(val OptString) {
	s.Name = val
}

// SetIsDefault sets the value of IsDefault.
func (s *NetworkProfileConfiguration) SetIsDefault(val OptBool) {
	s.IsDefault = val
}

// SetNsxtHostSwitchConfigs sets the value of NsxtHostSwitchConfigs.
func (s *NetworkProfileConfiguration) SetNsxtHostSwitchConfigs(val []NsxtHostSwitchConfiguration) {
	s.NsxtHostSwitchConfigs = val
}

// This specification contains cluster's network configuration.
// Ref: #/components/schemas/NetworkSpec
type NetworkSpec struct {
	// Distributed switches to add to the cluster.
	VdsSpecs       []VdsSpec         `json:"vdsSpecs"`
	NsxClusterSpec OptNsxClusterSpec `json:"nsxClusterSpec"`
	// The list of network profiles.
	NetworkProfiles []NetworkProfile `json:"networkProfiles"`
}

// GetVdsSpecs returns the value of VdsSpecs.
func (s *NetworkSpec) GetVdsSpecs() []VdsSpec {
	return s.VdsSpecs
}

// GetNsxClusterSpec returns the value of NsxClusterSpec.
func (s *NetworkSpec) GetNsxClusterSpec() OptNsxClusterSpec {
	return s.NsxClusterSpec
}

// GetNetworkProfiles returns the value of NetworkProfiles.
func (s *NetworkSpec) GetNetworkProfiles() []NetworkProfile {
	return s.NetworkProfiles
}

// SetVdsSpecs sets the value of VdsSpecs.
func (s *NetworkSpec) SetVdsSpecs(val []VdsSpec) {
	s.VdsSpecs = val
}

// SetNsxClusterSpec sets the value of NsxClusterSpec.
func (s *NetworkSpec) SetNsxClusterSpec(val OptNsxClusterSpec) {
	s.NsxClusterSpec = val
}

// SetNetworkProfiles sets the value of NetworkProfiles.
func (s *NetworkSpec) SetNetworkProfiles(val []NetworkProfile) {
	s.NetworkProfiles = val
}

// This specification contains cluster storage configuration for NFS.
// Ref: #/components/schemas/NfsDatastoreSpec
type NfsDatastoreSpec struct {
	// Datastore name used for cluster creation.
	DatastoreName string        `json:"datastoreName"`
	NasVolume     NasVolumeSpec `json:"nasVolume"`
}

// GetDatastoreName returns the value of DatastoreName.
func (s *NfsDatastoreSpec) GetDatastoreName() string {
	return s.DatastoreName
}

// GetNasVolume returns the value of NasVolume.
func (s *NfsDatastoreSpec) GetNasVolume() NasVolumeSpec {
	return s.NasVolume
}

// SetDatastoreName sets the value of DatastoreName.
func (s *NfsDatastoreSpec) SetDatastoreName(val string) {
	s.DatastoreName = val
}

// SetNasVolume sets the value of NasVolume.
func (s *NfsDatastoreSpec) SetNasVolume(val NasVolumeSpec) {
	s.NasVolume = val
}

// Network traffic per resource type.
// Ref: #/components/schemas/NiocBandwidthAllocation
type NiocBandwidthAllocation struct {
	// Host infrastructure traffic type.
	Type                          OptString                        `json:"type"`
	NiocTrafficResourceAllocation OptNiocTrafficResourceAllocation `json:"niocTrafficResourceAllocation"`
}

// GetType returns the value of Type.
func (s *NiocBandwidthAllocation) GetType() OptString {
	return s.Type
}

// GetNiocTrafficResourceAllocation returns the value of NiocTrafficResourceAllocation.
func (s *NiocBandwidthAllocation) GetNiocTrafficResourceAllocation() OptNiocTrafficResourceAllocation {
	return s.NiocTrafficResourceAllocation
}

// SetType sets the value of Type.
func (s *NiocBandwidthAllocation) SetType(val OptString) {
	s.Type = val
}

// SetNiocTrafficResourceAllocation sets the value of NiocTrafficResourceAllocation.
func (s *NiocBandwidthAllocation) SetNiocTrafficResourceAllocation(val OptNiocTrafficResourceAllocation) {
	s.NiocTrafficResourceAllocation = val
}

// This specification contains network traffic per resource type.
// Ref: #/components/schemas/NiocBandwidthAllocationSpec
type NiocBandwidthAllocationSpec struct {
	// DvsHostInfrastructureTrafficResource resource type.
	Type                          string                        `json:"type"`
	NiocTrafficResourceAllocation NiocTrafficResourceAllocation `json:"niocTrafficResourceAllocation"`
}

// GetType returns the value of Type.
func (s *NiocBandwidthAllocationSpec) GetType() string {
	return s.Type
}

// GetNiocTrafficResourceAllocation returns the value of NiocTrafficResourceAllocation.
func (s *NiocBandwidthAllocationSpec) GetNiocTrafficResourceAllocation() NiocTrafficResourceAllocation {
	return s.NiocTrafficResourceAllocation
}

// SetType sets the value of Type.
func (s *NiocBandwidthAllocationSpec) SetType(val string) {
	s.Type = val
}

// SetNiocTrafficResourceAllocation sets the value of NiocTrafficResourceAllocation.
func (s *NiocBandwidthAllocationSpec) SetNiocTrafficResourceAllocation(val NiocTrafficResourceAllocation) {
	s.NiocTrafficResourceAllocation = val
}

// Spec contains parameters for Network IO Control.
// Ref: #/components/schemas/NiocSpec
type NiocSpec struct {
	// Traffic Type. One among:VSAN, VMOTION, VIRTUALMACHINE, MANAGEMENT, NFS, VDP, HBR, FAULTTOLERANCE,
	// ISCSI.
	TrafficType string `json:"trafficType"`
	// NIOC Value.
	Value string `json:"value"`
}

// GetTrafficType returns the value of TrafficType.
func (s *NiocSpec) GetTrafficType() string {
	return s.TrafficType
}

// GetValue returns the value of Value.
func (s *NiocSpec) GetValue() string {
	return s.Value
}

// SetTrafficType sets the value of TrafficType.
func (s *NiocSpec) SetTrafficType(val string) {
	s.TrafficType = val
}

// SetValue sets the value of Value.
func (s *NiocSpec) SetValue(val string) {
	s.Value = val
}

// Specify network traffic allocation for a resource.
// Ref: #/components/schemas/NiocTrafficResourceAllocation
type NiocTrafficResourceAllocation struct {
	Limit       OptInt64      `json:"limit"`
	SharesInfo  OptSharesInfo `json:"sharesInfo"`
	Reservation OptInt64      `json:"reservation"`
}

// GetLimit returns the value of Limit.
func (s *NiocTrafficResourceAllocation) GetLimit() OptInt64 {
	return s.Limit
}

// GetSharesInfo returns the value of SharesInfo.
func (s *NiocTrafficResourceAllocation) GetSharesInfo() OptSharesInfo {
	return s.SharesInfo
}

// GetReservation returns the value of Reservation.
func (s *NiocTrafficResourceAllocation) GetReservation() OptInt64 {
	return s.Reservation
}

// SetLimit sets the value of Limit.
func (s *NiocTrafficResourceAllocation) SetLimit(val OptInt64) {
	s.Limit = val
}

// SetSharesInfo sets the value of SharesInfo.
func (s *NiocTrafficResourceAllocation) SetSharesInfo(val OptSharesInfo) {
	s.SharesInfo = val
}

// SetReservation sets the value of Reservation.
func (s *NiocTrafficResourceAllocation) SetReservation(val OptInt64) {
	s.Reservation = val
}

// NSX ALB Cluster.
// Ref: #/components/schemas/NsxALBCluster
type NsxALBCluster struct {
	// ID of the NSX Advanced Load Balancer Cluster.
	ID OptString `json:"id"`
	// Name of NSX Advanced Load Balancer Cluster.
	ClusterName OptString `json:"clusterName"`
	// Collection of IDs of Workload Domains where NSX Advanced Load Balancer Cluster is deployed.
	Domains []DomainReference `json:"domains"`
	// Collection of IDs of the NSX where NSX Advanced Load Balancer Cluster is deployed.
	NsxClusters []NsxTClusterReference `json:"nsxClusters"`
	// NSX Advanced Load Balancer Cluster Virtual fqdn.
	ClusterFqdn OptString `json:"clusterFqdn"`
	// NSX Advanced Load Balancer Cluster Virtual IPv4 address of format 'x.x.x.x'.
	ClusterIpAddress OptString `json:"clusterIpAddress"`
	// NSX Advanced Load Balancer Cluster status.
	ClusterStatus OptString `json:"clusterStatus"`
	// NSX Advanced Load Balancer Cluster version.
	Version OptString `json:"version"`
	// NSX Advanced Load Balancer Deployment Status.
	DeploymentStatus OptString `json:"deploymentStatus"`
}

// GetID returns the value of ID.
func (s *NsxALBCluster) GetID() OptString {
	return s.ID
}

// GetClusterName returns the value of ClusterName.
func (s *NsxALBCluster) GetClusterName() OptString {
	return s.ClusterName
}

// GetDomains returns the value of Domains.
func (s *NsxALBCluster) GetDomains() []DomainReference {
	return s.Domains
}

// GetNsxClusters returns the value of NsxClusters.
func (s *NsxALBCluster) GetNsxClusters() []NsxTClusterReference {
	return s.NsxClusters
}

// GetClusterFqdn returns the value of ClusterFqdn.
func (s *NsxALBCluster) GetClusterFqdn() OptString {
	return s.ClusterFqdn
}

// GetClusterIpAddress returns the value of ClusterIpAddress.
func (s *NsxALBCluster) GetClusterIpAddress() OptString {
	return s.ClusterIpAddress
}

// GetClusterStatus returns the value of ClusterStatus.
func (s *NsxALBCluster) GetClusterStatus() OptString {
	return s.ClusterStatus
}

// GetVersion returns the value of Version.
func (s *NsxALBCluster) GetVersion() OptString {
	return s.Version
}

// GetDeploymentStatus returns the value of DeploymentStatus.
func (s *NsxALBCluster) GetDeploymentStatus() OptString {
	return s.DeploymentStatus
}

// SetID sets the value of ID.
func (s *NsxALBCluster) SetID(val OptString) {
	s.ID = val
}

// SetClusterName sets the value of ClusterName.
func (s *NsxALBCluster) SetClusterName(val OptString) {
	s.ClusterName = val
}

// SetDomains sets the value of Domains.
func (s *NsxALBCluster) SetDomains(val []DomainReference) {
	s.Domains = val
}

// SetNsxClusters sets the value of NsxClusters.
func (s *NsxALBCluster) SetNsxClusters(val []NsxTClusterReference) {
	s.NsxClusters = val
}

// SetClusterFqdn sets the value of ClusterFqdn.
func (s *NsxALBCluster) SetClusterFqdn(val OptString) {
	s.ClusterFqdn = val
}

// SetClusterIpAddress sets the value of ClusterIpAddress.
func (s *NsxALBCluster) SetClusterIpAddress(val OptString) {
	s.ClusterIpAddress = val
}

// SetClusterStatus sets the value of ClusterStatus.
func (s *NsxALBCluster) SetClusterStatus(val OptString) {
	s.ClusterStatus = val
}

// SetVersion sets the value of Version.
func (s *NsxALBCluster) SetVersion(val OptString) {
	s.Version = val
}

// SetDeploymentStatus sets the value of DeploymentStatus.
func (s *NsxALBCluster) SetDeploymentStatus(val OptString) {
	s.DeploymentStatus = val
}

func (*NsxALBCluster) getALBClusterRes() {}

// NSX Alb cluster creation data.
// Ref: #/components/schemas/NsxAlbControllerClusterSpec
type NsxAlbControllerClusterSpec struct {
	// IDs of the workload Domains where NSX Advanced Load Balancer Cluster will be deployed.
	DomainIds []string `json:"domainIds"`
	// Name of NSX Advanced Load Balancer Cluster.
	ClusterName string `json:"clusterName"`
	// NSX Advanced Load Balancer Cluster fully qualified domain name.
	ClusterFqdn string `json:"clusterFqdn"`
	// NSX Advanced Load Balancer Cluster Virtual IPv4 address of format 'x.x.x.x'.
	ClusterIpAddress string `json:"clusterIpAddress"`
	// Size of NSX ALB cluster.
	FormFactor string `json:"formFactor"`
	// Admin user password of NSX Advanced Load Balancer Cluster.
	AdminPassword string `json:"adminPassword"`
	// NSX Advanced Load Balancer Cluster Controller Nodes.
	Nodes []NsxAlbControllerNodeSpec `json:"nodes"`
	// NSX Advanced Load Balancer Bundle ID.
	BundleId OptString `json:"bundleId"`
}

// GetDomainIds returns the value of DomainIds.
func (s *NsxAlbControllerClusterSpec) GetDomainIds() []string {
	return s.DomainIds
}

// GetClusterName returns the value of ClusterName.
func (s *NsxAlbControllerClusterSpec) GetClusterName() string {
	return s.ClusterName
}

// GetClusterFqdn returns the value of ClusterFqdn.
func (s *NsxAlbControllerClusterSpec) GetClusterFqdn() string {
	return s.ClusterFqdn
}

// GetClusterIpAddress returns the value of ClusterIpAddress.
func (s *NsxAlbControllerClusterSpec) GetClusterIpAddress() string {
	return s.ClusterIpAddress
}

// GetFormFactor returns the value of FormFactor.
func (s *NsxAlbControllerClusterSpec) GetFormFactor() string {
	return s.FormFactor
}

// GetAdminPassword returns the value of AdminPassword.
func (s *NsxAlbControllerClusterSpec) GetAdminPassword() string {
	return s.AdminPassword
}

// GetNodes returns the value of Nodes.
func (s *NsxAlbControllerClusterSpec) GetNodes() []NsxAlbControllerNodeSpec {
	return s.Nodes
}

// GetBundleId returns the value of BundleId.
func (s *NsxAlbControllerClusterSpec) GetBundleId() OptString {
	return s.BundleId
}

// SetDomainIds sets the value of DomainIds.
func (s *NsxAlbControllerClusterSpec) SetDomainIds(val []string) {
	s.DomainIds = val
}

// SetClusterName sets the value of ClusterName.
func (s *NsxAlbControllerClusterSpec) SetClusterName(val string) {
	s.ClusterName = val
}

// SetClusterFqdn sets the value of ClusterFqdn.
func (s *NsxAlbControllerClusterSpec) SetClusterFqdn(val string) {
	s.ClusterFqdn = val
}

// SetClusterIpAddress sets the value of ClusterIpAddress.
func (s *NsxAlbControllerClusterSpec) SetClusterIpAddress(val string) {
	s.ClusterIpAddress = val
}

// SetFormFactor sets the value of FormFactor.
func (s *NsxAlbControllerClusterSpec) SetFormFactor(val string) {
	s.FormFactor = val
}

// SetAdminPassword sets the value of AdminPassword.
func (s *NsxAlbControllerClusterSpec) SetAdminPassword(val string) {
	s.AdminPassword = val
}

// SetNodes sets the value of Nodes.
func (s *NsxAlbControllerClusterSpec) SetNodes(val []NsxAlbControllerNodeSpec) {
	s.Nodes = val
}

// SetBundleId sets the value of BundleId.
func (s *NsxAlbControllerClusterSpec) SetBundleId(val OptString) {
	s.BundleId = val
}

// NSX ALB Node representation.
// Ref: #/components/schemas/NsxAlbControllerNodeSpec
type NsxAlbControllerNodeSpec struct {
	// IPv4 address of NSX Advanced Load Balancer Node.
	IpAddress string `json:"ipAddress"`
}

// GetIpAddress returns the value of IpAddress.
func (s *NsxAlbControllerNodeSpec) GetIpAddress() string {
	return s.IpAddress
}

// SetIpAddress sets the value of IpAddress.
func (s *NsxAlbControllerNodeSpec) SetIpAddress(val string) {
	s.IpAddress = val
}

// NSX Alb cluster creation data.
// Ref: #/components/schemas/NsxAlbVersionValidationSpec
type NsxAlbVersionValidationSpec struct {
	// IDs of the WorkLoadDomain where NSX Advanced Load Balancer Cluster will be deployed.
	DomainIds []string `json:"domainIds"`
	// NSX Advanced Load Balancer Bundle ID.
	BundleId string `json:"bundleId"`
}

// GetDomainIds returns the value of DomainIds.
func (s *NsxAlbVersionValidationSpec) GetDomainIds() []string {
	return s.DomainIds
}

// GetBundleId returns the value of BundleId.
func (s *NsxAlbVersionValidationSpec) GetBundleId() string {
	return s.BundleId
}

// SetDomainIds sets the value of DomainIds.
func (s *NsxAlbVersionValidationSpec) SetDomainIds(val []string) {
	s.DomainIds = val
}

// SetBundleId sets the value of BundleId.
func (s *NsxAlbVersionValidationSpec) SetBundleId(val string) {
	s.BundleId = val
}

// This specification contains NSX configuration for cluster.
// Ref: #/components/schemas/NsxClusterSpec
type NsxClusterSpec struct {
	NsxTClusterSpec OptNsxTClusterSpec `json:"nsxTClusterSpec"`
}

// GetNsxTClusterSpec returns the value of NsxTClusterSpec.
func (s *NsxClusterSpec) GetNsxTClusterSpec() OptNsxTClusterSpec {
	return s.NsxTClusterSpec
}

// SetNsxTClusterSpec sets the value of NsxTClusterSpec.
func (s *NsxClusterSpec) SetNsxTClusterSpec(val OptNsxTClusterSpec) {
	s.NsxTClusterSpec = val
}

// This specification contains the parameters required to install and configure NSX Manager in a
// workload domain.
// Ref: #/components/schemas/NsxManagerSpec
type NsxManagerSpec struct {
	// Name of the NSX Manager virtual machine.
	Name               OptString          `json:"name"`
	NetworkDetailsSpec NetworkDetailsSpec `json:"networkDetailsSpec"`
}

// GetName returns the value of Name.
func (s *NsxManagerSpec) GetName() OptString {
	return s.Name
}

// GetNetworkDetailsSpec returns the value of NetworkDetailsSpec.
func (s *NsxManagerSpec) GetNetworkDetailsSpec() NetworkDetailsSpec {
	return s.NetworkDetailsSpec
}

// SetName sets the value of Name.
func (s *NsxManagerSpec) SetName(val OptString) {
	s.Name = val
}

// SetNetworkDetailsSpec sets the value of NetworkDetailsSpec.
func (s *NsxManagerSpec) SetNetworkDetailsSpec(val NetworkDetailsSpec) {
	s.NetworkDetailsSpec = val
}

// This specification contains NSX configuration for Secondary AZ Hosts.
// Ref: #/components/schemas/NsxStretchClusterSpec
type NsxStretchClusterSpec struct {
	// The IP address pool specifications.
	IpAddressPoolsSpec []IpAddressPoolSpec `json:"ipAddressPoolsSpec"`
	// The list of uplink profile specifications.
	UplinkProfiles []UplinkProfile `json:"uplinkProfiles"`
}

// GetIpAddressPoolsSpec returns the value of IpAddressPoolsSpec.
func (s *NsxStretchClusterSpec) GetIpAddressPoolsSpec() []IpAddressPoolSpec {
	return s.IpAddressPoolsSpec
}

// GetUplinkProfiles returns the value of UplinkProfiles.
func (s *NsxStretchClusterSpec) GetUplinkProfiles() []UplinkProfile {
	return s.UplinkProfiles
}

// SetIpAddressPoolsSpec sets the value of IpAddressPoolsSpec.
func (s *NsxStretchClusterSpec) SetIpAddressPoolsSpec(val []IpAddressPoolSpec) {
	s.IpAddressPoolsSpec = val
}

// SetUplinkProfiles sets the value of UplinkProfiles.
func (s *NsxStretchClusterSpec) SetUplinkProfiles(val []UplinkProfile) {
	s.UplinkProfiles = val
}

// NSX Cluster representation.
// Ref: #/components/schemas/NsxTCluster
type NsxTCluster struct {
	// ID of the cluster.
	ID OptString `json:"id"`
	// [Deprecated] Native ID of the NSX cluster.
	//
	// Deprecated: schema marks this property as deprecated.
	NativeId OptString `json:"nativeId"`
	// FQDN for VIP of the cluster.
	VipFqdn OptString `json:"vipFqdn"`
	// VIP (Virtual IP Address) of the cluster.
	Vip OptString `json:"vip"`
	// Information about the domains associated with the cluster.
	Domains []DomainReference `json:"domains"`
	// Information about the NSX managers associated with the cluster.
	Nodes []NsxTManager `json:"nodes"`
	// Version of the NSX managers associated with the cluster.
	Version OptString `json:"version"`
	// Boolean to identify if the NSX cluster is shared among workload domains.
	IsShared OptBool `json:"isShared"`
	// Boolean to identify if the NSX cluster can be shared to create a new workload domain.
	IsShareable OptBool `json:"isShareable"`
	// Boolean to identify if the NSX cluster is compatible with vLCM. This should not be used to
	// determineif vLCM Clusters can be created on the domain.
	IsVlcmCompatible OptBool `json:"isVlcmCompatible"`
	// NSX cluster status. To get NSX cluster status invoke nsxt-clusters query API with criterion
	// NSXT_CLUSTERS_WITH_STATUS.
	Status OptString `json:"status"`
}

// GetID returns the value of ID.
func (s *NsxTCluster) GetID() OptString {
	return s.ID
}

// GetNativeId returns the value of NativeId.
func (s *NsxTCluster) GetNativeId() OptString {
	return s.NativeId
}

// GetVipFqdn returns the value of VipFqdn.
func (s *NsxTCluster) GetVipFqdn() OptString {
	return s.VipFqdn
}

// GetVip returns the value of Vip.
func (s *NsxTCluster) GetVip() OptString {
	return s.Vip
}

// GetDomains returns the value of Domains.
func (s *NsxTCluster) GetDomains() []DomainReference {
	return s.Domains
}

// GetNodes returns the value of Nodes.
func (s *NsxTCluster) GetNodes() []NsxTManager {
	return s.Nodes
}

// GetVersion returns the value of Version.
func (s *NsxTCluster) GetVersion() OptString {
	return s.Version
}

// GetIsShared returns the value of IsShared.
func (s *NsxTCluster) GetIsShared() OptBool {
	return s.IsShared
}

// GetIsShareable returns the value of IsShareable.
func (s *NsxTCluster) GetIsShareable() OptBool {
	return s.IsShareable
}

// GetIsVlcmCompatible returns the value of IsVlcmCompatible.
func (s *NsxTCluster) GetIsVlcmCompatible() OptBool {
	return s.IsVlcmCompatible
}

// GetStatus returns the value of Status.
func (s *NsxTCluster) GetStatus() OptString {
	return s.Status
}

// SetID sets the value of ID.
func (s *NsxTCluster) SetID(val OptString) {
	s.ID = val
}

// SetNativeId sets the value of NativeId.
func (s *NsxTCluster) SetNativeId(val OptString) {
	s.NativeId = val
}

// SetVipFqdn sets the value of VipFqdn.
func (s *NsxTCluster) SetVipFqdn(val OptString) {
	s.VipFqdn = val
}

// SetVip sets the value of Vip.
func (s *NsxTCluster) SetVip(val OptString) {
	s.Vip = val
}

// SetDomains sets the value of Domains.
func (s *NsxTCluster) SetDomains(val []DomainReference) {
	s.Domains = val
}

// SetNodes sets the value of Nodes.
func (s *NsxTCluster) SetNodes(val []NsxTManager) {
	s.Nodes = val
}

// SetVersion sets the value of Version.
func (s *NsxTCluster) SetVersion(val OptString) {
	s.Version = val
}

// SetIsShared sets the value of IsShared.
func (s *NsxTCluster) SetIsShared(val OptBool) {
	s.IsShared = val
}

// SetIsShareable sets the value of IsShareable.
func (s *NsxTCluster) SetIsShareable(val OptBool) {
	s.IsShareable = val
}

// SetIsVlcmCompatible sets the value of IsVlcmCompatible.
func (s *NsxTCluster) SetIsVlcmCompatible(val OptBool) {
	s.IsVlcmCompatible = val
}

// SetStatus sets the value of Status.
func (s *NsxTCluster) SetStatus(val OptString) {
	s.Status = val
}

func (*NsxTCluster) getNsxClusterRes() {}

// Represents an NSX Cluster reference.
// Ref: #/components/schemas/NsxTClusterReference
type NsxTClusterReference struct {
	// ID of the NSX cluster.
	ID OptString `json:"id"`
	// FQDN for VIP of the NSX cluster.
	VipFqdn OptString `json:"vipFqdn"`
	// VIP (Virtual IP Address) of the NSX cluster.
	Vip OptString `json:"vip"`
}

// GetID returns the value of ID.
func (s *NsxTClusterReference) GetID() OptString {
	return s.ID
}

// GetVipFqdn returns the value of VipFqdn.
func (s *NsxTClusterReference) GetVipFqdn() OptString {
	return s.VipFqdn
}

// GetVip returns the value of Vip.
func (s *NsxTClusterReference) GetVip() OptString {
	return s.Vip
}

// SetID sets the value of ID.
func (s *NsxTClusterReference) SetID(val OptString) {
	s.ID = val
}

// SetVipFqdn sets the value of VipFqdn.
func (s *NsxTClusterReference) SetVipFqdn(val OptString) {
	s.VipFqdn = val
}

// SetVip sets the value of Vip.
func (s *NsxTClusterReference) SetVip(val OptString) {
	s.Vip = val
}

// This specification contains NSX configuration for a new cluster.
// Ref: #/components/schemas/NsxTClusterSpec
type NsxTClusterSpec struct {
	// Vlan id of Geneve. (This field is deprecated, instead please use transportVlan in uplinkProfiles).
	//
	// Deprecated: schema marks this property as deprecated.
	GeneveVlanId      OptInt32             `json:"geneveVlanId"`
	IpAddressPoolSpec OptIpAddressPoolSpec `json:"ipAddressPoolSpec"`
	// The list of IP address pools specification.
	IpAddressPoolsSpec []IpAddressPoolSpec `json:"ipAddressPoolsSpec"`
	// The list of uplink profile specifications.
	UplinkProfiles []UplinkProfile `json:"uplinkProfiles"`
}

// GetGeneveVlanId returns the value of GeneveVlanId.
func (s *NsxTClusterSpec) GetGeneveVlanId() OptInt32 {
	return s.GeneveVlanId
}

// GetIpAddressPoolSpec returns the value of IpAddressPoolSpec.
func (s *NsxTClusterSpec) GetIpAddressPoolSpec() OptIpAddressPoolSpec {
	return s.IpAddressPoolSpec
}

// GetIpAddressPoolsSpec returns the value of IpAddressPoolsSpec.
func (s *NsxTClusterSpec) GetIpAddressPoolsSpec() []IpAddressPoolSpec {
	return s.IpAddressPoolsSpec
}

// GetUplinkProfiles returns the value of UplinkProfiles.
func (s *NsxTClusterSpec) GetUplinkProfiles() []UplinkProfile {
	return s.UplinkProfiles
}

// SetGeneveVlanId sets the value of GeneveVlanId.
func (s *NsxTClusterSpec) SetGeneveVlanId(val OptInt32) {
	s.GeneveVlanId = val
}

// SetIpAddressPoolSpec sets the value of IpAddressPoolSpec.
func (s *NsxTClusterSpec) SetIpAddressPoolSpec(val OptIpAddressPoolSpec) {
	s.IpAddressPoolSpec = val
}

// SetIpAddressPoolsSpec sets the value of IpAddressPoolsSpec.
func (s *NsxTClusterSpec) SetIpAddressPoolsSpec(val []IpAddressPoolSpec) {
	s.IpAddressPoolsSpec = val
}

// SetUplinkProfiles sets the value of UplinkProfiles.
func (s *NsxTClusterSpec) SetUplinkProfiles(val []UplinkProfile) {
	s.UplinkProfiles = val
}

// Represents a criterion for querying the NSX cluster.
// Ref: #/components/schemas/NsxTCriterion
type NsxTCriterion struct {
	// Name of the criterion.
	Name OptString `json:"name"`
	// Arguments required for a particular criterion.
	Arguments OptNsxTCriterionArguments `json:"arguments"`
	// Description of the criterion.
	Description OptString `json:"description"`
}

// GetName returns the value of Name.
func (s *NsxTCriterion) GetName() OptString {
	return s.Name
}

// GetArguments returns the value of Arguments.
func (s *NsxTCriterion) GetArguments() OptNsxTCriterionArguments {
	return s.Arguments
}

// GetDescription returns the value of Description.
func (s *NsxTCriterion) GetDescription() OptString {
	return s.Description
}

// SetName sets the value of Name.
func (s *NsxTCriterion) SetName(val OptString) {
	s.Name = val
}

// SetArguments sets the value of Arguments.
func (s *NsxTCriterion) SetArguments(val OptNsxTCriterionArguments) {
	s.Arguments = val
}

// SetDescription sets the value of Description.
func (s *NsxTCriterion) SetDescription(val OptString) {
	s.Description = val
}

func (*NsxTCriterion) getNsxCriterionRes() {}

// Arguments required for a particular criterion.
type NsxTCriterionArguments map[string]string

func (s *NsxTCriterionArguments) init() NsxTCriterionArguments {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// This specification contains edge cluster profile configurations.
// Ref: #/components/schemas/NsxTEdgeClusterProfileSpec
type NsxTEdgeClusterProfileSpec struct {
	// Name for the edge cluster profile.
	EdgeClusterProfileName string `json:"edgeClusterProfileName"`
	// BFD allowed Hop.
	BfdAllowedHop int64 `json:"bfdAllowedHop"`
	// BFD Declare Dead Multiple.
	BfdDeclareDeadMultiple int64 `json:"bfdDeclareDeadMultiple"`
	// BFD Probe.
	BfdProbeInterval int64 `json:"bfdProbeInterval"`
	// Standby Relocation Threshold.
	StandbyRelocationThreshold int64 `json:"standbyRelocationThreshold"`
}

// GetEdgeClusterProfileName returns the value of EdgeClusterProfileName.
func (s *NsxTEdgeClusterProfileSpec) GetEdgeClusterProfileName() string {
	return s.EdgeClusterProfileName
}

// GetBfdAllowedHop returns the value of BfdAllowedHop.
func (s *NsxTEdgeClusterProfileSpec) GetBfdAllowedHop() int64 {
	return s.BfdAllowedHop
}

// GetBfdDeclareDeadMultiple returns the value of BfdDeclareDeadMultiple.
func (s *NsxTEdgeClusterProfileSpec) GetBfdDeclareDeadMultiple() int64 {
	return s.BfdDeclareDeadMultiple
}

// GetBfdProbeInterval returns the value of BfdProbeInterval.
func (s *NsxTEdgeClusterProfileSpec) GetBfdProbeInterval() int64 {
	return s.BfdProbeInterval
}

// GetStandbyRelocationThreshold returns the value of StandbyRelocationThreshold.
func (s *NsxTEdgeClusterProfileSpec) GetStandbyRelocationThreshold() int64 {
	return s.StandbyRelocationThreshold
}

// SetEdgeClusterProfileName sets the value of EdgeClusterProfileName.
func (s *NsxTEdgeClusterProfileSpec) SetEdgeClusterProfileName(val string) {
	s.EdgeClusterProfileName = val
}

// SetBfdAllowedHop sets the value of BfdAllowedHop.
func (s *NsxTEdgeClusterProfileSpec) SetBfdAllowedHop(val int64) {
	s.BfdAllowedHop = val
}

// SetBfdDeclareDeadMultiple sets the value of BfdDeclareDeadMultiple.
func (s *NsxTEdgeClusterProfileSpec) SetBfdDeclareDeadMultiple(val int64) {
	s.BfdDeclareDeadMultiple = val
}

// SetBfdProbeInterval sets the value of BfdProbeInterval.
func (s *NsxTEdgeClusterProfileSpec) SetBfdProbeInterval(val int64) {
	s.BfdProbeInterval = val
}

// SetStandbyRelocationThreshold sets the value of StandbyRelocationThreshold.
func (s *NsxTEdgeClusterProfileSpec) SetStandbyRelocationThreshold(val int64) {
	s.StandbyRelocationThreshold = val
}

// This specification contains configuration inputs required to deploy and configure an edge node.
// Ref: #/components/schemas/NsxTEdgeNodeSpec
type NsxTEdgeNodeSpec struct {
	// Edge Node Name.
	EdgeNodeName string `json:"edgeNodeName"`
	// Management Interface IP.
	ManagementIP string `json:"managementIP"`
	// Management Gateway IP.
	ManagementGateway string `json:"managementGateway"`
	// Management Vlan Id.
	VmManagementPortgroupVlan OptInt32 `json:"vmManagementPortgroupVlan"`
	// Management Network Name.
	VmManagementPortgroupName OptString `json:"vmManagementPortgroupName"`
	// Edge TEP Gateway IP.
	EdgeTepGateway OptString `json:"edgeTepGateway"`
	// Edge TEP 1 IP.
	EdgeTep1IP OptString `json:"edgeTep1IP"`
	// Edge TEP 2 IP.
	EdgeTep2IP           OptString                   `json:"edgeTep2IP"`
	EdgeTepIpAddressPool OptEdgeTepIpAddressPoolSpec `json:"edgeTepIpAddressPool"`
	// Edge TEP VLAN.
	EdgeTepVlan int32 `json:"edgeTepVlan"`
	// ID of vSphere cluster where the Edge node will be deployed.
	ClusterId OptString `json:"clusterId"`
	// Is inter-rack cluster(true for L2 non-uniform and L3 : At least one of management, uplink, Edge
	// and host TEP networks is different for hosts of the cluster, false for L2 uniform :   All hosts in
	// cluster have identical management, uplink, Edge and host TEP networks).
	InterRackCluster OptBool `json:"interRackCluster"`
	// Specifications of Tier0 uplinks for the Edge Node. For edge cluster creation uplink network is
	// mandatory otherwise its optional an field.
	UplinkNetwork []NsxTEdgeUplinkNetwork `json:"uplinkNetwork"`
	// First NSX enabled VDS uplink for the Edge node.
	FirstNsxVdsUplink OptString `json:"firstNsxVdsUplink"`
	// Second NSX enabled VDS uplink for the Edge node.
	SecondNsxVdsUplink OptString `json:"secondNsxVdsUplink"`
}

// GetEdgeNodeName returns the value of EdgeNodeName.
func (s *NsxTEdgeNodeSpec) GetEdgeNodeName() string {
	return s.EdgeNodeName
}

// GetManagementIP returns the value of ManagementIP.
func (s *NsxTEdgeNodeSpec) GetManagementIP() string {
	return s.ManagementIP
}

// GetManagementGateway returns the value of ManagementGateway.
func (s *NsxTEdgeNodeSpec) GetManagementGateway() string {
	return s.ManagementGateway
}

// GetVmManagementPortgroupVlan returns the value of VmManagementPortgroupVlan.
func (s *NsxTEdgeNodeSpec) GetVmManagementPortgroupVlan() OptInt32 {
	return s.VmManagementPortgroupVlan
}

// GetVmManagementPortgroupName returns the value of VmManagementPortgroupName.
func (s *NsxTEdgeNodeSpec) GetVmManagementPortgroupName() OptString {
	return s.VmManagementPortgroupName
}

// GetEdgeTepGateway returns the value of EdgeTepGateway.
func (s *NsxTEdgeNodeSpec) GetEdgeTepGateway() OptString {
	return s.EdgeTepGateway
}

// GetEdgeTep1IP returns the value of EdgeTep1IP.
func (s *NsxTEdgeNodeSpec) GetEdgeTep1IP() OptString {
	return s.EdgeTep1IP
}

// GetEdgeTep2IP returns the value of EdgeTep2IP.
func (s *NsxTEdgeNodeSpec) GetEdgeTep2IP() OptString {
	return s.EdgeTep2IP
}

// GetEdgeTepIpAddressPool returns the value of EdgeTepIpAddressPool.
func (s *NsxTEdgeNodeSpec) GetEdgeTepIpAddressPool() OptEdgeTepIpAddressPoolSpec {
	return s.EdgeTepIpAddressPool
}

// GetEdgeTepVlan returns the value of EdgeTepVlan.
func (s *NsxTEdgeNodeSpec) GetEdgeTepVlan() int32 {
	return s.EdgeTepVlan
}

// GetClusterId returns the value of ClusterId.
func (s *NsxTEdgeNodeSpec) GetClusterId() OptString {
	return s.ClusterId
}

// GetInterRackCluster returns the value of InterRackCluster.
func (s *NsxTEdgeNodeSpec) GetInterRackCluster() OptBool {
	return s.InterRackCluster
}

// GetUplinkNetwork returns the value of UplinkNetwork.
func (s *NsxTEdgeNodeSpec) GetUplinkNetwork() []NsxTEdgeUplinkNetwork {
	return s.UplinkNetwork
}

// GetFirstNsxVdsUplink returns the value of FirstNsxVdsUplink.
func (s *NsxTEdgeNodeSpec) GetFirstNsxVdsUplink() OptString {
	return s.FirstNsxVdsUplink
}

// GetSecondNsxVdsUplink returns the value of SecondNsxVdsUplink.
func (s *NsxTEdgeNodeSpec) GetSecondNsxVdsUplink() OptString {
	return s.SecondNsxVdsUplink
}

// SetEdgeNodeName sets the value of EdgeNodeName.
func (s *NsxTEdgeNodeSpec) SetEdgeNodeName(val string) {
	s.EdgeNodeName = val
}

// SetManagementIP sets the value of ManagementIP.
func (s *NsxTEdgeNodeSpec) SetManagementIP(val string) {
	s.ManagementIP = val
}

// SetManagementGateway sets the value of ManagementGateway.
func (s *NsxTEdgeNodeSpec) SetManagementGateway(val string) {
	s.ManagementGateway = val
}

// SetVmManagementPortgroupVlan sets the value of VmManagementPortgroupVlan.
func (s *NsxTEdgeNodeSpec) SetVmManagementPortgroupVlan(val OptInt32) {
	s.VmManagementPortgroupVlan = val
}

// SetVmManagementPortgroupName sets the value of VmManagementPortgroupName.
func (s *NsxTEdgeNodeSpec) SetVmManagementPortgroupName(val OptString) {
	s.VmManagementPortgroupName = val
}

// SetEdgeTepGateway sets the value of EdgeTepGateway.
func (s *NsxTEdgeNodeSpec) SetEdgeTepGateway(val OptString) {
	s.EdgeTepGateway = val
}

// SetEdgeTep1IP sets the value of EdgeTep1IP.
func (s *NsxTEdgeNodeSpec) SetEdgeTep1IP(val OptString) {
	s.EdgeTep1IP = val
}

// SetEdgeTep2IP sets the value of EdgeTep2IP.
func (s *NsxTEdgeNodeSpec) SetEdgeTep2IP(val OptString) {
	s.EdgeTep2IP = val
}

// SetEdgeTepIpAddressPool sets the value of EdgeTepIpAddressPool.
func (s *NsxTEdgeNodeSpec) SetEdgeTepIpAddressPool(val OptEdgeTepIpAddressPoolSpec) {
	s.EdgeTepIpAddressPool = val
}

// SetEdgeTepVlan sets the value of EdgeTepVlan.
func (s *NsxTEdgeNodeSpec) SetEdgeTepVlan(val int32) {
	s.EdgeTepVlan = val
}

// SetClusterId sets the value of ClusterId.
func (s *NsxTEdgeNodeSpec) SetClusterId(val OptString) {
	s.ClusterId = val
}

// SetInterRackCluster sets the value of InterRackCluster.
func (s *NsxTEdgeNodeSpec) SetInterRackCluster(val OptBool) {
	s.InterRackCluster = val
}

// SetUplinkNetwork sets the value of UplinkNetwork.
func (s *NsxTEdgeNodeSpec) SetUplinkNetwork(val []NsxTEdgeUplinkNetwork) {
	s.UplinkNetwork = val
}

// SetFirstNsxVdsUplink sets the value of FirstNsxVdsUplink.
func (s *NsxTEdgeNodeSpec) SetFirstNsxVdsUplink(val OptString) {
	s.FirstNsxVdsUplink = val
}

// SetSecondNsxVdsUplink sets the value of SecondNsxVdsUplink.
func (s *NsxTEdgeNodeSpec) SetSecondNsxVdsUplink(val OptString) {
	s.SecondNsxVdsUplink = val
}

// This specification contains input  parameters required to configure  uplink network for NSX  edge
// node VM.
// Ref: #/components/schemas/NsxTEdgeUplinkNetwork
type NsxTEdgeUplinkNetwork struct {
	// Uplink Vlan.
	UplinkVlan int32 `json:"uplinkVlan"`
	// Uplink IP.
	UplinkInterfaceIP string `json:"uplinkInterfaceIP"`
	// [Deprecated] BGP Peer IP (please use bgpPeers instead).
	//
	// Deprecated: schema marks this property as deprecated.
	PeerIP OptString `json:"peerIP"`
	// [Deprecated] ASN of Peer (please use bgpPeers instead).
	//
	// Deprecated: schema marks this property as deprecated.
	AsnPeer OptInt64 `json:"asnPeer"`
	// [Deprecated] BGP Peer Password (please use bgpPeers instead).
	//
	// Deprecated: schema marks this property as deprecated.
	BgpPeerPassword OptString `json:"bgpPeerPassword"`
	// List of BGP Peer configuration.
	BgpPeers []BgpPeerSpec `json:"bgpPeers"`
}

// GetUplinkVlan returns the value of UplinkVlan.
func (s *NsxTEdgeUplinkNetwork) GetUplinkVlan() int32 {
	return s.UplinkVlan
}

// GetUplinkInterfaceIP returns the value of UplinkInterfaceIP.
func (s *NsxTEdgeUplinkNetwork) GetUplinkInterfaceIP() string {
	return s.UplinkInterfaceIP
}

// GetPeerIP returns the value of PeerIP.
func (s *NsxTEdgeUplinkNetwork) GetPeerIP() OptString {
	return s.PeerIP
}

// GetAsnPeer returns the value of AsnPeer.
func (s *NsxTEdgeUplinkNetwork) GetAsnPeer() OptInt64 {
	return s.AsnPeer
}

// GetBgpPeerPassword returns the value of BgpPeerPassword.
func (s *NsxTEdgeUplinkNetwork) GetBgpPeerPassword() OptString {
	return s.BgpPeerPassword
}

// GetBgpPeers returns the value of BgpPeers.
func (s *NsxTEdgeUplinkNetwork) GetBgpPeers() []BgpPeerSpec {
	return s.BgpPeers
}

// SetUplinkVlan sets the value of UplinkVlan.
func (s *NsxTEdgeUplinkNetwork) SetUplinkVlan(val int32) {
	s.UplinkVlan = val
}

// SetUplinkInterfaceIP sets the value of UplinkInterfaceIP.
func (s *NsxTEdgeUplinkNetwork) SetUplinkInterfaceIP(val string) {
	s.UplinkInterfaceIP = val
}

// SetPeerIP sets the value of PeerIP.
func (s *NsxTEdgeUplinkNetwork) SetPeerIP(val OptString) {
	s.PeerIP = val
}

// SetAsnPeer sets the value of AsnPeer.
func (s *NsxTEdgeUplinkNetwork) SetAsnPeer(val OptInt64) {
	s.AsnPeer = val
}

// SetBgpPeerPassword sets the value of BgpPeerPassword.
func (s *NsxTEdgeUplinkNetwork) SetBgpPeerPassword(val OptString) {
	s.BgpPeerPassword = val
}

// SetBgpPeers sets the value of BgpPeers.
func (s *NsxTEdgeUplinkNetwork) SetBgpPeers(val []BgpPeerSpec) {
	s.BgpPeers = val
}

// NSX Manager representation.
// Ref: #/components/schemas/NsxTManager
type NsxTManager struct {
	// ID of the manager.
	ID OptString `json:"id"`
	// FQDN of the manager.
	Fqdn OptString `json:"fqdn"`
	// IP address of the manager.
	IpAddress OptString `json:"ipAddress"`
	// NSX Manager VM name in vCenter.
	Name OptString `json:"name"`
}

// GetID returns the value of ID.
func (s *NsxTManager) GetID() OptString {
	return s.ID
}

// GetFqdn returns the value of Fqdn.
func (s *NsxTManager) GetFqdn() OptString {
	return s.Fqdn
}

// GetIpAddress returns the value of IpAddress.
func (s *NsxTManager) GetIpAddress() OptString {
	return s.IpAddress
}

// GetName returns the value of Name.
func (s *NsxTManager) GetName() OptString {
	return s.Name
}

// SetID sets the value of ID.
func (s *NsxTManager) SetID(val OptString) {
	s.ID = val
}

// SetFqdn sets the value of Fqdn.
func (s *NsxTManager) SetFqdn(val OptString) {
	s.Fqdn = val
}

// SetIpAddress sets the value of IpAddress.
func (s *NsxTManager) SetIpAddress(val OptString) {
	s.IpAddress = val
}

// SetName sets the value of Name.
func (s *NsxTManager) SetName(val OptString) {
	s.Name = val
}

// Represents a NSX cluster query response.
// Ref: #/components/schemas/NsxTQueryResponse
type NsxTQueryResponse struct {
	QueryInfo OptQueryInfo       `json:"queryInfo"`
	Result    OptPageNsxTCluster `json:"result"`
}

// GetQueryInfo returns the value of QueryInfo.
func (s *NsxTQueryResponse) GetQueryInfo() OptQueryInfo {
	return s.QueryInfo
}

// GetResult returns the value of Result.
func (s *NsxTQueryResponse) GetResult() OptPageNsxTCluster {
	return s.Result
}

// SetQueryInfo sets the value of QueryInfo.
func (s *NsxTQueryResponse) SetQueryInfo(val OptQueryInfo) {
	s.QueryInfo = val
}

// SetResult sets the value of Result.
func (s *NsxTQueryResponse) SetResult(val OptPageNsxTCluster) {
	s.Result = val
}

func (*NsxTQueryResponse) startNsxCriteriaQueryRes() {}

// This specification contains the parameters required to install and configure NSX in a workload
// domain.
// Ref: #/components/schemas/NsxTSpec
type NsxTSpec struct {
	// Specification details of the NSX Manager virtual machine.
	NsxManagerSpecs []NsxManagerSpec `json:"nsxManagerSpecs"`
	// Virtual IP address which would act as proxy/alias for NSX Managers. Can be omitted if FQDN is
	// provided.
	Vip OptString `json:"vip"`
	// FQDN for VIP so that common SSL certificates can be installed across all managers.
	VipFqdn string `json:"vipFqdn"`
	// NSX license value.
	LicenseKey OptString `json:"licenseKey"`
	// NSX manager admin password (basic auth and SSH).
	NsxManagerAdminPassword OptString `json:"nsxManagerAdminPassword"`
	// NSX manager Audit password.
	NsxManagerAuditPassword OptString `json:"nsxManagerAuditPassword"`
	// NSX manager form factor.
	FormFactor        OptString            `json:"formFactor"`
	IpAddressPoolSpec OptIpAddressPoolSpec `json:"ipAddressPoolSpec"`
}

// GetNsxManagerSpecs returns the value of NsxManagerSpecs.
func (s *NsxTSpec) GetNsxManagerSpecs() []NsxManagerSpec {
	return s.NsxManagerSpecs
}

// GetVip returns the value of Vip.
func (s *NsxTSpec) GetVip() OptString {
	return s.Vip
}

// GetVipFqdn returns the value of VipFqdn.
func (s *NsxTSpec) GetVipFqdn() string {
	return s.VipFqdn
}

// GetLicenseKey returns the value of LicenseKey.
func (s *NsxTSpec) GetLicenseKey() OptString {
	return s.LicenseKey
}

// GetNsxManagerAdminPassword returns the value of NsxManagerAdminPassword.
func (s *NsxTSpec) GetNsxManagerAdminPassword() OptString {
	return s.NsxManagerAdminPassword
}

// GetNsxManagerAuditPassword returns the value of NsxManagerAuditPassword.
func (s *NsxTSpec) GetNsxManagerAuditPassword() OptString {
	return s.NsxManagerAuditPassword
}

// GetFormFactor returns the value of FormFactor.
func (s *NsxTSpec) GetFormFactor() OptString {
	return s.FormFactor
}

// GetIpAddressPoolSpec returns the value of IpAddressPoolSpec.
func (s *NsxTSpec) GetIpAddressPoolSpec() OptIpAddressPoolSpec {
	return s.IpAddressPoolSpec
}

// SetNsxManagerSpecs sets the value of NsxManagerSpecs.
func (s *NsxTSpec) SetNsxManagerSpecs(val []NsxManagerSpec) {
	s.NsxManagerSpecs = val
}

// SetVip sets the value of Vip.
func (s *NsxTSpec) SetVip(val OptString) {
	s.Vip = val
}

// SetVipFqdn sets the value of VipFqdn.
func (s *NsxTSpec) SetVipFqdn(val string) {
	s.VipFqdn = val
}

// SetLicenseKey sets the value of LicenseKey.
func (s *NsxTSpec) SetLicenseKey(val OptString) {
	s.LicenseKey = val
}

// SetNsxManagerAdminPassword sets the value of NsxManagerAdminPassword.
func (s *NsxTSpec) SetNsxManagerAdminPassword(val OptString) {
	s.NsxManagerAdminPassword = val
}

// SetNsxManagerAuditPassword sets the value of NsxManagerAuditPassword.
func (s *NsxTSpec) SetNsxManagerAuditPassword(val OptString) {
	s.NsxManagerAuditPassword = val
}

// SetFormFactor sets the value of FormFactor.
func (s *NsxTSpec) SetFormFactor(val OptString) {
	s.FormFactor = val
}

// SetIpAddressPoolSpec sets the value of IpAddressPoolSpec.
func (s *NsxTSpec) SetIpAddressPoolSpec(val OptIpAddressPoolSpec) {
	s.IpAddressPoolSpec = val
}

// The transport zone associated with the vSphere Distributed Switch used by NSX.
// Ref: #/components/schemas/NsxTransportZone
type NsxTransportZone struct {
	// The name of the transport zone.
	Name OptString `json:"name"`
	// The type of the transport zone.
	TransportType OptString `json:"transportType"`
}

// GetName returns the value of Name.
func (s *NsxTransportZone) GetName() OptString {
	return s.Name
}

// GetTransportType returns the value of TransportType.
func (s *NsxTransportZone) GetTransportType() OptString {
	return s.TransportType
}

// SetName sets the value of Name.
func (s *NsxTransportZone) SetName(val OptString) {
	s.Name = val
}

// SetTransportType sets the value of TransportType.
func (s *NsxTransportZone) SetTransportType(val OptString) {
	s.TransportType = val
}

// NSX Edge Cluster Upgrade Resource.
// Ref: #/components/schemas/NsxtEdgeCluster
type NsxtEdgeCluster struct {
	// Edge cluster id.
	ID OptString `json:"id"`
	// Edge cluster name.
	Name OptString `json:"name"`
	// Upgrade status with respect to the bundle.
	UpgradeStatus OptString `json:"upgradeStatus"`
	// Current resource health status.
	ResourceHealth OptString `json:"resourceHealth"`
	// The current version of the edge cluster.If a partial upgrade is done, this will be the least
	// version among the edges in the edge cluster.
	Version OptString `json:"version"`
}

// GetID returns the value of ID.
func (s *NsxtEdgeCluster) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *NsxtEdgeCluster) GetName() OptString {
	return s.Name
}

// GetUpgradeStatus returns the value of UpgradeStatus.
func (s *NsxtEdgeCluster) GetUpgradeStatus() OptString {
	return s.UpgradeStatus
}

// GetResourceHealth returns the value of ResourceHealth.
func (s *NsxtEdgeCluster) GetResourceHealth() OptString {
	return s.ResourceHealth
}

// GetVersion returns the value of Version.
func (s *NsxtEdgeCluster) GetVersion() OptString {
	return s.Version
}

// SetID sets the value of ID.
func (s *NsxtEdgeCluster) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *NsxtEdgeCluster) SetName(val OptString) {
	s.Name = val
}

// SetUpgradeStatus sets the value of UpgradeStatus.
func (s *NsxtEdgeCluster) SetUpgradeStatus(val OptString) {
	s.UpgradeStatus = val
}

// SetResourceHealth sets the value of ResourceHealth.
func (s *NsxtEdgeCluster) SetResourceHealth(val OptString) {
	s.ResourceHealth = val
}

// SetVersion sets the value of Version.
func (s *NsxtEdgeCluster) SetVersion(val OptString) {
	s.Version = val
}

// Host transport node cluster upgrade input.
// Ref: #/components/schemas/NsxtEdgeClusterUpgradeSpec
type NsxtEdgeClusterUpgradeSpec struct {
	// Resource ID of the edge transport node cluster.
	EdgeClusterId string `json:"edgeClusterId"`
	// Disable/enable parallel upgrade of edges within the cluster.
	EdgeParallelUpgrade OptBool `json:"edgeParallelUpgrade"`
}

// GetEdgeClusterId returns the value of EdgeClusterId.
func (s *NsxtEdgeClusterUpgradeSpec) GetEdgeClusterId() string {
	return s.EdgeClusterId
}

// GetEdgeParallelUpgrade returns the value of EdgeParallelUpgrade.
func (s *NsxtEdgeClusterUpgradeSpec) GetEdgeParallelUpgrade() OptBool {
	return s.EdgeParallelUpgrade
}

// SetEdgeClusterId sets the value of EdgeClusterId.
func (s *NsxtEdgeClusterUpgradeSpec) SetEdgeClusterId(val string) {
	s.EdgeClusterId = val
}

// SetEdgeParallelUpgrade sets the value of EdgeParallelUpgrade.
func (s *NsxtEdgeClusterUpgradeSpec) SetEdgeParallelUpgrade(val OptBool) {
	s.EdgeParallelUpgrade = val
}

// NSX Host Cluster Upgrade Resource.
// Ref: #/components/schemas/NsxtHostCluster
type NsxtHostCluster struct {
	// Host cluster VCF cluster id.
	ID OptString `json:"id"`
	// Cluster name.
	Name OptString `json:"name"`
	// Upgrade status with respect to the bundle.
	UpgradeStatus OptString `json:"upgradeStatus"`
	// Current resource health status.
	ResourceHealth OptString `json:"resourceHealth"`
	// Number of hosts which are already upgraded.
	UpgradedUnits OptInt32 `json:"upgradedUnits"`
	// Total number of hosts in the Host cluster.
	TotalUnits OptInt32 `json:"totalUnits"`
	// Id of the domain the Host cluster belongs to.
	DomainId OptString `json:"domainId"`
	// The current version of the host node cluster.If a partial upgrade is done, this will be the least
	// version among the hosts.
	Version OptString `json:"version"`
	// Flag to determine if primary cluster for vLCM.
	PrimaryCluster OptBool `json:"primaryCluster"`
	// Flag to determine if vLCM enabled on the cluster.
	VLcmEnabled OptBool `json:"vLcmEnabled"`
	// Configured Hardware Support Managers for Firmware upgrade.
	ConfiguredHardwareSupportManagers []HardwareSupportPackage `json:"configuredHardwareSupportManagers"`
	// Available Hardware Support Managers for Firmware upgrade.
	AvailableHardwareSupportManagers []HardwareSupportPackages `json:"availableHardwareSupportManagers"`
}

// GetID returns the value of ID.
func (s *NsxtHostCluster) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *NsxtHostCluster) GetName() OptString {
	return s.Name
}

// GetUpgradeStatus returns the value of UpgradeStatus.
func (s *NsxtHostCluster) GetUpgradeStatus() OptString {
	return s.UpgradeStatus
}

// GetResourceHealth returns the value of ResourceHealth.
func (s *NsxtHostCluster) GetResourceHealth() OptString {
	return s.ResourceHealth
}

// GetUpgradedUnits returns the value of UpgradedUnits.
func (s *NsxtHostCluster) GetUpgradedUnits() OptInt32 {
	return s.UpgradedUnits
}

// GetTotalUnits returns the value of TotalUnits.
func (s *NsxtHostCluster) GetTotalUnits() OptInt32 {
	return s.TotalUnits
}

// GetDomainId returns the value of DomainId.
func (s *NsxtHostCluster) GetDomainId() OptString {
	return s.DomainId
}

// GetVersion returns the value of Version.
func (s *NsxtHostCluster) GetVersion() OptString {
	return s.Version
}

// GetPrimaryCluster returns the value of PrimaryCluster.
func (s *NsxtHostCluster) GetPrimaryCluster() OptBool {
	return s.PrimaryCluster
}

// GetVLcmEnabled returns the value of VLcmEnabled.
func (s *NsxtHostCluster) GetVLcmEnabled() OptBool {
	return s.VLcmEnabled
}

// GetConfiguredHardwareSupportManagers returns the value of ConfiguredHardwareSupportManagers.
func (s *NsxtHostCluster) GetConfiguredHardwareSupportManagers() []HardwareSupportPackage {
	return s.ConfiguredHardwareSupportManagers
}

// GetAvailableHardwareSupportManagers returns the value of AvailableHardwareSupportManagers.
func (s *NsxtHostCluster) GetAvailableHardwareSupportManagers() []HardwareSupportPackages {
	return s.AvailableHardwareSupportManagers
}

// SetID sets the value of ID.
func (s *NsxtHostCluster) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *NsxtHostCluster) SetName(val OptString) {
	s.Name = val
}

// SetUpgradeStatus sets the value of UpgradeStatus.
func (s *NsxtHostCluster) SetUpgradeStatus(val OptString) {
	s.UpgradeStatus = val
}

// SetResourceHealth sets the value of ResourceHealth.
func (s *NsxtHostCluster) SetResourceHealth(val OptString) {
	s.ResourceHealth = val
}

// SetUpgradedUnits sets the value of UpgradedUnits.
func (s *NsxtHostCluster) SetUpgradedUnits(val OptInt32) {
	s.UpgradedUnits = val
}

// SetTotalUnits sets the value of TotalUnits.
func (s *NsxtHostCluster) SetTotalUnits(val OptInt32) {
	s.TotalUnits = val
}

// SetDomainId sets the value of DomainId.
func (s *NsxtHostCluster) SetDomainId(val OptString) {
	s.DomainId = val
}

// SetVersion sets the value of Version.
func (s *NsxtHostCluster) SetVersion(val OptString) {
	s.Version = val
}

// SetPrimaryCluster sets the value of PrimaryCluster.
func (s *NsxtHostCluster) SetPrimaryCluster(val OptBool) {
	s.PrimaryCluster = val
}

// SetVLcmEnabled sets the value of VLcmEnabled.
func (s *NsxtHostCluster) SetVLcmEnabled(val OptBool) {
	s.VLcmEnabled = val
}

// SetConfiguredHardwareSupportManagers sets the value of ConfiguredHardwareSupportManagers.
func (s *NsxtHostCluster) SetConfiguredHardwareSupportManagers(val []HardwareSupportPackage) {
	s.ConfiguredHardwareSupportManagers = val
}

// SetAvailableHardwareSupportManagers sets the value of AvailableHardwareSupportManagers.
func (s *NsxtHostCluster) SetAvailableHardwareSupportManagers(val []HardwareSupportPackages) {
	s.AvailableHardwareSupportManagers = val
}

// Host trnasport node cluster upgrade input.
// Ref: #/components/schemas/NsxtHostClusterUpgradeSpec
type NsxtHostClusterUpgradeSpec struct {
	// Resource ID of the host transport node cluster.
	HostClusterId string `json:"hostClusterId"`
	// Flag for disabling/enabling parallel upgrade within the cluster.
	HostParallelUpgrade OptBool `json:"hostParallelUpgrade"`
	// Flag for disabling/enabling live upgrade of hosts in the transportnode clusters.
	LiveUpgrade OptBool `json:"liveUpgrade"`
}

// GetHostClusterId returns the value of HostClusterId.
func (s *NsxtHostClusterUpgradeSpec) GetHostClusterId() string {
	return s.HostClusterId
}

// GetHostParallelUpgrade returns the value of HostParallelUpgrade.
func (s *NsxtHostClusterUpgradeSpec) GetHostParallelUpgrade() OptBool {
	return s.HostParallelUpgrade
}

// GetLiveUpgrade returns the value of LiveUpgrade.
func (s *NsxtHostClusterUpgradeSpec) GetLiveUpgrade() OptBool {
	return s.LiveUpgrade
}

// SetHostClusterId sets the value of HostClusterId.
func (s *NsxtHostClusterUpgradeSpec) SetHostClusterId(val string) {
	s.HostClusterId = val
}

// SetHostParallelUpgrade sets the value of HostParallelUpgrade.
func (s *NsxtHostClusterUpgradeSpec) SetHostParallelUpgrade(val OptBool) {
	s.HostParallelUpgrade = val
}

// SetLiveUpgrade sets the value of LiveUpgrade.
func (s *NsxtHostClusterUpgradeSpec) SetLiveUpgrade(val OptBool) {
	s.LiveUpgrade = val
}

// This specification contains the configurations to be applied on the Host switch.
// Ref: #/components/schemas/NsxtHostSwitchConfig
type NsxtHostSwitchConfig struct {
	// The name of the vSphere Distributed Switch.
	VdsName string `json:"vdsName"`
	// The name of the uplink profile.
	UplinkProfileName string `json:"uplinkProfileName"`
	// The IP address pool name.
	IpAddressPoolName OptString `json:"ipAddressPoolName"`
	// The map of vSphere Distributed Switch uplinks to the NSX switch uplinks.
	VdsUplinkToNsxUplink []UplinkMapping `json:"vdsUplinkToNsxUplink"`
}

// GetVdsName returns the value of VdsName.
func (s *NsxtHostSwitchConfig) GetVdsName() string {
	return s.VdsName
}

// GetUplinkProfileName returns the value of UplinkProfileName.
func (s *NsxtHostSwitchConfig) GetUplinkProfileName() string {
	return s.UplinkProfileName
}

// GetIpAddressPoolName returns the value of IpAddressPoolName.
func (s *NsxtHostSwitchConfig) GetIpAddressPoolName() OptString {
	return s.IpAddressPoolName
}

// GetVdsUplinkToNsxUplink returns the value of VdsUplinkToNsxUplink.
func (s *NsxtHostSwitchConfig) GetVdsUplinkToNsxUplink() []UplinkMapping {
	return s.VdsUplinkToNsxUplink
}

// SetVdsName sets the value of VdsName.
func (s *NsxtHostSwitchConfig) SetVdsName(val string) {
	s.VdsName = val
}

// SetUplinkProfileName sets the value of UplinkProfileName.
func (s *NsxtHostSwitchConfig) SetUplinkProfileName(val string) {
	s.UplinkProfileName = val
}

// SetIpAddressPoolName sets the value of IpAddressPoolName.
func (s *NsxtHostSwitchConfig) SetIpAddressPoolName(val OptString) {
	s.IpAddressPoolName = val
}

// SetVdsUplinkToNsxUplink sets the value of VdsUplinkToNsxUplink.
func (s *NsxtHostSwitchConfig) SetVdsUplinkToNsxUplink(val []UplinkMapping) {
	s.VdsUplinkToNsxUplink = val
}

// The configurations to be applied on the Host switch.
// Ref: #/components/schemas/NsxtHostSwitchConfiguration
type NsxtHostSwitchConfiguration struct {
	// The name of the vSphere Distributed Switch.
	VdsName OptString `json:"vdsName"`
	// The name of the uplink profile.
	UplinkProfileName OptString `json:"uplinkProfileName"`
	// The IP address Pool name. For DHCP, this field will be empty.
	IpAddressPoolName OptString `json:"ipAddressPoolName"`
	// The map of vSphere Distributed Switch uplinks to the NSX switch uplinks.
	VdsUplinkToNsxUplink []VdsUplinkToNsxUplinkConfiguration `json:"vdsUplinkToNsxUplink"`
}

// GetVdsName returns the value of VdsName.
func (s *NsxtHostSwitchConfiguration) GetVdsName() OptString {
	return s.VdsName
}

// GetUplinkProfileName returns the value of UplinkProfileName.
func (s *NsxtHostSwitchConfiguration) GetUplinkProfileName() OptString {
	return s.UplinkProfileName
}

// GetIpAddressPoolName returns the value of IpAddressPoolName.
func (s *NsxtHostSwitchConfiguration) GetIpAddressPoolName() OptString {
	return s.IpAddressPoolName
}

// GetVdsUplinkToNsxUplink returns the value of VdsUplinkToNsxUplink.
func (s *NsxtHostSwitchConfiguration) GetVdsUplinkToNsxUplink() []VdsUplinkToNsxUplinkConfiguration {
	return s.VdsUplinkToNsxUplink
}

// SetVdsName sets the value of VdsName.
func (s *NsxtHostSwitchConfiguration) SetVdsName(val OptString) {
	s.VdsName = val
}

// SetUplinkProfileName sets the value of UplinkProfileName.
func (s *NsxtHostSwitchConfiguration) SetUplinkProfileName(val OptString) {
	s.UplinkProfileName = val
}

// SetIpAddressPoolName sets the value of IpAddressPoolName.
func (s *NsxtHostSwitchConfiguration) SetIpAddressPoolName(val OptString) {
	s.IpAddressPoolName = val
}

// SetVdsUplinkToNsxUplink sets the value of VdsUplinkToNsxUplink.
func (s *NsxtHostSwitchConfiguration) SetVdsUplinkToNsxUplink(val []VdsUplinkToNsxUplinkConfiguration) {
	s.VdsUplinkToNsxUplink = val
}

// NSX IP address pool representation.
// Ref: #/components/schemas/NsxtIpAddressPool
type NsxtIpAddressPool struct {
	// Name of the IP address pool.
	Name OptString `json:"name"`
	// Description of the IP address pool.
	Description OptString `json:"description"`
	// The number of IP addresses available in the IP address pool.
	AvailableIpAddresses OptInt32 `json:"availableIpAddresses"`
	// The total number of IP addresses in the IP address pool.
	TotalIpAddresses OptInt32 `json:"totalIpAddresses"`
	// The list of IP address pool block subnets.
	BlockSubnets []NsxtIpAddressPoolBlockSubnet `json:"blockSubnets"`
	// The list of IP address pool static subnets.
	StaticSubnets []NsxtIpAddressPoolStaticSubnet `json:"staticSubnets"`
}

// GetName returns the value of Name.
func (s *NsxtIpAddressPool) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *NsxtIpAddressPool) GetDescription() OptString {
	return s.Description
}

// GetAvailableIpAddresses returns the value of AvailableIpAddresses.
func (s *NsxtIpAddressPool) GetAvailableIpAddresses() OptInt32 {
	return s.AvailableIpAddresses
}

// GetTotalIpAddresses returns the value of TotalIpAddresses.
func (s *NsxtIpAddressPool) GetTotalIpAddresses() OptInt32 {
	return s.TotalIpAddresses
}

// GetBlockSubnets returns the value of BlockSubnets.
func (s *NsxtIpAddressPool) GetBlockSubnets() []NsxtIpAddressPoolBlockSubnet {
	return s.BlockSubnets
}

// GetStaticSubnets returns the value of StaticSubnets.
func (s *NsxtIpAddressPool) GetStaticSubnets() []NsxtIpAddressPoolStaticSubnet {
	return s.StaticSubnets
}

// SetName sets the value of Name.
func (s *NsxtIpAddressPool) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *NsxtIpAddressPool) SetDescription(val OptString) {
	s.Description = val
}

// SetAvailableIpAddresses sets the value of AvailableIpAddresses.
func (s *NsxtIpAddressPool) SetAvailableIpAddresses(val OptInt32) {
	s.AvailableIpAddresses = val
}

// SetTotalIpAddresses sets the value of TotalIpAddresses.
func (s *NsxtIpAddressPool) SetTotalIpAddresses(val OptInt32) {
	s.TotalIpAddresses = val
}

// SetBlockSubnets sets the value of BlockSubnets.
func (s *NsxtIpAddressPool) SetBlockSubnets(val []NsxtIpAddressPoolBlockSubnet) {
	s.BlockSubnets = val
}

// SetStaticSubnets sets the value of StaticSubnets.
func (s *NsxtIpAddressPool) SetStaticSubnets(val []NsxtIpAddressPoolStaticSubnet) {
	s.StaticSubnets = val
}

func (*NsxtIpAddressPool) getNsxIpAddressPoolRes() {}

// NSX IP address pool block subnet representation.
// Ref: #/components/schemas/NsxtIpAddressPoolBlockSubnet
type NsxtIpAddressPoolBlockSubnet struct {
	// The size of the IP address block.
	Size OptInt32 `json:"size"`
	// The boolean representing the state of the gateway assignment.
	GatewayAssigned OptBool `json:"gatewayAssigned"`
	// The CIDR of the IP address subnet.
	Cidr OptString `json:"cidr"`
}

// GetSize returns the value of Size.
func (s *NsxtIpAddressPoolBlockSubnet) GetSize() OptInt32 {
	return s.Size
}

// GetGatewayAssigned returns the value of GatewayAssigned.
func (s *NsxtIpAddressPoolBlockSubnet) GetGatewayAssigned() OptBool {
	return s.GatewayAssigned
}

// GetCidr returns the value of Cidr.
func (s *NsxtIpAddressPoolBlockSubnet) GetCidr() OptString {
	return s.Cidr
}

// SetSize sets the value of Size.
func (s *NsxtIpAddressPoolBlockSubnet) SetSize(val OptInt32) {
	s.Size = val
}

// SetGatewayAssigned sets the value of GatewayAssigned.
func (s *NsxtIpAddressPoolBlockSubnet) SetGatewayAssigned(val OptBool) {
	s.GatewayAssigned = val
}

// SetCidr sets the value of Cidr.
func (s *NsxtIpAddressPoolBlockSubnet) SetCidr(val OptString) {
	s.Cidr = val
}

// NSX IP address pool range representation.
// Ref: #/components/schemas/NsxtIpAddressPoolRange
type NsxtIpAddressPoolRange struct {
	// The start of the IP address range.
	Start OptString `json:"start"`
	// The end of the IP address range.
	End OptString `json:"end"`
}

// GetStart returns the value of Start.
func (s *NsxtIpAddressPoolRange) GetStart() OptString {
	return s.Start
}

// GetEnd returns the value of End.
func (s *NsxtIpAddressPoolRange) GetEnd() OptString {
	return s.End
}

// SetStart sets the value of Start.
func (s *NsxtIpAddressPoolRange) SetStart(val OptString) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *NsxtIpAddressPoolRange) SetEnd(val OptString) {
	s.End = val
}

// NSX IP address pool static subnet representation.
// Ref: #/components/schemas/NsxtIpAddressPoolStaticSubnet
type NsxtIpAddressPoolStaticSubnet struct {
	// The list of IP address ranges.
	IpAddressPoolRanges []NsxtIpAddressPoolRange `json:"ipAddressPoolRanges"`
	// The gateway IP address.
	Gateway OptString `json:"gateway"`
	// The CIDR of the IP address subnet.
	Cidr OptString `json:"cidr"`
}

// GetIpAddressPoolRanges returns the value of IpAddressPoolRanges.
func (s *NsxtIpAddressPoolStaticSubnet) GetIpAddressPoolRanges() []NsxtIpAddressPoolRange {
	return s.IpAddressPoolRanges
}

// GetGateway returns the value of Gateway.
func (s *NsxtIpAddressPoolStaticSubnet) GetGateway() OptString {
	return s.Gateway
}

// GetCidr returns the value of Cidr.
func (s *NsxtIpAddressPoolStaticSubnet) GetCidr() OptString {
	return s.Cidr
}

// SetIpAddressPoolRanges sets the value of IpAddressPoolRanges.
func (s *NsxtIpAddressPoolStaticSubnet) SetIpAddressPoolRanges(val []NsxtIpAddressPoolRange) {
	s.IpAddressPoolRanges = val
}

// SetGateway sets the value of Gateway.
func (s *NsxtIpAddressPoolStaticSubnet) SetGateway(val OptString) {
	s.Gateway = val
}

// SetCidr sets the value of Cidr.
func (s *NsxtIpAddressPoolStaticSubnet) SetCidr(val OptString) {
	s.Cidr = val
}

// Ref: #/components/schemas/NsxtIpAddressPoolValidationSpec
type NsxtIpAddressPoolValidationSpec struct {
	IpAddressPoolSpec IpAddressPoolSpec `json:"ipAddressPoolSpec"`
	NsxtClusterId     OptString         `json:"nsxtClusterId"`
}

// GetIpAddressPoolSpec returns the value of IpAddressPoolSpec.
func (s *NsxtIpAddressPoolValidationSpec) GetIpAddressPoolSpec() IpAddressPoolSpec {
	return s.IpAddressPoolSpec
}

// GetNsxtClusterId returns the value of NsxtClusterId.
func (s *NsxtIpAddressPoolValidationSpec) GetNsxtClusterId() OptString {
	return s.NsxtClusterId
}

// SetIpAddressPoolSpec sets the value of IpAddressPoolSpec.
func (s *NsxtIpAddressPoolValidationSpec) SetIpAddressPoolSpec(val IpAddressPoolSpec) {
	s.IpAddressPoolSpec = val
}

// SetNsxtClusterId sets the value of NsxtClusterId.
func (s *NsxtIpAddressPoolValidationSpec) SetNsxtClusterId(val OptString) {
	s.NsxtClusterId = val
}

// Nsx Manager Cluster Upgrade Resource.
// Ref: #/components/schemas/NsxtManagerCluster
type NsxtManagerCluster struct {
	// Manager cluster id.
	ID OptString `json:"id"`
	// Manager cluster name.
	Name OptString `json:"name"`
	// Upgrade status with respect to the bundle.
	UpgradeStatus OptString `json:"upgradeStatus"`
	// Current resource health status.
	ResourceHealth OptString `json:"resourceHealth"`
	// The current version of the manager cluster.If a partial upgrade is done, this will be the least
	// version among the managers in the manager cluster.
	Version OptString `json:"version"`
}

// GetID returns the value of ID.
func (s *NsxtManagerCluster) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *NsxtManagerCluster) GetName() OptString {
	return s.Name
}

// GetUpgradeStatus returns the value of UpgradeStatus.
func (s *NsxtManagerCluster) GetUpgradeStatus() OptString {
	return s.UpgradeStatus
}

// GetResourceHealth returns the value of ResourceHealth.
func (s *NsxtManagerCluster) GetResourceHealth() OptString {
	return s.ResourceHealth
}

// GetVersion returns the value of Version.
func (s *NsxtManagerCluster) GetVersion() OptString {
	return s.Version
}

// SetID sets the value of ID.
func (s *NsxtManagerCluster) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *NsxtManagerCluster) SetName(val OptString) {
	s.Name = val
}

// SetUpgradeStatus sets the value of UpgradeStatus.
func (s *NsxtManagerCluster) SetUpgradeStatus(val OptString) {
	s.UpgradeStatus = val
}

// SetResourceHealth sets the value of ResourceHealth.
func (s *NsxtManagerCluster) SetResourceHealth(val OptString) {
	s.ResourceHealth = val
}

// SetVersion sets the value of Version.
func (s *NsxtManagerCluster) SetVersion(val OptString) {
	s.Version = val
}

// Spec contains parameters for NSX manager.
// Ref: #/components/schemas/NsxtManagerSpec
type NsxtManagerSpec struct {
	// NSX Manager hostname.
	Hostname OptString `json:"hostname"`
	// NSX Manager IP Address. Can be omitted if hostname is provided.
	IP OptString `json:"ip"`
}

// GetHostname returns the value of Hostname.
func (s *NsxtManagerSpec) GetHostname() OptString {
	return s.Hostname
}

// GetIP returns the value of IP.
func (s *NsxtManagerSpec) GetIP() OptString {
	return s.IP
}

// SetHostname sets the value of Hostname.
func (s *NsxtManagerSpec) SetHostname(val OptString) {
	s.Hostname = val
}

// SetIP sets the value of IP.
func (s *NsxtManagerSpec) SetIP(val OptString) {
	s.IP = val
}

// Spec for the parameters required to add OpenId connection to NSX.
// Ref: #/components/schemas/NsxtOidcSpec
type NsxtOidcSpec struct {
	// VCF Inventory identificator of the entity to connect oidc.
	EntityInventoryId string `json:"entityInventoryId"`
	// Type of the oidc entity.
	OidcType NsxtOidcSpecOidcType `json:"oidcType"`
}

// GetEntityInventoryId returns the value of EntityInventoryId.
func (s *NsxtOidcSpec) GetEntityInventoryId() string {
	return s.EntityInventoryId
}

// GetOidcType returns the value of OidcType.
func (s *NsxtOidcSpec) GetOidcType() NsxtOidcSpecOidcType {
	return s.OidcType
}

// SetEntityInventoryId sets the value of EntityInventoryId.
func (s *NsxtOidcSpec) SetEntityInventoryId(val string) {
	s.EntityInventoryId = val
}

// SetOidcType sets the value of OidcType.
func (s *NsxtOidcSpec) SetOidcType(val NsxtOidcSpecOidcType) {
	s.OidcType = val
}

// Type of the oidc entity.
type NsxtOidcSpecOidcType string

const (
	NsxtOidcSpecOidcTypeVcenter NsxtOidcSpecOidcType = "vcenter"
)

// AllValues returns all NsxtOidcSpecOidcType values.
func (NsxtOidcSpecOidcType) AllValues() []NsxtOidcSpecOidcType {
	return []NsxtOidcSpecOidcType{
		NsxtOidcSpecOidcTypeVcenter,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NsxtOidcSpecOidcType) MarshalText() ([]byte, error) {
	switch s {
	case NsxtOidcSpecOidcTypeVcenter:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NsxtOidcSpecOidcType) UnmarshalText(data []byte) error {
	switch NsxtOidcSpecOidcType(data) {
	case NsxtOidcSpecOidcTypeVcenter:
		*s = NsxtOidcSpecOidcTypeVcenter
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NSX Upgrade Resources for an NSX instance.
// Ref: #/components/schemas/NsxtResources
type NsxtResources struct {
	// List of host clusters that are candidates for upgrade.
	NsxtHostClusters []NsxtHostCluster `json:"nsxtHostClusters"`
	// List of edge clusters that are candidates for upgrade.
	NsxtEdgeClusters       []NsxtEdgeCluster         `json:"nsxtEdgeClusters"`
	NsxtManagerCluster     OptNsxtManagerCluster     `json:"nsxtManagerCluster"`
	NsxtUpgradeCoordinator OptNsxtUpgradeCoordinator `json:"nsxtUpgradeCoordinator"`
	// Bundle id used to compute the upgradability.
	BundleId OptString `json:"bundleId"`
	// Domain id associated with the NSX cluster.
	DomainId OptString `json:"domainId"`
}

// GetNsxtHostClusters returns the value of NsxtHostClusters.
func (s *NsxtResources) GetNsxtHostClusters() []NsxtHostCluster {
	return s.NsxtHostClusters
}

// GetNsxtEdgeClusters returns the value of NsxtEdgeClusters.
func (s *NsxtResources) GetNsxtEdgeClusters() []NsxtEdgeCluster {
	return s.NsxtEdgeClusters
}

// GetNsxtManagerCluster returns the value of NsxtManagerCluster.
func (s *NsxtResources) GetNsxtManagerCluster() OptNsxtManagerCluster {
	return s.NsxtManagerCluster
}

// GetNsxtUpgradeCoordinator returns the value of NsxtUpgradeCoordinator.
func (s *NsxtResources) GetNsxtUpgradeCoordinator() OptNsxtUpgradeCoordinator {
	return s.NsxtUpgradeCoordinator
}

// GetBundleId returns the value of BundleId.
func (s *NsxtResources) GetBundleId() OptString {
	return s.BundleId
}

// GetDomainId returns the value of DomainId.
func (s *NsxtResources) GetDomainId() OptString {
	return s.DomainId
}

// SetNsxtHostClusters sets the value of NsxtHostClusters.
func (s *NsxtResources) SetNsxtHostClusters(val []NsxtHostCluster) {
	s.NsxtHostClusters = val
}

// SetNsxtEdgeClusters sets the value of NsxtEdgeClusters.
func (s *NsxtResources) SetNsxtEdgeClusters(val []NsxtEdgeCluster) {
	s.NsxtEdgeClusters = val
}

// SetNsxtManagerCluster sets the value of NsxtManagerCluster.
func (s *NsxtResources) SetNsxtManagerCluster(val OptNsxtManagerCluster) {
	s.NsxtManagerCluster = val
}

// SetNsxtUpgradeCoordinator sets the value of NsxtUpgradeCoordinator.
func (s *NsxtResources) SetNsxtUpgradeCoordinator(val OptNsxtUpgradeCoordinator) {
	s.NsxtUpgradeCoordinator = val
}

// SetBundleId sets the value of BundleId.
func (s *NsxtResources) SetBundleId(val OptString) {
	s.BundleId = val
}

// SetDomainId sets the value of DomainId.
func (s *NsxtResources) SetDomainId(val OptString) {
	s.DomainId = val
}

func (*NsxtResources) getNsxUpgradeResourcesRes() {}

// This specification contains the configurations to be associated with the vSphere Distributed
// Switch managed by NSX.
// Ref: #/components/schemas/NsxtSwitchConfig
type NsxtSwitchConfig struct {
	// The list of transport zones to be associated with the vSphere Distributed Switch managed by NSX.
	TransportZones []TransportZone `json:"transportZones"`
	// Operational mode type of a Host Switch. Applicable only for the VI Workload Domains.
	HostSwitchOperationalMode OptString `json:"hostSwitchOperationalMode"`
}

// GetTransportZones returns the value of TransportZones.
func (s *NsxtSwitchConfig) GetTransportZones() []TransportZone {
	return s.TransportZones
}

// GetHostSwitchOperationalMode returns the value of HostSwitchOperationalMode.
func (s *NsxtSwitchConfig) GetHostSwitchOperationalMode() OptString {
	return s.HostSwitchOperationalMode
}

// SetTransportZones sets the value of TransportZones.
func (s *NsxtSwitchConfig) SetTransportZones(val []TransportZone) {
	s.TransportZones = val
}

// SetHostSwitchOperationalMode sets the value of HostSwitchOperationalMode.
func (s *NsxtSwitchConfig) SetHostSwitchOperationalMode(val OptString) {
	s.HostSwitchOperationalMode = val
}

// The network configurations associated with the vSphere Distributed Switch managed by NSX.
// Ref: #/components/schemas/NsxtSwitchConfiguration
type NsxtSwitchConfiguration struct {
	// The list of transport zones associated with the vSphere Distributed Switch managed by NSX.
	TransportZones []NsxTransportZone `json:"transportZones"`
	// Operational mode of a Host Switch.
	HostSwitchOperationalMode OptString `json:"hostSwitchOperationalMode"`
}

// GetTransportZones returns the value of TransportZones.
func (s *NsxtSwitchConfiguration) GetTransportZones() []NsxTransportZone {
	return s.TransportZones
}

// GetHostSwitchOperationalMode returns the value of HostSwitchOperationalMode.
func (s *NsxtSwitchConfiguration) GetHostSwitchOperationalMode() OptString {
	return s.HostSwitchOperationalMode
}

// SetTransportZones sets the value of TransportZones.
func (s *NsxtSwitchConfiguration) SetTransportZones(val []NsxTransportZone) {
	s.TransportZones = val
}

// SetHostSwitchOperationalMode sets the value of HostSwitchOperationalMode.
func (s *NsxtSwitchConfiguration) SetHostSwitchOperationalMode(val OptString) {
	s.HostSwitchOperationalMode = val
}

// Spec contains required parameters for NSX Transport Zone.
//
// Deprecated: schema marks this type as deprecated.
// Ref: #/components/schemas/NsxtTransportZone
type NsxtTransportZone struct {
	// Transport zone name.
	ZoneName string `json:"zoneName"`
	// Transport zone network name.
	NetworkName string `json:"networkName"`
}

// GetZoneName returns the value of ZoneName.
func (s *NsxtTransportZone) GetZoneName() string {
	return s.ZoneName
}

// GetNetworkName returns the value of NetworkName.
func (s *NsxtTransportZone) GetNetworkName() string {
	return s.NetworkName
}

// SetZoneName sets the value of ZoneName.
func (s *NsxtTransportZone) SetZoneName(val string) {
	s.ZoneName = val
}

// SetNetworkName sets the value of NetworkName.
func (s *NsxtTransportZone) SetNetworkName(val string) {
	s.NetworkName = val
}

// NSX transport zone representation.
// Ref: #/components/schemas/NsxtTransportZoneInfo
type NsxtTransportZoneInfo struct{}

// NSX Upgrade coordinator Upgrade Resource.
// Ref: #/components/schemas/NsxtUpgradeCoordinator
type NsxtUpgradeCoordinator struct {
	// Upgrade coordinator id.
	ID OptString `json:"id"`
	// Upgrade status with respect to the bundle.
	UpgradeStatus OptString `json:"upgradeStatus"`
	// Current resource health status.
	ResourceHealth OptString `json:"resourceHealth"`
	// The current version of the UC.
	Version OptString `json:"version"`
	// The IP of the manager on which UC is enabled.
	EnabledOn OptString `json:"enabledOn"`
}

// GetID returns the value of ID.
func (s *NsxtUpgradeCoordinator) GetID() OptString {
	return s.ID
}

// GetUpgradeStatus returns the value of UpgradeStatus.
func (s *NsxtUpgradeCoordinator) GetUpgradeStatus() OptString {
	return s.UpgradeStatus
}

// GetResourceHealth returns the value of ResourceHealth.
func (s *NsxtUpgradeCoordinator) GetResourceHealth() OptString {
	return s.ResourceHealth
}

// GetVersion returns the value of Version.
func (s *NsxtUpgradeCoordinator) GetVersion() OptString {
	return s.Version
}

// GetEnabledOn returns the value of EnabledOn.
func (s *NsxtUpgradeCoordinator) GetEnabledOn() OptString {
	return s.EnabledOn
}

// SetID sets the value of ID.
func (s *NsxtUpgradeCoordinator) SetID(val OptString) {
	s.ID = val
}

// SetUpgradeStatus sets the value of UpgradeStatus.
func (s *NsxtUpgradeCoordinator) SetUpgradeStatus(val OptString) {
	s.UpgradeStatus = val
}

// SetResourceHealth sets the value of ResourceHealth.
func (s *NsxtUpgradeCoordinator) SetResourceHealth(val OptString) {
	s.ResourceHealth = val
}

// SetVersion sets the value of Version.
func (s *NsxtUpgradeCoordinator) SetVersion(val OptString) {
	s.Version = val
}

// SetEnabledOn sets the value of EnabledOn.
func (s *NsxtUpgradeCoordinator) SetEnabledOn(val OptString) {
	s.EnabledOn = val
}

// NSX Upgrade options.
// Ref: #/components/schemas/NsxtUpgradeOptions
type NsxtUpgradeOptions struct {
	// Flag for performing edge-only upgrade.
	IsEdgeOnlyUpgrade OptBool `json:"isEdgeOnlyUpgrade"`
	// Flag for disabling/enabling parallel upgrade of host transportnode clusters.
	IsHostClustersUpgradeParallel OptBool `json:"isHostClustersUpgradeParallel"`
	// Flag for disabling/enabling parallel upgrade of edge transportnode clusters.
	IsEdgeClustersUpgradeParallel OptBool `json:"isEdgeClustersUpgradeParallel"`
}

// GetIsEdgeOnlyUpgrade returns the value of IsEdgeOnlyUpgrade.
func (s *NsxtUpgradeOptions) GetIsEdgeOnlyUpgrade() OptBool {
	return s.IsEdgeOnlyUpgrade
}

// GetIsHostClustersUpgradeParallel returns the value of IsHostClustersUpgradeParallel.
func (s *NsxtUpgradeOptions) GetIsHostClustersUpgradeParallel() OptBool {
	return s.IsHostClustersUpgradeParallel
}

// GetIsEdgeClustersUpgradeParallel returns the value of IsEdgeClustersUpgradeParallel.
func (s *NsxtUpgradeOptions) GetIsEdgeClustersUpgradeParallel() OptBool {
	return s.IsEdgeClustersUpgradeParallel
}

// SetIsEdgeOnlyUpgrade sets the value of IsEdgeOnlyUpgrade.
func (s *NsxtUpgradeOptions) SetIsEdgeOnlyUpgrade(val OptBool) {
	s.IsEdgeOnlyUpgrade = val
}

// SetIsHostClustersUpgradeParallel sets the value of IsHostClustersUpgradeParallel.
func (s *NsxtUpgradeOptions) SetIsHostClustersUpgradeParallel(val OptBool) {
	s.IsHostClustersUpgradeParallel = val
}

// SetIsEdgeClustersUpgradeParallel sets the value of IsEdgeClustersUpgradeParallel.
func (s *NsxtUpgradeOptions) SetIsEdgeClustersUpgradeParallel(val OptBool) {
	s.IsEdgeClustersUpgradeParallel = val
}

// NSX Upgrade User Input Specification.
// Ref: #/components/schemas/NsxtUpgradeUserInputSpec
type NsxtUpgradeUserInputSpec struct {
	// List of host clusters information if explicit selection is to be made.
	NsxtHostClusterUpgradeSpecs []NsxtHostClusterUpgradeSpec `json:"nsxtHostClusterUpgradeSpecs"`
	// List of edge clusters information if explicit selection is to be made.
	NsxtEdgeClusterUpgradeSpecs []NsxtEdgeClusterUpgradeSpec `json:"nsxtEdgeClusterUpgradeSpecs"`
	NsxtUpgradeOptions          OptNsxtUpgradeOptions        `json:"nsxtUpgradeOptions"`
	// Identifier of the NSX instance.
	NsxtId OptString `json:"nsxtId"`
}

// GetNsxtHostClusterUpgradeSpecs returns the value of NsxtHostClusterUpgradeSpecs.
func (s *NsxtUpgradeUserInputSpec) GetNsxtHostClusterUpgradeSpecs() []NsxtHostClusterUpgradeSpec {
	return s.NsxtHostClusterUpgradeSpecs
}

// GetNsxtEdgeClusterUpgradeSpecs returns the value of NsxtEdgeClusterUpgradeSpecs.
func (s *NsxtUpgradeUserInputSpec) GetNsxtEdgeClusterUpgradeSpecs() []NsxtEdgeClusterUpgradeSpec {
	return s.NsxtEdgeClusterUpgradeSpecs
}

// GetNsxtUpgradeOptions returns the value of NsxtUpgradeOptions.
func (s *NsxtUpgradeUserInputSpec) GetNsxtUpgradeOptions() OptNsxtUpgradeOptions {
	return s.NsxtUpgradeOptions
}

// GetNsxtId returns the value of NsxtId.
func (s *NsxtUpgradeUserInputSpec) GetNsxtId() OptString {
	return s.NsxtId
}

// SetNsxtHostClusterUpgradeSpecs sets the value of NsxtHostClusterUpgradeSpecs.
func (s *NsxtUpgradeUserInputSpec) SetNsxtHostClusterUpgradeSpecs(val []NsxtHostClusterUpgradeSpec) {
	s.NsxtHostClusterUpgradeSpecs = val
}

// SetNsxtEdgeClusterUpgradeSpecs sets the value of NsxtEdgeClusterUpgradeSpecs.
func (s *NsxtUpgradeUserInputSpec) SetNsxtEdgeClusterUpgradeSpecs(val []NsxtEdgeClusterUpgradeSpec) {
	s.NsxtEdgeClusterUpgradeSpecs = val
}

// SetNsxtUpgradeOptions sets the value of NsxtUpgradeOptions.
func (s *NsxtUpgradeUserInputSpec) SetNsxtUpgradeOptions(val OptNsxtUpgradeOptions) {
	s.NsxtUpgradeOptions = val
}

// SetNsxtId sets the value of NsxtId.
func (s *NsxtUpgradeUserInputSpec) SetNsxtId(val OptString) {
	s.NsxtId = val
}

// NTP Configuration.
// Ref: #/components/schemas/NtpConfiguration
type NtpConfiguration struct {
	// List of NTP servers.
	NtpServers []NtpServer `json:"ntpServers"`
}

// GetNtpServers returns the value of NtpServers.
func (s *NtpConfiguration) GetNtpServers() []NtpServer {
	return s.NtpServers
}

// SetNtpServers sets the value of NtpServers.
func (s *NtpConfiguration) SetNtpServers(val []NtpServer) {
	s.NtpServers = val
}

func (*NtpConfiguration) getNtpConfigurationRes() {}

// NTP server details.
// Ref: #/components/schemas/NtpServer
type NtpServer struct {
	// IP address/FQDN of NTP server.
	IpAddress string `json:"ipAddress"`
}

// GetIpAddress returns the value of IpAddress.
func (s *NtpServer) GetIpAddress() string {
	return s.IpAddress
}

// SetIpAddress sets the value of IpAddress.
func (s *NtpServer) SetIpAddress(val string) {
	s.IpAddress = val
}

// Represents Identity management configuration when the provider is based on OIDC.
// Ref: #/components/schemas/OidcInfo
type OidcInfo struct {
	// Client identifier to connect to the Identity Provider.
	ClientId OptString `json:"clientId"`
	// Endpoint to retrieve the Identity Provider metadata.
	DiscoveryEndpoint OptString `json:"discoveryEndpoint"`
	// Authentication endpoint of the Identity Provider.
	AuthEndpoint OptString `json:"authEndpoint"`
	// Authentication method used by the Identity Provider.
	AuthMethod OptString `json:"authMethod"`
	// The endpoint to use for terminating the user's session at the Identity Provider.
	LogoutEndpoint OptString `json:"logoutEndpoint"`
	// The Identity Provider namespace. It is used to validate the issuer in the acquired OAuth2 token.
	Issuer OptString `json:"issuer"`
	// Endpoint to retrieve the Identity Provider public key for validation.
	PublicKeyUri OptString `json:"publicKeyUri"`
	// Token endpoint of the Identity Provider.
	TokenEndpoint OptString `json:"tokenEndpoint"`
}

// GetClientId returns the value of ClientId.
func (s *OidcInfo) GetClientId() OptString {
	return s.ClientId
}

// GetDiscoveryEndpoint returns the value of DiscoveryEndpoint.
func (s *OidcInfo) GetDiscoveryEndpoint() OptString {
	return s.DiscoveryEndpoint
}

// GetAuthEndpoint returns the value of AuthEndpoint.
func (s *OidcInfo) GetAuthEndpoint() OptString {
	return s.AuthEndpoint
}

// GetAuthMethod returns the value of AuthMethod.
func (s *OidcInfo) GetAuthMethod() OptString {
	return s.AuthMethod
}

// GetLogoutEndpoint returns the value of LogoutEndpoint.
func (s *OidcInfo) GetLogoutEndpoint() OptString {
	return s.LogoutEndpoint
}

// GetIssuer returns the value of Issuer.
func (s *OidcInfo) GetIssuer() OptString {
	return s.Issuer
}

// GetPublicKeyUri returns the value of PublicKeyUri.
func (s *OidcInfo) GetPublicKeyUri() OptString {
	return s.PublicKeyUri
}

// GetTokenEndpoint returns the value of TokenEndpoint.
func (s *OidcInfo) GetTokenEndpoint() OptString {
	return s.TokenEndpoint
}

// SetClientId sets the value of ClientId.
func (s *OidcInfo) SetClientId(val OptString) {
	s.ClientId = val
}

// SetDiscoveryEndpoint sets the value of DiscoveryEndpoint.
func (s *OidcInfo) SetDiscoveryEndpoint(val OptString) {
	s.DiscoveryEndpoint = val
}

// SetAuthEndpoint sets the value of AuthEndpoint.
func (s *OidcInfo) SetAuthEndpoint(val OptString) {
	s.AuthEndpoint = val
}

// SetAuthMethod sets the value of AuthMethod.
func (s *OidcInfo) SetAuthMethod(val OptString) {
	s.AuthMethod = val
}

// SetLogoutEndpoint sets the value of LogoutEndpoint.
func (s *OidcInfo) SetLogoutEndpoint(val OptString) {
	s.LogoutEndpoint = val
}

// SetIssuer sets the value of Issuer.
func (s *OidcInfo) SetIssuer(val OptString) {
	s.Issuer = val
}

// SetPublicKeyUri sets the value of PublicKeyUri.
func (s *OidcInfo) SetPublicKeyUri(val OptString) {
	s.PublicKeyUri = val
}

// SetTokenEndpoint sets the value of TokenEndpoint.
func (s *OidcInfo) SetTokenEndpoint(val OptString) {
	s.TokenEndpoint = val
}

// This specification contains OpenSSL CA configuration details.
// Ref: #/components/schemas/OpenSSLCertificateAuthoritySpec
type OpenSSLCertificateAuthoritySpec struct {
	// OpenSSL CA domain name.
	CommonName string `json:"commonName"`
	// ISO 3166 country code where company is legally registered.
	Country string `json:"country"`
	// The full name of the state where company is legally registered.
	State string `json:"state"`
	// The city or locality where company is legally registered.
	Locality string `json:"locality"`
	// The name under which company is legally registered.
	Organization string `json:"organization"`
	// Organization with which the certificate is associated.
	OrganizationUnit string `json:"organizationUnit"`
}

// GetCommonName returns the value of CommonName.
func (s *OpenSSLCertificateAuthoritySpec) GetCommonName() string {
	return s.CommonName
}

// GetCountry returns the value of Country.
func (s *OpenSSLCertificateAuthoritySpec) GetCountry() string {
	return s.Country
}

// GetState returns the value of State.
func (s *OpenSSLCertificateAuthoritySpec) GetState() string {
	return s.State
}

// GetLocality returns the value of Locality.
func (s *OpenSSLCertificateAuthoritySpec) GetLocality() string {
	return s.Locality
}

// GetOrganization returns the value of Organization.
func (s *OpenSSLCertificateAuthoritySpec) GetOrganization() string {
	return s.Organization
}

// GetOrganizationUnit returns the value of OrganizationUnit.
func (s *OpenSSLCertificateAuthoritySpec) GetOrganizationUnit() string {
	return s.OrganizationUnit
}

// SetCommonName sets the value of CommonName.
func (s *OpenSSLCertificateAuthoritySpec) SetCommonName(val string) {
	s.CommonName = val
}

// SetCountry sets the value of Country.
func (s *OpenSSLCertificateAuthoritySpec) SetCountry(val string) {
	s.Country = val
}

// SetState sets the value of State.
func (s *OpenSSLCertificateAuthoritySpec) SetState(val string) {
	s.State = val
}

// SetLocality sets the value of Locality.
func (s *OpenSSLCertificateAuthoritySpec) SetLocality(val string) {
	s.Locality = val
}

// SetOrganization sets the value of Organization.
func (s *OpenSSLCertificateAuthoritySpec) SetOrganization(val string) {
	s.Organization = val
}

// SetOrganizationUnit sets the value of OrganizationUnit.
func (s *OpenSSLCertificateAuthoritySpec) SetOrganizationUnit(val string) {
	s.OrganizationUnit = val
}

// NewOptAddOnInfo returns new OptAddOnInfo with value set to v.
func NewOptAddOnInfo(v AddOnInfo) OptAddOnInfo {
	return OptAddOnInfo{
		Value: v,
		Set:   true,
	}
}

// OptAddOnInfo is optional AddOnInfo.
type OptAddOnInfo struct {
	Value AddOnInfo
	Set   bool
}

// IsSet returns true if OptAddOnInfo was set.
func (o OptAddOnInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAddOnInfo) Reset() {
	var v AddOnInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAddOnInfo) SetTo(v AddOnInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAddOnInfo) Get() (v AddOnInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAddOnInfo) Or(d AddOnInfo) AddOnInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAdvancedOptions returns new OptAdvancedOptions with value set to v.
func NewOptAdvancedOptions(v AdvancedOptions) OptAdvancedOptions {
	return OptAdvancedOptions{
		Value: v,
		Set:   true,
	}
}

// OptAdvancedOptions is optional AdvancedOptions.
type OptAdvancedOptions struct {
	Value AdvancedOptions
	Set   bool
}

// IsSet returns true if OptAdvancedOptions was set.
func (o OptAdvancedOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAdvancedOptions) Reset() {
	var v AdvancedOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAdvancedOptions) SetTo(v AdvancedOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAdvancedOptions) Get() (v AdvancedOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAdvancedOptions) Or(d AdvancedOptions) AdvancedOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptApplicability returns new OptApplicability with value set to v.
func NewOptApplicability(v Applicability) OptApplicability {
	return OptApplicability{
		Value: v,
		Set:   true,
	}
}

// OptApplicability is optional Applicability.
type OptApplicability struct {
	Value Applicability
	Set   bool
}

// IsSet returns true if OptApplicability was set.
func (o OptApplicability) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApplicability) Reset() {
	var v Applicability
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApplicability) SetTo(v Applicability) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApplicability) Get() (v Applicability, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApplicability) Or(d Applicability) Applicability {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAssessmentMetadata returns new OptAssessmentMetadata with value set to v.
func NewOptAssessmentMetadata(v AssessmentMetadata) OptAssessmentMetadata {
	return OptAssessmentMetadata{
		Value: v,
		Set:   true,
	}
}

// OptAssessmentMetadata is optional AssessmentMetadata.
type OptAssessmentMetadata struct {
	Value AssessmentMetadata
	Set   bool
}

// IsSet returns true if OptAssessmentMetadata was set.
func (o OptAssessmentMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAssessmentMetadata) Reset() {
	var v AssessmentMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAssessmentMetadata) SetTo(v AssessmentMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAssessmentMetadata) Get() (v AssessmentMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAssessmentMetadata) Or(d AssessmentMetadata) AssessmentMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAssessmentOutputPresentedArtifactsMap returns new OptAssessmentOutputPresentedArtifactsMap with value set to v.
func NewOptAssessmentOutputPresentedArtifactsMap(v AssessmentOutputPresentedArtifactsMap) OptAssessmentOutputPresentedArtifactsMap {
	return OptAssessmentOutputPresentedArtifactsMap{
		Value: v,
		Set:   true,
	}
}

// OptAssessmentOutputPresentedArtifactsMap is optional AssessmentOutputPresentedArtifactsMap.
type OptAssessmentOutputPresentedArtifactsMap struct {
	Value AssessmentOutputPresentedArtifactsMap
	Set   bool
}

// IsSet returns true if OptAssessmentOutputPresentedArtifactsMap was set.
func (o OptAssessmentOutputPresentedArtifactsMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAssessmentOutputPresentedArtifactsMap) Reset() {
	var v AssessmentOutputPresentedArtifactsMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAssessmentOutputPresentedArtifactsMap) SetTo(v AssessmentOutputPresentedArtifactsMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAssessmentOutputPresentedArtifactsMap) Get() (v AssessmentOutputPresentedArtifactsMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAssessmentOutputPresentedArtifactsMap) Or(d AssessmentOutputPresentedArtifactsMap) AssessmentOutputPresentedArtifactsMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAssessmentOutputStatus returns new OptAssessmentOutputStatus with value set to v.
func NewOptAssessmentOutputStatus(v AssessmentOutputStatus) OptAssessmentOutputStatus {
	return OptAssessmentOutputStatus{
		Value: v,
		Set:   true,
	}
}

// OptAssessmentOutputStatus is optional AssessmentOutputStatus.
type OptAssessmentOutputStatus struct {
	Value AssessmentOutputStatus
	Set   bool
}

// IsSet returns true if OptAssessmentOutputStatus was set.
func (o OptAssessmentOutputStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAssessmentOutputStatus) Reset() {
	var v AssessmentOutputStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAssessmentOutputStatus) SetTo(v AssessmentOutputStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAssessmentOutputStatus) Get() (v AssessmentOutputStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAssessmentOutputStatus) Or(d AssessmentOutputStatus) AssessmentOutputStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAssessmentPartialRetryInputOptions returns new OptAssessmentPartialRetryInputOptions with value set to v.
func NewOptAssessmentPartialRetryInputOptions(v AssessmentPartialRetryInputOptions) OptAssessmentPartialRetryInputOptions {
	return OptAssessmentPartialRetryInputOptions{
		Value: v,
		Set:   true,
	}
}

// OptAssessmentPartialRetryInputOptions is optional AssessmentPartialRetryInputOptions.
type OptAssessmentPartialRetryInputOptions struct {
	Value AssessmentPartialRetryInputOptions
	Set   bool
}

// IsSet returns true if OptAssessmentPartialRetryInputOptions was set.
func (o OptAssessmentPartialRetryInputOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAssessmentPartialRetryInputOptions) Reset() {
	var v AssessmentPartialRetryInputOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAssessmentPartialRetryInputOptions) SetTo(v AssessmentPartialRetryInputOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAssessmentPartialRetryInputOptions) Get() (v AssessmentPartialRetryInputOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAssessmentPartialRetryInputOptions) Or(d AssessmentPartialRetryInputOptions) AssessmentPartialRetryInputOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAssociatedTask returns new OptAssociatedTask with value set to v.
func NewOptAssociatedTask(v AssociatedTask) OptAssociatedTask {
	return OptAssociatedTask{
		Value: v,
		Set:   true,
	}
}

// OptAssociatedTask is optional AssociatedTask.
type OptAssociatedTask struct {
	Value AssociatedTask
	Set   bool
}

// IsSet returns true if OptAssociatedTask was set.
func (o OptAssociatedTask) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAssociatedTask) Reset() {
	var v AssociatedTask
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAssociatedTask) SetTo(v AssociatedTask) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAssociatedTask) Get() (v AssociatedTask, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAssociatedTask) Or(d AssociatedTask) AssociatedTask {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthenticatedResource returns new OptAuthenticatedResource with value set to v.
func NewOptAuthenticatedResource(v AuthenticatedResource) OptAuthenticatedResource {
	return OptAuthenticatedResource{
		Value: v,
		Set:   true,
	}
}

// OptAuthenticatedResource is optional AuthenticatedResource.
type OptAuthenticatedResource struct {
	Value AuthenticatedResource
	Set   bool
}

// IsSet returns true if OptAuthenticatedResource was set.
func (o OptAuthenticatedResource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthenticatedResource) Reset() {
	var v AuthenticatedResource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthenticatedResource) SetTo(v AuthenticatedResource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthenticatedResource) Get() (v AuthenticatedResource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthenticatedResource) Or(d AuthenticatedResource) AuthenticatedResource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAutoRotateCredentialPolicy returns new OptAutoRotateCredentialPolicy with value set to v.
func NewOptAutoRotateCredentialPolicy(v AutoRotateCredentialPolicy) OptAutoRotateCredentialPolicy {
	return OptAutoRotateCredentialPolicy{
		Value: v,
		Set:   true,
	}
}

// OptAutoRotateCredentialPolicy is optional AutoRotateCredentialPolicy.
type OptAutoRotateCredentialPolicy struct {
	Value AutoRotateCredentialPolicy
	Set   bool
}

// IsSet returns true if OptAutoRotateCredentialPolicy was set.
func (o OptAutoRotateCredentialPolicy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAutoRotateCredentialPolicy) Reset() {
	var v AutoRotateCredentialPolicy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAutoRotateCredentialPolicy) SetTo(v AutoRotateCredentialPolicy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAutoRotateCredentialPolicy) Get() (v AutoRotateCredentialPolicy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAutoRotateCredentialPolicy) Or(d AutoRotateCredentialPolicy) AutoRotateCredentialPolicy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAutoRotateCredentialPolicyInputSpec returns new OptAutoRotateCredentialPolicyInputSpec with value set to v.
func NewOptAutoRotateCredentialPolicyInputSpec(v AutoRotateCredentialPolicyInputSpec) OptAutoRotateCredentialPolicyInputSpec {
	return OptAutoRotateCredentialPolicyInputSpec{
		Value: v,
		Set:   true,
	}
}

// OptAutoRotateCredentialPolicyInputSpec is optional AutoRotateCredentialPolicyInputSpec.
type OptAutoRotateCredentialPolicyInputSpec struct {
	Value AutoRotateCredentialPolicyInputSpec
	Set   bool
}

// IsSet returns true if OptAutoRotateCredentialPolicyInputSpec was set.
func (o OptAutoRotateCredentialPolicyInputSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAutoRotateCredentialPolicyInputSpec) Reset() {
	var v AutoRotateCredentialPolicyInputSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAutoRotateCredentialPolicyInputSpec) SetTo(v AutoRotateCredentialPolicyInputSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAutoRotateCredentialPolicyInputSpec) Get() (v AutoRotateCredentialPolicyInputSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAutoRotateCredentialPolicyInputSpec) Or(d AutoRotateCredentialPolicyInputSpec) AutoRotateCredentialPolicyInputSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBackupRetentionPolicy returns new OptBackupRetentionPolicy with value set to v.
func NewOptBackupRetentionPolicy(v BackupRetentionPolicy) OptBackupRetentionPolicy {
	return OptBackupRetentionPolicy{
		Value: v,
		Set:   true,
	}
}

// OptBackupRetentionPolicy is optional BackupRetentionPolicy.
type OptBackupRetentionPolicy struct {
	Value BackupRetentionPolicy
	Set   bool
}

// IsSet returns true if OptBackupRetentionPolicy was set.
func (o OptBackupRetentionPolicy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBackupRetentionPolicy) Reset() {
	var v BackupRetentionPolicy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBackupRetentionPolicy) SetTo(v BackupRetentionPolicy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBackupRetentionPolicy) Get() (v BackupRetentionPolicy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBackupRetentionPolicy) Or(d BackupRetentionPolicy) BackupRetentionPolicy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBaseImageDetails returns new OptBaseImageDetails with value set to v.
func NewOptBaseImageDetails(v BaseImageDetails) OptBaseImageDetails {
	return OptBaseImageDetails{
		Value: v,
		Set:   true,
	}
}

// OptBaseImageDetails is optional BaseImageDetails.
type OptBaseImageDetails struct {
	Value BaseImageDetails
	Set   bool
}

// IsSet returns true if OptBaseImageDetails was set.
func (o OptBaseImageDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBaseImageDetails) Reset() {
	var v BaseImageDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBaseImageDetails) SetTo(v BaseImageDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBaseImageDetails) Get() (v BaseImageDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBaseImageDetails) Or(d BaseImageDetails) BaseImageDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBasicAuthDetails returns new OptBasicAuthDetails with value set to v.
func NewOptBasicAuthDetails(v BasicAuthDetails) OptBasicAuthDetails {
	return OptBasicAuthDetails{
		Value: v,
		Set:   true,
	}
}

// OptBasicAuthDetails is optional BasicAuthDetails.
type OptBasicAuthDetails struct {
	Value BasicAuthDetails
	Set   bool
}

// IsSet returns true if OptBasicAuthDetails was set.
func (o OptBasicAuthDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBasicAuthDetails) Reset() {
	var v BasicAuthDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBasicAuthDetails) SetTo(v BasicAuthDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBasicAuthDetails) Get() (v BasicAuthDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBasicAuthDetails) Or(d BasicAuthDetails) BasicAuthDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBundle returns new OptBundle with value set to v.
func NewOptBundle(v Bundle) OptBundle {
	return OptBundle{
		Value: v,
		Set:   true,
	}
}

// OptBundle is optional Bundle.
type OptBundle struct {
	Value Bundle
	Set   bool
}

// IsSet returns true if OptBundle was set.
func (o OptBundle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBundle) Reset() {
	var v Bundle
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBundle) SetTo(v Bundle) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBundle) Get() (v Bundle, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBundle) Or(d Bundle) Bundle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBundleDownloadSpec returns new OptBundleDownloadSpec with value set to v.
func NewOptBundleDownloadSpec(v BundleDownloadSpec) OptBundleDownloadSpec {
	return OptBundleDownloadSpec{
		Value: v,
		Set:   true,
	}
}

// OptBundleDownloadSpec is optional BundleDownloadSpec.
type OptBundleDownloadSpec struct {
	Value BundleDownloadSpec
	Set   bool
}

// IsSet returns true if OptBundleDownloadSpec was set.
func (o OptBundleDownloadSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBundleDownloadSpec) Reset() {
	var v BundleDownloadSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBundleDownloadSpec) SetTo(v BundleDownloadSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBundleDownloadSpec) Get() (v BundleDownloadSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBundleDownloadSpec) Or(d BundleDownloadSpec) BundleDownloadSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCPU returns new OptCPU with value set to v.
func NewOptCPU(v CPU) OptCPU {
	return OptCPU{
		Value: v,
		Set:   true,
	}
}

// OptCPU is optional CPU.
type OptCPU struct {
	Value CPU
	Set   bool
}

// IsSet returns true if OptCPU was set.
func (o OptCPU) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCPU) Reset() {
	var v CPU
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCPU) SetTo(v CPU) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCPU) Get() (v CPU, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCPU) Or(d CPU) CPU {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapacity returns new OptCapacity with value set to v.
func NewOptCapacity(v Capacity) OptCapacity {
	return OptCapacity{
		Value: v,
		Set:   true,
	}
}

// OptCapacity is optional Capacity.
type OptCapacity struct {
	Value Capacity
	Set   bool
}

// IsSet returns true if OptCapacity was set.
func (o OptCapacity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapacity) Reset() {
	var v Capacity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapacity) SetTo(v Capacity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapacity) Get() (v Capacity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapacity) Or(d Capacity) Capacity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCheckSetQueryResourceResultExtraContext returns new OptCheckSetQueryResourceResultExtraContext with value set to v.
func NewOptCheckSetQueryResourceResultExtraContext(v CheckSetQueryResourceResultExtraContext) OptCheckSetQueryResourceResultExtraContext {
	return OptCheckSetQueryResourceResultExtraContext{
		Value: v,
		Set:   true,
	}
}

// OptCheckSetQueryResourceResultExtraContext is optional CheckSetQueryResourceResultExtraContext.
type OptCheckSetQueryResourceResultExtraContext struct {
	Value CheckSetQueryResourceResultExtraContext
	Set   bool
}

// IsSet returns true if OptCheckSetQueryResourceResultExtraContext was set.
func (o OptCheckSetQueryResourceResultExtraContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCheckSetQueryResourceResultExtraContext) Reset() {
	var v CheckSetQueryResourceResultExtraContext
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCheckSetQueryResourceResultExtraContext) SetTo(v CheckSetQueryResourceResultExtraContext) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCheckSetQueryResourceResultExtraContext) Get() (v CheckSetQueryResourceResultExtraContext, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCheckSetQueryResourceResultExtraContext) Or(d CheckSetQueryResourceResultExtraContext) CheckSetQueryResourceResultExtraContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptClassificationSource returns new OptClassificationSource with value set to v.
func NewOptClassificationSource(v ClassificationSource) OptClassificationSource {
	return OptClassificationSource{
		Value: v,
		Set:   true,
	}
}

// OptClassificationSource is optional ClassificationSource.
type OptClassificationSource struct {
	Value ClassificationSource
	Set   bool
}

// IsSet returns true if OptClassificationSource was set.
func (o OptClassificationSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptClassificationSource) Reset() {
	var v ClassificationSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptClassificationSource) SetTo(v ClassificationSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptClassificationSource) Get() (v ClassificationSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptClassificationSource) Or(d ClassificationSource) ClassificationSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptClusterCompactionSpec returns new OptClusterCompactionSpec with value set to v.
func NewOptClusterCompactionSpec(v ClusterCompactionSpec) OptClusterCompactionSpec {
	return OptClusterCompactionSpec{
		Value: v,
		Set:   true,
	}
}

// OptClusterCompactionSpec is optional ClusterCompactionSpec.
type OptClusterCompactionSpec struct {
	Value ClusterCompactionSpec
	Set   bool
}

// IsSet returns true if OptClusterCompactionSpec was set.
func (o OptClusterCompactionSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptClusterCompactionSpec) Reset() {
	var v ClusterCompactionSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptClusterCompactionSpec) SetTo(v ClusterCompactionSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptClusterCompactionSpec) Get() (v ClusterCompactionSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptClusterCompactionSpec) Or(d ClusterCompactionSpec) ClusterCompactionSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptClusterCriterionArguments returns new OptClusterCriterionArguments with value set to v.
func NewOptClusterCriterionArguments(v ClusterCriterionArguments) OptClusterCriterionArguments {
	return OptClusterCriterionArguments{
		Value: v,
		Set:   true,
	}
}

// OptClusterCriterionArguments is optional ClusterCriterionArguments.
type OptClusterCriterionArguments struct {
	Value ClusterCriterionArguments
	Set   bool
}

// IsSet returns true if OptClusterCriterionArguments was set.
func (o OptClusterCriterionArguments) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptClusterCriterionArguments) Reset() {
	var v ClusterCriterionArguments
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptClusterCriterionArguments) SetTo(v ClusterCriterionArguments) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptClusterCriterionArguments) Get() (v ClusterCriterionArguments, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptClusterCriterionArguments) Or(d ClusterCriterionArguments) ClusterCriterionArguments {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptClusterExpansionNetworkSpec returns new OptClusterExpansionNetworkSpec with value set to v.
func NewOptClusterExpansionNetworkSpec(v ClusterExpansionNetworkSpec) OptClusterExpansionNetworkSpec {
	return OptClusterExpansionNetworkSpec{
		Value: v,
		Set:   true,
	}
}

// OptClusterExpansionNetworkSpec is optional ClusterExpansionNetworkSpec.
type OptClusterExpansionNetworkSpec struct {
	Value ClusterExpansionNetworkSpec
	Set   bool
}

// IsSet returns true if OptClusterExpansionNetworkSpec was set.
func (o OptClusterExpansionNetworkSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptClusterExpansionNetworkSpec) Reset() {
	var v ClusterExpansionNetworkSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptClusterExpansionNetworkSpec) SetTo(v ClusterExpansionNetworkSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptClusterExpansionNetworkSpec) Get() (v ClusterExpansionNetworkSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptClusterExpansionNetworkSpec) Or(d ClusterExpansionNetworkSpec) ClusterExpansionNetworkSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptClusterExpansionSpec returns new OptClusterExpansionSpec with value set to v.
func NewOptClusterExpansionSpec(v ClusterExpansionSpec) OptClusterExpansionSpec {
	return OptClusterExpansionSpec{
		Value: v,
		Set:   true,
	}
}

// OptClusterExpansionSpec is optional ClusterExpansionSpec.
type OptClusterExpansionSpec struct {
	Value ClusterExpansionSpec
	Set   bool
}

// IsSet returns true if OptClusterExpansionSpec was set.
func (o OptClusterExpansionSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptClusterExpansionSpec) Reset() {
	var v ClusterExpansionSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptClusterExpansionSpec) SetTo(v ClusterExpansionSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptClusterExpansionSpec) Get() (v ClusterExpansionSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptClusterExpansionSpec) Or(d ClusterExpansionSpec) ClusterExpansionSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptClusterNetworkConfigurationCriterionArguments returns new OptClusterNetworkConfigurationCriterionArguments with value set to v.
func NewOptClusterNetworkConfigurationCriterionArguments(v ClusterNetworkConfigurationCriterionArguments) OptClusterNetworkConfigurationCriterionArguments {
	return OptClusterNetworkConfigurationCriterionArguments{
		Value: v,
		Set:   true,
	}
}

// OptClusterNetworkConfigurationCriterionArguments is optional ClusterNetworkConfigurationCriterionArguments.
type OptClusterNetworkConfigurationCriterionArguments struct {
	Value ClusterNetworkConfigurationCriterionArguments
	Set   bool
}

// IsSet returns true if OptClusterNetworkConfigurationCriterionArguments was set.
func (o OptClusterNetworkConfigurationCriterionArguments) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptClusterNetworkConfigurationCriterionArguments) Reset() {
	var v ClusterNetworkConfigurationCriterionArguments
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptClusterNetworkConfigurationCriterionArguments) SetTo(v ClusterNetworkConfigurationCriterionArguments) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptClusterNetworkConfigurationCriterionArguments) Get() (v ClusterNetworkConfigurationCriterionArguments, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptClusterNetworkConfigurationCriterionArguments) Or(d ClusterNetworkConfigurationCriterionArguments) ClusterNetworkConfigurationCriterionArguments {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptClusterReference returns new OptClusterReference with value set to v.
func NewOptClusterReference(v ClusterReference) OptClusterReference {
	return OptClusterReference{
		Value: v,
		Set:   true,
	}
}

// OptClusterReference is optional ClusterReference.
type OptClusterReference struct {
	Value ClusterReference
	Set   bool
}

// IsSet returns true if OptClusterReference was set.
func (o OptClusterReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptClusterReference) Reset() {
	var v ClusterReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptClusterReference) SetTo(v ClusterReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptClusterReference) Get() (v ClusterReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptClusterReference) Or(d ClusterReference) ClusterReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptClusterSpec returns new OptClusterSpec with value set to v.
func NewOptClusterSpec(v ClusterSpec) OptClusterSpec {
	return OptClusterSpec{
		Value: v,
		Set:   true,
	}
}

// OptClusterSpec is optional ClusterSpec.
type OptClusterSpec struct {
	Value ClusterSpec
	Set   bool
}

// IsSet returns true if OptClusterSpec was set.
func (o OptClusterSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptClusterSpec) Reset() {
	var v ClusterSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptClusterSpec) SetTo(v ClusterSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptClusterSpec) Get() (v ClusterSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptClusterSpec) Or(d ClusterSpec) ClusterSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptClusterStretchNetworkSpec returns new OptClusterStretchNetworkSpec with value set to v.
func NewOptClusterStretchNetworkSpec(v ClusterStretchNetworkSpec) OptClusterStretchNetworkSpec {
	return OptClusterStretchNetworkSpec{
		Value: v,
		Set:   true,
	}
}

// OptClusterStretchNetworkSpec is optional ClusterStretchNetworkSpec.
type OptClusterStretchNetworkSpec struct {
	Value ClusterStretchNetworkSpec
	Set   bool
}

// IsSet returns true if OptClusterStretchNetworkSpec was set.
func (o OptClusterStretchNetworkSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptClusterStretchNetworkSpec) Reset() {
	var v ClusterStretchNetworkSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptClusterStretchNetworkSpec) SetTo(v ClusterStretchNetworkSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptClusterStretchNetworkSpec) Get() (v ClusterStretchNetworkSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptClusterStretchNetworkSpec) Or(d ClusterStretchNetworkSpec) ClusterStretchNetworkSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptClusterStretchSpec returns new OptClusterStretchSpec with value set to v.
func NewOptClusterStretchSpec(v ClusterStretchSpec) OptClusterStretchSpec {
	return OptClusterStretchSpec{
		Value: v,
		Set:   true,
	}
}

// OptClusterStretchSpec is optional ClusterStretchSpec.
type OptClusterStretchSpec struct {
	Value ClusterStretchSpec
	Set   bool
}

// IsSet returns true if OptClusterStretchSpec was set.
func (o OptClusterStretchSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptClusterStretchSpec) Reset() {
	var v ClusterStretchSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptClusterStretchSpec) SetTo(v ClusterStretchSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptClusterStretchSpec) Get() (v ClusterStretchSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptClusterStretchSpec) Or(d ClusterStretchSpec) ClusterStretchSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCpuInfo returns new OptCpuInfo with value set to v.
func NewOptCpuInfo(v CpuInfo) OptCpuInfo {
	return OptCpuInfo{
		Value: v,
		Set:   true,
	}
}

// OptCpuInfo is optional CpuInfo.
type OptCpuInfo struct {
	Value CpuInfo
	Set   bool
}

// IsSet returns true if OptCpuInfo was set.
func (o OptCpuInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCpuInfo) Reset() {
	var v CpuInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCpuInfo) SetTo(v CpuInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCpuInfo) Get() (v CpuInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCpuInfo) Or(d CpuInfo) CpuInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomISOSpec returns new OptCustomISOSpec with value set to v.
func NewOptCustomISOSpec(v CustomISOSpec) OptCustomISOSpec {
	return OptCustomISOSpec{
		Value: v,
		Set:   true,
	}
}

// OptCustomISOSpec is optional CustomISOSpec.
type OptCustomISOSpec struct {
	Value CustomISOSpec
	Set   bool
}

// IsSet returns true if OptCustomISOSpec was set.
func (o OptCustomISOSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomISOSpec) Reset() {
	var v CustomISOSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomISOSpec) SetTo(v CustomISOSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomISOSpec) Get() (v CustomISOSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomISOSpec) Or(d CustomISOSpec) CustomISOSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataMetric returns new OptDataMetric with value set to v.
func NewOptDataMetric(v DataMetric) OptDataMetric {
	return OptDataMetric{
		Value: v,
		Set:   true,
	}
}

// OptDataMetric is optional DataMetric.
type OptDataMetric struct {
	Value DataMetric
	Set   bool
}

// IsSet returns true if OptDataMetric was set.
func (o OptDataMetric) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataMetric) Reset() {
	var v DataMetric
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataMetric) SetTo(v DataMetric) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataMetric) Get() (v DataMetric, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataMetric) Or(d DataMetric) DataMetric {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataMetricUnit returns new OptDataMetricUnit with value set to v.
func NewOptDataMetricUnit(v DataMetricUnit) OptDataMetricUnit {
	return OptDataMetricUnit{
		Value: v,
		Set:   true,
	}
}

// OptDataMetricUnit is optional DataMetricUnit.
type OptDataMetricUnit struct {
	Value DataMetricUnit
	Set   bool
}

// IsSet returns true if OptDataMetricUnit was set.
func (o OptDataMetricUnit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataMetricUnit) Reset() {
	var v DataMetricUnit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataMetricUnit) SetTo(v DataMetricUnit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataMetricUnit) Get() (v DataMetricUnit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataMetricUnit) Or(d DataMetricUnit) DataMetricUnit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatastoreCriterionArguments returns new OptDatastoreCriterionArguments with value set to v.
func NewOptDatastoreCriterionArguments(v DatastoreCriterionArguments) OptDatastoreCriterionArguments {
	return OptDatastoreCriterionArguments{
		Value: v,
		Set:   true,
	}
}

// OptDatastoreCriterionArguments is optional DatastoreCriterionArguments.
type OptDatastoreCriterionArguments struct {
	Value DatastoreCriterionArguments
	Set   bool
}

// IsSet returns true if OptDatastoreCriterionArguments was set.
func (o OptDatastoreCriterionArguments) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatastoreCriterionArguments) Reset() {
	var v DatastoreCriterionArguments
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatastoreCriterionArguments) SetTo(v DatastoreCriterionArguments) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatastoreCriterionArguments) Get() (v DatastoreCriterionArguments, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatastoreCriterionArguments) Or(d DatastoreCriterionArguments) DatastoreCriterionArguments {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDepotAccount returns new OptDepotAccount with value set to v.
func NewOptDepotAccount(v DepotAccount) OptDepotAccount {
	return OptDepotAccount{
		Value: v,
		Set:   true,
	}
}

// OptDepotAccount is optional DepotAccount.
type OptDepotAccount struct {
	Value DepotAccount
	Set   bool
}

// IsSet returns true if OptDepotAccount was set.
func (o OptDepotAccount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDepotAccount) Reset() {
	var v DepotAccount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDepotAccount) SetTo(v DepotAccount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDepotAccount) Get() (v DepotAccount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDepotAccount) Or(d DepotAccount) DepotAccount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDepotConfiguration returns new OptDepotConfiguration with value set to v.
func NewOptDepotConfiguration(v DepotConfiguration) OptDepotConfiguration {
	return OptDepotConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptDepotConfiguration is optional DepotConfiguration.
type OptDepotConfiguration struct {
	Value DepotConfiguration
	Set   bool
}

// IsSet returns true if OptDepotConfiguration was set.
func (o OptDepotConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDepotConfiguration) Reset() {
	var v DepotConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDepotConfiguration) SetTo(v DepotConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDepotConfiguration) Get() (v DepotConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDepotConfiguration) Or(d DepotConfiguration) DepotConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDiscoveryProgress returns new OptDiscoveryProgress with value set to v.
func NewOptDiscoveryProgress(v DiscoveryProgress) OptDiscoveryProgress {
	return OptDiscoveryProgress{
		Value: v,
		Set:   true,
	}
}

// OptDiscoveryProgress is optional DiscoveryProgress.
type OptDiscoveryProgress struct {
	Value DiscoveryProgress
	Set   bool
}

// IsSet returns true if OptDiscoveryProgress was set.
func (o OptDiscoveryProgress) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDiscoveryProgress) Reset() {
	var v DiscoveryProgress
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDiscoveryProgress) SetTo(v DiscoveryProgress) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDiscoveryProgress) Get() (v DiscoveryProgress, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDiscoveryProgress) Or(d DiscoveryProgress) DiscoveryProgress {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDomainInfo returns new OptDomainInfo with value set to v.
func NewOptDomainInfo(v DomainInfo) OptDomainInfo {
	return OptDomainInfo{
		Value: v,
		Set:   true,
	}
}

// OptDomainInfo is optional DomainInfo.
type OptDomainInfo struct {
	Value DomainInfo
	Set   bool
}

// IsSet returns true if OptDomainInfo was set.
func (o OptDomainInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDomainInfo) Reset() {
	var v DomainInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDomainInfo) SetTo(v DomainInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDomainInfo) Get() (v DomainInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDomainInfo) Or(d DomainInfo) DomainInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDomainInfoDomainType returns new OptDomainInfoDomainType with value set to v.
func NewOptDomainInfoDomainType(v DomainInfoDomainType) OptDomainInfoDomainType {
	return OptDomainInfoDomainType{
		Value: v,
		Set:   true,
	}
}

// OptDomainInfoDomainType is optional DomainInfoDomainType.
type OptDomainInfoDomainType struct {
	Value DomainInfoDomainType
	Set   bool
}

// IsSet returns true if OptDomainInfoDomainType was set.
func (o OptDomainInfoDomainType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDomainInfoDomainType) Reset() {
	var v DomainInfoDomainType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDomainInfoDomainType) SetTo(v DomainInfoDomainType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDomainInfoDomainType) Get() (v DomainInfoDomainType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDomainInfoDomainType) Or(d DomainInfoDomainType) DomainInfoDomainType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDomainReference returns new OptDomainReference with value set to v.
func NewOptDomainReference(v DomainReference) OptDomainReference {
	return OptDomainReference{
		Value: v,
		Set:   true,
	}
}

// OptDomainReference is optional DomainReference.
type OptDomainReference struct {
	Value DomainReference
	Set   bool
}

// IsSet returns true if OptDomainReference was set.
func (o OptDomainReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDomainReference) Reset() {
	var v DomainReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDomainReference) SetTo(v DomainReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDomainReference) Get() (v DomainReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDomainReference) Or(d DomainReference) DomainReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDomainRelease returns new OptDomainRelease with value set to v.
func NewOptDomainRelease(v DomainRelease) OptDomainRelease {
	return OptDomainRelease{
		Value: v,
		Set:   true,
	}
}

// OptDomainRelease is optional DomainRelease.
type OptDomainRelease struct {
	Value DomainRelease
	Set   bool
}

// IsSet returns true if OptDomainRelease was set.
func (o OptDomainRelease) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDomainRelease) Reset() {
	var v DomainRelease
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDomainRelease) SetTo(v DomainRelease) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDomainRelease) Get() (v DomainRelease, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDomainRelease) Or(d DomainRelease) DomainRelease {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEdgeClusterExpansionSpec returns new OptEdgeClusterExpansionSpec with value set to v.
func NewOptEdgeClusterExpansionSpec(v EdgeClusterExpansionSpec) OptEdgeClusterExpansionSpec {
	return OptEdgeClusterExpansionSpec{
		Value: v,
		Set:   true,
	}
}

// OptEdgeClusterExpansionSpec is optional EdgeClusterExpansionSpec.
type OptEdgeClusterExpansionSpec struct {
	Value EdgeClusterExpansionSpec
	Set   bool
}

// IsSet returns true if OptEdgeClusterExpansionSpec was set.
func (o OptEdgeClusterExpansionSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEdgeClusterExpansionSpec) Reset() {
	var v EdgeClusterExpansionSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEdgeClusterExpansionSpec) SetTo(v EdgeClusterExpansionSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEdgeClusterExpansionSpec) Get() (v EdgeClusterExpansionSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEdgeClusterExpansionSpec) Or(d EdgeClusterExpansionSpec) EdgeClusterExpansionSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEdgeClusterNsxtEntityCriterionArguments returns new OptEdgeClusterNsxtEntityCriterionArguments with value set to v.
func NewOptEdgeClusterNsxtEntityCriterionArguments(v EdgeClusterNsxtEntityCriterionArguments) OptEdgeClusterNsxtEntityCriterionArguments {
	return OptEdgeClusterNsxtEntityCriterionArguments{
		Value: v,
		Set:   true,
	}
}

// OptEdgeClusterNsxtEntityCriterionArguments is optional EdgeClusterNsxtEntityCriterionArguments.
type OptEdgeClusterNsxtEntityCriterionArguments struct {
	Value EdgeClusterNsxtEntityCriterionArguments
	Set   bool
}

// IsSet returns true if OptEdgeClusterNsxtEntityCriterionArguments was set.
func (o OptEdgeClusterNsxtEntityCriterionArguments) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEdgeClusterNsxtEntityCriterionArguments) Reset() {
	var v EdgeClusterNsxtEntityCriterionArguments
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEdgeClusterNsxtEntityCriterionArguments) SetTo(v EdgeClusterNsxtEntityCriterionArguments) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEdgeClusterNsxtEntityCriterionArguments) Get() (v EdgeClusterNsxtEntityCriterionArguments, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEdgeClusterNsxtEntityCriterionArguments) Or(d EdgeClusterNsxtEntityCriterionArguments) EdgeClusterNsxtEntityCriterionArguments {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEdgeClusterShrinkageSpec returns new OptEdgeClusterShrinkageSpec with value set to v.
func NewOptEdgeClusterShrinkageSpec(v EdgeClusterShrinkageSpec) OptEdgeClusterShrinkageSpec {
	return OptEdgeClusterShrinkageSpec{
		Value: v,
		Set:   true,
	}
}

// OptEdgeClusterShrinkageSpec is optional EdgeClusterShrinkageSpec.
type OptEdgeClusterShrinkageSpec struct {
	Value EdgeClusterShrinkageSpec
	Set   bool
}

// IsSet returns true if OptEdgeClusterShrinkageSpec was set.
func (o OptEdgeClusterShrinkageSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEdgeClusterShrinkageSpec) Reset() {
	var v EdgeClusterShrinkageSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEdgeClusterShrinkageSpec) SetTo(v EdgeClusterShrinkageSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEdgeClusterShrinkageSpec) Get() (v EdgeClusterShrinkageSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEdgeClusterShrinkageSpec) Or(d EdgeClusterShrinkageSpec) EdgeClusterShrinkageSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEdgeTepIpAddressPoolSpec returns new OptEdgeTepIpAddressPoolSpec with value set to v.
func NewOptEdgeTepIpAddressPoolSpec(v EdgeTepIpAddressPoolSpec) OptEdgeTepIpAddressPoolSpec {
	return OptEdgeTepIpAddressPoolSpec{
		Value: v,
		Set:   true,
	}
}

// OptEdgeTepIpAddressPoolSpec is optional EdgeTepIpAddressPoolSpec.
type OptEdgeTepIpAddressPoolSpec struct {
	Value EdgeTepIpAddressPoolSpec
	Set   bool
}

// IsSet returns true if OptEdgeTepIpAddressPoolSpec was set.
func (o OptEdgeTepIpAddressPoolSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEdgeTepIpAddressPoolSpec) Reset() {
	var v EdgeTepIpAddressPoolSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEdgeTepIpAddressPoolSpec) SetTo(v EdgeTepIpAddressPoolSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEdgeTepIpAddressPoolSpec) Get() (v EdgeTepIpAddressPoolSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEdgeTepIpAddressPoolSpec) Or(d EdgeTepIpAddressPoolSpec) EdgeTepIpAddressPoolSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEncryption returns new OptEncryption with value set to v.
func NewOptEncryption(v Encryption) OptEncryption {
	return OptEncryption{
		Value: v,
		Set:   true,
	}
}

// OptEncryption is optional Encryption.
type OptEncryption struct {
	Value Encryption
	Set   bool
}

// IsSet returns true if OptEncryption was set.
func (o OptEncryption) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEncryption) Reset() {
	var v Encryption
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEncryption) SetTo(v Encryption) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEncryption) Get() (v Encryption, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEncryption) Or(d Encryption) Encryption {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEntityRest returns new OptEntityRest with value set to v.
func NewOptEntityRest(v EntityRest) OptEntityRest {
	return OptEntityRest{
		Value: v,
		Set:   true,
	}
}

// OptEntityRest is optional EntityRest.
type OptEntityRest struct {
	Value EntityRest
	Set   bool
}

// IsSet returns true if OptEntityRest was set.
func (o OptEntityRest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEntityRest) Reset() {
	var v EntityRest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEntityRest) SetTo(v EntityRest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEntityRest) Get() (v EntityRest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEntityRest) Or(d EntityRest) EntityRest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEntityRestProperties returns new OptEntityRestProperties with value set to v.
func NewOptEntityRestProperties(v EntityRestProperties) OptEntityRestProperties {
	return OptEntityRestProperties{
		Value: v,
		Set:   true,
	}
}

// OptEntityRestProperties is optional EntityRestProperties.
type OptEntityRestProperties struct {
	Value EntityRestProperties
	Set   bool
}

// IsSet returns true if OptEntityRestProperties was set.
func (o OptEntityRestProperties) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEntityRestProperties) Reset() {
	var v EntityRestProperties
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEntityRestProperties) SetTo(v EntityRestProperties) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEntityRestProperties) Get() (v EntityRestProperties, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEntityRestProperties) Or(d EntityRestProperties) EntityRestProperties {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptError returns new OptError with value set to v.
func NewOptError(v Error) OptError {
	return OptError{
		Value: v,
		Set:   true,
	}
}

// OptError is optional Error.
type OptError struct {
	Value Error
	Set   bool
}

// IsSet returns true if OptError was set.
func (o OptError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptError) Reset() {
	var v Error
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptError) SetTo(v Error) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptError) Get() (v Error, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptError) Or(d Error) Error {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorContext returns new OptErrorContext with value set to v.
func NewOptErrorContext(v ErrorContext) OptErrorContext {
	return OptErrorContext{
		Value: v,
		Set:   true,
	}
}

// OptErrorContext is optional ErrorContext.
type OptErrorContext struct {
	Value ErrorContext
	Set   bool
}

// IsSet returns true if OptErrorContext was set.
func (o OptErrorContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorContext) Reset() {
	var v ErrorContext
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorContext) SetTo(v ErrorContext) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorContext) Get() (v ErrorContext, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorContext) Or(d ErrorContext) ErrorContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorResponseContext returns new OptErrorResponseContext with value set to v.
func NewOptErrorResponseContext(v ErrorResponseContext) OptErrorResponseContext {
	return OptErrorResponseContext{
		Value: v,
		Set:   true,
	}
}

// OptErrorResponseContext is optional ErrorResponseContext.
type OptErrorResponseContext struct {
	Value ErrorResponseContext
	Set   bool
}

// IsSet returns true if OptErrorResponseContext was set.
func (o OptErrorResponseContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorResponseContext) Reset() {
	var v ErrorResponseContext
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorResponseContext) SetTo(v ErrorResponseContext) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorResponseContext) Get() (v ErrorResponseContext, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorResponseContext) Or(d ErrorResponseContext) ErrorResponseContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEsaConfig returns new OptEsaConfig with value set to v.
func NewOptEsaConfig(v EsaConfig) OptEsaConfig {
	return OptEsaConfig{
		Value: v,
		Set:   true,
	}
}

// OptEsaConfig is optional EsaConfig.
type OptEsaConfig struct {
	Value EsaConfig
	Set   bool
}

// IsSet returns true if OptEsaConfig was set.
func (o OptEsaConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEsaConfig) Reset() {
	var v EsaConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEsaConfig) SetTo(v EsaConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEsaConfig) Get() (v EsaConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEsaConfig) Or(d EsaConfig) EsaConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEsxUpgradeFailureAction returns new OptEsxUpgradeFailureAction with value set to v.
func NewOptEsxUpgradeFailureAction(v EsxUpgradeFailureAction) OptEsxUpgradeFailureAction {
	return OptEsxUpgradeFailureAction{
		Value: v,
		Set:   true,
	}
}

// OptEsxUpgradeFailureAction is optional EsxUpgradeFailureAction.
type OptEsxUpgradeFailureAction struct {
	Value EsxUpgradeFailureAction
	Set   bool
}

// IsSet returns true if OptEsxUpgradeFailureAction was set.
func (o OptEsxUpgradeFailureAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEsxUpgradeFailureAction) Reset() {
	var v EsxUpgradeFailureAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEsxUpgradeFailureAction) SetTo(v EsxUpgradeFailureAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEsxUpgradeFailureAction) Get() (v EsxUpgradeFailureAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEsxUpgradeFailureAction) Or(d EsxUpgradeFailureAction) EsxUpgradeFailureAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEsxUpgradeOptionsSpec returns new OptEsxUpgradeOptionsSpec with value set to v.
func NewOptEsxUpgradeOptionsSpec(v EsxUpgradeOptionsSpec) OptEsxUpgradeOptionsSpec {
	return OptEsxUpgradeOptionsSpec{
		Value: v,
		Set:   true,
	}
}

// OptEsxUpgradeOptionsSpec is optional EsxUpgradeOptionsSpec.
type OptEsxUpgradeOptionsSpec struct {
	Value EsxUpgradeOptionsSpec
	Set   bool
}

// IsSet returns true if OptEsxUpgradeOptionsSpec was set.
func (o OptEsxUpgradeOptionsSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEsxUpgradeOptionsSpec) Reset() {
	var v EsxUpgradeOptionsSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEsxUpgradeOptionsSpec) SetTo(v EsxUpgradeOptionsSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEsxUpgradeOptionsSpec) Get() (v EsxUpgradeOptionsSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEsxUpgradeOptionsSpec) Or(d EsxUpgradeOptionsSpec) EsxUpgradeOptionsSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExpirationDetails returns new OptExpirationDetails with value set to v.
func NewOptExpirationDetails(v ExpirationDetails) OptExpirationDetails {
	return OptExpirationDetails{
		Value: v,
		Set:   true,
	}
}

// OptExpirationDetails is optional ExpirationDetails.
type OptExpirationDetails struct {
	Value ExpirationDetails
	Set   bool
}

// IsSet returns true if OptExpirationDetails was set.
func (o OptExpirationDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExpirationDetails) Reset() {
	var v ExpirationDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExpirationDetails) SetTo(v ExpirationDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExpirationDetails) Get() (v ExpirationDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExpirationDetails) Or(d ExpirationDetails) ExpirationDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExportBringupDetailReportFormat returns new OptExportBringupDetailReportFormat with value set to v.
func NewOptExportBringupDetailReportFormat(v ExportBringupDetailReportFormat) OptExportBringupDetailReportFormat {
	return OptExportBringupDetailReportFormat{
		Value: v,
		Set:   true,
	}
}

// OptExportBringupDetailReportFormat is optional ExportBringupDetailReportFormat.
type OptExportBringupDetailReportFormat struct {
	Value ExportBringupDetailReportFormat
	Set   bool
}

// IsSet returns true if OptExportBringupDetailReportFormat was set.
func (o OptExportBringupDetailReportFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExportBringupDetailReportFormat) Reset() {
	var v ExportBringupDetailReportFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExportBringupDetailReportFormat) SetTo(v ExportBringupDetailReportFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExportBringupDetailReportFormat) Get() (v ExportBringupDetailReportFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExportBringupDetailReportFormat) Or(d ExportBringupDetailReportFormat) ExportBringupDetailReportFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFederatedIdentityProviderInfo returns new OptFederatedIdentityProviderInfo with value set to v.
func NewOptFederatedIdentityProviderInfo(v FederatedIdentityProviderInfo) OptFederatedIdentityProviderInfo {
	return OptFederatedIdentityProviderInfo{
		Value: v,
		Set:   true,
	}
}

// OptFederatedIdentityProviderInfo is optional FederatedIdentityProviderInfo.
type OptFederatedIdentityProviderInfo struct {
	Value FederatedIdentityProviderInfo
	Set   bool
}

// IsSet returns true if OptFederatedIdentityProviderInfo was set.
func (o OptFederatedIdentityProviderInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFederatedIdentityProviderInfo) Reset() {
	var v FederatedIdentityProviderInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFederatedIdentityProviderInfo) SetTo(v FederatedIdentityProviderInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFederatedIdentityProviderInfo) Get() (v FederatedIdentityProviderInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFederatedIdentityProviderInfo) Or(d FederatedIdentityProviderInfo) FederatedIdentityProviderInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFrequencyMetric returns new OptFrequencyMetric with value set to v.
func NewOptFrequencyMetric(v FrequencyMetric) OptFrequencyMetric {
	return OptFrequencyMetric{
		Value: v,
		Set:   true,
	}
}

// OptFrequencyMetric is optional FrequencyMetric.
type OptFrequencyMetric struct {
	Value FrequencyMetric
	Set   bool
}

// IsSet returns true if OptFrequencyMetric was set.
func (o OptFrequencyMetric) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFrequencyMetric) Reset() {
	var v FrequencyMetric
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFrequencyMetric) SetTo(v FrequencyMetric) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFrequencyMetric) Get() (v FrequencyMetric, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFrequencyMetric) Or(d FrequencyMetric) FrequencyMetric {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFrequencyMetricUnit returns new OptFrequencyMetricUnit with value set to v.
func NewOptFrequencyMetricUnit(v FrequencyMetricUnit) OptFrequencyMetricUnit {
	return OptFrequencyMetricUnit{
		Value: v,
		Set:   true,
	}
}

// OptFrequencyMetricUnit is optional FrequencyMetricUnit.
type OptFrequencyMetricUnit struct {
	Value FrequencyMetricUnit
	Set   bool
}

// IsSet returns true if OptFrequencyMetricUnit was set.
func (o OptFrequencyMetricUnit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFrequencyMetricUnit) Reset() {
	var v FrequencyMetricUnit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFrequencyMetricUnit) SetTo(v FrequencyMetricUnit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFrequencyMetricUnit) Get() (v FrequencyMetricUnit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFrequencyMetricUnit) Or(d FrequencyMetricUnit) FrequencyMetricUnit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHardwareSupportInfo returns new OptHardwareSupportInfo with value set to v.
func NewOptHardwareSupportInfo(v HardwareSupportInfo) OptHardwareSupportInfo {
	return OptHardwareSupportInfo{
		Value: v,
		Set:   true,
	}
}

// OptHardwareSupportInfo is optional HardwareSupportInfo.
type OptHardwareSupportInfo struct {
	Value HardwareSupportInfo
	Set   bool
}

// IsSet returns true if OptHardwareSupportInfo was set.
func (o OptHardwareSupportInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHardwareSupportInfo) Reset() {
	var v HardwareSupportInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHardwareSupportInfo) SetTo(v HardwareSupportInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHardwareSupportInfo) Get() (v HardwareSupportInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHardwareSupportInfo) Or(d HardwareSupportInfo) HardwareSupportInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHciMeshData returns new OptHciMeshData with value set to v.
func NewOptHciMeshData(v HciMeshData) OptHciMeshData {
	return OptHciMeshData{
		Value: v,
		Set:   true,
	}
}

// OptHciMeshData is optional HciMeshData.
type OptHciMeshData struct {
	Value HciMeshData
	Set   bool
}

// IsSet returns true if OptHciMeshData was set.
func (o OptHciMeshData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHciMeshData) Reset() {
	var v HciMeshData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHciMeshData) SetTo(v HciMeshData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHciMeshData) Get() (v HciMeshData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHciMeshData) Or(d HciMeshData) HciMeshData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHealthChecks returns new OptHealthChecks with value set to v.
func NewOptHealthChecks(v HealthChecks) OptHealthChecks {
	return OptHealthChecks{
		Value: v,
		Set:   true,
	}
}

// OptHealthChecks is optional HealthChecks.
type OptHealthChecks struct {
	Value HealthChecks
	Set   bool
}

// IsSet returns true if OptHealthChecks was set.
func (o OptHealthChecks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHealthChecks) Reset() {
	var v HealthChecks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHealthChecks) SetTo(v HealthChecks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHealthChecks) Get() (v HealthChecks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHealthChecks) Or(d HealthChecks) HealthChecks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHealthSummaryConfig returns new OptHealthSummaryConfig with value set to v.
func NewOptHealthSummaryConfig(v HealthSummaryConfig) OptHealthSummaryConfig {
	return OptHealthSummaryConfig{
		Value: v,
		Set:   true,
	}
}

// OptHealthSummaryConfig is optional HealthSummaryConfig.
type OptHealthSummaryConfig struct {
	Value HealthSummaryConfig
	Set   bool
}

// IsSet returns true if OptHealthSummaryConfig was set.
func (o OptHealthSummaryConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHealthSummaryConfig) Reset() {
	var v HealthSummaryConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHealthSummaryConfig) SetTo(v HealthSummaryConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHealthSummaryConfig) Get() (v HealthSummaryConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHealthSummaryConfig) Or(d HealthSummaryConfig) HealthSummaryConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHealthSummaryIncludeItems returns new OptHealthSummaryIncludeItems with value set to v.
func NewOptHealthSummaryIncludeItems(v HealthSummaryIncludeItems) OptHealthSummaryIncludeItems {
	return OptHealthSummaryIncludeItems{
		Value: v,
		Set:   true,
	}
}

// OptHealthSummaryIncludeItems is optional HealthSummaryIncludeItems.
type OptHealthSummaryIncludeItems struct {
	Value HealthSummaryIncludeItems
	Set   bool
}

// IsSet returns true if OptHealthSummaryIncludeItems was set.
func (o OptHealthSummaryIncludeItems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHealthSummaryIncludeItems) Reset() {
	var v HealthSummaryIncludeItems
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHealthSummaryIncludeItems) SetTo(v HealthSummaryIncludeItems) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHealthSummaryIncludeItems) Get() (v HealthSummaryIncludeItems, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHealthSummaryIncludeItems) Or(d HealthSummaryIncludeItems) HealthSummaryIncludeItems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHealthSummaryOption returns new OptHealthSummaryOption with value set to v.
func NewOptHealthSummaryOption(v HealthSummaryOption) OptHealthSummaryOption {
	return OptHealthSummaryOption{
		Value: v,
		Set:   true,
	}
}

// OptHealthSummaryOption is optional HealthSummaryOption.
type OptHealthSummaryOption struct {
	Value HealthSummaryOption
	Set   bool
}

// IsSet returns true if OptHealthSummaryOption was set.
func (o OptHealthSummaryOption) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHealthSummaryOption) Reset() {
	var v HealthSummaryOption
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHealthSummaryOption) SetTo(v HealthSummaryOption) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHealthSummaryOption) Get() (v HealthSummaryOption, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHealthSummaryOption) Or(d HealthSummaryOption) HealthSummaryOption {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHealthSummaryScope returns new OptHealthSummaryScope with value set to v.
func NewOptHealthSummaryScope(v HealthSummaryScope) OptHealthSummaryScope {
	return OptHealthSummaryScope{
		Value: v,
		Set:   true,
	}
}

// OptHealthSummaryScope is optional HealthSummaryScope.
type OptHealthSummaryScope struct {
	Value HealthSummaryScope
	Set   bool
}

// IsSet returns true if OptHealthSummaryScope was set.
func (o OptHealthSummaryScope) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHealthSummaryScope) Reset() {
	var v HealthSummaryScope
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHealthSummaryScope) SetTo(v HealthSummaryScope) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHealthSummaryScope) Get() (v HealthSummaryScope, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHealthSummaryScope) Or(d HealthSummaryScope) HealthSummaryScope {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHighAvailability returns new OptHighAvailability with value set to v.
func NewOptHighAvailability(v HighAvailability) OptHighAvailability {
	return OptHighAvailability{
		Value: v,
		Set:   true,
	}
}

// OptHighAvailability is optional HighAvailability.
type OptHighAvailability struct {
	Value HighAvailability
	Set   bool
}

// IsSet returns true if OptHighAvailability was set.
func (o OptHighAvailability) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHighAvailability) Reset() {
	var v HighAvailability
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHighAvailability) SetTo(v HighAvailability) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHighAvailability) Get() (v HighAvailability, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHighAvailability) Or(d HighAvailability) HighAvailability {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHost returns new OptHost with value set to v.
func NewOptHost(v Host) OptHost {
	return OptHost{
		Value: v,
		Set:   true,
	}
}

// OptHost is optional Host.
type OptHost struct {
	Value Host
	Set   bool
}

// IsSet returns true if OptHost was set.
func (o OptHost) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHost) Reset() {
	var v Host
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHost) SetTo(v Host) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHost) Get() (v Host, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHost) Or(d Host) Host {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHostCriterionArguments returns new OptHostCriterionArguments with value set to v.
func NewOptHostCriterionArguments(v HostCriterionArguments) OptHostCriterionArguments {
	return OptHostCriterionArguments{
		Value: v,
		Set:   true,
	}
}

// OptHostCriterionArguments is optional HostCriterionArguments.
type OptHostCriterionArguments struct {
	Value HostCriterionArguments
	Set   bool
}

// IsSet returns true if OptHostCriterionArguments was set.
func (o OptHostCriterionArguments) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHostCriterionArguments) Reset() {
	var v HostCriterionArguments
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHostCriterionArguments) SetTo(v HostCriterionArguments) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHostCriterionArguments) Get() (v HostCriterionArguments, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHostCriterionArguments) Or(d HostCriterionArguments) HostCriterionArguments {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHostNetworkConfiguration returns new OptHostNetworkConfiguration with value set to v.
func NewOptHostNetworkConfiguration(v HostNetworkConfiguration) OptHostNetworkConfiguration {
	return OptHostNetworkConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptHostNetworkConfiguration is optional HostNetworkConfiguration.
type OptHostNetworkConfiguration struct {
	Value HostNetworkConfiguration
	Set   bool
}

// IsSet returns true if OptHostNetworkConfiguration was set.
func (o OptHostNetworkConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHostNetworkConfiguration) Reset() {
	var v HostNetworkConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHostNetworkConfiguration) SetTo(v HostNetworkConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHostNetworkConfiguration) Get() (v HostNetworkConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHostNetworkConfiguration) Or(d HostNetworkConfiguration) HostNetworkConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHostNetworkSpec returns new OptHostNetworkSpec with value set to v.
func NewOptHostNetworkSpec(v HostNetworkSpec) OptHostNetworkSpec {
	return OptHostNetworkSpec{
		Value: v,
		Set:   true,
	}
}

// OptHostNetworkSpec is optional HostNetworkSpec.
type OptHostNetworkSpec struct {
	Value HostNetworkSpec
	Set   bool
}

// IsSet returns true if OptHostNetworkSpec was set.
func (o OptHostNetworkSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHostNetworkSpec) Reset() {
	var v HostNetworkSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHostNetworkSpec) SetTo(v HostNetworkSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHostNetworkSpec) Get() (v HostNetworkSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHostNetworkSpec) Or(d HostNetworkSpec) HostNetworkSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIdentityProviderDirectory returns new OptIdentityProviderDirectory with value set to v.
func NewOptIdentityProviderDirectory(v IdentityProviderDirectory) OptIdentityProviderDirectory {
	return OptIdentityProviderDirectory{
		Value: v,
		Set:   true,
	}
}

// OptIdentityProviderDirectory is optional IdentityProviderDirectory.
type OptIdentityProviderDirectory struct {
	Value IdentityProviderDirectory
	Set   bool
}

// IsSet returns true if OptIdentityProviderDirectory was set.
func (o OptIdentityProviderDirectory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIdentityProviderDirectory) Reset() {
	var v IdentityProviderDirectory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIdentityProviderDirectory) SetTo(v IdentityProviderDirectory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIdentityProviderDirectory) Get() (v IdentityProviderDirectory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIdentityProviderDirectory) Or(d IdentityProviderDirectory) IdentityProviderDirectory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIpAddressPoolSpec returns new OptIpAddressPoolSpec with value set to v.
func NewOptIpAddressPoolSpec(v IpAddressPoolSpec) OptIpAddressPoolSpec {
	return OptIpAddressPoolSpec{
		Value: v,
		Set:   true,
	}
}

// OptIpAddressPoolSpec is optional IpAddressPoolSpec.
type OptIpAddressPoolSpec struct {
	Value IpAddressPoolSpec
	Set   bool
}

// IsSet returns true if OptIpAddressPoolSpec was set.
func (o OptIpAddressPoolSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIpAddressPoolSpec) Reset() {
	var v IpAddressPoolSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIpAddressPoolSpec) SetTo(v IpAddressPoolSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIpAddressPoolSpec) Get() (v IpAddressPoolSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIpAddressPoolSpec) Or(d IpAddressPoolSpec) IpAddressPoolSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIpAllocation returns new OptIpAllocation with value set to v.
func NewOptIpAllocation(v IpAllocation) OptIpAllocation {
	return OptIpAllocation{
		Value: v,
		Set:   true,
	}
}

// OptIpAllocation is optional IpAllocation.
type OptIpAllocation struct {
	Value IpAllocation
	Set   bool
}

// IsSet returns true if OptIpAllocation was set.
func (o OptIpAllocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIpAllocation) Reset() {
	var v IpAllocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIpAllocation) SetTo(v IpAllocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIpAllocation) Get() (v IpAllocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIpAllocation) Or(d IpAllocation) IpAllocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIsolationSpec returns new OptIsolationSpec with value set to v.
func NewOptIsolationSpec(v IsolationSpec) OptIsolationSpec {
	return OptIsolationSpec{
		Value: v,
		Set:   true,
	}
}

// OptIsolationSpec is optional IsolationSpec.
type OptIsolationSpec struct {
	Value IsolationSpec
	Set   bool
}

// IsSet returns true if OptIsolationSpec was set.
func (o OptIsolationSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIsolationSpec) Reset() {
	var v IsolationSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIsolationSpec) SetTo(v IsolationSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIsolationSpec) Get() (v IsolationSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIsolationSpec) Or(d IsolationSpec) IsolationSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLdapInfo returns new OptLdapInfo with value set to v.
func NewOptLdapInfo(v LdapInfo) OptLdapInfo {
	return OptLdapInfo{
		Value: v,
		Set:   true,
	}
}

// OptLdapInfo is optional LdapInfo.
type OptLdapInfo struct {
	Value LdapInfo
	Set   bool
}

// IsSet returns true if OptLdapInfo was set.
func (o OptLdapInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLdapInfo) Reset() {
	var v LdapInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLdapInfo) SetTo(v LdapInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLdapInfo) Get() (v LdapInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLdapInfo) Or(d LdapInfo) LdapInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLicenseKeyUsage returns new OptLicenseKeyUsage with value set to v.
func NewOptLicenseKeyUsage(v LicenseKeyUsage) OptLicenseKeyUsage {
	return OptLicenseKeyUsage{
		Value: v,
		Set:   true,
	}
}

// OptLicenseKeyUsage is optional LicenseKeyUsage.
type OptLicenseKeyUsage struct {
	Value LicenseKeyUsage
	Set   bool
}

// IsSet returns true if OptLicenseKeyUsage was set.
func (o OptLicenseKeyUsage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLicenseKeyUsage) Reset() {
	var v LicenseKeyUsage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLicenseKeyUsage) SetTo(v LicenseKeyUsage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLicenseKeyUsage) Get() (v LicenseKeyUsage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLicenseKeyUsage) Or(d LicenseKeyUsage) LicenseKeyUsage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLicenseKeyValidity returns new OptLicenseKeyValidity with value set to v.
func NewOptLicenseKeyValidity(v LicenseKeyValidity) OptLicenseKeyValidity {
	return OptLicenseKeyValidity{
		Value: v,
		Set:   true,
	}
}

// OptLicenseKeyValidity is optional LicenseKeyValidity.
type OptLicenseKeyValidity struct {
	Value LicenseKeyValidity
	Set   bool
}

// IsSet returns true if OptLicenseKeyValidity was set.
func (o OptLicenseKeyValidity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLicenseKeyValidity) Reset() {
	var v LicenseKeyValidity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLicenseKeyValidity) SetTo(v LicenseKeyValidity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLicenseKeyValidity) Get() (v LicenseKeyValidity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLicenseKeyValidity) Or(d LicenseKeyValidity) LicenseKeyValidity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLicensingInfoReference returns new OptLicensingInfoReference with value set to v.
func NewOptLicensingInfoReference(v LicensingInfoReference) OptLicensingInfoReference {
	return OptLicensingInfoReference{
		Value: v,
		Set:   true,
	}
}

// OptLicensingInfoReference is optional LicensingInfoReference.
type OptLicensingInfoReference struct {
	Value LicensingInfoReference
	Set   bool
}

// IsSet returns true if OptLicensingInfoReference was set.
func (o OptLicensingInfoReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLicensingInfoReference) Reset() {
	var v LicensingInfoReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLicensingInfoReference) SetTo(v LicensingInfoReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLicensingInfoReference) Get() (v LicensingInfoReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLicensingInfoReference) Or(d LicensingInfoReference) LicensingInfoReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLogs returns new OptLogs with value set to v.
func NewOptLogs(v Logs) OptLogs {
	return OptLogs{
		Value: v,
		Set:   true,
	}
}

// OptLogs is optional Logs.
type OptLogs struct {
	Value Logs
	Set   bool
}

// IsSet returns true if OptLogs was set.
func (o OptLogs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLogs) Reset() {
	var v Logs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLogs) SetTo(v Logs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLogs) Get() (v Logs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLogs) Or(d Logs) Logs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMemory returns new OptMemory with value set to v.
func NewOptMemory(v Memory) OptMemory {
	return OptMemory{
		Value: v,
		Set:   true,
	}
}

// OptMemory is optional Memory.
type OptMemory struct {
	Value Memory
	Set   bool
}

// IsSet returns true if OptMemory was set.
func (o OptMemory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMemory) Reset() {
	var v Memory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMemory) SetTo(v Memory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMemory) Get() (v Memory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMemory) Or(d Memory) Memory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMemoryInfo returns new OptMemoryInfo with value set to v.
func NewOptMemoryInfo(v MemoryInfo) OptMemoryInfo {
	return OptMemoryInfo{
		Value: v,
		Set:   true,
	}
}

// OptMemoryInfo is optional MemoryInfo.
type OptMemoryInfo struct {
	Value MemoryInfo
	Set   bool
}

// IsSet returns true if OptMemoryInfo was set.
func (o OptMemoryInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMemoryInfo) Reset() {
	var v MemoryInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMemoryInfo) SetTo(v MemoryInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMemoryInfo) Get() (v MemoryInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMemoryInfo) Or(d MemoryInfo) MemoryInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessagePack returns new OptMessagePack with value set to v.
func NewOptMessagePack(v MessagePack) OptMessagePack {
	return OptMessagePack{
		Value: v,
		Set:   true,
	}
}

// OptMessagePack is optional MessagePack.
type OptMessagePack struct {
	Value MessagePack
	Set   bool
}

// IsSet returns true if OptMessagePack was set.
func (o OptMessagePack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessagePack) Reset() {
	var v MessagePack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessagePack) SetTo(v MessagePack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessagePack) Get() (v MessagePack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessagePack) Or(d MessagePack) MessagePack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMicrosoftCertificateAuthoritySpec returns new OptMicrosoftCertificateAuthoritySpec with value set to v.
func NewOptMicrosoftCertificateAuthoritySpec(v MicrosoftCertificateAuthoritySpec) OptMicrosoftCertificateAuthoritySpec {
	return OptMicrosoftCertificateAuthoritySpec{
		Value: v,
		Set:   true,
	}
}

// OptMicrosoftCertificateAuthoritySpec is optional MicrosoftCertificateAuthoritySpec.
type OptMicrosoftCertificateAuthoritySpec struct {
	Value MicrosoftCertificateAuthoritySpec
	Set   bool
}

// IsSet returns true if OptMicrosoftCertificateAuthoritySpec was set.
func (o OptMicrosoftCertificateAuthoritySpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMicrosoftCertificateAuthoritySpec) Reset() {
	var v MicrosoftCertificateAuthoritySpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMicrosoftCertificateAuthoritySpec) SetTo(v MicrosoftCertificateAuthoritySpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMicrosoftCertificateAuthoritySpec) Get() (v MicrosoftCertificateAuthoritySpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMicrosoftCertificateAuthoritySpec) Or(d MicrosoftCertificateAuthoritySpec) MicrosoftCertificateAuthoritySpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMultipartFile returns new OptMultipartFile with value set to v.
func NewOptMultipartFile(v ht.MultipartFile) OptMultipartFile {
	return OptMultipartFile{
		Value: v,
		Set:   true,
	}
}

// OptMultipartFile is optional ht.MultipartFile.
type OptMultipartFile struct {
	Value ht.MultipartFile
	Set   bool
}

// IsSet returns true if OptMultipartFile was set.
func (o OptMultipartFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMultipartFile) Reset() {
	var v ht.MultipartFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMultipartFile) SetTo(v ht.MultipartFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMultipartFile) Get() (v ht.MultipartFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMultipartFile) Or(d ht.MultipartFile) ht.MultipartFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNetworkPoolReference returns new OptNetworkPoolReference with value set to v.
func NewOptNetworkPoolReference(v NetworkPoolReference) OptNetworkPoolReference {
	return OptNetworkPoolReference{
		Value: v,
		Set:   true,
	}
}

// OptNetworkPoolReference is optional NetworkPoolReference.
type OptNetworkPoolReference struct {
	Value NetworkPoolReference
	Set   bool
}

// IsSet returns true if OptNetworkPoolReference was set.
func (o OptNetworkPoolReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNetworkPoolReference) Reset() {
	var v NetworkPoolReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNetworkPoolReference) SetTo(v NetworkPoolReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNetworkPoolReference) Get() (v NetworkPoolReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNetworkPoolReference) Or(d NetworkPoolReference) NetworkPoolReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNiocTrafficResourceAllocation returns new OptNiocTrafficResourceAllocation with value set to v.
func NewOptNiocTrafficResourceAllocation(v NiocTrafficResourceAllocation) OptNiocTrafficResourceAllocation {
	return OptNiocTrafficResourceAllocation{
		Value: v,
		Set:   true,
	}
}

// OptNiocTrafficResourceAllocation is optional NiocTrafficResourceAllocation.
type OptNiocTrafficResourceAllocation struct {
	Value NiocTrafficResourceAllocation
	Set   bool
}

// IsSet returns true if OptNiocTrafficResourceAllocation was set.
func (o OptNiocTrafficResourceAllocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNiocTrafficResourceAllocation) Reset() {
	var v NiocTrafficResourceAllocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNiocTrafficResourceAllocation) SetTo(v NiocTrafficResourceAllocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNiocTrafficResourceAllocation) Get() (v NiocTrafficResourceAllocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNiocTrafficResourceAllocation) Or(d NiocTrafficResourceAllocation) NiocTrafficResourceAllocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNsxClusterSpec returns new OptNsxClusterSpec with value set to v.
func NewOptNsxClusterSpec(v NsxClusterSpec) OptNsxClusterSpec {
	return OptNsxClusterSpec{
		Value: v,
		Set:   true,
	}
}

// OptNsxClusterSpec is optional NsxClusterSpec.
type OptNsxClusterSpec struct {
	Value NsxClusterSpec
	Set   bool
}

// IsSet returns true if OptNsxClusterSpec was set.
func (o OptNsxClusterSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNsxClusterSpec) Reset() {
	var v NsxClusterSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNsxClusterSpec) SetTo(v NsxClusterSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNsxClusterSpec) Get() (v NsxClusterSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNsxClusterSpec) Or(d NsxClusterSpec) NsxClusterSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNsxTClusterReference returns new OptNsxTClusterReference with value set to v.
func NewOptNsxTClusterReference(v NsxTClusterReference) OptNsxTClusterReference {
	return OptNsxTClusterReference{
		Value: v,
		Set:   true,
	}
}

// OptNsxTClusterReference is optional NsxTClusterReference.
type OptNsxTClusterReference struct {
	Value NsxTClusterReference
	Set   bool
}

// IsSet returns true if OptNsxTClusterReference was set.
func (o OptNsxTClusterReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNsxTClusterReference) Reset() {
	var v NsxTClusterReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNsxTClusterReference) SetTo(v NsxTClusterReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNsxTClusterReference) Get() (v NsxTClusterReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNsxTClusterReference) Or(d NsxTClusterReference) NsxTClusterReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNsxTClusterSpec returns new OptNsxTClusterSpec with value set to v.
func NewOptNsxTClusterSpec(v NsxTClusterSpec) OptNsxTClusterSpec {
	return OptNsxTClusterSpec{
		Value: v,
		Set:   true,
	}
}

// OptNsxTClusterSpec is optional NsxTClusterSpec.
type OptNsxTClusterSpec struct {
	Value NsxTClusterSpec
	Set   bool
}

// IsSet returns true if OptNsxTClusterSpec was set.
func (o OptNsxTClusterSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNsxTClusterSpec) Reset() {
	var v NsxTClusterSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNsxTClusterSpec) SetTo(v NsxTClusterSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNsxTClusterSpec) Get() (v NsxTClusterSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNsxTClusterSpec) Or(d NsxTClusterSpec) NsxTClusterSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNsxTCriterionArguments returns new OptNsxTCriterionArguments with value set to v.
func NewOptNsxTCriterionArguments(v NsxTCriterionArguments) OptNsxTCriterionArguments {
	return OptNsxTCriterionArguments{
		Value: v,
		Set:   true,
	}
}

// OptNsxTCriterionArguments is optional NsxTCriterionArguments.
type OptNsxTCriterionArguments struct {
	Value NsxTCriterionArguments
	Set   bool
}

// IsSet returns true if OptNsxTCriterionArguments was set.
func (o OptNsxTCriterionArguments) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNsxTCriterionArguments) Reset() {
	var v NsxTCriterionArguments
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNsxTCriterionArguments) SetTo(v NsxTCriterionArguments) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNsxTCriterionArguments) Get() (v NsxTCriterionArguments, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNsxTCriterionArguments) Or(d NsxTCriterionArguments) NsxTCriterionArguments {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNsxTSpec returns new OptNsxTSpec with value set to v.
func NewOptNsxTSpec(v NsxTSpec) OptNsxTSpec {
	return OptNsxTSpec{
		Value: v,
		Set:   true,
	}
}

// OptNsxTSpec is optional NsxTSpec.
type OptNsxTSpec struct {
	Value NsxTSpec
	Set   bool
}

// IsSet returns true if OptNsxTSpec was set.
func (o OptNsxTSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNsxTSpec) Reset() {
	var v NsxTSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNsxTSpec) SetTo(v NsxTSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNsxTSpec) Get() (v NsxTSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNsxTSpec) Or(d NsxTSpec) NsxTSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNsxtManagerCluster returns new OptNsxtManagerCluster with value set to v.
func NewOptNsxtManagerCluster(v NsxtManagerCluster) OptNsxtManagerCluster {
	return OptNsxtManagerCluster{
		Value: v,
		Set:   true,
	}
}

// OptNsxtManagerCluster is optional NsxtManagerCluster.
type OptNsxtManagerCluster struct {
	Value NsxtManagerCluster
	Set   bool
}

// IsSet returns true if OptNsxtManagerCluster was set.
func (o OptNsxtManagerCluster) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNsxtManagerCluster) Reset() {
	var v NsxtManagerCluster
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNsxtManagerCluster) SetTo(v NsxtManagerCluster) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNsxtManagerCluster) Get() (v NsxtManagerCluster, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNsxtManagerCluster) Or(d NsxtManagerCluster) NsxtManagerCluster {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNsxtSwitchConfig returns new OptNsxtSwitchConfig with value set to v.
func NewOptNsxtSwitchConfig(v NsxtSwitchConfig) OptNsxtSwitchConfig {
	return OptNsxtSwitchConfig{
		Value: v,
		Set:   true,
	}
}

// OptNsxtSwitchConfig is optional NsxtSwitchConfig.
type OptNsxtSwitchConfig struct {
	Value NsxtSwitchConfig
	Set   bool
}

// IsSet returns true if OptNsxtSwitchConfig was set.
func (o OptNsxtSwitchConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNsxtSwitchConfig) Reset() {
	var v NsxtSwitchConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNsxtSwitchConfig) SetTo(v NsxtSwitchConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNsxtSwitchConfig) Get() (v NsxtSwitchConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNsxtSwitchConfig) Or(d NsxtSwitchConfig) NsxtSwitchConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNsxtSwitchConfiguration returns new OptNsxtSwitchConfiguration with value set to v.
func NewOptNsxtSwitchConfiguration(v NsxtSwitchConfiguration) OptNsxtSwitchConfiguration {
	return OptNsxtSwitchConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptNsxtSwitchConfiguration is optional NsxtSwitchConfiguration.
type OptNsxtSwitchConfiguration struct {
	Value NsxtSwitchConfiguration
	Set   bool
}

// IsSet returns true if OptNsxtSwitchConfiguration was set.
func (o OptNsxtSwitchConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNsxtSwitchConfiguration) Reset() {
	var v NsxtSwitchConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNsxtSwitchConfiguration) SetTo(v NsxtSwitchConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNsxtSwitchConfiguration) Get() (v NsxtSwitchConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNsxtSwitchConfiguration) Or(d NsxtSwitchConfiguration) NsxtSwitchConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNsxtTransportZone returns new OptNsxtTransportZone with value set to v.
func NewOptNsxtTransportZone(v NsxtTransportZone) OptNsxtTransportZone {
	return OptNsxtTransportZone{
		Value: v,
		Set:   true,
	}
}

// OptNsxtTransportZone is optional NsxtTransportZone.
type OptNsxtTransportZone struct {
	Value NsxtTransportZone
	Set   bool
}

// IsSet returns true if OptNsxtTransportZone was set.
func (o OptNsxtTransportZone) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNsxtTransportZone) Reset() {
	var v NsxtTransportZone
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNsxtTransportZone) SetTo(v NsxtTransportZone) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNsxtTransportZone) Get() (v NsxtTransportZone, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNsxtTransportZone) Or(d NsxtTransportZone) NsxtTransportZone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNsxtUpgradeCoordinator returns new OptNsxtUpgradeCoordinator with value set to v.
func NewOptNsxtUpgradeCoordinator(v NsxtUpgradeCoordinator) OptNsxtUpgradeCoordinator {
	return OptNsxtUpgradeCoordinator{
		Value: v,
		Set:   true,
	}
}

// OptNsxtUpgradeCoordinator is optional NsxtUpgradeCoordinator.
type OptNsxtUpgradeCoordinator struct {
	Value NsxtUpgradeCoordinator
	Set   bool
}

// IsSet returns true if OptNsxtUpgradeCoordinator was set.
func (o OptNsxtUpgradeCoordinator) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNsxtUpgradeCoordinator) Reset() {
	var v NsxtUpgradeCoordinator
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNsxtUpgradeCoordinator) SetTo(v NsxtUpgradeCoordinator) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNsxtUpgradeCoordinator) Get() (v NsxtUpgradeCoordinator, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNsxtUpgradeCoordinator) Or(d NsxtUpgradeCoordinator) NsxtUpgradeCoordinator {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNsxtUpgradeOptions returns new OptNsxtUpgradeOptions with value set to v.
func NewOptNsxtUpgradeOptions(v NsxtUpgradeOptions) OptNsxtUpgradeOptions {
	return OptNsxtUpgradeOptions{
		Value: v,
		Set:   true,
	}
}

// OptNsxtUpgradeOptions is optional NsxtUpgradeOptions.
type OptNsxtUpgradeOptions struct {
	Value NsxtUpgradeOptions
	Set   bool
}

// IsSet returns true if OptNsxtUpgradeOptions was set.
func (o OptNsxtUpgradeOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNsxtUpgradeOptions) Reset() {
	var v NsxtUpgradeOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNsxtUpgradeOptions) SetTo(v NsxtUpgradeOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNsxtUpgradeOptions) Get() (v NsxtUpgradeOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNsxtUpgradeOptions) Or(d NsxtUpgradeOptions) NsxtUpgradeOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNsxtUpgradeUserInputSpec returns new OptNsxtUpgradeUserInputSpec with value set to v.
func NewOptNsxtUpgradeUserInputSpec(v NsxtUpgradeUserInputSpec) OptNsxtUpgradeUserInputSpec {
	return OptNsxtUpgradeUserInputSpec{
		Value: v,
		Set:   true,
	}
}

// OptNsxtUpgradeUserInputSpec is optional NsxtUpgradeUserInputSpec.
type OptNsxtUpgradeUserInputSpec struct {
	Value NsxtUpgradeUserInputSpec
	Set   bool
}

// IsSet returns true if OptNsxtUpgradeUserInputSpec was set.
func (o OptNsxtUpgradeUserInputSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNsxtUpgradeUserInputSpec) Reset() {
	var v NsxtUpgradeUserInputSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNsxtUpgradeUserInputSpec) SetTo(v NsxtUpgradeUserInputSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNsxtUpgradeUserInputSpec) Get() (v NsxtUpgradeUserInputSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNsxtUpgradeUserInputSpec) Or(d NsxtUpgradeUserInputSpec) NsxtUpgradeUserInputSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOidcInfo returns new OptOidcInfo with value set to v.
func NewOptOidcInfo(v OidcInfo) OptOidcInfo {
	return OptOidcInfo{
		Value: v,
		Set:   true,
	}
}

// OptOidcInfo is optional OidcInfo.
type OptOidcInfo struct {
	Value OidcInfo
	Set   bool
}

// IsSet returns true if OptOidcInfo was set.
func (o OptOidcInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOidcInfo) Reset() {
	var v OidcInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOidcInfo) SetTo(v OidcInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOidcInfo) Get() (v OidcInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOidcInfo) Or(d OidcInfo) OidcInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOpenSSLCertificateAuthoritySpec returns new OptOpenSSLCertificateAuthoritySpec with value set to v.
func NewOptOpenSSLCertificateAuthoritySpec(v OpenSSLCertificateAuthoritySpec) OptOpenSSLCertificateAuthoritySpec {
	return OptOpenSSLCertificateAuthoritySpec{
		Value: v,
		Set:   true,
	}
}

// OptOpenSSLCertificateAuthoritySpec is optional OpenSSLCertificateAuthoritySpec.
type OptOpenSSLCertificateAuthoritySpec struct {
	Value OpenSSLCertificateAuthoritySpec
	Set   bool
}

// IsSet returns true if OptOpenSSLCertificateAuthoritySpec was set.
func (o OptOpenSSLCertificateAuthoritySpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOpenSSLCertificateAuthoritySpec) Reset() {
	var v OpenSSLCertificateAuthoritySpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOpenSSLCertificateAuthoritySpec) SetTo(v OpenSSLCertificateAuthoritySpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOpenSSLCertificateAuthoritySpec) Get() (v OpenSSLCertificateAuthoritySpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOpenSSLCertificateAuthoritySpec) Or(d OpenSSLCertificateAuthoritySpec) OpenSSLCertificateAuthoritySpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPageCluster returns new OptPageCluster with value set to v.
func NewOptPageCluster(v PageCluster) OptPageCluster {
	return OptPageCluster{
		Value: v,
		Set:   true,
	}
}

// OptPageCluster is optional PageCluster.
type OptPageCluster struct {
	Value PageCluster
	Set   bool
}

// IsSet returns true if OptPageCluster was set.
func (o OptPageCluster) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPageCluster) Reset() {
	var v PageCluster
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPageCluster) SetTo(v PageCluster) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPageCluster) Get() (v PageCluster, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPageCluster) Or(d PageCluster) PageCluster {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPageClusterNetworkConfiguration returns new OptPageClusterNetworkConfiguration with value set to v.
func NewOptPageClusterNetworkConfiguration(v PageClusterNetworkConfiguration) OptPageClusterNetworkConfiguration {
	return OptPageClusterNetworkConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptPageClusterNetworkConfiguration is optional PageClusterNetworkConfiguration.
type OptPageClusterNetworkConfiguration struct {
	Value PageClusterNetworkConfiguration
	Set   bool
}

// IsSet returns true if OptPageClusterNetworkConfiguration was set.
func (o OptPageClusterNetworkConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPageClusterNetworkConfiguration) Reset() {
	var v PageClusterNetworkConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPageClusterNetworkConfiguration) SetTo(v PageClusterNetworkConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPageClusterNetworkConfiguration) Get() (v PageClusterNetworkConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPageClusterNetworkConfiguration) Or(d PageClusterNetworkConfiguration) PageClusterNetworkConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPageDatastore returns new OptPageDatastore with value set to v.
func NewOptPageDatastore(v PageDatastore) OptPageDatastore {
	return OptPageDatastore{
		Value: v,
		Set:   true,
	}
}

// OptPageDatastore is optional PageDatastore.
type OptPageDatastore struct {
	Value PageDatastore
	Set   bool
}

// IsSet returns true if OptPageDatastore was set.
func (o OptPageDatastore) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPageDatastore) Reset() {
	var v PageDatastore
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPageDatastore) SetTo(v PageDatastore) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPageDatastore) Get() (v PageDatastore, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPageDatastore) Or(d PageDatastore) PageDatastore {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPageHost returns new OptPageHost with value set to v.
func NewOptPageHost(v PageHost) OptPageHost {
	return OptPageHost{
		Value: v,
		Set:   true,
	}
}

// OptPageHost is optional PageHost.
type OptPageHost struct {
	Value PageHost
	Set   bool
}

// IsSet returns true if OptPageHost was set.
func (o OptPageHost) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPageHost) Reset() {
	var v PageHost
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPageHost) SetTo(v PageHost) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPageHost) Get() (v PageHost, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPageHost) Or(d PageHost) PageHost {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPageMetadata returns new OptPageMetadata with value set to v.
func NewOptPageMetadata(v PageMetadata) OptPageMetadata {
	return OptPageMetadata{
		Value: v,
		Set:   true,
	}
}

// OptPageMetadata is optional PageMetadata.
type OptPageMetadata struct {
	Value PageMetadata
	Set   bool
}

// IsSet returns true if OptPageMetadata was set.
func (o OptPageMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPageMetadata) Reset() {
	var v PageMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPageMetadata) SetTo(v PageMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPageMetadata) Get() (v PageMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPageMetadata) Or(d PageMetadata) PageMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPageNsxTCluster returns new OptPageNsxTCluster with value set to v.
func NewOptPageNsxTCluster(v PageNsxTCluster) OptPageNsxTCluster {
	return OptPageNsxTCluster{
		Value: v,
		Set:   true,
	}
}

// OptPageNsxTCluster is optional PageNsxTCluster.
type OptPageNsxTCluster struct {
	Value PageNsxTCluster
	Set   bool
}

// IsSet returns true if OptPageNsxTCluster was set.
func (o OptPageNsxTCluster) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPageNsxTCluster) Reset() {
	var v PageNsxTCluster
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPageNsxTCluster) SetTo(v PageNsxTCluster) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPageNsxTCluster) Get() (v PageNsxTCluster, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPageNsxTCluster) Or(d PageNsxTCluster) PageNsxTCluster {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPartnerExtensionSpec returns new OptPartnerExtensionSpec with value set to v.
func NewOptPartnerExtensionSpec(v PartnerExtensionSpec) OptPartnerExtensionSpec {
	return OptPartnerExtensionSpec{
		Value: v,
		Set:   true,
	}
}

// OptPartnerExtensionSpec is optional PartnerExtensionSpec.
type OptPartnerExtensionSpec struct {
	Value PartnerExtensionSpec
	Set   bool
}

// IsSet returns true if OptPartnerExtensionSpec was set.
func (o OptPartnerExtensionSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPartnerExtensionSpec) Reset() {
	var v PartnerExtensionSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPartnerExtensionSpec) SetTo(v PartnerExtensionSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPartnerExtensionSpec) Get() (v PartnerExtensionSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPartnerExtensionSpec) Or(d PartnerExtensionSpec) PartnerExtensionSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPersonalitySpec returns new OptPersonalitySpec with value set to v.
func NewOptPersonalitySpec(v PersonalitySpec) OptPersonalitySpec {
	return OptPersonalitySpec{
		Value: v,
		Set:   true,
	}
}

// OptPersonalitySpec is optional PersonalitySpec.
type OptPersonalitySpec struct {
	Value PersonalitySpec
	Set   bool
}

// IsSet returns true if OptPersonalitySpec was set.
func (o OptPersonalitySpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPersonalitySpec) Reset() {
	var v PersonalitySpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPersonalitySpec) SetTo(v PersonalitySpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPersonalitySpec) Get() (v PersonalitySpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPersonalitySpec) Or(d PersonalitySpec) PersonalitySpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPersonalityUploadSpecRaw returns new OptPersonalityUploadSpecRaw with value set to v.
func NewOptPersonalityUploadSpecRaw(v PersonalityUploadSpecRaw) OptPersonalityUploadSpecRaw {
	return OptPersonalityUploadSpecRaw{
		Value: v,
		Set:   true,
	}
}

// OptPersonalityUploadSpecRaw is optional PersonalityUploadSpecRaw.
type OptPersonalityUploadSpecRaw struct {
	Value PersonalityUploadSpecRaw
	Set   bool
}

// IsSet returns true if OptPersonalityUploadSpecRaw was set.
func (o OptPersonalityUploadSpecRaw) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPersonalityUploadSpecRaw) Reset() {
	var v PersonalityUploadSpecRaw
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPersonalityUploadSpecRaw) SetTo(v PersonalityUploadSpecRaw) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPersonalityUploadSpecRaw) Get() (v PersonalityUploadSpecRaw, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPersonalityUploadSpecRaw) Or(d PersonalityUploadSpecRaw) PersonalityUploadSpecRaw {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPersonalityUploadSpecRawWithFileUploadId returns new OptPersonalityUploadSpecRawWithFileUploadId with value set to v.
func NewOptPersonalityUploadSpecRawWithFileUploadId(v PersonalityUploadSpecRawWithFileUploadId) OptPersonalityUploadSpecRawWithFileUploadId {
	return OptPersonalityUploadSpecRawWithFileUploadId{
		Value: v,
		Set:   true,
	}
}

// OptPersonalityUploadSpecRawWithFileUploadId is optional PersonalityUploadSpecRawWithFileUploadId.
type OptPersonalityUploadSpecRawWithFileUploadId struct {
	Value PersonalityUploadSpecRawWithFileUploadId
	Set   bool
}

// IsSet returns true if OptPersonalityUploadSpecRawWithFileUploadId was set.
func (o OptPersonalityUploadSpecRawWithFileUploadId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPersonalityUploadSpecRawWithFileUploadId) Reset() {
	var v PersonalityUploadSpecRawWithFileUploadId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPersonalityUploadSpecRawWithFileUploadId) SetTo(v PersonalityUploadSpecRawWithFileUploadId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPersonalityUploadSpecRawWithFileUploadId) Get() (v PersonalityUploadSpecRawWithFileUploadId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPersonalityUploadSpecRawWithFileUploadId) Or(d PersonalityUploadSpecRawWithFileUploadId) PersonalityUploadSpecRawWithFileUploadId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPersonalityUploadSpecReferred returns new OptPersonalityUploadSpecReferred with value set to v.
func NewOptPersonalityUploadSpecReferred(v PersonalityUploadSpecReferred) OptPersonalityUploadSpecReferred {
	return OptPersonalityUploadSpecReferred{
		Value: v,
		Set:   true,
	}
}

// OptPersonalityUploadSpecReferred is optional PersonalityUploadSpecReferred.
type OptPersonalityUploadSpecReferred struct {
	Value PersonalityUploadSpecReferred
	Set   bool
}

// IsSet returns true if OptPersonalityUploadSpecReferred was set.
func (o OptPersonalityUploadSpecReferred) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPersonalityUploadSpecReferred) Reset() {
	var v PersonalityUploadSpecReferred
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPersonalityUploadSpecReferred) SetTo(v PersonalityUploadSpecReferred) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPersonalityUploadSpecReferred) Get() (v PersonalityUploadSpecReferred, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPersonalityUploadSpecReferred) Or(d PersonalityUploadSpecReferred) PersonalityUploadSpecReferred {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhysicalNicUnit returns new OptPhysicalNicUnit with value set to v.
func NewOptPhysicalNicUnit(v PhysicalNicUnit) OptPhysicalNicUnit {
	return OptPhysicalNicUnit{
		Value: v,
		Set:   true,
	}
}

// OptPhysicalNicUnit is optional PhysicalNicUnit.
type OptPhysicalNicUnit struct {
	Value PhysicalNicUnit
	Set   bool
}

// IsSet returns true if OptPhysicalNicUnit was set.
func (o OptPhysicalNicUnit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhysicalNicUnit) Reset() {
	var v PhysicalNicUnit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhysicalNicUnit) SetTo(v PhysicalNicUnit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhysicalNicUnit) Get() (v PhysicalNicUnit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhysicalNicUnit) Or(d PhysicalNicUnit) PhysicalNicUnit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortgroupConfigSupportedTeamingPolicies returns new OptPortgroupConfigSupportedTeamingPolicies with value set to v.
func NewOptPortgroupConfigSupportedTeamingPolicies(v PortgroupConfigSupportedTeamingPolicies) OptPortgroupConfigSupportedTeamingPolicies {
	return OptPortgroupConfigSupportedTeamingPolicies{
		Value: v,
		Set:   true,
	}
}

// OptPortgroupConfigSupportedTeamingPolicies is optional PortgroupConfigSupportedTeamingPolicies.
type OptPortgroupConfigSupportedTeamingPolicies struct {
	Value PortgroupConfigSupportedTeamingPolicies
	Set   bool
}

// IsSet returns true if OptPortgroupConfigSupportedTeamingPolicies was set.
func (o OptPortgroupConfigSupportedTeamingPolicies) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortgroupConfigSupportedTeamingPolicies) Reset() {
	var v PortgroupConfigSupportedTeamingPolicies
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortgroupConfigSupportedTeamingPolicies) SetTo(v PortgroupConfigSupportedTeamingPolicies) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortgroupConfigSupportedTeamingPolicies) Get() (v PortgroupConfigSupportedTeamingPolicies, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortgroupConfigSupportedTeamingPolicies) Or(d PortgroupConfigSupportedTeamingPolicies) PortgroupConfigSupportedTeamingPolicies {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProductInfo returns new OptProductInfo with value set to v.
func NewOptProductInfo(v ProductInfo) OptProductInfo {
	return OptProductInfo{
		Value: v,
		Set:   true,
	}
}

// OptProductInfo is optional ProductInfo.
type OptProductInfo struct {
	Value ProductInfo
	Set   bool
}

// IsSet returns true if OptProductInfo was set.
func (o OptProductInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProductInfo) Reset() {
	var v ProductInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProductInfo) SetTo(v ProductInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProductInfo) Get() (v ProductInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProductInfo) Or(d ProductInfo) ProductInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProductVersionCatalogPatches returns new OptProductVersionCatalogPatches with value set to v.
func NewOptProductVersionCatalogPatches(v ProductVersionCatalogPatches) OptProductVersionCatalogPatches {
	return OptProductVersionCatalogPatches{
		Value: v,
		Set:   true,
	}
}

// OptProductVersionCatalogPatches is optional ProductVersionCatalogPatches.
type OptProductVersionCatalogPatches struct {
	Value ProductVersionCatalogPatches
	Set   bool
}

// IsSet returns true if OptProductVersionCatalogPatches was set.
func (o OptProductVersionCatalogPatches) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProductVersionCatalogPatches) Reset() {
	var v ProductVersionCatalogPatches
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProductVersionCatalogPatches) SetTo(v ProductVersionCatalogPatches) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProductVersionCatalogPatches) Get() (v ProductVersionCatalogPatches, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProductVersionCatalogPatches) Or(d ProductVersionCatalogPatches) ProductVersionCatalogPatches {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProxyConfigurationTransferProtocol returns new OptProxyConfigurationTransferProtocol with value set to v.
func NewOptProxyConfigurationTransferProtocol(v ProxyConfigurationTransferProtocol) OptProxyConfigurationTransferProtocol {
	return OptProxyConfigurationTransferProtocol{
		Value: v,
		Set:   true,
	}
}

// OptProxyConfigurationTransferProtocol is optional ProxyConfigurationTransferProtocol.
type OptProxyConfigurationTransferProtocol struct {
	Value ProxyConfigurationTransferProtocol
	Set   bool
}

// IsSet returns true if OptProxyConfigurationTransferProtocol was set.
func (o OptProxyConfigurationTransferProtocol) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProxyConfigurationTransferProtocol) Reset() {
	var v ProxyConfigurationTransferProtocol
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProxyConfigurationTransferProtocol) SetTo(v ProxyConfigurationTransferProtocol) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProxyConfigurationTransferProtocol) Get() (v ProxyConfigurationTransferProtocol, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProxyConfigurationTransferProtocol) Or(d ProxyConfigurationTransferProtocol) ProxyConfigurationTransferProtocol {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProxySpec returns new OptProxySpec with value set to v.
func NewOptProxySpec(v ProxySpec) OptProxySpec {
	return OptProxySpec{
		Value: v,
		Set:   true,
	}
}

// OptProxySpec is optional ProxySpec.
type OptProxySpec struct {
	Value ProxySpec
	Set   bool
}

// IsSet returns true if OptProxySpec was set.
func (o OptProxySpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProxySpec) Reset() {
	var v ProxySpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProxySpec) SetTo(v ProxySpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProxySpec) Get() (v ProxySpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProxySpec) Or(d ProxySpec) ProxySpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptQueryInfo returns new OptQueryInfo with value set to v.
func NewOptQueryInfo(v QueryInfo) OptQueryInfo {
	return OptQueryInfo{
		Value: v,
		Set:   true,
	}
}

// OptQueryInfo is optional QueryInfo.
type OptQueryInfo struct {
	Value QueryInfo
	Set   bool
}

// IsSet returns true if OptQueryInfo was set.
func (o OptQueryInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptQueryInfo) Reset() {
	var v QueryInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptQueryInfo) SetTo(v QueryInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptQueryInfo) Get() (v QueryInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptQueryInfo) Or(d QueryInfo) QueryInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRefreshToken returns new OptRefreshToken with value set to v.
func NewOptRefreshToken(v RefreshToken) OptRefreshToken {
	return OptRefreshToken{
		Value: v,
		Set:   true,
	}
}

// OptRefreshToken is optional RefreshToken.
type OptRefreshToken struct {
	Value RefreshToken
	Set   bool
}

// IsSet returns true if OptRefreshToken was set.
func (o OptRefreshToken) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRefreshToken) Reset() {
	var v RefreshToken
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRefreshToken) SetTo(v RefreshToken) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRefreshToken) Get() (v RefreshToken, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRefreshToken) Or(d RefreshToken) RefreshToken {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResource returns new OptResource with value set to v.
func NewOptResource(v Resource) OptResource {
	return OptResource{
		Value: v,
		Set:   true,
	}
}

// OptResource is optional Resource.
type OptResource struct {
	Value Resource
	Set   bool
}

// IsSet returns true if OptResource was set.
func (o OptResource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResource) Reset() {
	var v Resource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResource) SetTo(v Resource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResource) Get() (v Resource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResource) Or(d Resource) Resource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResourceDomainInfo returns new OptResourceDomainInfo with value set to v.
func NewOptResourceDomainInfo(v ResourceDomainInfo) OptResourceDomainInfo {
	return OptResourceDomainInfo{
		Value: v,
		Set:   true,
	}
}

// OptResourceDomainInfo is optional ResourceDomainInfo.
type OptResourceDomainInfo struct {
	Value ResourceDomainInfo
	Set   bool
}

// IsSet returns true if OptResourceDomainInfo was set.
func (o OptResourceDomainInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResourceDomainInfo) Reset() {
	var v ResourceDomainInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResourceDomainInfo) SetTo(v ResourceDomainInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResourceDomainInfo) Get() (v ResourceDomainInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResourceDomainInfo) Or(d ResourceDomainInfo) ResourceDomainInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResourceDomainInfoDomainType returns new OptResourceDomainInfoDomainType with value set to v.
func NewOptResourceDomainInfoDomainType(v ResourceDomainInfoDomainType) OptResourceDomainInfoDomainType {
	return OptResourceDomainInfoDomainType{
		Value: v,
		Set:   true,
	}
}

// OptResourceDomainInfoDomainType is optional ResourceDomainInfoDomainType.
type OptResourceDomainInfoDomainType struct {
	Value ResourceDomainInfoDomainType
	Set   bool
}

// IsSet returns true if OptResourceDomainInfoDomainType was set.
func (o OptResourceDomainInfoDomainType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResourceDomainInfoDomainType) Reset() {
	var v ResourceDomainInfoDomainType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResourceDomainInfoDomainType) SetTo(v ResourceDomainInfoDomainType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResourceDomainInfoDomainType) Get() (v ResourceDomainInfoDomainType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResourceDomainInfoDomainType) Or(d ResourceDomainInfoDomainType) ResourceDomainInfoDomainType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResourcePoolSpecCpuSharesLevel returns new OptResourcePoolSpecCpuSharesLevel with value set to v.
func NewOptResourcePoolSpecCpuSharesLevel(v ResourcePoolSpecCpuSharesLevel) OptResourcePoolSpecCpuSharesLevel {
	return OptResourcePoolSpecCpuSharesLevel{
		Value: v,
		Set:   true,
	}
}

// OptResourcePoolSpecCpuSharesLevel is optional ResourcePoolSpecCpuSharesLevel.
type OptResourcePoolSpecCpuSharesLevel struct {
	Value ResourcePoolSpecCpuSharesLevel
	Set   bool
}

// IsSet returns true if OptResourcePoolSpecCpuSharesLevel was set.
func (o OptResourcePoolSpecCpuSharesLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResourcePoolSpecCpuSharesLevel) Reset() {
	var v ResourcePoolSpecCpuSharesLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResourcePoolSpecCpuSharesLevel) SetTo(v ResourcePoolSpecCpuSharesLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResourcePoolSpecCpuSharesLevel) Get() (v ResourcePoolSpecCpuSharesLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResourcePoolSpecCpuSharesLevel) Or(d ResourcePoolSpecCpuSharesLevel) ResourcePoolSpecCpuSharesLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResourcePoolSpecMemorySharesLevel returns new OptResourcePoolSpecMemorySharesLevel with value set to v.
func NewOptResourcePoolSpecMemorySharesLevel(v ResourcePoolSpecMemorySharesLevel) OptResourcePoolSpecMemorySharesLevel {
	return OptResourcePoolSpecMemorySharesLevel{
		Value: v,
		Set:   true,
	}
}

// OptResourcePoolSpecMemorySharesLevel is optional ResourcePoolSpecMemorySharesLevel.
type OptResourcePoolSpecMemorySharesLevel struct {
	Value ResourcePoolSpecMemorySharesLevel
	Set   bool
}

// IsSet returns true if OptResourcePoolSpecMemorySharesLevel was set.
func (o OptResourcePoolSpecMemorySharesLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResourcePoolSpecMemorySharesLevel) Reset() {
	var v ResourcePoolSpecMemorySharesLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResourcePoolSpecMemorySharesLevel) SetTo(v ResourcePoolSpecMemorySharesLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResourcePoolSpecMemorySharesLevel) Get() (v ResourcePoolSpecMemorySharesLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResourcePoolSpecMemorySharesLevel) Or(d ResourcePoolSpecMemorySharesLevel) ResourcePoolSpecMemorySharesLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResourcePoolSpecType returns new OptResourcePoolSpecType with value set to v.
func NewOptResourcePoolSpecType(v ResourcePoolSpecType) OptResourcePoolSpecType {
	return OptResourcePoolSpecType{
		Value: v,
		Set:   true,
	}
}

// OptResourcePoolSpecType is optional ResourcePoolSpecType.
type OptResourcePoolSpecType struct {
	Value ResourcePoolSpecType
	Set   bool
}

// IsSet returns true if OptResourcePoolSpecType was set.
func (o OptResourcePoolSpecType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResourcePoolSpecType) Reset() {
	var v ResourcePoolSpecType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResourcePoolSpecType) SetTo(v ResourcePoolSpecType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResourcePoolSpecType) Get() (v ResourcePoolSpecType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResourcePoolSpecType) Or(d ResourcePoolSpecType) ResourcePoolSpecType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResourceWarningContext returns new OptResourceWarningContext with value set to v.
func NewOptResourceWarningContext(v ResourceWarningContext) OptResourceWarningContext {
	return OptResourceWarningContext{
		Value: v,
		Set:   true,
	}
}

// OptResourceWarningContext is optional ResourceWarningContext.
type OptResourceWarningContext struct {
	Value ResourceWarningContext
	Set   bool
}

// IsSet returns true if OptResourceWarningContext was set.
func (o OptResourceWarningContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResourceWarningContext) Reset() {
	var v ResourceWarningContext
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResourceWarningContext) SetTo(v ResourceWarningContext) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResourceWarningContext) Get() (v ResourceWarningContext, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResourceWarningContext) Or(d ResourceWarningContext) ResourceWarningContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResourceWarningCreationSpecContext returns new OptResourceWarningCreationSpecContext with value set to v.
func NewOptResourceWarningCreationSpecContext(v ResourceWarningCreationSpecContext) OptResourceWarningCreationSpecContext {
	return OptResourceWarningCreationSpecContext{
		Value: v,
		Set:   true,
	}
}

// OptResourceWarningCreationSpecContext is optional ResourceWarningCreationSpecContext.
type OptResourceWarningCreationSpecContext struct {
	Value ResourceWarningCreationSpecContext
	Set   bool
}

// IsSet returns true if OptResourceWarningCreationSpecContext was set.
func (o OptResourceWarningCreationSpecContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResourceWarningCreationSpecContext) Reset() {
	var v ResourceWarningCreationSpecContext
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResourceWarningCreationSpecContext) SetTo(v ResourceWarningCreationSpecContext) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResourceWarningCreationSpecContext) Get() (v ResourceWarningCreationSpecContext, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResourceWarningCreationSpecContext) Or(d ResourceWarningCreationSpecContext) ResourceWarningCreationSpecContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSddcClusterSpec returns new OptSddcClusterSpec with value set to v.
func NewOptSddcClusterSpec(v SddcClusterSpec) OptSddcClusterSpec {
	return OptSddcClusterSpec{
		Value: v,
		Set:   true,
	}
}

// OptSddcClusterSpec is optional SddcClusterSpec.
type OptSddcClusterSpec struct {
	Value SddcClusterSpec
	Set   bool
}

// IsSet returns true if OptSddcClusterSpec was set.
func (o OptSddcClusterSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSddcClusterSpec) Reset() {
	var v SddcClusterSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSddcClusterSpec) SetTo(v SddcClusterSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSddcClusterSpec) Get() (v SddcClusterSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSddcClusterSpec) Or(d SddcClusterSpec) SddcClusterSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSddcClusterSpecVmFolders returns new OptSddcClusterSpecVmFolders with value set to v.
func NewOptSddcClusterSpecVmFolders(v SddcClusterSpecVmFolders) OptSddcClusterSpecVmFolders {
	return OptSddcClusterSpecVmFolders{
		Value: v,
		Set:   true,
	}
}

// OptSddcClusterSpecVmFolders is optional SddcClusterSpecVmFolders.
type OptSddcClusterSpecVmFolders struct {
	Value SddcClusterSpecVmFolders
	Set   bool
}

// IsSet returns true if OptSddcClusterSpecVmFolders was set.
func (o OptSddcClusterSpecVmFolders) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSddcClusterSpecVmFolders) Reset() {
	var v SddcClusterSpecVmFolders
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSddcClusterSpecVmFolders) SetTo(v SddcClusterSpecVmFolders) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSddcClusterSpecVmFolders) Get() (v SddcClusterSpecVmFolders, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSddcClusterSpecVmFolders) Or(d SddcClusterSpecVmFolders) SddcClusterSpecVmFolders {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSddcCredentials returns new OptSddcCredentials with value set to v.
func NewOptSddcCredentials(v SddcCredentials) OptSddcCredentials {
	return OptSddcCredentials{
		Value: v,
		Set:   true,
	}
}

// OptSddcCredentials is optional SddcCredentials.
type OptSddcCredentials struct {
	Value SddcCredentials
	Set   bool
}

// IsSet returns true if OptSddcCredentials was set.
func (o OptSddcCredentials) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSddcCredentials) Reset() {
	var v SddcCredentials
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSddcCredentials) SetTo(v SddcCredentials) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSddcCredentials) Get() (v SddcCredentials, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSddcCredentials) Or(d SddcCredentials) SddcCredentials {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSddcManagerSpec returns new OptSddcManagerSpec with value set to v.
func NewOptSddcManagerSpec(v SddcManagerSpec) OptSddcManagerSpec {
	return OptSddcManagerSpec{
		Value: v,
		Set:   true,
	}
}

// OptSddcManagerSpec is optional SddcManagerSpec.
type OptSddcManagerSpec struct {
	Value SddcManagerSpec
	Set   bool
}

// IsSet returns true if OptSddcManagerSpec was set.
func (o OptSddcManagerSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSddcManagerSpec) Reset() {
	var v SddcManagerSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSddcManagerSpec) SetTo(v SddcManagerSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSddcManagerSpec) Get() (v SddcManagerSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSddcManagerSpec) Or(d SddcManagerSpec) SddcManagerSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSddcNsxtSpec returns new OptSddcNsxtSpec with value set to v.
func NewOptSddcNsxtSpec(v SddcNsxtSpec) OptSddcNsxtSpec {
	return OptSddcNsxtSpec{
		Value: v,
		Set:   true,
	}
}

// OptSddcNsxtSpec is optional SddcNsxtSpec.
type OptSddcNsxtSpec struct {
	Value SddcNsxtSpec
	Set   bool
}

// IsSet returns true if OptSddcNsxtSpec was set.
func (o OptSddcNsxtSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSddcNsxtSpec) Reset() {
	var v SddcNsxtSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSddcNsxtSpec) SetTo(v SddcNsxtSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSddcNsxtSpec) Get() (v SddcNsxtSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSddcNsxtSpec) Or(d SddcNsxtSpec) SddcNsxtSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSddcSpec returns new OptSddcSpec with value set to v.
func NewOptSddcSpec(v SddcSpec) OptSddcSpec {
	return OptSddcSpec{
		Value: v,
		Set:   true,
	}
}

// OptSddcSpec is optional SddcSpec.
type OptSddcSpec struct {
	Value SddcSpec
	Set   bool
}

// IsSet returns true if OptSddcSpec was set.
func (o OptSddcSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSddcSpec) Reset() {
	var v SddcSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSddcSpec) SetTo(v SddcSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSddcSpec) Get() (v SddcSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSddcSpec) Or(d SddcSpec) SddcSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSecuritySpec returns new OptSecuritySpec with value set to v.
func NewOptSecuritySpec(v SecuritySpec) OptSecuritySpec {
	return OptSecuritySpec{
		Value: v,
		Set:   true,
	}
}

// OptSecuritySpec is optional SecuritySpec.
type OptSecuritySpec struct {
	Value SecuritySpec
	Set   bool
}

// IsSet returns true if OptSecuritySpec was set.
func (o OptSecuritySpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSecuritySpec) Reset() {
	var v SecuritySpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSecuritySpec) SetTo(v SecuritySpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSecuritySpec) Get() (v SecuritySpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSecuritySpec) Or(d SecuritySpec) SecuritySpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSharesInfo returns new OptSharesInfo with value set to v.
func NewOptSharesInfo(v SharesInfo) OptSharesInfo {
	return OptSharesInfo{
		Value: v,
		Set:   true,
	}
}

// OptSharesInfo is optional SharesInfo.
type OptSharesInfo struct {
	Value SharesInfo
	Set   bool
}

// IsSet returns true if OptSharesInfo was set.
func (o OptSharesInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSharesInfo) Reset() {
	var v SharesInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSharesInfo) SetTo(v SharesInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSharesInfo) Get() (v SharesInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSharesInfo) Or(d SharesInfo) SharesInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSmartNicInfo returns new OptSmartNicInfo with value set to v.
func NewOptSmartNicInfo(v SmartNicInfo) OptSmartNicInfo {
	return OptSmartNicInfo{
		Value: v,
		Set:   true,
	}
}

// OptSmartNicInfo is optional SmartNicInfo.
type OptSmartNicInfo struct {
	Value SmartNicInfo
	Set   bool
}

// IsSet returns true if OptSmartNicInfo was set.
func (o OptSmartNicInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSmartNicInfo) Reset() {
	var v SmartNicInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSmartNicInfo) SetTo(v SmartNicInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSmartNicInfo) Get() (v SmartNicInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSmartNicInfo) Or(d SmartNicInfo) SmartNicInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSoftwareInfo returns new OptSoftwareInfo with value set to v.
func NewOptSoftwareInfo(v SoftwareInfo) OptSoftwareInfo {
	return OptSoftwareInfo{
		Value: v,
		Set:   true,
	}
}

// OptSoftwareInfo is optional SoftwareInfo.
type OptSoftwareInfo struct {
	Value SoftwareInfo
	Set   bool
}

// IsSet returns true if OptSoftwareInfo was set.
func (o OptSoftwareInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSoftwareInfo) Reset() {
	var v SoftwareInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSoftwareInfo) SetTo(v SoftwareInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSoftwareInfo) Get() (v SoftwareInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSoftwareInfo) Or(d SoftwareInfo) SoftwareInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSoftwareInfoComponents returns new OptSoftwareInfoComponents with value set to v.
func NewOptSoftwareInfoComponents(v SoftwareInfoComponents) OptSoftwareInfoComponents {
	return OptSoftwareInfoComponents{
		Value: v,
		Set:   true,
	}
}

// OptSoftwareInfoComponents is optional SoftwareInfoComponents.
type OptSoftwareInfoComponents struct {
	Value SoftwareInfoComponents
	Set   bool
}

// IsSet returns true if OptSoftwareInfoComponents was set.
func (o OptSoftwareInfoComponents) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSoftwareInfoComponents) Reset() {
	var v SoftwareInfoComponents
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSoftwareInfoComponents) SetTo(v SoftwareInfoComponents) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSoftwareInfoComponents) Get() (v SoftwareInfoComponents, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSoftwareInfoComponents) Or(d SoftwareInfoComponents) SoftwareInfoComponents {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSourceDetails returns new OptSourceDetails with value set to v.
func NewOptSourceDetails(v SourceDetails) OptSourceDetails {
	return OptSourceDetails{
		Value: v,
		Set:   true,
	}
}

// OptSourceDetails is optional SourceDetails.
type OptSourceDetails struct {
	Value SourceDetails
	Set   bool
}

// IsSet returns true if OptSourceDetails was set.
func (o OptSourceDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSourceDetails) Reset() {
	var v SourceDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSourceDetails) SetTo(v SourceDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSourceDetails) Get() (v SourceDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSourceDetails) Or(d SourceDetails) SourceDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSsoDomainSpec returns new OptSsoDomainSpec with value set to v.
func NewOptSsoDomainSpec(v SsoDomainSpec) OptSsoDomainSpec {
	return OptSsoDomainSpec{
		Value: v,
		Set:   true,
	}
}

// OptSsoDomainSpec is optional SsoDomainSpec.
type OptSsoDomainSpec struct {
	Value SsoDomainSpec
	Set   bool
}

// IsSet returns true if OptSsoDomainSpec was set.
func (o OptSsoDomainSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSsoDomainSpec) Reset() {
	var v SsoDomainSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSsoDomainSpec) SetTo(v SsoDomainSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSsoDomainSpec) Get() (v SsoDomainSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSsoDomainSpec) Or(d SsoDomainSpec) SsoDomainSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStartBringupSpecConversionDesign returns new OptStartBringupSpecConversionDesign with value set to v.
func NewOptStartBringupSpecConversionDesign(v StartBringupSpecConversionDesign) OptStartBringupSpecConversionDesign {
	return OptStartBringupSpecConversionDesign{
		Value: v,
		Set:   true,
	}
}

// OptStartBringupSpecConversionDesign is optional StartBringupSpecConversionDesign.
type OptStartBringupSpecConversionDesign struct {
	Value StartBringupSpecConversionDesign
	Set   bool
}

// IsSet returns true if OptStartBringupSpecConversionDesign was set.
func (o OptStartBringupSpecConversionDesign) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStartBringupSpecConversionDesign) Reset() {
	var v StartBringupSpecConversionDesign
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStartBringupSpecConversionDesign) SetTo(v StartBringupSpecConversionDesign) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStartBringupSpecConversionDesign) Get() (v StartBringupSpecConversionDesign, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStartBringupSpecConversionDesign) Or(d StartBringupSpecConversionDesign) StartBringupSpecConversionDesign {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStartBringupSpecConversionReq returns new OptStartBringupSpecConversionReq with value set to v.
func NewOptStartBringupSpecConversionReq(v StartBringupSpecConversionReq) OptStartBringupSpecConversionReq {
	return OptStartBringupSpecConversionReq{
		Value: v,
		Set:   true,
	}
}

// OptStartBringupSpecConversionReq is optional StartBringupSpecConversionReq.
type OptStartBringupSpecConversionReq struct {
	Value StartBringupSpecConversionReq
	Set   bool
}

// IsSet returns true if OptStartBringupSpecConversionReq was set.
func (o OptStartBringupSpecConversionReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStartBringupSpecConversionReq) Reset() {
	var v StartBringupSpecConversionReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStartBringupSpecConversionReq) SetTo(v StartBringupSpecConversionReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStartBringupSpecConversionReq) Get() (v StartBringupSpecConversionReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStartBringupSpecConversionReq) Or(d StartBringupSpecConversionReq) StartBringupSpecConversionReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStorage returns new OptStorage with value set to v.
func NewOptStorage(v Storage) OptStorage {
	return OptStorage{
		Value: v,
		Set:   true,
	}
}

// OptStorage is optional Storage.
type OptStorage struct {
	Value Storage
	Set   bool
}

// IsSet returns true if OptStorage was set.
func (o OptStorage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStorage) Reset() {
	var v Storage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStorage) SetTo(v Storage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStorage) Get() (v Storage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStorage) Or(d Storage) Storage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStorageInfo returns new OptStorageInfo with value set to v.
func NewOptStorageInfo(v StorageInfo) OptStorageInfo {
	return OptStorageInfo{
		Value: v,
		Set:   true,
	}
}

// OptStorageInfo is optional StorageInfo.
type OptStorageInfo struct {
	Value StorageInfo
	Set   bool
}

// IsSet returns true if OptStorageInfo was set.
func (o OptStorageInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStorageInfo) Reset() {
	var v StorageInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStorageInfo) SetTo(v StorageInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStorageInfo) Get() (v StorageInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStorageInfo) Or(d StorageInfo) StorageInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSupportBundleConfig returns new OptSupportBundleConfig with value set to v.
func NewOptSupportBundleConfig(v SupportBundleConfig) OptSupportBundleConfig {
	return OptSupportBundleConfig{
		Value: v,
		Set:   true,
	}
}

// OptSupportBundleConfig is optional SupportBundleConfig.
type OptSupportBundleConfig struct {
	Value SupportBundleConfig
	Set   bool
}

// IsSet returns true if OptSupportBundleConfig was set.
func (o OptSupportBundleConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSupportBundleConfig) Reset() {
	var v SupportBundleConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSupportBundleConfig) SetTo(v SupportBundleConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSupportBundleConfig) Get() (v SupportBundleConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSupportBundleConfig) Or(d SupportBundleConfig) SupportBundleConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSupportBundleIncludeItems returns new OptSupportBundleIncludeItems with value set to v.
func NewOptSupportBundleIncludeItems(v SupportBundleIncludeItems) OptSupportBundleIncludeItems {
	return OptSupportBundleIncludeItems{
		Value: v,
		Set:   true,
	}
}

// OptSupportBundleIncludeItems is optional SupportBundleIncludeItems.
type OptSupportBundleIncludeItems struct {
	Value SupportBundleIncludeItems
	Set   bool
}

// IsSet returns true if OptSupportBundleIncludeItems was set.
func (o OptSupportBundleIncludeItems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSupportBundleIncludeItems) Reset() {
	var v SupportBundleIncludeItems
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSupportBundleIncludeItems) SetTo(v SupportBundleIncludeItems) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSupportBundleIncludeItems) Get() (v SupportBundleIncludeItems, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSupportBundleIncludeItems) Or(d SupportBundleIncludeItems) SupportBundleIncludeItems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSupportBundleOption returns new OptSupportBundleOption with value set to v.
func NewOptSupportBundleOption(v SupportBundleOption) OptSupportBundleOption {
	return OptSupportBundleOption{
		Value: v,
		Set:   true,
	}
}

// OptSupportBundleOption is optional SupportBundleOption.
type OptSupportBundleOption struct {
	Value SupportBundleOption
	Set   bool
}

// IsSet returns true if OptSupportBundleOption was set.
func (o OptSupportBundleOption) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSupportBundleOption) Reset() {
	var v SupportBundleOption
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSupportBundleOption) SetTo(v SupportBundleOption) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSupportBundleOption) Get() (v SupportBundleOption, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSupportBundleOption) Or(d SupportBundleOption) SupportBundleOption {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSupportBundleScope returns new OptSupportBundleScope with value set to v.
func NewOptSupportBundleScope(v SupportBundleScope) OptSupportBundleScope {
	return OptSupportBundleScope{
		Value: v,
		Set:   true,
	}
}

// OptSupportBundleScope is optional SupportBundleScope.
type OptSupportBundleScope struct {
	Value SupportBundleScope
	Set   bool
}

// IsSet returns true if OptSupportBundleScope was set.
func (o OptSupportBundleScope) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSupportBundleScope) Reset() {
	var v SupportBundleScope
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSupportBundleScope) SetTo(v SupportBundleScope) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSupportBundleScope) Get() (v SupportBundleScope, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSupportBundleScope) Or(d SupportBundleScope) SupportBundleScope {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSyncClientTokenInfo returns new OptSyncClientTokenInfo with value set to v.
func NewOptSyncClientTokenInfo(v SyncClientTokenInfo) OptSyncClientTokenInfo {
	return OptSyncClientTokenInfo{
		Value: v,
		Set:   true,
	}
}

// OptSyncClientTokenInfo is optional SyncClientTokenInfo.
type OptSyncClientTokenInfo struct {
	Value SyncClientTokenInfo
	Set   bool
}

// IsSet returns true if OptSyncClientTokenInfo was set.
func (o OptSyncClientTokenInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSyncClientTokenInfo) Reset() {
	var v SyncClientTokenInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSyncClientTokenInfo) SetTo(v SyncClientTokenInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSyncClientTokenInfo) Get() (v SyncClientTokenInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSyncClientTokenInfo) Or(d SyncClientTokenInfo) SyncClientTokenInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTaggedResource returns new OptTaggedResource with value set to v.
func NewOptTaggedResource(v TaggedResource) OptTaggedResource {
	return OptTaggedResource{
		Value: v,
		Set:   true,
	}
}

// OptTaggedResource is optional TaggedResource.
type OptTaggedResource struct {
	Value TaggedResource
	Set   bool
}

// IsSet returns true if OptTaggedResource was set.
func (o OptTaggedResource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTaggedResource) Reset() {
	var v TaggedResource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTaggedResource) SetTo(v TaggedResource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTaggedResource) Get() (v TaggedResource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTaggedResource) Or(d TaggedResource) TaggedResource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUnmanagedResourceCredential returns new OptUnmanagedResourceCredential with value set to v.
func NewOptUnmanagedResourceCredential(v UnmanagedResourceCredential) OptUnmanagedResourceCredential {
	return OptUnmanagedResourceCredential{
		Value: v,
		Set:   true,
	}
}

// OptUnmanagedResourceCredential is optional UnmanagedResourceCredential.
type OptUnmanagedResourceCredential struct {
	Value UnmanagedResourceCredential
	Set   bool
}

// IsSet returns true if OptUnmanagedResourceCredential was set.
func (o OptUnmanagedResourceCredential) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUnmanagedResourceCredential) Reset() {
	var v UnmanagedResourceCredential
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUnmanagedResourceCredential) SetTo(v UnmanagedResourceCredential) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUnmanagedResourceCredential) Get() (v UnmanagedResourceCredential, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUnmanagedResourceCredential) Or(d UnmanagedResourceCredential) UnmanagedResourceCredential {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpgradeStatus returns new OptUpgradeStatus with value set to v.
func NewOptUpgradeStatus(v UpgradeStatus) OptUpgradeStatus {
	return OptUpgradeStatus{
		Value: v,
		Set:   true,
	}
}

// OptUpgradeStatus is optional UpgradeStatus.
type OptUpgradeStatus struct {
	Value UpgradeStatus
	Set   bool
}

// IsSet returns true if OptUpgradeStatus was set.
func (o OptUpgradeStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpgradeStatus) Reset() {
	var v UpgradeStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpgradeStatus) SetTo(v UpgradeStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpgradeStatus) Get() (v UpgradeStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpgradeStatus) Or(d UpgradeStatus) UpgradeStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUplinkProfileSupportedTeamingPolicies returns new OptUplinkProfileSupportedTeamingPolicies with value set to v.
func NewOptUplinkProfileSupportedTeamingPolicies(v UplinkProfileSupportedTeamingPolicies) OptUplinkProfileSupportedTeamingPolicies {
	return OptUplinkProfileSupportedTeamingPolicies{
		Value: v,
		Set:   true,
	}
}

// OptUplinkProfileSupportedTeamingPolicies is optional UplinkProfileSupportedTeamingPolicies.
type OptUplinkProfileSupportedTeamingPolicies struct {
	Value UplinkProfileSupportedTeamingPolicies
	Set   bool
}

// IsSet returns true if OptUplinkProfileSupportedTeamingPolicies was set.
func (o OptUplinkProfileSupportedTeamingPolicies) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUplinkProfileSupportedTeamingPolicies) Reset() {
	var v UplinkProfileSupportedTeamingPolicies
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUplinkProfileSupportedTeamingPolicies) SetTo(v UplinkProfileSupportedTeamingPolicies) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUplinkProfileSupportedTeamingPolicies) Get() (v UplinkProfileSupportedTeamingPolicies, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUplinkProfileSupportedTeamingPolicies) Or(d UplinkProfileSupportedTeamingPolicies) UplinkProfileSupportedTeamingPolicies {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUploadCertificatesReq returns new OptUploadCertificatesReq with value set to v.
func NewOptUploadCertificatesReq(v UploadCertificatesReq) OptUploadCertificatesReq {
	return OptUploadCertificatesReq{
		Value: v,
		Set:   true,
	}
}

// OptUploadCertificatesReq is optional UploadCertificatesReq.
type OptUploadCertificatesReq struct {
	Value UploadCertificatesReq
	Set   bool
}

// IsSet returns true if OptUploadCertificatesReq was set.
func (o OptUploadCertificatesReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUploadCertificatesReq) Reset() {
	var v UploadCertificatesReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUploadCertificatesReq) SetTo(v UploadCertificatesReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUploadCertificatesReq) Get() (v UploadCertificatesReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUploadCertificatesReq) Or(d UploadCertificatesReq) UploadCertificatesReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUploadCustomIsoReq returns new OptUploadCustomIsoReq with value set to v.
func NewOptUploadCustomIsoReq(v UploadCustomIsoReq) OptUploadCustomIsoReq {
	return OptUploadCustomIsoReq{
		Value: v,
		Set:   true,
	}
}

// OptUploadCustomIsoReq is optional UploadCustomIsoReq.
type OptUploadCustomIsoReq struct {
	Value UploadCustomIsoReq
	Set   bool
}

// IsSet returns true if OptUploadCustomIsoReq was set.
func (o OptUploadCustomIsoReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUploadCustomIsoReq) Reset() {
	var v UploadCustomIsoReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUploadCustomIsoReq) SetTo(v UploadCustomIsoReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUploadCustomIsoReq) Get() (v UploadCustomIsoReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUploadCustomIsoReq) Or(d UploadCustomIsoReq) UploadCustomIsoReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUploadPersonalityFilesReq returns new OptUploadPersonalityFilesReq with value set to v.
func NewOptUploadPersonalityFilesReq(v UploadPersonalityFilesReq) OptUploadPersonalityFilesReq {
	return OptUploadPersonalityFilesReq{
		Value: v,
		Set:   true,
	}
}

// OptUploadPersonalityFilesReq is optional UploadPersonalityFilesReq.
type OptUploadPersonalityFilesReq struct {
	Value UploadPersonalityFilesReq
	Set   bool
}

// IsSet returns true if OptUploadPersonalityFilesReq was set.
func (o OptUploadPersonalityFilesReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUploadPersonalityFilesReq) Reset() {
	var v UploadPersonalityFilesReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUploadPersonalityFilesReq) SetTo(v UploadPersonalityFilesReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUploadPersonalityFilesReq) Get() (v UploadPersonalityFilesReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUploadPersonalityFilesReq) Or(d UploadPersonalityFilesReq) UploadPersonalityFilesReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidateBringupSpecName returns new OptValidateBringupSpecName with value set to v.
func NewOptValidateBringupSpecName(v ValidateBringupSpecName) OptValidateBringupSpecName {
	return OptValidateBringupSpecName{
		Value: v,
		Set:   true,
	}
}

// OptValidateBringupSpecName is optional ValidateBringupSpecName.
type OptValidateBringupSpecName struct {
	Value ValidateBringupSpecName
	Set   bool
}

// IsSet returns true if OptValidateBringupSpecName was set.
func (o OptValidateBringupSpecName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidateBringupSpecName) Reset() {
	var v ValidateBringupSpecName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidateBringupSpecName) SetTo(v ValidateBringupSpecName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidateBringupSpecName) Get() (v ValidateBringupSpecName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidateBringupSpecName) Or(d ValidateBringupSpecName) ValidateBringupSpecName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidationAdditionalProperties returns new OptValidationAdditionalProperties with value set to v.
func NewOptValidationAdditionalProperties(v ValidationAdditionalProperties) OptValidationAdditionalProperties {
	return OptValidationAdditionalProperties{
		Value: v,
		Set:   true,
	}
}

// OptValidationAdditionalProperties is optional ValidationAdditionalProperties.
type OptValidationAdditionalProperties struct {
	Value ValidationAdditionalProperties
	Set   bool
}

// IsSet returns true if OptValidationAdditionalProperties was set.
func (o OptValidationAdditionalProperties) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidationAdditionalProperties) Reset() {
	var v ValidationAdditionalProperties
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidationAdditionalProperties) SetTo(v ValidationAdditionalProperties) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidationAdditionalProperties) Get() (v ValidationAdditionalProperties, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidationAdditionalProperties) Or(d ValidationAdditionalProperties) ValidationAdditionalProperties {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVcenterReference returns new OptVcenterReference with value set to v.
func NewOptVcenterReference(v VcenterReference) OptVcenterReference {
	return OptVcenterReference{
		Value: v,
		Set:   true,
	}
}

// OptVcenterReference is optional VcenterReference.
type OptVcenterReference struct {
	Value VcenterReference
	Set   bool
}

// IsSet returns true if OptVcenterReference was set.
func (o OptVcenterReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVcenterReference) Reset() {
	var v VcenterReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVcenterReference) SetTo(v VcenterReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVcenterReference) Get() (v VcenterReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVcenterReference) Or(d VcenterReference) VcenterReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVmfsDatastoreSpec returns new OptVmfsDatastoreSpec with value set to v.
func NewOptVmfsDatastoreSpec(v VmfsDatastoreSpec) OptVmfsDatastoreSpec {
	return OptVmfsDatastoreSpec{
		Value: v,
		Set:   true,
	}
}

// OptVmfsDatastoreSpec is optional VmfsDatastoreSpec.
type OptVmfsDatastoreSpec struct {
	Value VmfsDatastoreSpec
	Set   bool
}

// IsSet returns true if OptVmfsDatastoreSpec was set.
func (o OptVmfsDatastoreSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVmfsDatastoreSpec) Reset() {
	var v VmfsDatastoreSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVmfsDatastoreSpec) SetTo(v VmfsDatastoreSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVmfsDatastoreSpec) Get() (v VmfsDatastoreSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVmfsDatastoreSpec) Or(d VmfsDatastoreSpec) VmfsDatastoreSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVrealizeProductNodeType returns new OptVrealizeProductNodeType with value set to v.
func NewOptVrealizeProductNodeType(v VrealizeProductNodeType) OptVrealizeProductNodeType {
	return OptVrealizeProductNodeType{
		Value: v,
		Set:   true,
	}
}

// OptVrealizeProductNodeType is optional VrealizeProductNodeType.
type OptVrealizeProductNodeType struct {
	Value VrealizeProductNodeType
	Set   bool
}

// IsSet returns true if OptVrealizeProductNodeType was set.
func (o OptVrealizeProductNodeType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVrealizeProductNodeType) Reset() {
	var v VrealizeProductNodeType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVrealizeProductNodeType) SetTo(v VrealizeProductNodeType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVrealizeProductNodeType) Get() (v VrealizeProductNodeType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVrealizeProductNodeType) Or(d VrealizeProductNodeType) VrealizeProductNodeType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVropsNodeType returns new OptVropsNodeType with value set to v.
func NewOptVropsNodeType(v VropsNodeType) OptVropsNodeType {
	return OptVropsNodeType{
		Value: v,
		Set:   true,
	}
}

// OptVropsNodeType is optional VropsNodeType.
type OptVropsNodeType struct {
	Value VropsNodeType
	Set   bool
}

// IsSet returns true if OptVropsNodeType was set.
func (o OptVropsNodeType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVropsNodeType) Reset() {
	var v VropsNodeType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVropsNodeType) SetTo(v VropsNodeType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVropsNodeType) Get() (v VropsNodeType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVropsNodeType) Or(d VropsNodeType) VropsNodeType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVsanDatastoreSpec returns new OptVsanDatastoreSpec with value set to v.
func NewOptVsanDatastoreSpec(v VsanDatastoreSpec) OptVsanDatastoreSpec {
	return OptVsanDatastoreSpec{
		Value: v,
		Set:   true,
	}
}

// OptVsanDatastoreSpec is optional VsanDatastoreSpec.
type OptVsanDatastoreSpec struct {
	Value VsanDatastoreSpec
	Set   bool
}

// IsSet returns true if OptVsanDatastoreSpec was set.
func (o OptVsanDatastoreSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVsanDatastoreSpec) Reset() {
	var v VsanDatastoreSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVsanDatastoreSpec) SetTo(v VsanDatastoreSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVsanDatastoreSpec) Get() (v VsanDatastoreSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVsanDatastoreSpec) Or(d VsanDatastoreSpec) VsanDatastoreSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVsanEsaConfig returns new OptVsanEsaConfig with value set to v.
func NewOptVsanEsaConfig(v VsanEsaConfig) OptVsanEsaConfig {
	return OptVsanEsaConfig{
		Value: v,
		Set:   true,
	}
}

// OptVsanEsaConfig is optional VsanEsaConfig.
type OptVsanEsaConfig struct {
	Value VsanEsaConfig
	Set   bool
}

// IsSet returns true if OptVsanEsaConfig was set.
func (o OptVsanEsaConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVsanEsaConfig) Reset() {
	var v VsanEsaConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVsanEsaConfig) SetTo(v VsanEsaConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVsanEsaConfig) Get() (v VsanEsaConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVsanEsaConfig) Or(d VsanEsaConfig) VsanEsaConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVsanMaxConfig returns new OptVsanMaxConfig with value set to v.
func NewOptVsanMaxConfig(v VsanMaxConfig) OptVsanMaxConfig {
	return OptVsanMaxConfig{
		Value: v,
		Set:   true,
	}
}

// OptVsanMaxConfig is optional VsanMaxConfig.
type OptVsanMaxConfig struct {
	Value VsanMaxConfig
	Set   bool
}

// IsSet returns true if OptVsanMaxConfig was set.
func (o OptVsanMaxConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVsanMaxConfig) Reset() {
	var v VsanMaxConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVsanMaxConfig) SetTo(v VsanMaxConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVsanMaxConfig) Get() (v VsanMaxConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVsanMaxConfig) Or(d VsanMaxConfig) VsanMaxConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVsanRemoteDatastoreClusterSpec returns new OptVsanRemoteDatastoreClusterSpec with value set to v.
func NewOptVsanRemoteDatastoreClusterSpec(v VsanRemoteDatastoreClusterSpec) OptVsanRemoteDatastoreClusterSpec {
	return OptVsanRemoteDatastoreClusterSpec{
		Value: v,
		Set:   true,
	}
}

// OptVsanRemoteDatastoreClusterSpec is optional VsanRemoteDatastoreClusterSpec.
type OptVsanRemoteDatastoreClusterSpec struct {
	Value VsanRemoteDatastoreClusterSpec
	Set   bool
}

// IsSet returns true if OptVsanRemoteDatastoreClusterSpec was set.
func (o OptVsanRemoteDatastoreClusterSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVsanRemoteDatastoreClusterSpec) Reset() {
	var v VsanRemoteDatastoreClusterSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVsanRemoteDatastoreClusterSpec) SetTo(v VsanRemoteDatastoreClusterSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVsanRemoteDatastoreClusterSpec) Get() (v VsanRemoteDatastoreClusterSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVsanRemoteDatastoreClusterSpec) Or(d VsanRemoteDatastoreClusterSpec) VsanRemoteDatastoreClusterSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVsanSpec returns new OptVsanSpec with value set to v.
func NewOptVsanSpec(v VsanSpec) OptVsanSpec {
	return OptVsanSpec{
		Value: v,
		Set:   true,
	}
}

// OptVsanSpec is optional VsanSpec.
type OptVsanSpec struct {
	Value VsanSpec
	Set   bool
}

// IsSet returns true if OptVsanSpec was set.
func (o OptVsanSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVsanSpec) Reset() {
	var v VsanSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVsanSpec) SetTo(v VsanSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVsanSpec) Get() (v VsanSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVsanSpec) Or(d VsanSpec) VsanSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVxManagerSpec returns new OptVxManagerSpec with value set to v.
func NewOptVxManagerSpec(v VxManagerSpec) OptVxManagerSpec {
	return OptVxManagerSpec{
		Value: v,
		Set:   true,
	}
}

// OptVxManagerSpec is optional VxManagerSpec.
type OptVxManagerSpec struct {
	Value VxManagerSpec
	Set   bool
}

// IsSet returns true if OptVxManagerSpec was set.
func (o OptVxManagerSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVxManagerSpec) Reset() {
	var v VxManagerSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVxManagerSpec) SetTo(v VxManagerSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVxManagerSpec) Get() (v VxManagerSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVxManagerSpec) Or(d VxManagerSpec) VxManagerSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVxRailArrayAssociationContext returns new OptVxRailArrayAssociationContext with value set to v.
func NewOptVxRailArrayAssociationContext(v VxRailArrayAssociationContext) OptVxRailArrayAssociationContext {
	return OptVxRailArrayAssociationContext{
		Value: v,
		Set:   true,
	}
}

// OptVxRailArrayAssociationContext is optional VxRailArrayAssociationContext.
type OptVxRailArrayAssociationContext struct {
	Value VxRailArrayAssociationContext
	Set   bool
}

// IsSet returns true if OptVxRailArrayAssociationContext was set.
func (o OptVxRailArrayAssociationContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVxRailArrayAssociationContext) Reset() {
	var v VxRailArrayAssociationContext
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVxRailArrayAssociationContext) SetTo(v VxRailArrayAssociationContext) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVxRailArrayAssociationContext) Get() (v VxRailArrayAssociationContext, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVxRailArrayAssociationContext) Or(d VxRailArrayAssociationContext) VxRailArrayAssociationContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVxRailArrayAssociationContextArrayAttributeIdsKeyValue returns new OptVxRailArrayAssociationContextArrayAttributeIdsKeyValue with value set to v.
func NewOptVxRailArrayAssociationContextArrayAttributeIdsKeyValue(v VxRailArrayAssociationContextArrayAttributeIdsKeyValue) OptVxRailArrayAssociationContextArrayAttributeIdsKeyValue {
	return OptVxRailArrayAssociationContextArrayAttributeIdsKeyValue{
		Value: v,
		Set:   true,
	}
}

// OptVxRailArrayAssociationContextArrayAttributeIdsKeyValue is optional VxRailArrayAssociationContextArrayAttributeIdsKeyValue.
type OptVxRailArrayAssociationContextArrayAttributeIdsKeyValue struct {
	Value VxRailArrayAssociationContextArrayAttributeIdsKeyValue
	Set   bool
}

// IsSet returns true if OptVxRailArrayAssociationContextArrayAttributeIdsKeyValue was set.
func (o OptVxRailArrayAssociationContextArrayAttributeIdsKeyValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVxRailArrayAssociationContextArrayAttributeIdsKeyValue) Reset() {
	var v VxRailArrayAssociationContextArrayAttributeIdsKeyValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVxRailArrayAssociationContextArrayAttributeIdsKeyValue) SetTo(v VxRailArrayAssociationContextArrayAttributeIdsKeyValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVxRailArrayAssociationContextArrayAttributeIdsKeyValue) Get() (v VxRailArrayAssociationContextArrayAttributeIdsKeyValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVxRailArrayAssociationContextArrayAttributeIdsKeyValue) Or(d VxRailArrayAssociationContextArrayAttributeIdsKeyValue) VxRailArrayAssociationContextArrayAttributeIdsKeyValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVxRailContextDatatype returns new OptVxRailContextDatatype with value set to v.
func NewOptVxRailContextDatatype(v VxRailContextDatatype) OptVxRailContextDatatype {
	return OptVxRailContextDatatype{
		Value: v,
		Set:   true,
	}
}

// OptVxRailContextDatatype is optional VxRailContextDatatype.
type OptVxRailContextDatatype struct {
	Value VxRailContextDatatype
	Set   bool
}

// IsSet returns true if OptVxRailContextDatatype was set.
func (o OptVxRailContextDatatype) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVxRailContextDatatype) Reset() {
	var v VxRailContextDatatype
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVxRailContextDatatype) SetTo(v VxRailContextDatatype) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVxRailContextDatatype) Get() (v VxRailContextDatatype, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVxRailContextDatatype) Or(d VxRailContextDatatype) VxRailContextDatatype {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVxRailDetails returns new OptVxRailDetails with value set to v.
func NewOptVxRailDetails(v VxRailDetails) OptVxRailDetails {
	return OptVxRailDetails{
		Value: v,
		Set:   true,
	}
}

// OptVxRailDetails is optional VxRailDetails.
type OptVxRailDetails struct {
	Value VxRailDetails
	Set   bool
}

// IsSet returns true if OptVxRailDetails was set.
func (o OptVxRailDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVxRailDetails) Reset() {
	var v VxRailDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVxRailDetails) SetTo(v VxRailDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVxRailDetails) Get() (v VxRailDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVxRailDetails) Or(d VxRailDetails) VxRailDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVxRailDetailsArrayContextWithKeyValuePair returns new OptVxRailDetailsArrayContextWithKeyValuePair with value set to v.
func NewOptVxRailDetailsArrayContextWithKeyValuePair(v VxRailDetailsArrayContextWithKeyValuePair) OptVxRailDetailsArrayContextWithKeyValuePair {
	return OptVxRailDetailsArrayContextWithKeyValuePair{
		Value: v,
		Set:   true,
	}
}

// OptVxRailDetailsArrayContextWithKeyValuePair is optional VxRailDetailsArrayContextWithKeyValuePair.
type OptVxRailDetailsArrayContextWithKeyValuePair struct {
	Value VxRailDetailsArrayContextWithKeyValuePair
	Set   bool
}

// IsSet returns true if OptVxRailDetailsArrayContextWithKeyValuePair was set.
func (o OptVxRailDetailsArrayContextWithKeyValuePair) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVxRailDetailsArrayContextWithKeyValuePair) Reset() {
	var v VxRailDetailsArrayContextWithKeyValuePair
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVxRailDetailsArrayContextWithKeyValuePair) SetTo(v VxRailDetailsArrayContextWithKeyValuePair) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVxRailDetailsArrayContextWithKeyValuePair) Get() (v VxRailDetailsArrayContextWithKeyValuePair, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVxRailDetailsArrayContextWithKeyValuePair) Or(d VxRailDetailsArrayContextWithKeyValuePair) VxRailDetailsArrayContextWithKeyValuePair {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVxRailDetailsContextWithKeyValuePair returns new OptVxRailDetailsContextWithKeyValuePair with value set to v.
func NewOptVxRailDetailsContextWithKeyValuePair(v VxRailDetailsContextWithKeyValuePair) OptVxRailDetailsContextWithKeyValuePair {
	return OptVxRailDetailsContextWithKeyValuePair{
		Value: v,
		Set:   true,
	}
}

// OptVxRailDetailsContextWithKeyValuePair is optional VxRailDetailsContextWithKeyValuePair.
type OptVxRailDetailsContextWithKeyValuePair struct {
	Value VxRailDetailsContextWithKeyValuePair
	Set   bool
}

// IsSet returns true if OptVxRailDetailsContextWithKeyValuePair was set.
func (o OptVxRailDetailsContextWithKeyValuePair) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVxRailDetailsContextWithKeyValuePair) Reset() {
	var v VxRailDetailsContextWithKeyValuePair
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVxRailDetailsContextWithKeyValuePair) SetTo(v VxRailDetailsContextWithKeyValuePair) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVxRailDetailsContextWithKeyValuePair) Get() (v VxRailDetailsContextWithKeyValuePair, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVxRailDetailsContextWithKeyValuePair) Or(d VxRailDetailsContextWithKeyValuePair) VxRailDetailsContextWithKeyValuePair {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWitnessSpec returns new OptWitnessSpec with value set to v.
func NewOptWitnessSpec(v WitnessSpec) OptWitnessSpec {
	return OptWitnessSpec{
		Value: v,
		Set:   true,
	}
}

// OptWitnessSpec is optional WitnessSpec.
type OptWitnessSpec struct {
	Value WitnessSpec
	Set   bool
}

// IsSet returns true if OptWitnessSpec was set.
func (o OptWitnessSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWitnessSpec) Reset() {
	var v WitnessSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWitnessSpec) SetTo(v WitnessSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWitnessSpec) Get() (v WitnessSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWitnessSpec) Or(d WitnessSpec) WitnessSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Hardware Support Package Specification.
// Ref: #/components/schemas/Package
type Package struct {
	// Package name.
	Name string `json:"name"`
	// Package version.
	Version string `json:"version"`
}

// GetName returns the value of Name.
func (s *Package) GetName() string {
	return s.Name
}

// GetVersion returns the value of Version.
func (s *Package) GetVersion() string {
	return s.Version
}

// SetName sets the value of Name.
func (s *Package) SetName(val string) {
	s.Name = val
}

// SetVersion sets the value of Version.
func (s *Package) SetVersion(val string) {
	s.Version = val
}

// Hardware Support Package Specification.
// Ref: #/components/schemas/PackageSpec
type PackageSpec struct {
	// Package name.
	Name string `json:"name"`
	// Package version.
	Version string `json:"version"`
}

// GetName returns the value of Name.
func (s *PackageSpec) GetName() string {
	return s.Name
}

// GetVersion returns the value of Version.
func (s *PackageSpec) GetVersion() string {
	return s.Version
}

// SetName sets the value of Name.
func (s *PackageSpec) SetName(val string) {
	s.Name = val
}

// SetVersion sets the value of Version.
func (s *PackageSpec) SetVersion(val string) {
	s.Version = val
}

// Represents a page of elements of a single type.
// Ref: #/components/schemas/Page
type Page struct {
	// The list of elements included in this page.
	Elements     []TrustedCertificate `json:"elements"`
	PageMetadata OptPageMetadata      `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *Page) GetElements() []TrustedCertificate {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *Page) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *Page) SetElements(val []TrustedCertificate) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *Page) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*Page) getEdgeClusterQueryCriteriaRes() {}

// Represents a page of elements of a single type.
// Ref: #/components/schemas/PageCluster
type PageCluster struct {
	// The list of elements included in this page.
	Elements     []Cluster       `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageCluster) GetElements() []Cluster {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageCluster) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageCluster) SetElements(val []Cluster) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageCluster) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Represents a page of elements of a single type.
// Ref: #/components/schemas/PageClusterNetworkConfiguration
type PageClusterNetworkConfiguration struct {
	// The list of elements included in this page.
	Elements     []ClusterNetworkConfiguration `json:"elements"`
	PageMetadata OptPageMetadata               `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageClusterNetworkConfiguration) GetElements() []ClusterNetworkConfiguration {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageClusterNetworkConfiguration) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageClusterNetworkConfiguration) SetElements(val []ClusterNetworkConfiguration) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageClusterNetworkConfiguration) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Represents a page of elements of a single type.
// Ref: #/components/schemas/PageDatastore
type PageDatastore struct {
	// The list of elements included in this page.
	Elements     []Datastore     `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageDatastore) GetElements() []Datastore {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageDatastore) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageDatastore) SetElements(val []Datastore) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageDatastore) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Represents a page of elements of a single type.
// Ref: #/components/schemas/PageHost
type PageHost struct {
	// The list of elements included in this page.
	Elements     []Host          `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageHost) GetElements() []Host {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageHost) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageHost) SetElements(val []Host) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageHost) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Represents pageable elements pagination metadata.
// Ref: #/components/schemas/PageMetadata
type PageMetadata struct {
	// Returns the current page number.
	PageNumber OptInt32 `json:"pageNumber"`
	// Returns the number of elements in the current page.
	PageSize OptInt32 `json:"pageSize"`
	// Returns the total number of elements.
	TotalElements OptInt32 `json:"totalElements"`
	// Returns the total number of pages.
	TotalPages OptInt32 `json:"totalPages"`
}

// GetPageNumber returns the value of PageNumber.
func (s *PageMetadata) GetPageNumber() OptInt32 {
	return s.PageNumber
}

// GetPageSize returns the value of PageSize.
func (s *PageMetadata) GetPageSize() OptInt32 {
	return s.PageSize
}

// GetTotalElements returns the value of TotalElements.
func (s *PageMetadata) GetTotalElements() OptInt32 {
	return s.TotalElements
}

// GetTotalPages returns the value of TotalPages.
func (s *PageMetadata) GetTotalPages() OptInt32 {
	return s.TotalPages
}

// SetPageNumber sets the value of PageNumber.
func (s *PageMetadata) SetPageNumber(val OptInt32) {
	s.PageNumber = val
}

// SetPageSize sets the value of PageSize.
func (s *PageMetadata) SetPageSize(val OptInt32) {
	s.PageSize = val
}

// SetTotalElements sets the value of TotalElements.
func (s *PageMetadata) SetTotalElements(val OptInt32) {
	s.TotalElements = val
}

// SetTotalPages sets the value of TotalPages.
func (s *PageMetadata) SetTotalPages(val OptInt32) {
	s.TotalPages = val
}

// Represents a page of elements of a single type.
// Ref: #/components/schemas/PageNsxTCluster
type PageNsxTCluster struct {
	// The list of elements included in this page.
	Elements     []NsxTCluster   `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageNsxTCluster) GetElements() []NsxTCluster {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageNsxTCluster) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageNsxTCluster) SetElements(val []NsxTCluster) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageNsxTCluster) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Ref: #/components/schemas/PageOfBundle
type PageOfBundle struct {
	// The list of elements included in this page.
	Elements     []Bundle        `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfBundle) GetElements() []Bundle {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfBundle) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfBundle) SetElements(val []Bundle) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfBundle) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfBundle) getBundlesForSkipUpgradeRes() {}
func (*PageOfBundle) getBundlesRes()               {}

// Ref: #/components/schemas/PageOfCertificate
type PageOfCertificate struct {
	// The list of elements included in this page.
	Elements     []Certificate   `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfCertificate) GetElements() []Certificate {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfCertificate) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfCertificate) SetElements(val []Certificate) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfCertificate) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfCertificate) getCertificatesByDomainRes()               {}
func (*PageOfCertificate) getDomainCertificatesRes()                 {}
func (*PageOfCertificate) getResourceCertificatesValidationByIDRes() {}

// Ref: #/components/schemas/PageOfCertificateAuthority
type PageOfCertificateAuthority struct {
	// The list of elements included in this page.
	Elements     []CertificateAuthority `json:"elements"`
	PageMetadata OptPageMetadata        `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfCertificateAuthority) GetElements() []CertificateAuthority {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfCertificateAuthority) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfCertificateAuthority) SetElements(val []CertificateAuthority) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfCertificateAuthority) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfCertificateAuthority) getCertificateAuthoritiesRes() {}

// Ref: #/components/schemas/PageOfCluster
type PageOfCluster struct {
	// The list of elements included in this page.
	Elements     []Cluster       `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfCluster) GetElements() []Cluster {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfCluster) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfCluster) SetElements(val []Cluster) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfCluster) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfCluster) getClustersRes() {}

// Ref: #/components/schemas/PageOfClusterCriterion
type PageOfClusterCriterion struct {
	// The list of elements included in this page.
	Elements     []ClusterCriterion `json:"elements"`
	PageMetadata OptPageMetadata    `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfClusterCriterion) GetElements() []ClusterCriterion {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfClusterCriterion) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfClusterCriterion) SetElements(val []ClusterCriterion) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfClusterCriterion) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Ref: #/components/schemas/PageOfCompatibilityMatrix
type PageOfCompatibilityMatrix struct {
	// The list of elements included in this page.
	Elements     []CompatibilityMatrix `json:"elements"`
	PageMetadata OptPageMetadata       `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfCompatibilityMatrix) GetElements() []CompatibilityMatrix {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfCompatibilityMatrix) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfCompatibilityMatrix) SetElements(val []CompatibilityMatrix) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfCompatibilityMatrix) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfCompatibilityMatrix) getCompatibilityMatricesRes() {}

// Ref: #/components/schemas/PageOfComplianceAudit
type PageOfComplianceAudit struct {
	// The list of elements included in this page.
	Elements     []ComplianceAudit `json:"elements"`
	PageMetadata OptPageMetadata   `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfComplianceAudit) GetElements() []ComplianceAudit {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfComplianceAudit) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfComplianceAudit) SetElements(val []ComplianceAudit) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfComplianceAudit) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfComplianceAudit) getComplianceAuditHistoryForADomainRes() {}
func (*PageOfComplianceAudit) getComplianceAuditHistoryRes()           {}

// Ref: #/components/schemas/PageOfComplianceAuditItem
type PageOfComplianceAuditItem struct {
	// The list of elements included in this page.
	Elements     []ComplianceAuditItem `json:"elements"`
	PageMetadata OptPageMetadata       `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfComplianceAuditItem) GetElements() []ComplianceAuditItem {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfComplianceAuditItem) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfComplianceAuditItem) SetElements(val []ComplianceAuditItem) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfComplianceAuditItem) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfComplianceAuditItem) getComplianceAuditItemsForADomainRes() {}
func (*PageOfComplianceAuditItem) getComplianceAuditItemsRes()           {}

// Ref: #/components/schemas/PageOfComplianceConfiguration
type PageOfComplianceConfiguration struct {
	// The list of elements included in this page.
	Elements     []ComplianceConfiguration `json:"elements"`
	PageMetadata OptPageMetadata           `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfComplianceConfiguration) GetElements() []ComplianceConfiguration {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfComplianceConfiguration) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfComplianceConfiguration) SetElements(val []ComplianceConfiguration) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfComplianceConfiguration) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfComplianceConfiguration) getComplianceConfigurationsRes() {}

// Ref: #/components/schemas/PageOfComplianceStandard
type PageOfComplianceStandard struct {
	// The list of elements included in this page.
	Elements     []ComplianceStandard `json:"elements"`
	PageMetadata OptPageMetadata      `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfComplianceStandard) GetElements() []ComplianceStandard {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfComplianceStandard) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfComplianceStandard) SetElements(val []ComplianceStandard) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfComplianceStandard) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfComplianceStandard) getComplianceStandardsRes() {}

// Ref: #/components/schemas/PageOfConfigDriftSpec
type PageOfConfigDriftSpec struct {
	// The list of elements included in this page.
	Elements     []ConfigDriftSpec `json:"elements"`
	PageMetadata OptPageMetadata   `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfConfigDriftSpec) GetElements() []ConfigDriftSpec {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfConfigDriftSpec) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfConfigDriftSpec) SetElements(val []ConfigDriftSpec) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfConfigDriftSpec) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfConfigDriftSpec) getConfigsRes() {}

// Ref: #/components/schemas/PageOfCredential
type PageOfCredential struct {
	// The list of elements included in this page.
	Elements     []Credential    `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfCredential) GetElements() []Credential {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfCredential) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfCredential) SetElements(val []Credential) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfCredential) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfCredential) getCredentialsRes() {}

// Ref: #/components/schemas/PageOfCredentialsTask
type PageOfCredentialsTask struct {
	// The list of elements included in this page.
	Elements     []CredentialsTask `json:"elements"`
	PageMetadata OptPageMetadata   `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfCredentialsTask) GetElements() []CredentialsTask {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfCredentialsTask) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfCredentialsTask) SetElements(val []CredentialsTask) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfCredentialsTask) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfCredentialsTask) getCredentialsTasksRes() {}

// Ref: #/components/schemas/PageOfCsr
type PageOfCsr struct {
	// The list of elements included in this page.
	Elements     []Csr           `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfCsr) GetElements() []Csr {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfCsr) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfCsr) SetElements(val []Csr) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfCsr) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfCsr) getCSRsRes() {}

// Ref: #/components/schemas/PageOfCustomIso
type PageOfCustomIso struct {
	// The list of elements included in this page.
	Elements     []CustomIso     `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfCustomIso) GetElements() []CustomIso {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfCustomIso) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfCustomIso) SetElements(val []CustomIso) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfCustomIso) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfCustomIso) getCustomIsosRes() {}

// Ref: #/components/schemas/PageOfDatastoreCriterion
type PageOfDatastoreCriterion struct {
	// The list of elements included in this page.
	Elements     []DatastoreCriterion `json:"elements"`
	PageMetadata OptPageMetadata      `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfDatastoreCriterion) GetElements() []DatastoreCriterion {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfDatastoreCriterion) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfDatastoreCriterion) SetElements(val []DatastoreCriterion) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfDatastoreCriterion) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Ref: #/components/schemas/PageOfDomain
type PageOfDomain struct {
	// The list of elements included in this page.
	Elements     []Domain        `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfDomain) GetElements() []Domain {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfDomain) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfDomain) SetElements(val []Domain) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfDomain) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfDomain) getDomainsRes() {}

// Ref: #/components/schemas/PageOfDomainFutureRelease
type PageOfDomainFutureRelease struct {
	// The list of elements included in this page.
	Elements     []DomainFutureRelease `json:"elements"`
	PageMetadata OptPageMetadata       `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfDomainFutureRelease) GetElements() []DomainFutureRelease {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfDomainFutureRelease) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfDomainFutureRelease) SetElements(val []DomainFutureRelease) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfDomainFutureRelease) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfDomainFutureRelease) getFutureReleasesRes() {}

// Ref: #/components/schemas/PageOfDomainIntegration
type PageOfDomainIntegration struct {
	// The list of elements included in this page.
	Elements     []DomainIntegration `json:"elements"`
	PageMetadata OptPageMetadata     `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfDomainIntegration) GetElements() []DomainIntegration {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfDomainIntegration) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfDomainIntegration) SetElements(val []DomainIntegration) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfDomainIntegration) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Ref: #/components/schemas/PageOfDomainReleaseView
type PageOfDomainReleaseView struct {
	// The list of elements included in this page.
	Elements     []DomainReleaseView `json:"elements"`
	PageMetadata OptPageMetadata     `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfDomainReleaseView) GetElements() []DomainReleaseView {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfDomainReleaseView) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfDomainReleaseView) SetElements(val []DomainReleaseView) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfDomainReleaseView) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfDomainReleaseView) getReleaseByDomainsRes() {}

// Ref: #/components/schemas/PageOfEdgeCluster
type PageOfEdgeCluster struct {
	// The list of elements included in this page.
	Elements     []EdgeCluster   `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfEdgeCluster) GetElements() []EdgeCluster {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfEdgeCluster) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfEdgeCluster) SetElements(val []EdgeCluster) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfEdgeCluster) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfEdgeCluster) getEdgeClustersRes() {}

// Ref: #/components/schemas/PageOfEdgeClusterNsxtEntityCriterion
type PageOfEdgeClusterNsxtEntityCriterion struct {
	// The list of elements included in this page.
	Elements     []EdgeClusterNsxtEntityCriterion `json:"elements"`
	PageMetadata OptPageMetadata                  `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfEdgeClusterNsxtEntityCriterion) GetElements() []EdgeClusterNsxtEntityCriterion {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfEdgeClusterNsxtEntityCriterion) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfEdgeClusterNsxtEntityCriterion) SetElements(val []EdgeClusterNsxtEntityCriterion) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfEdgeClusterNsxtEntityCriterion) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfEdgeClusterNsxtEntityCriterion) getEdgeClusterQueryCriteriaRes() {}

// Ref: #/components/schemas/PageOfEndpoint
type PageOfEndpoint struct {
	// The list of elements included in this page.
	Elements     []Endpoint      `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfEndpoint) GetElements() []Endpoint {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfEndpoint) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfEndpoint) SetElements(val []Endpoint) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfEndpoint) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfEndpoint) getDomainEndpointsRes() {}

// Ref: #/components/schemas/PageOfHealthSummary
type PageOfHealthSummary struct {
	// The list of elements included in this page.
	Elements     []HealthSummary `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfHealthSummary) GetElements() []HealthSummary {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfHealthSummary) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfHealthSummary) SetElements(val []HealthSummary) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfHealthSummary) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfHealthSummary) getHealthCheckTaskRes() {}

// Ref: #/components/schemas/PageOfHost
type PageOfHost struct {
	// The list of elements included in this page.
	Elements     []Host          `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfHost) GetElements() []Host {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfHost) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfHost) SetElements(val []Host) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfHost) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfHost) getHostsRes() {}

// Ref: #/components/schemas/PageOfHostCriterion
type PageOfHostCriterion struct {
	// The list of elements included in this page.
	Elements     []HostCriterion `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfHostCriterion) GetElements() []HostCriterion {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfHostCriterion) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfHostCriterion) SetElements(val []HostCriterion) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfHostCriterion) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Ref: #/components/schemas/PageOfIdentityProvider
type PageOfIdentityProvider struct {
	// The list of elements included in this page.
	Elements     []IdentityProvider `json:"elements"`
	PageMetadata OptPageMetadata    `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfIdentityProvider) GetElements() []IdentityProvider {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfIdentityProvider) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfIdentityProvider) SetElements(val []IdentityProvider) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfIdentityProvider) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfIdentityProvider) getIdentityProvidersRes() {}

// Ref: #/components/schemas/PageOfLicenseKey
type PageOfLicenseKey struct {
	// The list of elements included in this page.
	Elements     []LicenseKey    `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfLicenseKey) GetElements() []LicenseKey {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfLicenseKey) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfLicenseKey) SetElements(val []LicenseKey) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfLicenseKey) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfLicenseKey) getLicenseKeysRes() {}

// Ref: #/components/schemas/PageOfNetwork
type PageOfNetwork struct {
	// The list of elements included in this page.
	Elements     []Network       `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfNetwork) GetElements() []Network {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfNetwork) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfNetwork) SetElements(val []Network) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfNetwork) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfNetwork) getNetworksOfNetworkPoolRes() {}

// Ref: #/components/schemas/PageOfNetworkPool
type PageOfNetworkPool struct {
	// The list of elements included in this page.
	Elements     []NetworkPool   `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfNetworkPool) GetElements() []NetworkPool {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfNetworkPool) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfNetworkPool) SetElements(val []NetworkPool) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfNetworkPool) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfNetworkPool) getNetworkPoolRes() {}

// Ref: #/components/schemas/PageOfNsxALBCluster
type PageOfNsxALBCluster struct {
	// The list of elements included in this page.
	Elements     []NsxALBCluster `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfNsxALBCluster) GetElements() []NsxALBCluster {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfNsxALBCluster) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfNsxALBCluster) SetElements(val []NsxALBCluster) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfNsxALBCluster) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfNsxALBCluster) getALBClustersRes() {}

// Ref: #/components/schemas/PageOfNsxTCluster
type PageOfNsxTCluster struct {
	// The list of elements included in this page.
	Elements     []NsxTCluster   `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfNsxTCluster) GetElements() []NsxTCluster {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfNsxTCluster) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfNsxTCluster) SetElements(val []NsxTCluster) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfNsxTCluster) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfNsxTCluster) getNsxClustersRes() {}

// Ref: #/components/schemas/PageOfNsxTCriterion
type PageOfNsxTCriterion struct {
	// The list of elements included in this page.
	Elements     []NsxTCriterion `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfNsxTCriterion) GetElements() []NsxTCriterion {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfNsxTCriterion) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfNsxTCriterion) SetElements(val []NsxTCriterion) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfNsxTCriterion) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Ref: #/components/schemas/PageOfNsxtIpAddressPool
type PageOfNsxtIpAddressPool struct {
	// The list of elements included in this page.
	Elements     []NsxtIpAddressPool `json:"elements"`
	PageMetadata OptPageMetadata     `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfNsxtIpAddressPool) GetElements() []NsxtIpAddressPool {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfNsxtIpAddressPool) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfNsxtIpAddressPool) SetElements(val []NsxtIpAddressPool) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfNsxtIpAddressPool) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfNsxtIpAddressPool) getNsxIpAddressPoolsRes() {}

// Ref: #/components/schemas/PageOfNsxtTransportZoneInfo
type PageOfNsxtTransportZoneInfo struct {
	// The list of elements included in this page.
	Elements     []NsxtTransportZoneInfo `json:"elements"`
	PageMetadata OptPageMetadata         `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfNsxtTransportZoneInfo) GetElements() []NsxtTransportZoneInfo {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfNsxtTransportZoneInfo) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfNsxtTransportZoneInfo) SetElements(val []NsxtTransportZoneInfo) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfNsxtTransportZoneInfo) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfNsxtTransportZoneInfo) getNsxTransportZonesRes() {}

// Ref: #/components/schemas/PageOfPersonality
type PageOfPersonality struct {
	// The list of elements included in this page.
	Elements     []Personality   `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfPersonality) GetElements() []Personality {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfPersonality) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfPersonality) SetElements(val []Personality) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfPersonality) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfPersonality) getPersonalitiesRes() {}

// Ref: #/components/schemas/PageOfPsc
type PageOfPsc struct {
	// The list of elements included in this page.
	Elements     []Psc           `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfPsc) GetElements() []Psc {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfPsc) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfPsc) SetElements(val []Psc) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfPsc) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfPsc) getPscsRes() {}

// Ref: #/components/schemas/PageOfRelease
type PageOfRelease struct {
	// The list of elements included in this page.
	Elements     []Release       `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfRelease) GetElements() []Release {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfRelease) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfRelease) SetElements(val []Release) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfRelease) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfRelease) getReleasesRes() {}

// Ref: #/components/schemas/PageOfResourceFunctionalities
type PageOfResourceFunctionalities struct {
	// The list of elements included in this page.
	Elements     []ResourceFunctionalities `json:"elements"`
	PageMetadata OptPageMetadata           `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfResourceFunctionalities) GetElements() []ResourceFunctionalities {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfResourceFunctionalities) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfResourceFunctionalities) SetElements(val []ResourceFunctionalities) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfResourceFunctionalities) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfResourceFunctionalities) getResourceFunctionalitiesRes() {}

// Ref: #/components/schemas/PageOfResourceWarning
type PageOfResourceWarning struct {
	// The list of elements included in this page.
	Elements     []ResourceWarning `json:"elements"`
	PageMetadata OptPageMetadata   `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfResourceWarning) GetElements() []ResourceWarning {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfResourceWarning) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfResourceWarning) SetElements(val []ResourceWarning) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfResourceWarning) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfResourceWarning) getResourceWarningsRes() {}

// Ref: #/components/schemas/PageOfRole
type PageOfRole struct {
	// The list of elements included in this page.
	Elements     []Role          `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfRole) GetElements() []Role {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfRole) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfRole) SetElements(val []Role) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfRole) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfRole) getRolesRes() {}

// Ref: #/components/schemas/PageOfSddcManager
type PageOfSddcManager struct {
	// The list of elements included in this page.
	Elements     []SddcManager   `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfSddcManager) GetElements() []SddcManager {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfSddcManager) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfSddcManager) SetElements(val []SddcManager) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfSddcManager) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfSddcManager) getSddcManagersRes() {}

// Ref: #/components/schemas/PageOfSddcTask
type PageOfSddcTask struct {
	// The list of elements included in this page.
	Elements     []SddcTask      `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfSddcTask) GetElements() []SddcTask {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfSddcTask) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfSddcTask) SetElements(val []SddcTask) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfSddcTask) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfSddcTask) getBringupTasksRes() {}

// Ref: #/components/schemas/PageOfSsoDomainEntity
type PageOfSsoDomainEntity struct {
	// The list of elements included in this page.
	Elements     []SsoDomainEntity `json:"elements"`
	PageMetadata OptPageMetadata   `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfSsoDomainEntity) GetElements() []SsoDomainEntity {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfSsoDomainEntity) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfSsoDomainEntity) SetElements(val []SsoDomainEntity) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfSsoDomainEntity) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfSsoDomainEntity) getSSODomainEntitiesRes() {}

// Ref: #/components/schemas/PageOfString
type PageOfString struct {
	// The list of elements included in this page.
	Elements     []string        `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfString) GetElements() []string {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfString) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfString) SetElements(val []string) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfString) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfString) getSSODomainsRes() {}

// Ref: #/components/schemas/PageOfSupportBundle
type PageOfSupportBundle struct {
	// The list of elements included in this page.
	Elements     []SupportBundle `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfSupportBundle) GetElements() []SupportBundle {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfSupportBundle) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfSupportBundle) SetElements(val []SupportBundle) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfSupportBundle) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfSupportBundle) getSupportBundleTaskRes() {}

// Ref: #/components/schemas/PageOfTag
type PageOfTag struct {
	// The list of elements included in this page.
	Elements     []Tag           `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfTag) GetElements() []Tag {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfTag) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfTag) SetElements(val []Tag) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfTag) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfTag) getAssignableTagForHostRes()    {}
func (*PageOfTag) getAssignableTagsForDomainRes() {}
func (*PageOfTag) getTagAssignableForClusterRes() {}
func (*PageOfTag) getTagsAssignedToClusterRes()   {}
func (*PageOfTag) getTagsAssignedToDomainRes()    {}
func (*PageOfTag) getTagsAssignedToHostRes()      {}

// Ref: #/components/schemas/PageOfTagsForResource
type PageOfTagsForResource struct {
	// The list of elements included in this page.
	Elements     []TagsForResource `json:"elements"`
	PageMetadata OptPageMetadata   `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfTagsForResource) GetElements() []TagsForResource {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfTagsForResource) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfTagsForResource) SetElements(val []TagsForResource) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfTagsForResource) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfTagsForResource) getTagsAssignedToClustersRes() {}
func (*PageOfTagsForResource) getTagsAssignedToDomainsRes()  {}
func (*PageOfTagsForResource) getTagsAssignedToHostsRes()    {}

// Ref: #/components/schemas/PageOfTask
type PageOfTask struct {
	// The list of elements included in this page.
	Elements     []Task          `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfTask) GetElements() []Task {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfTask) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfTask) SetElements(val []Task) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfTask) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfTask) getTasksRes() {}

// Ref: #/components/schemas/PageOfTrustedCertificate
type PageOfTrustedCertificate struct {
	// The list of elements included in this page.
	Elements     []TrustedCertificate `json:"elements"`
	PageMetadata OptPageMetadata      `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfTrustedCertificate) GetElements() []TrustedCertificate {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfTrustedCertificate) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfTrustedCertificate) SetElements(val []TrustedCertificate) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfTrustedCertificate) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfTrustedCertificate) getTrustedCertificatesRes() {}

// Ref: #/components/schemas/PageOfUpgradable
type PageOfUpgradable struct {
	// The list of elements included in this page.
	Elements     []Upgradable    `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfUpgradable) GetElements() []Upgradable {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfUpgradable) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfUpgradable) SetElements(val []Upgradable) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfUpgradable) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfUpgradable) getUpgradablesByDomainRes() {}
func (*PageOfUpgradable) getUpgradablesRes()         {}

// Represents a page of elements of a Upgradables Cluster Resource.
// Ref: #/components/schemas/PageOfUpgradablesClusterResource
type PageOfUpgradablesClusterResource struct {
	// The list of Upgradables Cluster Resource elements included in this page.
	Elements []UpgradablesClusterResource `json:"elements"`
}

// GetElements returns the value of Elements.
func (s *PageOfUpgradablesClusterResource) GetElements() []UpgradablesClusterResource {
	return s.Elements
}

// SetElements sets the value of Elements.
func (s *PageOfUpgradablesClusterResource) SetElements(val []UpgradablesClusterResource) {
	s.Elements = val
}

func (*PageOfUpgradablesClusterResource) getUpgradablesClustersRes() {}

// Ref: #/components/schemas/PageOfUpgrade
type PageOfUpgrade struct {
	// The list of elements included in this page.
	Elements     []Upgrade       `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfUpgrade) GetElements() []Upgrade {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfUpgrade) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfUpgrade) SetElements(val []Upgrade) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfUpgrade) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfUpgrade) getUpgradesRes() {}

// Ref: #/components/schemas/PageOfUser
type PageOfUser struct {
	// The list of elements included in this page.
	Elements     []User          `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfUser) GetElements() []User {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfUser) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfUser) SetElements(val []User) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfUser) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfUser) addUsersRes()   {}
func (*PageOfUser) getUiUsersRes() {}
func (*PageOfUser) getUsersRes()   {}

// Ref: #/components/schemas/PageOfValidation
type PageOfValidation struct {
	// The list of elements included in this page.
	Elements     []Validation    `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfValidation) GetElements() []Validation {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfValidation) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfValidation) SetElements(val []Validation) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfValidation) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfValidation) getBringupValidationsRes() {}

// Ref: #/components/schemas/PageOfVasaProvider
type PageOfVasaProvider struct {
	// The list of elements included in this page.
	Elements     []VasaProvider  `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfVasaProvider) GetElements() []VasaProvider {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfVasaProvider) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfVasaProvider) SetElements(val []VasaProvider) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfVasaProvider) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfVasaProvider) getVasaProvidersRes() {}

// Ref: #/components/schemas/PageOfVcenter
type PageOfVcenter struct {
	// The list of elements included in this page.
	Elements     []Vcenter       `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfVcenter) GetElements() []Vcenter {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfVcenter) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfVcenter) SetElements(val []Vcenter) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfVcenter) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfVcenter) getVcentersRes() {}

// Ref: #/components/schemas/PageOfVcfService
type PageOfVcfService struct {
	// The list of elements included in this page.
	Elements     []VcfService    `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfVcfService) GetElements() []VcfService {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfVcfService) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfVcfService) SetElements(val []VcfService) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfVcfService) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfVcfService) getVcfServicesRes() {}

// Ref: #/components/schemas/PageOfVersionAliasesForBundleComponentType
type PageOfVersionAliasesForBundleComponentType struct {
	// The list of elements included in this page.
	Elements     []VersionAliasesForBundleComponentType `json:"elements"`
	PageMetadata OptPageMetadata                        `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfVersionAliasesForBundleComponentType) GetElements() []VersionAliasesForBundleComponentType {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfVersionAliasesForBundleComponentType) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfVersionAliasesForBundleComponentType) SetElements(val []VersionAliasesForBundleComponentType) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfVersionAliasesForBundleComponentType) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

func (*PageOfVersionAliasesForBundleComponentType) getVersionAliasConfigurationRes()     {}
func (*PageOfVersionAliasesForBundleComponentType) updateVersionAliasConfigurationRes()  {}
func (*PageOfVersionAliasesForBundleComponentType) updateVersionAliasConfigurationsRes() {}

// Ref: #/components/schemas/PageOfVra
type PageOfVra struct {
	// The list of elements included in this page.
	Elements     []Vra           `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfVra) GetElements() []Vra {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfVra) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfVra) SetElements(val []Vra) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfVra) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Ref: #/components/schemas/PageOfVrli
type PageOfVrli struct {
	// The list of elements included in this page.
	Elements     []Vrli          `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfVrli) GetElements() []Vrli {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfVrli) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfVrli) SetElements(val []Vrli) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfVrli) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Ref: #/components/schemas/PageOfVrops
type PageOfVrops struct {
	// The list of elements included in this page.
	Elements     []Vrops         `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfVrops) GetElements() []Vrops {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfVrops) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfVrops) SetElements(val []Vrops) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfVrops) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Ref: #/components/schemas/PageOfVrslcm
type PageOfVrslcm struct {
	// The list of elements included in this page.
	Elements     []Vrslcm        `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfVrslcm) GetElements() []Vrslcm {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfVrslcm) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfVrslcm) SetElements(val []Vrslcm) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfVrslcm) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Ref: #/components/schemas/PageOfWsa
type PageOfWsa struct {
	// The list of elements included in this page.
	Elements     []Wsa           `json:"elements"`
	PageMetadata OptPageMetadata `json:"pageMetadata"`
}

// GetElements returns the value of Elements.
func (s *PageOfWsa) GetElements() []Wsa {
	return s.Elements
}

// GetPageMetadata returns the value of PageMetadata.
func (s *PageOfWsa) GetPageMetadata() OptPageMetadata {
	return s.PageMetadata
}

// SetElements sets the value of Elements.
func (s *PageOfWsa) SetElements(val []Wsa) {
	s.Elements = val
}

// SetPageMetadata sets the value of PageMetadata.
func (s *PageOfWsa) SetPageMetadata(val OptPageMetadata) {
	s.PageMetadata = val
}

// Specification for partner extensions. This specification is used in the Bundle Upload API.
// Ref: #/components/schemas/PartnerExtensionSpec
type PartnerExtensionSpec struct {
	// Version of partner bundle to be uploaded. Should match one of the bundle versions available in the
	// partner bundle metadata file.
	PartnerBundleVersion OptString `json:"partnerBundleVersion"`
	// Path to the bundle metadata file. The metadata file can have details of multiple bundles.
	PartnerBundleMetadataFilePath OptString `json:"partnerBundleMetadataFilePath"`
}

// GetPartnerBundleVersion returns the value of PartnerBundleVersion.
func (s *PartnerExtensionSpec) GetPartnerBundleVersion() OptString {
	return s.PartnerBundleVersion
}

// GetPartnerBundleMetadataFilePath returns the value of PartnerBundleMetadataFilePath.
func (s *PartnerExtensionSpec) GetPartnerBundleMetadataFilePath() OptString {
	return s.PartnerBundleMetadataFilePath
}

// SetPartnerBundleVersion sets the value of PartnerBundleVersion.
func (s *PartnerExtensionSpec) SetPartnerBundleVersion(val OptString) {
	s.PartnerBundleVersion = val
}

// SetPartnerBundleMetadataFilePath sets the value of PartnerBundleMetadataFilePath.
func (s *PartnerExtensionSpec) SetPartnerBundleMetadataFilePath(val OptString) {
	s.PartnerBundleMetadataFilePath = val
}

// Patch rest model that is located in the Product Version Catalog, these models are consumed by
// LCM's Flex BOM workflows.
// Ref: #/components/schemas/Patch
type Patch struct {
	// Product version of the patch bundle.
	ProductVersion string   `json:"productVersion"`
	Artifacts      Artifact `json:"artifacts"`
}

// GetProductVersion returns the value of ProductVersion.
func (s *Patch) GetProductVersion() string {
	return s.ProductVersion
}

// GetArtifacts returns the value of Artifacts.
func (s *Patch) GetArtifacts() Artifact {
	return s.Artifacts
}

// SetProductVersion sets the value of ProductVersion.
func (s *Patch) SetProductVersion(val string) {
	s.ProductVersion = val
}

// SetArtifacts sets the value of Artifacts.
func (s *Patch) SetArtifacts(val Artifact) {
	s.Artifacts = val
}

// Model for patch bundle in a release.
// Ref: #/components/schemas/PatchBundle
type PatchBundle struct {
	// Bundle ID of the patch bundle.
	BundleId string `json:"bundleId"`
	// Bundle type of the patch bundle.
	BundleType string `json:"bundleType"`
	// Bundle elements of the patch bundle.
	BundleElements []string `json:"bundleElements"`
	// Minimum VCF version that this patch bundle can be directly applied on.
	CumulativeFromVcfVersion string `json:"cumulativeFromVcfVersion"`
}

// GetBundleId returns the value of BundleId.
func (s *PatchBundle) GetBundleId() string {
	return s.BundleId
}

// GetBundleType returns the value of BundleType.
func (s *PatchBundle) GetBundleType() string {
	return s.BundleType
}

// GetBundleElements returns the value of BundleElements.
func (s *PatchBundle) GetBundleElements() []string {
	return s.BundleElements
}

// GetCumulativeFromVcfVersion returns the value of CumulativeFromVcfVersion.
func (s *PatchBundle) GetCumulativeFromVcfVersion() string {
	return s.CumulativeFromVcfVersion
}

// SetBundleId sets the value of BundleId.
func (s *PatchBundle) SetBundleId(val string) {
	s.BundleId = val
}

// SetBundleType sets the value of BundleType.
func (s *PatchBundle) SetBundleType(val string) {
	s.BundleType = val
}

// SetBundleElements sets the value of BundleElements.
func (s *PatchBundle) SetBundleElements(val []string) {
	s.BundleElements = val
}

// SetCumulativeFromVcfVersion sets the value of CumulativeFromVcfVersion.
func (s *PatchBundle) SetCumulativeFromVcfVersion(val string) {
	s.CumulativeFromVcfVersion = val
}

type PerformDomainIsolationPrecheckBadRequest Error

func (*PerformDomainIsolationPrecheckBadRequest) performDomainIsolationPrecheckRes() {}

type PerformDomainIsolationPrecheckInternalServerError Error

func (*PerformDomainIsolationPrecheckInternalServerError) performDomainIsolationPrecheckRes() {}

type PerformDomainIsolationPrecheckNotFound Error

func (*PerformDomainIsolationPrecheckNotFound) performDomainIsolationPrecheckRes() {}

type PerformUpgradeBadRequest Error

func (*PerformUpgradeBadRequest) performUpgradeRes() {}

type PerformUpgradeFailedDependency Error

func (*PerformUpgradeFailedDependency) performUpgradeRes() {}

type PerformUpgradeForbidden Error

func (*PerformUpgradeForbidden) performUpgradeRes() {}

type PerformUpgradeInternalServerError Error

func (*PerformUpgradeInternalServerError) performUpgradeRes() {}

// Personality contains bits to install/update the appropriate Cloud Foundation software components
// in your management domain or workload domain.
// Ref: #/components/schemas/Personality
type Personality struct {
	// Personality Version.
	Version string `json:"version"`
	// Personality id.
	PersonalityId string `json:"personalityId"`
	// Personality name.
	PersonalityName string `json:"personalityName"`
	// Personality description.
	Description string `json:"description"`
	// Personality created by.
	CreatedBy OptString `json:"createdBy"`
	// Personality image size.
	ImageSize string `json:"imageSize"`
	// Personality image checksum.
	ImageChecksum string `json:"imageChecksum"`
	// Personality depot path.
	VsphereExportedZipPath string `json:"vsphereExportedZipPath"`
	// Personality depot path.
	VsphereExportedIsoPath string `json:"vsphereExportedIsoPath"`
	// Personality depot path.
	VsphereExportedJsonPath string `json:"vsphereExportedJsonPath"`
	// Personality displayName.
	DisplayName string `json:"displayName"`
	// Personality Release date.
	//
	// Deprecated: schema marks this property as deprecated.
	ReleaseDate OptString `json:"releaseDate"`
	// Timestamp of Personality import into SDDC Manager.
	ImportTimestamp OptString `json:"importTimestamp"`
	// Personality tags.
	Tags []string `json:"tags"`
	// Personality kb articles.
	KbArticles   OptString    `json:"kbArticles"`
	SoftwareInfo SoftwareInfo `json:"softwareInfo"`
}

// GetVersion returns the value of Version.
func (s *Personality) GetVersion() string {
	return s.Version
}

// GetPersonalityId returns the value of PersonalityId.
func (s *Personality) GetPersonalityId() string {
	return s.PersonalityId
}

// GetPersonalityName returns the value of PersonalityName.
func (s *Personality) GetPersonalityName() string {
	return s.PersonalityName
}

// GetDescription returns the value of Description.
func (s *Personality) GetDescription() string {
	return s.Description
}

// GetCreatedBy returns the value of CreatedBy.
func (s *Personality) GetCreatedBy() OptString {
	return s.CreatedBy
}

// GetImageSize returns the value of ImageSize.
func (s *Personality) GetImageSize() string {
	return s.ImageSize
}

// GetImageChecksum returns the value of ImageChecksum.
func (s *Personality) GetImageChecksum() string {
	return s.ImageChecksum
}

// GetVsphereExportedZipPath returns the value of VsphereExportedZipPath.
func (s *Personality) GetVsphereExportedZipPath() string {
	return s.VsphereExportedZipPath
}

// GetVsphereExportedIsoPath returns the value of VsphereExportedIsoPath.
func (s *Personality) GetVsphereExportedIsoPath() string {
	return s.VsphereExportedIsoPath
}

// GetVsphereExportedJsonPath returns the value of VsphereExportedJsonPath.
func (s *Personality) GetVsphereExportedJsonPath() string {
	return s.VsphereExportedJsonPath
}

// GetDisplayName returns the value of DisplayName.
func (s *Personality) GetDisplayName() string {
	return s.DisplayName
}

// GetReleaseDate returns the value of ReleaseDate.
func (s *Personality) GetReleaseDate() OptString {
	return s.ReleaseDate
}

// GetImportTimestamp returns the value of ImportTimestamp.
func (s *Personality) GetImportTimestamp() OptString {
	return s.ImportTimestamp
}

// GetTags returns the value of Tags.
func (s *Personality) GetTags() []string {
	return s.Tags
}

// GetKbArticles returns the value of KbArticles.
func (s *Personality) GetKbArticles() OptString {
	return s.KbArticles
}

// GetSoftwareInfo returns the value of SoftwareInfo.
func (s *Personality) GetSoftwareInfo() SoftwareInfo {
	return s.SoftwareInfo
}

// SetVersion sets the value of Version.
func (s *Personality) SetVersion(val string) {
	s.Version = val
}

// SetPersonalityId sets the value of PersonalityId.
func (s *Personality) SetPersonalityId(val string) {
	s.PersonalityId = val
}

// SetPersonalityName sets the value of PersonalityName.
func (s *Personality) SetPersonalityName(val string) {
	s.PersonalityName = val
}

// SetDescription sets the value of Description.
func (s *Personality) SetDescription(val string) {
	s.Description = val
}

// SetCreatedBy sets the value of CreatedBy.
func (s *Personality) SetCreatedBy(val OptString) {
	s.CreatedBy = val
}

// SetImageSize sets the value of ImageSize.
func (s *Personality) SetImageSize(val string) {
	s.ImageSize = val
}

// SetImageChecksum sets the value of ImageChecksum.
func (s *Personality) SetImageChecksum(val string) {
	s.ImageChecksum = val
}

// SetVsphereExportedZipPath sets the value of VsphereExportedZipPath.
func (s *Personality) SetVsphereExportedZipPath(val string) {
	s.VsphereExportedZipPath = val
}

// SetVsphereExportedIsoPath sets the value of VsphereExportedIsoPath.
func (s *Personality) SetVsphereExportedIsoPath(val string) {
	s.VsphereExportedIsoPath = val
}

// SetVsphereExportedJsonPath sets the value of VsphereExportedJsonPath.
func (s *Personality) SetVsphereExportedJsonPath(val string) {
	s.VsphereExportedJsonPath = val
}

// SetDisplayName sets the value of DisplayName.
func (s *Personality) SetDisplayName(val string) {
	s.DisplayName = val
}

// SetReleaseDate sets the value of ReleaseDate.
func (s *Personality) SetReleaseDate(val OptString) {
	s.ReleaseDate = val
}

// SetImportTimestamp sets the value of ImportTimestamp.
func (s *Personality) SetImportTimestamp(val OptString) {
	s.ImportTimestamp = val
}

// SetTags sets the value of Tags.
func (s *Personality) SetTags(val []string) {
	s.Tags = val
}

// SetKbArticles sets the value of KbArticles.
func (s *Personality) SetKbArticles(val OptString) {
	s.KbArticles = val
}

// SetSoftwareInfo sets the value of SoftwareInfo.
func (s *Personality) SetSoftwareInfo(val SoftwareInfo) {
	s.SoftwareInfo = val
}

func (*Personality) getPersonalityRes()        {}
func (*Personality) renamePersonalityByIdRes() {}

// Personality Specification for vLCM based upgrade.
// Ref: #/components/schemas/PersonalitySpec
type PersonalitySpec struct {
	// Personality ID for vLCM based Upgrade.
	PersonalityId string `json:"personalityId"`
	// Hardware Support Specifications for Firmware upgrade.
	HardwareSupportSpecs []HardwareSupportSpec `json:"hardwareSupportSpecs"`
}

// GetPersonalityId returns the value of PersonalityId.
func (s *PersonalitySpec) GetPersonalityId() string {
	return s.PersonalityId
}

// GetHardwareSupportSpecs returns the value of HardwareSupportSpecs.
func (s *PersonalitySpec) GetHardwareSupportSpecs() []HardwareSupportSpec {
	return s.HardwareSupportSpecs
}

// SetPersonalityId sets the value of PersonalityId.
func (s *PersonalitySpec) SetPersonalityId(val string) {
	s.PersonalityId = val
}

// SetHardwareSupportSpecs sets the value of HardwareSupportSpecs.
func (s *PersonalitySpec) SetHardwareSupportSpecs(val []HardwareSupportSpec) {
	s.HardwareSupportSpecs = val
}

// Personality Upload Specification.
// Ref: #/components/schemas/PersonalityUploadSpec
type PersonalityUploadSpec struct {
	// Personality upload mode.
	UploadMode                        string                                      `json:"uploadMode"`
	UploadSpecRawMode                 OptPersonalityUploadSpecRaw                 `json:"uploadSpecRawMode"`
	UploadSpecRawWithFileUploadIdMode OptPersonalityUploadSpecRawWithFileUploadId `json:"uploadSpecRawWithFileUploadIdMode"`
	UploadSpecReferredMode            OptPersonalityUploadSpecReferred            `json:"uploadSpecReferredMode"`
	// Personality name.
	Name OptString `json:"name"`
}

// GetUploadMode returns the value of UploadMode.
func (s *PersonalityUploadSpec) GetUploadMode() string {
	return s.UploadMode
}

// GetUploadSpecRawMode returns the value of UploadSpecRawMode.
func (s *PersonalityUploadSpec) GetUploadSpecRawMode() OptPersonalityUploadSpecRaw {
	return s.UploadSpecRawMode
}

// GetUploadSpecRawWithFileUploadIdMode returns the value of UploadSpecRawWithFileUploadIdMode.
func (s *PersonalityUploadSpec) GetUploadSpecRawWithFileUploadIdMode() OptPersonalityUploadSpecRawWithFileUploadId {
	return s.UploadSpecRawWithFileUploadIdMode
}

// GetUploadSpecReferredMode returns the value of UploadSpecReferredMode.
func (s *PersonalityUploadSpec) GetUploadSpecReferredMode() OptPersonalityUploadSpecReferred {
	return s.UploadSpecReferredMode
}

// GetName returns the value of Name.
func (s *PersonalityUploadSpec) GetName() OptString {
	return s.Name
}

// SetUploadMode sets the value of UploadMode.
func (s *PersonalityUploadSpec) SetUploadMode(val string) {
	s.UploadMode = val
}

// SetUploadSpecRawMode sets the value of UploadSpecRawMode.
func (s *PersonalityUploadSpec) SetUploadSpecRawMode(val OptPersonalityUploadSpecRaw) {
	s.UploadSpecRawMode = val
}

// SetUploadSpecRawWithFileUploadIdMode sets the value of UploadSpecRawWithFileUploadIdMode.
func (s *PersonalityUploadSpec) SetUploadSpecRawWithFileUploadIdMode(val OptPersonalityUploadSpecRawWithFileUploadId) {
	s.UploadSpecRawWithFileUploadIdMode = val
}

// SetUploadSpecReferredMode sets the value of UploadSpecReferredMode.
func (s *PersonalityUploadSpec) SetUploadSpecReferredMode(val OptPersonalityUploadSpecReferred) {
	s.UploadSpecReferredMode = val
}

// SetName sets the value of Name.
func (s *PersonalityUploadSpec) SetName(val OptString) {
	s.Name = val
}

// Personality upload specification for uploading the personality from raw files exported from
// avCenter cluster. This mode of uploading personality is useful when the source vCenter cluster is
// outside the target VCF deployment.
// Ref: #/components/schemas/PersonalityUploadSpecRaw
type PersonalityUploadSpecRaw struct {
	// Personality Info JSON File Path.
	PersonalityInfoJSONFilePath string `json:"personalityInfoJSONFilePath"`
	// Personality JSON File Path.
	PersonalityJSONFilePath string `json:"personalityJSONFilePath"`
	// Personality Zip File Path.
	PersonalityZIPFilePath string `json:"personalityZIPFilePath"`
	// Personality ISO File Path.
	PersonalityISOFilePath OptString `json:"personalityISOFilePath"`
}

// GetPersonalityInfoJSONFilePath returns the value of PersonalityInfoJSONFilePath.
func (s *PersonalityUploadSpecRaw) GetPersonalityInfoJSONFilePath() string {
	return s.PersonalityInfoJSONFilePath
}

// GetPersonalityJSONFilePath returns the value of PersonalityJSONFilePath.
func (s *PersonalityUploadSpecRaw) GetPersonalityJSONFilePath() string {
	return s.PersonalityJSONFilePath
}

// GetPersonalityZIPFilePath returns the value of PersonalityZIPFilePath.
func (s *PersonalityUploadSpecRaw) GetPersonalityZIPFilePath() string {
	return s.PersonalityZIPFilePath
}

// GetPersonalityISOFilePath returns the value of PersonalityISOFilePath.
func (s *PersonalityUploadSpecRaw) GetPersonalityISOFilePath() OptString {
	return s.PersonalityISOFilePath
}

// SetPersonalityInfoJSONFilePath sets the value of PersonalityInfoJSONFilePath.
func (s *PersonalityUploadSpecRaw) SetPersonalityInfoJSONFilePath(val string) {
	s.PersonalityInfoJSONFilePath = val
}

// SetPersonalityJSONFilePath sets the value of PersonalityJSONFilePath.
func (s *PersonalityUploadSpecRaw) SetPersonalityJSONFilePath(val string) {
	s.PersonalityJSONFilePath = val
}

// SetPersonalityZIPFilePath sets the value of PersonalityZIPFilePath.
func (s *PersonalityUploadSpecRaw) SetPersonalityZIPFilePath(val string) {
	s.PersonalityZIPFilePath = val
}

// SetPersonalityISOFilePath sets the value of PersonalityISOFilePath.
func (s *PersonalityUploadSpecRaw) SetPersonalityISOFilePath(val OptString) {
	s.PersonalityISOFilePath = val
}

// Personality upload specification for uploading the personality from raw files exported from a
// vCenter cluster. This mode of uploading personality is useful when the source vCenter cluster is
// outside the target VCF deployment. User can upload files from a source location to SDDC Manager
// using v1/personalities/files API, which returns a file upload id. The id is then passed in this
// spec with Personality Upload Mode RAW_WITH_FILE_UPLOAD_ID.
// Ref: #/components/schemas/PersonalityUploadSpecRawWithFileUploadId
type PersonalityUploadSpecRawWithFileUploadId struct {
	// Personality file upload id. This id is obtained by calling v1/personalities/files and uploading
	// files into SDDC Manager.
	FileUploadId string `json:"fileUploadId"`
}

// GetFileUploadId returns the value of FileUploadId.
func (s *PersonalityUploadSpecRawWithFileUploadId) GetFileUploadId() string {
	return s.FileUploadId
}

// SetFileUploadId sets the value of FileUploadId.
func (s *PersonalityUploadSpecRawWithFileUploadId) SetFileUploadId(val string) {
	s.FileUploadId = val
}

// Personality upload specification for uploading the personality from a referred vCentercluster.
// This mode of uploading personality is useful when the source vCenter cluster is internal to the
// target VCF deployment.
// Ref: #/components/schemas/PersonalityUploadSpecReferred
type PersonalityUploadSpecReferred struct {
	// Source vCenter UUID from VCF inventory.
	VCenterId string `json:"vCenterId"`
	// Source cluster MOID.
	ClusterId string `json:"clusterId"`
}

// GetVCenterId returns the value of VCenterId.
func (s *PersonalityUploadSpecReferred) GetVCenterId() string {
	return s.VCenterId
}

// GetClusterId returns the value of ClusterId.
func (s *PersonalityUploadSpecReferred) GetClusterId() string {
	return s.ClusterId
}

// SetVCenterId sets the value of VCenterId.
func (s *PersonalityUploadSpecReferred) SetVCenterId(val string) {
	s.VCenterId = val
}

// SetClusterId sets the value of ClusterId.
func (s *PersonalityUploadSpecReferred) SetClusterId(val string) {
	s.ClusterId = val
}

// Represents a physical NIC.
// Ref: #/components/schemas/PhysicalNic
type PhysicalNic struct {
	// Device name of the physical NIC.
	DeviceName OptString `json:"deviceName"`
	// Mac address of the physical NIC.
	MacAddress OptString `json:"macAddress"`
	// Speed in bytes of the physical NIC.
	Speed OptInt64 `json:"speed"`
	// Unit of physical NIC speed.
	Unit         OptPhysicalNicUnit `json:"unit"`
	SmartNicInfo OptSmartNicInfo    `json:"smartNicInfo"`
	// State of the physical NIC.
	State OptString `json:"state"`
}

// GetDeviceName returns the value of DeviceName.
func (s *PhysicalNic) GetDeviceName() OptString {
	return s.DeviceName
}

// GetMacAddress returns the value of MacAddress.
func (s *PhysicalNic) GetMacAddress() OptString {
	return s.MacAddress
}

// GetSpeed returns the value of Speed.
func (s *PhysicalNic) GetSpeed() OptInt64 {
	return s.Speed
}

// GetUnit returns the value of Unit.
func (s *PhysicalNic) GetUnit() OptPhysicalNicUnit {
	return s.Unit
}

// GetSmartNicInfo returns the value of SmartNicInfo.
func (s *PhysicalNic) GetSmartNicInfo() OptSmartNicInfo {
	return s.SmartNicInfo
}

// GetState returns the value of State.
func (s *PhysicalNic) GetState() OptString {
	return s.State
}

// SetDeviceName sets the value of DeviceName.
func (s *PhysicalNic) SetDeviceName(val OptString) {
	s.DeviceName = val
}

// SetMacAddress sets the value of MacAddress.
func (s *PhysicalNic) SetMacAddress(val OptString) {
	s.MacAddress = val
}

// SetSpeed sets the value of Speed.
func (s *PhysicalNic) SetSpeed(val OptInt64) {
	s.Speed = val
}

// SetUnit sets the value of Unit.
func (s *PhysicalNic) SetUnit(val OptPhysicalNicUnit) {
	s.Unit = val
}

// SetSmartNicInfo sets the value of SmartNicInfo.
func (s *PhysicalNic) SetSmartNicInfo(val OptSmartNicInfo) {
	s.SmartNicInfo = val
}

// SetState sets the value of State.
func (s *PhysicalNic) SetState(val OptString) {
	s.State = val
}

// Unit of physical NIC speed.
type PhysicalNicUnit string

const (
	PhysicalNicUnitKB PhysicalNicUnit = "KB"
	PhysicalNicUnitMB PhysicalNicUnit = "MB"
	PhysicalNicUnitGB PhysicalNicUnit = "GB"
	PhysicalNicUnitTB PhysicalNicUnit = "TB"
	PhysicalNicUnitPB PhysicalNicUnit = "PB"
)

// AllValues returns all PhysicalNicUnit values.
func (PhysicalNicUnit) AllValues() []PhysicalNicUnit {
	return []PhysicalNicUnit{
		PhysicalNicUnitKB,
		PhysicalNicUnitMB,
		PhysicalNicUnitGB,
		PhysicalNicUnitTB,
		PhysicalNicUnitPB,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhysicalNicUnit) MarshalText() ([]byte, error) {
	switch s {
	case PhysicalNicUnitKB:
		return []byte(s), nil
	case PhysicalNicUnitMB:
		return []byte(s), nil
	case PhysicalNicUnitGB:
		return []byte(s), nil
	case PhysicalNicUnitTB:
		return []byte(s), nil
	case PhysicalNicUnitPB:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhysicalNicUnit) UnmarshalText(data []byte) error {
	switch PhysicalNicUnit(data) {
	case PhysicalNicUnitKB:
		*s = PhysicalNicUnitKB
		return nil
	case PhysicalNicUnitMB:
		*s = PhysicalNicUnitMB
		return nil
	case PhysicalNicUnitGB:
		*s = PhysicalNicUnitGB
		return nil
	case PhysicalNicUnitTB:
		*s = PhysicalNicUnitTB
		return nil
	case PhysicalNicUnitPB:
		*s = PhysicalNicUnitPB
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Portgroup associated with the vSphere Distributed Switch.
// Ref: #/components/schemas/Portgroup
type Portgroup struct {
	// Port group name.
	Name string `json:"name"`
	// Port group transport type.
	TransportType string `json:"transportType"`
	// Port binding type.
	PortBindingType OptString `json:"portBindingType"`
	// VLAN ID.
	VlanId OptInt32 `json:"vlanId"`
	// List of active uplinks.
	ActiveUplinks []string `json:"activeUplinks"`
	// List of standby uplinks.
	StandbyUplinks []string `json:"standbyUplinks"`
}

// GetName returns the value of Name.
func (s *Portgroup) GetName() string {
	return s.Name
}

// GetTransportType returns the value of TransportType.
func (s *Portgroup) GetTransportType() string {
	return s.TransportType
}

// GetPortBindingType returns the value of PortBindingType.
func (s *Portgroup) GetPortBindingType() OptString {
	return s.PortBindingType
}

// GetVlanId returns the value of VlanId.
func (s *Portgroup) GetVlanId() OptInt32 {
	return s.VlanId
}

// GetActiveUplinks returns the value of ActiveUplinks.
func (s *Portgroup) GetActiveUplinks() []string {
	return s.ActiveUplinks
}

// GetStandbyUplinks returns the value of StandbyUplinks.
func (s *Portgroup) GetStandbyUplinks() []string {
	return s.StandbyUplinks
}

// SetName sets the value of Name.
func (s *Portgroup) SetName(val string) {
	s.Name = val
}

// SetTransportType sets the value of TransportType.
func (s *Portgroup) SetTransportType(val string) {
	s.TransportType = val
}

// SetPortBindingType sets the value of PortBindingType.
func (s *Portgroup) SetPortBindingType(val OptString) {
	s.PortBindingType = val
}

// SetVlanId sets the value of VlanId.
func (s *Portgroup) SetVlanId(val OptInt32) {
	s.VlanId = val
}

// SetActiveUplinks sets the value of ActiveUplinks.
func (s *Portgroup) SetActiveUplinks(val []string) {
	s.ActiveUplinks = val
}

// SetStandbyUplinks sets the value of StandbyUplinks.
func (s *Portgroup) SetStandbyUplinks(val []string) {
	s.StandbyUplinks = val
}

// This specification contains the network configuration in a port group.
// Ref: #/components/schemas/PortgroupConfig
type PortgroupConfig struct {
	// Port group name.
	Name OptString `json:"name"`
	// Port group transport type.
	TransportType OptString `json:"transportType"`
	// List of active uplinks associated with port group.
	ActiveUplinks []string `json:"activeUplinks"`
	// List of standby uplinks associated with port group.
	StandByUplinks []string `json:"standByUplinks"`
	// The load balancing policy associated with port group.
	Policy OptString `json:"policy"`
	// List of supported teaming policies at port group.
	SupportedTeamingPolicies OptPortgroupConfigSupportedTeamingPolicies `json:"supportedTeamingPolicies"`
	// The vlan id associated with the port group.
	VlanId OptInt32 `json:"vlanId"`
	// The maximum transmission unit (MTU) used for the uplinks associated with the port group.
	Mtu OptInt32 `json:"mtu"`
}

// GetName returns the value of Name.
func (s *PortgroupConfig) GetName() OptString {
	return s.Name
}

// GetTransportType returns the value of TransportType.
func (s *PortgroupConfig) GetTransportType() OptString {
	return s.TransportType
}

// GetActiveUplinks returns the value of ActiveUplinks.
func (s *PortgroupConfig) GetActiveUplinks() []string {
	return s.ActiveUplinks
}

// GetStandByUplinks returns the value of StandByUplinks.
func (s *PortgroupConfig) GetStandByUplinks() []string {
	return s.StandByUplinks
}

// GetPolicy returns the value of Policy.
func (s *PortgroupConfig) GetPolicy() OptString {
	return s.Policy
}

// GetSupportedTeamingPolicies returns the value of SupportedTeamingPolicies.
func (s *PortgroupConfig) GetSupportedTeamingPolicies() OptPortgroupConfigSupportedTeamingPolicies {
	return s.SupportedTeamingPolicies
}

// GetVlanId returns the value of VlanId.
func (s *PortgroupConfig) GetVlanId() OptInt32 {
	return s.VlanId
}

// GetMtu returns the value of Mtu.
func (s *PortgroupConfig) GetMtu() OptInt32 {
	return s.Mtu
}

// SetName sets the value of Name.
func (s *PortgroupConfig) SetName(val OptString) {
	s.Name = val
}

// SetTransportType sets the value of TransportType.
func (s *PortgroupConfig) SetTransportType(val OptString) {
	s.TransportType = val
}

// SetActiveUplinks sets the value of ActiveUplinks.
func (s *PortgroupConfig) SetActiveUplinks(val []string) {
	s.ActiveUplinks = val
}

// SetStandByUplinks sets the value of StandByUplinks.
func (s *PortgroupConfig) SetStandByUplinks(val []string) {
	s.StandByUplinks = val
}

// SetPolicy sets the value of Policy.
func (s *PortgroupConfig) SetPolicy(val OptString) {
	s.Policy = val
}

// SetSupportedTeamingPolicies sets the value of SupportedTeamingPolicies.
func (s *PortgroupConfig) SetSupportedTeamingPolicies(val OptPortgroupConfigSupportedTeamingPolicies) {
	s.SupportedTeamingPolicies = val
}

// SetVlanId sets the value of VlanId.
func (s *PortgroupConfig) SetVlanId(val OptInt32) {
	s.VlanId = val
}

// SetMtu sets the value of Mtu.
func (s *PortgroupConfig) SetMtu(val OptInt32) {
	s.Mtu = val
}

// List of supported teaming policies at port group.
type PortgroupConfigSupportedTeamingPolicies map[string]string

func (s *PortgroupConfigSupportedTeamingPolicies) init() PortgroupConfigSupportedTeamingPolicies {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// This specification contains vCenter port group configurations.
// Ref: #/components/schemas/PortgroupSpec
type PortgroupSpec struct {
	// Port group name.
	Name string `json:"name"`
	// Port group transport type.
	TransportType string `json:"transportType"`
	// The list of active uplinks associated with portgroup.
	ActiveUplinks []string `json:"activeUplinks"`
	// The list of standby uplinks associated with portgroup.
	StandByUplinks []string `json:"standByUplinks"`
	// The teaming policy associated with the portgroup.
	TeamingPolicy OptString `json:"teamingPolicy"`
}

// GetName returns the value of Name.
func (s *PortgroupSpec) GetName() string {
	return s.Name
}

// GetTransportType returns the value of TransportType.
func (s *PortgroupSpec) GetTransportType() string {
	return s.TransportType
}

// GetActiveUplinks returns the value of ActiveUplinks.
func (s *PortgroupSpec) GetActiveUplinks() []string {
	return s.ActiveUplinks
}

// GetStandByUplinks returns the value of StandByUplinks.
func (s *PortgroupSpec) GetStandByUplinks() []string {
	return s.StandByUplinks
}

// GetTeamingPolicy returns the value of TeamingPolicy.
func (s *PortgroupSpec) GetTeamingPolicy() OptString {
	return s.TeamingPolicy
}

// SetName sets the value of Name.
func (s *PortgroupSpec) SetName(val string) {
	s.Name = val
}

// SetTransportType sets the value of TransportType.
func (s *PortgroupSpec) SetTransportType(val string) {
	s.TransportType = val
}

// SetActiveUplinks sets the value of ActiveUplinks.
func (s *PortgroupSpec) SetActiveUplinks(val []string) {
	s.ActiveUplinks = val
}

// SetStandByUplinks sets the value of StandByUplinks.
func (s *PortgroupSpec) SetStandByUplinks(val []string) {
	s.StandByUplinks = val
}

// SetTeamingPolicy sets the value of TeamingPolicy.
func (s *PortgroupSpec) SetTeamingPolicy(val OptString) {
	s.TeamingPolicy = val
}

type PostClusterQueryBadRequest Error

func (*PostClusterQueryBadRequest) postClusterQueryRes() {}

type PostClusterQueryInternalServerError Error

func (*PostClusterQueryInternalServerError) postClusterQueryRes() {}

type PostClustersQueryBadRequest Error

func (*PostClustersQueryBadRequest) postClustersQueryRes() {}

type PostClustersQueryInternalServerError Error

func (*PostClustersQueryInternalServerError) postClustersQueryRes() {}

type PostDatastoreQuery1BadRequest Error

func (*PostDatastoreQuery1BadRequest) postDatastoreQuery1Res() {}

type PostDatastoreQuery1InternalServerError Error

func (*PostDatastoreQuery1InternalServerError) postDatastoreQuery1Res() {}

type PostDatastoreQueryBadRequest Error

func (*PostDatastoreQueryBadRequest) postDatastoreQueryRes() {}

type PostDatastoreQueryInternalServerError Error

func (*PostDatastoreQueryInternalServerError) postDatastoreQueryRes() {}

type PostHostQueryBadRequest Error

func (*PostHostQueryBadRequest) postHostQueryRes() {}

type PostHostQueryInternalServerError Error

func (*PostHostQueryInternalServerError) postHostQueryRes() {}

type PostHostsPrechecks1BadRequest Error

func (*PostHostsPrechecks1BadRequest) postHostsPrechecks1Res() {}

type PostHostsPrechecks1InternalServerError Error

func (*PostHostsPrechecks1InternalServerError) postHostsPrechecks1Res() {}

type PostHostsPrechecks1ReqMultipartFormData struct {
	SpecFile OptMultipartFile `json:"specFile"`
}

// GetSpecFile returns the value of SpecFile.
func (s *PostHostsPrechecks1ReqMultipartFormData) GetSpecFile() OptMultipartFile {
	return s.SpecFile
}

// SetSpecFile sets the value of SpecFile.
func (s *PostHostsPrechecks1ReqMultipartFormData) SetSpecFile(val OptMultipartFile) {
	s.SpecFile = val
}

func (*PostHostsPrechecks1ReqMultipartFormData) postHostsPrechecks1Req() {}

type PostQueryBadRequest Error

func (*PostQueryBadRequest) postQueryRes() {}

type PostQueryInternalServerError Error

func (*PostQueryInternalServerError) postQueryRes() {}

// Precheck System Spec.
// Ref: #/components/schemas/PrecheckSpec
type PrecheckSpec struct {
	// List of resources for Precheck supported type DOMAIN, CLUSTER.
	Resources []Resource `json:"resources"`
	// If specified, indicate the bundle applicability in the result.
	BundleId OptString `json:"bundleId"`
	// If specified, indicates the mode of the execution. Supported modes are UPGRADE and RECOVERY.
	// UPGRADE is default mode. Specify RECOVERY for the Inventory Consistency Checks.
	Mode OptString `json:"mode"`
}

// GetResources returns the value of Resources.
func (s *PrecheckSpec) GetResources() []Resource {
	return s.Resources
}

// GetBundleId returns the value of BundleId.
func (s *PrecheckSpec) GetBundleId() OptString {
	return s.BundleId
}

// GetMode returns the value of Mode.
func (s *PrecheckSpec) GetMode() OptString {
	return s.Mode
}

// SetResources sets the value of Resources.
func (s *PrecheckSpec) SetResources(val []Resource) {
	s.Resources = val
}

// SetBundleId sets the value of BundleId.
func (s *PrecheckSpec) SetBundleId(val OptString) {
	s.BundleId = val
}

// SetMode sets the value of Mode.
func (s *PrecheckSpec) SetMode(val OptString) {
	s.Mode = val
}

// Product Info and License Key Info.
// Ref: #/components/schemas/ProductInfo
type ProductInfo struct {
	// License key of product.
	LicenseKey OptString `json:"licenseKey"`
	// Product type.
	Type OptString `json:"type"`
	// Licensing Mode.
	LicensingMode OptString `json:"licensingMode"`
	// License key status.
	LicenseKeyStatus OptString `json:"licenseKeyStatus"`
	// License key expiration date.
	LicenseKeyExpirationDate OptString `json:"licenseKeyExpirationDate"`
	ErrorResponse            OptError  `json:"errorResponse"`
}

// GetLicenseKey returns the value of LicenseKey.
func (s *ProductInfo) GetLicenseKey() OptString {
	return s.LicenseKey
}

// GetType returns the value of Type.
func (s *ProductInfo) GetType() OptString {
	return s.Type
}

// GetLicensingMode returns the value of LicensingMode.
func (s *ProductInfo) GetLicensingMode() OptString {
	return s.LicensingMode
}

// GetLicenseKeyStatus returns the value of LicenseKeyStatus.
func (s *ProductInfo) GetLicenseKeyStatus() OptString {
	return s.LicenseKeyStatus
}

// GetLicenseKeyExpirationDate returns the value of LicenseKeyExpirationDate.
func (s *ProductInfo) GetLicenseKeyExpirationDate() OptString {
	return s.LicenseKeyExpirationDate
}

// GetErrorResponse returns the value of ErrorResponse.
func (s *ProductInfo) GetErrorResponse() OptError {
	return s.ErrorResponse
}

// SetLicenseKey sets the value of LicenseKey.
func (s *ProductInfo) SetLicenseKey(val OptString) {
	s.LicenseKey = val
}

// SetType sets the value of Type.
func (s *ProductInfo) SetType(val OptString) {
	s.Type = val
}

// SetLicensingMode sets the value of LicensingMode.
func (s *ProductInfo) SetLicensingMode(val OptString) {
	s.LicensingMode = val
}

// SetLicenseKeyStatus sets the value of LicenseKeyStatus.
func (s *ProductInfo) SetLicenseKeyStatus(val OptString) {
	s.LicenseKeyStatus = val
}

// SetLicenseKeyExpirationDate sets the value of LicenseKeyExpirationDate.
func (s *ProductInfo) SetLicenseKeyExpirationDate(val OptString) {
	s.LicenseKeyExpirationDate = val
}

// SetErrorResponse sets the value of ErrorResponse.
func (s *ProductInfo) SetErrorResponse(val OptError) {
	s.ErrorResponse = val
}

// Details of the product/component for the release.
// Ref: #/components/schemas/ProductVersion
type ProductVersion struct {
	// Name of the product. e.g ESX.
	Name string `json:"name"`
	// Version for the product, e.g 6.7.0-11675023.
	Version string `json:"version"`
	// Public name of the product, e.g VMware ESXi.
	PublicName string `json:"publicName"`
	// URL for the release.
	ReleaseURL OptString `json:"releaseURL"`
	// Any additional metadata.
	AdditionalMetadata OptString `json:"additionalMetadata"`
}

// GetName returns the value of Name.
func (s *ProductVersion) GetName() string {
	return s.Name
}

// GetVersion returns the value of Version.
func (s *ProductVersion) GetVersion() string {
	return s.Version
}

// GetPublicName returns the value of PublicName.
func (s *ProductVersion) GetPublicName() string {
	return s.PublicName
}

// GetReleaseURL returns the value of ReleaseURL.
func (s *ProductVersion) GetReleaseURL() OptString {
	return s.ReleaseURL
}

// GetAdditionalMetadata returns the value of AdditionalMetadata.
func (s *ProductVersion) GetAdditionalMetadata() OptString {
	return s.AdditionalMetadata
}

// SetName sets the value of Name.
func (s *ProductVersion) SetName(val string) {
	s.Name = val
}

// SetVersion sets the value of Version.
func (s *ProductVersion) SetVersion(val string) {
	s.Version = val
}

// SetPublicName sets the value of PublicName.
func (s *ProductVersion) SetPublicName(val string) {
	s.PublicName = val
}

// SetReleaseURL sets the value of ReleaseURL.
func (s *ProductVersion) SetReleaseURL(val OptString) {
	s.ReleaseURL = val
}

// SetAdditionalMetadata sets the value of AdditionalMetadata.
func (s *ProductVersion) SetAdditionalMetadata(val OptString) {
	s.AdditionalMetadata = val
}

// LCM Product Version Catalog that contains async patches for VMware Cloud foundation components
// (VC/ESX/NSX) that's used by Life cycle manager.
// Ref: #/components/schemas/ProductVersionCatalog
type ProductVersionCatalog struct {
	// Product Version catalog version supported by VCF.
	Version OptInt32 `json:"version"`
	// Product Version catalog sequence number which signifies an update in the product version catalog.
	SequenceNumber OptInt32 `json:"sequenceNumber"`
	// Creation time for the Product Version catalog e.g. 2020-06-08T02:20:15.844Z, in
	// yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format.
	CreationTime OptString `json:"creationTime"`
	// Time of publish of the Product Version catalog e.g. 2020-06-08T02:20:15.844Z, in
	// yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format.
	PublishedTime OptString `json:"publishedTime"`
	// Patches used for the product version catalog.
	Patches OptProductVersionCatalogPatches `json:"patches"`
}

// GetVersion returns the value of Version.
func (s *ProductVersionCatalog) GetVersion() OptInt32 {
	return s.Version
}

// GetSequenceNumber returns the value of SequenceNumber.
func (s *ProductVersionCatalog) GetSequenceNumber() OptInt32 {
	return s.SequenceNumber
}

// GetCreationTime returns the value of CreationTime.
func (s *ProductVersionCatalog) GetCreationTime() OptString {
	return s.CreationTime
}

// GetPublishedTime returns the value of PublishedTime.
func (s *ProductVersionCatalog) GetPublishedTime() OptString {
	return s.PublishedTime
}

// GetPatches returns the value of Patches.
func (s *ProductVersionCatalog) GetPatches() OptProductVersionCatalogPatches {
	return s.Patches
}

// SetVersion sets the value of Version.
func (s *ProductVersionCatalog) SetVersion(val OptInt32) {
	s.Version = val
}

// SetSequenceNumber sets the value of SequenceNumber.
func (s *ProductVersionCatalog) SetSequenceNumber(val OptInt32) {
	s.SequenceNumber = val
}

// SetCreationTime sets the value of CreationTime.
func (s *ProductVersionCatalog) SetCreationTime(val OptString) {
	s.CreationTime = val
}

// SetPublishedTime sets the value of PublishedTime.
func (s *ProductVersionCatalog) SetPublishedTime(val OptString) {
	s.PublishedTime = val
}

// SetPatches sets the value of Patches.
func (s *ProductVersionCatalog) SetPatches(val OptProductVersionCatalogPatches) {
	s.Patches = val
}

func (*ProductVersionCatalog) getProductVersionCatalogRes() {}

// Patches used for the product version catalog.
type ProductVersionCatalogPatches map[string][]Patch

func (s *ProductVersionCatalogPatches) init() ProductVersionCatalogPatches {
	m := *s
	if m == nil {
		m = map[string][]Patch{}
		*s = m
	}
	return m
}

// Proxy Configuration.
// Ref: #/components/schemas/ProxyConfiguration
type ProxyConfiguration struct {
	// Is proxy configured.
	IsConfigured OptBool `json:"isConfigured"`
	// Is proxy enabled.
	IsEnabled OptBool `json:"isEnabled"`
	// IP address/FQDN of proxy server.
	Host OptString `json:"host"`
	// Port of proxy server.
	Port OptInt32 `json:"port"`
	// Proxy transfer protocol, default value is HTTP.
	TransferProtocol OptProxyConfigurationTransferProtocol `json:"transferProtocol"`
	// User name to connect.
	Username OptString `json:"username"`
	// User password to connect, will return null on reading.
	Password OptString `json:"password"`
	// Is proxy authenticated.
	IsAuthenticated OptBool `json:"isAuthenticated"`
}

// GetIsConfigured returns the value of IsConfigured.
func (s *ProxyConfiguration) GetIsConfigured() OptBool {
	return s.IsConfigured
}

// GetIsEnabled returns the value of IsEnabled.
func (s *ProxyConfiguration) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetHost returns the value of Host.
func (s *ProxyConfiguration) GetHost() OptString {
	return s.Host
}

// GetPort returns the value of Port.
func (s *ProxyConfiguration) GetPort() OptInt32 {
	return s.Port
}

// GetTransferProtocol returns the value of TransferProtocol.
func (s *ProxyConfiguration) GetTransferProtocol() OptProxyConfigurationTransferProtocol {
	return s.TransferProtocol
}

// GetUsername returns the value of Username.
func (s *ProxyConfiguration) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *ProxyConfiguration) GetPassword() OptString {
	return s.Password
}

// GetIsAuthenticated returns the value of IsAuthenticated.
func (s *ProxyConfiguration) GetIsAuthenticated() OptBool {
	return s.IsAuthenticated
}

// SetIsConfigured sets the value of IsConfigured.
func (s *ProxyConfiguration) SetIsConfigured(val OptBool) {
	s.IsConfigured = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *ProxyConfiguration) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetHost sets the value of Host.
func (s *ProxyConfiguration) SetHost(val OptString) {
	s.Host = val
}

// SetPort sets the value of Port.
func (s *ProxyConfiguration) SetPort(val OptInt32) {
	s.Port = val
}

// SetTransferProtocol sets the value of TransferProtocol.
func (s *ProxyConfiguration) SetTransferProtocol(val OptProxyConfigurationTransferProtocol) {
	s.TransferProtocol = val
}

// SetUsername sets the value of Username.
func (s *ProxyConfiguration) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *ProxyConfiguration) SetPassword(val OptString) {
	s.Password = val
}

// SetIsAuthenticated sets the value of IsAuthenticated.
func (s *ProxyConfiguration) SetIsAuthenticated(val OptBool) {
	s.IsAuthenticated = val
}

// Proxy transfer protocol, default value is HTTP.
type ProxyConfigurationTransferProtocol string

const (
	ProxyConfigurationTransferProtocolHTTP  ProxyConfigurationTransferProtocol = "HTTP"
	ProxyConfigurationTransferProtocolHTTPS ProxyConfigurationTransferProtocol = "HTTPS"
)

// AllValues returns all ProxyConfigurationTransferProtocol values.
func (ProxyConfigurationTransferProtocol) AllValues() []ProxyConfigurationTransferProtocol {
	return []ProxyConfigurationTransferProtocol{
		ProxyConfigurationTransferProtocolHTTP,
		ProxyConfigurationTransferProtocolHTTPS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProxyConfigurationTransferProtocol) MarshalText() ([]byte, error) {
	switch s {
	case ProxyConfigurationTransferProtocolHTTP:
		return []byte(s), nil
	case ProxyConfigurationTransferProtocolHTTPS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProxyConfigurationTransferProtocol) UnmarshalText(data []byte) error {
	switch ProxyConfigurationTransferProtocol(data) {
	case ProxyConfigurationTransferProtocolHTTP:
		*s = ProxyConfigurationTransferProtocolHTTP
		return nil
	case ProxyConfigurationTransferProtocolHTTPS:
		*s = ProxyConfigurationTransferProtocolHTTPS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Spec contains parameters for proxy settings.
// Ref: #/components/schemas/ProxySpec
type ProxySpec struct {
	// IP address/FQDN of proxy server.
	Host string `json:"host"`
	// Port of proxy server.
	Port int32 `json:"port"`
	// Proxy server username.
	Username OptString `json:"username"`
	// Proxy server password.
	Password OptString `json:"password"`
	// Proxy transfer protocol, default value is HTTP. One among: HTTP, HTTPS.
	TransferProtocol OptString `json:"transferProtocol"`
}

// GetHost returns the value of Host.
func (s *ProxySpec) GetHost() string {
	return s.Host
}

// GetPort returns the value of Port.
func (s *ProxySpec) GetPort() int32 {
	return s.Port
}

// GetUsername returns the value of Username.
func (s *ProxySpec) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *ProxySpec) GetPassword() OptString {
	return s.Password
}

// GetTransferProtocol returns the value of TransferProtocol.
func (s *ProxySpec) GetTransferProtocol() OptString {
	return s.TransferProtocol
}

// SetHost sets the value of Host.
func (s *ProxySpec) SetHost(val string) {
	s.Host = val
}

// SetPort sets the value of Port.
func (s *ProxySpec) SetPort(val int32) {
	s.Port = val
}

// SetUsername sets the value of Username.
func (s *ProxySpec) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *ProxySpec) SetPassword(val OptString) {
	s.Password = val
}

// SetTransferProtocol sets the value of TransferProtocol.
func (s *ProxySpec) SetTransferProtocol(val OptString) {
	s.TransferProtocol = val
}

// Psc representation.
// Ref: #/components/schemas/Psc
type Psc struct {
	// ID of the Psc.
	ID OptString `json:"id"`
	// FQDN of the Psc.
	Fqdn OptString `json:"fqdn"`
	// IP Address of the Psc.
	IpAddress OptString `json:"ipAddress"`
	// SSO Domain name of the Psc.
	SsoDomainName OptString `json:"ssoDomainName"`
	// SSO sub domain name of the Psc.
	SsoSubDomainName OptString `json:"ssoSubDomainName"`
	// Indicates if the Psc is a replica.
	IsReplica OptBool            `json:"isReplica"`
	Domain    OptDomainReference `json:"domain"`
}

// GetID returns the value of ID.
func (s *Psc) GetID() OptString {
	return s.ID
}

// GetFqdn returns the value of Fqdn.
func (s *Psc) GetFqdn() OptString {
	return s.Fqdn
}

// GetIpAddress returns the value of IpAddress.
func (s *Psc) GetIpAddress() OptString {
	return s.IpAddress
}

// GetSsoDomainName returns the value of SsoDomainName.
func (s *Psc) GetSsoDomainName() OptString {
	return s.SsoDomainName
}

// GetSsoSubDomainName returns the value of SsoSubDomainName.
func (s *Psc) GetSsoSubDomainName() OptString {
	return s.SsoSubDomainName
}

// GetIsReplica returns the value of IsReplica.
func (s *Psc) GetIsReplica() OptBool {
	return s.IsReplica
}

// GetDomain returns the value of Domain.
func (s *Psc) GetDomain() OptDomainReference {
	return s.Domain
}

// SetID sets the value of ID.
func (s *Psc) SetID(val OptString) {
	s.ID = val
}

// SetFqdn sets the value of Fqdn.
func (s *Psc) SetFqdn(val OptString) {
	s.Fqdn = val
}

// SetIpAddress sets the value of IpAddress.
func (s *Psc) SetIpAddress(val OptString) {
	s.IpAddress = val
}

// SetSsoDomainName sets the value of SsoDomainName.
func (s *Psc) SetSsoDomainName(val OptString) {
	s.SsoDomainName = val
}

// SetSsoSubDomainName sets the value of SsoSubDomainName.
func (s *Psc) SetSsoSubDomainName(val OptString) {
	s.SsoSubDomainName = val
}

// SetIsReplica sets the value of IsReplica.
func (s *Psc) SetIsReplica(val OptBool) {
	s.IsReplica = val
}

// SetDomain sets the value of Domain.
func (s *Psc) SetDomain(val OptDomainReference) {
	s.Domain = val
}

func (*Psc) getPscRes() {}

// Spec contains parameters for deployment/configuration of Platform Services Controller.
// Ref: #/components/schemas/PscSpec
type PscSpec struct {
	PscSsoSpec PscSsoSpec `json:"pscSsoSpec"`
	// Admin user sso passwordPassword needs to be a strong password with at least one Uppercase alphabet,
	//  one lowercase alphabet, one digit and one special character specified in braces [!$%^] and 8-20
	// characters in length,and 3 maximum identical adjacent characters!. If blank, the SDDC Local Admin
	// Password will be used.
	AdminUserSsoPassword OptString `json:"adminUserSsoPassword"`
}

// GetPscSsoSpec returns the value of PscSsoSpec.
func (s *PscSpec) GetPscSsoSpec() PscSsoSpec {
	return s.PscSsoSpec
}

// GetAdminUserSsoPassword returns the value of AdminUserSsoPassword.
func (s *PscSpec) GetAdminUserSsoPassword() OptString {
	return s.AdminUserSsoPassword
}

// SetPscSsoSpec sets the value of PscSsoSpec.
func (s *PscSpec) SetPscSsoSpec(val PscSsoSpec) {
	s.PscSsoSpec = val
}

// SetAdminUserSsoPassword sets the value of AdminUserSsoPassword.
func (s *PscSpec) SetAdminUserSsoPassword(val OptString) {
	s.AdminUserSsoPassword = val
}

// Spec contains parameters for Platform Services Controller SSO.
// Ref: #/components/schemas/PscSsoSpec
type PscSsoSpec struct {
	// PSC SSO Domain.
	SsoDomain OptString `json:"ssoDomain"`
}

// GetSsoDomain returns the value of SsoDomain.
func (s *PscSsoSpec) GetSsoDomain() OptString {
	return s.SsoDomain
}

// SetSsoDomain sets the value of SsoDomain.
func (s *PscSsoSpec) SetSsoDomain(val OptString) {
	s.SsoDomain = val
}

type QueryCheckSetsBadRequest Error

func (*QueryCheckSetsBadRequest) queryCheckSetsRes() {}

type QueryCheckSetsInternalServerError Error

func (*QueryCheckSetsInternalServerError) queryCheckSetsRes() {}

// Represents the query info.
// Ref: #/components/schemas/QueryInfo
type QueryInfo struct {
	// Status of the query.
	Status OptString `json:"status"`
	// ID of the query to retrieve.
	QueryId       OptString `json:"queryId"`
	ErrorResponse OptError  `json:"errorResponse"`
	Failure       OptBool   `json:"failure"`
	Completed     OptBool   `json:"completed"`
	Processing    OptBool   `json:"processing"`
}

// GetStatus returns the value of Status.
func (s *QueryInfo) GetStatus() OptString {
	return s.Status
}

// GetQueryId returns the value of QueryId.
func (s *QueryInfo) GetQueryId() OptString {
	return s.QueryId
}

// GetErrorResponse returns the value of ErrorResponse.
func (s *QueryInfo) GetErrorResponse() OptError {
	return s.ErrorResponse
}

// GetFailure returns the value of Failure.
func (s *QueryInfo) GetFailure() OptBool {
	return s.Failure
}

// GetCompleted returns the value of Completed.
func (s *QueryInfo) GetCompleted() OptBool {
	return s.Completed
}

// GetProcessing returns the value of Processing.
func (s *QueryInfo) GetProcessing() OptBool {
	return s.Processing
}

// SetStatus sets the value of Status.
func (s *QueryInfo) SetStatus(val OptString) {
	s.Status = val
}

// SetQueryId sets the value of QueryId.
func (s *QueryInfo) SetQueryId(val OptString) {
	s.QueryId = val
}

// SetErrorResponse sets the value of ErrorResponse.
func (s *QueryInfo) SetErrorResponse(val OptError) {
	s.ErrorResponse = val
}

// SetFailure sets the value of Failure.
func (s *QueryInfo) SetFailure(val OptBool) {
	s.Failure = val
}

// SetCompleted sets the value of Completed.
func (s *QueryInfo) SetCompleted(val OptBool) {
	s.Completed = val
}

// SetProcessing sets the value of Processing.
func (s *QueryInfo) SetProcessing(val OptBool) {
	s.Processing = val
}

type ReconcileConfigsBadRequest Error

func (*ReconcileConfigsBadRequest) reconcileConfigsRes() {}

type ReconcileConfigsInternalServerError Error

func (*ReconcileConfigsInternalServerError) reconcileConfigsRes() {}

// Describes Configuration Reconciliation operation(s) for a resource.
// Ref: #/components/schemas/ReconciliationForResource
type ReconciliationForResource struct {
	// Target resource ID.
	ResourceId string `json:"resourceId"`
	// All application flag. Indicates if all applicable config drifts must be applied.
	ApplyAll bool `json:"applyAll"`
}

// GetResourceId returns the value of ResourceId.
func (s *ReconciliationForResource) GetResourceId() string {
	return s.ResourceId
}

// GetApplyAll returns the value of ApplyAll.
func (s *ReconciliationForResource) GetApplyAll() bool {
	return s.ApplyAll
}

// SetResourceId sets the value of ResourceId.
func (s *ReconciliationForResource) SetResourceId(val string) {
	s.ResourceId = val
}

// SetApplyAll sets the value of ApplyAll.
func (s *ReconciliationForResource) SetApplyAll(val bool) {
	s.ApplyAll = val
}

type RefreshAccessTokenBadRequest Error

func (*RefreshAccessTokenBadRequest) refreshAccessTokenRes() {}

type RefreshAccessTokenInternalServerError Error

func (*RefreshAccessTokenInternalServerError) refreshAccessTokenRes() {}

type RefreshAccessTokenNotFound Error

func (*RefreshAccessTokenNotFound) refreshAccessTokenRes() {}

type RefreshAccessTokenOKApplicationJSON string

func (*RefreshAccessTokenOKApplicationJSON) refreshAccessTokenRes() {}

// This contains refresh token id for the user API access.
// Ref: #/components/schemas/RefreshToken
type RefreshToken struct {
	// Refresh token id that can be used to request new access token.
	ID OptString `json:"id"`
}

// GetID returns the value of ID.
func (s *RefreshToken) GetID() OptString {
	return s.ID
}

// SetID sets the value of ID.
func (s *RefreshToken) SetID(val OptString) {
	s.ID = val
}

// Model for releases with their description and product version.
// Ref: #/components/schemas/Release
type Release struct {
	// Name of the product e.g. "VCF".
	Product string `json:"product"`
	// Version of the release.
	Version string `json:"version"`
	// Minimum compatible VCF version, used to represent compatibility of SDDC Manager and VMware BOM
	// components.
	MinCompatibleVcfVersion string `json:"minCompatibleVcfVersion"`
	// Release description with all major features.
	Description string `json:"description"`
	// Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format.
	ReleaseDate string `json:"releaseDate"`
	// Release bill of materials.
	Bom []ProductVersion `json:"bom"`
	// [Deprecated] Whether bundle is applicable or not.
	//
	// Deprecated: schema marks this property as deprecated.
	IsApplicable OptBool `json:"isApplicable"`
	// [Deprecated] Incompatibility reason for not applicable.
	//
	// Deprecated: schema marks this property as deprecated.
	NotApplicableReason OptString `json:"notApplicableReason"`
	// Release sku specific patch and bill of materials.
	Sku []SkuBomDetails `json:"sku"`
	// Collection of release updates.
	Updates []ReleaseUpdate `json:"updates"`
	// List of patch bundles in this release.
	PatchBundles []PatchBundle `json:"patchBundles"`
	// Release eol information e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601
	// format.
	Eol OptString `json:"eol"`
	// Custom upgrade order. Comma separated list of components in upgrade order. Supported components
	// types: NSX_T_MANAGER, VCENTER, ESX_HOST.
	UpgradeOrder OptString `json:"upgradeOrder"`
}

// GetProduct returns the value of Product.
func (s *Release) GetProduct() string {
	return s.Product
}

// GetVersion returns the value of Version.
func (s *Release) GetVersion() string {
	return s.Version
}

// GetMinCompatibleVcfVersion returns the value of MinCompatibleVcfVersion.
func (s *Release) GetMinCompatibleVcfVersion() string {
	return s.MinCompatibleVcfVersion
}

// GetDescription returns the value of Description.
func (s *Release) GetDescription() string {
	return s.Description
}

// GetReleaseDate returns the value of ReleaseDate.
func (s *Release) GetReleaseDate() string {
	return s.ReleaseDate
}

// GetBom returns the value of Bom.
func (s *Release) GetBom() []ProductVersion {
	return s.Bom
}

// GetIsApplicable returns the value of IsApplicable.
func (s *Release) GetIsApplicable() OptBool {
	return s.IsApplicable
}

// GetNotApplicableReason returns the value of NotApplicableReason.
func (s *Release) GetNotApplicableReason() OptString {
	return s.NotApplicableReason
}

// GetSku returns the value of Sku.
func (s *Release) GetSku() []SkuBomDetails {
	return s.Sku
}

// GetUpdates returns the value of Updates.
func (s *Release) GetUpdates() []ReleaseUpdate {
	return s.Updates
}

// GetPatchBundles returns the value of PatchBundles.
func (s *Release) GetPatchBundles() []PatchBundle {
	return s.PatchBundles
}

// GetEol returns the value of Eol.
func (s *Release) GetEol() OptString {
	return s.Eol
}

// GetUpgradeOrder returns the value of UpgradeOrder.
func (s *Release) GetUpgradeOrder() OptString {
	return s.UpgradeOrder
}

// SetProduct sets the value of Product.
func (s *Release) SetProduct(val string) {
	s.Product = val
}

// SetVersion sets the value of Version.
func (s *Release) SetVersion(val string) {
	s.Version = val
}

// SetMinCompatibleVcfVersion sets the value of MinCompatibleVcfVersion.
func (s *Release) SetMinCompatibleVcfVersion(val string) {
	s.MinCompatibleVcfVersion = val
}

// SetDescription sets the value of Description.
func (s *Release) SetDescription(val string) {
	s.Description = val
}

// SetReleaseDate sets the value of ReleaseDate.
func (s *Release) SetReleaseDate(val string) {
	s.ReleaseDate = val
}

// SetBom sets the value of Bom.
func (s *Release) SetBom(val []ProductVersion) {
	s.Bom = val
}

// SetIsApplicable sets the value of IsApplicable.
func (s *Release) SetIsApplicable(val OptBool) {
	s.IsApplicable = val
}

// SetNotApplicableReason sets the value of NotApplicableReason.
func (s *Release) SetNotApplicableReason(val OptString) {
	s.NotApplicableReason = val
}

// SetSku sets the value of Sku.
func (s *Release) SetSku(val []SkuBomDetails) {
	s.Sku = val
}

// SetUpdates sets the value of Updates.
func (s *Release) SetUpdates(val []ReleaseUpdate) {
	s.Updates = val
}

// SetPatchBundles sets the value of PatchBundles.
func (s *Release) SetPatchBundles(val []PatchBundle) {
	s.PatchBundles = val
}

// SetEol sets the value of Eol.
func (s *Release) SetEol(val OptString) {
	s.Eol = val
}

// SetUpgradeOrder sets the value of UpgradeOrder.
func (s *Release) SetUpgradeOrder(val OptString) {
	s.UpgradeOrder = val
}

func (*Release) getSystemReleaseRes() {}

// Update to a given release.
// Ref: #/components/schemas/ReleaseUpdate
type ReleaseUpdate struct {
	// Release version.
	ID string `json:"id"`
	// Product name for which the release update is provided.
	ProductName string `json:"productName"`
	// Base product version for the release.
	BaseProductVersion string `json:"baseProductVersion"`
	// Description of the release update.
	Description string `json:"description"`
	// URL to the release update.
	ReleaseUpdateURL OptString `json:"releaseUpdateURL"`
	// Release date e.g. 2020-06-08T02:20:15.844Z in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format.
	ReleaseDate string `json:"releaseDate"`
}

// GetID returns the value of ID.
func (s *ReleaseUpdate) GetID() string {
	return s.ID
}

// GetProductName returns the value of ProductName.
func (s *ReleaseUpdate) GetProductName() string {
	return s.ProductName
}

// GetBaseProductVersion returns the value of BaseProductVersion.
func (s *ReleaseUpdate) GetBaseProductVersion() string {
	return s.BaseProductVersion
}

// GetDescription returns the value of Description.
func (s *ReleaseUpdate) GetDescription() string {
	return s.Description
}

// GetReleaseUpdateURL returns the value of ReleaseUpdateURL.
func (s *ReleaseUpdate) GetReleaseUpdateURL() OptString {
	return s.ReleaseUpdateURL
}

// GetReleaseDate returns the value of ReleaseDate.
func (s *ReleaseUpdate) GetReleaseDate() string {
	return s.ReleaseDate
}

// SetID sets the value of ID.
func (s *ReleaseUpdate) SetID(val string) {
	s.ID = val
}

// SetProductName sets the value of ProductName.
func (s *ReleaseUpdate) SetProductName(val string) {
	s.ProductName = val
}

// SetBaseProductVersion sets the value of BaseProductVersion.
func (s *ReleaseUpdate) SetBaseProductVersion(val string) {
	s.BaseProductVersion = val
}

// SetDescription sets the value of Description.
func (s *ReleaseUpdate) SetDescription(val string) {
	s.Description = val
}

// SetReleaseUpdateURL sets the value of ReleaseUpdateURL.
func (s *ReleaseUpdate) SetReleaseUpdateURL(val OptString) {
	s.ReleaseUpdateURL = val
}

// SetReleaseDate sets the value of ReleaseDate.
func (s *ReleaseUpdate) SetReleaseDate(val string) {
	s.ReleaseDate = val
}

// Remote Datastore Info.
// Ref: #/components/schemas/RemoteDatastoreInfo
type RemoteDatastoreInfo struct {
	// Server cluster.
	ServerCluster OptString `json:"serverCluster"`
	// Remote Datastore.
	RemoteDatastore OptString `json:"remoteDatastore"`
}

// GetServerCluster returns the value of ServerCluster.
func (s *RemoteDatastoreInfo) GetServerCluster() OptString {
	return s.ServerCluster
}

// GetRemoteDatastore returns the value of RemoteDatastore.
func (s *RemoteDatastoreInfo) GetRemoteDatastore() OptString {
	return s.RemoteDatastore
}

// SetServerCluster sets the value of ServerCluster.
func (s *RemoteDatastoreInfo) SetServerCluster(val OptString) {
	s.ServerCluster = val
}

// SetRemoteDatastore sets the value of RemoteDatastore.
func (s *RemoteDatastoreInfo) SetRemoteDatastore(val OptString) {
	s.RemoteDatastore = val
}

type RemoveCertificateAuthorityBadRequest Error

func (*RemoveCertificateAuthorityBadRequest) removeCertificateAuthorityRes() {}

type RemoveCertificateAuthorityInternalServerError Error

func (*RemoveCertificateAuthorityInternalServerError) removeCertificateAuthorityRes() {}

// RemoveCertificateAuthorityNoContent is response for RemoveCertificateAuthority operation.
type RemoveCertificateAuthorityNoContent struct{}

func (*RemoveCertificateAuthorityNoContent) removeCertificateAuthorityRes() {}

type RemoveCertificateAuthorityNotFound Error

func (*RemoveCertificateAuthorityNotFound) removeCertificateAuthorityRes() {}

type RemoveDatastoreFromClusterAccepted Task

func (*RemoveDatastoreFromClusterAccepted) removeDatastoreFromClusterRes() {}

type RemoveDatastoreFromClusterBadRequest Error

func (*RemoveDatastoreFromClusterBadRequest) removeDatastoreFromClusterRes() {}

type RemoveDatastoreFromClusterInternalServerError Error

func (*RemoveDatastoreFromClusterInternalServerError) removeDatastoreFromClusterRes() {}

type RemoveDatastoreFromClusterNotFound Error

func (*RemoveDatastoreFromClusterNotFound) removeDatastoreFromClusterRes() {}

type RemoveDatastoreFromClusterOK Task

func (*RemoveDatastoreFromClusterOK) removeDatastoreFromClusterRes() {}

// RemoveLicenseKeyNoContent is response for RemoveLicenseKey operation.
type RemoveLicenseKeyNoContent struct{}

func (*RemoveLicenseKeyNoContent) removeLicenseKeyRes() {}

// RemoveLicenseKeyNotFound is response for RemoveLicenseKey operation.
type RemoveLicenseKeyNotFound struct{}

func (*RemoveLicenseKeyNotFound) removeLicenseKeyRes() {}

type RemoveTagsFromClusterBadRequest Error

func (*RemoveTagsFromClusterBadRequest) removeTagsFromClusterRes() {}

type RemoveTagsFromClusterInternalServerError Error

func (*RemoveTagsFromClusterInternalServerError) removeTagsFromClusterRes() {}

type RemoveTagsFromDomainBadRequest Error

func (*RemoveTagsFromDomainBadRequest) removeTagsFromDomainRes() {}

type RemoveTagsFromDomainInternalServerError Error

func (*RemoveTagsFromDomainInternalServerError) removeTagsFromDomainRes() {}

type RemoveTagsFromHostBadRequest Error

func (*RemoveTagsFromHostBadRequest) removeTagsFromHostRes() {}

type RemoveTagsFromHostInternalServerError Error

func (*RemoveTagsFromHostInternalServerError) removeTagsFromHostRes() {}

type RemoveUserInternalServerError Error

func (*RemoveUserInternalServerError) removeUserRes() {}

// RemoveUserNoContent is response for RemoveUser operation.
type RemoveUserNoContent struct{}

func (*RemoveUserNoContent) removeUserRes() {}

type RemoveUserNotFound Error

func (*RemoveUserNotFound) removeUserRes() {}

type RemoveVasaProviderBadRequest Error

func (*RemoveVasaProviderBadRequest) removeVasaProviderRes() {}

type RemoveVasaProviderInternalServerError Error

func (*RemoveVasaProviderInternalServerError) removeVasaProviderRes() {}

// RemoveVasaProviderNoContent is response for RemoveVasaProvider operation.
type RemoveVasaProviderNoContent struct{}

func (*RemoveVasaProviderNoContent) removeVasaProviderRes() {}

type RemoveVasaProviderNotFound Error

func (*RemoveVasaProviderNotFound) removeVasaProviderRes() {}

type RemoveVasaProviderStorageContainerBadRequest Error

func (*RemoveVasaProviderStorageContainerBadRequest) removeVasaProviderStorageContainerRes() {}

type RemoveVasaProviderStorageContainerInternalServerError Error

func (*RemoveVasaProviderStorageContainerInternalServerError) removeVasaProviderStorageContainerRes() {
}

// RemoveVasaProviderStorageContainerNoContent is response for RemoveVasaProviderStorageContainer operation.
type RemoveVasaProviderStorageContainerNoContent struct{}

func (*RemoveVasaProviderStorageContainerNoContent) removeVasaProviderStorageContainerRes() {}

type RemoveVasaProviderStorageContainerNotFound Error

func (*RemoveVasaProviderStorageContainerNotFound) removeVasaProviderStorageContainerRes() {}

type RenameCustomIsoByIdBadRequest Error

func (*RenameCustomIsoByIdBadRequest) renameCustomIsoByIdRes() {}

type RenameCustomIsoByIdInternalServerError Error

func (*RenameCustomIsoByIdInternalServerError) renameCustomIsoByIdRes() {}

type RenameCustomIsoByIdNotFound Error

func (*RenameCustomIsoByIdNotFound) renameCustomIsoByIdRes() {}

type RenamePersonalityByIdBadRequest Error

func (*RenamePersonalityByIdBadRequest) renamePersonalityByIdRes() {}

type RenamePersonalityByIdInternalServerError Error

func (*RenamePersonalityByIdInternalServerError) renamePersonalityByIdRes() {}

type RenamePersonalityByIdNotFound Error

func (*RenamePersonalityByIdNotFound) renamePersonalityByIdRes() {}

type ReplaceCertificatesBadRequest Error

func (*ReplaceCertificatesBadRequest) replaceCertificatesRes() {}

type ReplaceCertificatesConflict Error

func (*ReplaceCertificatesConflict) replaceCertificatesRes() {}

type ReplaceCertificatesForbidden Error

func (*ReplaceCertificatesForbidden) replaceCertificatesRes() {}

type ReplaceCertificatesInternalServerError Error

func (*ReplaceCertificatesInternalServerError) replaceCertificatesRes() {}

type ReplaceCertificatesNotFound Error

func (*ReplaceCertificatesNotFound) replaceCertificatesRes() {}

type ReplaceResourceCertificatesInternalServerError Error

func (*ReplaceResourceCertificatesInternalServerError) replaceResourceCertificatesRes() {}

type ReplaceResourceCertificatesNotFound Error

func (*ReplaceResourceCertificatesNotFound) replaceResourceCertificatesRes() {}

// Represents the resource in the system.
// Ref: #/components/schemas/Resource
type Resource struct {
	// Resource ID.
	ResourceId string `json:"resourceId"`
	// Resource FQDN.
	Fqdn OptString `json:"fqdn"`
	// Resource type.
	Type string `json:"type"`
	// Name of the resource.
	Name OptString `json:"name"`
	// Subject alternative name(s).
	Sans []string `json:"sans"`
}

// GetResourceId returns the value of ResourceId.
func (s *Resource) GetResourceId() string {
	return s.ResourceId
}

// GetFqdn returns the value of Fqdn.
func (s *Resource) GetFqdn() OptString {
	return s.Fqdn
}

// GetType returns the value of Type.
func (s *Resource) GetType() string {
	return s.Type
}

// GetName returns the value of Name.
func (s *Resource) GetName() OptString {
	return s.Name
}

// GetSans returns the value of Sans.
func (s *Resource) GetSans() []string {
	return s.Sans
}

// SetResourceId sets the value of ResourceId.
func (s *Resource) SetResourceId(val string) {
	s.ResourceId = val
}

// SetFqdn sets the value of Fqdn.
func (s *Resource) SetFqdn(val OptString) {
	s.Fqdn = val
}

// SetType sets the value of Type.
func (s *Resource) SetType(val string) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *Resource) SetName(val OptString) {
	s.Name = val
}

// SetSans sets the value of Sans.
func (s *Resource) SetSans(val []string) {
	s.Sans = val
}

// This specification contains resource certificate details. Either resourceId or resourceFqdn should
// be provided. Either certificateChain or both resourceCertificate and caCertificate should be
// provided.
// Ref: #/components/schemas/ResourceCertificateSpec
type ResourceCertificateSpec struct {
	// Resource ID.
	ResourceId OptString `json:"resourceId"`
	// Resource FQDN.
	ResourceFqdn OptString `json:"resourceFqdn"`
	// Resource Certificate.
	ResourceCertificate OptString `json:"resourceCertificate"`
	// CA Certificate.
	CaCertificate OptString `json:"caCertificate"`
	// Certificate Chain.
	CertificateChain OptString `json:"certificateChain"`
}

// GetResourceId returns the value of ResourceId.
func (s *ResourceCertificateSpec) GetResourceId() OptString {
	return s.ResourceId
}

// GetResourceFqdn returns the value of ResourceFqdn.
func (s *ResourceCertificateSpec) GetResourceFqdn() OptString {
	return s.ResourceFqdn
}

// GetResourceCertificate returns the value of ResourceCertificate.
func (s *ResourceCertificateSpec) GetResourceCertificate() OptString {
	return s.ResourceCertificate
}

// GetCaCertificate returns the value of CaCertificate.
func (s *ResourceCertificateSpec) GetCaCertificate() OptString {
	return s.CaCertificate
}

// GetCertificateChain returns the value of CertificateChain.
func (s *ResourceCertificateSpec) GetCertificateChain() OptString {
	return s.CertificateChain
}

// SetResourceId sets the value of ResourceId.
func (s *ResourceCertificateSpec) SetResourceId(val OptString) {
	s.ResourceId = val
}

// SetResourceFqdn sets the value of ResourceFqdn.
func (s *ResourceCertificateSpec) SetResourceFqdn(val OptString) {
	s.ResourceFqdn = val
}

// SetResourceCertificate sets the value of ResourceCertificate.
func (s *ResourceCertificateSpec) SetResourceCertificate(val OptString) {
	s.ResourceCertificate = val
}

// SetCaCertificate sets the value of CaCertificate.
func (s *ResourceCertificateSpec) SetCaCertificate(val OptString) {
	s.CaCertificate = val
}

// SetCertificateChain sets the value of CertificateChain.
func (s *ResourceCertificateSpec) SetCertificateChain(val OptString) {
	s.CertificateChain = val
}

// Represents a resource along with its list of credentials to be changed.
// Ref: #/components/schemas/ResourceCredentials
type ResourceCredentials struct {
	// Resource name.
	ResourceName OptString `json:"resourceName"`
	// Resource ID.
	ResourceId OptString `json:"resourceId"`
	// Authenticated Resource Type.
	ResourceType string `json:"resourceType"`
	// Credentials of the resource.
	Credentials []BaseCredential `json:"credentials"`
}

// GetResourceName returns the value of ResourceName.
func (s *ResourceCredentials) GetResourceName() OptString {
	return s.ResourceName
}

// GetResourceId returns the value of ResourceId.
func (s *ResourceCredentials) GetResourceId() OptString {
	return s.ResourceId
}

// GetResourceType returns the value of ResourceType.
func (s *ResourceCredentials) GetResourceType() string {
	return s.ResourceType
}

// GetCredentials returns the value of Credentials.
func (s *ResourceCredentials) GetCredentials() []BaseCredential {
	return s.Credentials
}

// SetResourceName sets the value of ResourceName.
func (s *ResourceCredentials) SetResourceName(val OptString) {
	s.ResourceName = val
}

// SetResourceId sets the value of ResourceId.
func (s *ResourceCredentials) SetResourceId(val OptString) {
	s.ResourceId = val
}

// SetResourceType sets the value of ResourceType.
func (s *ResourceCredentials) SetResourceType(val string) {
	s.ResourceType = val
}

// SetCredentials sets the value of Credentials.
func (s *ResourceCredentials) SetCredentials(val []BaseCredential) {
	s.Credentials = val
}

// Information about the domain the resource belongs to.
// Ref: #/components/schemas/ResourceDomainInfo
type ResourceDomainInfo struct {
	// Id of the domain.
	DomainId OptString `json:"domainId"`
	// Name of the domain.
	DomainName OptString `json:"domainName"`
	// Type of the domain.
	DomainType OptResourceDomainInfoDomainType `json:"domainType"`
}

// GetDomainId returns the value of DomainId.
func (s *ResourceDomainInfo) GetDomainId() OptString {
	return s.DomainId
}

// GetDomainName returns the value of DomainName.
func (s *ResourceDomainInfo) GetDomainName() OptString {
	return s.DomainName
}

// GetDomainType returns the value of DomainType.
func (s *ResourceDomainInfo) GetDomainType() OptResourceDomainInfoDomainType {
	return s.DomainType
}

// SetDomainId sets the value of DomainId.
func (s *ResourceDomainInfo) SetDomainId(val OptString) {
	s.DomainId = val
}

// SetDomainName sets the value of DomainName.
func (s *ResourceDomainInfo) SetDomainName(val OptString) {
	s.DomainName = val
}

// SetDomainType sets the value of DomainType.
func (s *ResourceDomainInfo) SetDomainType(val OptResourceDomainInfoDomainType) {
	s.DomainType = val
}

// Type of the domain.
type ResourceDomainInfoDomainType string

const (
	ResourceDomainInfoDomainTypeMANAGEMENT ResourceDomainInfoDomainType = "MANAGEMENT"
	ResourceDomainInfoDomainTypeVI         ResourceDomainInfoDomainType = "VI"
)

// AllValues returns all ResourceDomainInfoDomainType values.
func (ResourceDomainInfoDomainType) AllValues() []ResourceDomainInfoDomainType {
	return []ResourceDomainInfoDomainType{
		ResourceDomainInfoDomainTypeMANAGEMENT,
		ResourceDomainInfoDomainTypeVI,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourceDomainInfoDomainType) MarshalText() ([]byte, error) {
	switch s {
	case ResourceDomainInfoDomainTypeMANAGEMENT:
		return []byte(s), nil
	case ResourceDomainInfoDomainTypeVI:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourceDomainInfoDomainType) UnmarshalText(data []byte) error {
	switch ResourceDomainInfoDomainType(data) {
	case ResourceDomainInfoDomainTypeMANAGEMENT:
		*s = ResourceDomainInfoDomainTypeMANAGEMENT
		return nil
	case ResourceDomainInfoDomainTypeVI:
		*s = ResourceDomainInfoDomainTypeVI
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines a resource functionality specification.
// Ref: #/components/schemas/ResourceFunctionalities
type ResourceFunctionalities struct {
	// Type of the resource.
	ResourceType string `json:"resourceType"`
	// ID of the resource.
	ResourceId OptString `json:"resourceId"`
	// List of functionalities associated with the resource.
	Functionalities []Functionality `json:"functionalities"`
}

// GetResourceType returns the value of ResourceType.
func (s *ResourceFunctionalities) GetResourceType() string {
	return s.ResourceType
}

// GetResourceId returns the value of ResourceId.
func (s *ResourceFunctionalities) GetResourceId() OptString {
	return s.ResourceId
}

// GetFunctionalities returns the value of Functionalities.
func (s *ResourceFunctionalities) GetFunctionalities() []Functionality {
	return s.Functionalities
}

// SetResourceType sets the value of ResourceType.
func (s *ResourceFunctionalities) SetResourceType(val string) {
	s.ResourceType = val
}

// SetResourceId sets the value of ResourceId.
func (s *ResourceFunctionalities) SetResourceId(val OptString) {
	s.ResourceId = val
}

// SetFunctionalities sets the value of Functionalities.
func (s *ResourceFunctionalities) SetFunctionalities(val []Functionality) {
	s.Functionalities = val
}

// Defines a resource functionality caller specification.
// Ref: #/components/schemas/ResourceFunctionalitiesCaller
type ResourceFunctionalitiesCaller struct {
	// The identifier of the operation associated with the resource functionalities.
	OperationId OptString `json:"operationId"`
	// The name of the operation associated with the resource functionalities.
	OperationName OptString `json:"operationName"`
	// The identifier of the service associated with the resource functionalities.
	ServiceId OptString `json:"serviceId"`
	// List of resource functionalities associated with the caller.
	ResourceFunctionalities []ResourceFunctionalities `json:"resourceFunctionalities"`
}

// GetOperationId returns the value of OperationId.
func (s *ResourceFunctionalitiesCaller) GetOperationId() OptString {
	return s.OperationId
}

// GetOperationName returns the value of OperationName.
func (s *ResourceFunctionalitiesCaller) GetOperationName() OptString {
	return s.OperationName
}

// GetServiceId returns the value of ServiceId.
func (s *ResourceFunctionalitiesCaller) GetServiceId() OptString {
	return s.ServiceId
}

// GetResourceFunctionalities returns the value of ResourceFunctionalities.
func (s *ResourceFunctionalitiesCaller) GetResourceFunctionalities() []ResourceFunctionalities {
	return s.ResourceFunctionalities
}

// SetOperationId sets the value of OperationId.
func (s *ResourceFunctionalitiesCaller) SetOperationId(val OptString) {
	s.OperationId = val
}

// SetOperationName sets the value of OperationName.
func (s *ResourceFunctionalitiesCaller) SetOperationName(val OptString) {
	s.OperationName = val
}

// SetServiceId sets the value of ServiceId.
func (s *ResourceFunctionalitiesCaller) SetServiceId(val OptString) {
	s.ServiceId = val
}

// SetResourceFunctionalities sets the value of ResourceFunctionalities.
func (s *ResourceFunctionalitiesCaller) SetResourceFunctionalities(val []ResourceFunctionalities) {
	s.ResourceFunctionalities = val
}

func (*ResourceFunctionalitiesCaller) updateResourcesFunctionalitiesRes() {}

// Defines a resource functionality caller specification.
// Ref: #/components/schemas/ResourceFunctionalitiesGlobalConfiguration
type ResourceFunctionalitiesGlobalConfiguration struct {
	// Global flag representing if all of the VMware Cloud Foundation operations are allowed or not.
	IsAllowed OptBool `json:"isAllowed"`
	// The localized error message.
	ErrorMessage OptString `json:"errorMessage"`
}

// GetIsAllowed returns the value of IsAllowed.
func (s *ResourceFunctionalitiesGlobalConfiguration) GetIsAllowed() OptBool {
	return s.IsAllowed
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *ResourceFunctionalitiesGlobalConfiguration) GetErrorMessage() OptString {
	return s.ErrorMessage
}

// SetIsAllowed sets the value of IsAllowed.
func (s *ResourceFunctionalitiesGlobalConfiguration) SetIsAllowed(val OptBool) {
	s.IsAllowed = val
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *ResourceFunctionalitiesGlobalConfiguration) SetErrorMessage(val OptString) {
	s.ErrorMessage = val
}

func (*ResourceFunctionalitiesGlobalConfiguration) getResourcesFunctionalitiesAllowedGlobalRes() {}

// Defines a resource functionality global caller specification.
// Ref: #/components/schemas/ResourceFunctionalitiesGlobalConfigurationCaller
type ResourceFunctionalitiesGlobalConfigurationCaller struct {
	// The identifier of the operation associated with the resource functionalities.
	OperationId OptString `json:"operationId"`
	// The name of the operation associated with the resource functionalities.
	OperationName OptString `json:"operationName"`
	// The identifier of the service associated with the resource functionalities.
	ServiceId OptString `json:"serviceId"`
	// Global flag representing if all of the VMware Cloud Foundation operations are allowed or not.
	IsAllowed OptBool `json:"isAllowed"`
}

// GetOperationId returns the value of OperationId.
func (s *ResourceFunctionalitiesGlobalConfigurationCaller) GetOperationId() OptString {
	return s.OperationId
}

// GetOperationName returns the value of OperationName.
func (s *ResourceFunctionalitiesGlobalConfigurationCaller) GetOperationName() OptString {
	return s.OperationName
}

// GetServiceId returns the value of ServiceId.
func (s *ResourceFunctionalitiesGlobalConfigurationCaller) GetServiceId() OptString {
	return s.ServiceId
}

// GetIsAllowed returns the value of IsAllowed.
func (s *ResourceFunctionalitiesGlobalConfigurationCaller) GetIsAllowed() OptBool {
	return s.IsAllowed
}

// SetOperationId sets the value of OperationId.
func (s *ResourceFunctionalitiesGlobalConfigurationCaller) SetOperationId(val OptString) {
	s.OperationId = val
}

// SetOperationName sets the value of OperationName.
func (s *ResourceFunctionalitiesGlobalConfigurationCaller) SetOperationName(val OptString) {
	s.OperationName = val
}

// SetServiceId sets the value of ServiceId.
func (s *ResourceFunctionalitiesGlobalConfigurationCaller) SetServiceId(val OptString) {
	s.ServiceId = val
}

// SetIsAllowed sets the value of IsAllowed.
func (s *ResourceFunctionalitiesGlobalConfigurationCaller) SetIsAllowed(val OptBool) {
	s.IsAllowed = val
}

func (*ResourceFunctionalitiesGlobalConfigurationCaller) updateResourcesFunctionalities1Res() {}

// Resource Functionality Global Caller update specification.
// Ref: #/components/schemas/ResourceFunctionalitiesGlobalUpdateSpec
type ResourceFunctionalitiesGlobalUpdateSpec struct {
	// The identifier of the service associated with the resource functionalities.
	ServiceId string `json:"serviceId"`
	// The name of the operation associated with the resource functionalities.
	OperationName string `json:"operationName"`
	// The identifier of the operation associated with the resource functionalities.
	OperationId string `json:"operationId"`
	// Flag indicating if all of the functionalities are allowed.
	IsAllowed bool `json:"isAllowed"`
}

// GetServiceId returns the value of ServiceId.
func (s *ResourceFunctionalitiesGlobalUpdateSpec) GetServiceId() string {
	return s.ServiceId
}

// GetOperationName returns the value of OperationName.
func (s *ResourceFunctionalitiesGlobalUpdateSpec) GetOperationName() string {
	return s.OperationName
}

// GetOperationId returns the value of OperationId.
func (s *ResourceFunctionalitiesGlobalUpdateSpec) GetOperationId() string {
	return s.OperationId
}

// GetIsAllowed returns the value of IsAllowed.
func (s *ResourceFunctionalitiesGlobalUpdateSpec) GetIsAllowed() bool {
	return s.IsAllowed
}

// SetServiceId sets the value of ServiceId.
func (s *ResourceFunctionalitiesGlobalUpdateSpec) SetServiceId(val string) {
	s.ServiceId = val
}

// SetOperationName sets the value of OperationName.
func (s *ResourceFunctionalitiesGlobalUpdateSpec) SetOperationName(val string) {
	s.OperationName = val
}

// SetOperationId sets the value of OperationId.
func (s *ResourceFunctionalitiesGlobalUpdateSpec) SetOperationId(val string) {
	s.OperationId = val
}

// SetIsAllowed sets the value of IsAllowed.
func (s *ResourceFunctionalitiesGlobalUpdateSpec) SetIsAllowed(val bool) {
	s.IsAllowed = val
}

// Resource Functionality Caller update specification.
// Ref: #/components/schemas/ResourceFunctionalitiesUpdateSpec
type ResourceFunctionalitiesUpdateSpec struct {
	// The identifier of the service associated with the resource functionalities.
	ServiceId string `json:"serviceId"`
	// The name of the operation associated with the resource functionalities.
	OperationName string `json:"operationName"`
	// The identifier of the operation associated with the resource functionalities.
	OperationId string `json:"operationId"`
	// List of resource functionalities associated with the caller.
	ResourceFunctionalities []ResourceFunctionalities `json:"resourceFunctionalities"`
}

// GetServiceId returns the value of ServiceId.
func (s *ResourceFunctionalitiesUpdateSpec) GetServiceId() string {
	return s.ServiceId
}

// GetOperationName returns the value of OperationName.
func (s *ResourceFunctionalitiesUpdateSpec) GetOperationName() string {
	return s.OperationName
}

// GetOperationId returns the value of OperationId.
func (s *ResourceFunctionalitiesUpdateSpec) GetOperationId() string {
	return s.OperationId
}

// GetResourceFunctionalities returns the value of ResourceFunctionalities.
func (s *ResourceFunctionalitiesUpdateSpec) GetResourceFunctionalities() []ResourceFunctionalities {
	return s.ResourceFunctionalities
}

// SetServiceId sets the value of ServiceId.
func (s *ResourceFunctionalitiesUpdateSpec) SetServiceId(val string) {
	s.ServiceId = val
}

// SetOperationName sets the value of OperationName.
func (s *ResourceFunctionalitiesUpdateSpec) SetOperationName(val string) {
	s.OperationName = val
}

// SetOperationId sets the value of OperationId.
func (s *ResourceFunctionalitiesUpdateSpec) SetOperationId(val string) {
	s.OperationId = val
}

// SetResourceFunctionalities sets the value of ResourceFunctionalities.
func (s *ResourceFunctionalitiesUpdateSpec) SetResourceFunctionalities(val []ResourceFunctionalities) {
	s.ResourceFunctionalities = val
}

// Resource info.
// Ref: #/components/schemas/ResourceInfo
type ResourceInfo struct {
	// Domain Identifier.
	DomainId string `json:"domainId"`
	// Cluster Id of resourceInfo.
	ClusterId OptString `json:"clusterId"`
	// Host Id of resourceInfo.
	HostId OptString `json:"hostId"`
}

// GetDomainId returns the value of DomainId.
func (s *ResourceInfo) GetDomainId() string {
	return s.DomainId
}

// GetClusterId returns the value of ClusterId.
func (s *ResourceInfo) GetClusterId() OptString {
	return s.ClusterId
}

// GetHostId returns the value of HostId.
func (s *ResourceInfo) GetHostId() OptString {
	return s.HostId
}

// SetDomainId sets the value of DomainId.
func (s *ResourceInfo) SetDomainId(val string) {
	s.DomainId = val
}

// SetClusterId sets the value of ClusterId.
func (s *ResourceInfo) SetClusterId(val OptString) {
	s.ClusterId = val
}

// SetHostId sets the value of HostId.
func (s *ResourceInfo) SetHostId(val OptString) {
	s.HostId = val
}

// Resource Licensing Info.
// Ref: #/components/schemas/ResourceLicensingInfo
type ResourceLicensingInfo struct {
	ResourceInfo ResourceInfo   `json:"resourceInfo"`
	ProductInfo  OptProductInfo `json:"productInfo"`
}

// GetResourceInfo returns the value of ResourceInfo.
func (s *ResourceLicensingInfo) GetResourceInfo() ResourceInfo {
	return s.ResourceInfo
}

// GetProductInfo returns the value of ProductInfo.
func (s *ResourceLicensingInfo) GetProductInfo() OptProductInfo {
	return s.ProductInfo
}

// SetResourceInfo sets the value of ResourceInfo.
func (s *ResourceLicensingInfo) SetResourceInfo(val ResourceInfo) {
	s.ResourceInfo = val
}

// SetProductInfo sets the value of ProductInfo.
func (s *ResourceLicensingInfo) SetProductInfo(val OptProductInfo) {
	s.ProductInfo = val
}

// Spec contains parameters for Resource Pool.
// Ref: #/components/schemas/ResourcePoolSpec
type ResourcePoolSpec struct {
	// Resource Pool name. It will be auto-generated if blank.
	Name OptString `json:"name"`
	// Type of resource pool. One among: management, compute, network.
	Type OptResourcePoolSpecType `json:"type"`
	// CPU reservation percentage, from 0 to 100, default 0.
	CpuReservationPercentage OptInt32 `json:"cpuReservationPercentage"`
	// CPU reservation in Mhz, default 0.
	CpuReservationMhz OptInt64 `json:"cpuReservationMhz"`
	// CPU limit, default -1 (unlimited).
	CpuLimit OptInt64 `json:"cpuLimit"`
	// Is CPU reservation expandable, default true.
	CpuReservationExpandable OptBool `json:"cpuReservationExpandable"`
	// CPU shares level, default 'normal'.
	CpuSharesLevel OptResourcePoolSpecCpuSharesLevel `json:"cpuSharesLevel"`
	// CPU shares value, only relevant when shares level is 'custom', default 0.
	CpuSharesValue OptInt32 `json:"cpuSharesValue"`
	// Memory reservation percentage, from 0 to 100, default 0.
	MemoryReservationPercentage OptInt32 `json:"memoryReservationPercentage"`
	// Memory reservation in MB, default 0.
	MemoryReservationMb OptInt64 `json:"memoryReservationMb"`
	// Memory limit, default -1 (unlimited).
	MemoryLimit OptInt64 `json:"memoryLimit"`
	// Is Memory reservation expandable, default true.
	MemoryReservationExpandable OptBool `json:"memoryReservationExpandable"`
	// Memory shares level. default 'normal'.
	MemorySharesLevel OptResourcePoolSpecMemorySharesLevel `json:"memorySharesLevel"`
	// Memory shares value, only relevant when shares level is 'custom', default 0.
	MemorySharesValue OptInt32 `json:"memorySharesValue"`
}

// GetName returns the value of Name.
func (s *ResourcePoolSpec) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *ResourcePoolSpec) GetType() OptResourcePoolSpecType {
	return s.Type
}

// GetCpuReservationPercentage returns the value of CpuReservationPercentage.
func (s *ResourcePoolSpec) GetCpuReservationPercentage() OptInt32 {
	return s.CpuReservationPercentage
}

// GetCpuReservationMhz returns the value of CpuReservationMhz.
func (s *ResourcePoolSpec) GetCpuReservationMhz() OptInt64 {
	return s.CpuReservationMhz
}

// GetCpuLimit returns the value of CpuLimit.
func (s *ResourcePoolSpec) GetCpuLimit() OptInt64 {
	return s.CpuLimit
}

// GetCpuReservationExpandable returns the value of CpuReservationExpandable.
func (s *ResourcePoolSpec) GetCpuReservationExpandable() OptBool {
	return s.CpuReservationExpandable
}

// GetCpuSharesLevel returns the value of CpuSharesLevel.
func (s *ResourcePoolSpec) GetCpuSharesLevel() OptResourcePoolSpecCpuSharesLevel {
	return s.CpuSharesLevel
}

// GetCpuSharesValue returns the value of CpuSharesValue.
func (s *ResourcePoolSpec) GetCpuSharesValue() OptInt32 {
	return s.CpuSharesValue
}

// GetMemoryReservationPercentage returns the value of MemoryReservationPercentage.
func (s *ResourcePoolSpec) GetMemoryReservationPercentage() OptInt32 {
	return s.MemoryReservationPercentage
}

// GetMemoryReservationMb returns the value of MemoryReservationMb.
func (s *ResourcePoolSpec) GetMemoryReservationMb() OptInt64 {
	return s.MemoryReservationMb
}

// GetMemoryLimit returns the value of MemoryLimit.
func (s *ResourcePoolSpec) GetMemoryLimit() OptInt64 {
	return s.MemoryLimit
}

// GetMemoryReservationExpandable returns the value of MemoryReservationExpandable.
func (s *ResourcePoolSpec) GetMemoryReservationExpandable() OptBool {
	return s.MemoryReservationExpandable
}

// GetMemorySharesLevel returns the value of MemorySharesLevel.
func (s *ResourcePoolSpec) GetMemorySharesLevel() OptResourcePoolSpecMemorySharesLevel {
	return s.MemorySharesLevel
}

// GetMemorySharesValue returns the value of MemorySharesValue.
func (s *ResourcePoolSpec) GetMemorySharesValue() OptInt32 {
	return s.MemorySharesValue
}

// SetName sets the value of Name.
func (s *ResourcePoolSpec) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *ResourcePoolSpec) SetType(val OptResourcePoolSpecType) {
	s.Type = val
}

// SetCpuReservationPercentage sets the value of CpuReservationPercentage.
func (s *ResourcePoolSpec) SetCpuReservationPercentage(val OptInt32) {
	s.CpuReservationPercentage = val
}

// SetCpuReservationMhz sets the value of CpuReservationMhz.
func (s *ResourcePoolSpec) SetCpuReservationMhz(val OptInt64) {
	s.CpuReservationMhz = val
}

// SetCpuLimit sets the value of CpuLimit.
func (s *ResourcePoolSpec) SetCpuLimit(val OptInt64) {
	s.CpuLimit = val
}

// SetCpuReservationExpandable sets the value of CpuReservationExpandable.
func (s *ResourcePoolSpec) SetCpuReservationExpandable(val OptBool) {
	s.CpuReservationExpandable = val
}

// SetCpuSharesLevel sets the value of CpuSharesLevel.
func (s *ResourcePoolSpec) SetCpuSharesLevel(val OptResourcePoolSpecCpuSharesLevel) {
	s.CpuSharesLevel = val
}

// SetCpuSharesValue sets the value of CpuSharesValue.
func (s *ResourcePoolSpec) SetCpuSharesValue(val OptInt32) {
	s.CpuSharesValue = val
}

// SetMemoryReservationPercentage sets the value of MemoryReservationPercentage.
func (s *ResourcePoolSpec) SetMemoryReservationPercentage(val OptInt32) {
	s.MemoryReservationPercentage = val
}

// SetMemoryReservationMb sets the value of MemoryReservationMb.
func (s *ResourcePoolSpec) SetMemoryReservationMb(val OptInt64) {
	s.MemoryReservationMb = val
}

// SetMemoryLimit sets the value of MemoryLimit.
func (s *ResourcePoolSpec) SetMemoryLimit(val OptInt64) {
	s.MemoryLimit = val
}

// SetMemoryReservationExpandable sets the value of MemoryReservationExpandable.
func (s *ResourcePoolSpec) SetMemoryReservationExpandable(val OptBool) {
	s.MemoryReservationExpandable = val
}

// SetMemorySharesLevel sets the value of MemorySharesLevel.
func (s *ResourcePoolSpec) SetMemorySharesLevel(val OptResourcePoolSpecMemorySharesLevel) {
	s.MemorySharesLevel = val
}

// SetMemorySharesValue sets the value of MemorySharesValue.
func (s *ResourcePoolSpec) SetMemorySharesValue(val OptInt32) {
	s.MemorySharesValue = val
}

// CPU shares level, default 'normal'.
type ResourcePoolSpecCpuSharesLevel string

const (
	ResourcePoolSpecCpuSharesLevelCustom ResourcePoolSpecCpuSharesLevel = "custom"
	ResourcePoolSpecCpuSharesLevelHigh   ResourcePoolSpecCpuSharesLevel = "high"
	ResourcePoolSpecCpuSharesLevelLow    ResourcePoolSpecCpuSharesLevel = "low"
	ResourcePoolSpecCpuSharesLevelNormal ResourcePoolSpecCpuSharesLevel = "normal"
)

// AllValues returns all ResourcePoolSpecCpuSharesLevel values.
func (ResourcePoolSpecCpuSharesLevel) AllValues() []ResourcePoolSpecCpuSharesLevel {
	return []ResourcePoolSpecCpuSharesLevel{
		ResourcePoolSpecCpuSharesLevelCustom,
		ResourcePoolSpecCpuSharesLevelHigh,
		ResourcePoolSpecCpuSharesLevelLow,
		ResourcePoolSpecCpuSharesLevelNormal,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourcePoolSpecCpuSharesLevel) MarshalText() ([]byte, error) {
	switch s {
	case ResourcePoolSpecCpuSharesLevelCustom:
		return []byte(s), nil
	case ResourcePoolSpecCpuSharesLevelHigh:
		return []byte(s), nil
	case ResourcePoolSpecCpuSharesLevelLow:
		return []byte(s), nil
	case ResourcePoolSpecCpuSharesLevelNormal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourcePoolSpecCpuSharesLevel) UnmarshalText(data []byte) error {
	switch ResourcePoolSpecCpuSharesLevel(data) {
	case ResourcePoolSpecCpuSharesLevelCustom:
		*s = ResourcePoolSpecCpuSharesLevelCustom
		return nil
	case ResourcePoolSpecCpuSharesLevelHigh:
		*s = ResourcePoolSpecCpuSharesLevelHigh
		return nil
	case ResourcePoolSpecCpuSharesLevelLow:
		*s = ResourcePoolSpecCpuSharesLevelLow
		return nil
	case ResourcePoolSpecCpuSharesLevelNormal:
		*s = ResourcePoolSpecCpuSharesLevelNormal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Memory shares level. default 'normal'.
type ResourcePoolSpecMemorySharesLevel string

const (
	ResourcePoolSpecMemorySharesLevelCustom ResourcePoolSpecMemorySharesLevel = "custom"
	ResourcePoolSpecMemorySharesLevelHigh   ResourcePoolSpecMemorySharesLevel = "high"
	ResourcePoolSpecMemorySharesLevelLow    ResourcePoolSpecMemorySharesLevel = "low"
	ResourcePoolSpecMemorySharesLevelNormal ResourcePoolSpecMemorySharesLevel = "normal"
)

// AllValues returns all ResourcePoolSpecMemorySharesLevel values.
func (ResourcePoolSpecMemorySharesLevel) AllValues() []ResourcePoolSpecMemorySharesLevel {
	return []ResourcePoolSpecMemorySharesLevel{
		ResourcePoolSpecMemorySharesLevelCustom,
		ResourcePoolSpecMemorySharesLevelHigh,
		ResourcePoolSpecMemorySharesLevelLow,
		ResourcePoolSpecMemorySharesLevelNormal,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourcePoolSpecMemorySharesLevel) MarshalText() ([]byte, error) {
	switch s {
	case ResourcePoolSpecMemorySharesLevelCustom:
		return []byte(s), nil
	case ResourcePoolSpecMemorySharesLevelHigh:
		return []byte(s), nil
	case ResourcePoolSpecMemorySharesLevelLow:
		return []byte(s), nil
	case ResourcePoolSpecMemorySharesLevelNormal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourcePoolSpecMemorySharesLevel) UnmarshalText(data []byte) error {
	switch ResourcePoolSpecMemorySharesLevel(data) {
	case ResourcePoolSpecMemorySharesLevelCustom:
		*s = ResourcePoolSpecMemorySharesLevelCustom
		return nil
	case ResourcePoolSpecMemorySharesLevelHigh:
		*s = ResourcePoolSpecMemorySharesLevelHigh
		return nil
	case ResourcePoolSpecMemorySharesLevelLow:
		*s = ResourcePoolSpecMemorySharesLevelLow
		return nil
	case ResourcePoolSpecMemorySharesLevelNormal:
		*s = ResourcePoolSpecMemorySharesLevelNormal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Type of resource pool. One among: management, compute, network.
type ResourcePoolSpecType string

const (
	ResourcePoolSpecTypeManagement ResourcePoolSpecType = "management"
	ResourcePoolSpecTypeCompute    ResourcePoolSpecType = "compute"
	ResourcePoolSpecTypeNetwork    ResourcePoolSpecType = "network"
)

// AllValues returns all ResourcePoolSpecType values.
func (ResourcePoolSpecType) AllValues() []ResourcePoolSpecType {
	return []ResourcePoolSpecType{
		ResourcePoolSpecTypeManagement,
		ResourcePoolSpecTypeCompute,
		ResourcePoolSpecTypeNetwork,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourcePoolSpecType) MarshalText() ([]byte, error) {
	switch s {
	case ResourcePoolSpecTypeManagement:
		return []byte(s), nil
	case ResourcePoolSpecTypeCompute:
		return []byte(s), nil
	case ResourcePoolSpecTypeNetwork:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourcePoolSpecType) UnmarshalText(data []byte) error {
	switch ResourcePoolSpecType(data) {
	case ResourcePoolSpecTypeManagement:
		*s = ResourcePoolSpecTypeManagement
		return nil
	case ResourcePoolSpecTypeCompute:
		*s = ResourcePoolSpecTypeCompute
		return nil
	case ResourcePoolSpecTypeNetwork:
		*s = ResourcePoolSpecTypeNetwork
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Resource Upgrade Specification.
// Ref: #/components/schemas/ResourceUpgradeSpec
type ResourceUpgradeSpec struct {
	// Resource ID for Upgrade.
	ResourceId string `json:"resourceId"`
	// If Resource Type is UNASSIGNED_HOST, set flag for enabling shutting down VM's before Upgrade.
	ShutdownVms OptBool `json:"shutdownVms"`
	// If Resource Type is UNASSIGNED_HOST, set the target version for Upgrade.
	ToVersion OptString `json:"toVersion"`
	// Upgrade Scheduled Time.
	ScheduledTimestamp OptString `json:"scheduledTimestamp"`
	// Flag for enabling Upgrade Now. If true, scheduledTimestamp is ignored.
	UpgradeNow      OptBool            `json:"upgradeNow"`
	PersonalitySpec OptPersonalitySpec `json:"personalitySpec"`
	CustomIsoSpec   OptCustomISOSpec   `json:"customIsoSpec"`
	// Flag for requesting Quick Boot for ESXi upgrade.
	//
	// Deprecated: schema marks this property as deprecated.
	EnableQuickboot OptBool `json:"enableQuickboot"`
	// Flag for requesting Evacuation of Offline VMs for ESXi upgrade.
	//
	// Deprecated: schema marks this property as deprecated.
	EvacuateOfflineVms    OptBool                  `json:"evacuateOfflineVms"`
	EsxUpgradeOptionsSpec OptEsxUpgradeOptionsSpec `json:"esxUpgradeOptionsSpec"`
}

// GetResourceId returns the value of ResourceId.
func (s *ResourceUpgradeSpec) GetResourceId() string {
	return s.ResourceId
}

// GetShutdownVms returns the value of ShutdownVms.
func (s *ResourceUpgradeSpec) GetShutdownVms() OptBool {
	return s.ShutdownVms
}

// GetToVersion returns the value of ToVersion.
func (s *ResourceUpgradeSpec) GetToVersion() OptString {
	return s.ToVersion
}

// GetScheduledTimestamp returns the value of ScheduledTimestamp.
func (s *ResourceUpgradeSpec) GetScheduledTimestamp() OptString {
	return s.ScheduledTimestamp
}

// GetUpgradeNow returns the value of UpgradeNow.
func (s *ResourceUpgradeSpec) GetUpgradeNow() OptBool {
	return s.UpgradeNow
}

// GetPersonalitySpec returns the value of PersonalitySpec.
func (s *ResourceUpgradeSpec) GetPersonalitySpec() OptPersonalitySpec {
	return s.PersonalitySpec
}

// GetCustomIsoSpec returns the value of CustomIsoSpec.
func (s *ResourceUpgradeSpec) GetCustomIsoSpec() OptCustomISOSpec {
	return s.CustomIsoSpec
}

// GetEnableQuickboot returns the value of EnableQuickboot.
func (s *ResourceUpgradeSpec) GetEnableQuickboot() OptBool {
	return s.EnableQuickboot
}

// GetEvacuateOfflineVms returns the value of EvacuateOfflineVms.
func (s *ResourceUpgradeSpec) GetEvacuateOfflineVms() OptBool {
	return s.EvacuateOfflineVms
}

// GetEsxUpgradeOptionsSpec returns the value of EsxUpgradeOptionsSpec.
func (s *ResourceUpgradeSpec) GetEsxUpgradeOptionsSpec() OptEsxUpgradeOptionsSpec {
	return s.EsxUpgradeOptionsSpec
}

// SetResourceId sets the value of ResourceId.
func (s *ResourceUpgradeSpec) SetResourceId(val string) {
	s.ResourceId = val
}

// SetShutdownVms sets the value of ShutdownVms.
func (s *ResourceUpgradeSpec) SetShutdownVms(val OptBool) {
	s.ShutdownVms = val
}

// SetToVersion sets the value of ToVersion.
func (s *ResourceUpgradeSpec) SetToVersion(val OptString) {
	s.ToVersion = val
}

// SetScheduledTimestamp sets the value of ScheduledTimestamp.
func (s *ResourceUpgradeSpec) SetScheduledTimestamp(val OptString) {
	s.ScheduledTimestamp = val
}

// SetUpgradeNow sets the value of UpgradeNow.
func (s *ResourceUpgradeSpec) SetUpgradeNow(val OptBool) {
	s.UpgradeNow = val
}

// SetPersonalitySpec sets the value of PersonalitySpec.
func (s *ResourceUpgradeSpec) SetPersonalitySpec(val OptPersonalitySpec) {
	s.PersonalitySpec = val
}

// SetCustomIsoSpec sets the value of CustomIsoSpec.
func (s *ResourceUpgradeSpec) SetCustomIsoSpec(val OptCustomISOSpec) {
	s.CustomIsoSpec = val
}

// SetEnableQuickboot sets the value of EnableQuickboot.
func (s *ResourceUpgradeSpec) SetEnableQuickboot(val OptBool) {
	s.EnableQuickboot = val
}

// SetEvacuateOfflineVms sets the value of EvacuateOfflineVms.
func (s *ResourceUpgradeSpec) SetEvacuateOfflineVms(val OptBool) {
	s.EvacuateOfflineVms = val
}

// SetEsxUpgradeOptionsSpec sets the value of EsxUpgradeOptionsSpec.
func (s *ResourceUpgradeSpec) SetEsxUpgradeOptionsSpec(val OptEsxUpgradeOptionsSpec) {
	s.EsxUpgradeOptionsSpec = val
}

// Represents a warning associated to a specific resource.
// Ref: #/components/schemas/ResourceWarning
type ResourceWarning struct {
	// ID of the resource warning.
	ID OptString `json:"id"`
	// The warning code.
	WarningCode OptString `json:"warningCode"`
	// The localized warning message.
	Message OptString `json:"message"`
	// The localized remediation warning message.
	RemediationMessage OptString `json:"remediationMessage"`
	// A reference token correlating the warning with the relevant detailed logs. Should be sent to the
	// service provider when reporting issues.
	ReferenceToken OptString `json:"referenceToken"`
	// ID of the associated resource.
	ResourceId OptString `json:"resourceId"`
	// Type of the associated resource.
	ResourceType OptString `json:"resourceType"`
	// Name of the associated resource.
	ResourceName OptString `json:"resourceName"`
	// Type of the warning.
	WarningType OptString `json:"warningType"`
	// Severity of the warning.
	Severity OptString `json:"severity"`
	// Timestamp when the warning occurred.
	OccurredAtTimestamp string `json:"occurredAtTimestamp"`
	// Optional additional context information in a key value form.
	Context        OptResourceWarningContext `json:"context"`
	AssociatedTask OptAssociatedTask         `json:"associatedTask"`
}

// GetID returns the value of ID.
func (s *ResourceWarning) GetID() OptString {
	return s.ID
}

// GetWarningCode returns the value of WarningCode.
func (s *ResourceWarning) GetWarningCode() OptString {
	return s.WarningCode
}

// GetMessage returns the value of Message.
func (s *ResourceWarning) GetMessage() OptString {
	return s.Message
}

// GetRemediationMessage returns the value of RemediationMessage.
func (s *ResourceWarning) GetRemediationMessage() OptString {
	return s.RemediationMessage
}

// GetReferenceToken returns the value of ReferenceToken.
func (s *ResourceWarning) GetReferenceToken() OptString {
	return s.ReferenceToken
}

// GetResourceId returns the value of ResourceId.
func (s *ResourceWarning) GetResourceId() OptString {
	return s.ResourceId
}

// GetResourceType returns the value of ResourceType.
func (s *ResourceWarning) GetResourceType() OptString {
	return s.ResourceType
}

// GetResourceName returns the value of ResourceName.
func (s *ResourceWarning) GetResourceName() OptString {
	return s.ResourceName
}

// GetWarningType returns the value of WarningType.
func (s *ResourceWarning) GetWarningType() OptString {
	return s.WarningType
}

// GetSeverity returns the value of Severity.
func (s *ResourceWarning) GetSeverity() OptString {
	return s.Severity
}

// GetOccurredAtTimestamp returns the value of OccurredAtTimestamp.
func (s *ResourceWarning) GetOccurredAtTimestamp() string {
	return s.OccurredAtTimestamp
}

// GetContext returns the value of Context.
func (s *ResourceWarning) GetContext() OptResourceWarningContext {
	return s.Context
}

// GetAssociatedTask returns the value of AssociatedTask.
func (s *ResourceWarning) GetAssociatedTask() OptAssociatedTask {
	return s.AssociatedTask
}

// SetID sets the value of ID.
func (s *ResourceWarning) SetID(val OptString) {
	s.ID = val
}

// SetWarningCode sets the value of WarningCode.
func (s *ResourceWarning) SetWarningCode(val OptString) {
	s.WarningCode = val
}

// SetMessage sets the value of Message.
func (s *ResourceWarning) SetMessage(val OptString) {
	s.Message = val
}

// SetRemediationMessage sets the value of RemediationMessage.
func (s *ResourceWarning) SetRemediationMessage(val OptString) {
	s.RemediationMessage = val
}

// SetReferenceToken sets the value of ReferenceToken.
func (s *ResourceWarning) SetReferenceToken(val OptString) {
	s.ReferenceToken = val
}

// SetResourceId sets the value of ResourceId.
func (s *ResourceWarning) SetResourceId(val OptString) {
	s.ResourceId = val
}

// SetResourceType sets the value of ResourceType.
func (s *ResourceWarning) SetResourceType(val OptString) {
	s.ResourceType = val
}

// SetResourceName sets the value of ResourceName.
func (s *ResourceWarning) SetResourceName(val OptString) {
	s.ResourceName = val
}

// SetWarningType sets the value of WarningType.
func (s *ResourceWarning) SetWarningType(val OptString) {
	s.WarningType = val
}

// SetSeverity sets the value of Severity.
func (s *ResourceWarning) SetSeverity(val OptString) {
	s.Severity = val
}

// SetOccurredAtTimestamp sets the value of OccurredAtTimestamp.
func (s *ResourceWarning) SetOccurredAtTimestamp(val string) {
	s.OccurredAtTimestamp = val
}

// SetContext sets the value of Context.
func (s *ResourceWarning) SetContext(val OptResourceWarningContext) {
	s.Context = val
}

// SetAssociatedTask sets the value of AssociatedTask.
func (s *ResourceWarning) SetAssociatedTask(val OptAssociatedTask) {
	s.AssociatedTask = val
}

func (*ResourceWarning) createResourceWarningRes() {}
func (*ResourceWarning) getResourceWarningRes()    {}

// Optional additional context information in a key value form.
type ResourceWarningContext map[string]string

func (s *ResourceWarningContext) init() ResourceWarningContext {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Resource Warning creation specification.
// Ref: #/components/schemas/ResourceWarningCreationSpec
type ResourceWarningCreationSpec struct {
	// ID of the resource to which this warning will be associated.
	ResourceId string `json:"resourceId"`
	// Name of the resource to which this warning will be associated.
	ResourceName string `json:"resourceName"`
	// Type of the resource to which this warning will be associated.
	ResourceType ResourceWarningCreationSpecResourceType `json:"resourceType"`
	// The type of the warning.
	WarningType ResourceWarningCreationSpecWarningType `json:"warningType"`
	// The severity of the warning.
	Severity ResourceWarningCreationSpecSeverity `json:"severity"`
	// The Unix epoch timestamp of when the warning occurred.
	OccurredAtTimestamp int64 `json:"occurredAtTimestamp"`
	// Optional additional context information to be associated to the warning.
	Context                OptResourceWarningCreationSpecContext `json:"context"`
	LocalizableWarningPack LocalizableWarningPack                `json:"localizableWarningPack"`
	AssociatedTask         OptAssociatedTask                     `json:"associatedTask"`
}

// GetResourceId returns the value of ResourceId.
func (s *ResourceWarningCreationSpec) GetResourceId() string {
	return s.ResourceId
}

// GetResourceName returns the value of ResourceName.
func (s *ResourceWarningCreationSpec) GetResourceName() string {
	return s.ResourceName
}

// GetResourceType returns the value of ResourceType.
func (s *ResourceWarningCreationSpec) GetResourceType() ResourceWarningCreationSpecResourceType {
	return s.ResourceType
}

// GetWarningType returns the value of WarningType.
func (s *ResourceWarningCreationSpec) GetWarningType() ResourceWarningCreationSpecWarningType {
	return s.WarningType
}

// GetSeverity returns the value of Severity.
func (s *ResourceWarningCreationSpec) GetSeverity() ResourceWarningCreationSpecSeverity {
	return s.Severity
}

// GetOccurredAtTimestamp returns the value of OccurredAtTimestamp.
func (s *ResourceWarningCreationSpec) GetOccurredAtTimestamp() int64 {
	return s.OccurredAtTimestamp
}

// GetContext returns the value of Context.
func (s *ResourceWarningCreationSpec) GetContext() OptResourceWarningCreationSpecContext {
	return s.Context
}

// GetLocalizableWarningPack returns the value of LocalizableWarningPack.
func (s *ResourceWarningCreationSpec) GetLocalizableWarningPack() LocalizableWarningPack {
	return s.LocalizableWarningPack
}

// GetAssociatedTask returns the value of AssociatedTask.
func (s *ResourceWarningCreationSpec) GetAssociatedTask() OptAssociatedTask {
	return s.AssociatedTask
}

// SetResourceId sets the value of ResourceId.
func (s *ResourceWarningCreationSpec) SetResourceId(val string) {
	s.ResourceId = val
}

// SetResourceName sets the value of ResourceName.
func (s *ResourceWarningCreationSpec) SetResourceName(val string) {
	s.ResourceName = val
}

// SetResourceType sets the value of ResourceType.
func (s *ResourceWarningCreationSpec) SetResourceType(val ResourceWarningCreationSpecResourceType) {
	s.ResourceType = val
}

// SetWarningType sets the value of WarningType.
func (s *ResourceWarningCreationSpec) SetWarningType(val ResourceWarningCreationSpecWarningType) {
	s.WarningType = val
}

// SetSeverity sets the value of Severity.
func (s *ResourceWarningCreationSpec) SetSeverity(val ResourceWarningCreationSpecSeverity) {
	s.Severity = val
}

// SetOccurredAtTimestamp sets the value of OccurredAtTimestamp.
func (s *ResourceWarningCreationSpec) SetOccurredAtTimestamp(val int64) {
	s.OccurredAtTimestamp = val
}

// SetContext sets the value of Context.
func (s *ResourceWarningCreationSpec) SetContext(val OptResourceWarningCreationSpecContext) {
	s.Context = val
}

// SetLocalizableWarningPack sets the value of LocalizableWarningPack.
func (s *ResourceWarningCreationSpec) SetLocalizableWarningPack(val LocalizableWarningPack) {
	s.LocalizableWarningPack = val
}

// SetAssociatedTask sets the value of AssociatedTask.
func (s *ResourceWarningCreationSpec) SetAssociatedTask(val OptAssociatedTask) {
	s.AssociatedTask = val
}

// Optional additional context information to be associated to the warning.
type ResourceWarningCreationSpecContext map[string]string

func (s *ResourceWarningCreationSpecContext) init() ResourceWarningCreationSpecContext {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Type of the resource to which this warning will be associated.
type ResourceWarningCreationSpecResourceType string

const (
	ResourceWarningCreationSpecResourceTypeHOST    ResourceWarningCreationSpecResourceType = "HOST"
	ResourceWarningCreationSpecResourceTypeCLUSTER ResourceWarningCreationSpecResourceType = "CLUSTER"
	ResourceWarningCreationSpecResourceTypeDOMAIN  ResourceWarningCreationSpecResourceType = "DOMAIN"
)

// AllValues returns all ResourceWarningCreationSpecResourceType values.
func (ResourceWarningCreationSpecResourceType) AllValues() []ResourceWarningCreationSpecResourceType {
	return []ResourceWarningCreationSpecResourceType{
		ResourceWarningCreationSpecResourceTypeHOST,
		ResourceWarningCreationSpecResourceTypeCLUSTER,
		ResourceWarningCreationSpecResourceTypeDOMAIN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourceWarningCreationSpecResourceType) MarshalText() ([]byte, error) {
	switch s {
	case ResourceWarningCreationSpecResourceTypeHOST:
		return []byte(s), nil
	case ResourceWarningCreationSpecResourceTypeCLUSTER:
		return []byte(s), nil
	case ResourceWarningCreationSpecResourceTypeDOMAIN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourceWarningCreationSpecResourceType) UnmarshalText(data []byte) error {
	switch ResourceWarningCreationSpecResourceType(data) {
	case ResourceWarningCreationSpecResourceTypeHOST:
		*s = ResourceWarningCreationSpecResourceTypeHOST
		return nil
	case ResourceWarningCreationSpecResourceTypeCLUSTER:
		*s = ResourceWarningCreationSpecResourceTypeCLUSTER
		return nil
	case ResourceWarningCreationSpecResourceTypeDOMAIN:
		*s = ResourceWarningCreationSpecResourceTypeDOMAIN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The severity of the warning.
type ResourceWarningCreationSpecSeverity string

const (
	ResourceWarningCreationSpecSeverityMAJOR ResourceWarningCreationSpecSeverity = "MAJOR"
	ResourceWarningCreationSpecSeverityMINOR ResourceWarningCreationSpecSeverity = "MINOR"
)

// AllValues returns all ResourceWarningCreationSpecSeverity values.
func (ResourceWarningCreationSpecSeverity) AllValues() []ResourceWarningCreationSpecSeverity {
	return []ResourceWarningCreationSpecSeverity{
		ResourceWarningCreationSpecSeverityMAJOR,
		ResourceWarningCreationSpecSeverityMINOR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourceWarningCreationSpecSeverity) MarshalText() ([]byte, error) {
	switch s {
	case ResourceWarningCreationSpecSeverityMAJOR:
		return []byte(s), nil
	case ResourceWarningCreationSpecSeverityMINOR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourceWarningCreationSpecSeverity) UnmarshalText(data []byte) error {
	switch ResourceWarningCreationSpecSeverity(data) {
	case ResourceWarningCreationSpecSeverityMAJOR:
		*s = ResourceWarningCreationSpecSeverityMAJOR
		return nil
	case ResourceWarningCreationSpecSeverityMINOR:
		*s = ResourceWarningCreationSpecSeverityMINOR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The type of the warning.
type ResourceWarningCreationSpecWarningType string

const (
	ResourceWarningCreationSpecWarningTypeCONFIGURATION   ResourceWarningCreationSpecWarningType = "CONFIGURATION"
	ResourceWarningCreationSpecWarningTypeOTHER           ResourceWarningCreationSpecWarningType = "OTHER"
	ResourceWarningCreationSpecWarningTypeSKIPPEDRESOURCE ResourceWarningCreationSpecWarningType = "SKIPPED_RESOURCE"
	ResourceWarningCreationSpecWarningTypeVALIDATION      ResourceWarningCreationSpecWarningType = "VALIDATION"
)

// AllValues returns all ResourceWarningCreationSpecWarningType values.
func (ResourceWarningCreationSpecWarningType) AllValues() []ResourceWarningCreationSpecWarningType {
	return []ResourceWarningCreationSpecWarningType{
		ResourceWarningCreationSpecWarningTypeCONFIGURATION,
		ResourceWarningCreationSpecWarningTypeOTHER,
		ResourceWarningCreationSpecWarningTypeSKIPPEDRESOURCE,
		ResourceWarningCreationSpecWarningTypeVALIDATION,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourceWarningCreationSpecWarningType) MarshalText() ([]byte, error) {
	switch s {
	case ResourceWarningCreationSpecWarningTypeCONFIGURATION:
		return []byte(s), nil
	case ResourceWarningCreationSpecWarningTypeOTHER:
		return []byte(s), nil
	case ResourceWarningCreationSpecWarningTypeSKIPPEDRESOURCE:
		return []byte(s), nil
	case ResourceWarningCreationSpecWarningTypeVALIDATION:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourceWarningCreationSpecWarningType) UnmarshalText(data []byte) error {
	switch ResourceWarningCreationSpecWarningType(data) {
	case ResourceWarningCreationSpecWarningTypeCONFIGURATION:
		*s = ResourceWarningCreationSpecWarningTypeCONFIGURATION
		return nil
	case ResourceWarningCreationSpecWarningTypeOTHER:
		*s = ResourceWarningCreationSpecWarningTypeOTHER
		return nil
	case ResourceWarningCreationSpecWarningTypeSKIPPEDRESOURCE:
		*s = ResourceWarningCreationSpecWarningTypeSKIPPEDRESOURCE
		return nil
	case ResourceWarningCreationSpecWarningTypeVALIDATION:
		*s = ResourceWarningCreationSpecWarningTypeVALIDATION
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Restore Specification.
// Ref: #/components/schemas/RestoreSpec
type RestoreSpec struct {
	// List of elements to be restored.
	Elements []BackupResource `json:"elements"`
	// Backup file name.
	BackupFile string     `json:"backupFile"`
	Encryption Encryption `json:"encryption"`
}

// GetElements returns the value of Elements.
func (s *RestoreSpec) GetElements() []BackupResource {
	return s.Elements
}

// GetBackupFile returns the value of BackupFile.
func (s *RestoreSpec) GetBackupFile() string {
	return s.BackupFile
}

// GetEncryption returns the value of Encryption.
func (s *RestoreSpec) GetEncryption() Encryption {
	return s.Encryption
}

// SetElements sets the value of Elements.
func (s *RestoreSpec) SetElements(val []BackupResource) {
	s.Elements = val
}

// SetBackupFile sets the value of BackupFile.
func (s *RestoreSpec) SetBackupFile(val string) {
	s.BackupFile = val
}

// SetEncryption sets the value of Encryption.
func (s *RestoreSpec) SetEncryption(val Encryption) {
	s.Encryption = val
}

type RetryComplianceAuditTaskBadRequest Error

func (*RetryComplianceAuditTaskBadRequest) retryComplianceAuditTaskRes() {}

type RetryComplianceAuditTaskInternalServerError Error

func (*RetryComplianceAuditTaskInternalServerError) retryComplianceAuditTaskRes() {}

type RetryComplianceAuditTaskNotFound Error

func (*RetryComplianceAuditTaskNotFound) retryComplianceAuditTaskRes() {}

type RetryCredentialsTaskBadRequest Error

func (*RetryCredentialsTaskBadRequest) retryCredentialsTaskRes() {}

type RetryCredentialsTaskForbidden Error

func (*RetryCredentialsTaskForbidden) retryCredentialsTaskRes() {}

type RetryCredentialsTaskInternalServerError Error

func (*RetryCredentialsTaskInternalServerError) retryCredentialsTaskRes() {}

type RetryCredentialsTaskUnauthorized Error

func (*RetryCredentialsTaskUnauthorized) retryCredentialsTaskRes() {}

type RetrySddcBadRequest Error

func (*RetrySddcBadRequest) retrySddcRes() {}

type RetrySddcInternalServerError Error

func (*RetrySddcInternalServerError) retrySddcRes() {}

type RetrySddcMethodNotAllowed Error

func (*RetrySddcMethodNotAllowed) retrySddcRes() {}

type RetrySddcNotFound Error

func (*RetrySddcNotFound) retrySddcRes() {}

type RetryTaskConflict Error

func (*RetryTaskConflict) retryTaskRes() {}

type RetryTaskInternalServerError Error

func (*RetryTaskInternalServerError) retryTaskRes() {}

type RetryTaskNotFound Error

func (*RetryTaskNotFound) retryTaskRes() {}

// RetryTaskOK is response for RetryTask operation.
type RetryTaskOK struct{}

func (*RetryTaskOK) retryTaskRes() {}

// Represents role and its attributes.
// Ref: #/components/schemas/Role
type Role struct {
	// The ID of the role.
	ID string `json:"id"`
	// The name of the role.
	Name string `json:"name"`
	// The description of the role.
	Description string `json:"description"`
}

// GetID returns the value of ID.
func (s *Role) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Role) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Role) GetDescription() string {
	return s.Description
}

// SetID sets the value of ID.
func (s *Role) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Role) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Role) SetDescription(val string) {
	s.Description = val
}

// Represents a role reference.
// Ref: #/components/schemas/RoleReference
type RoleReference struct {
	// ID of the role.
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *RoleReference) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *RoleReference) SetID(val string) {
	s.ID = val
}

// Spec contains Root Certificate Authority parameters.
// Ref: #/components/schemas/RootCaCerts
type RootCaCerts struct {
	// Certificate alias.
	Alias OptString `json:"alias"`
	// List of Base64 encoded certificates.
	CertChain []string `json:"certChain"`
}

// GetAlias returns the value of Alias.
func (s *RootCaCerts) GetAlias() OptString {
	return s.Alias
}

// GetCertChain returns the value of CertChain.
func (s *RootCaCerts) GetCertChain() []string {
	return s.CertChain
}

// SetAlias sets the value of Alias.
func (s *RootCaCerts) SetAlias(val OptString) {
	s.Alias = val
}

// SetCertChain sets the value of CertChain.
func (s *RootCaCerts) SetCertChain(val []string) {
	s.CertChain = val
}

// Represents the SDDC Manager's OIDC client information.
// Ref: #/components/schemas/SDDCManagerOidcInfo
type SDDCManagerOidcInfo struct {
	// The SDDC Manager OIDC client id.
	OidcClientId string `json:"oidcClientId"`
	// The SDDC Manager Authorization end point.
	OidcAuthorizationEndpoint string `json:"oidcAuthorizationEndpoint"`
	// The SDDC Manager end session end point.
	OidcEndSessionEndpoint string `json:"oidcEndSessionEndpoint"`
	// The type of the current identity provider.
	IdpType string `json:"idpType"`
	// The source of the current identity provider.
	Source string `json:"source"`
}

// GetOidcClientId returns the value of OidcClientId.
func (s *SDDCManagerOidcInfo) GetOidcClientId() string {
	return s.OidcClientId
}

// GetOidcAuthorizationEndpoint returns the value of OidcAuthorizationEndpoint.
func (s *SDDCManagerOidcInfo) GetOidcAuthorizationEndpoint() string {
	return s.OidcAuthorizationEndpoint
}

// GetOidcEndSessionEndpoint returns the value of OidcEndSessionEndpoint.
func (s *SDDCManagerOidcInfo) GetOidcEndSessionEndpoint() string {
	return s.OidcEndSessionEndpoint
}

// GetIdpType returns the value of IdpType.
func (s *SDDCManagerOidcInfo) GetIdpType() string {
	return s.IdpType
}

// GetSource returns the value of Source.
func (s *SDDCManagerOidcInfo) GetSource() string {
	return s.Source
}

// SetOidcClientId sets the value of OidcClientId.
func (s *SDDCManagerOidcInfo) SetOidcClientId(val string) {
	s.OidcClientId = val
}

// SetOidcAuthorizationEndpoint sets the value of OidcAuthorizationEndpoint.
func (s *SDDCManagerOidcInfo) SetOidcAuthorizationEndpoint(val string) {
	s.OidcAuthorizationEndpoint = val
}

// SetOidcEndSessionEndpoint sets the value of OidcEndSessionEndpoint.
func (s *SDDCManagerOidcInfo) SetOidcEndSessionEndpoint(val string) {
	s.OidcEndSessionEndpoint = val
}

// SetIdpType sets the value of IdpType.
func (s *SDDCManagerOidcInfo) SetIdpType(val string) {
	s.IdpType = val
}

// SetSource sets the value of Source.
func (s *SDDCManagerOidcInfo) SetSource(val string) {
	s.Source = val
}

func (*SDDCManagerOidcInfo) getSddcWs1bOidcInfoRes() {}

// Spec contains parameters for vCenter Cluster.
// Ref: #/components/schemas/SddcClusterSpec
type SddcClusterSpec struct {
	// VCenter Cluster Name. It will be auto-generated if blank.
	ClusterName OptString `json:"clusterName"`
	// VCenter Cluster EVC mode.
	ClusterEvcMode OptString `json:"clusterEvcMode"`
	// Cluster Personality Name.
	//
	// Deprecated: schema marks this property as deprecated.
	PersonalityName OptString `json:"personalityName"`
	// Enable vSphere Lifecycle Manager Images for cluster creation.
	ClusterImageEnabled OptBool `json:"clusterImageEnabled"`
	// List of Resource Pool Specification. If blank, no resource pools will be created. However, if you
	// want to create resource pool, Management Resource Pool is required to be present in the list.
	ResourcePoolSpecs []ResourcePoolSpec `json:"resourcePoolSpecs"`
	// Host failures to tolerate.
	HostFailuresToTolerate OptInt32 `json:"hostFailuresToTolerate"`
	// Virtual Machine folders map. One among:MANAGEMENT, NETWORKING.
	VmFolders OptSddcClusterSpecVmFolders `json:"vmFolders"`
}

// GetClusterName returns the value of ClusterName.
func (s *SddcClusterSpec) GetClusterName() OptString {
	return s.ClusterName
}

// GetClusterEvcMode returns the value of ClusterEvcMode.
func (s *SddcClusterSpec) GetClusterEvcMode() OptString {
	return s.ClusterEvcMode
}

// GetPersonalityName returns the value of PersonalityName.
func (s *SddcClusterSpec) GetPersonalityName() OptString {
	return s.PersonalityName
}

// GetClusterImageEnabled returns the value of ClusterImageEnabled.
func (s *SddcClusterSpec) GetClusterImageEnabled() OptBool {
	return s.ClusterImageEnabled
}

// GetResourcePoolSpecs returns the value of ResourcePoolSpecs.
func (s *SddcClusterSpec) GetResourcePoolSpecs() []ResourcePoolSpec {
	return s.ResourcePoolSpecs
}

// GetHostFailuresToTolerate returns the value of HostFailuresToTolerate.
func (s *SddcClusterSpec) GetHostFailuresToTolerate() OptInt32 {
	return s.HostFailuresToTolerate
}

// GetVmFolders returns the value of VmFolders.
func (s *SddcClusterSpec) GetVmFolders() OptSddcClusterSpecVmFolders {
	return s.VmFolders
}

// SetClusterName sets the value of ClusterName.
func (s *SddcClusterSpec) SetClusterName(val OptString) {
	s.ClusterName = val
}

// SetClusterEvcMode sets the value of ClusterEvcMode.
func (s *SddcClusterSpec) SetClusterEvcMode(val OptString) {
	s.ClusterEvcMode = val
}

// SetPersonalityName sets the value of PersonalityName.
func (s *SddcClusterSpec) SetPersonalityName(val OptString) {
	s.PersonalityName = val
}

// SetClusterImageEnabled sets the value of ClusterImageEnabled.
func (s *SddcClusterSpec) SetClusterImageEnabled(val OptBool) {
	s.ClusterImageEnabled = val
}

// SetResourcePoolSpecs sets the value of ResourcePoolSpecs.
func (s *SddcClusterSpec) SetResourcePoolSpecs(val []ResourcePoolSpec) {
	s.ResourcePoolSpecs = val
}

// SetHostFailuresToTolerate sets the value of HostFailuresToTolerate.
func (s *SddcClusterSpec) SetHostFailuresToTolerate(val OptInt32) {
	s.HostFailuresToTolerate = val
}

// SetVmFolders sets the value of VmFolders.
func (s *SddcClusterSpec) SetVmFolders(val OptSddcClusterSpecVmFolders) {
	s.VmFolders = val
}

// Virtual Machine folders map. One among:MANAGEMENT, NETWORKING.
type SddcClusterSpecVmFolders map[string]string

func (s *SddcClusterSpecVmFolders) init() SddcClusterSpecVmFolders {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Credentials contains the username and password.
// Ref: #/components/schemas/SddcCredentials
type SddcCredentials struct {
	// Username.
	Username OptString `json:"username"`
	// Password.
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *SddcCredentials) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *SddcCredentials) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *SddcCredentials) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *SddcCredentials) SetPassword(val string) {
	s.Password = val
}

// Spec contains parameters for Host.
// Ref: #/components/schemas/SddcHostSpec
type SddcHostSpec struct {
	// Datacenter name. Can be added to just one of the host specifications. If not provided, it will be
	// auto-generated.
	Association      OptString       `json:"association"`
	IpAddressPrivate OptIpAllocation `json:"ipAddressPrivate"`
	// ESXi Host hostname. This value will be prefixed to the DNS subdomain name and should not include
	// the domain name itself. Must also adhere to RFC 1123 naming conventions.
	Hostname    string             `json:"hostname"`
	Credentials OptSddcCredentials `json:"credentials"`
	// ESXi Host vSwitch name.
	//
	// Deprecated: schema marks this property as deprecated.
	VSwitch OptString `json:"vSwitch"`
	// ESXi Host SSH thumbprint (RSA SHA256).
	SshThumbprint OptString `json:"sshThumbprint"`
	// ESXi Host SSL thumbprint (SHA256).
	SslThumbprint OptString `json:"sslThumbprint"`
}

// GetAssociation returns the value of Association.
func (s *SddcHostSpec) GetAssociation() OptString {
	return s.Association
}

// GetIpAddressPrivate returns the value of IpAddressPrivate.
func (s *SddcHostSpec) GetIpAddressPrivate() OptIpAllocation {
	return s.IpAddressPrivate
}

// GetHostname returns the value of Hostname.
func (s *SddcHostSpec) GetHostname() string {
	return s.Hostname
}

// GetCredentials returns the value of Credentials.
func (s *SddcHostSpec) GetCredentials() OptSddcCredentials {
	return s.Credentials
}

// GetVSwitch returns the value of VSwitch.
func (s *SddcHostSpec) GetVSwitch() OptString {
	return s.VSwitch
}

// GetSshThumbprint returns the value of SshThumbprint.
func (s *SddcHostSpec) GetSshThumbprint() OptString {
	return s.SshThumbprint
}

// GetSslThumbprint returns the value of SslThumbprint.
func (s *SddcHostSpec) GetSslThumbprint() OptString {
	return s.SslThumbprint
}

// SetAssociation sets the value of Association.
func (s *SddcHostSpec) SetAssociation(val OptString) {
	s.Association = val
}

// SetIpAddressPrivate sets the value of IpAddressPrivate.
func (s *SddcHostSpec) SetIpAddressPrivate(val OptIpAllocation) {
	s.IpAddressPrivate = val
}

// SetHostname sets the value of Hostname.
func (s *SddcHostSpec) SetHostname(val string) {
	s.Hostname = val
}

// SetCredentials sets the value of Credentials.
func (s *SddcHostSpec) SetCredentials(val OptSddcCredentials) {
	s.Credentials = val
}

// SetVSwitch sets the value of VSwitch.
func (s *SddcHostSpec) SetVSwitch(val OptString) {
	s.VSwitch = val
}

// SetSshThumbprint sets the value of SshThumbprint.
func (s *SddcHostSpec) SetSshThumbprint(val OptString) {
	s.SshThumbprint = val
}

// SetSslThumbprint sets the value of SslThumbprint.
func (s *SddcHostSpec) SetSslThumbprint(val OptString) {
	s.SslThumbprint = val
}

// SDDC Manager representation.
// Ref: #/components/schemas/SddcManager
type SddcManager struct {
	Domain           OptDomainReference  `json:"domain"`
	BasicAuthDetails OptBasicAuthDetails `json:"basicAuthDetails"`
	// ID of the SDDC Manager.
	ID OptString `json:"id"`
	// FQDN of the SDDC Manager.
	Fqdn OptString `json:"fqdn"`
	// Version of the SDDC Manager.
	Version OptString `json:"version"`
	// IP Address of the SDDC Manager.
	IpAddress OptString `json:"ipAddress"`
}

// GetDomain returns the value of Domain.
func (s *SddcManager) GetDomain() OptDomainReference {
	return s.Domain
}

// GetBasicAuthDetails returns the value of BasicAuthDetails.
func (s *SddcManager) GetBasicAuthDetails() OptBasicAuthDetails {
	return s.BasicAuthDetails
}

// GetID returns the value of ID.
func (s *SddcManager) GetID() OptString {
	return s.ID
}

// GetFqdn returns the value of Fqdn.
func (s *SddcManager) GetFqdn() OptString {
	return s.Fqdn
}

// GetVersion returns the value of Version.
func (s *SddcManager) GetVersion() OptString {
	return s.Version
}

// GetIpAddress returns the value of IpAddress.
func (s *SddcManager) GetIpAddress() OptString {
	return s.IpAddress
}

// SetDomain sets the value of Domain.
func (s *SddcManager) SetDomain(val OptDomainReference) {
	s.Domain = val
}

// SetBasicAuthDetails sets the value of BasicAuthDetails.
func (s *SddcManager) SetBasicAuthDetails(val OptBasicAuthDetails) {
	s.BasicAuthDetails = val
}

// SetID sets the value of ID.
func (s *SddcManager) SetID(val OptString) {
	s.ID = val
}

// SetFqdn sets the value of Fqdn.
func (s *SddcManager) SetFqdn(val OptString) {
	s.Fqdn = val
}

// SetVersion sets the value of Version.
func (s *SddcManager) SetVersion(val OptString) {
	s.Version = val
}

// SetIpAddress sets the value of IpAddress.
func (s *SddcManager) SetIpAddress(val OptString) {
	s.IpAddress = val
}

func (*SddcManager) getSddcManagerRes() {}

// SDDC Manager Information.
// Ref: #/components/schemas/SddcManagerInfo
type SddcManagerInfo struct {
	// ID of the SDDC Manager.
	ID OptString `json:"id"`
	// FQDN of the SDDC Manager.
	Fqdn OptString `json:"fqdn"`
	// Version of the SDDC Manager.
	Version OptString `json:"version"`
	// IP Address of the SDDC Manager.
	IpAddress OptString `json:"ipAddress"`
}

// GetID returns the value of ID.
func (s *SddcManagerInfo) GetID() OptString {
	return s.ID
}

// GetFqdn returns the value of Fqdn.
func (s *SddcManagerInfo) GetFqdn() OptString {
	return s.Fqdn
}

// GetVersion returns the value of Version.
func (s *SddcManagerInfo) GetVersion() OptString {
	return s.Version
}

// GetIpAddress returns the value of IpAddress.
func (s *SddcManagerInfo) GetIpAddress() OptString {
	return s.IpAddress
}

// SetID sets the value of ID.
func (s *SddcManagerInfo) SetID(val OptString) {
	s.ID = val
}

// SetFqdn sets the value of Fqdn.
func (s *SddcManagerInfo) SetFqdn(val OptString) {
	s.Fqdn = val
}

// SetVersion sets the value of Version.
func (s *SddcManagerInfo) SetVersion(val OptString) {
	s.Version = val
}

// SetIpAddress sets the value of IpAddress.
func (s *SddcManagerInfo) SetIpAddress(val OptString) {
	s.IpAddress = val
}

// Client input parameters for SDDC Manager Virtual Machine.
// Ref: #/components/schemas/SddcManagerSpec
type SddcManagerSpec struct {
	RootUserCredentials OptSddcCredentials `json:"rootUserCredentials"`
	// SDDC Manager Hostname.
	Hostname              string             `json:"hostname"`
	SecondUserCredentials OptSddcCredentials `json:"secondUserCredentials"`
	// The local account is a built-in admin account in VCF that can be used in emergency scenarios. The
	// password of this account must be at least 12 characters long. It also must contain at-least 1
	// uppercase, 1 lowercase, 1 special character specified in braces [!%@$^#?] and 1 digit. In addition,
	//  a character cannot be repeated more than 3 times consecutively. This password will be used for
	// other passwords if they have not been passed as input.
	LocalUserPassword OptString `json:"localUserPassword"`
	// SDDC Manager IP address. Can be omitted if hostname is provided.
	IpAddress OptString `json:"ipAddress"`
}

// GetRootUserCredentials returns the value of RootUserCredentials.
func (s *SddcManagerSpec) GetRootUserCredentials() OptSddcCredentials {
	return s.RootUserCredentials
}

// GetHostname returns the value of Hostname.
func (s *SddcManagerSpec) GetHostname() string {
	return s.Hostname
}

// GetSecondUserCredentials returns the value of SecondUserCredentials.
func (s *SddcManagerSpec) GetSecondUserCredentials() OptSddcCredentials {
	return s.SecondUserCredentials
}

// GetLocalUserPassword returns the value of LocalUserPassword.
func (s *SddcManagerSpec) GetLocalUserPassword() OptString {
	return s.LocalUserPassword
}

// GetIpAddress returns the value of IpAddress.
func (s *SddcManagerSpec) GetIpAddress() OptString {
	return s.IpAddress
}

// SetRootUserCredentials sets the value of RootUserCredentials.
func (s *SddcManagerSpec) SetRootUserCredentials(val OptSddcCredentials) {
	s.RootUserCredentials = val
}

// SetHostname sets the value of Hostname.
func (s *SddcManagerSpec) SetHostname(val string) {
	s.Hostname = val
}

// SetSecondUserCredentials sets the value of SecondUserCredentials.
func (s *SddcManagerSpec) SetSecondUserCredentials(val OptSddcCredentials) {
	s.SecondUserCredentials = val
}

// SetLocalUserPassword sets the value of LocalUserPassword.
func (s *SddcManagerSpec) SetLocalUserPassword(val OptString) {
	s.LocalUserPassword = val
}

// SetIpAddress sets the value of IpAddress.
func (s *SddcManagerSpec) SetIpAddress(val OptString) {
	s.IpAddress = val
}

// Defines a network spec.
// Ref: #/components/schemas/SddcNetworkSpec
type SddcNetworkSpec struct {
	// Network Type. One among: VSAN, VMOTION, MANAGEMENT, VM_MANAGEMENT or any custom network type.
	NetworkType string `json:"networkType"`
	// Subnet.
	Subnet OptString `json:"subnet"`
	// Gateway.
	Gateway OptString `json:"gateway"`
	// Subnet Mask.
	SubnetMask OptString `json:"subnetMask"`
	// This property is deprecated and will be ignored.
	//
	// Deprecated: schema marks this property as deprecated.
	ExcludeIpaddresses []string `json:"excludeIpaddresses"`
	// This property is deprecated and will be ignored.
	//
	// Deprecated: schema marks this property as deprecated.
	ExcludeIpAddressRanges []string `json:"excludeIpAddressRanges"`
	// IP Addresses to be included.
	IncludeIpAddress []string `json:"includeIpAddress"`
	// IP Address ranges to be included.
	IncludeIpAddressRanges []IpRange `json:"includeIpAddressRanges"`
	// VLAN ID.
	VlanId int `json:"vlanId"`
	// MTU size.
	Mtu OptInt `json:"mtu"`
	// Teaming Policy for VSAN and VMOTION network types, Default is loadbalance_loadbased. One
	// among:loadbalance_ip, loadbalance_srcmac, loadbalance_srcid, failover_explicit,
	// loadbalance_loadbased.
	TeamingPolicy OptString `json:"teamingPolicy"`
	// Active Uplinks for teaming policy, specify uplink1 for failover_explicit VSAN Teaming Policy.
	ActiveUplinks []string `json:"activeUplinks"`
	// Standby Uplinks for teaming policy, specify uplink2 for failover_explicit VSAN Teaming Policy.
	StandbyUplinks []string `json:"standbyUplinks"`
	// Name of the Distributed Portgroup to be created. It will be autogenerated if null.
	PortGroupKey OptString `json:"portGroupKey"`
}

// GetNetworkType returns the value of NetworkType.
func (s *SddcNetworkSpec) GetNetworkType() string {
	return s.NetworkType
}

// GetSubnet returns the value of Subnet.
func (s *SddcNetworkSpec) GetSubnet() OptString {
	return s.Subnet
}

// GetGateway returns the value of Gateway.
func (s *SddcNetworkSpec) GetGateway() OptString {
	return s.Gateway
}

// GetSubnetMask returns the value of SubnetMask.
func (s *SddcNetworkSpec) GetSubnetMask() OptString {
	return s.SubnetMask
}

// GetExcludeIpaddresses returns the value of ExcludeIpaddresses.
func (s *SddcNetworkSpec) GetExcludeIpaddresses() []string {
	return s.ExcludeIpaddresses
}

// GetExcludeIpAddressRanges returns the value of ExcludeIpAddressRanges.
func (s *SddcNetworkSpec) GetExcludeIpAddressRanges() []string {
	return s.ExcludeIpAddressRanges
}

// GetIncludeIpAddress returns the value of IncludeIpAddress.
func (s *SddcNetworkSpec) GetIncludeIpAddress() []string {
	return s.IncludeIpAddress
}

// GetIncludeIpAddressRanges returns the value of IncludeIpAddressRanges.
func (s *SddcNetworkSpec) GetIncludeIpAddressRanges() []IpRange {
	return s.IncludeIpAddressRanges
}

// GetVlanId returns the value of VlanId.
func (s *SddcNetworkSpec) GetVlanId() int {
	return s.VlanId
}

// GetMtu returns the value of Mtu.
func (s *SddcNetworkSpec) GetMtu() OptInt {
	return s.Mtu
}

// GetTeamingPolicy returns the value of TeamingPolicy.
func (s *SddcNetworkSpec) GetTeamingPolicy() OptString {
	return s.TeamingPolicy
}

// GetActiveUplinks returns the value of ActiveUplinks.
func (s *SddcNetworkSpec) GetActiveUplinks() []string {
	return s.ActiveUplinks
}

// GetStandbyUplinks returns the value of StandbyUplinks.
func (s *SddcNetworkSpec) GetStandbyUplinks() []string {
	return s.StandbyUplinks
}

// GetPortGroupKey returns the value of PortGroupKey.
func (s *SddcNetworkSpec) GetPortGroupKey() OptString {
	return s.PortGroupKey
}

// SetNetworkType sets the value of NetworkType.
func (s *SddcNetworkSpec) SetNetworkType(val string) {
	s.NetworkType = val
}

// SetSubnet sets the value of Subnet.
func (s *SddcNetworkSpec) SetSubnet(val OptString) {
	s.Subnet = val
}

// SetGateway sets the value of Gateway.
func (s *SddcNetworkSpec) SetGateway(val OptString) {
	s.Gateway = val
}

// SetSubnetMask sets the value of SubnetMask.
func (s *SddcNetworkSpec) SetSubnetMask(val OptString) {
	s.SubnetMask = val
}

// SetExcludeIpaddresses sets the value of ExcludeIpaddresses.
func (s *SddcNetworkSpec) SetExcludeIpaddresses(val []string) {
	s.ExcludeIpaddresses = val
}

// SetExcludeIpAddressRanges sets the value of ExcludeIpAddressRanges.
func (s *SddcNetworkSpec) SetExcludeIpAddressRanges(val []string) {
	s.ExcludeIpAddressRanges = val
}

// SetIncludeIpAddress sets the value of IncludeIpAddress.
func (s *SddcNetworkSpec) SetIncludeIpAddress(val []string) {
	s.IncludeIpAddress = val
}

// SetIncludeIpAddressRanges sets the value of IncludeIpAddressRanges.
func (s *SddcNetworkSpec) SetIncludeIpAddressRanges(val []IpRange) {
	s.IncludeIpAddressRanges = val
}

// SetVlanId sets the value of VlanId.
func (s *SddcNetworkSpec) SetVlanId(val int) {
	s.VlanId = val
}

// SetMtu sets the value of Mtu.
func (s *SddcNetworkSpec) SetMtu(val OptInt) {
	s.Mtu = val
}

// SetTeamingPolicy sets the value of TeamingPolicy.
func (s *SddcNetworkSpec) SetTeamingPolicy(val OptString) {
	s.TeamingPolicy = val
}

// SetActiveUplinks sets the value of ActiveUplinks.
func (s *SddcNetworkSpec) SetActiveUplinks(val []string) {
	s.ActiveUplinks = val
}

// SetStandbyUplinks sets the value of StandbyUplinks.
func (s *SddcNetworkSpec) SetStandbyUplinks(val []string) {
	s.StandbyUplinks = val
}

// SetPortGroupKey sets the value of PortGroupKey.
func (s *SddcNetworkSpec) SetPortGroupKey(val OptString) {
	s.PortGroupKey = val
}

// Spec contains parameters for NSX deployment and configurations.
// Ref: #/components/schemas/SddcNsxtSpec
type SddcNsxtSpec struct {
	// NSX Managers.
	NsxtManagers []NsxtManagerSpec `json:"nsxtManagers"`
	// NSX Manager size. One among: medium, large,xlarge. Default value if not provided is medium.
	NsxtManagerSize OptString `json:"nsxtManagerSize"`
	// NSX Manager license.
	NsxtLicense OptString `json:"nsxtLicense"`
	// Virtual IP address which would act as proxy/alias for NSX Managers. Can be omitted if VIP hostname
	// is provided.
	Vip OptString `json:"vip"`
	// Hostname for VIP so that common SSL certificates can be installed across all managers.
	VipFqdn string `json:"vipFqdn"`
	// NSX Manager root password. Password should have 1) At least eight characters, 2) At least one
	// lower-case letter, 3) At least one upper-case letter 4) At least one digit 5) At least one special
	// character, 6) At least five different characters , 7) No dictionary words, 6) No palindromes. If
	// blank, the SDDC Local Admin Password will be used.
	RootNsxtManagerPassword OptString `json:"rootNsxtManagerPassword"`
	// NSX admin password. The password must be at least 12 characters long. Must contain at-least 1
	// uppercase, 1 lowercase, 1 special character and 1 digit. In addition, a character cannot be
	// repeated 3 or more times consectively. If blank, the SDDC Local Admin Password will be used.
	NsxtAdminPassword OptString `json:"nsxtAdminPassword"`
	// NSX audit password. The password must be at least 12 characters long. Must contain at-least 1
	// uppercase, 1 lowercase, 1 special character and 1 digit. In addition, a character cannot be
	// repeated 3 or more times consectively. If blank, the SDDC Local Admin Password will be used.
	NsxtAuditPassword OptString `json:"nsxtAuditPassword"`
	// Deprecated: schema marks this property as deprecated.
	OverLayTransportZone OptNsxtTransportZone `json:"overLayTransportZone"`
	// Transport VLAN ID. Default '0' if not specified.
	TransportVlanId   OptInt32             `json:"transportVlanId"`
	IpAddressPoolSpec OptIpAddressPoolSpec `json:"ipAddressPoolSpec"`
}

// GetNsxtManagers returns the value of NsxtManagers.
func (s *SddcNsxtSpec) GetNsxtManagers() []NsxtManagerSpec {
	return s.NsxtManagers
}

// GetNsxtManagerSize returns the value of NsxtManagerSize.
func (s *SddcNsxtSpec) GetNsxtManagerSize() OptString {
	return s.NsxtManagerSize
}

// GetNsxtLicense returns the value of NsxtLicense.
func (s *SddcNsxtSpec) GetNsxtLicense() OptString {
	return s.NsxtLicense
}

// GetVip returns the value of Vip.
func (s *SddcNsxtSpec) GetVip() OptString {
	return s.Vip
}

// GetVipFqdn returns the value of VipFqdn.
func (s *SddcNsxtSpec) GetVipFqdn() string {
	return s.VipFqdn
}

// GetRootNsxtManagerPassword returns the value of RootNsxtManagerPassword.
func (s *SddcNsxtSpec) GetRootNsxtManagerPassword() OptString {
	return s.RootNsxtManagerPassword
}

// GetNsxtAdminPassword returns the value of NsxtAdminPassword.
func (s *SddcNsxtSpec) GetNsxtAdminPassword() OptString {
	return s.NsxtAdminPassword
}

// GetNsxtAuditPassword returns the value of NsxtAuditPassword.
func (s *SddcNsxtSpec) GetNsxtAuditPassword() OptString {
	return s.NsxtAuditPassword
}

// GetOverLayTransportZone returns the value of OverLayTransportZone.
func (s *SddcNsxtSpec) GetOverLayTransportZone() OptNsxtTransportZone {
	return s.OverLayTransportZone
}

// GetTransportVlanId returns the value of TransportVlanId.
func (s *SddcNsxtSpec) GetTransportVlanId() OptInt32 {
	return s.TransportVlanId
}

// GetIpAddressPoolSpec returns the value of IpAddressPoolSpec.
func (s *SddcNsxtSpec) GetIpAddressPoolSpec() OptIpAddressPoolSpec {
	return s.IpAddressPoolSpec
}

// SetNsxtManagers sets the value of NsxtManagers.
func (s *SddcNsxtSpec) SetNsxtManagers(val []NsxtManagerSpec) {
	s.NsxtManagers = val
}

// SetNsxtManagerSize sets the value of NsxtManagerSize.
func (s *SddcNsxtSpec) SetNsxtManagerSize(val OptString) {
	s.NsxtManagerSize = val
}

// SetNsxtLicense sets the value of NsxtLicense.
func (s *SddcNsxtSpec) SetNsxtLicense(val OptString) {
	s.NsxtLicense = val
}

// SetVip sets the value of Vip.
func (s *SddcNsxtSpec) SetVip(val OptString) {
	s.Vip = val
}

// SetVipFqdn sets the value of VipFqdn.
func (s *SddcNsxtSpec) SetVipFqdn(val string) {
	s.VipFqdn = val
}

// SetRootNsxtManagerPassword sets the value of RootNsxtManagerPassword.
func (s *SddcNsxtSpec) SetRootNsxtManagerPassword(val OptString) {
	s.RootNsxtManagerPassword = val
}

// SetNsxtAdminPassword sets the value of NsxtAdminPassword.
func (s *SddcNsxtSpec) SetNsxtAdminPassword(val OptString) {
	s.NsxtAdminPassword = val
}

// SetNsxtAuditPassword sets the value of NsxtAuditPassword.
func (s *SddcNsxtSpec) SetNsxtAuditPassword(val OptString) {
	s.NsxtAuditPassword = val
}

// SetOverLayTransportZone sets the value of OverLayTransportZone.
func (s *SddcNsxtSpec) SetOverLayTransportZone(val OptNsxtTransportZone) {
	s.OverLayTransportZone = val
}

// SetTransportVlanId sets the value of TransportVlanId.
func (s *SddcNsxtSpec) SetTransportVlanId(val OptInt32) {
	s.TransportVlanId = val
}

// SetIpAddressPoolSpec sets the value of IpAddressPoolSpec.
func (s *SddcNsxtSpec) SetIpAddressPoolSpec(val OptIpAddressPoolSpec) {
	s.IpAddressPoolSpec = val
}

// SDDC specification.
// Ref: #/components/schemas/SddcSpec
type SddcSpec struct {
	// Client string that identifies an SDDC by name or instance name. Used for management domain name.
	// Can contain only letters, numbers and the following symbols: '-'.
	SddcId string `json:"sddcId"`
	// Name of the task to execute. This is deprecated. Please use property 'workflowType'.
	//
	// Deprecated: schema marks this property as deprecated.
	TaskName OptString `json:"taskName"`
	// Type of workflow to initiate creation and/or validation of SDDC.
	WorkflowType OptString `json:"workflowType"`
	// List of ESXi to be added to the Management Cluster.
	HostSpecs   []SddcHostSpec     `json:"hostSpecs"`
	VcenterSpec SddcVcenterSpec    `json:"vcenterSpec"`
	ClusterSpec OptSddcClusterSpec `json:"clusterSpec"`
	// List of vSphere Distributed Switches to be created. For VCF only: if blank, a default single one
	// will be created for all types of traffic connected to vmnic0 and vmnic1.
	DvsSpecs []DvsSpec       `json:"dvsSpecs"`
	VsanSpec OptVsanSpec     `json:"vsanSpec"`
	NsxtSpec OptSddcNsxtSpec `json:"nsxtSpec"`
	// List of Networks which be created and used for Management Cluster.
	NetworkSpecs []SddcNetworkSpec `json:"networkSpecs"`
	DnsSpec      DnsSpec           `json:"dnsSpec"`
	// List of NTP servers to be used for configuring Management Appliances.
	NtpServers      []string           `json:"ntpServers"`
	SddcManagerSpec OptSddcManagerSpec `json:"sddcManagerSpec"`
	// Specification for SSO Configuration in the Management vCenter Server Appliance.
	PscSpecs      []PscSpec        `json:"pscSpecs"`
	VxManagerSpec OptVxManagerSpec `json:"vxManagerSpec"`
	// Name for the network pool to be created and associated with the Management Cluster.
	ManagementPoolName OptString `json:"managementPoolName"`
	// Components of the workflow to be excluded. NOTE: Leave this empty unless you are fully aware of
	// what you are doing.
	ExcludedComponents []string `json:"excludedComponents"`
	// The version of the Distributed vSphere Switches to be used. One among: 7.0.0, 7.0.2, 7.0.3, 8.0.0.
	// If blank, then the latest version will be obtain from vCenter Server.
	DvSwitchVersion OptString `json:"dvSwitchVersion"`
	// Enable VCF Customer Experience Improvement Program.
	CeipEnabled OptBool `json:"ceipEnabled"`
	// Enable Federal Information Processing Standards.
	FipsEnabled OptBool `json:"fipsEnabled"`
	// License for the ESXi hosts.
	EsxLicense OptString `json:"esxLicense"`
	// Skip ESXi thumbprint validation.
	SkipEsxThumbprintValidation OptBool `json:"skipEsxThumbprintValidation"`
	// Skip networks gateway connectivity validation.
	SkipGatewayPingValidation OptBool         `json:"skipGatewayPingValidation"`
	SecuritySpec              OptSecuritySpec `json:"securitySpec"`
	ProxySpec                 OptProxySpec    `json:"proxySpec"`
	// Flag that indicates if the deployment should happen without license keys.
	DeployWithoutLicenseKeys OptBool `json:"deployWithoutLicenseKeys"`
}

// GetSddcId returns the value of SddcId.
func (s *SddcSpec) GetSddcId() string {
	return s.SddcId
}

// GetTaskName returns the value of TaskName.
func (s *SddcSpec) GetTaskName() OptString {
	return s.TaskName
}

// GetWorkflowType returns the value of WorkflowType.
func (s *SddcSpec) GetWorkflowType() OptString {
	return s.WorkflowType
}

// GetHostSpecs returns the value of HostSpecs.
func (s *SddcSpec) GetHostSpecs() []SddcHostSpec {
	return s.HostSpecs
}

// GetVcenterSpec returns the value of VcenterSpec.
func (s *SddcSpec) GetVcenterSpec() SddcVcenterSpec {
	return s.VcenterSpec
}

// GetClusterSpec returns the value of ClusterSpec.
func (s *SddcSpec) GetClusterSpec() OptSddcClusterSpec {
	return s.ClusterSpec
}

// GetDvsSpecs returns the value of DvsSpecs.
func (s *SddcSpec) GetDvsSpecs() []DvsSpec {
	return s.DvsSpecs
}

// GetVsanSpec returns the value of VsanSpec.
func (s *SddcSpec) GetVsanSpec() OptVsanSpec {
	return s.VsanSpec
}

// GetNsxtSpec returns the value of NsxtSpec.
func (s *SddcSpec) GetNsxtSpec() OptSddcNsxtSpec {
	return s.NsxtSpec
}

// GetNetworkSpecs returns the value of NetworkSpecs.
func (s *SddcSpec) GetNetworkSpecs() []SddcNetworkSpec {
	return s.NetworkSpecs
}

// GetDnsSpec returns the value of DnsSpec.
func (s *SddcSpec) GetDnsSpec() DnsSpec {
	return s.DnsSpec
}

// GetNtpServers returns the value of NtpServers.
func (s *SddcSpec) GetNtpServers() []string {
	return s.NtpServers
}

// GetSddcManagerSpec returns the value of SddcManagerSpec.
func (s *SddcSpec) GetSddcManagerSpec() OptSddcManagerSpec {
	return s.SddcManagerSpec
}

// GetPscSpecs returns the value of PscSpecs.
func (s *SddcSpec) GetPscSpecs() []PscSpec {
	return s.PscSpecs
}

// GetVxManagerSpec returns the value of VxManagerSpec.
func (s *SddcSpec) GetVxManagerSpec() OptVxManagerSpec {
	return s.VxManagerSpec
}

// GetManagementPoolName returns the value of ManagementPoolName.
func (s *SddcSpec) GetManagementPoolName() OptString {
	return s.ManagementPoolName
}

// GetExcludedComponents returns the value of ExcludedComponents.
func (s *SddcSpec) GetExcludedComponents() []string {
	return s.ExcludedComponents
}

// GetDvSwitchVersion returns the value of DvSwitchVersion.
func (s *SddcSpec) GetDvSwitchVersion() OptString {
	return s.DvSwitchVersion
}

// GetCeipEnabled returns the value of CeipEnabled.
func (s *SddcSpec) GetCeipEnabled() OptBool {
	return s.CeipEnabled
}

// GetFipsEnabled returns the value of FipsEnabled.
func (s *SddcSpec) GetFipsEnabled() OptBool {
	return s.FipsEnabled
}

// GetEsxLicense returns the value of EsxLicense.
func (s *SddcSpec) GetEsxLicense() OptString {
	return s.EsxLicense
}

// GetSkipEsxThumbprintValidation returns the value of SkipEsxThumbprintValidation.
func (s *SddcSpec) GetSkipEsxThumbprintValidation() OptBool {
	return s.SkipEsxThumbprintValidation
}

// GetSkipGatewayPingValidation returns the value of SkipGatewayPingValidation.
func (s *SddcSpec) GetSkipGatewayPingValidation() OptBool {
	return s.SkipGatewayPingValidation
}

// GetSecuritySpec returns the value of SecuritySpec.
func (s *SddcSpec) GetSecuritySpec() OptSecuritySpec {
	return s.SecuritySpec
}

// GetProxySpec returns the value of ProxySpec.
func (s *SddcSpec) GetProxySpec() OptProxySpec {
	return s.ProxySpec
}

// GetDeployWithoutLicenseKeys returns the value of DeployWithoutLicenseKeys.
func (s *SddcSpec) GetDeployWithoutLicenseKeys() OptBool {
	return s.DeployWithoutLicenseKeys
}

// SetSddcId sets the value of SddcId.
func (s *SddcSpec) SetSddcId(val string) {
	s.SddcId = val
}

// SetTaskName sets the value of TaskName.
func (s *SddcSpec) SetTaskName(val OptString) {
	s.TaskName = val
}

// SetWorkflowType sets the value of WorkflowType.
func (s *SddcSpec) SetWorkflowType(val OptString) {
	s.WorkflowType = val
}

// SetHostSpecs sets the value of HostSpecs.
func (s *SddcSpec) SetHostSpecs(val []SddcHostSpec) {
	s.HostSpecs = val
}

// SetVcenterSpec sets the value of VcenterSpec.
func (s *SddcSpec) SetVcenterSpec(val SddcVcenterSpec) {
	s.VcenterSpec = val
}

// SetClusterSpec sets the value of ClusterSpec.
func (s *SddcSpec) SetClusterSpec(val OptSddcClusterSpec) {
	s.ClusterSpec = val
}

// SetDvsSpecs sets the value of DvsSpecs.
func (s *SddcSpec) SetDvsSpecs(val []DvsSpec) {
	s.DvsSpecs = val
}

// SetVsanSpec sets the value of VsanSpec.
func (s *SddcSpec) SetVsanSpec(val OptVsanSpec) {
	s.VsanSpec = val
}

// SetNsxtSpec sets the value of NsxtSpec.
func (s *SddcSpec) SetNsxtSpec(val OptSddcNsxtSpec) {
	s.NsxtSpec = val
}

// SetNetworkSpecs sets the value of NetworkSpecs.
func (s *SddcSpec) SetNetworkSpecs(val []SddcNetworkSpec) {
	s.NetworkSpecs = val
}

// SetDnsSpec sets the value of DnsSpec.
func (s *SddcSpec) SetDnsSpec(val DnsSpec) {
	s.DnsSpec = val
}

// SetNtpServers sets the value of NtpServers.
func (s *SddcSpec) SetNtpServers(val []string) {
	s.NtpServers = val
}

// SetSddcManagerSpec sets the value of SddcManagerSpec.
func (s *SddcSpec) SetSddcManagerSpec(val OptSddcManagerSpec) {
	s.SddcManagerSpec = val
}

// SetPscSpecs sets the value of PscSpecs.
func (s *SddcSpec) SetPscSpecs(val []PscSpec) {
	s.PscSpecs = val
}

// SetVxManagerSpec sets the value of VxManagerSpec.
func (s *SddcSpec) SetVxManagerSpec(val OptVxManagerSpec) {
	s.VxManagerSpec = val
}

// SetManagementPoolName sets the value of ManagementPoolName.
func (s *SddcSpec) SetManagementPoolName(val OptString) {
	s.ManagementPoolName = val
}

// SetExcludedComponents sets the value of ExcludedComponents.
func (s *SddcSpec) SetExcludedComponents(val []string) {
	s.ExcludedComponents = val
}

// SetDvSwitchVersion sets the value of DvSwitchVersion.
func (s *SddcSpec) SetDvSwitchVersion(val OptString) {
	s.DvSwitchVersion = val
}

// SetCeipEnabled sets the value of CeipEnabled.
func (s *SddcSpec) SetCeipEnabled(val OptBool) {
	s.CeipEnabled = val
}

// SetFipsEnabled sets the value of FipsEnabled.
func (s *SddcSpec) SetFipsEnabled(val OptBool) {
	s.FipsEnabled = val
}

// SetEsxLicense sets the value of EsxLicense.
func (s *SddcSpec) SetEsxLicense(val OptString) {
	s.EsxLicense = val
}

// SetSkipEsxThumbprintValidation sets the value of SkipEsxThumbprintValidation.
func (s *SddcSpec) SetSkipEsxThumbprintValidation(val OptBool) {
	s.SkipEsxThumbprintValidation = val
}

// SetSkipGatewayPingValidation sets the value of SkipGatewayPingValidation.
func (s *SddcSpec) SetSkipGatewayPingValidation(val OptBool) {
	s.SkipGatewayPingValidation = val
}

// SetSecuritySpec sets the value of SecuritySpec.
func (s *SddcSpec) SetSecuritySpec(val OptSecuritySpec) {
	s.SecuritySpec = val
}

// SetProxySpec sets the value of ProxySpec.
func (s *SddcSpec) SetProxySpec(val OptProxySpec) {
	s.ProxySpec = val
}

// SetDeployWithoutLicenseKeys sets the value of DeployWithoutLicenseKeys.
func (s *SddcSpec) SetDeployWithoutLicenseKeys(val OptBool) {
	s.DeployWithoutLicenseKeys = val
}

func (*SddcSpec) startBringupSpecConversionRes() {}

// Represents a SDDC sub-task.
// Ref: #/components/schemas/SddcSubTask
type SddcSubTask struct {
	// SDDC ID.
	SddcId OptString `json:"sddcId"`
	// Processing category name, e.g., VC Deployment, VSAN configuration etc.
	ProcessingStateName OptString `json:"processingStateName"`
	// Processing category description, e.g., VC Deployment, VSAN configuration etc.
	ProcessingStateDescription OptString `json:"processingStateDescription"`
	// Sub-Task Name.
	Name OptString `json:"name"`
	// Sub-Task Description.
	Description                OptString      `json:"description"`
	LocalizableNamePack        OptMessagePack `json:"localizableNamePack"`
	LocalizableDescriptionPack OptMessagePack `json:"localizableDescriptionPack"`
	// Task Status.
	Status OptString `json:"status"`
	// Sub-Task Creation Time.
	CreationTimestamp OptString `json:"creationTimestamp"`
	// Last Update Time of Sub-Task.
	UpdateTimestamp OptString `json:"updateTimestamp"`
	// List of errors in case of a failure.
	Errors []Error `json:"errors"`
}

// GetSddcId returns the value of SddcId.
func (s *SddcSubTask) GetSddcId() OptString {
	return s.SddcId
}

// GetProcessingStateName returns the value of ProcessingStateName.
func (s *SddcSubTask) GetProcessingStateName() OptString {
	return s.ProcessingStateName
}

// GetProcessingStateDescription returns the value of ProcessingStateDescription.
func (s *SddcSubTask) GetProcessingStateDescription() OptString {
	return s.ProcessingStateDescription
}

// GetName returns the value of Name.
func (s *SddcSubTask) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *SddcSubTask) GetDescription() OptString {
	return s.Description
}

// GetLocalizableNamePack returns the value of LocalizableNamePack.
func (s *SddcSubTask) GetLocalizableNamePack() OptMessagePack {
	return s.LocalizableNamePack
}

// GetLocalizableDescriptionPack returns the value of LocalizableDescriptionPack.
func (s *SddcSubTask) GetLocalizableDescriptionPack() OptMessagePack {
	return s.LocalizableDescriptionPack
}

// GetStatus returns the value of Status.
func (s *SddcSubTask) GetStatus() OptString {
	return s.Status
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *SddcSubTask) GetCreationTimestamp() OptString {
	return s.CreationTimestamp
}

// GetUpdateTimestamp returns the value of UpdateTimestamp.
func (s *SddcSubTask) GetUpdateTimestamp() OptString {
	return s.UpdateTimestamp
}

// GetErrors returns the value of Errors.
func (s *SddcSubTask) GetErrors() []Error {
	return s.Errors
}

// SetSddcId sets the value of SddcId.
func (s *SddcSubTask) SetSddcId(val OptString) {
	s.SddcId = val
}

// SetProcessingStateName sets the value of ProcessingStateName.
func (s *SddcSubTask) SetProcessingStateName(val OptString) {
	s.ProcessingStateName = val
}

// SetProcessingStateDescription sets the value of ProcessingStateDescription.
func (s *SddcSubTask) SetProcessingStateDescription(val OptString) {
	s.ProcessingStateDescription = val
}

// SetName sets the value of Name.
func (s *SddcSubTask) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *SddcSubTask) SetDescription(val OptString) {
	s.Description = val
}

// SetLocalizableNamePack sets the value of LocalizableNamePack.
func (s *SddcSubTask) SetLocalizableNamePack(val OptMessagePack) {
	s.LocalizableNamePack = val
}

// SetLocalizableDescriptionPack sets the value of LocalizableDescriptionPack.
func (s *SddcSubTask) SetLocalizableDescriptionPack(val OptMessagePack) {
	s.LocalizableDescriptionPack = val
}

// SetStatus sets the value of Status.
func (s *SddcSubTask) SetStatus(val OptString) {
	s.Status = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *SddcSubTask) SetCreationTimestamp(val OptString) {
	s.CreationTimestamp = val
}

// SetUpdateTimestamp sets the value of UpdateTimestamp.
func (s *SddcSubTask) SetUpdateTimestamp(val OptString) {
	s.UpdateTimestamp = val
}

// SetErrors sets the value of Errors.
func (s *SddcSubTask) SetErrors(val []Error) {
	s.Errors = val
}

// Represents a SDDC task.
// Ref: #/components/schemas/SddcTask
type SddcTask struct {
	// SDDC ID.
	ID OptString `json:"id"`
	// Task name.
	Name OptString `json:"name"`
	// SDDC Task status. One among: IN_PROGRESS, COMPLETED_WITH_SUCCESS, ROLLBACK_SUCCESS,
	// COMPLETED_WITH_FAILURE.
	Status              string         `json:"status"`
	LocalizableNamePack OptMessagePack `json:"localizableNamePack"`
	// SDDC Task creation timestamp.
	CreationTimestamp string `json:"creationTimestamp"`
	// All SDDC Sub-Tasks.
	SddcSubTasks []SddcSubTask `json:"sddcSubTasks"`
}

// GetID returns the value of ID.
func (s *SddcTask) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *SddcTask) GetName() OptString {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *SddcTask) GetStatus() string {
	return s.Status
}

// GetLocalizableNamePack returns the value of LocalizableNamePack.
func (s *SddcTask) GetLocalizableNamePack() OptMessagePack {
	return s.LocalizableNamePack
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *SddcTask) GetCreationTimestamp() string {
	return s.CreationTimestamp
}

// GetSddcSubTasks returns the value of SddcSubTasks.
func (s *SddcTask) GetSddcSubTasks() []SddcSubTask {
	return s.SddcSubTasks
}

// SetID sets the value of ID.
func (s *SddcTask) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *SddcTask) SetName(val OptString) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *SddcTask) SetStatus(val string) {
	s.Status = val
}

// SetLocalizableNamePack sets the value of LocalizableNamePack.
func (s *SddcTask) SetLocalizableNamePack(val OptMessagePack) {
	s.LocalizableNamePack = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *SddcTask) SetCreationTimestamp(val string) {
	s.CreationTimestamp = val
}

// SetSddcSubTasks sets the value of SddcSubTasks.
func (s *SddcTask) SetSddcSubTasks(val []SddcSubTask) {
	s.SddcSubTasks = val
}

func (*SddcTask) getBringupTaskByIDRes() {}
func (*SddcTask) retrySddcRes()          {}
func (*SddcTask) startBringupRes()       {}

// Spec contains parameters for vCenter.
// Ref: #/components/schemas/SddcVcenterSpec
type SddcVcenterSpec struct {
	// License File/Key.
	LicenseFile OptString `json:"licenseFile"`
	// VCenter IP address. Can be omitted if hostname is provided.
	VcenterIp OptString `json:"vcenterIp"`
	// VCenter hostname address.
	VcenterHostname string `json:"vcenterHostname"`
	// VCenter root password. The password must be between 8 characters and 20 characters long. It must
	// also contain at least one uppercase and lowercase letter, one number, and one character from '! "
	// # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { &Iota; } ~' and all characters must be ASCII.
	//  Space is not allowed in password. For VCF only: if blank, the SDDC Local Admin Password will be
	// used.
	RootVcenterPassword string `json:"rootVcenterPassword"`
	// VCenter Virtual Machine size. One among:xlarge, large, medium, small, tiny.
	VmSize OptString `json:"vmSize"`
	// VCenter Virtual Machine Storage size. One among:lstorage, xlstorage.
	StorageSize OptString `json:"storageSize"`
	// VCenter Server SSH thumbprint (RSA SHA256). This is only for VCF on VxRail.
	SshThumbprint OptString `json:"sshThumbprint"`
	// VCenter Server SSL thumbprint (SHA256). This is only for VCF on VxRail.
	SslThumbprint OptString `json:"sslThumbprint"`
}

// GetLicenseFile returns the value of LicenseFile.
func (s *SddcVcenterSpec) GetLicenseFile() OptString {
	return s.LicenseFile
}

// GetVcenterIp returns the value of VcenterIp.
func (s *SddcVcenterSpec) GetVcenterIp() OptString {
	return s.VcenterIp
}

// GetVcenterHostname returns the value of VcenterHostname.
func (s *SddcVcenterSpec) GetVcenterHostname() string {
	return s.VcenterHostname
}

// GetRootVcenterPassword returns the value of RootVcenterPassword.
func (s *SddcVcenterSpec) GetRootVcenterPassword() string {
	return s.RootVcenterPassword
}

// GetVmSize returns the value of VmSize.
func (s *SddcVcenterSpec) GetVmSize() OptString {
	return s.VmSize
}

// GetStorageSize returns the value of StorageSize.
func (s *SddcVcenterSpec) GetStorageSize() OptString {
	return s.StorageSize
}

// GetSshThumbprint returns the value of SshThumbprint.
func (s *SddcVcenterSpec) GetSshThumbprint() OptString {
	return s.SshThumbprint
}

// GetSslThumbprint returns the value of SslThumbprint.
func (s *SddcVcenterSpec) GetSslThumbprint() OptString {
	return s.SslThumbprint
}

// SetLicenseFile sets the value of LicenseFile.
func (s *SddcVcenterSpec) SetLicenseFile(val OptString) {
	s.LicenseFile = val
}

// SetVcenterIp sets the value of VcenterIp.
func (s *SddcVcenterSpec) SetVcenterIp(val OptString) {
	s.VcenterIp = val
}

// SetVcenterHostname sets the value of VcenterHostname.
func (s *SddcVcenterSpec) SetVcenterHostname(val string) {
	s.VcenterHostname = val
}

// SetRootVcenterPassword sets the value of RootVcenterPassword.
func (s *SddcVcenterSpec) SetRootVcenterPassword(val string) {
	s.RootVcenterPassword = val
}

// SetVmSize sets the value of VmSize.
func (s *SddcVcenterSpec) SetVmSize(val OptString) {
	s.VmSize = val
}

// SetStorageSize sets the value of StorageSize.
func (s *SddcVcenterSpec) SetStorageSize(val OptString) {
	s.StorageSize = val
}

// SetSshThumbprint sets the value of SshThumbprint.
func (s *SddcVcenterSpec) SetSshThumbprint(val OptString) {
	s.SshThumbprint = val
}

// SetSslThumbprint sets the value of SslThumbprint.
func (s *SddcVcenterSpec) SetSslThumbprint(val OptString) {
	s.SslThumbprint = val
}

// Spec contains security settings.
// Ref: #/components/schemas/SecuritySpec
type SecuritySpec struct {
	// ESXi certificates mode. One among:Custom, VMCA.
	EsxiCertsMode OptString `json:"esxiCertsMode"`
	// Root Certificate Authority certificate list.
	RootCaCerts []RootCaCerts `json:"rootCaCerts"`
}

// GetEsxiCertsMode returns the value of EsxiCertsMode.
func (s *SecuritySpec) GetEsxiCertsMode() OptString {
	return s.EsxiCertsMode
}

// GetRootCaCerts returns the value of RootCaCerts.
func (s *SecuritySpec) GetRootCaCerts() []RootCaCerts {
	return s.RootCaCerts
}

// SetEsxiCertsMode sets the value of EsxiCertsMode.
func (s *SecuritySpec) SetEsxiCertsMode(val OptString) {
	s.EsxiCertsMode = val
}

// SetRootCaCerts sets the value of RootCaCerts.
func (s *SecuritySpec) SetRootCaCerts(val []RootCaCerts) {
	s.RootCaCerts = val
}

// Selected check-set candidate.
// Ref: #/components/schemas/SelectedCheckSetCandidate
type SelectedCheckSetCandidate struct {
	// Id of the selected check-set.
	CheckSetId string `json:"checkSetId"`
}

// GetCheckSetId returns the value of CheckSetId.
func (s *SelectedCheckSetCandidate) GetCheckSetId() string {
	return s.CheckSetId
}

// SetCheckSetId sets the value of CheckSetId.
func (s *SelectedCheckSetCandidate) SetCheckSetId(val string) {
	s.CheckSetId = val
}

type SetBackupConfigurationBadRequest Error

func (*SetBackupConfigurationBadRequest) setBackupConfigurationRes() {}

type SetBackupConfigurationInternalServerError Error

func (*SetBackupConfigurationInternalServerError) setBackupConfigurationRes() {}

type SetCeipStatusBadRequest Error

func (*SetCeipStatusBadRequest) setCeipStatusRes() {}

type SetCeipStatusConflict Error

func (*SetCeipStatusConflict) setCeipStatusRes() {}

type SetCeipStatusInternalServerError Error

func (*SetCeipStatusInternalServerError) setCeipStatusRes() {}

// Required action for CEIP.
type SetCeipStatusReq string

const (
	SetCeipStatusReqENABLED         SetCeipStatusReq = "ENABLED"
	SetCeipStatusReqDISABLED        SetCeipStatusReq = "DISABLED"
	SetCeipStatusReqDISABLING       SetCeipStatusReq = "DISABLING"
	SetCeipStatusReqENABLING        SetCeipStatusReq = "ENABLING"
	SetCeipStatusReqENABLINGFAILED  SetCeipStatusReq = "ENABLING_FAILED"
	SetCeipStatusReqDISABLINGFAILED SetCeipStatusReq = "DISABLING_FAILED"
)

// AllValues returns all SetCeipStatusReq values.
func (SetCeipStatusReq) AllValues() []SetCeipStatusReq {
	return []SetCeipStatusReq{
		SetCeipStatusReqENABLED,
		SetCeipStatusReqDISABLED,
		SetCeipStatusReqDISABLING,
		SetCeipStatusReqENABLING,
		SetCeipStatusReqENABLINGFAILED,
		SetCeipStatusReqDISABLINGFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SetCeipStatusReq) MarshalText() ([]byte, error) {
	switch s {
	case SetCeipStatusReqENABLED:
		return []byte(s), nil
	case SetCeipStatusReqDISABLED:
		return []byte(s), nil
	case SetCeipStatusReqDISABLING:
		return []byte(s), nil
	case SetCeipStatusReqENABLING:
		return []byte(s), nil
	case SetCeipStatusReqENABLINGFAILED:
		return []byte(s), nil
	case SetCeipStatusReqDISABLINGFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SetCeipStatusReq) UnmarshalText(data []byte) error {
	switch SetCeipStatusReq(data) {
	case SetCeipStatusReqENABLED:
		*s = SetCeipStatusReqENABLED
		return nil
	case SetCeipStatusReqDISABLED:
		*s = SetCeipStatusReqDISABLED
		return nil
	case SetCeipStatusReqDISABLING:
		*s = SetCeipStatusReqDISABLING
		return nil
	case SetCeipStatusReqENABLING:
		*s = SetCeipStatusReqENABLING
		return nil
	case SetCeipStatusReqENABLINGFAILED:
		*s = SetCeipStatusReqENABLINGFAILED
		return nil
	case SetCeipStatusReqDISABLINGFAILED:
		*s = SetCeipStatusReqDISABLINGFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SetLicenseKeyForResourceBadRequest Error

func (*SetLicenseKeyForResourceBadRequest) setLicenseKeyForResourceRes() {}

type SetLicenseKeyForResourceInternalServerError Error

func (*SetLicenseKeyForResourceInternalServerError) setLicenseKeyForResourceRes() {}

// Specify relative allocation between resource consumers.
// Ref: #/components/schemas/SharesInfo
type SharesInfo struct {
	// The number of shares allocated.
	Shares OptInt32 `json:"shares"`
	// The allocation level.
	Level OptString `json:"level"`
}

// GetShares returns the value of Shares.
func (s *SharesInfo) GetShares() OptInt32 {
	return s.Shares
}

// GetLevel returns the value of Level.
func (s *SharesInfo) GetLevel() OptString {
	return s.Level
}

// SetShares sets the value of Shares.
func (s *SharesInfo) SetShares(val OptInt32) {
	s.Shares = val
}

// SetLevel sets the value of Level.
func (s *SharesInfo) SetLevel(val OptString) {
	s.Level = val
}

// Model for sku with their name, description, patchBundles and bom.
// Ref: #/components/schemas/SkuBomDetails
type SkuBomDetails struct {
	// SKU name.
	Name OptString `json:"name"`
	// Description to be shown in release page.
	Description OptString `json:"description"`
	// List of patch bundles in this release.
	SkuSpecificPatchBundles []SkuSpecificPatchBundles `json:"skuSpecificPatchBundles"`
	// Sku specific bill of materials.
	Bom []ProductVersion `json:"bom"`
}

// GetName returns the value of Name.
func (s *SkuBomDetails) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *SkuBomDetails) GetDescription() OptString {
	return s.Description
}

// GetSkuSpecificPatchBundles returns the value of SkuSpecificPatchBundles.
func (s *SkuBomDetails) GetSkuSpecificPatchBundles() []SkuSpecificPatchBundles {
	return s.SkuSpecificPatchBundles
}

// GetBom returns the value of Bom.
func (s *SkuBomDetails) GetBom() []ProductVersion {
	return s.Bom
}

// SetName sets the value of Name.
func (s *SkuBomDetails) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *SkuBomDetails) SetDescription(val OptString) {
	s.Description = val
}

// SetSkuSpecificPatchBundles sets the value of SkuSpecificPatchBundles.
func (s *SkuBomDetails) SetSkuSpecificPatchBundles(val []SkuSpecificPatchBundles) {
	s.SkuSpecificPatchBundles = val
}

// SetBom sets the value of Bom.
func (s *SkuBomDetails) SetBom(val []ProductVersion) {
	s.Bom = val
}

// Model for Sku specific patch bundle in a release.
// Ref: #/components/schemas/SkuSpecificPatchBundles
type SkuSpecificPatchBundles struct {
	// Bundle type of the patch bundle.
	BundleType string `json:"bundleType"`
	// Bundle Version of the product.
	BundleVersion string `json:"bundleVersion"`
	// Product version.
	Version string `json:"version"`
}

// GetBundleType returns the value of BundleType.
func (s *SkuSpecificPatchBundles) GetBundleType() string {
	return s.BundleType
}

// GetBundleVersion returns the value of BundleVersion.
func (s *SkuSpecificPatchBundles) GetBundleVersion() string {
	return s.BundleVersion
}

// GetVersion returns the value of Version.
func (s *SkuSpecificPatchBundles) GetVersion() string {
	return s.Version
}

// SetBundleType sets the value of BundleType.
func (s *SkuSpecificPatchBundles) SetBundleType(val string) {
	s.BundleType = val
}

// SetBundleVersion sets the value of BundleVersion.
func (s *SkuSpecificPatchBundles) SetBundleVersion(val string) {
	s.BundleVersion = val
}

// SetVersion sets the value of Version.
func (s *SkuSpecificPatchBundles) SetVersion(val string) {
	s.Version = val
}

// Represents informtion related to smart nic.
// Ref: #/components/schemas/SmartNicInfo
type SmartNicInfo struct {
	// Vendor Name of the SmartNicInfo.
	VendorName OptString `json:"vendorName"`
	// Dpu ID corresponding to the SmartNicInfo.
	DpuId OptString `json:"dpuId"`
}

// GetVendorName returns the value of VendorName.
func (s *SmartNicInfo) GetVendorName() OptString {
	return s.VendorName
}

// GetDpuId returns the value of DpuId.
func (s *SmartNicInfo) GetDpuId() OptString {
	return s.DpuId
}

// SetVendorName sets the value of VendorName.
func (s *SmartNicInfo) SetVendorName(val OptString) {
	s.VendorName = val
}

// SetDpuId sets the value of DpuId.
func (s *SmartNicInfo) SetDpuId(val OptString) {
	s.DpuId = val
}

// Software Components which are Upgradable.
// Ref: #/components/schemas/SoftwareComponent
type SoftwareComponent struct {
	// ID of Resource/Software Component.
	ID OptString `json:"id"`
	// Type of Resource/Software Component.
	Type OptString `json:"type"`
}

// GetID returns the value of ID.
func (s *SoftwareComponent) GetID() OptString {
	return s.ID
}

// GetType returns the value of Type.
func (s *SoftwareComponent) GetType() OptString {
	return s.Type
}

// SetID sets the value of ID.
func (s *SoftwareComponent) SetID(val OptString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *SoftwareComponent) SetType(val OptString) {
	s.Type = val
}

// SoftwareSpec contains base os, components, hardware support, addOn metadata to install/update the
// appropriate Cloud Foundation software components in your management domain or workload domain.
// Ref: #/components/schemas/SoftwareInfo
type SoftwareInfo struct {
	BaseImage BaseImageInfo `json:"baseImage"`
	AddOn     OptAddOnInfo  `json:"addOn"`
	// Personality components.
	Components      OptSoftwareInfoComponents `json:"components"`
	HardwareSupport OptHardwareSupportInfo    `json:"hardwareSupport"`
}

// GetBaseImage returns the value of BaseImage.
func (s *SoftwareInfo) GetBaseImage() BaseImageInfo {
	return s.BaseImage
}

// GetAddOn returns the value of AddOn.
func (s *SoftwareInfo) GetAddOn() OptAddOnInfo {
	return s.AddOn
}

// GetComponents returns the value of Components.
func (s *SoftwareInfo) GetComponents() OptSoftwareInfoComponents {
	return s.Components
}

// GetHardwareSupport returns the value of HardwareSupport.
func (s *SoftwareInfo) GetHardwareSupport() OptHardwareSupportInfo {
	return s.HardwareSupport
}

// SetBaseImage sets the value of BaseImage.
func (s *SoftwareInfo) SetBaseImage(val BaseImageInfo) {
	s.BaseImage = val
}

// SetAddOn sets the value of AddOn.
func (s *SoftwareInfo) SetAddOn(val OptAddOnInfo) {
	s.AddOn = val
}

// SetComponents sets the value of Components.
func (s *SoftwareInfo) SetComponents(val OptSoftwareInfoComponents) {
	s.Components = val
}

// SetHardwareSupport sets the value of HardwareSupport.
func (s *SoftwareInfo) SetHardwareSupport(val OptHardwareSupportInfo) {
	s.HardwareSupport = val
}

// Personality components.
type SoftwareInfoComponents map[string]ComponentInfo

func (s *SoftwareInfoComponents) init() SoftwareInfoComponents {
	m := *s
	if m == nil {
		m = map[string]ComponentInfo{}
		*s = m
	}
	return m
}

// Details of the Identity Source.
// Ref: #/components/schemas/SourceDetails
type SourceDetails struct {
	// Base distinguished name for users.
	UsersBaseDn string `json:"usersBaseDn"`
	// Base distinguished name for groups.
	GroupsBaseDn string `json:"groupsBaseDn"`
	// SSL certificate chain in base64 encoding. This field can be unset only, if all the active
	// directory server endpoints use the LDAP (not LDAPS) protocol.
	CertChain []string `json:"certChain"`
	// Active directory server endpoints. At least one active directory server endpoint must be set.
	ServerEndpoints []string `json:"serverEndpoints"`
}

// GetUsersBaseDn returns the value of UsersBaseDn.
func (s *SourceDetails) GetUsersBaseDn() string {
	return s.UsersBaseDn
}

// GetGroupsBaseDn returns the value of GroupsBaseDn.
func (s *SourceDetails) GetGroupsBaseDn() string {
	return s.GroupsBaseDn
}

// GetCertChain returns the value of CertChain.
func (s *SourceDetails) GetCertChain() []string {
	return s.CertChain
}

// GetServerEndpoints returns the value of ServerEndpoints.
func (s *SourceDetails) GetServerEndpoints() []string {
	return s.ServerEndpoints
}

// SetUsersBaseDn sets the value of UsersBaseDn.
func (s *SourceDetails) SetUsersBaseDn(val string) {
	s.UsersBaseDn = val
}

// SetGroupsBaseDn sets the value of GroupsBaseDn.
func (s *SourceDetails) SetGroupsBaseDn(val string) {
	s.GroupsBaseDn = val
}

// SetCertChain sets the value of CertChain.
func (s *SourceDetails) SetCertChain(val []string) {
	s.CertChain = val
}

// SetServerEndpoints sets the value of ServerEndpoints.
func (s *SourceDetails) SetServerEndpoints(val []string) {
	s.ServerEndpoints = val
}

// Represents SSO domain entity.
// Ref: #/components/schemas/SsoDomainEntity
type SsoDomainEntity struct {
	// The ID of the SSO domain entity.
	ID OptString `json:"id"`
	// The name of the SSO domain entity.
	Name OptString `json:"name"`
	// The type of the SSO domain entity.
	Type string `json:"type"`
}

// GetID returns the value of ID.
func (s *SsoDomainEntity) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *SsoDomainEntity) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *SsoDomainEntity) GetType() string {
	return s.Type
}

// SetID sets the value of ID.
func (s *SsoDomainEntity) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *SsoDomainEntity) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *SsoDomainEntity) SetType(val string) {
	s.Type = val
}

// Spec for the SSO configuration in a VMware Cloud Foundation Domain.
// Ref: #/components/schemas/SsoDomainSpec
type SsoDomainSpec struct {
	// New SSO domain password.
	SsoDomainPassword OptString `json:"ssoDomainPassword"`
	// SSO domain name to be created.
	SsoDomainName OptString `json:"ssoDomainName"`
}

// GetSsoDomainPassword returns the value of SsoDomainPassword.
func (s *SsoDomainSpec) GetSsoDomainPassword() OptString {
	return s.SsoDomainPassword
}

// GetSsoDomainName returns the value of SsoDomainName.
func (s *SsoDomainSpec) GetSsoDomainName() OptString {
	return s.SsoDomainName
}

// SetSsoDomainPassword sets the value of SsoDomainPassword.
func (s *SsoDomainSpec) SetSsoDomainPassword(val OptString) {
	s.SsoDomainPassword = val
}

// SetSsoDomainName sets the value of SsoDomainName.
func (s *SsoDomainSpec) SetSsoDomainName(val OptString) {
	s.SsoDomainName = val
}

// Represents a Stage.
// Ref: #/components/schemas/Stage
type Stage struct {
	// Stage name.
	Name string `json:"name"`
	// Stage type.
	Type string `json:"type"`
	// Stage description.
	Description string `json:"description"`
	// Stage status.
	Status              string `json:"status"`
	CreationTimestamp   string `json:"creationTimestamp"`
	CompletionTimestamp string `json:"completionTimestamp"`
	// List of errors in case of a failure.
	Errors []Error `json:"errors"`
}

// GetName returns the value of Name.
func (s *Stage) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *Stage) GetType() string {
	return s.Type
}

// GetDescription returns the value of Description.
func (s *Stage) GetDescription() string {
	return s.Description
}

// GetStatus returns the value of Status.
func (s *Stage) GetStatus() string {
	return s.Status
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *Stage) GetCreationTimestamp() string {
	return s.CreationTimestamp
}

// GetCompletionTimestamp returns the value of CompletionTimestamp.
func (s *Stage) GetCompletionTimestamp() string {
	return s.CompletionTimestamp
}

// GetErrors returns the value of Errors.
func (s *Stage) GetErrors() []Error {
	return s.Errors
}

// SetName sets the value of Name.
func (s *Stage) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *Stage) SetType(val string) {
	s.Type = val
}

// SetDescription sets the value of Description.
func (s *Stage) SetDescription(val string) {
	s.Description = val
}

// SetStatus sets the value of Status.
func (s *Stage) SetStatus(val string) {
	s.Status = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *Stage) SetCreationTimestamp(val string) {
	s.CreationTimestamp = val
}

// SetCompletionTimestamp sets the value of CompletionTimestamp.
func (s *Stage) SetCompletionTimestamp(val string) {
	s.CompletionTimestamp = val
}

// SetErrors sets the value of Errors.
func (s *Stage) SetErrors(val []Error) {
	s.Errors = val
}

type StartBackupBadRequest Error

func (*StartBackupBadRequest) startBackupRes() {}

type StartBackupInternalServerError Error

func (*StartBackupInternalServerError) startBackupRes() {}

type StartBringupBadRequest Error

func (*StartBringupBadRequest) startBringupRes() {}

type StartBringupInternalServerError Error

func (*StartBringupInternalServerError) startBringupRes() {}

type StartBringupSpecConversionBadRequest Error

func (*StartBringupSpecConversionBadRequest) startBringupSpecConversionRes() {}

type StartBringupSpecConversionDesign string

const (
	StartBringupSpecConversionDesignEMS    StartBringupSpecConversionDesign = "EMS"
	StartBringupSpecConversionDesignVXRAIL StartBringupSpecConversionDesign = "VXRAIL"
)

// AllValues returns all StartBringupSpecConversionDesign values.
func (StartBringupSpecConversionDesign) AllValues() []StartBringupSpecConversionDesign {
	return []StartBringupSpecConversionDesign{
		StartBringupSpecConversionDesignEMS,
		StartBringupSpecConversionDesignVXRAIL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartBringupSpecConversionDesign) MarshalText() ([]byte, error) {
	switch s {
	case StartBringupSpecConversionDesignEMS:
		return []byte(s), nil
	case StartBringupSpecConversionDesignVXRAIL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartBringupSpecConversionDesign) UnmarshalText(data []byte) error {
	switch StartBringupSpecConversionDesign(data) {
	case StartBringupSpecConversionDesignEMS:
		*s = StartBringupSpecConversionDesignEMS
		return nil
	case StartBringupSpecConversionDesignVXRAIL:
		*s = StartBringupSpecConversionDesignVXRAIL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StartBringupSpecConversionInternalServerError Error

func (*StartBringupSpecConversionInternalServerError) startBringupSpecConversionRes() {}

type StartBringupSpecConversionNotFound Error

func (*StartBringupSpecConversionNotFound) startBringupSpecConversionRes() {}

type StartBringupSpecConversionNotImplemented Error

func (*StartBringupSpecConversionNotImplemented) startBringupSpecConversionRes() {}

type StartBringupSpecConversionReq struct {
	// SDDC specification file which is either a JSON or xls file.
	SpecFile ht.MultipartFile `json:"specFile"`
}

// GetSpecFile returns the value of SpecFile.
func (s *StartBringupSpecConversionReq) GetSpecFile() ht.MultipartFile {
	return s.SpecFile
}

// SetSpecFile sets the value of SpecFile.
func (s *StartBringupSpecConversionReq) SetSpecFile(val ht.MultipartFile) {
	s.SpecFile = val
}

type StartBundleDownloadByIDBadRequest Error

func (*StartBundleDownloadByIDBadRequest) startBundleDownloadByIDRes() {}

type StartBundleDownloadByIDConflict Error

func (*StartBundleDownloadByIDConflict) startBundleDownloadByIDRes() {}

type StartBundleDownloadByIDInternalServerError Error

func (*StartBundleDownloadByIDInternalServerError) startBundleDownloadByIDRes() {}

type StartHealthCheckBadRequest Error

func (*StartHealthCheckBadRequest) startHealthCheckRes() {}

type StartHealthCheckConflict Error

func (*StartHealthCheckConflict) startHealthCheckRes() {}

type StartHealthCheckInternalServerError Error

func (*StartHealthCheckInternalServerError) startHealthCheckRes() {}

type StartHealthCheckUnauthorized Error

func (*StartHealthCheckUnauthorized) startHealthCheckRes() {}

type StartNsxCriteriaQueryBadRequest Error

func (*StartNsxCriteriaQueryBadRequest) startNsxCriteriaQueryRes() {}

type StartNsxCriteriaQueryInternalServerError Error

func (*StartNsxCriteriaQueryInternalServerError) startNsxCriteriaQueryRes() {}

type StartPrecheckBadRequest Error

func (*StartPrecheckBadRequest) startPrecheckRes() {}

type StartPrecheckInternalServerError Error

func (*StartPrecheckInternalServerError) startPrecheckRes() {}

type StartRestoreBadRequest Error

func (*StartRestoreBadRequest) startRestoreRes() {}

type StartRestoreInternalServerError Error

func (*StartRestoreInternalServerError) startRestoreRes() {}

type StartSupportBundleBadRequest Error

func (*StartSupportBundleBadRequest) startSupportBundleRes() {}

type StartSupportBundleConflict Error

func (*StartSupportBundleConflict) startSupportBundleRes() {}

type StartSupportBundleInternalServerError Error

func (*StartSupportBundleInternalServerError) startSupportBundleRes() {}

type StartSupportBundleUnauthorized Error

func (*StartSupportBundleUnauthorized) startSupportBundleRes() {}

type StartUpgradePrecheckBadRequest Error

func (*StartUpgradePrecheckBadRequest) startUpgradePrecheckRes() {}

type StartUpgradePrecheckForbidden Error

func (*StartUpgradePrecheckForbidden) startUpgradePrecheckRes() {}

type StartUpgradePrecheckInternalServerError Error

func (*StartUpgradePrecheckInternalServerError) startUpgradePrecheckRes() {}

// Represents information about storage on a host.
// Ref: #/components/schemas/Storage
type Storage struct {
	// Total storage capacity in MB.
	TotalCapacityMB OptFloat64 `json:"totalCapacityMB"`
	// Used storage capacity in MB.
	UsedCapacityMB OptFloat64 `json:"usedCapacityMB"`
	// Information about disks.
	Disks []Disk `json:"disks"`
}

// GetTotalCapacityMB returns the value of TotalCapacityMB.
func (s *Storage) GetTotalCapacityMB() OptFloat64 {
	return s.TotalCapacityMB
}

// GetUsedCapacityMB returns the value of UsedCapacityMB.
func (s *Storage) GetUsedCapacityMB() OptFloat64 {
	return s.UsedCapacityMB
}

// GetDisks returns the value of Disks.
func (s *Storage) GetDisks() []Disk {
	return s.Disks
}

// SetTotalCapacityMB sets the value of TotalCapacityMB.
func (s *Storage) SetTotalCapacityMB(val OptFloat64) {
	s.TotalCapacityMB = val
}

// SetUsedCapacityMB sets the value of UsedCapacityMB.
func (s *Storage) SetUsedCapacityMB(val OptFloat64) {
	s.UsedCapacityMB = val
}

// SetDisks sets the value of Disks.
func (s *Storage) SetDisks(val []Disk) {
	s.Disks = val
}

// Storage container representation.
// Ref: #/components/schemas/StorageContainer
type StorageContainer struct {
	// ID of the storage container.
	ID OptString `json:"id"`
	// Name of the storage container.
	Name string `json:"name"`
	// Storage protocol type.
	ProtocolType string `json:"protocolType"`
	// ID of the cluster which is using the storage container.
	ClusterId OptString `json:"clusterId"`
}

// GetID returns the value of ID.
func (s *StorageContainer) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *StorageContainer) GetName() string {
	return s.Name
}

// GetProtocolType returns the value of ProtocolType.
func (s *StorageContainer) GetProtocolType() string {
	return s.ProtocolType
}

// GetClusterId returns the value of ClusterId.
func (s *StorageContainer) GetClusterId() OptString {
	return s.ClusterId
}

// SetID sets the value of ID.
func (s *StorageContainer) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *StorageContainer) SetName(val string) {
	s.Name = val
}

// SetProtocolType sets the value of ProtocolType.
func (s *StorageContainer) SetProtocolType(val string) {
	s.ProtocolType = val
}

// SetClusterId sets the value of ClusterId.
func (s *StorageContainer) SetClusterId(val OptString) {
	s.ClusterId = val
}

// Storage container update data.
// Ref: #/components/schemas/StorageContainerUpdateSpec
type StorageContainerUpdateSpec struct {
	// Name of the storage container.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *StorageContainerUpdateSpec) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *StorageContainerUpdateSpec) SetName(val string) {
	s.Name = val
}

// Represents a storage metric with used and total for a resource.
// Ref: #/components/schemas/StorageInfo
type StorageInfo struct {
	Used  OptDataMetric `json:"used"`
	Total OptDataMetric `json:"total"`
}

// GetUsed returns the value of Used.
func (s *StorageInfo) GetUsed() OptDataMetric {
	return s.Used
}

// GetTotal returns the value of Total.
func (s *StorageInfo) GetTotal() OptDataMetric {
	return s.Total
}

// SetUsed sets the value of Used.
func (s *StorageInfo) SetUsed(val OptDataMetric) {
	s.Used = val
}

// SetTotal sets the value of Total.
func (s *StorageInfo) SetTotal(val OptDataMetric) {
	s.Total = val
}

// This specification contains the host switch configurations for the NSX transport nodes belonging
// to Secondary AZ.
// Ref: #/components/schemas/StretchClusterNetworkProfile
type StretchClusterNetworkProfile struct {
	// The network profile name.
	Name string `json:"name"`
	// The network profile description.
	Description OptString `json:"description"`
	// The list of NSX host switch configurations.
	NsxtHostSwitchConfigs []NsxtHostSwitchConfig `json:"nsxtHostSwitchConfigs"`
}

// GetName returns the value of Name.
func (s *StretchClusterNetworkProfile) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *StretchClusterNetworkProfile) GetDescription() OptString {
	return s.Description
}

// GetNsxtHostSwitchConfigs returns the value of NsxtHostSwitchConfigs.
func (s *StretchClusterNetworkProfile) GetNsxtHostSwitchConfigs() []NsxtHostSwitchConfig {
	return s.NsxtHostSwitchConfigs
}

// SetName sets the value of Name.
func (s *StretchClusterNetworkProfile) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *StretchClusterNetworkProfile) SetDescription(val OptString) {
	s.Description = val
}

// SetNsxtHostSwitchConfigs sets the value of NsxtHostSwitchConfigs.
func (s *StretchClusterNetworkProfile) SetNsxtHostSwitchConfigs(val []NsxtHostSwitchConfig) {
	s.NsxtHostSwitchConfigs = val
}

// Represents a sub-task.
// Ref: #/components/schemas/SubTask
type SubTask struct {
	// Sub-task name.
	Name string `json:"name"`
	// Sub-task type.
	Type OptString `json:"type"`
	// Sub-task description.
	Description string `json:"description"`
	// Sub-task status.
	Status string `json:"status"`
	// Sub-task creation timestamp.
	CreationTimestamp string `json:"creationTimestamp"`
	// Sub-task completion timestamp.
	CompletionTimestamp string `json:"completionTimestamp"`
	// List of stages of the sub-task.
	Stages []Stage `json:"stages"`
	// List of errors in case of a failure.
	Errors []Error `json:"errors"`
	// List of resources associated with sub-task.
	Resources []Resource `json:"resources"`
	// List of child subtasks associated with this subtask.
	SubTasks []SubTask `json:"subTasks"`
}

// GetName returns the value of Name.
func (s *SubTask) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *SubTask) GetType() OptString {
	return s.Type
}

// GetDescription returns the value of Description.
func (s *SubTask) GetDescription() string {
	return s.Description
}

// GetStatus returns the value of Status.
func (s *SubTask) GetStatus() string {
	return s.Status
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *SubTask) GetCreationTimestamp() string {
	return s.CreationTimestamp
}

// GetCompletionTimestamp returns the value of CompletionTimestamp.
func (s *SubTask) GetCompletionTimestamp() string {
	return s.CompletionTimestamp
}

// GetStages returns the value of Stages.
func (s *SubTask) GetStages() []Stage {
	return s.Stages
}

// GetErrors returns the value of Errors.
func (s *SubTask) GetErrors() []Error {
	return s.Errors
}

// GetResources returns the value of Resources.
func (s *SubTask) GetResources() []Resource {
	return s.Resources
}

// GetSubTasks returns the value of SubTasks.
func (s *SubTask) GetSubTasks() []SubTask {
	return s.SubTasks
}

// SetName sets the value of Name.
func (s *SubTask) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *SubTask) SetType(val OptString) {
	s.Type = val
}

// SetDescription sets the value of Description.
func (s *SubTask) SetDescription(val string) {
	s.Description = val
}

// SetStatus sets the value of Status.
func (s *SubTask) SetStatus(val string) {
	s.Status = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *SubTask) SetCreationTimestamp(val string) {
	s.CreationTimestamp = val
}

// SetCompletionTimestamp sets the value of CompletionTimestamp.
func (s *SubTask) SetCompletionTimestamp(val string) {
	s.CompletionTimestamp = val
}

// SetStages sets the value of Stages.
func (s *SubTask) SetStages(val []Stage) {
	s.Stages = val
}

// SetErrors sets the value of Errors.
func (s *SubTask) SetErrors(val []Error) {
	s.Errors = val
}

// SetResources sets the value of Resources.
func (s *SubTask) SetResources(val []Resource) {
	s.Resources = val
}

// SetSubTasks sets the value of SubTasks.
func (s *SubTask) SetSubTasks(val []SubTask) {
	s.SubTasks = val
}

// Ref: #/components/schemas/SupportBundle
type SupportBundle struct {
	// Support Bundle Status.
	Status OptString `json:"status"`
	// CreationTimestamp.
	CreationTimestamp OptString `json:"creationTimestamp"`
	// Name of the Operation.
	Description OptString `json:"description"`
	// Indicate if bundle is available in file system.
	BundleAvailable OptString `json:"bundleAvailable"`
	// Id of the Support Bundle task.
	ID OptString `json:"id"`
	// CompletionTimestamp.
	CompletionTimestamp OptString `json:"completionTimestamp"`
	// Name of the Support Bundle.
	BundleName OptString `json:"bundleName"`
}

// GetStatus returns the value of Status.
func (s *SupportBundle) GetStatus() OptString {
	return s.Status
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *SupportBundle) GetCreationTimestamp() OptString {
	return s.CreationTimestamp
}

// GetDescription returns the value of Description.
func (s *SupportBundle) GetDescription() OptString {
	return s.Description
}

// GetBundleAvailable returns the value of BundleAvailable.
func (s *SupportBundle) GetBundleAvailable() OptString {
	return s.BundleAvailable
}

// GetID returns the value of ID.
func (s *SupportBundle) GetID() OptString {
	return s.ID
}

// GetCompletionTimestamp returns the value of CompletionTimestamp.
func (s *SupportBundle) GetCompletionTimestamp() OptString {
	return s.CompletionTimestamp
}

// GetBundleName returns the value of BundleName.
func (s *SupportBundle) GetBundleName() OptString {
	return s.BundleName
}

// SetStatus sets the value of Status.
func (s *SupportBundle) SetStatus(val OptString) {
	s.Status = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *SupportBundle) SetCreationTimestamp(val OptString) {
	s.CreationTimestamp = val
}

// SetDescription sets the value of Description.
func (s *SupportBundle) SetDescription(val OptString) {
	s.Description = val
}

// SetBundleAvailable sets the value of BundleAvailable.
func (s *SupportBundle) SetBundleAvailable(val OptString) {
	s.BundleAvailable = val
}

// SetID sets the value of ID.
func (s *SupportBundle) SetID(val OptString) {
	s.ID = val
}

// SetCompletionTimestamp sets the value of CompletionTimestamp.
func (s *SupportBundle) SetCompletionTimestamp(val OptString) {
	s.CompletionTimestamp = val
}

// SetBundleName sets the value of BundleName.
func (s *SupportBundle) SetBundleName(val OptString) {
	s.BundleName = val
}

func (*SupportBundle) getSupportBundleStatusRes() {}
func (*SupportBundle) startSupportBundleRes()     {}

// SupportBundle config.
// Ref: #/components/schemas/SupportBundleConfig
type SupportBundleConfig struct {
	// Skip known_hosts file for SupportBundle collection.
	SkipKnownHostCheck OptBool `json:"skipKnownHostCheck"`
	// Run SOS operations, even if there is a Workload running.
	Force OptBool `json:"force"`
}

// GetSkipKnownHostCheck returns the value of SkipKnownHostCheck.
func (s *SupportBundleConfig) GetSkipKnownHostCheck() OptBool {
	return s.SkipKnownHostCheck
}

// GetForce returns the value of Force.
func (s *SupportBundleConfig) GetForce() OptBool {
	return s.Force
}

// SetSkipKnownHostCheck sets the value of SkipKnownHostCheck.
func (s *SupportBundleConfig) SetSkipKnownHostCheck(val OptBool) {
	s.SkipKnownHostCheck = val
}

// SetForce sets the value of Force.
func (s *SupportBundleConfig) SetForce(val OptBool) {
	s.Force = val
}

// Sos Additional Reports for Support Bundle.
// Ref: #/components/schemas/SupportBundleIncludeItems
type SupportBundleIncludeItems struct {
	// Collect Vcf Summary Reports.
	SummaryReport OptBool `json:"summaryReport"`
	// Perform SOS Health checks.
	HealthCheck OptBool `json:"healthCheck"`
}

// GetSummaryReport returns the value of SummaryReport.
func (s *SupportBundleIncludeItems) GetSummaryReport() OptBool {
	return s.SummaryReport
}

// GetHealthCheck returns the value of HealthCheck.
func (s *SupportBundleIncludeItems) GetHealthCheck() OptBool {
	return s.HealthCheck
}

// SetSummaryReport sets the value of SummaryReport.
func (s *SupportBundleIncludeItems) SetSummaryReport(val OptBool) {
	s.SummaryReport = val
}

// SetHealthCheck sets the value of HealthCheck.
func (s *SupportBundleIncludeItems) SetHealthCheck(val OptBool) {
	s.HealthCheck = val
}

// Sos options for support bundle collection.
// Ref: #/components/schemas/SupportBundleOption
type SupportBundleOption struct {
	Config  OptSupportBundleConfig       `json:"config"`
	Include OptSupportBundleIncludeItems `json:"include"`
}

// GetConfig returns the value of Config.
func (s *SupportBundleOption) GetConfig() OptSupportBundleConfig {
	return s.Config
}

// GetInclude returns the value of Include.
func (s *SupportBundleOption) GetInclude() OptSupportBundleIncludeItems {
	return s.Include
}

// SetConfig sets the value of Config.
func (s *SupportBundleOption) SetConfig(val OptSupportBundleConfig) {
	s.Config = val
}

// SetInclude sets the value of Include.
func (s *SupportBundleOption) SetInclude(val OptSupportBundleIncludeItems) {
	s.Include = val
}

// Domain and cluster under which logs should be collected.
// Ref: #/components/schemas/SupportBundleScope
type SupportBundleScope struct {
	// Include free hosts.
	IncludeFreeHosts OptBool `json:"includeFreeHosts"`
	// Domains and Clusters for SOS operation.
	Domains []Domains `json:"domains"`
}

// GetIncludeFreeHosts returns the value of IncludeFreeHosts.
func (s *SupportBundleScope) GetIncludeFreeHosts() OptBool {
	return s.IncludeFreeHosts
}

// GetDomains returns the value of Domains.
func (s *SupportBundleScope) GetDomains() []Domains {
	return s.Domains
}

// SetIncludeFreeHosts sets the value of IncludeFreeHosts.
func (s *SupportBundleScope) SetIncludeFreeHosts(val OptBool) {
	s.IncludeFreeHosts = val
}

// SetDomains sets the value of Domains.
func (s *SupportBundleScope) SetDomains(val []Domains) {
	s.Domains = val
}

// Ref: #/components/schemas/SupportBundleSpec
type SupportBundleSpec struct {
	Options OptSupportBundleOption `json:"options"`
	Scope   OptSupportBundleScope  `json:"scope"`
	Logs    OptLogs                `json:"logs"`
}

// GetOptions returns the value of Options.
func (s *SupportBundleSpec) GetOptions() OptSupportBundleOption {
	return s.Options
}

// GetScope returns the value of Scope.
func (s *SupportBundleSpec) GetScope() OptSupportBundleScope {
	return s.Scope
}

// GetLogs returns the value of Logs.
func (s *SupportBundleSpec) GetLogs() OptLogs {
	return s.Logs
}

// SetOptions sets the value of Options.
func (s *SupportBundleSpec) SetOptions(val OptSupportBundleOption) {
	s.Options = val
}

// SetScope sets the value of Scope.
func (s *SupportBundleSpec) SetScope(val OptSupportBundleScope) {
	s.Scope = val
}

// SetLogs sets the value of Logs.
func (s *SupportBundleSpec) SetLogs(val OptLogs) {
	s.Logs = val
}

// Represents the information about sync client token.
// Ref: #/components/schemas/SyncClientTokenInfo
type SyncClientTokenInfo struct {
	// The seconds in which the token expires. Please start using expireAt field for the same.
	//
	// Deprecated: schema marks this property as deprecated.
	ExpireIn int64 `json:"expireIn"`
	// The seconds at which the token expires.
	ExpireAt string `json:"expireAt"`
	// The sync client bearer token.
	Token string `json:"token"`
	// The WS1B SCIM URL to push users and groups data from external identity provider.
	ScimUrl string `json:"scimUrl"`
}

// GetExpireIn returns the value of ExpireIn.
func (s *SyncClientTokenInfo) GetExpireIn() int64 {
	return s.ExpireIn
}

// GetExpireAt returns the value of ExpireAt.
func (s *SyncClientTokenInfo) GetExpireAt() string {
	return s.ExpireAt
}

// GetToken returns the value of Token.
func (s *SyncClientTokenInfo) GetToken() string {
	return s.Token
}

// GetScimUrl returns the value of ScimUrl.
func (s *SyncClientTokenInfo) GetScimUrl() string {
	return s.ScimUrl
}

// SetExpireIn sets the value of ExpireIn.
func (s *SyncClientTokenInfo) SetExpireIn(val int64) {
	s.ExpireIn = val
}

// SetExpireAt sets the value of ExpireAt.
func (s *SyncClientTokenInfo) SetExpireAt(val string) {
	s.ExpireAt = val
}

// SetToken sets the value of Token.
func (s *SyncClientTokenInfo) SetToken(val string) {
	s.Token = val
}

// SetScimUrl sets the value of ScimUrl.
func (s *SyncClientTokenInfo) SetScimUrl(val string) {
	s.ScimUrl = val
}

// Represents a system.
// Ref: #/components/schemas/System
type System struct {
	// The identifier of the system.
	ID OptString `json:"id"`
	// The maximum number of domains allowed in subscription mode.
	MaxAllowedDomainsInSubscription OptInt32 `json:"maxAllowedDomainsInSubscription"`
}

// GetID returns the value of ID.
func (s *System) GetID() OptString {
	return s.ID
}

// GetMaxAllowedDomainsInSubscription returns the value of MaxAllowedDomainsInSubscription.
func (s *System) GetMaxAllowedDomainsInSubscription() OptInt32 {
	return s.MaxAllowedDomainsInSubscription
}

// SetID sets the value of ID.
func (s *System) SetID(val OptString) {
	s.ID = val
}

// SetMaxAllowedDomainsInSubscription sets the value of MaxAllowedDomainsInSubscription.
func (s *System) SetMaxAllowedDomainsInSubscription(val OptInt32) {
	s.MaxAllowedDomainsInSubscription = val
}

func (*System) getSystemConfigurationRes() {}

// Contains the parameters required to perform update operation on system.
// Ref: #/components/schemas/SystemUpdateSpec
type SystemUpdateSpec struct {
	// New limit of amount of domains in subscription mode.
	MaxAllowedDomainsInSubscription int32 `json:"maxAllowedDomainsInSubscription"`
}

// GetMaxAllowedDomainsInSubscription returns the value of MaxAllowedDomainsInSubscription.
func (s *SystemUpdateSpec) GetMaxAllowedDomainsInSubscription() int32 {
	return s.MaxAllowedDomainsInSubscription
}

// SetMaxAllowedDomainsInSubscription sets the value of MaxAllowedDomainsInSubscription.
func (s *SystemUpdateSpec) SetMaxAllowedDomainsInSubscription(val int32) {
	s.MaxAllowedDomainsInSubscription = val
}

// Represents a tag.
// Ref: #/components/schemas/Tag
type Tag struct {
	// ID of the tag.
	ID OptString `json:"id"`
	// Name of the tag.
	Name OptString `json:"name"`
	// ID of the tag category.
	CategoryId OptString `json:"categoryId"`
	// Category name of the tag.
	CategoryName OptString `json:"categoryName"`
}

// GetID returns the value of ID.
func (s *Tag) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *Tag) GetName() OptString {
	return s.Name
}

// GetCategoryId returns the value of CategoryId.
func (s *Tag) GetCategoryId() OptString {
	return s.CategoryId
}

// GetCategoryName returns the value of CategoryName.
func (s *Tag) GetCategoryName() OptString {
	return s.CategoryName
}

// SetID sets the value of ID.
func (s *Tag) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Tag) SetName(val OptString) {
	s.Name = val
}

// SetCategoryId sets the value of CategoryId.
func (s *Tag) SetCategoryId(val OptString) {
	s.CategoryId = val
}

// SetCategoryName sets the value of CategoryName.
func (s *Tag) SetCategoryName(val OptString) {
	s.CategoryName = val
}

// Represents a Tag Assignment Result.
// Ref: #/components/schemas/TagAssignmentResult
type TagAssignmentResult struct {
	// Success value of Assign/Detach Tags operation.
	Success OptBool `json:"success"`
	// Default Error messages for Assign/Detach Tags operation.
	DefaultErrorMessages []string `json:"defaultErrorMessages"`
}

// GetSuccess returns the value of Success.
func (s *TagAssignmentResult) GetSuccess() OptBool {
	return s.Success
}

// GetDefaultErrorMessages returns the value of DefaultErrorMessages.
func (s *TagAssignmentResult) GetDefaultErrorMessages() []string {
	return s.DefaultErrorMessages
}

// SetSuccess sets the value of Success.
func (s *TagAssignmentResult) SetSuccess(val OptBool) {
	s.Success = val
}

// SetDefaultErrorMessages sets the value of DefaultErrorMessages.
func (s *TagAssignmentResult) SetDefaultErrorMessages(val []string) {
	s.DefaultErrorMessages = val
}

func (*TagAssignmentResult) assignTagsToClusterRes()   {}
func (*TagAssignmentResult) assignTagsToDomainRes()    {}
func (*TagAssignmentResult) assignTagsToHostRes()      {}
func (*TagAssignmentResult) removeTagsFromClusterRes() {}
func (*TagAssignmentResult) removeTagsFromDomainRes()  {}
func (*TagAssignmentResult) removeTagsFromHostRes()    {}

// Represents a Tag Manager Model.
// Ref: #/components/schemas/TagManagerModel
type TagManagerModel struct {
	// Tag Manager URL value.
	TagManagerUrl OptString `json:"tagManagerUrl"`
}

// GetTagManagerUrl returns the value of TagManagerUrl.
func (s *TagManagerModel) GetTagManagerUrl() OptString {
	return s.TagManagerUrl
}

// SetTagManagerUrl sets the value of TagManagerUrl.
func (s *TagManagerModel) SetTagManagerUrl(val OptString) {
	s.TagManagerUrl = val
}

func (*TagManagerModel) getClusterTagManagerUrlRes() {}
func (*TagManagerModel) getDomainTagManagerUrlRes()  {}
func (*TagManagerModel) getHostTagManagerUrlRes()    {}

// Specifies a resource with id and type.
// Ref: #/components/schemas/TaggedResource
type TaggedResource struct {
	// ID of the resource.
	ID OptString `json:"id"`
	// Type of the resource.
	Type OptString `json:"type"`
}

// GetID returns the value of ID.
func (s *TaggedResource) GetID() OptString {
	return s.ID
}

// GetType returns the value of Type.
func (s *TaggedResource) GetType() OptString {
	return s.Type
}

// SetID sets the value of ID.
func (s *TaggedResource) SetID(val OptString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *TaggedResource) SetType(val OptString) {
	s.Type = val
}

// Represents a taggable resource with its associations.
// Ref: #/components/schemas/TagsForResource
type TagsForResource struct {
	Resource OptTaggedResource `json:"resource"`
	// List of associated tags.
	Tags []Tag `json:"tags"`
}

// GetResource returns the value of Resource.
func (s *TagsForResource) GetResource() OptTaggedResource {
	return s.Resource
}

// GetTags returns the value of Tags.
func (s *TagsForResource) GetTags() []Tag {
	return s.Tags
}

// SetResource sets the value of Resource.
func (s *TagsForResource) SetResource(val OptTaggedResource) {
	s.Resource = val
}

// SetTags sets the value of Tags.
func (s *TagsForResource) SetTags(val []Tag) {
	s.Tags = val
}

// Tags Spec.
// Ref: #/components/schemas/TagsSpec
type TagsSpec struct {
	// Tag IDs.
	TagIds []string `json:"tagIds"`
}

// GetTagIds returns the value of TagIds.
func (s *TagsSpec) GetTagIds() []string {
	return s.TagIds
}

// SetTagIds sets the value of TagIds.
func (s *TagsSpec) SetTagIds(val []string) {
	s.TagIds = val
}

// Model for target product versions in domain release view.
// Ref: #/components/schemas/TargetProductVersion
type TargetProductVersion struct {
	// Product Type.
	ProductType string `json:"productType"`
	// Target upgrade version of the product.
	Version string `json:"version"`
}

// GetProductType returns the value of ProductType.
func (s *TargetProductVersion) GetProductType() string {
	return s.ProductType
}

// GetVersion returns the value of Version.
func (s *TargetProductVersion) GetVersion() string {
	return s.Version
}

// SetProductType sets the value of ProductType.
func (s *TargetProductVersion) SetProductType(val string) {
	s.ProductType = val
}

// SetVersion sets the value of Version.
func (s *TargetProductVersion) SetVersion(val string) {
	s.Version = val
}

// Represents a task.
// Ref: #/components/schemas/Task
type Task struct {
	// Task ID.
	ID string `json:"id"`
	// Task name.
	Name                       string         `json:"name"`
	LocalizableDescriptionPack OptMessagePack `json:"localizableDescriptionPack"`
	// Operation that is represented by the Task in machine readable format.  The value is controlled by
	// the owners/producers of the Task. The convention is <resource>_<operation>.
	Type OptString `json:"type"`
	// Task status.
	Status string `json:"status"`
	// Task creation timestamp.
	CreationTimestamp string `json:"creationTimestamp"`
	// Task completion timestamp.
	CompletionTimestamp OptString `json:"completionTimestamp"`
	// List of sub-tasks of the task.
	SubTasks []SubTask `json:"subTasks"`
	// List of errors in case of a failure.
	Errors []Error `json:"errors"`
	// List of resources associated with task.
	Resources []Resource `json:"resources"`
	// Resolution state.
	ResolutionStatus OptString `json:"resolutionStatus"`
	// Represents task can be cancellable or not.
	IsCancellable OptBool `json:"isCancellable"`
	// Indicates whether a task is eligible for retry or not.
	IsRetryable OptBool `json:"isRetryable"`
}

// GetID returns the value of ID.
func (s *Task) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Task) GetName() string {
	return s.Name
}

// GetLocalizableDescriptionPack returns the value of LocalizableDescriptionPack.
func (s *Task) GetLocalizableDescriptionPack() OptMessagePack {
	return s.LocalizableDescriptionPack
}

// GetType returns the value of Type.
func (s *Task) GetType() OptString {
	return s.Type
}

// GetStatus returns the value of Status.
func (s *Task) GetStatus() string {
	return s.Status
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *Task) GetCreationTimestamp() string {
	return s.CreationTimestamp
}

// GetCompletionTimestamp returns the value of CompletionTimestamp.
func (s *Task) GetCompletionTimestamp() OptString {
	return s.CompletionTimestamp
}

// GetSubTasks returns the value of SubTasks.
func (s *Task) GetSubTasks() []SubTask {
	return s.SubTasks
}

// GetErrors returns the value of Errors.
func (s *Task) GetErrors() []Error {
	return s.Errors
}

// GetResources returns the value of Resources.
func (s *Task) GetResources() []Resource {
	return s.Resources
}

// GetResolutionStatus returns the value of ResolutionStatus.
func (s *Task) GetResolutionStatus() OptString {
	return s.ResolutionStatus
}

// GetIsCancellable returns the value of IsCancellable.
func (s *Task) GetIsCancellable() OptBool {
	return s.IsCancellable
}

// GetIsRetryable returns the value of IsRetryable.
func (s *Task) GetIsRetryable() OptBool {
	return s.IsRetryable
}

// SetID sets the value of ID.
func (s *Task) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Task) SetName(val string) {
	s.Name = val
}

// SetLocalizableDescriptionPack sets the value of LocalizableDescriptionPack.
func (s *Task) SetLocalizableDescriptionPack(val OptMessagePack) {
	s.LocalizableDescriptionPack = val
}

// SetType sets the value of Type.
func (s *Task) SetType(val OptString) {
	s.Type = val
}

// SetStatus sets the value of Status.
func (s *Task) SetStatus(val string) {
	s.Status = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *Task) SetCreationTimestamp(val string) {
	s.CreationTimestamp = val
}

// SetCompletionTimestamp sets the value of CompletionTimestamp.
func (s *Task) SetCompletionTimestamp(val OptString) {
	s.CompletionTimestamp = val
}

// SetSubTasks sets the value of SubTasks.
func (s *Task) SetSubTasks(val []SubTask) {
	s.SubTasks = val
}

// SetErrors sets the value of Errors.
func (s *Task) SetErrors(val []Error) {
	s.Errors = val
}

// SetResources sets the value of Resources.
func (s *Task) SetResources(val []Resource) {
	s.Resources = val
}

// SetResolutionStatus sets the value of ResolutionStatus.
func (s *Task) SetResolutionStatus(val OptString) {
	s.ResolutionStatus = val
}

// SetIsCancellable sets the value of IsCancellable.
func (s *Task) SetIsCancellable(val OptBool) {
	s.IsCancellable = val
}

// SetIsRetryable sets the value of IsRetryable.
func (s *Task) SetIsRetryable(val OptBool) {
	s.IsRetryable = val
}

func (*Task) addDatastoreToClusterRes()                  {}
func (*Task) cancelCredentialsTaskRes()                  {}
func (*Task) commissionHostsRes()                        {}
func (*Task) configureDnsRes()                           {}
func (*Task) configureNtpRes()                           {}
func (*Task) connectVropsWithDomainRes()                 {}
func (*Task) createAvnsRes()                             {}
func (*Task) createClusterRes()                          {}
func (*Task) createDomainRes()                           {}
func (*Task) createEdgeClusterRes()                      {}
func (*Task) deleteALBClusterRes()                       {}
func (*Task) deleteBundleRes()                           {}
func (*Task) deleteClusterRes()                          {}
func (*Task) deleteDomainRes()                           {}
func (*Task) deployVrslcmRes()                           {}
func (*Task) generateCertificatesRes()                   {}
func (*Task) generatesCSRsRes()                          {}
func (*Task) getPrecheckTaskRes()                        {}
func (*Task) getReconciliationTaskRes()                  {}
func (*Task) getRestoreTaskRes()                         {}
func (*Task) getTaskRes()                                {}
func (*Task) getUpgradePrecheckByIDRes()                 {}
func (*Task) importVdsToInventoryRes()                   {}
func (*Task) performDomainIsolationPrecheckRes()         {}
func (*Task) performUpgradeRes()                         {}
func (*Task) reconcileConfigsRes()                       {}
func (*Task) replaceCertificatesRes()                    {}
func (*Task) replaceResourceCertificatesRes()            {}
func (*Task) retryCredentialsTaskRes()                   {}
func (*Task) rollbackVrslcmRes()                         {}
func (*Task) setCeipStatusRes()                          {}
func (*Task) setLicenseKeyForResourceRes()               {}
func (*Task) startBundleDownloadByIDRes()                {}
func (*Task) startPrecheckRes()                          {}
func (*Task) startRestoreRes()                           {}
func (*Task) startUpgradePrecheckRes()                   {}
func (*Task) triggerCheckRunRes()                        {}
func (*Task) triggerPartialRetryOfCheckRunRes()          {}
func (*Task) updateBackupConfigurationRes()              {}
func (*Task) updateClusterRes()                          {}
func (*Task) updateEdgeClusterRes()                      {}
func (*Task) updateOrRotatePasswordsRes()                {}
func (*Task) uploadBundleRes()                           {}
func (*Task) uploadCustomIsoRes()                        {}
func (*Task) uploadPersonalityRes()                      {}
func (*Task) validateBackupConfigurationsOperationsRes() {}

// This specification contains the teaming policies associated with the uplink profile.
// Ref: #/components/schemas/TeamingSpec
type TeamingSpec struct {
	// The teaming policy associated with the uplink profile.
	Policy string `json:"policy"`
	// The list of active uplinks.
	ActiveUplinks []string `json:"activeUplinks"`
	// The list of stand by uplinks.
	StandByUplinks []string `json:"standByUplinks"`
}

// GetPolicy returns the value of Policy.
func (s *TeamingSpec) GetPolicy() string {
	return s.Policy
}

// GetActiveUplinks returns the value of ActiveUplinks.
func (s *TeamingSpec) GetActiveUplinks() []string {
	return s.ActiveUplinks
}

// GetStandByUplinks returns the value of StandByUplinks.
func (s *TeamingSpec) GetStandByUplinks() []string {
	return s.StandByUplinks
}

// SetPolicy sets the value of Policy.
func (s *TeamingSpec) SetPolicy(val string) {
	s.Policy = val
}

// SetActiveUplinks sets the value of ActiveUplinks.
func (s *TeamingSpec) SetActiveUplinks(val []string) {
	s.ActiveUplinks = val
}

// SetStandByUplinks sets the value of StandByUplinks.
func (s *TeamingSpec) SetStandByUplinks(val []string) {
	s.StandByUplinks = val
}

// Temporary Network for vCenter Upgrade.
// Ref: #/components/schemas/TemporaryNetwork
type TemporaryNetwork struct {
	// IP Address for vCenter Upgrade temporary network.
	IpAddress string `json:"ipAddress"`
	// Subnet Mask for vCenter Upgrade temporary network.
	SubnetMask string `json:"subnetMask"`
	// Gateway for vCenter Upgrade temporary network.
	Gateway string `json:"gateway"`
}

// GetIpAddress returns the value of IpAddress.
func (s *TemporaryNetwork) GetIpAddress() string {
	return s.IpAddress
}

// GetSubnetMask returns the value of SubnetMask.
func (s *TemporaryNetwork) GetSubnetMask() string {
	return s.SubnetMask
}

// GetGateway returns the value of Gateway.
func (s *TemporaryNetwork) GetGateway() string {
	return s.Gateway
}

// SetIpAddress sets the value of IpAddress.
func (s *TemporaryNetwork) SetIpAddress(val string) {
	s.IpAddress = val
}

// SetSubnetMask sets the value of SubnetMask.
func (s *TemporaryNetwork) SetSubnetMask(val string) {
	s.SubnetMask = val
}

// SetGateway sets the value of Gateway.
func (s *TemporaryNetwork) SetGateway(val string) {
	s.Gateway = val
}

// The spec used to sign the token.
// Ref: #/components/schemas/TokenCreationSpec
type TokenCreationSpec struct {
	// Username.
	Username OptString `json:"username"`
	// User Password.
	Password OptString `json:"password"`
	// API Key.
	ApiKey OptString `json:"apiKey"`
	// Id Token.
	IdToken OptString `json:"idToken"`
}

// GetUsername returns the value of Username.
func (s *TokenCreationSpec) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *TokenCreationSpec) GetPassword() OptString {
	return s.Password
}

// GetApiKey returns the value of ApiKey.
func (s *TokenCreationSpec) GetApiKey() OptString {
	return s.ApiKey
}

// GetIdToken returns the value of IdToken.
func (s *TokenCreationSpec) GetIdToken() OptString {
	return s.IdToken
}

// SetUsername sets the value of Username.
func (s *TokenCreationSpec) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *TokenCreationSpec) SetPassword(val OptString) {
	s.Password = val
}

// SetApiKey sets the value of ApiKey.
func (s *TokenCreationSpec) SetApiKey(val OptString) {
	s.ApiKey = val
}

// SetIdToken sets the value of IdToken.
func (s *TokenCreationSpec) SetIdToken(val OptString) {
	s.IdToken = val
}

// This contains the access token and the refresh token for the user API access.
// Ref: #/components/schemas/TokenPair
type TokenPair struct {
	// Bearer token that can be used to make public API calls.
	AccessToken  OptString       `json:"accessToken"`
	RefreshToken OptRefreshToken `json:"refreshToken"`
}

// GetAccessToken returns the value of AccessToken.
func (s *TokenPair) GetAccessToken() OptString {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *TokenPair) GetRefreshToken() OptRefreshToken {
	return s.RefreshToken
}

// SetAccessToken sets the value of AccessToken.
func (s *TokenPair) SetAccessToken(val OptString) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *TokenPair) SetRefreshToken(val OptRefreshToken) {
	s.RefreshToken = val
}

// The transport zone to be associated with the vSphere Distributed Switch managed by NSX.
// Ref: #/components/schemas/TransportZone
type TransportZone struct {
	// The name of the transport zone.
	Name OptString `json:"name"`
	// The type of the transport zone.
	TransportType string `json:"transportType"`
}

// GetName returns the value of Name.
func (s *TransportZone) GetName() OptString {
	return s.Name
}

// GetTransportType returns the value of TransportType.
func (s *TransportZone) GetTransportType() string {
	return s.TransportType
}

// SetName sets the value of Name.
func (s *TransportZone) SetName(val OptString) {
	s.Name = val
}

// SetTransportType sets the value of TransportType.
func (s *TransportZone) SetTransportType(val string) {
	s.TransportType = val
}

type TriggerCheckRunBadRequest Error

func (*TriggerCheckRunBadRequest) triggerCheckRunRes() {}

type TriggerCheckRunInternalServerError Error

func (*TriggerCheckRunInternalServerError) triggerCheckRunRes() {}

type TriggerPartialRetryOfCheckRunBadRequest Error

func (*TriggerPartialRetryOfCheckRunBadRequest) triggerPartialRetryOfCheckRunRes() {}

type TriggerPartialRetryOfCheckRunInternalServerError Error

func (*TriggerPartialRetryOfCheckRunInternalServerError) triggerPartialRetryOfCheckRunRes() {}

// The Trusted Certificate details.
// Ref: #/components/schemas/TrustedCertificate
type TrustedCertificate struct {
	// Certificate alias.
	Alias string `json:"alias"`
	// Certificate in PEM format.
	Certificate string `json:"certificate"`
}

// GetAlias returns the value of Alias.
func (s *TrustedCertificate) GetAlias() string {
	return s.Alias
}

// GetCertificate returns the value of Certificate.
func (s *TrustedCertificate) GetCertificate() string {
	return s.Certificate
}

// SetAlias sets the value of Alias.
func (s *TrustedCertificate) SetAlias(val string) {
	s.Alias = val
}

// SetCertificate sets the value of Certificate.
func (s *TrustedCertificate) SetCertificate(val string) {
	s.Certificate = val
}

// Represents credentials of am unmanaged resource (i.e a resource that is not managed by VCF).
// Ref: #/components/schemas/UnmanagedResourceCredential
type UnmanagedResourceCredential struct {
	// Credential type.
	CredentialType string `json:"credentialType"`
	// Username.
	Username string `json:"username"`
	// Password.
	Password OptString `json:"password"`
}

// GetCredentialType returns the value of CredentialType.
func (s *UnmanagedResourceCredential) GetCredentialType() string {
	return s.CredentialType
}

// GetUsername returns the value of Username.
func (s *UnmanagedResourceCredential) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *UnmanagedResourceCredential) GetPassword() OptString {
	return s.Password
}

// SetCredentialType sets the value of CredentialType.
func (s *UnmanagedResourceCredential) SetCredentialType(val string) {
	s.CredentialType = val
}

// SetUsername sets the value of Username.
func (s *UnmanagedResourceCredential) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *UnmanagedResourceCredential) SetPassword(val OptString) {
	s.Password = val
}

type UpdateBackupConfigurationBadRequest Error

func (*UpdateBackupConfigurationBadRequest) updateBackupConfigurationRes() {}

type UpdateBackupConfigurationInternalServerError Error

func (*UpdateBackupConfigurationInternalServerError) updateBackupConfigurationRes() {}

// UpdateBundleCompatibilitySetsAccepted is response for UpdateBundleCompatibilitySets operation.
type UpdateBundleCompatibilitySetsAccepted struct{}

func (*UpdateBundleCompatibilitySetsAccepted) updateBundleCompatibilitySetsRes() {}

type UpdateBundleCompatibilitySetsBadRequest Error

func (*UpdateBundleCompatibilitySetsBadRequest) updateBundleCompatibilitySetsRes() {}

type UpdateBundleCompatibilitySetsConflict Error

func (*UpdateBundleCompatibilitySetsConflict) updateBundleCompatibilitySetsRes() {}

type UpdateBundleCompatibilitySetsInternalServerError Error

func (*UpdateBundleCompatibilitySetsInternalServerError) updateBundleCompatibilitySetsRes() {}

type UpdateClusterBadRequest Error

func (*UpdateClusterBadRequest) updateClusterRes() {}

type UpdateClusterInternalServerError Error

func (*UpdateClusterInternalServerError) updateClusterRes() {}

type UpdateClusterNotFound Error

func (*UpdateClusterNotFound) updateClusterRes() {}

type UpdateDepotSettingsBadRequest Error

func (*UpdateDepotSettingsBadRequest) updateDepotSettingsRes() {}

type UpdateDepotSettingsInternalServerError Error

func (*UpdateDepotSettingsInternalServerError) updateDepotSettingsRes() {}

type UpdateDomainAccepted Task

func (*UpdateDomainAccepted) updateDomainRes() {}

type UpdateDomainBadRequest Error

func (*UpdateDomainBadRequest) updateDomainRes() {}

type UpdateDomainInternalServerError Error

func (*UpdateDomainInternalServerError) updateDomainRes() {}

type UpdateDomainNotFound Error

func (*UpdateDomainNotFound) updateDomainRes() {}

type UpdateDomainOK Task

func (*UpdateDomainOK) updateDomainRes() {}

type UpdateEdgeClusterBadRequest Error

func (*UpdateEdgeClusterBadRequest) updateEdgeClusterRes() {}

type UpdateEdgeClusterInternalServerError Error

func (*UpdateEdgeClusterInternalServerError) updateEdgeClusterRes() {}

type UpdateEdgeClusterNotImplemented Error

func (*UpdateEdgeClusterNotImplemented) updateEdgeClusterRes() {}

type UpdateLicenseKeyBadRequest Error

func (*UpdateLicenseKeyBadRequest) updateLicenseKeyRes() {}

type UpdateLicenseKeyInternalServerError Error

func (*UpdateLicenseKeyInternalServerError) updateLicenseKeyRes() {}

type UpdateLicenseKeyNotFound Error

func (*UpdateLicenseKeyNotFound) updateLicenseKeyRes() {}

// UpdateLicenseKeyOK is response for UpdateLicenseKey operation.
type UpdateLicenseKeyOK struct{}

func (*UpdateLicenseKeyOK) updateLicenseKeyRes() {}

// UpdateLocalUserPasswordNoContent is response for UpdateLocalUserPassword operation.
type UpdateLocalUserPasswordNoContent struct{}

func (*UpdateLocalUserPasswordNoContent) updateLocalUserPasswordRes() {}

type UpdateNetworkPoolInternalServerError Error

func (*UpdateNetworkPoolInternalServerError) updateNetworkPoolRes() {}

type UpdateNetworkPoolNotFound Error

func (*UpdateNetworkPoolNotFound) updateNetworkPoolRes() {}

type UpdateOrRotatePasswordsBadRequest Error

func (*UpdateOrRotatePasswordsBadRequest) updateOrRotatePasswordsRes() {}

type UpdateOrRotatePasswordsForbidden Error

func (*UpdateOrRotatePasswordsForbidden) updateOrRotatePasswordsRes() {}

type UpdateOrRotatePasswordsInternalServerError Error

func (*UpdateOrRotatePasswordsInternalServerError) updateOrRotatePasswordsRes() {}

type UpdateOrRotatePasswordsUnauthorized Error

func (*UpdateOrRotatePasswordsUnauthorized) updateOrRotatePasswordsRes() {}

type UpdateReleaseByDomainIDInternalServerError Error

func (*UpdateReleaseByDomainIDInternalServerError) updateReleaseByDomainIDRes() {}

type UpdateReleaseByDomainIDNotFound Error

func (*UpdateReleaseByDomainIDNotFound) updateReleaseByDomainIDRes() {}

// UpdateReleaseByDomainIDOK is response for UpdateReleaseByDomainID operation.
type UpdateReleaseByDomainIDOK struct{}

func (*UpdateReleaseByDomainIDOK) updateReleaseByDomainIDRes() {}

type UpdateResourcesFunctionalities1BadRequest Error

func (*UpdateResourcesFunctionalities1BadRequest) updateResourcesFunctionalities1Res() {}

type UpdateResourcesFunctionalities1InternalServerError Error

func (*UpdateResourcesFunctionalities1InternalServerError) updateResourcesFunctionalities1Res() {}

type UpdateResourcesFunctionalitiesBadRequest Error

func (*UpdateResourcesFunctionalitiesBadRequest) updateResourcesFunctionalitiesRes() {}

type UpdateResourcesFunctionalitiesInternalServerError Error

func (*UpdateResourcesFunctionalitiesInternalServerError) updateResourcesFunctionalitiesRes() {}

type UpdateSystemConfigurationBadRequest ErrorResponse

func (*UpdateSystemConfigurationBadRequest) updateSystemConfigurationRes() {}

type UpdateSystemConfigurationInternalServerError ErrorResponse

func (*UpdateSystemConfigurationInternalServerError) updateSystemConfigurationRes() {}

// UpdateSystemConfigurationOK is response for UpdateSystemConfiguration operation.
type UpdateSystemConfigurationOK struct{}

func (*UpdateSystemConfigurationOK) updateSystemConfigurationRes() {}

type UpdateUpgradeScheduleInternalServerError Error

func (*UpdateUpgradeScheduleInternalServerError) updateUpgradeScheduleRes() {}

type UpdateUpgradeScheduleNotFound Error

func (*UpdateUpgradeScheduleNotFound) updateUpgradeScheduleRes() {}

type UpdateVasaProviderBadRequest Error

func (*UpdateVasaProviderBadRequest) updateVasaProviderRes() {}

type UpdateVasaProviderInternalServerError Error

func (*UpdateVasaProviderInternalServerError) updateVasaProviderRes() {}

type UpdateVasaProviderNotFound Error

func (*UpdateVasaProviderNotFound) updateVasaProviderRes() {}

type UpdateVasaProviderStorageContainerBadRequest Error

func (*UpdateVasaProviderStorageContainerBadRequest) updateVasaProviderStorageContainerRes() {}

type UpdateVasaProviderStorageContainerInternalServerError Error

func (*UpdateVasaProviderStorageContainerInternalServerError) updateVasaProviderStorageContainerRes() {
}

type UpdateVasaProviderStorageContainerNotFound Error

func (*UpdateVasaProviderStorageContainerNotFound) updateVasaProviderStorageContainerRes() {}

type UpdateVasaProviderUserBadRequest Error

func (*UpdateVasaProviderUserBadRequest) updateVasaProviderUserRes() {}

type UpdateVasaProviderUserInternalServerError Error

func (*UpdateVasaProviderUserInternalServerError) updateVasaProviderUserRes() {}

type UpdateVasaProviderUserNotFound Error

func (*UpdateVasaProviderUserNotFound) updateVasaProviderUserRes() {}

type UpdateVersionAliasConfigurationBadRequest Error

func (*UpdateVersionAliasConfigurationBadRequest) updateVersionAliasConfigurationRes() {}

type UpdateVersionAliasConfigurationInternalServerError Error

func (*UpdateVersionAliasConfigurationInternalServerError) updateVersionAliasConfigurationRes() {}

type UpdateVersionAliasConfigurationsBadRequest Error

func (*UpdateVersionAliasConfigurationsBadRequest) updateVersionAliasConfigurationsRes() {}

type UpdateVersionAliasConfigurationsInternalServerError Error

func (*UpdateVersionAliasConfigurationsInternalServerError) updateVersionAliasConfigurationsRes() {}

type UpdateVrslcmVersionByIdInInventoryBadRequest Error

func (*UpdateVrslcmVersionByIdInInventoryBadRequest) updateVrslcmVersionByIdInInventoryRes() {}

type UpdateVrslcmVersionByIdInInventoryInternalServerError Error

func (*UpdateVrslcmVersionByIdInInventoryInternalServerError) updateVrslcmVersionByIdInInventoryRes() {
}

type UpdateVrslcmVersionByIdInInventoryMethodNotAllowed Error

func (*UpdateVrslcmVersionByIdInInventoryMethodNotAllowed) updateVrslcmVersionByIdInInventoryRes() {}

type UpdateVrslcmVersionByIdInInventoryNotFound Error

func (*UpdateVrslcmVersionByIdInInventoryNotFound) updateVrslcmVersionByIdInInventoryRes() {}

// UpdateVrslcmVersionByIdInInventoryOK is response for UpdateVrslcmVersionByIdInInventory operation.
type UpdateVrslcmVersionByIdInInventoryOK struct{}

func (*UpdateVrslcmVersionByIdInInventoryOK) updateVrslcmVersionByIdInInventoryRes() {}

type UpdateVrslcmVersionInInventoryBadRequest Error

func (*UpdateVrslcmVersionInInventoryBadRequest) updateVrslcmVersionInInventoryRes() {}

type UpdateVrslcmVersionInInventoryInternalServerError Error

func (*UpdateVrslcmVersionInInventoryInternalServerError) updateVrslcmVersionInInventoryRes() {}

type UpdateVrslcmVersionInInventoryMethodNotAllowed Error

func (*UpdateVrslcmVersionInInventoryMethodNotAllowed) updateVrslcmVersionInInventoryRes() {}

type UpdateVrslcmVersionInInventoryNotFound Error

func (*UpdateVrslcmVersionInInventoryNotFound) updateVrslcmVersionInInventoryRes() {}

// UpdateVrslcmVersionInInventoryOK is response for UpdateVrslcmVersionInInventory operation.
type UpdateVrslcmVersionInInventoryOK struct{}

func (*UpdateVrslcmVersionInInventoryOK) updateVrslcmVersionInInventoryRes() {}

type UpdateVsanHclConfigurationAccepted VsanHclConfiguration

func (*UpdateVsanHclConfigurationAccepted) updateVsanHclConfigurationRes() {}

type UpdateVsanHclConfigurationInternalServerError Error

func (*UpdateVsanHclConfigurationInternalServerError) updateVsanHclConfigurationRes() {}

type UpdateVsanHclConfigurationNotFound Error

func (*UpdateVsanHclConfigurationNotFound) updateVsanHclConfigurationRes() {}

type UpdateVsanHclConfigurationOK VsanHclConfiguration

func (*UpdateVsanHclConfigurationOK) updateVsanHclConfigurationRes() {}

type UpdateVsanHealthCheckByDomainBadRequest Error

func (*UpdateVsanHealthCheckByDomainBadRequest) updateVsanHealthCheckByDomainRes() {}

type UpdateVsanHealthCheckByDomainInternalServerError Error

func (*UpdateVsanHealthCheckByDomainInternalServerError) updateVsanHealthCheckByDomainRes() {}

// Upgradable represents the upgrade capability of resources. It contains the bundle(using what),
// resource(on which) and its associated resources/software components that can be upgraded.
// Ref: #/components/schemas/Upgradable
type Upgradable struct {
	// Bundle ID.
	BundleId OptString `json:"bundleId"`
	// Bundle Type.
	BundleType OptString   `json:"bundleType"`
	Resource   OptResource `json:"resource"`
	// Software Components which are Upgradable.
	SoftwareComponents []SoftwareComponent `json:"softwareComponents"`
	// Upgradable Status.
	Status OptString `json:"status"`
	// Upgradable Errors found during computation of upgrade availabiltiy.
	Errors []Error `json:"errors"`
}

// GetBundleId returns the value of BundleId.
func (s *Upgradable) GetBundleId() OptString {
	return s.BundleId
}

// GetBundleType returns the value of BundleType.
func (s *Upgradable) GetBundleType() OptString {
	return s.BundleType
}

// GetResource returns the value of Resource.
func (s *Upgradable) GetResource() OptResource {
	return s.Resource
}

// GetSoftwareComponents returns the value of SoftwareComponents.
func (s *Upgradable) GetSoftwareComponents() []SoftwareComponent {
	return s.SoftwareComponents
}

// GetStatus returns the value of Status.
func (s *Upgradable) GetStatus() OptString {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *Upgradable) GetErrors() []Error {
	return s.Errors
}

// SetBundleId sets the value of BundleId.
func (s *Upgradable) SetBundleId(val OptString) {
	s.BundleId = val
}

// SetBundleType sets the value of BundleType.
func (s *Upgradable) SetBundleType(val OptString) {
	s.BundleType = val
}

// SetResource sets the value of Resource.
func (s *Upgradable) SetResource(val OptResource) {
	s.Resource = val
}

// SetSoftwareComponents sets the value of SoftwareComponents.
func (s *Upgradable) SetSoftwareComponents(val []SoftwareComponent) {
	s.SoftwareComponents = val
}

// SetStatus sets the value of Status.
func (s *Upgradable) SetStatus(val OptString) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *Upgradable) SetErrors(val []Error) {
	s.Errors = val
}

// Upgradables clusters details with hardware support managers.
// Ref: #/components/schemas/UpgradablesClusterResource
type UpgradablesClusterResource struct {
	// Resource Id.
	ResourceId string `json:"resourceId"`
	// Resource Type.
	ResourceType string `json:"resourceType"`
	// Flag for primary cluster.
	PrimaryCluster OptBool         `json:"primaryCluster"`
	SoftwareInfo   OptSoftwareInfo `json:"softwareInfo"`
	// Flag to determine if vLCM enabled on the cluster.
	VlcmEnabled OptBool `json:"vlcmEnabled"`
	// Configured Hardware Support Managers for Firmware upgrade.
	ConfiguredHardwareSupportManagers []HardwareSupportPackage `json:"configuredHardwareSupportManagers"`
	// Available Hardware Support Managers for Firmware upgrade.
	AvailableHardwareSupportManagers []HardwareSupportPackages `json:"availableHardwareSupportManagers"`
}

// GetResourceId returns the value of ResourceId.
func (s *UpgradablesClusterResource) GetResourceId() string {
	return s.ResourceId
}

// GetResourceType returns the value of ResourceType.
func (s *UpgradablesClusterResource) GetResourceType() string {
	return s.ResourceType
}

// GetPrimaryCluster returns the value of PrimaryCluster.
func (s *UpgradablesClusterResource) GetPrimaryCluster() OptBool {
	return s.PrimaryCluster
}

// GetSoftwareInfo returns the value of SoftwareInfo.
func (s *UpgradablesClusterResource) GetSoftwareInfo() OptSoftwareInfo {
	return s.SoftwareInfo
}

// GetVlcmEnabled returns the value of VlcmEnabled.
func (s *UpgradablesClusterResource) GetVlcmEnabled() OptBool {
	return s.VlcmEnabled
}

// GetConfiguredHardwareSupportManagers returns the value of ConfiguredHardwareSupportManagers.
func (s *UpgradablesClusterResource) GetConfiguredHardwareSupportManagers() []HardwareSupportPackage {
	return s.ConfiguredHardwareSupportManagers
}

// GetAvailableHardwareSupportManagers returns the value of AvailableHardwareSupportManagers.
func (s *UpgradablesClusterResource) GetAvailableHardwareSupportManagers() []HardwareSupportPackages {
	return s.AvailableHardwareSupportManagers
}

// SetResourceId sets the value of ResourceId.
func (s *UpgradablesClusterResource) SetResourceId(val string) {
	s.ResourceId = val
}

// SetResourceType sets the value of ResourceType.
func (s *UpgradablesClusterResource) SetResourceType(val string) {
	s.ResourceType = val
}

// SetPrimaryCluster sets the value of PrimaryCluster.
func (s *UpgradablesClusterResource) SetPrimaryCluster(val OptBool) {
	s.PrimaryCluster = val
}

// SetSoftwareInfo sets the value of SoftwareInfo.
func (s *UpgradablesClusterResource) SetSoftwareInfo(val OptSoftwareInfo) {
	s.SoftwareInfo = val
}

// SetVlcmEnabled sets the value of VlcmEnabled.
func (s *UpgradablesClusterResource) SetVlcmEnabled(val OptBool) {
	s.VlcmEnabled = val
}

// SetConfiguredHardwareSupportManagers sets the value of ConfiguredHardwareSupportManagers.
func (s *UpgradablesClusterResource) SetConfiguredHardwareSupportManagers(val []HardwareSupportPackage) {
	s.ConfiguredHardwareSupportManagers = val
}

// SetAvailableHardwareSupportManagers sets the value of AvailableHardwareSupportManagers.
func (s *UpgradablesClusterResource) SetAvailableHardwareSupportManagers(val []HardwareSupportPackages) {
	s.AvailableHardwareSupportManagers = val
}

// Upgrade object which contain details regarding the upgrade.
// Ref: #/components/schemas/Upgrade
type Upgrade struct {
	// ID for Upgrade.
	ID string `json:"id"`
	// Bundle ID for Upgrade.
	BundleId string `json:"bundleId"`
	// Resource Type for Upgrade.
	ResourceType string `json:"resourceType"`
	// Boolean to represent components will be upgraded in parallel on not.
	ParallelUpgrade OptBool `json:"parallelUpgrade"`
	// Resource Upgrade Specifications.
	ResourceUpgradeSpecs []ResourceUpgradeSpec `json:"resourceUpgradeSpecs"`
	// Overall upgrade status.
	Status string `json:"status"`
	// Task ID associated with upgrade.
	TaskId                   string                      `json:"taskId"`
	NsxtUpgradeUserInputSpec OptNsxtUpgradeUserInputSpec `json:"nsxtUpgradeUserInputSpec"`
	Bundle                   OptBundle                   `json:"bundle"`
	// End time of the upgrade.
	EndTime OptInt64 `json:"endTime"`
}

// GetID returns the value of ID.
func (s *Upgrade) GetID() string {
	return s.ID
}

// GetBundleId returns the value of BundleId.
func (s *Upgrade) GetBundleId() string {
	return s.BundleId
}

// GetResourceType returns the value of ResourceType.
func (s *Upgrade) GetResourceType() string {
	return s.ResourceType
}

// GetParallelUpgrade returns the value of ParallelUpgrade.
func (s *Upgrade) GetParallelUpgrade() OptBool {
	return s.ParallelUpgrade
}

// GetResourceUpgradeSpecs returns the value of ResourceUpgradeSpecs.
func (s *Upgrade) GetResourceUpgradeSpecs() []ResourceUpgradeSpec {
	return s.ResourceUpgradeSpecs
}

// GetStatus returns the value of Status.
func (s *Upgrade) GetStatus() string {
	return s.Status
}

// GetTaskId returns the value of TaskId.
func (s *Upgrade) GetTaskId() string {
	return s.TaskId
}

// GetNsxtUpgradeUserInputSpec returns the value of NsxtUpgradeUserInputSpec.
func (s *Upgrade) GetNsxtUpgradeUserInputSpec() OptNsxtUpgradeUserInputSpec {
	return s.NsxtUpgradeUserInputSpec
}

// GetBundle returns the value of Bundle.
func (s *Upgrade) GetBundle() OptBundle {
	return s.Bundle
}

// GetEndTime returns the value of EndTime.
func (s *Upgrade) GetEndTime() OptInt64 {
	return s.EndTime
}

// SetID sets the value of ID.
func (s *Upgrade) SetID(val string) {
	s.ID = val
}

// SetBundleId sets the value of BundleId.
func (s *Upgrade) SetBundleId(val string) {
	s.BundleId = val
}

// SetResourceType sets the value of ResourceType.
func (s *Upgrade) SetResourceType(val string) {
	s.ResourceType = val
}

// SetParallelUpgrade sets the value of ParallelUpgrade.
func (s *Upgrade) SetParallelUpgrade(val OptBool) {
	s.ParallelUpgrade = val
}

// SetResourceUpgradeSpecs sets the value of ResourceUpgradeSpecs.
func (s *Upgrade) SetResourceUpgradeSpecs(val []ResourceUpgradeSpec) {
	s.ResourceUpgradeSpecs = val
}

// SetStatus sets the value of Status.
func (s *Upgrade) SetStatus(val string) {
	s.Status = val
}

// SetTaskId sets the value of TaskId.
func (s *Upgrade) SetTaskId(val string) {
	s.TaskId = val
}

// SetNsxtUpgradeUserInputSpec sets the value of NsxtUpgradeUserInputSpec.
func (s *Upgrade) SetNsxtUpgradeUserInputSpec(val OptNsxtUpgradeUserInputSpec) {
	s.NsxtUpgradeUserInputSpec = val
}

// SetBundle sets the value of Bundle.
func (s *Upgrade) SetBundle(val OptBundle) {
	s.Bundle = val
}

// SetEndTime sets the value of EndTime.
func (s *Upgrade) SetEndTime(val OptInt64) {
	s.EndTime = val
}

func (*Upgrade) getUpgradeByIdRes()        {}
func (*Upgrade) updateUpgradeScheduleRes() {}

// Upgrade Commit/Reschedule Specification.
// Ref: #/components/schemas/UpgradeCommitSpec
type UpgradeCommitSpec struct {
	// Upgrade Scheduled Time.
	ScheduledTimestamp OptString `json:"scheduledTimestamp"`
	// Flag for enabling Upgrade Now. If true, scheduledTimestamp is ignored.
	UpgradeNow OptBool `json:"upgradeNow"`
	// Flag for marking an upgrade for cancellation.  If set to true, other fields in the request will be
	// ignored.
	MarkForCancellation OptBool `json:"markForCancellation"`
}

// GetScheduledTimestamp returns the value of ScheduledTimestamp.
func (s *UpgradeCommitSpec) GetScheduledTimestamp() OptString {
	return s.ScheduledTimestamp
}

// GetUpgradeNow returns the value of UpgradeNow.
func (s *UpgradeCommitSpec) GetUpgradeNow() OptBool {
	return s.UpgradeNow
}

// GetMarkForCancellation returns the value of MarkForCancellation.
func (s *UpgradeCommitSpec) GetMarkForCancellation() OptBool {
	return s.MarkForCancellation
}

// SetScheduledTimestamp sets the value of ScheduledTimestamp.
func (s *UpgradeCommitSpec) SetScheduledTimestamp(val OptString) {
	s.ScheduledTimestamp = val
}

// SetUpgradeNow sets the value of UpgradeNow.
func (s *UpgradeCommitSpec) SetUpgradeNow(val OptBool) {
	s.UpgradeNow = val
}

// SetMarkForCancellation sets the value of MarkForCancellation.
func (s *UpgradeCommitSpec) SetMarkForCancellation(val OptBool) {
	s.MarkForCancellation = val
}

// Upgrade Specification.
// Ref: #/components/schemas/UpgradeSpec
type UpgradeSpec struct {
	// Bundle ID for Upgrade.
	BundleId string `json:"bundleId"`
	// Resource Type for Upgrade.
	ResourceType string `json:"resourceType"`
	// Boolean to represent components will be upgraded in parallel on not.
	ParallelUpgrade OptBool `json:"parallelUpgrade"`
	// Boolean to represent upgrade will be created in DRAFT mode. This allows to run prechecks before
	// user confirm/commit the upgrade.
	DraftMode OptBool `json:"draftMode"`
	// Resource Upgrade Specifications.
	ResourceUpgradeSpecs []ResourceUpgradeSpec `json:"resourceUpgradeSpecs"`
	// Resource Upgrade Specifications for NSX upgrade.
	NsxtUpgradeUserInputSpecs []NsxtUpgradeUserInputSpec `json:"nsxtUpgradeUserInputSpecs"`
	// User Input for vCenter upgrade.
	VcenterUpgradeUserInputSpecs []VcenterUpgradeUserInputSpec `json:"vcenterUpgradeUserInputSpecs"`
}

// GetBundleId returns the value of BundleId.
func (s *UpgradeSpec) GetBundleId() string {
	return s.BundleId
}

// GetResourceType returns the value of ResourceType.
func (s *UpgradeSpec) GetResourceType() string {
	return s.ResourceType
}

// GetParallelUpgrade returns the value of ParallelUpgrade.
func (s *UpgradeSpec) GetParallelUpgrade() OptBool {
	return s.ParallelUpgrade
}

// GetDraftMode returns the value of DraftMode.
func (s *UpgradeSpec) GetDraftMode() OptBool {
	return s.DraftMode
}

// GetResourceUpgradeSpecs returns the value of ResourceUpgradeSpecs.
func (s *UpgradeSpec) GetResourceUpgradeSpecs() []ResourceUpgradeSpec {
	return s.ResourceUpgradeSpecs
}

// GetNsxtUpgradeUserInputSpecs returns the value of NsxtUpgradeUserInputSpecs.
func (s *UpgradeSpec) GetNsxtUpgradeUserInputSpecs() []NsxtUpgradeUserInputSpec {
	return s.NsxtUpgradeUserInputSpecs
}

// GetVcenterUpgradeUserInputSpecs returns the value of VcenterUpgradeUserInputSpecs.
func (s *UpgradeSpec) GetVcenterUpgradeUserInputSpecs() []VcenterUpgradeUserInputSpec {
	return s.VcenterUpgradeUserInputSpecs
}

// SetBundleId sets the value of BundleId.
func (s *UpgradeSpec) SetBundleId(val string) {
	s.BundleId = val
}

// SetResourceType sets the value of ResourceType.
func (s *UpgradeSpec) SetResourceType(val string) {
	s.ResourceType = val
}

// SetParallelUpgrade sets the value of ParallelUpgrade.
func (s *UpgradeSpec) SetParallelUpgrade(val OptBool) {
	s.ParallelUpgrade = val
}

// SetDraftMode sets the value of DraftMode.
func (s *UpgradeSpec) SetDraftMode(val OptBool) {
	s.DraftMode = val
}

// SetResourceUpgradeSpecs sets the value of ResourceUpgradeSpecs.
func (s *UpgradeSpec) SetResourceUpgradeSpecs(val []ResourceUpgradeSpec) {
	s.ResourceUpgradeSpecs = val
}

// SetNsxtUpgradeUserInputSpecs sets the value of NsxtUpgradeUserInputSpecs.
func (s *UpgradeSpec) SetNsxtUpgradeUserInputSpecs(val []NsxtUpgradeUserInputSpec) {
	s.NsxtUpgradeUserInputSpecs = val
}

// SetVcenterUpgradeUserInputSpecs sets the value of VcenterUpgradeUserInputSpecs.
func (s *UpgradeSpec) SetVcenterUpgradeUserInputSpecs(val []VcenterUpgradeUserInputSpec) {
	s.VcenterUpgradeUserInputSpecs = val
}

// Represents upgrade status of a domain.
// Ref: #/components/schemas/UpgradeStatus
type UpgradeStatus struct {
	// Upgrade status.
	Status OptString `json:"status"`
	// Number of completed resources.
	CompletedResources OptInt32 `json:"completedResources"`
	// Total number of resources.
	TotalResources OptInt32 `json:"totalResources"`
}

// GetStatus returns the value of Status.
func (s *UpgradeStatus) GetStatus() OptString {
	return s.Status
}

// GetCompletedResources returns the value of CompletedResources.
func (s *UpgradeStatus) GetCompletedResources() OptInt32 {
	return s.CompletedResources
}

// GetTotalResources returns the value of TotalResources.
func (s *UpgradeStatus) GetTotalResources() OptInt32 {
	return s.TotalResources
}

// SetStatus sets the value of Status.
func (s *UpgradeStatus) SetStatus(val OptString) {
	s.Status = val
}

// SetCompletedResources sets the value of CompletedResources.
func (s *UpgradeStatus) SetCompletedResources(val OptInt32) {
	s.CompletedResources = val
}

// SetTotalResources sets the value of TotalResources.
func (s *UpgradeStatus) SetTotalResources(val OptInt32) {
	s.TotalResources = val
}

// The map of vSphere Distributed Switch uplinks to the NSX switch uplinks.
// Ref: #/components/schemas/UplinkMapping
type UplinkMapping struct {
	// The uplink name of the vSphere Distributed Switch.
	VdsUplinkName string `json:"vdsUplinkName"`
	// The uplink name of the NSX switch.
	NsxUplinkName string `json:"nsxUplinkName"`
}

// GetVdsUplinkName returns the value of VdsUplinkName.
func (s *UplinkMapping) GetVdsUplinkName() string {
	return s.VdsUplinkName
}

// GetNsxUplinkName returns the value of NsxUplinkName.
func (s *UplinkMapping) GetNsxUplinkName() string {
	return s.NsxUplinkName
}

// SetVdsUplinkName sets the value of VdsUplinkName.
func (s *UplinkMapping) SetVdsUplinkName(val string) {
	s.VdsUplinkName = val
}

// SetNsxUplinkName sets the value of NsxUplinkName.
func (s *UplinkMapping) SetNsxUplinkName(val string) {
	s.NsxUplinkName = val
}

// This specification contains the policies for the links from hypervisor hosts to NSX logical switch.
// Ref: #/components/schemas/UplinkProfile
type UplinkProfile struct {
	// The uplink profile name.
	Name string `json:"name"`
	// The teaming policies to be associated with the uplink profile.
	Teamings []TeamingSpec `json:"teamings"`
	// The VLAN used for tagging overlay traffic of the associated Host Switch.
	TransportVlan OptInt32 `json:"transportVlan"`
	// List of supported teaming policies in NSX.
	SupportedTeamingPolicies OptUplinkProfileSupportedTeamingPolicies `json:"supportedTeamingPolicies"`
}

// GetName returns the value of Name.
func (s *UplinkProfile) GetName() string {
	return s.Name
}

// GetTeamings returns the value of Teamings.
func (s *UplinkProfile) GetTeamings() []TeamingSpec {
	return s.Teamings
}

// GetTransportVlan returns the value of TransportVlan.
func (s *UplinkProfile) GetTransportVlan() OptInt32 {
	return s.TransportVlan
}

// GetSupportedTeamingPolicies returns the value of SupportedTeamingPolicies.
func (s *UplinkProfile) GetSupportedTeamingPolicies() OptUplinkProfileSupportedTeamingPolicies {
	return s.SupportedTeamingPolicies
}

// SetName sets the value of Name.
func (s *UplinkProfile) SetName(val string) {
	s.Name = val
}

// SetTeamings sets the value of Teamings.
func (s *UplinkProfile) SetTeamings(val []TeamingSpec) {
	s.Teamings = val
}

// SetTransportVlan sets the value of TransportVlan.
func (s *UplinkProfile) SetTransportVlan(val OptInt32) {
	s.TransportVlan = val
}

// SetSupportedTeamingPolicies sets the value of SupportedTeamingPolicies.
func (s *UplinkProfile) SetSupportedTeamingPolicies(val OptUplinkProfileSupportedTeamingPolicies) {
	s.SupportedTeamingPolicies = val
}

// List of supported teaming policies in NSX.
type UplinkProfileSupportedTeamingPolicies map[string]string

func (s *UplinkProfileSupportedTeamingPolicies) init() UplinkProfileSupportedTeamingPolicies {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type UploadBundleBadRequest Error

func (*UploadBundleBadRequest) uploadBundleRes() {}

type UploadBundleInternalServerError Error

func (*UploadBundleInternalServerError) uploadBundleRes() {}

type UploadCertificatesBadRequest Error

func (*UploadCertificatesBadRequest) uploadCertificatesRes() {}

type UploadCertificatesInternalServerError Error

func (*UploadCertificatesInternalServerError) uploadCertificatesRes() {}

type UploadCertificatesNotFound Error

func (*UploadCertificatesNotFound) uploadCertificatesRes() {}

// UploadCertificatesOK is response for UploadCertificates operation.
type UploadCertificatesOK struct{}

func (*UploadCertificatesOK) uploadCertificatesRes() {}

type UploadCertificatesReq struct {
	File ht.MultipartFile `json:"file"`
}

// GetFile returns the value of File.
func (s *UploadCertificatesReq) GetFile() ht.MultipartFile {
	return s.File
}

// SetFile sets the value of File.
func (s *UploadCertificatesReq) SetFile(val ht.MultipartFile) {
	s.File = val
}

type UploadCustomIsoBadRequest Error

func (*UploadCustomIsoBadRequest) uploadCustomIsoRes() {}

type UploadCustomIsoInternalServerError Error

func (*UploadCustomIsoInternalServerError) uploadCustomIsoRes() {}

type UploadCustomIsoReq struct {
	File ht.MultipartFile `json:"file"`
}

// GetFile returns the value of File.
func (s *UploadCustomIsoReq) GetFile() ht.MultipartFile {
	return s.File
}

// SetFile sets the value of File.
func (s *UploadCustomIsoReq) SetFile(val ht.MultipartFile) {
	s.File = val
}

type UploadPersonalityBadRequest Error

func (*UploadPersonalityBadRequest) uploadPersonalityRes() {}

type UploadPersonalityFilesBadRequest Error

func (*UploadPersonalityFilesBadRequest) uploadPersonalityFilesRes() {}

type UploadPersonalityFilesInternalServerError Error

func (*UploadPersonalityFilesInternalServerError) uploadPersonalityFilesRes() {}

type UploadPersonalityFilesOKApplicationJSON string

func (*UploadPersonalityFilesOKApplicationJSON) uploadPersonalityFilesRes() {}

type UploadPersonalityFilesReq struct {
	Files []ht.MultipartFile `json:"files"`
}

// GetFiles returns the value of Files.
func (s *UploadPersonalityFilesReq) GetFiles() []ht.MultipartFile {
	return s.Files
}

// SetFiles sets the value of Files.
func (s *UploadPersonalityFilesReq) SetFiles(val []ht.MultipartFile) {
	s.Files = val
}

type UploadPersonalityInternalServerError Error

func (*UploadPersonalityInternalServerError) uploadPersonalityRes() {}

// UploadProductVersionCatalogAccepted is response for UploadProductVersionCatalog operation.
type UploadProductVersionCatalogAccepted struct{}

func (*UploadProductVersionCatalogAccepted) uploadProductVersionCatalogRes() {}

type UploadProductVersionCatalogBadRequest Error

func (*UploadProductVersionCatalogBadRequest) uploadProductVersionCatalogRes() {}

type UploadProductVersionCatalogInternalServerError Error

func (*UploadProductVersionCatalogInternalServerError) uploadProductVersionCatalogRes() {}

// Represents user and its attributes.
// Ref: #/components/schemas/User
type User struct {
	// The ID of the user.
	ID OptString `json:"id"`
	// The name of the user.
	Name string `json:"name"`
	// The domain of the user.
	Domain OptString `json:"domain"`
	// The type of the user.
	Type string `json:"type"`
	// The API key of the user.
	ApiKey OptString     `json:"apiKey"`
	Role   RoleReference `json:"role"`
	// The timestamp at which the user was created.
	CreationTimestamp OptString `json:"creationTimestamp"`
}

// GetID returns the value of ID.
func (s *User) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *User) GetName() string {
	return s.Name
}

// GetDomain returns the value of Domain.
func (s *User) GetDomain() OptString {
	return s.Domain
}

// GetType returns the value of Type.
func (s *User) GetType() string {
	return s.Type
}

// GetApiKey returns the value of ApiKey.
func (s *User) GetApiKey() OptString {
	return s.ApiKey
}

// GetRole returns the value of Role.
func (s *User) GetRole() RoleReference {
	return s.Role
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *User) GetCreationTimestamp() OptString {
	return s.CreationTimestamp
}

// SetID sets the value of ID.
func (s *User) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *User) SetName(val string) {
	s.Name = val
}

// SetDomain sets the value of Domain.
func (s *User) SetDomain(val OptString) {
	s.Domain = val
}

// SetType sets the value of Type.
func (s *User) SetType(val string) {
	s.Type = val
}

// SetApiKey sets the value of ApiKey.
func (s *User) SetApiKey(val OptString) {
	s.ApiKey = val
}

// SetRole sets the value of Role.
func (s *User) SetRole(val RoleReference) {
	s.Role = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *User) SetCreationTimestamp(val OptString) {
	s.CreationTimestamp = val
}

// VMNics attached to an ESXi host reference.
// Ref: #/components/schemas/VMNicInfo
type VMNicInfo struct {
	// Name of the VMNic.
	Name OptString `json:"name"`
	// VMNic link speed in MB.
	LinkSpeedMB OptInt32 `json:"linkSpeedMB"`
	// Status of VMNic if in use or available.
	IsInUse OptBool `json:"isInUse"`
	// Status of VMNic if auto negotiate is supported or not.
	IsAutoNegotiateSupported OptBool `json:"isAutoNegotiateSupported"`
	// Status of VMNic if active or inactive.
	IsActive OptBool `json:"isActive"`
}

// GetName returns the value of Name.
func (s *VMNicInfo) GetName() OptString {
	return s.Name
}

// GetLinkSpeedMB returns the value of LinkSpeedMB.
func (s *VMNicInfo) GetLinkSpeedMB() OptInt32 {
	return s.LinkSpeedMB
}

// GetIsInUse returns the value of IsInUse.
func (s *VMNicInfo) GetIsInUse() OptBool {
	return s.IsInUse
}

// GetIsAutoNegotiateSupported returns the value of IsAutoNegotiateSupported.
func (s *VMNicInfo) GetIsAutoNegotiateSupported() OptBool {
	return s.IsAutoNegotiateSupported
}

// GetIsActive returns the value of IsActive.
func (s *VMNicInfo) GetIsActive() OptBool {
	return s.IsActive
}

// SetName sets the value of Name.
func (s *VMNicInfo) SetName(val OptString) {
	s.Name = val
}

// SetLinkSpeedMB sets the value of LinkSpeedMB.
func (s *VMNicInfo) SetLinkSpeedMB(val OptInt32) {
	s.LinkSpeedMB = val
}

// SetIsInUse sets the value of IsInUse.
func (s *VMNicInfo) SetIsInUse(val OptBool) {
	s.IsInUse = val
}

// SetIsAutoNegotiateSupported sets the value of IsAutoNegotiateSupported.
func (s *VMNicInfo) SetIsAutoNegotiateSupported(val OptBool) {
	s.IsAutoNegotiateSupported = val
}

// SetIsActive sets the value of IsActive.
func (s *VMNicInfo) SetIsActive(val OptBool) {
	s.IsActive = val
}

// Contains the vSAN Network details.
// Ref: #/components/schemas/VSANNetworkSpec
type VSANNetworkSpec struct {
	// VSAN Gateway IP of the ESXi host.
	VsanGatewayIP string `json:"vsanGatewayIP"`
	// VSAN subnet cidr of the ESXi host.
	VsanCidr string `json:"vsanCidr"`
}

// GetVsanGatewayIP returns the value of VsanGatewayIP.
func (s *VSANNetworkSpec) GetVsanGatewayIP() string {
	return s.VsanGatewayIP
}

// GetVsanCidr returns the value of VsanCidr.
func (s *VSANNetworkSpec) GetVsanCidr() string {
	return s.VsanCidr
}

// SetVsanGatewayIP sets the value of VsanGatewayIP.
func (s *VSANNetworkSpec) SetVsanGatewayIP(val string) {
	s.VsanGatewayIP = val
}

// SetVsanCidr sets the value of VsanCidr.
func (s *VSANNetworkSpec) SetVsanCidr(val string) {
	s.VsanCidr = val
}

type ValidateALBClusterCreationSpecBadRequest Error

func (*ValidateALBClusterCreationSpecBadRequest) validateALBClusterCreationSpecRes() {}

type ValidateALBClusterCreationSpecInternalServerError Error

func (*ValidateALBClusterCreationSpecInternalServerError) validateALBClusterCreationSpecRes() {}

type ValidateBackupConfigurationsOperationsBadRequest Error

func (*ValidateBackupConfigurationsOperationsBadRequest) validateBackupConfigurationsOperationsRes() {
}

type ValidateBackupConfigurationsOperationsInternalServerError Error

func (*ValidateBackupConfigurationsOperationsInternalServerError) validateBackupConfigurationsOperationsRes() {
}

type ValidateBringupSpecAccepted Validation

func (*ValidateBringupSpecAccepted) validateBringupSpecRes() {}

type ValidateBringupSpecForbidden Validation

func (*ValidateBringupSpecForbidden) validateBringupSpecRes() {}

type ValidateBringupSpecInternalServerError Error

func (*ValidateBringupSpecInternalServerError) validateBringupSpecRes() {}

type ValidateBringupSpecName string

const (
	ValidateBringupSpecNameJSONSPECVALIDATION            ValidateBringupSpecName = "JSON_SPEC_VALIDATION"
	ValidateBringupSpecNameSECUREPLATFORMAUDIT           ValidateBringupSpecName = "SECURE_PLATFORM_AUDIT"
	ValidateBringupSpecNameLICENSEKEYVALIDATION          ValidateBringupSpecName = "LICENSE_KEY_VALIDATION"
	ValidateBringupSpecNameTIMESYNCVALIDATION            ValidateBringupSpecName = "TIME_SYNC_VALIDATION"
	ValidateBringupSpecNameNETWORKIPPOOLSVALIDATION      ValidateBringupSpecName = "NETWORK_IP_POOLS_VALIDATION"
	ValidateBringupSpecNameNETWORKCONFIGVALIDATION       ValidateBringupSpecName = "NETWORK_CONFIG_VALIDATION"
	ValidateBringupSpecNameNETWORKCONNECTIVITYVALIDATION ValidateBringupSpecName = "NETWORK_CONNECTIVITY_VALIDATION"
	ValidateBringupSpecNameESXIHOSTREADINESSVALIDATION   ValidateBringupSpecName = "ESXI_HOST_READINESS_VALIDATION"
	ValidateBringupSpecNamePASSWORDSVALIDATION           ValidateBringupSpecName = "PASSWORDS_VALIDATION"
	ValidateBringupSpecNameHOSTIPDNSVALIDATION           ValidateBringupSpecName = "HOST_IP_DNS_VALIDATION"
	ValidateBringupSpecNameCLOUDBUILDERREADYVALIDATION   ValidateBringupSpecName = "CLOUDBUILDER_READY_VALIDATION"
	ValidateBringupSpecNameVSANAVAILABILITYVALIDATION    ValidateBringupSpecName = "VSAN_AVAILABILITY_VALIDATION"
	ValidateBringupSpecNameVALIDATEPROXYDETAIL           ValidateBringupSpecName = "VALIDATE_PROXY_DETAIL"
	ValidateBringupSpecNameNSXTNETWORKSVALIDATION        ValidateBringupSpecName = "NSXT_NETWORKS_VALIDATION"
	ValidateBringupSpecNameMANAGEMENTNETWORKSVALIDATION  ValidateBringupSpecName = "MANAGEMENT_NETWORKS_VALIDATION"
)

// AllValues returns all ValidateBringupSpecName values.
func (ValidateBringupSpecName) AllValues() []ValidateBringupSpecName {
	return []ValidateBringupSpecName{
		ValidateBringupSpecNameJSONSPECVALIDATION,
		ValidateBringupSpecNameSECUREPLATFORMAUDIT,
		ValidateBringupSpecNameLICENSEKEYVALIDATION,
		ValidateBringupSpecNameTIMESYNCVALIDATION,
		ValidateBringupSpecNameNETWORKIPPOOLSVALIDATION,
		ValidateBringupSpecNameNETWORKCONFIGVALIDATION,
		ValidateBringupSpecNameNETWORKCONNECTIVITYVALIDATION,
		ValidateBringupSpecNameESXIHOSTREADINESSVALIDATION,
		ValidateBringupSpecNamePASSWORDSVALIDATION,
		ValidateBringupSpecNameHOSTIPDNSVALIDATION,
		ValidateBringupSpecNameCLOUDBUILDERREADYVALIDATION,
		ValidateBringupSpecNameVSANAVAILABILITYVALIDATION,
		ValidateBringupSpecNameVALIDATEPROXYDETAIL,
		ValidateBringupSpecNameNSXTNETWORKSVALIDATION,
		ValidateBringupSpecNameMANAGEMENTNETWORKSVALIDATION,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ValidateBringupSpecName) MarshalText() ([]byte, error) {
	switch s {
	case ValidateBringupSpecNameJSONSPECVALIDATION:
		return []byte(s), nil
	case ValidateBringupSpecNameSECUREPLATFORMAUDIT:
		return []byte(s), nil
	case ValidateBringupSpecNameLICENSEKEYVALIDATION:
		return []byte(s), nil
	case ValidateBringupSpecNameTIMESYNCVALIDATION:
		return []byte(s), nil
	case ValidateBringupSpecNameNETWORKIPPOOLSVALIDATION:
		return []byte(s), nil
	case ValidateBringupSpecNameNETWORKCONFIGVALIDATION:
		return []byte(s), nil
	case ValidateBringupSpecNameNETWORKCONNECTIVITYVALIDATION:
		return []byte(s), nil
	case ValidateBringupSpecNameESXIHOSTREADINESSVALIDATION:
		return []byte(s), nil
	case ValidateBringupSpecNamePASSWORDSVALIDATION:
		return []byte(s), nil
	case ValidateBringupSpecNameHOSTIPDNSVALIDATION:
		return []byte(s), nil
	case ValidateBringupSpecNameCLOUDBUILDERREADYVALIDATION:
		return []byte(s), nil
	case ValidateBringupSpecNameVSANAVAILABILITYVALIDATION:
		return []byte(s), nil
	case ValidateBringupSpecNameVALIDATEPROXYDETAIL:
		return []byte(s), nil
	case ValidateBringupSpecNameNSXTNETWORKSVALIDATION:
		return []byte(s), nil
	case ValidateBringupSpecNameMANAGEMENTNETWORKSVALIDATION:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ValidateBringupSpecName) UnmarshalText(data []byte) error {
	switch ValidateBringupSpecName(data) {
	case ValidateBringupSpecNameJSONSPECVALIDATION:
		*s = ValidateBringupSpecNameJSONSPECVALIDATION
		return nil
	case ValidateBringupSpecNameSECUREPLATFORMAUDIT:
		*s = ValidateBringupSpecNameSECUREPLATFORMAUDIT
		return nil
	case ValidateBringupSpecNameLICENSEKEYVALIDATION:
		*s = ValidateBringupSpecNameLICENSEKEYVALIDATION
		return nil
	case ValidateBringupSpecNameTIMESYNCVALIDATION:
		*s = ValidateBringupSpecNameTIMESYNCVALIDATION
		return nil
	case ValidateBringupSpecNameNETWORKIPPOOLSVALIDATION:
		*s = ValidateBringupSpecNameNETWORKIPPOOLSVALIDATION
		return nil
	case ValidateBringupSpecNameNETWORKCONFIGVALIDATION:
		*s = ValidateBringupSpecNameNETWORKCONFIGVALIDATION
		return nil
	case ValidateBringupSpecNameNETWORKCONNECTIVITYVALIDATION:
		*s = ValidateBringupSpecNameNETWORKCONNECTIVITYVALIDATION
		return nil
	case ValidateBringupSpecNameESXIHOSTREADINESSVALIDATION:
		*s = ValidateBringupSpecNameESXIHOSTREADINESSVALIDATION
		return nil
	case ValidateBringupSpecNamePASSWORDSVALIDATION:
		*s = ValidateBringupSpecNamePASSWORDSVALIDATION
		return nil
	case ValidateBringupSpecNameHOSTIPDNSVALIDATION:
		*s = ValidateBringupSpecNameHOSTIPDNSVALIDATION
		return nil
	case ValidateBringupSpecNameCLOUDBUILDERREADYVALIDATION:
		*s = ValidateBringupSpecNameCLOUDBUILDERREADYVALIDATION
		return nil
	case ValidateBringupSpecNameVSANAVAILABILITYVALIDATION:
		*s = ValidateBringupSpecNameVSANAVAILABILITYVALIDATION
		return nil
	case ValidateBringupSpecNameVALIDATEPROXYDETAIL:
		*s = ValidateBringupSpecNameVALIDATEPROXYDETAIL
		return nil
	case ValidateBringupSpecNameNSXTNETWORKSVALIDATION:
		*s = ValidateBringupSpecNameNSXTNETWORKSVALIDATION
		return nil
	case ValidateBringupSpecNameMANAGEMENTNETWORKSVALIDATION:
		*s = ValidateBringupSpecNameMANAGEMENTNETWORKSVALIDATION
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ValidateBringupSpecNotFound Error

func (*ValidateBringupSpecNotFound) validateBringupSpecRes() {}

type ValidateBringupSpecOK Validation

func (*ValidateBringupSpecOK) validateBringupSpecRes() {}

type ValidateClusterCreationSpecBadRequest Error

func (*ValidateClusterCreationSpecBadRequest) validateClusterCreationSpecRes() {}

type ValidateClusterCreationSpecInternalServerError Error

func (*ValidateClusterCreationSpecInternalServerError) validateClusterCreationSpecRes() {}

type ValidateClusterUpdateSpecBadRequest Error

func (*ValidateClusterUpdateSpecBadRequest) validateClusterUpdateSpecRes() {}

type ValidateClusterUpdateSpecInternalServerError Error

func (*ValidateClusterUpdateSpecInternalServerError) validateClusterUpdateSpecRes() {}

type ValidateClusterUpdateSpecNotFound Error

func (*ValidateClusterUpdateSpecNotFound) validateClusterUpdateSpecRes() {}

type ValidateCommissionHostsAccepted Validation

func (*ValidateCommissionHostsAccepted) validateCommissionHostsRes() {}

type ValidateCommissionHostsInternalServerError Validation

func (*ValidateCommissionHostsInternalServerError) validateCommissionHostsRes() {}

type ValidateDnsConfigurationAccepted Validation

func (*ValidateDnsConfigurationAccepted) validateDnsConfigurationRes() {}

type ValidateDnsConfigurationInternalServerError Validation

func (*ValidateDnsConfigurationInternalServerError) validateDnsConfigurationRes() {}

type ValidateDomainCreationSpecBadRequest Error

func (*ValidateDomainCreationSpecBadRequest) validateDomainCreationSpecRes() {}

type ValidateDomainCreationSpecInternalServerError Error

func (*ValidateDomainCreationSpecInternalServerError) validateDomainCreationSpecRes() {}

type ValidateDomainUpdateSpecBadRequest Error

func (*ValidateDomainUpdateSpecBadRequest) validateDomainUpdateSpecRes() {}

type ValidateDomainUpdateSpecInternalServerError Error

func (*ValidateDomainUpdateSpecInternalServerError) validateDomainUpdateSpecRes() {}

type ValidateEdgeClusterCreationSpecBadRequest Error

func (*ValidateEdgeClusterCreationSpecBadRequest) validateEdgeClusterCreationSpecRes() {}

type ValidateEdgeClusterCreationSpecInternalServerError Error

func (*ValidateEdgeClusterCreationSpecInternalServerError) validateEdgeClusterCreationSpecRes() {}

type ValidateEdgeClusterUpdateSpecBadRequest Error

func (*ValidateEdgeClusterUpdateSpecBadRequest) validateEdgeClusterUpdateSpecRes() {}

type ValidateEdgeClusterUpdateSpecInternalServerError Error

func (*ValidateEdgeClusterUpdateSpecInternalServerError) validateEdgeClusterUpdateSpecRes() {}

type ValidateHostCommissionSpecAccepted Validation

func (*ValidateHostCommissionSpecAccepted) validateHostCommissionSpecRes() {}

type ValidateHostCommissionSpecInternalServerError Validation

func (*ValidateHostCommissionSpecInternalServerError) validateHostCommissionSpecRes() {}

type ValidateNsxALBCompatibilityBadRequest Error

func (*ValidateNsxALBCompatibilityBadRequest) validateNsxALBCompatibilityRes() {}

type ValidateNsxALBCompatibilityInternalServerError Error

func (*ValidateNsxALBCompatibilityInternalServerError) validateNsxALBCompatibilityRes() {}

// ValidateNsxALBCompatibilityOK is response for ValidateNsxALBCompatibility operation.
type ValidateNsxALBCompatibilityOK struct{}

func (*ValidateNsxALBCompatibilityOK) validateNsxALBCompatibilityRes() {}

type ValidateNtpConfigurationAccepted Validation

func (*ValidateNtpConfigurationAccepted) validateNtpConfigurationRes() {}

type ValidateNtpConfigurationInternalServerError Validation

func (*ValidateNtpConfigurationInternalServerError) validateNtpConfigurationRes() {}

type ValidateReleaseByDomainIDBadRequest Error

func (*ValidateReleaseByDomainIDBadRequest) validateReleaseByDomainIDRes() {}

type ValidateReleaseByDomainIDInternalServerError Error

func (*ValidateReleaseByDomainIDInternalServerError) validateReleaseByDomainIDRes() {}

type ValidateResourceCertificatesInternalServerError Error

func (*ValidateResourceCertificatesInternalServerError) validateResourceCertificatesRes() {}

type ValidateResourceCertificatesNotFound Error

func (*ValidateResourceCertificatesNotFound) validateResourceCertificatesRes() {}

type ValidateVasaProviderSpecAccepted Validation

func (*ValidateVasaProviderSpecAccepted) validateVasaProviderSpecRes() {}

type ValidateVasaProviderSpecInternalServerError Validation

func (*ValidateVasaProviderSpecInternalServerError) validateVasaProviderSpecRes() {}

type ValidateVsanRemoteDatastoreMountSpecBadRequest Error

func (*ValidateVsanRemoteDatastoreMountSpecBadRequest) validateVsanRemoteDatastoreMountSpecRes() {}

type ValidateVsanRemoteDatastoreMountSpecInternalServerError Error

func (*ValidateVsanRemoteDatastoreMountSpecInternalServerError) validateVsanRemoteDatastoreMountSpecRes() {
}

type ValidateVsanRemoteDatastoreSpecBadRequest Error

func (*ValidateVsanRemoteDatastoreSpecBadRequest) validateVsanRemoteDatastoreSpecRes() {}

type ValidateVsanRemoteDatastoreSpecInternalServerError Error

func (*ValidateVsanRemoteDatastoreSpecInternalServerError) validateVsanRemoteDatastoreSpecRes() {}

// Represents a validation with a list of one or more validation checks that are performed as part of
// the validation.
// Ref: #/components/schemas/Validation
type Validation struct {
	// ID of the validation.
	ID string `json:"id"`
	// Description of the validation.
	Description string `json:"description"`
	// Execution status of the validation. One among: IN_PROGRESS, FAILED, COMPLETED, UNKNOWN, SKIPPED,
	// CANCELLED, CANCELLATION_IN_PROGRESS.
	ExecutionStatus string `json:"executionStatus"`
	// Result status of the validation after it has completed its execution. One among: SUCCEEDED, FAILED,
	//  FAILED_WITH_WARNINGS, UNKNOWN, CANCELLATION_IN_PROGRESS.
	ResultStatus string `json:"resultStatus"`
	// List of one or more validation checks that are performed as part of the validation.
	ValidationChecks     []ValidationCheck                 `json:"validationChecks"`
	AdditionalProperties OptValidationAdditionalProperties `json:"additionalProperties"`
}

// GetID returns the value of ID.
func (s *Validation) GetID() string {
	return s.ID
}

// GetDescription returns the value of Description.
func (s *Validation) GetDescription() string {
	return s.Description
}

// GetExecutionStatus returns the value of ExecutionStatus.
func (s *Validation) GetExecutionStatus() string {
	return s.ExecutionStatus
}

// GetResultStatus returns the value of ResultStatus.
func (s *Validation) GetResultStatus() string {
	return s.ResultStatus
}

// GetValidationChecks returns the value of ValidationChecks.
func (s *Validation) GetValidationChecks() []ValidationCheck {
	return s.ValidationChecks
}

// GetAdditionalProperties returns the value of AdditionalProperties.
func (s *Validation) GetAdditionalProperties() OptValidationAdditionalProperties {
	return s.AdditionalProperties
}

// SetID sets the value of ID.
func (s *Validation) SetID(val string) {
	s.ID = val
}

// SetDescription sets the value of Description.
func (s *Validation) SetDescription(val string) {
	s.Description = val
}

// SetExecutionStatus sets the value of ExecutionStatus.
func (s *Validation) SetExecutionStatus(val string) {
	s.ExecutionStatus = val
}

// SetResultStatus sets the value of ResultStatus.
func (s *Validation) SetResultStatus(val string) {
	s.ResultStatus = val
}

// SetValidationChecks sets the value of ValidationChecks.
func (s *Validation) SetValidationChecks(val []ValidationCheck) {
	s.ValidationChecks = val
}

// SetAdditionalProperties sets the value of AdditionalProperties.
func (s *Validation) SetAdditionalProperties(val OptValidationAdditionalProperties) {
	s.AdditionalProperties = val
}

func (*Validation) domainCreateValidationRes()               {}
func (*Validation) getClusterCreateValidationRes()           {}
func (*Validation) getClusterUpdateValidationRes()           {}
func (*Validation) getDomainReleaseViewValidationRes()       {}
func (*Validation) getDomainUpdateValidationRes()            {}
func (*Validation) getValidationsOfDNSConfigurationRes()     {}
func (*Validation) getValidationsOfNtpConfigurationRes()     {}
func (*Validation) getVrslcmValidationRes()                  {}
func (*Validation) setBackupConfigurationRes()               {}
func (*Validation) validateALBClusterCreationSpecRes()       {}
func (*Validation) validateAvnSpecRes()                      {}
func (*Validation) validateClusterCreationSpecRes()          {}
func (*Validation) validateClusterUpdateSpecRes()            {}
func (*Validation) validateDomainCreationSpecRes()           {}
func (*Validation) validateDomainUpdateSpecRes()             {}
func (*Validation) validateEdgeClusterCreationSpecRes()      {}
func (*Validation) validateEdgeClusterUpdateSpecRes()        {}
func (*Validation) validateReleaseByDomainIDRes()            {}
func (*Validation) validateVrslcmRes()                       {}
func (*Validation) validateVsanRemoteDatastoreMountSpecRes() {}
func (*Validation) validateVsanRemoteDatastoreSpecRes()      {}

type ValidationAdditionalProperties map[string]string

func (s *ValidationAdditionalProperties) init() ValidationAdditionalProperties {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Represents a validation check.
// Ref: #/components/schemas/ValidationCheck
type ValidationCheck struct {
	// Description of the validation check.
	Description string `json:"description"`
	// Severity of the validation check.
	Severity string `json:"severity"`
	// Result status of the validation check after it has completed its execution.
	ResultStatus  string   `json:"resultStatus"`
	ErrorResponse OptError `json:"errorResponse"`
}

// GetDescription returns the value of Description.
func (s *ValidationCheck) GetDescription() string {
	return s.Description
}

// GetSeverity returns the value of Severity.
func (s *ValidationCheck) GetSeverity() string {
	return s.Severity
}

// GetResultStatus returns the value of ResultStatus.
func (s *ValidationCheck) GetResultStatus() string {
	return s.ResultStatus
}

// GetErrorResponse returns the value of ErrorResponse.
func (s *ValidationCheck) GetErrorResponse() OptError {
	return s.ErrorResponse
}

// SetDescription sets the value of Description.
func (s *ValidationCheck) SetDescription(val string) {
	s.Description = val
}

// SetSeverity sets the value of Severity.
func (s *ValidationCheck) SetSeverity(val string) {
	s.Severity = val
}

// SetResultStatus sets the value of ResultStatus.
func (s *ValidationCheck) SetResultStatus(val string) {
	s.ResultStatus = val
}

// SetErrorResponse sets the value of ErrorResponse.
func (s *ValidationCheck) SetErrorResponse(val OptError) {
	s.ErrorResponse = val
}

// VASA Provider representation.
// Ref: #/components/schemas/VasaProvider
type VasaProvider struct {
	// ID of the VASA Provider.
	ID OptString `json:"id"`
	// Name of the VASA Provider.
	Name string `json:"name"`
	// URL of the VASA Provider.
	URL string `json:"url"`
	// List of storage containers associated with the VASA Provider.
	StorageContainers []StorageContainer `json:"storageContainers"`
	// List of users associated with the VASA Provider.
	Users []VasaUser `json:"users"`
}

// GetID returns the value of ID.
func (s *VasaProvider) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VasaProvider) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *VasaProvider) GetURL() string {
	return s.URL
}

// GetStorageContainers returns the value of StorageContainers.
func (s *VasaProvider) GetStorageContainers() []StorageContainer {
	return s.StorageContainers
}

// GetUsers returns the value of Users.
func (s *VasaProvider) GetUsers() []VasaUser {
	return s.Users
}

// SetID sets the value of ID.
func (s *VasaProvider) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VasaProvider) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *VasaProvider) SetURL(val string) {
	s.URL = val
}

// SetStorageContainers sets the value of StorageContainers.
func (s *VasaProvider) SetStorageContainers(val []StorageContainer) {
	s.StorageContainers = val
}

// SetUsers sets the value of Users.
func (s *VasaProvider) SetUsers(val []VasaUser) {
	s.Users = val
}

func (*VasaProvider) addVasaProviderRes()                    {}
func (*VasaProvider) addVasaProviderStorageContainerRes()    {}
func (*VasaProvider) addVasaProviderUserRes()                {}
func (*VasaProvider) getVasaProviderRes()                    {}
func (*VasaProvider) updateVasaProviderRes()                 {}
func (*VasaProvider) updateVasaProviderStorageContainerRes() {}
func (*VasaProvider) updateVasaProviderUserRes()             {}

// This specification contains cluster storage configuration for vVol.
// Ref: #/components/schemas/VasaProviderSpec
type VasaProviderSpec struct {
	// UUID of the VASA storage provider.
	VasaProviderId string `json:"vasaProviderId"`
	// UUID of the VASA storage container.
	StorageContainerId string `json:"storageContainerId"`
	// Type of the VASA storage protocol.
	StorageProtocolType string `json:"storageProtocolType"`
	// UUID of the VASA storage user.
	UserId string `json:"userId"`
}

// GetVasaProviderId returns the value of VasaProviderId.
func (s *VasaProviderSpec) GetVasaProviderId() string {
	return s.VasaProviderId
}

// GetStorageContainerId returns the value of StorageContainerId.
func (s *VasaProviderSpec) GetStorageContainerId() string {
	return s.StorageContainerId
}

// GetStorageProtocolType returns the value of StorageProtocolType.
func (s *VasaProviderSpec) GetStorageProtocolType() string {
	return s.StorageProtocolType
}

// GetUserId returns the value of UserId.
func (s *VasaProviderSpec) GetUserId() string {
	return s.UserId
}

// SetVasaProviderId sets the value of VasaProviderId.
func (s *VasaProviderSpec) SetVasaProviderId(val string) {
	s.VasaProviderId = val
}

// SetStorageContainerId sets the value of StorageContainerId.
func (s *VasaProviderSpec) SetStorageContainerId(val string) {
	s.StorageContainerId = val
}

// SetStorageProtocolType sets the value of StorageProtocolType.
func (s *VasaProviderSpec) SetStorageProtocolType(val string) {
	s.StorageProtocolType = val
}

// SetUserId sets the value of UserId.
func (s *VasaProviderSpec) SetUserId(val string) {
	s.UserId = val
}

// VASA Provider update data.
// Ref: #/components/schemas/VasaProviderUpdateSpec
type VasaProviderUpdateSpec struct {
	// Name of the VASA Provider.
	Name OptString `json:"name"`
	// URL of the VASA Provider.
	URL OptString `json:"url"`
}

// GetName returns the value of Name.
func (s *VasaProviderUpdateSpec) GetName() OptString {
	return s.Name
}

// GetURL returns the value of URL.
func (s *VasaProviderUpdateSpec) GetURL() OptString {
	return s.URL
}

// SetName sets the value of Name.
func (s *VasaProviderUpdateSpec) SetName(val OptString) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *VasaProviderUpdateSpec) SetURL(val OptString) {
	s.URL = val
}

// VASA User representation.
// Ref: #/components/schemas/VasaUser
type VasaUser struct {
	// ID of the VASA User.
	ID OptString `json:"id"`
	// VASA User name.
	Username string `json:"username"`
	// Password.
	Password string `json:"password"`
}

// GetID returns the value of ID.
func (s *VasaUser) GetID() OptString {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *VasaUser) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *VasaUser) GetPassword() string {
	return s.Password
}

// SetID sets the value of ID.
func (s *VasaUser) SetID(val OptString) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *VasaUser) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *VasaUser) SetPassword(val string) {
	s.Password = val
}

// User update data.
// Ref: #/components/schemas/VasaUserUpdateSpec
type VasaUserUpdateSpec struct {
	// VASA User name.
	Username OptString `json:"username"`
	// Password.
	Password OptString `json:"password"`
}

// GetUsername returns the value of Username.
func (s *VasaUserUpdateSpec) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *VasaUserUpdateSpec) GetPassword() OptString {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *VasaUserUpdateSpec) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *VasaUserUpdateSpec) SetPassword(val OptString) {
	s.Password = val
}

// Represents embedded Identity Sources and its attributes.
// Ref: #/components/schemas/VcIdentitySources
type VcIdentitySources struct {
	// Name of the Identity Source.
	Name OptString `json:"name"`
	// Type of the Identity Source.
	Type OptString `json:"type"`
	// The Domains of the Identity Source.
	DomainNames []string    `json:"domainNames"`
	Ldap        OptLdapInfo `json:"ldap"`
}

// GetName returns the value of Name.
func (s *VcIdentitySources) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *VcIdentitySources) GetType() OptString {
	return s.Type
}

// GetDomainNames returns the value of DomainNames.
func (s *VcIdentitySources) GetDomainNames() []string {
	return s.DomainNames
}

// GetLdap returns the value of Ldap.
func (s *VcIdentitySources) GetLdap() OptLdapInfo {
	return s.Ldap
}

// SetName sets the value of Name.
func (s *VcIdentitySources) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *VcIdentitySources) SetType(val OptString) {
	s.Type = val
}

// SetDomainNames sets the value of DomainNames.
func (s *VcIdentitySources) SetDomainNames(val []string) {
	s.DomainNames = val
}

// SetLdap sets the value of Ldap.
func (s *VcIdentitySources) SetLdap(val OptLdapInfo) {
	s.Ldap = val
}

// VCenter representation.
// Ref: #/components/schemas/Vcenter
type Vcenter struct {
	// ID of the vCenter.
	ID OptString `json:"id"`
	// FQDN of the vCenter.
	Fqdn OptString `json:"fqdn"`
	// IP address of the vCenter.
	IpAddress OptString          `json:"ipAddress"`
	Domain    OptDomainReference `json:"domain"`
	// Version of the vCenter.
	Version OptString `json:"version"`
}

// GetID returns the value of ID.
func (s *Vcenter) GetID() OptString {
	return s.ID
}

// GetFqdn returns the value of Fqdn.
func (s *Vcenter) GetFqdn() OptString {
	return s.Fqdn
}

// GetIpAddress returns the value of IpAddress.
func (s *Vcenter) GetIpAddress() OptString {
	return s.IpAddress
}

// GetDomain returns the value of Domain.
func (s *Vcenter) GetDomain() OptDomainReference {
	return s.Domain
}

// GetVersion returns the value of Version.
func (s *Vcenter) GetVersion() OptString {
	return s.Version
}

// SetID sets the value of ID.
func (s *Vcenter) SetID(val OptString) {
	s.ID = val
}

// SetFqdn sets the value of Fqdn.
func (s *Vcenter) SetFqdn(val OptString) {
	s.Fqdn = val
}

// SetIpAddress sets the value of IpAddress.
func (s *Vcenter) SetIpAddress(val OptString) {
	s.IpAddress = val
}

// SetDomain sets the value of Domain.
func (s *Vcenter) SetDomain(val OptDomainReference) {
	s.Domain = val
}

// SetVersion sets the value of Version.
func (s *Vcenter) SetVersion(val OptString) {
	s.Version = val
}

func (*Vcenter) getVcenterRes() {}

// Represents a vCenter reference.
// Ref: #/components/schemas/VcenterReference
type VcenterReference struct {
	// ID of the vCenter.
	ID string `json:"id"`
	// FQDN of the vCenter.
	Fqdn OptString `json:"fqdn"`
	// VCenter instance ID.
	VcInstanceId OptString `json:"vcInstanceId"`
}

// GetID returns the value of ID.
func (s *VcenterReference) GetID() string {
	return s.ID
}

// GetFqdn returns the value of Fqdn.
func (s *VcenterReference) GetFqdn() OptString {
	return s.Fqdn
}

// GetVcInstanceId returns the value of VcInstanceId.
func (s *VcenterReference) GetVcInstanceId() OptString {
	return s.VcInstanceId
}

// SetID sets the value of ID.
func (s *VcenterReference) SetID(val string) {
	s.ID = val
}

// SetFqdn sets the value of Fqdn.
func (s *VcenterReference) SetFqdn(val OptString) {
	s.Fqdn = val
}

// SetVcInstanceId sets the value of VcInstanceId.
func (s *VcenterReference) SetVcInstanceId(val OptString) {
	s.VcInstanceId = val
}

// This specification contains the installation and configuration of vCenter in a workload domain.
// Ref: #/components/schemas/VcenterSpec
type VcenterSpec struct {
	// Name of the vCenter virtual machine.
	Name               OptString          `json:"name"`
	NetworkDetailsSpec NetworkDetailsSpec `json:"networkDetailsSpec"`
	// VCenter root shell password.
	RootPassword OptString `json:"rootPassword"`
	// VCenter datacenter name.
	DatacenterName OptString `json:"datacenterName"`
	// VCenter VM size.
	VmSize OptString `json:"vmSize"`
	// VCenter storage size.
	StorageSize OptString `json:"storageSize"`
}

// GetName returns the value of Name.
func (s *VcenterSpec) GetName() OptString {
	return s.Name
}

// GetNetworkDetailsSpec returns the value of NetworkDetailsSpec.
func (s *VcenterSpec) GetNetworkDetailsSpec() NetworkDetailsSpec {
	return s.NetworkDetailsSpec
}

// GetRootPassword returns the value of RootPassword.
func (s *VcenterSpec) GetRootPassword() OptString {
	return s.RootPassword
}

// GetDatacenterName returns the value of DatacenterName.
func (s *VcenterSpec) GetDatacenterName() OptString {
	return s.DatacenterName
}

// GetVmSize returns the value of VmSize.
func (s *VcenterSpec) GetVmSize() OptString {
	return s.VmSize
}

// GetStorageSize returns the value of StorageSize.
func (s *VcenterSpec) GetStorageSize() OptString {
	return s.StorageSize
}

// SetName sets the value of Name.
func (s *VcenterSpec) SetName(val OptString) {
	s.Name = val
}

// SetNetworkDetailsSpec sets the value of NetworkDetailsSpec.
func (s *VcenterSpec) SetNetworkDetailsSpec(val NetworkDetailsSpec) {
	s.NetworkDetailsSpec = val
}

// SetRootPassword sets the value of RootPassword.
func (s *VcenterSpec) SetRootPassword(val OptString) {
	s.RootPassword = val
}

// SetDatacenterName sets the value of DatacenterName.
func (s *VcenterSpec) SetDatacenterName(val OptString) {
	s.DatacenterName = val
}

// SetVmSize sets the value of VmSize.
func (s *VcenterSpec) SetVmSize(val OptString) {
	s.VmSize = val
}

// SetStorageSize sets the value of StorageSize.
func (s *VcenterSpec) SetStorageSize(val OptString) {
	s.StorageSize = val
}

// VCenter Upgrade User Input Specification.
// Ref: #/components/schemas/VcenterUpgradeUserInputSpec
type VcenterUpgradeUserInputSpec struct {
	TemporaryNetwork TemporaryNetwork `json:"temporaryNetwork"`
}

// GetTemporaryNetwork returns the value of TemporaryNetwork.
func (s *VcenterUpgradeUserInputSpec) GetTemporaryNetwork() TemporaryNetwork {
	return s.TemporaryNetwork
}

// SetTemporaryNetwork sets the value of TemporaryNetwork.
func (s *VcenterUpgradeUserInputSpec) SetTemporaryNetwork(val TemporaryNetwork) {
	s.TemporaryNetwork = val
}

// VCF service representation.
// Ref: #/components/schemas/VcfService
type VcfService struct {
	// ID of the service.
	ID OptString `json:"id"`
	// Name of the service.
	Name OptString `json:"name"`
	// Version of the service.
	Version OptString `json:"version"`
	// Status of the service.
	Status OptString `json:"status"`
}

// GetID returns the value of ID.
func (s *VcfService) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VcfService) GetName() OptString {
	return s.Name
}

// GetVersion returns the value of Version.
func (s *VcfService) GetVersion() OptString {
	return s.Version
}

// GetStatus returns the value of Status.
func (s *VcfService) GetStatus() OptString {
	return s.Status
}

// SetID sets the value of ID.
func (s *VcfService) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VcfService) SetName(val OptString) {
	s.Name = val
}

// SetVersion sets the value of Version.
func (s *VcfService) SetVersion(val OptString) {
	s.Version = val
}

// SetStatus sets the value of Status.
func (s *VcfService) SetStatus(val OptString) {
	s.Status = val
}

func (*VcfService) getVcfServiceRes() {}

// VSphere distributed switch.
// Ref: #/components/schemas/Vds
type Vds struct {
	// VSphere Distributed Switch id.
	ID OptString `json:"id"`
	// VSphere Distributed Switch name.
	Name string `json:"name"`
	// Boolean to identify if the vSphere distributed switch is used by NSX. This property is deprecated
	// in favor of nsxtSwitchConfig field.
	IsUsedByNsxt OptBool `json:"isUsedByNsxt"`
	// Maximum Transmission Unit.
	Mtu OptInt32 `json:"mtu"`
	// List of portgroups associated with the vSphere Distributed Switch.
	PortGroups []Portgroup `json:"portGroups"`
	// List of Network I/O Control Bandwidth Allocations for System Traffic
	// Based on shares, reservation, and limit, you can configure Network I/O Control to allocate certain
	// amount of
	// bandwidth for traffic generated by vSphere Fault Tolerance, iSCSI storage, vSphere vMotion, and so
	// on.
	// You can use Network I/O Control on a distributed switch to configure bandwidth allocation for the
	// traffic
	// that is related to the main system features in vSphere.
	NiocBandwidthAllocations []NiocBandwidthAllocation `json:"niocBandwidthAllocations"`
	// VSphere Distributed Switch version.
	Version          OptString                  `json:"version"`
	NsxtSwitchConfig OptNsxtSwitchConfiguration `json:"nsxtSwitchConfig"`
}

// GetID returns the value of ID.
func (s *Vds) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *Vds) GetName() string {
	return s.Name
}

// GetIsUsedByNsxt returns the value of IsUsedByNsxt.
func (s *Vds) GetIsUsedByNsxt() OptBool {
	return s.IsUsedByNsxt
}

// GetMtu returns the value of Mtu.
func (s *Vds) GetMtu() OptInt32 {
	return s.Mtu
}

// GetPortGroups returns the value of PortGroups.
func (s *Vds) GetPortGroups() []Portgroup {
	return s.PortGroups
}

// GetNiocBandwidthAllocations returns the value of NiocBandwidthAllocations.
func (s *Vds) GetNiocBandwidthAllocations() []NiocBandwidthAllocation {
	return s.NiocBandwidthAllocations
}

// GetVersion returns the value of Version.
func (s *Vds) GetVersion() OptString {
	return s.Version
}

// GetNsxtSwitchConfig returns the value of NsxtSwitchConfig.
func (s *Vds) GetNsxtSwitchConfig() OptNsxtSwitchConfiguration {
	return s.NsxtSwitchConfig
}

// SetID sets the value of ID.
func (s *Vds) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Vds) SetName(val string) {
	s.Name = val
}

// SetIsUsedByNsxt sets the value of IsUsedByNsxt.
func (s *Vds) SetIsUsedByNsxt(val OptBool) {
	s.IsUsedByNsxt = val
}

// SetMtu sets the value of Mtu.
func (s *Vds) SetMtu(val OptInt32) {
	s.Mtu = val
}

// SetPortGroups sets the value of PortGroups.
func (s *Vds) SetPortGroups(val []Portgroup) {
	s.PortGroups = val
}

// SetNiocBandwidthAllocations sets the value of NiocBandwidthAllocations.
func (s *Vds) SetNiocBandwidthAllocations(val []NiocBandwidthAllocation) {
	s.NiocBandwidthAllocations = val
}

// SetVersion sets the value of Version.
func (s *Vds) SetVersion(val OptString) {
	s.Version = val
}

// SetNsxtSwitchConfig sets the value of NsxtSwitchConfig.
func (s *Vds) SetNsxtSwitchConfig(val OptNsxtSwitchConfiguration) {
	s.NsxtSwitchConfig = val
}

// The vSphere Distributed Switch network configuration.
// Ref: #/components/schemas/VdsConfiguration
type VdsConfiguration struct {
	// VSphere Distributed Switch name.
	Name OptString `json:"name"`
	// List of portgroup configuration associated with the vSphere Distributed Switch.
	PortGroups       []PortgroupConfig   `json:"portGroups"`
	NsxtSwitchConfig OptNsxtSwitchConfig `json:"nsxtSwitchConfig"`
	// Inventory mismatch levels.
	InventoryMismatchInfo []InventoryMismatchInfo `json:"inventoryMismatchInfo"`
	// Uplinks used by vSphere Distributed Switch.
	Uplinks []string `json:"uplinks"`
	// The maximum transmission unit (MTU) configured for the uplinks.
	Mtu OptInt32 `json:"mtu"`
}

// GetName returns the value of Name.
func (s *VdsConfiguration) GetName() OptString {
	return s.Name
}

// GetPortGroups returns the value of PortGroups.
func (s *VdsConfiguration) GetPortGroups() []PortgroupConfig {
	return s.PortGroups
}

// GetNsxtSwitchConfig returns the value of NsxtSwitchConfig.
func (s *VdsConfiguration) GetNsxtSwitchConfig() OptNsxtSwitchConfig {
	return s.NsxtSwitchConfig
}

// GetInventoryMismatchInfo returns the value of InventoryMismatchInfo.
func (s *VdsConfiguration) GetInventoryMismatchInfo() []InventoryMismatchInfo {
	return s.InventoryMismatchInfo
}

// GetUplinks returns the value of Uplinks.
func (s *VdsConfiguration) GetUplinks() []string {
	return s.Uplinks
}

// GetMtu returns the value of Mtu.
func (s *VdsConfiguration) GetMtu() OptInt32 {
	return s.Mtu
}

// SetName sets the value of Name.
func (s *VdsConfiguration) SetName(val OptString) {
	s.Name = val
}

// SetPortGroups sets the value of PortGroups.
func (s *VdsConfiguration) SetPortGroups(val []PortgroupConfig) {
	s.PortGroups = val
}

// SetNsxtSwitchConfig sets the value of NsxtSwitchConfig.
func (s *VdsConfiguration) SetNsxtSwitchConfig(val OptNsxtSwitchConfig) {
	s.NsxtSwitchConfig = val
}

// SetInventoryMismatchInfo sets the value of InventoryMismatchInfo.
func (s *VdsConfiguration) SetInventoryMismatchInfo(val []InventoryMismatchInfo) {
	s.InventoryMismatchInfo = val
}

// SetUplinks sets the value of Uplinks.
func (s *VdsConfiguration) SetUplinks(val []string) {
	s.Uplinks = val
}

// SetMtu sets the value of Mtu.
func (s *VdsConfiguration) SetMtu(val OptInt32) {
	s.Mtu = val
}

// This specification contains the details of vSphere Distributed Switch to be imported to the
// inventory.
// Ref: #/components/schemas/VdsDetail
type VdsDetail struct {
	// VSphere Distributed Switch name.
	VdsName string `json:"vdsName"`
}

// GetVdsName returns the value of VdsName.
func (s *VdsDetail) GetVdsName() string {
	return s.VdsName
}

// SetVdsName sets the value of VdsName.
func (s *VdsDetail) SetVdsName(val string) {
	s.VdsName = val
}

// This specification contains vSphere distributed switch configurations.
// Ref: #/components/schemas/VdsSpec
type VdsSpec struct {
	// VSphere Distributed Switch name.
	Name string `json:"name"`
	// Boolean to identify if the vSphere distributed switch is used by NSX. This property is deprecated
	// in favor of nsxtSwitchConfig field.
	//
	// Deprecated: schema marks this property as deprecated.
	IsUsedByNsxt     OptBool             `json:"isUsedByNsxt"`
	NsxtSwitchConfig OptNsxtSwitchConfig `json:"nsxtSwitchConfig"`
	// List of portgroups to be associated with the vSphere Distributed Switch.
	PortGroupSpecs []PortgroupSpec `json:"portGroupSpecs"`
	// List of Network I/O Control Bandwidth Allocations for System Traffic
	// Based on shares, reservation, and limit, you can configure Network I/O Control to allocate certain
	// amount of
	// bandwidth for traffic generated by vSphere Fault Tolerance, iSCSI storage, vSphere vMotion, and so
	// on.
	// You can use Network I/O Control on a distributed switch to configure bandwidth allocation for the
	// traffic
	// that is related to the main system features in vSphere.
	NiocBandwidthAllocationSpecs []NiocBandwidthAllocationSpec `json:"niocBandwidthAllocationSpecs"`
	// The maximum transmission unit (MTU) configured for the uplinks.
	Mtu OptInt32 `json:"mtu"`
}

// GetName returns the value of Name.
func (s *VdsSpec) GetName() string {
	return s.Name
}

// GetIsUsedByNsxt returns the value of IsUsedByNsxt.
func (s *VdsSpec) GetIsUsedByNsxt() OptBool {
	return s.IsUsedByNsxt
}

// GetNsxtSwitchConfig returns the value of NsxtSwitchConfig.
func (s *VdsSpec) GetNsxtSwitchConfig() OptNsxtSwitchConfig {
	return s.NsxtSwitchConfig
}

// GetPortGroupSpecs returns the value of PortGroupSpecs.
func (s *VdsSpec) GetPortGroupSpecs() []PortgroupSpec {
	return s.PortGroupSpecs
}

// GetNiocBandwidthAllocationSpecs returns the value of NiocBandwidthAllocationSpecs.
func (s *VdsSpec) GetNiocBandwidthAllocationSpecs() []NiocBandwidthAllocationSpec {
	return s.NiocBandwidthAllocationSpecs
}

// GetMtu returns the value of Mtu.
func (s *VdsSpec) GetMtu() OptInt32 {
	return s.Mtu
}

// SetName sets the value of Name.
func (s *VdsSpec) SetName(val string) {
	s.Name = val
}

// SetIsUsedByNsxt sets the value of IsUsedByNsxt.
func (s *VdsSpec) SetIsUsedByNsxt(val OptBool) {
	s.IsUsedByNsxt = val
}

// SetNsxtSwitchConfig sets the value of NsxtSwitchConfig.
func (s *VdsSpec) SetNsxtSwitchConfig(val OptNsxtSwitchConfig) {
	s.NsxtSwitchConfig = val
}

// SetPortGroupSpecs sets the value of PortGroupSpecs.
func (s *VdsSpec) SetPortGroupSpecs(val []PortgroupSpec) {
	s.PortGroupSpecs = val
}

// SetNiocBandwidthAllocationSpecs sets the value of NiocBandwidthAllocationSpecs.
func (s *VdsSpec) SetNiocBandwidthAllocationSpecs(val []NiocBandwidthAllocationSpec) {
	s.NiocBandwidthAllocationSpecs = val
}

// SetMtu sets the value of Mtu.
func (s *VdsSpec) SetMtu(val OptInt32) {
	s.Mtu = val
}

// The map of vSphere Distributed Switch uplinks to the NSX switch uplinks.
// Ref: #/components/schemas/VdsUplinkToNsxUplinkConfiguration
type VdsUplinkToNsxUplinkConfiguration struct {
	// The uplink name of the vSphere Distributed Switch.
	VdsUplinkName OptString `json:"vdsUplinkName"`
	// The uplink name of the NSX switch.
	NsxUplinkName OptString `json:"nsxUplinkName"`
}

// GetVdsUplinkName returns the value of VdsUplinkName.
func (s *VdsUplinkToNsxUplinkConfiguration) GetVdsUplinkName() OptString {
	return s.VdsUplinkName
}

// GetNsxUplinkName returns the value of NsxUplinkName.
func (s *VdsUplinkToNsxUplinkConfiguration) GetNsxUplinkName() OptString {
	return s.NsxUplinkName
}

// SetVdsUplinkName sets the value of VdsUplinkName.
func (s *VdsUplinkToNsxUplinkConfiguration) SetVdsUplinkName(val OptString) {
	s.VdsUplinkName = val
}

// SetNsxUplinkName sets the value of NsxUplinkName.
func (s *VdsUplinkToNsxUplinkConfiguration) SetNsxUplinkName(val OptString) {
	s.NsxUplinkName = val
}

// ESX Quick Patch compatible source image version details.
// Ref: #/components/schemas/Version
type Version struct {
	// Source Image full version.
	Version string `json:"version"`
	// Source Image display version.
	DisplayVersion string `json:"displayVersion"`
}

// GetVersion returns the value of Version.
func (s *Version) GetVersion() string {
	return s.Version
}

// GetDisplayVersion returns the value of DisplayVersion.
func (s *Version) GetDisplayVersion() string {
	return s.DisplayVersion
}

// SetVersion sets the value of Version.
func (s *Version) SetVersion(val string) {
	s.Version = val
}

// SetDisplayVersion sets the value of DisplayVersion.
func (s *Version) SetDisplayVersion(val string) {
	s.DisplayVersion = val
}

// Version Alias representation.
// Ref: #/components/schemas/VersionAliasesForBundleComponentType
type VersionAliasesForBundleComponentType struct {
	// Bundle Component Type.
	BundleComponentType string `json:"bundleComponentType"`
	// Version Aliases.
	VersionAliases []BaseAlias `json:"versionAliases"`
}

// GetBundleComponentType returns the value of BundleComponentType.
func (s *VersionAliasesForBundleComponentType) GetBundleComponentType() string {
	return s.BundleComponentType
}

// GetVersionAliases returns the value of VersionAliases.
func (s *VersionAliasesForBundleComponentType) GetVersionAliases() []BaseAlias {
	return s.VersionAliases
}

// SetBundleComponentType sets the value of BundleComponentType.
func (s *VersionAliasesForBundleComponentType) SetBundleComponentType(val string) {
	s.BundleComponentType = val
}

// SetVersionAliases sets the value of VersionAliases.
func (s *VersionAliasesForBundleComponentType) SetVersionAliases(val []BaseAlias) {
	s.VersionAliases = val
}

// Version Alias Configuration Specification.
// Ref: #/components/schemas/VersionAliasesForBundleComponentTypeSpec
type VersionAliasesForBundleComponentTypeSpec struct {
	// List of version aliases for bundle component types.
	VersionAliasesForBundleComponentTypes []VersionAliasesForBundleComponentType `json:"versionAliasesForBundleComponentTypes"`
	// Flag for force update version alias configuration.
	ForceUpdate OptBool `json:"forceUpdate"`
	// If this field is set, LCM will calculate and update version aliases based on current deployment
	// VCF version and the provided target VCF version.
	TargetVcfVersion OptString `json:"targetVcfVersion"`
}

// GetVersionAliasesForBundleComponentTypes returns the value of VersionAliasesForBundleComponentTypes.
func (s *VersionAliasesForBundleComponentTypeSpec) GetVersionAliasesForBundleComponentTypes() []VersionAliasesForBundleComponentType {
	return s.VersionAliasesForBundleComponentTypes
}

// GetForceUpdate returns the value of ForceUpdate.
func (s *VersionAliasesForBundleComponentTypeSpec) GetForceUpdate() OptBool {
	return s.ForceUpdate
}

// GetTargetVcfVersion returns the value of TargetVcfVersion.
func (s *VersionAliasesForBundleComponentTypeSpec) GetTargetVcfVersion() OptString {
	return s.TargetVcfVersion
}

// SetVersionAliasesForBundleComponentTypes sets the value of VersionAliasesForBundleComponentTypes.
func (s *VersionAliasesForBundleComponentTypeSpec) SetVersionAliasesForBundleComponentTypes(val []VersionAliasesForBundleComponentType) {
	s.VersionAliasesForBundleComponentTypes = val
}

// SetForceUpdate sets the value of ForceUpdate.
func (s *VersionAliasesForBundleComponentTypeSpec) SetForceUpdate(val OptBool) {
	s.ForceUpdate = val
}

// SetTargetVcfVersion sets the value of TargetVcfVersion.
func (s *VersionAliasesForBundleComponentTypeSpec) SetTargetVcfVersion(val OptString) {
	s.TargetVcfVersion = val
}

// Represents the version applicability of a Configuration Drift for a product.
// Ref: #/components/schemas/VersionApplicability
type VersionApplicability struct {
	// Product type.
	ProductType OptString `json:"productType"`
	// The minimum version for current product to apply current Configuration Drift.
	MinVersion OptString `json:"minVersion"`
	// The maximum version for current product to apply current Configuration Drift.
	MaxVersion OptString `json:"maxVersion"`
}

// GetProductType returns the value of ProductType.
func (s *VersionApplicability) GetProductType() OptString {
	return s.ProductType
}

// GetMinVersion returns the value of MinVersion.
func (s *VersionApplicability) GetMinVersion() OptString {
	return s.MinVersion
}

// GetMaxVersion returns the value of MaxVersion.
func (s *VersionApplicability) GetMaxVersion() OptString {
	return s.MaxVersion
}

// SetProductType sets the value of ProductType.
func (s *VersionApplicability) SetProductType(val OptString) {
	s.ProductType = val
}

// SetMinVersion sets the value of MinVersion.
func (s *VersionApplicability) SetMinVersion(val OptString) {
	s.MinVersion = val
}

// SetMaxVersion sets the value of MaxVersion.
func (s *VersionApplicability) SetMaxVersion(val OptString) {
	s.MaxVersion = val
}

// This specification contains vmnic configurations for vSphere host.
// Ref: #/components/schemas/VmNic
type VmNic struct {
	// VmNic ID of vSphere host to be associated with VDS, once added to cluster.
	ID string `json:"id"`
	// VDS name to associate with vSphere host. VDS name must match the cluster's VDS name.
	VdsName string `json:"vdsName"`
	// This flag determines if the vmnic must be on N-VDS. Set this to true for a vmnic that will be
	// moved to N-VDS.
	MoveToNvds OptBool `json:"moveToNvds"`
	// Uplink to be associated with vmnic.
	Uplink OptString `json:"uplink"`
}

// GetID returns the value of ID.
func (s *VmNic) GetID() string {
	return s.ID
}

// GetVdsName returns the value of VdsName.
func (s *VmNic) GetVdsName() string {
	return s.VdsName
}

// GetMoveToNvds returns the value of MoveToNvds.
func (s *VmNic) GetMoveToNvds() OptBool {
	return s.MoveToNvds
}

// GetUplink returns the value of Uplink.
func (s *VmNic) GetUplink() OptString {
	return s.Uplink
}

// SetID sets the value of ID.
func (s *VmNic) SetID(val string) {
	s.ID = val
}

// SetVdsName sets the value of VdsName.
func (s *VmNic) SetVdsName(val string) {
	s.VdsName = val
}

// SetMoveToNvds sets the value of MoveToNvds.
func (s *VmNic) SetMoveToNvds(val OptBool) {
	s.MoveToNvds = val
}

// SetUplink sets the value of Uplink.
func (s *VmNic) SetUplink(val OptString) {
	s.Uplink = val
}

// Cluster storage configuration for VMFS.
// Ref: #/components/schemas/VmfsDatastoreSpec
type VmfsDatastoreSpec struct {
	// Cluster storage configuration for VMFS on FC.
	FcSpec []FcSpec `json:"fcSpec"`
}

// GetFcSpec returns the value of FcSpec.
func (s *VmfsDatastoreSpec) GetFcSpec() []FcSpec {
	return s.FcSpec
}

// SetFcSpec sets the value of FcSpec.
func (s *VmfsDatastoreSpec) SetFcSpec(val []FcSpec) {
	s.FcSpec = val
}

// This specification contains vmnic to uplink configurations for vSphere host.
// Ref: #/components/schemas/VmnicToUplink
type VmnicToUplink struct {
	// VmNic ID of vSphere host to be associated with VDS, once added to cluster.
	ID string `json:"id"`
	// The uplink name of the vSphere Distributed Switch to be associated.
	Uplink string `json:"uplink"`
}

// GetID returns the value of ID.
func (s *VmnicToUplink) GetID() string {
	return s.ID
}

// GetUplink returns the value of Uplink.
func (s *VmnicToUplink) GetUplink() string {
	return s.Uplink
}

// SetID sets the value of ID.
func (s *VmnicToUplink) SetID(val string) {
	s.ID = val
}

// SetUplink sets the value of Uplink.
func (s *VmnicToUplink) SetUplink(val string) {
	s.Uplink = val
}

// Spec contains parameters of a VMware Aria Automation instance.
// Ref: #/components/schemas/Vra
type Vra struct {
	// The ID of the VMware Aria Automation instance.
	ID OptString `json:"id"`
	// The version of the VMware Aria Automation instance.
	Version OptString `json:"version"`
	// The Fully Qualified Domain Name of the VMware Aria Automation load balancer.
	LoadBalancerFqdn OptString `json:"loadBalancerFqdn"`
	// The IP address of the VMware Aria Automation load balancer.
	LoadBalancerIpAddress OptString `json:"loadBalancerIpAddress"`
	// The status of the VMware Aria Automation instance.
	Status OptString `json:"status"`
	// The nodes of the VMware Aria Automation instance.
	Nodes []VrealizeProductNode `json:"nodes"`
}

// GetID returns the value of ID.
func (s *Vra) GetID() OptString {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *Vra) GetVersion() OptString {
	return s.Version
}

// GetLoadBalancerFqdn returns the value of LoadBalancerFqdn.
func (s *Vra) GetLoadBalancerFqdn() OptString {
	return s.LoadBalancerFqdn
}

// GetLoadBalancerIpAddress returns the value of LoadBalancerIpAddress.
func (s *Vra) GetLoadBalancerIpAddress() OptString {
	return s.LoadBalancerIpAddress
}

// GetStatus returns the value of Status.
func (s *Vra) GetStatus() OptString {
	return s.Status
}

// GetNodes returns the value of Nodes.
func (s *Vra) GetNodes() []VrealizeProductNode {
	return s.Nodes
}

// SetID sets the value of ID.
func (s *Vra) SetID(val OptString) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *Vra) SetVersion(val OptString) {
	s.Version = val
}

// SetLoadBalancerFqdn sets the value of LoadBalancerFqdn.
func (s *Vra) SetLoadBalancerFqdn(val OptString) {
	s.LoadBalancerFqdn = val
}

// SetLoadBalancerIpAddress sets the value of LoadBalancerIpAddress.
func (s *Vra) SetLoadBalancerIpAddress(val OptString) {
	s.LoadBalancerIpAddress = val
}

// SetStatus sets the value of Status.
func (s *Vra) SetStatus(val OptString) {
	s.Status = val
}

// SetNodes sets the value of Nodes.
func (s *Vra) SetNodes(val []VrealizeProductNode) {
	s.Nodes = val
}

// Spec contains information for a VMware Aria product node.
// Ref: #/components/schemas/VrealizeProductNode
type VrealizeProductNode struct {
	// The ID of the node.
	ID OptString `json:"id"`
	// The Fully Qualified Domain Name for the VMware Aria node (virtual appliance).
	Fqdn string `json:"fqdn"`
	// The type of the VMware Aria product node.
	Type OptVrealizeProductNodeType `json:"type"`
	// IP Address of VMware Aria product appliance.
	IpAddress string `json:"ipAddress"`
}

// GetID returns the value of ID.
func (s *VrealizeProductNode) GetID() OptString {
	return s.ID
}

// GetFqdn returns the value of Fqdn.
func (s *VrealizeProductNode) GetFqdn() string {
	return s.Fqdn
}

// GetType returns the value of Type.
func (s *VrealizeProductNode) GetType() OptVrealizeProductNodeType {
	return s.Type
}

// GetIpAddress returns the value of IpAddress.
func (s *VrealizeProductNode) GetIpAddress() string {
	return s.IpAddress
}

// SetID sets the value of ID.
func (s *VrealizeProductNode) SetID(val OptString) {
	s.ID = val
}

// SetFqdn sets the value of Fqdn.
func (s *VrealizeProductNode) SetFqdn(val string) {
	s.Fqdn = val
}

// SetType sets the value of Type.
func (s *VrealizeProductNode) SetType(val OptVrealizeProductNodeType) {
	s.Type = val
}

// SetIpAddress sets the value of IpAddress.
func (s *VrealizeProductNode) SetIpAddress(val string) {
	s.IpAddress = val
}

// The type of the VMware Aria product node.
type VrealizeProductNodeType string

const (
	VrealizeProductNodeTypeMASTER          VrealizeProductNodeType = "MASTER"
	VrealizeProductNodeTypeREPLICA         VrealizeProductNodeType = "REPLICA"
	VrealizeProductNodeTypeDATA            VrealizeProductNodeType = "DATA"
	VrealizeProductNodeTypeREMOTECOLLECTOR VrealizeProductNodeType = "REMOTE_COLLECTOR"
	VrealizeProductNodeTypeWORKER          VrealizeProductNodeType = "WORKER"
)

// AllValues returns all VrealizeProductNodeType values.
func (VrealizeProductNodeType) AllValues() []VrealizeProductNodeType {
	return []VrealizeProductNodeType{
		VrealizeProductNodeTypeMASTER,
		VrealizeProductNodeTypeREPLICA,
		VrealizeProductNodeTypeDATA,
		VrealizeProductNodeTypeREMOTECOLLECTOR,
		VrealizeProductNodeTypeWORKER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VrealizeProductNodeType) MarshalText() ([]byte, error) {
	switch s {
	case VrealizeProductNodeTypeMASTER:
		return []byte(s), nil
	case VrealizeProductNodeTypeREPLICA:
		return []byte(s), nil
	case VrealizeProductNodeTypeDATA:
		return []byte(s), nil
	case VrealizeProductNodeTypeREMOTECOLLECTOR:
		return []byte(s), nil
	case VrealizeProductNodeTypeWORKER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VrealizeProductNodeType) UnmarshalText(data []byte) error {
	switch VrealizeProductNodeType(data) {
	case VrealizeProductNodeTypeMASTER:
		*s = VrealizeProductNodeTypeMASTER
		return nil
	case VrealizeProductNodeTypeREPLICA:
		*s = VrealizeProductNodeTypeREPLICA
		return nil
	case VrealizeProductNodeTypeDATA:
		*s = VrealizeProductNodeTypeDATA
		return nil
	case VrealizeProductNodeTypeREMOTECOLLECTOR:
		*s = VrealizeProductNodeTypeREMOTECOLLECTOR
		return nil
	case VrealizeProductNodeTypeWORKER:
		*s = VrealizeProductNodeTypeWORKER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Spec contains parameters of a VMware Aria Operations for Logs instance.
// Ref: #/components/schemas/Vrli
type Vrli struct {
	// The ID of the VMware Aria Operations for Logs instance.
	ID OptString `json:"id"`
	// The version of the VMware Aria Operations for Logs instance.
	Version OptString `json:"version"`
	// The Fully Qualified Domain Name of the VMware Aria Operations for Logs load balancer.
	LoadBalancerFqdn OptString `json:"loadBalancerFqdn"`
	// The IP address of the VMware Aria Operations for Logs load balancer.
	LoadBalancerIpAddress OptString `json:"loadBalancerIpAddress"`
	// The status of the VMware Aria Operations for Logs instance.
	Status OptString `json:"status"`
	// The nodes of the VMware Aria Operations for Logs instance.
	Nodes []VrealizeProductNode `json:"nodes"`
}

// GetID returns the value of ID.
func (s *Vrli) GetID() OptString {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *Vrli) GetVersion() OptString {
	return s.Version
}

// GetLoadBalancerFqdn returns the value of LoadBalancerFqdn.
func (s *Vrli) GetLoadBalancerFqdn() OptString {
	return s.LoadBalancerFqdn
}

// GetLoadBalancerIpAddress returns the value of LoadBalancerIpAddress.
func (s *Vrli) GetLoadBalancerIpAddress() OptString {
	return s.LoadBalancerIpAddress
}

// GetStatus returns the value of Status.
func (s *Vrli) GetStatus() OptString {
	return s.Status
}

// GetNodes returns the value of Nodes.
func (s *Vrli) GetNodes() []VrealizeProductNode {
	return s.Nodes
}

// SetID sets the value of ID.
func (s *Vrli) SetID(val OptString) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *Vrli) SetVersion(val OptString) {
	s.Version = val
}

// SetLoadBalancerFqdn sets the value of LoadBalancerFqdn.
func (s *Vrli) SetLoadBalancerFqdn(val OptString) {
	s.LoadBalancerFqdn = val
}

// SetLoadBalancerIpAddress sets the value of LoadBalancerIpAddress.
func (s *Vrli) SetLoadBalancerIpAddress(val OptString) {
	s.LoadBalancerIpAddress = val
}

// SetStatus sets the value of Status.
func (s *Vrli) SetStatus(val OptString) {
	s.Status = val
}

// SetNodes sets the value of Nodes.
func (s *Vrli) SetNodes(val []VrealizeProductNode) {
	s.Nodes = val
}

// This specification contains information related to the existing VMware Aria Operations instance
// deployment.
// Ref: #/components/schemas/Vrops
type Vrops struct {
	// The ID of the VMware Aria Operations instance.
	ID string `json:"id"`
	// The version of the VMware Aria Operations instance.
	Version string `json:"version"`
	// The nodes of the VMware Aria Operations instance.
	Nodes []VropsNode `json:"nodes"`
	// Fully Qualified Domain Name for the VMware Aria Operations load balancer.
	LoadBalancerFqdn string `json:"loadBalancerFqdn"`
	// IP for the VMware Aria Operations load balancer.
	LoadBalancerIp string `json:"loadBalancerIp"`
	// The state of the current product instance.
	Status string `json:"status"`
}

// GetID returns the value of ID.
func (s *Vrops) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *Vrops) GetVersion() string {
	return s.Version
}

// GetNodes returns the value of Nodes.
func (s *Vrops) GetNodes() []VropsNode {
	return s.Nodes
}

// GetLoadBalancerFqdn returns the value of LoadBalancerFqdn.
func (s *Vrops) GetLoadBalancerFqdn() string {
	return s.LoadBalancerFqdn
}

// GetLoadBalancerIp returns the value of LoadBalancerIp.
func (s *Vrops) GetLoadBalancerIp() string {
	return s.LoadBalancerIp
}

// GetStatus returns the value of Status.
func (s *Vrops) GetStatus() string {
	return s.Status
}

// SetID sets the value of ID.
func (s *Vrops) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *Vrops) SetVersion(val string) {
	s.Version = val
}

// SetNodes sets the value of Nodes.
func (s *Vrops) SetNodes(val []VropsNode) {
	s.Nodes = val
}

// SetLoadBalancerFqdn sets the value of LoadBalancerFqdn.
func (s *Vrops) SetLoadBalancerFqdn(val string) {
	s.LoadBalancerFqdn = val
}

// SetLoadBalancerIp sets the value of LoadBalancerIp.
func (s *Vrops) SetLoadBalancerIp(val string) {
	s.LoadBalancerIp = val
}

// SetStatus sets the value of Status.
func (s *Vrops) SetStatus(val string) {
	s.Status = val
}

// Spec contains information for a VMware Aria product node.
// Ref: #/components/schemas/VropsNode
type VropsNode struct {
	// The username for a root user of VMware Aria appliance.
	Username OptString `json:"username"`
	// The password for a root user of VMware Aria appliance.
	Password OptString `json:"password"`
	// The status of the VMware Aria product node.
	Status string `json:"status"`
	// The ID of the node.
	ID OptString `json:"id"`
	// The Fully Qualified Domain Name for the VMware Aria node (virtual appliance).
	Fqdn string `json:"fqdn"`
	// The type of the VMware Aria product node.
	Type OptVropsNodeType `json:"type"`
	// IP Address of VMware Aria product appliance.
	IpAddress string `json:"ipAddress"`
}

// GetUsername returns the value of Username.
func (s *VropsNode) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *VropsNode) GetPassword() OptString {
	return s.Password
}

// GetStatus returns the value of Status.
func (s *VropsNode) GetStatus() string {
	return s.Status
}

// GetID returns the value of ID.
func (s *VropsNode) GetID() OptString {
	return s.ID
}

// GetFqdn returns the value of Fqdn.
func (s *VropsNode) GetFqdn() string {
	return s.Fqdn
}

// GetType returns the value of Type.
func (s *VropsNode) GetType() OptVropsNodeType {
	return s.Type
}

// GetIpAddress returns the value of IpAddress.
func (s *VropsNode) GetIpAddress() string {
	return s.IpAddress
}

// SetUsername sets the value of Username.
func (s *VropsNode) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *VropsNode) SetPassword(val OptString) {
	s.Password = val
}

// SetStatus sets the value of Status.
func (s *VropsNode) SetStatus(val string) {
	s.Status = val
}

// SetID sets the value of ID.
func (s *VropsNode) SetID(val OptString) {
	s.ID = val
}

// SetFqdn sets the value of Fqdn.
func (s *VropsNode) SetFqdn(val string) {
	s.Fqdn = val
}

// SetType sets the value of Type.
func (s *VropsNode) SetType(val OptVropsNodeType) {
	s.Type = val
}

// SetIpAddress sets the value of IpAddress.
func (s *VropsNode) SetIpAddress(val string) {
	s.IpAddress = val
}

// The type of the VMware Aria product node.
type VropsNodeType string

const (
	VropsNodeTypeMASTER          VropsNodeType = "MASTER"
	VropsNodeTypeREPLICA         VropsNodeType = "REPLICA"
	VropsNodeTypeDATA            VropsNodeType = "DATA"
	VropsNodeTypeREMOTECOLLECTOR VropsNodeType = "REMOTE_COLLECTOR"
	VropsNodeTypeWORKER          VropsNodeType = "WORKER"
)

// AllValues returns all VropsNodeType values.
func (VropsNodeType) AllValues() []VropsNodeType {
	return []VropsNodeType{
		VropsNodeTypeMASTER,
		VropsNodeTypeREPLICA,
		VropsNodeTypeDATA,
		VropsNodeTypeREMOTECOLLECTOR,
		VropsNodeTypeWORKER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VropsNodeType) MarshalText() ([]byte, error) {
	switch s {
	case VropsNodeTypeMASTER:
		return []byte(s), nil
	case VropsNodeTypeREPLICA:
		return []byte(s), nil
	case VropsNodeTypeDATA:
		return []byte(s), nil
	case VropsNodeTypeREMOTECOLLECTOR:
		return []byte(s), nil
	case VropsNodeTypeWORKER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VropsNodeType) UnmarshalText(data []byte) error {
	switch VropsNodeType(data) {
	case VropsNodeTypeMASTER:
		*s = VropsNodeTypeMASTER
		return nil
	case VropsNodeTypeREPLICA:
		*s = VropsNodeTypeREPLICA
		return nil
	case VropsNodeTypeDATA:
		*s = VropsNodeTypeDATA
		return nil
	case VropsNodeTypeREMOTECOLLECTOR:
		*s = VropsNodeTypeREMOTECOLLECTOR
		return nil
	case VropsNodeTypeWORKER:
		*s = VropsNodeTypeWORKER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// This specification contains information related to the existing VMware Aria Suite Lifecycle
// instance deployment.
// Ref: #/components/schemas/Vrslcm
type Vrslcm struct {
	// The ID of the VMware Aria Suite Lifecycle Manager instance.
	ID string `json:"id"`
	// Fully Qualified Domain Name.
	Fqdn string `json:"fqdn"`
	// IP Address of VMware Aria Suite Lifecycle Manager appliance.
	IpAddress string `json:"ipAddress"`
	// Version of the product that is currently running on the environment.
	Version string `json:"version"`
	// The state of the current product instance.
	Status string `json:"status"`
}

// GetID returns the value of ID.
func (s *Vrslcm) GetID() string {
	return s.ID
}

// GetFqdn returns the value of Fqdn.
func (s *Vrslcm) GetFqdn() string {
	return s.Fqdn
}

// GetIpAddress returns the value of IpAddress.
func (s *Vrslcm) GetIpAddress() string {
	return s.IpAddress
}

// GetVersion returns the value of Version.
func (s *Vrslcm) GetVersion() string {
	return s.Version
}

// GetStatus returns the value of Status.
func (s *Vrslcm) GetStatus() string {
	return s.Status
}

// SetID sets the value of ID.
func (s *Vrslcm) SetID(val string) {
	s.ID = val
}

// SetFqdn sets the value of Fqdn.
func (s *Vrslcm) SetFqdn(val string) {
	s.Fqdn = val
}

// SetIpAddress sets the value of IpAddress.
func (s *Vrslcm) SetIpAddress(val string) {
	s.IpAddress = val
}

// SetVersion sets the value of Version.
func (s *Vrslcm) SetVersion(val string) {
	s.Version = val
}

// SetStatus sets the value of Status.
func (s *Vrslcm) SetStatus(val string) {
	s.Status = val
}

func (*Vrslcm) getVrslcmRes() {}

// VMware Aria Suite Lifecycle Deployment Specification.
// Ref: #/components/schemas/VrslcmDeploymentSpec
type VrslcmDeploymentSpec struct {
	// Fully Qualified Domain Name.
	Fqdn string `json:"fqdn"`
	// The password for a root user of VMware Aria Suite Lifecycle appliance.
	SshPassword string `json:"sshPassword"`
	// The password for an admin API/UI user of VMware Aria Suite Lifecycle.
	ApiPassword string `json:"apiPassword"`
	// The IP to use for deploying a new standalone Tier-1 router in NSX. This router will be used
	// subsequently for VMware Aria load balancers.
	NsxtStandaloneTier1Ip string `json:"nsxtStandaloneTier1Ip"`
}

// GetFqdn returns the value of Fqdn.
func (s *VrslcmDeploymentSpec) GetFqdn() string {
	return s.Fqdn
}

// GetSshPassword returns the value of SshPassword.
func (s *VrslcmDeploymentSpec) GetSshPassword() string {
	return s.SshPassword
}

// GetApiPassword returns the value of ApiPassword.
func (s *VrslcmDeploymentSpec) GetApiPassword() string {
	return s.ApiPassword
}

// GetNsxtStandaloneTier1Ip returns the value of NsxtStandaloneTier1Ip.
func (s *VrslcmDeploymentSpec) GetNsxtStandaloneTier1Ip() string {
	return s.NsxtStandaloneTier1Ip
}

// SetFqdn sets the value of Fqdn.
func (s *VrslcmDeploymentSpec) SetFqdn(val string) {
	s.Fqdn = val
}

// SetSshPassword sets the value of SshPassword.
func (s *VrslcmDeploymentSpec) SetSshPassword(val string) {
	s.SshPassword = val
}

// SetApiPassword sets the value of ApiPassword.
func (s *VrslcmDeploymentSpec) SetApiPassword(val string) {
	s.ApiPassword = val
}

// SetNsxtStandaloneTier1Ip sets the value of NsxtStandaloneTier1Ip.
func (s *VrslcmDeploymentSpec) SetNsxtStandaloneTier1Ip(val string) {
	s.NsxtStandaloneTier1Ip = val
}

// This specification contains information about the current status of certain (i.e. rollback,
// deployment) operation for VMware Aria Suite Lifecycle.
// Ref: #/components/schemas/VrslcmOperationStatus
type VrslcmOperationStatus struct {
	// Unique name identifier of the supported VMware Aria Suite Lifecycle operation.
	Name string `json:"name"`
	// The status of the operation for VMware Aria Suite Lifecycle in SDDC Manager.
	OperationState string `json:"operationState"`
	// Code used to describe if operation is not available (in error state).
	ErrorCode OptString `json:"errorCode"`
	// Message representing the outcome of the last VMware Aria Suite Lifecycle operation.
	Message OptString `json:"message"`
}

// GetName returns the value of Name.
func (s *VrslcmOperationStatus) GetName() string {
	return s.Name
}

// GetOperationState returns the value of OperationState.
func (s *VrslcmOperationStatus) GetOperationState() string {
	return s.OperationState
}

// GetErrorCode returns the value of ErrorCode.
func (s *VrslcmOperationStatus) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetMessage returns the value of Message.
func (s *VrslcmOperationStatus) GetMessage() OptString {
	return s.Message
}

// SetName sets the value of Name.
func (s *VrslcmOperationStatus) SetName(val string) {
	s.Name = val
}

// SetOperationState sets the value of OperationState.
func (s *VrslcmOperationStatus) SetOperationState(val string) {
	s.OperationState = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *VrslcmOperationStatus) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetMessage sets the value of Message.
func (s *VrslcmOperationStatus) SetMessage(val OptString) {
	s.Message = val
}

// This specification contains information about the current status of VMware Aria Suite Lifecycle
// deployment.
// Ref: #/components/schemas/VrslcmStatus
type VrslcmStatus struct {
	// The overall status of the VMware Aria Suite Lifecycle deployment.
	State string `json:"state"`
	// A list that represent the states of the executable operations in SDDC Manager (i.e. 'deploy' and
	// 'rollback').
	Operations []VrslcmOperationStatus `json:"operations"`
}

// GetState returns the value of State.
func (s *VrslcmStatus) GetState() string {
	return s.State
}

// GetOperations returns the value of Operations.
func (s *VrslcmStatus) GetOperations() []VrslcmOperationStatus {
	return s.Operations
}

// SetState sets the value of State.
func (s *VrslcmStatus) SetState(val string) {
	s.State = val
}

// SetOperations sets the value of Operations.
func (s *VrslcmStatus) SetOperations(val []VrslcmOperationStatus) {
	s.Operations = val
}

func (*VrslcmStatus) getVrslcmStatusRes() {}

// This specification contains cluster storage configuration for vSAN.
// Ref: #/components/schemas/VsanDatastoreSpec
type VsanDatastoreSpec struct {
	// Datastore name used for cluster creation.
	DatastoreName string `json:"datastoreName"`
	// Number of vSphere host failures to tolerate in the vSAN cluster. This field is required for vSAN
	// OSA configuration.
	FailuresToTolerate OptInt32 `json:"failuresToTolerate"`
	// License key for the vSAN data store to be applied in vCenter.
	LicenseKey OptString `json:"licenseKey"`
	// Enable vSAN deduplication and compression. This features is only available for clusters in which
	// the hosts are all-flash.
	DedupAndCompressionEnabled OptBool      `json:"dedupAndCompressionEnabled"`
	EsaConfig                  OptEsaConfig `json:"esaConfig"`
}

// GetDatastoreName returns the value of DatastoreName.
func (s *VsanDatastoreSpec) GetDatastoreName() string {
	return s.DatastoreName
}

// GetFailuresToTolerate returns the value of FailuresToTolerate.
func (s *VsanDatastoreSpec) GetFailuresToTolerate() OptInt32 {
	return s.FailuresToTolerate
}

// GetLicenseKey returns the value of LicenseKey.
func (s *VsanDatastoreSpec) GetLicenseKey() OptString {
	return s.LicenseKey
}

// GetDedupAndCompressionEnabled returns the value of DedupAndCompressionEnabled.
func (s *VsanDatastoreSpec) GetDedupAndCompressionEnabled() OptBool {
	return s.DedupAndCompressionEnabled
}

// GetEsaConfig returns the value of EsaConfig.
func (s *VsanDatastoreSpec) GetEsaConfig() OptEsaConfig {
	return s.EsaConfig
}

// SetDatastoreName sets the value of DatastoreName.
func (s *VsanDatastoreSpec) SetDatastoreName(val string) {
	s.DatastoreName = val
}

// SetFailuresToTolerate sets the value of FailuresToTolerate.
func (s *VsanDatastoreSpec) SetFailuresToTolerate(val OptInt32) {
	s.FailuresToTolerate = val
}

// SetLicenseKey sets the value of LicenseKey.
func (s *VsanDatastoreSpec) SetLicenseKey(val OptString) {
	s.LicenseKey = val
}

// SetDedupAndCompressionEnabled sets the value of DedupAndCompressionEnabled.
func (s *VsanDatastoreSpec) SetDedupAndCompressionEnabled(val OptBool) {
	s.DedupAndCompressionEnabled = val
}

// SetEsaConfig sets the value of EsaConfig.
func (s *VsanDatastoreSpec) SetEsaConfig(val OptEsaConfig) {
	s.EsaConfig = val
}

// This spec contains cluster vSAN ESA configuration.
// Ref: #/components/schemas/VsanEsaConfig
type VsanEsaConfig struct {
	// Whether the vSAN ESA is enabled.
	Enabled OptBool `json:"enabled"`
}

// GetEnabled returns the value of Enabled.
func (s *VsanEsaConfig) GetEnabled() OptBool {
	return s.Enabled
}

// SetEnabled sets the value of Enabled.
func (s *VsanEsaConfig) SetEnabled(val OptBool) {
	s.Enabled = val
}

// Represents attributes of vSAN HCL data.
// Ref: #/components/schemas/VsanHclAttributes
type VsanHclAttributes struct {
	// Timestamp of vSAN HCL data (in seconds) from remote vSAN HCL service as determined by periodic
	// polling.
	RemoteDataTimestamp int64 `json:"remoteDataTimestamp"`
	// Timestamp of vSAN HCL data (in seconds) saved on SDDC Manager.
	LocalDataTimestamp int64 `json:"localDataTimestamp"`
	// Details of last error in case of failure in updating vSAN HCL data on SDDC Manager.
	LastError OptString `json:"lastError"`
	// True if vSAN HCL data is missing on SDDC Manager.
	IsLocalDataMissing OptBool `json:"isLocalDataMissing"`
	// True if timestamp of vSAN HCL data on SDDC Manager is older than timestamp fetched via periodic
	// polling.
	IsNewDataAvailable OptBool `json:"isNewDataAvailable"`
	// True if age of vSAN HCL data on SDDC Manager is older than threshold set for warning level.
	IsWarningThresholdExceeded OptBool `json:"isWarningThresholdExceeded"`
	// True if age of vSAN HCL data on SDDC Manager is older than threshold set for error level.
	IsErrorThresholdExceeded OptBool `json:"isErrorThresholdExceeded"`
	// Last update time of vSAN HCL data in SDDC Manager.
	LocalDataTime OptString `json:"localDataTime"`
}

// GetRemoteDataTimestamp returns the value of RemoteDataTimestamp.
func (s *VsanHclAttributes) GetRemoteDataTimestamp() int64 {
	return s.RemoteDataTimestamp
}

// GetLocalDataTimestamp returns the value of LocalDataTimestamp.
func (s *VsanHclAttributes) GetLocalDataTimestamp() int64 {
	return s.LocalDataTimestamp
}

// GetLastError returns the value of LastError.
func (s *VsanHclAttributes) GetLastError() OptString {
	return s.LastError
}

// GetIsLocalDataMissing returns the value of IsLocalDataMissing.
func (s *VsanHclAttributes) GetIsLocalDataMissing() OptBool {
	return s.IsLocalDataMissing
}

// GetIsNewDataAvailable returns the value of IsNewDataAvailable.
func (s *VsanHclAttributes) GetIsNewDataAvailable() OptBool {
	return s.IsNewDataAvailable
}

// GetIsWarningThresholdExceeded returns the value of IsWarningThresholdExceeded.
func (s *VsanHclAttributes) GetIsWarningThresholdExceeded() OptBool {
	return s.IsWarningThresholdExceeded
}

// GetIsErrorThresholdExceeded returns the value of IsErrorThresholdExceeded.
func (s *VsanHclAttributes) GetIsErrorThresholdExceeded() OptBool {
	return s.IsErrorThresholdExceeded
}

// GetLocalDataTime returns the value of LocalDataTime.
func (s *VsanHclAttributes) GetLocalDataTime() OptString {
	return s.LocalDataTime
}

// SetRemoteDataTimestamp sets the value of RemoteDataTimestamp.
func (s *VsanHclAttributes) SetRemoteDataTimestamp(val int64) {
	s.RemoteDataTimestamp = val
}

// SetLocalDataTimestamp sets the value of LocalDataTimestamp.
func (s *VsanHclAttributes) SetLocalDataTimestamp(val int64) {
	s.LocalDataTimestamp = val
}

// SetLastError sets the value of LastError.
func (s *VsanHclAttributes) SetLastError(val OptString) {
	s.LastError = val
}

// SetIsLocalDataMissing sets the value of IsLocalDataMissing.
func (s *VsanHclAttributes) SetIsLocalDataMissing(val OptBool) {
	s.IsLocalDataMissing = val
}

// SetIsNewDataAvailable sets the value of IsNewDataAvailable.
func (s *VsanHclAttributes) SetIsNewDataAvailable(val OptBool) {
	s.IsNewDataAvailable = val
}

// SetIsWarningThresholdExceeded sets the value of IsWarningThresholdExceeded.
func (s *VsanHclAttributes) SetIsWarningThresholdExceeded(val OptBool) {
	s.IsWarningThresholdExceeded = val
}

// SetIsErrorThresholdExceeded sets the value of IsErrorThresholdExceeded.
func (s *VsanHclAttributes) SetIsErrorThresholdExceeded(val OptBool) {
	s.IsErrorThresholdExceeded = val
}

// SetLocalDataTime sets the value of LocalDataTime.
func (s *VsanHclAttributes) SetLocalDataTime(val OptString) {
	s.LocalDataTime = val
}

func (*VsanHclAttributes) getVsanHclAttributesRes() {}

// VSAN HCL configuration.
// Ref: #/components/schemas/VsanHclConfiguration
type VsanHclConfiguration struct {
	// Flag to indicate if auto download of vSAN HCL data is enabled or disabled.
	AutoDownloadEnabled bool `json:"autoDownloadEnabled"`
	// Duration after which vSAN HCL data will be flagged as out of date with severity as error.
	OutOfDateErrorThreshold int32 `json:"outOfDateErrorThreshold"`
	// Duration after which vSAN HCL data will be flagged as out of date with severity as warning.
	OutOfDateWarningThreshold int32 `json:"outOfDateWarningThreshold"`
	// Interval in minutes at which availability of new vSAN HCL data will be checked.
	PollingInterval int64 `json:"pollingInterval"`
	// Flag to indicate if polling for vSAN HCL data is enabled or disabled.
	PollingEnabled bool `json:"pollingEnabled"`
}

// GetAutoDownloadEnabled returns the value of AutoDownloadEnabled.
func (s *VsanHclConfiguration) GetAutoDownloadEnabled() bool {
	return s.AutoDownloadEnabled
}

// GetOutOfDateErrorThreshold returns the value of OutOfDateErrorThreshold.
func (s *VsanHclConfiguration) GetOutOfDateErrorThreshold() int32 {
	return s.OutOfDateErrorThreshold
}

// GetOutOfDateWarningThreshold returns the value of OutOfDateWarningThreshold.
func (s *VsanHclConfiguration) GetOutOfDateWarningThreshold() int32 {
	return s.OutOfDateWarningThreshold
}

// GetPollingInterval returns the value of PollingInterval.
func (s *VsanHclConfiguration) GetPollingInterval() int64 {
	return s.PollingInterval
}

// GetPollingEnabled returns the value of PollingEnabled.
func (s *VsanHclConfiguration) GetPollingEnabled() bool {
	return s.PollingEnabled
}

// SetAutoDownloadEnabled sets the value of AutoDownloadEnabled.
func (s *VsanHclConfiguration) SetAutoDownloadEnabled(val bool) {
	s.AutoDownloadEnabled = val
}

// SetOutOfDateErrorThreshold sets the value of OutOfDateErrorThreshold.
func (s *VsanHclConfiguration) SetOutOfDateErrorThreshold(val int32) {
	s.OutOfDateErrorThreshold = val
}

// SetOutOfDateWarningThreshold sets the value of OutOfDateWarningThreshold.
func (s *VsanHclConfiguration) SetOutOfDateWarningThreshold(val int32) {
	s.OutOfDateWarningThreshold = val
}

// SetPollingInterval sets the value of PollingInterval.
func (s *VsanHclConfiguration) SetPollingInterval(val int64) {
	s.PollingInterval = val
}

// SetPollingEnabled sets the value of PollingEnabled.
func (s *VsanHclConfiguration) SetPollingEnabled(val bool) {
	s.PollingEnabled = val
}

func (*VsanHclConfiguration) getVsanHclConfigurationRes() {}

// This spec contains cluster vSAN MAX configuration.
// Ref: #/components/schemas/VsanMaxConfig
type VsanMaxConfig struct {
	// Field to enable Vsan Max on the Cluster.
	EnableVsanMax OptBool `json:"enableVsanMax"`
}

// GetEnableVsanMax returns the value of EnableVsanMax.
func (s *VsanMaxConfig) GetEnableVsanMax() OptBool {
	return s.EnableVsanMax
}

// SetEnableVsanMax sets the value of EnableVsanMax.
func (s *VsanMaxConfig) SetEnableVsanMax(val OptBool) {
	s.EnableVsanMax = val
}

// VSAN remote datastore configuration for the cluster.
// Ref: #/components/schemas/VsanRemoteDatastoreClusterSpec
type VsanRemoteDatastoreClusterSpec struct {
	// List of Remote vSAN datastore configuration for vSAN compute client cluster.
	VsanRemoteDatastoreSpec []VsanRemoteDatastoreSpec `json:"vsanRemoteDatastoreSpec"`
}

// GetVsanRemoteDatastoreSpec returns the value of VsanRemoteDatastoreSpec.
func (s *VsanRemoteDatastoreClusterSpec) GetVsanRemoteDatastoreSpec() []VsanRemoteDatastoreSpec {
	return s.VsanRemoteDatastoreSpec
}

// SetVsanRemoteDatastoreSpec sets the value of VsanRemoteDatastoreSpec.
func (s *VsanRemoteDatastoreClusterSpec) SetVsanRemoteDatastoreSpec(val []VsanRemoteDatastoreSpec) {
	s.VsanRemoteDatastoreSpec = val
}

// This specification contains cluster storage configuration for vSAN.
// Ref: #/components/schemas/VsanRemoteDatastoreSpec
type VsanRemoteDatastoreSpec struct {
	// VSAN Remote Datastore UUID.
	DatastoreUuid string `json:"datastoreUuid"`
}

// GetDatastoreUuid returns the value of DatastoreUuid.
func (s *VsanRemoteDatastoreSpec) GetDatastoreUuid() string {
	return s.DatastoreUuid
}

// SetDatastoreUuid sets the value of DatastoreUuid.
func (s *VsanRemoteDatastoreSpec) SetDatastoreUuid(val string) {
	s.DatastoreUuid = val
}

// Spec contains parameters of Virtual SAN.
// Ref: #/components/schemas/VsanSpec
type VsanSpec struct {
	// License File.
	LicenseFile OptString `json:"licenseFile"`
	// HCL File.
	HclFile OptString `json:"hclFile"`
	// Datastore Name. It will be auto-generated if blank.
	DatastoreName OptString `json:"datastoreName"`
	// VSAN feature Deduplication and Compression flag, one flag for both features.
	VsanDedup OptBool          `json:"vsanDedup"`
	EsaConfig OptVsanEsaConfig `json:"esaConfig"`
}

// GetLicenseFile returns the value of LicenseFile.
func (s *VsanSpec) GetLicenseFile() OptString {
	return s.LicenseFile
}

// GetHclFile returns the value of HclFile.
func (s *VsanSpec) GetHclFile() OptString {
	return s.HclFile
}

// GetDatastoreName returns the value of DatastoreName.
func (s *VsanSpec) GetDatastoreName() OptString {
	return s.DatastoreName
}

// GetVsanDedup returns the value of VsanDedup.
func (s *VsanSpec) GetVsanDedup() OptBool {
	return s.VsanDedup
}

// GetEsaConfig returns the value of EsaConfig.
func (s *VsanSpec) GetEsaConfig() OptVsanEsaConfig {
	return s.EsaConfig
}

// SetLicenseFile sets the value of LicenseFile.
func (s *VsanSpec) SetLicenseFile(val OptString) {
	s.LicenseFile = val
}

// SetHclFile sets the value of HclFile.
func (s *VsanSpec) SetHclFile(val OptString) {
	s.HclFile = val
}

// SetDatastoreName sets the value of DatastoreName.
func (s *VsanSpec) SetDatastoreName(val OptString) {
	s.DatastoreName = val
}

// SetVsanDedup sets the value of VsanDedup.
func (s *VsanSpec) SetVsanDedup(val OptBool) {
	s.VsanDedup = val
}

// SetEsaConfig sets the value of EsaConfig.
func (s *VsanSpec) SetEsaConfig(val OptVsanEsaConfig) {
	s.EsaConfig = val
}

// This specification contains cluster storage configuration for vVol.
// Ref: #/components/schemas/VvolDatastoreSpec
type VvolDatastoreSpec struct {
	// Name of the datastore.
	Name             string           `json:"name"`
	VasaProviderSpec VasaProviderSpec `json:"vasaProviderSpec"`
}

// GetName returns the value of Name.
func (s *VvolDatastoreSpec) GetName() string {
	return s.Name
}

// GetVasaProviderSpec returns the value of VasaProviderSpec.
func (s *VvolDatastoreSpec) GetVasaProviderSpec() VasaProviderSpec {
	return s.VasaProviderSpec
}

// SetName sets the value of Name.
func (s *VvolDatastoreSpec) SetName(val string) {
	s.Name = val
}

// SetVasaProviderSpec sets the value of VasaProviderSpec.
func (s *VvolDatastoreSpec) SetVasaProviderSpec(val VasaProviderSpec) {
	s.VasaProviderSpec = val
}

// Spec contains parameters for VxRail Manager.
// Ref: #/components/schemas/VxManagerSpec
type VxManagerSpec struct {
	// VxRail Manager Appliance hostname.
	VxManagerHostName           string          `json:"vxManagerHostName"`
	DefaultRootUserCredentials  SddcCredentials `json:"defaultRootUserCredentials"`
	DefaultAdminUserCredentials SddcCredentials `json:"defaultAdminUserCredentials"`
	// VxRail Manager SSH thumbprint (RSA SHA256).
	SshThumbprint OptString `json:"sshThumbprint"`
	// VxRail Manager SSL thumbprint (SHA256).
	SslThumbprint OptString `json:"sslThumbprint"`
}

// GetVxManagerHostName returns the value of VxManagerHostName.
func (s *VxManagerSpec) GetVxManagerHostName() string {
	return s.VxManagerHostName
}

// GetDefaultRootUserCredentials returns the value of DefaultRootUserCredentials.
func (s *VxManagerSpec) GetDefaultRootUserCredentials() SddcCredentials {
	return s.DefaultRootUserCredentials
}

// GetDefaultAdminUserCredentials returns the value of DefaultAdminUserCredentials.
func (s *VxManagerSpec) GetDefaultAdminUserCredentials() SddcCredentials {
	return s.DefaultAdminUserCredentials
}

// GetSshThumbprint returns the value of SshThumbprint.
func (s *VxManagerSpec) GetSshThumbprint() OptString {
	return s.SshThumbprint
}

// GetSslThumbprint returns the value of SslThumbprint.
func (s *VxManagerSpec) GetSslThumbprint() OptString {
	return s.SslThumbprint
}

// SetVxManagerHostName sets the value of VxManagerHostName.
func (s *VxManagerSpec) SetVxManagerHostName(val string) {
	s.VxManagerHostName = val
}

// SetDefaultRootUserCredentials sets the value of DefaultRootUserCredentials.
func (s *VxManagerSpec) SetDefaultRootUserCredentials(val SddcCredentials) {
	s.DefaultRootUserCredentials = val
}

// SetDefaultAdminUserCredentials sets the value of DefaultAdminUserCredentials.
func (s *VxManagerSpec) SetDefaultAdminUserCredentials(val SddcCredentials) {
	s.DefaultAdminUserCredentials = val
}

// SetSshThumbprint sets the value of SshThumbprint.
func (s *VxManagerSpec) SetSshThumbprint(val OptString) {
	s.SshThumbprint = val
}

// SetSslThumbprint sets the value of SslThumbprint.
func (s *VxManagerSpec) SetSslThumbprint(val OptString) {
	s.SslThumbprint = val
}

// Contains the mapping between custom attributes and the supported attributes on the array item
// object.
// Ref: #/components/schemas/VxRailArrayAssociationContext
type VxRailArrayAssociationContext struct {
	Parent *VxRailArrayAssociationContext `json:"parent"`
	// Key, Value map that holds the simple attributes on the array item that are currently supported.
	ArrayAttributeIdsKeyValue OptVxRailArrayAssociationContextArrayAttributeIdsKeyValue `json:"arrayAttributeIdsKeyValue"`
}

// GetParent returns the value of Parent.
func (s *VxRailArrayAssociationContext) GetParent() *VxRailArrayAssociationContext {
	return s.Parent
}

// GetArrayAttributeIdsKeyValue returns the value of ArrayAttributeIdsKeyValue.
func (s *VxRailArrayAssociationContext) GetArrayAttributeIdsKeyValue() OptVxRailArrayAssociationContextArrayAttributeIdsKeyValue {
	return s.ArrayAttributeIdsKeyValue
}

// SetParent sets the value of Parent.
func (s *VxRailArrayAssociationContext) SetParent(val *VxRailArrayAssociationContext) {
	s.Parent = val
}

// SetArrayAttributeIdsKeyValue sets the value of ArrayAttributeIdsKeyValue.
func (s *VxRailArrayAssociationContext) SetArrayAttributeIdsKeyValue(val OptVxRailArrayAssociationContextArrayAttributeIdsKeyValue) {
	s.ArrayAttributeIdsKeyValue = val
}

// Key, Value map that holds the simple attributes on the array item that are currently supported.
type VxRailArrayAssociationContextArrayAttributeIdsKeyValue map[string]string

func (s *VxRailArrayAssociationContextArrayAttributeIdsKeyValue) init() VxRailArrayAssociationContextArrayAttributeIdsKeyValue {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Contains VxRail Specific properties.
// Ref: #/components/schemas/VxRailContext
type VxRailContext struct {
	// Attribute name.
	AttributeName OptString `json:"attributeName"`
	// Datatype of attribute value.
	Datatype OptVxRailContextDatatype `json:"datatype"`
	// Attribute value.
	Value OptString `json:"value"`
}

// GetAttributeName returns the value of AttributeName.
func (s *VxRailContext) GetAttributeName() OptString {
	return s.AttributeName
}

// GetDatatype returns the value of Datatype.
func (s *VxRailContext) GetDatatype() OptVxRailContextDatatype {
	return s.Datatype
}

// GetValue returns the value of Value.
func (s *VxRailContext) GetValue() OptString {
	return s.Value
}

// SetAttributeName sets the value of AttributeName.
func (s *VxRailContext) SetAttributeName(val OptString) {
	s.AttributeName = val
}

// SetDatatype sets the value of Datatype.
func (s *VxRailContext) SetDatatype(val OptVxRailContextDatatype) {
	s.Datatype = val
}

// SetValue sets the value of Value.
func (s *VxRailContext) SetValue(val OptString) {
	s.Value = val
}

// Datatype of attribute value.
type VxRailContextDatatype string

const (
	VxRailContextDatatypeINTEGER VxRailContextDatatype = "INTEGER"
	VxRailContextDatatypeBOOLEAN VxRailContextDatatype = "BOOLEAN"
	VxRailContextDatatypeSTRING  VxRailContextDatatype = "STRING"
)

// AllValues returns all VxRailContextDatatype values.
func (VxRailContextDatatype) AllValues() []VxRailContextDatatype {
	return []VxRailContextDatatype{
		VxRailContextDatatypeINTEGER,
		VxRailContextDatatypeBOOLEAN,
		VxRailContextDatatypeSTRING,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VxRailContextDatatype) MarshalText() ([]byte, error) {
	switch s {
	case VxRailContextDatatypeINTEGER:
		return []byte(s), nil
	case VxRailContextDatatypeBOOLEAN:
		return []byte(s), nil
	case VxRailContextDatatypeSTRING:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VxRailContextDatatype) UnmarshalText(data []byte) error {
	switch VxRailContextDatatype(data) {
	case VxRailContextDatatypeINTEGER:
		*s = VxRailContextDatatypeINTEGER
		return nil
	case VxRailContextDatatypeBOOLEAN:
		*s = VxRailContextDatatypeBOOLEAN
		return nil
	case VxRailContextDatatypeSTRING:
		*s = VxRailContextDatatypeSTRING
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Contains the details of simple/complex custom attribute on an array item object.
// Ref: #/components/schemas/VxRailCustomArrayContext
type VxRailCustomArrayContext struct {
	ArrayAssociationContext OptVxRailArrayAssociationContext `json:"arrayAssociationContext"`
	// Collection of simple attributes that contains name, value and type for each attribute.
	SimpleAttributes []VxRailContext `json:"simpleAttributes"`
}

// GetArrayAssociationContext returns the value of ArrayAssociationContext.
func (s *VxRailCustomArrayContext) GetArrayAssociationContext() OptVxRailArrayAssociationContext {
	return s.ArrayAssociationContext
}

// GetSimpleAttributes returns the value of SimpleAttributes.
func (s *VxRailCustomArrayContext) GetSimpleAttributes() []VxRailContext {
	return s.SimpleAttributes
}

// SetArrayAssociationContext sets the value of ArrayAssociationContext.
func (s *VxRailCustomArrayContext) SetArrayAssociationContext(val OptVxRailArrayAssociationContext) {
	s.ArrayAssociationContext = val
}

// SetSimpleAttributes sets the value of SimpleAttributes.
func (s *VxRailCustomArrayContext) SetSimpleAttributes(val []VxRailContext) {
	s.SimpleAttributes = val
}

// Contains the VxRail Manager details.
// Ref: #/components/schemas/VxRailDetails
type VxRailDetails struct {
	RootCredentials  OptUnmanagedResourceCredential `json:"rootCredentials"`
	AdminCredentials OptUnmanagedResourceCredential `json:"adminCredentials"`
	// SSH thumbprint of the VxRail Manager.
	SshThumbprint OptString `json:"sshThumbprint"`
	// SSL thumbprint of the VxRail Manager.
	SslThumbprint OptString `json:"sslThumbprint"`
	// Network details of the VxRail Manager.
	Networks []Network `json:"networks"`
	// IP Address of the VxRail Manager.
	IpAddress OptString `json:"ipAddress"`
	// DNS Name/Hostname of the VxRail Manager.
	DnsName OptString `json:"dnsName"`
	// Nic Profile Type.
	NicProfile OptString `json:"nicProfile"`
	// Map of Context class with list of key and value pairs.
	ContextWithKeyValuePair OptVxRailDetailsContextWithKeyValuePair `json:"contextWithKeyValuePair"`
	// Map of Context class with list of key and value pairs for array objects.
	ArrayContextWithKeyValuePair OptVxRailDetailsArrayContextWithKeyValuePair `json:"arrayContextWithKeyValuePair"`
}

// GetRootCredentials returns the value of RootCredentials.
func (s *VxRailDetails) GetRootCredentials() OptUnmanagedResourceCredential {
	return s.RootCredentials
}

// GetAdminCredentials returns the value of AdminCredentials.
func (s *VxRailDetails) GetAdminCredentials() OptUnmanagedResourceCredential {
	return s.AdminCredentials
}

// GetSshThumbprint returns the value of SshThumbprint.
func (s *VxRailDetails) GetSshThumbprint() OptString {
	return s.SshThumbprint
}

// GetSslThumbprint returns the value of SslThumbprint.
func (s *VxRailDetails) GetSslThumbprint() OptString {
	return s.SslThumbprint
}

// GetNetworks returns the value of Networks.
func (s *VxRailDetails) GetNetworks() []Network {
	return s.Networks
}

// GetIpAddress returns the value of IpAddress.
func (s *VxRailDetails) GetIpAddress() OptString {
	return s.IpAddress
}

// GetDnsName returns the value of DnsName.
func (s *VxRailDetails) GetDnsName() OptString {
	return s.DnsName
}

// GetNicProfile returns the value of NicProfile.
func (s *VxRailDetails) GetNicProfile() OptString {
	return s.NicProfile
}

// GetContextWithKeyValuePair returns the value of ContextWithKeyValuePair.
func (s *VxRailDetails) GetContextWithKeyValuePair() OptVxRailDetailsContextWithKeyValuePair {
	return s.ContextWithKeyValuePair
}

// GetArrayContextWithKeyValuePair returns the value of ArrayContextWithKeyValuePair.
func (s *VxRailDetails) GetArrayContextWithKeyValuePair() OptVxRailDetailsArrayContextWithKeyValuePair {
	return s.ArrayContextWithKeyValuePair
}

// SetRootCredentials sets the value of RootCredentials.
func (s *VxRailDetails) SetRootCredentials(val OptUnmanagedResourceCredential) {
	s.RootCredentials = val
}

// SetAdminCredentials sets the value of AdminCredentials.
func (s *VxRailDetails) SetAdminCredentials(val OptUnmanagedResourceCredential) {
	s.AdminCredentials = val
}

// SetSshThumbprint sets the value of SshThumbprint.
func (s *VxRailDetails) SetSshThumbprint(val OptString) {
	s.SshThumbprint = val
}

// SetSslThumbprint sets the value of SslThumbprint.
func (s *VxRailDetails) SetSslThumbprint(val OptString) {
	s.SslThumbprint = val
}

// SetNetworks sets the value of Networks.
func (s *VxRailDetails) SetNetworks(val []Network) {
	s.Networks = val
}

// SetIpAddress sets the value of IpAddress.
func (s *VxRailDetails) SetIpAddress(val OptString) {
	s.IpAddress = val
}

// SetDnsName sets the value of DnsName.
func (s *VxRailDetails) SetDnsName(val OptString) {
	s.DnsName = val
}

// SetNicProfile sets the value of NicProfile.
func (s *VxRailDetails) SetNicProfile(val OptString) {
	s.NicProfile = val
}

// SetContextWithKeyValuePair sets the value of ContextWithKeyValuePair.
func (s *VxRailDetails) SetContextWithKeyValuePair(val OptVxRailDetailsContextWithKeyValuePair) {
	s.ContextWithKeyValuePair = val
}

// SetArrayContextWithKeyValuePair sets the value of ArrayContextWithKeyValuePair.
func (s *VxRailDetails) SetArrayContextWithKeyValuePair(val OptVxRailDetailsArrayContextWithKeyValuePair) {
	s.ArrayContextWithKeyValuePair = val
}

// Map of Context class with list of key and value pairs for array objects.
type VxRailDetailsArrayContextWithKeyValuePair map[string][]VxRailCustomArrayContext

func (s *VxRailDetailsArrayContextWithKeyValuePair) init() VxRailDetailsArrayContextWithKeyValuePair {
	m := *s
	if m == nil {
		m = map[string][]VxRailCustomArrayContext{}
		*s = m
	}
	return m
}

// Map of Context class with list of key and value pairs.
type VxRailDetailsContextWithKeyValuePair map[string][]VxRailContext

func (s *VxRailDetailsContextWithKeyValuePair) init() VxRailDetailsContextWithKeyValuePair {
	m := *s
	if m == nil {
		m = map[string][]VxRailContext{}
		*s = m
	}
	return m
}

// Spec contains the Witness host parameters that are part of each stretched cluster.
// Ref: #/components/schemas/WitnessSpec
type WitnessSpec struct {
	// VSAN IP of the witness host.
	VsanIp string `json:"vsanIp"`
	// Management ip of the witness host.
	Fqdn string `json:"fqdn"`
	// VSAN subnet cidr of the witness host.
	VsanCidr string `json:"vsanCidr"`
}

// GetVsanIp returns the value of VsanIp.
func (s *WitnessSpec) GetVsanIp() string {
	return s.VsanIp
}

// GetFqdn returns the value of Fqdn.
func (s *WitnessSpec) GetFqdn() string {
	return s.Fqdn
}

// GetVsanCidr returns the value of VsanCidr.
func (s *WitnessSpec) GetVsanCidr() string {
	return s.VsanCidr
}

// SetVsanIp sets the value of VsanIp.
func (s *WitnessSpec) SetVsanIp(val string) {
	s.VsanIp = val
}

// SetFqdn sets the value of Fqdn.
func (s *WitnessSpec) SetFqdn(val string) {
	s.Fqdn = val
}

// SetVsanCidr sets the value of VsanCidr.
func (s *WitnessSpec) SetVsanCidr(val string) {
	s.VsanCidr = val
}

// Spec contains parameters of a VMware Aria Automation instance.
// Ref: #/components/schemas/Wsa
type Wsa struct {
	// The ID of the Workspace ONE Access instance.
	ID OptString `json:"id"`
	// The version of the Workspace ONE Access instance.
	Version OptString `json:"version"`
	// The Fully Qualified Domain Name of the Workspace ONE Access load balancer.
	LoadBalancerFqdn OptString `json:"loadBalancerFqdn"`
	// The IP address of the Workspace ONE Access load balancer.
	LoadBalancerIpAddress OptString `json:"loadBalancerIpAddress"`
	// The status of the Workspace ONE Access instance.
	Status OptString `json:"status"`
	// The nodes of the Workspace ONE Access instance.
	Nodes []VrealizeProductNode `json:"nodes"`
}

// GetID returns the value of ID.
func (s *Wsa) GetID() OptString {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *Wsa) GetVersion() OptString {
	return s.Version
}

// GetLoadBalancerFqdn returns the value of LoadBalancerFqdn.
func (s *Wsa) GetLoadBalancerFqdn() OptString {
	return s.LoadBalancerFqdn
}

// GetLoadBalancerIpAddress returns the value of LoadBalancerIpAddress.
func (s *Wsa) GetLoadBalancerIpAddress() OptString {
	return s.LoadBalancerIpAddress
}

// GetStatus returns the value of Status.
func (s *Wsa) GetStatus() OptString {
	return s.Status
}

// GetNodes returns the value of Nodes.
func (s *Wsa) GetNodes() []VrealizeProductNode {
	return s.Nodes
}

// SetID sets the value of ID.
func (s *Wsa) SetID(val OptString) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *Wsa) SetVersion(val OptString) {
	s.Version = val
}

// SetLoadBalancerFqdn sets the value of LoadBalancerFqdn.
func (s *Wsa) SetLoadBalancerFqdn(val OptString) {
	s.LoadBalancerFqdn = val
}

// SetLoadBalancerIpAddress sets the value of LoadBalancerIpAddress.
func (s *Wsa) SetLoadBalancerIpAddress(val OptString) {
	s.LoadBalancerIpAddress = val
}

// SetStatus sets the value of Status.
func (s *Wsa) SetStatus(val OptString) {
	s.Status = val
}

// SetNodes sets the value of Nodes.
func (s *Wsa) SetNodes(val []VrealizeProductNode) {
	s.Nodes = val
}
