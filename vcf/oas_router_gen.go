// Code generated by ogen, DO NOT EDIT.

package vcf

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"
			origElem := elem
			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "avns"
				origElem := elem
				if l := len("avns"); len(elem) >= l && elem[0:l] == "avns" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetAvnsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateAvnsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/validations"
					origElem := elem
					if l := len("/validations"); len(elem) >= l && elem[0:l] == "/validations" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleValidateAvnSpecRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'b': // Prefix: "b"
				origElem := elem
				if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ackups/tasks"
					origElem := elem
					if l := len("ackups/tasks"); len(elem) >= l && elem[0:l] == "ackups/tasks" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleStartBackupRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 'u': // Prefix: "undles"
					origElem := elem
					if l := len("undles"); len(elem) >= l && elem[0:l] == "undles" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetBundlesRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleUploadBundleRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "PATCH":
								s.handleUpdateBundleCompatibilitySetsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "PATCH")
							}

							return
						}
						switch elem[0] {
						case 'd': // Prefix: "domains/"
							origElem := elem
							if l := len("domains/"); len(elem) >= l && elem[0:l] == "domains/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetBundlesForSkipUpgradeRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}
						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteBundleRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetBundleRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleStartBundleDownloadByIDRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "c"
				origElem := elem
				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "ertificate-authorities"
					origElem := elem
					if l := len("ertificate-authorities"); len(elem) >= l && elem[0:l] == "ertificate-authorities" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetCertificateAuthoritiesRequest([0]string{}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleConfigureCertificateAuthorityRequest([0]string{}, elemIsEscaped, w, r)
						case "PUT":
							s.handleCreateCertificateAuthorityRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PATCH,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleRemoveCertificateAuthorityRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetCertificateAuthorityByIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'l': // Prefix: "lusters"
					origElem := elem
					if l := len("lusters"); len(elem) >= l && elem[0:l] == "lusters" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetClustersRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateClusterRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 't': // Prefix: "tags"
							origElem := elem
							if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetTagsAssignedToClustersRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'v': // Prefix: "validations"
							origElem := elem
							if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleValidateClusterCreationSpecRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetClusterCreateValidationRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}
						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteClusterRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetClusterRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleUpdateClusterRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'd': // Prefix: "datastores"
								origElem := elem
								if l := len("datastores"); len(elem) >= l && elem[0:l] == "datastores" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetClusterDatastoresRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "POST":
										s.handleAddDatastoreToClusterRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "criteria"
										origElem := elem
										if l := len("criteria"); len(elem) >= l && elem[0:l] == "criteria" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleGetDatastoresCriteria1Request([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleGetDatastoreCriterion1Request([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									case 'q': // Prefix: "queries"
										origElem := elem
										if l := len("queries"); len(elem) >= l && elem[0:l] == "queries" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handlePostDatastoreQuery1Request([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "queryId"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleGetDatastoreQueryResponse1Request([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									case 'v': // Prefix: "validation"
										origElem := elem
										if l := len("validation"); len(elem) >= l && elem[0:l] == "validation" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleValidateVsanRemoteDatastoreSpecRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case 's': // Prefix: "s"
											origElem := elem
											if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleValidateVsanRemoteDatastoreMountSpecRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									}
									// Param: "datastoreId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleRemoveDatastoreFromClusterRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'h': // Prefix: "hosts/"
								origElem := elem
								if l := len("hosts/"); len(elem) >= l && elem[0:l] == "hosts/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "criteria"
									origElem := elem
									if l := len("criteria"); len(elem) >= l && elem[0:l] == "criteria" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetHostCriteriaRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetHostCriterionRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								case 'q': // Prefix: "queries"
									origElem := elem
									if l := len("queries"); len(elem) >= l && elem[0:l] == "queries" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handlePostHostQueryRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "queryId"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetHostQueryResponse1Request([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'n': // Prefix: "network/queries"
								origElem := elem
								if l := len("network/queries"); len(elem) >= l && elem[0:l] == "network/queries" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleGetClusterNetworkConfigurationRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "queryId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetClusterNetworkConfigurationQueryResponseRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 't': // Prefix: "tags"
								origElem := elem
								if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "DELETE":
										s.handleRemoveTagsFromClusterRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleGetTagsAssignedToClusterRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handleAssignTagsToClusterRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,PUT")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "assignable-tags"
										origElem := elem
										if l := len("assignable-tags"); len(elem) >= l && elem[0:l] == "assignable-tags" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetTagAssignableForClusterRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									case 't': // Prefix: "tag-manager"
										origElem := elem
										if l := len("tag-manager"); len(elem) >= l && elem[0:l] == "tag-manager" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetClusterTagManagerUrlRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'v': // Prefix: "v"
								origElem := elem
								if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "alidations"
									origElem := elem
									if l := len("alidations"); len(elem) >= l && elem[0:l] == "alidations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleValidateClusterUpdateSpecRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "validationId"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetClusterUpdateValidationRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								case 'd': // Prefix: "dses"
									origElem := elem
									if l := len("dses"); len(elem) >= l && elem[0:l] == "dses" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetVdsesRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										case "POST":
											s.handleImportVdsToInventoryRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET,POST")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "o"
					origElem := elem
					if l := len("o"); len(elem) >= l && elem[0:l] == "o" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'm': // Prefix: "mp"
						origElem := elem
						if l := len("mp"); len(elem) >= l && elem[0:l] == "mp" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "atibility-matrices"
							origElem := elem
							if l := len("atibility-matrices"); len(elem) >= l && elem[0:l] == "atibility-matrices" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetCompatibilityMatricesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "compatibilityMatrixSource"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetCompatibilityMatrixRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "content"
										origElem := elem
										if l := len("content"); len(elem) >= l && elem[0:l] == "content" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetCompatibilityMatrixContentRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									case 'm': // Prefix: "metadata"
										origElem := elem
										if l := len("metadata"); len(elem) >= l && elem[0:l] == "metadata" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetCompatibilityMatrixMetadataRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'l': // Prefix: "liance-"
							origElem := elem
							if l := len("liance-"); len(elem) >= l && elem[0:l] == "liance-" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "audits"
								origElem := elem
								if l := len("audits"); len(elem) >= l && elem[0:l] == "audits" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetComplianceAuditHistoryRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "complianceAuditId"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetComplianceAuditRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/compliance-audit-items"
										origElem := elem
										if l := len("/compliance-audit-items"); len(elem) >= l && elem[0:l] == "/compliance-audit-items" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetComplianceAuditItemsRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'c': // Prefix: "configurations"
								origElem := elem
								if l := len("configurations"); len(elem) >= l && elem[0:l] == "configurations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetComplianceConfigurationsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 's': // Prefix: "standards"
								origElem := elem
								if l := len("standards"); len(elem) >= l && elem[0:l] == "standards" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetComplianceStandardsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'n': // Prefix: "nfig-drift"
						origElem := elem
						if l := len("nfig-drift"); len(elem) >= l && elem[0:l] == "nfig-drift" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '-': // Prefix: "-reconciliations"
							origElem := elem
							if l := len("-reconciliations"); len(elem) >= l && elem[0:l] == "-reconciliations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleReconcileConfigsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "taskId"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetReconciliationTaskRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetConfigsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "redentials"
					origElem := elem
					if l := len("redentials"); len(elem) >= l && elem[0:l] == "redentials" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetCredentialsRequest([0]string{}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleUpdateOrRotatePasswordsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "expirations"
							origElem := elem
							if l := len("expirations"); len(elem) >= l && elem[0:l] == "expirations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleGetPasswordExpirationRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetPasswordExpirationByTaskIDRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 't': // Prefix: "tasks"
							origElem := elem
							if l := len("tasks"); len(elem) >= l && elem[0:l] == "tasks" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetCredentialsTasksRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch r.Method {
									case "DELETE":
										s.handleCancelCredentialsTaskRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleGetCredentialsTaskRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PATCH":
										s.handleRetryCredentialsTaskRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,PATCH")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'r': // Prefix: "resource-credentials"
										origElem := elem
										if l := len("resource-credentials"); len(elem) >= l && elem[0:l] == "resource-credentials" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetCredentialTaskByResourceIDRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									case 's': // Prefix: "subtasks/"
										origElem := elem
										if l := len("subtasks/"); len(elem) >= l && elem[0:l] == "subtasks/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "subtaskId"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetCredentialsSubTaskRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}
						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetCredentialRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'u': // Prefix: "ustom-isos"
					origElem := elem
					if l := len("ustom-isos"); len(elem) >= l && elem[0:l] == "ustom-isos" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetCustomIsosRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'f': // Prefix: "file"
							origElem := elem
							if l := len("file"); len(elem) >= l && elem[0:l] == "file" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleUploadCustomIsoRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}
						// Param: "custom_iso_id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteCustomIsoByIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetCustomIsoByIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleRenameCustomIsoByIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'd': // Prefix: "domains"
				origElem := elem
				if l := len("domains"); len(elem) >= l && elem[0:l] == "domains" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetDomainsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateDomainRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 't': // Prefix: "tags"
						origElem := elem
						if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetTagsAssignedToDomainsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 'v': // Prefix: "validations"
						origElem := elem
						if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleValidateDomainCreationSpecRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleDomainCreateValidationRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}
					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteDomainRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetDomainRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleUpdateDomainRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "c"
							origElem := elem
							if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "ertificates"
								origElem := elem
								if l := len("ertificates"); len(elem) >= l && elem[0:l] == "ertificates" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetDomainCertificatesRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PATCH":
										s.handleReplaceCertificatesRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handleGenerateCertificatesRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,PATCH,PUT")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/uploads"
									origElem := elem
									if l := len("/uploads"); len(elem) >= l && elem[0:l] == "/uploads" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "PUT":
											s.handleUploadCertificatesRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "PUT")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'l': // Prefix: "lusters/"
								origElem := elem
								if l := len("lusters/"); len(elem) >= l && elem[0:l] == "lusters/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "criteria"
									origElem := elem
									if l := len("criteria"); len(elem) >= l && elem[0:l] == "criteria" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetClusterCriteriaRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetClusterCriterionRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								case 'q': // Prefix: "queries"
									origElem := elem
									if l := len("queries"); len(elem) >= l && elem[0:l] == "queries" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handlePostClustersQueryRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "queryId"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetClustersQueryResponseRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}
								// Param: "clusterName"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/queries"
									origElem := elem
									if l := len("/queries"); len(elem) >= l && elem[0:l] == "/queries" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handlePostClusterQueryRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "queryId"
										// Leaf parameter
										args[2] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetClusterQueryResponseRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'o': // Prefix: "ompliance-audits"
								origElem := elem
								if l := len("ompliance-audits"); len(elem) >= l && elem[0:l] == "ompliance-audits" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetComplianceAuditHistoryForADomainRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "POST":
										s.handleComplianceAuditRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 't': // Prefix: "tasks/"
										origElem := elem
										if l := len("tasks/"); len(elem) >= l && elem[0:l] == "tasks/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "taskId"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetComplianceAuditTaskRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											case "PATCH":
												s.handleRetryComplianceAuditTaskRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET,PATCH")
											}

											return
										}

										elem = origElem
									}
									// Param: "complianceAuditId"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[1] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetComplianceAuditForADomainRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/compliance-audit-items"
										origElem := elem
										if l := len("/compliance-audit-items"); len(elem) >= l && elem[0:l] == "/compliance-audit-items" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetComplianceAuditItemsForADomainRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "srs"
								origElem := elem
								if l := len("srs"); len(elem) >= l && elem[0:l] == "srs" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetCSRsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handleGeneratesCSRsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,PUT")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/downloads"
									origElem := elem
									if l := len("/downloads"); len(elem) >= l && elem[0:l] == "/downloads" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleDownloadCSRRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'd': // Prefix: "datastores/"
							origElem := elem
							if l := len("datastores/"); len(elem) >= l && elem[0:l] == "datastores/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "criteria"
								origElem := elem
								if l := len("criteria"); len(elem) >= l && elem[0:l] == "criteria" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetDatastoresCriteriaRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetDatastoreCriterionRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'q': // Prefix: "queries"
								origElem := elem
								if l := len("queries"); len(elem) >= l && elem[0:l] == "queries" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handlePostDatastoreQueryRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "queryId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetDatastoreQueryResponseRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'e': // Prefix: "endpoints"
							origElem := elem
							if l := len("endpoints"); len(elem) >= l && elem[0:l] == "endpoints" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetDomainEndpointsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'h': // Prefix: "health-checks"
							origElem := elem
							if l := len("health-checks"); len(elem) >= l && elem[0:l] == "health-checks" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetVsanHealthCheckByDomainRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleUpdateVsanHealthCheckByDomainRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'q': // Prefix: "queries/"
									origElem := elem
									if l := len("queries/"); len(elem) >= l && elem[0:l] == "queries/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "queryId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetVsanHealthCheckByQueryIDRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 't': // Prefix: "tasks/"
									origElem := elem
									if l := len("tasks/"); len(elem) >= l && elem[0:l] == "tasks/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "taskId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetVsanHealthCheckByTaskIDRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'i': // Prefix: "isolation-prechecks"
							origElem := elem
							if l := len("isolation-prechecks"); len(elem) >= l && elem[0:l] == "isolation-prechecks" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handlePerformDomainIsolationPrecheckRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "precheckId"
								// Leaf parameter
								args[1] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetDomainIsolationPrecheckStatusRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 'r': // Prefix: "resource-certificates"
							origElem := elem
							if l := len("resource-certificates"); len(elem) >= l && elem[0:l] == "resource-certificates" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetCertificatesByDomainRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleReplaceResourceCertificatesRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PUT")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/validations"
								origElem := elem
								if l := len("/validations"); len(elem) >= l && elem[0:l] == "/validations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "PUT":
										s.handleValidateResourceCertificatesRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "PUT")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "validationId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetResourceCertificatesValidationByIDRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 't': // Prefix: "tags"
							origElem := elem
							if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleRemoveTagsFromDomainRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetTagsAssignedToDomainRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleAssignTagsToDomainRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "assignable-tags"
									origElem := elem
									if l := len("assignable-tags"); len(elem) >= l && elem[0:l] == "assignable-tags" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetAssignableTagsForDomainRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 't': // Prefix: "tag-manager"
									origElem := elem
									if l := len("tag-manager"); len(elem) >= l && elem[0:l] == "tag-manager" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetDomainTagManagerUrlRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'v': // Prefix: "validations"
							origElem := elem
							if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleValidateDomainUpdateSpecRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "validationId"
								// Leaf parameter
								args[1] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetDomainUpdateValidationRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'e': // Prefix: "edge-clusters"
				origElem := elem
				if l := len("edge-clusters"); len(elem) >= l && elem[0:l] == "edge-clusters" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetEdgeClustersRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateEdgeClusterRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'v': // Prefix: "validations"
						origElem := elem
						if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleValidateEdgeClusterCreationSpecRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetEdgeClusterValidationByIDRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}
					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetEdgeClusterRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleUpdateEdgeClusterRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "criteria"
							origElem := elem
							if l := len("criteria"); len(elem) >= l && elem[0:l] == "criteria" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetEdgeClusterQueryCriteriaRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'v': // Prefix: "validations"
							origElem := elem
							if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleValidateEdgeClusterUpdateSpecRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'h': // Prefix: "hosts"
				origElem := elem
				if l := len("hosts"); len(elem) >= l && elem[0:l] == "hosts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "DELETE":
						s.handleDecommissionHostsRequest([0]string{}, elemIsEscaped, w, r)
					case "GET":
						s.handleGetHostsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCommissionHostsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "DELETE,GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "criteria"
						origElem := elem
						if l := len("criteria"); len(elem) >= l && elem[0:l] == "criteria" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetCriteriaRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "name"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetCriterionRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'p': // Prefix: "prechecks"
						origElem := elem
						if l := len("prechecks"); len(elem) >= l && elem[0:l] == "prechecks" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handlePostHostsPrechecks1Request([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetHostsPrechecksResponseRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'q': // Prefix: "queries"
						origElem := elem
						if l := len("queries"); len(elem) >= l && elem[0:l] == "queries" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handlePostQueryRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetHostQueryResponseRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 't': // Prefix: "tags"
						origElem := elem
						if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetTagsAssignedToHostsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 'v': // Prefix: "validations"
						origElem := elem
						if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleValidateHostCommissionSpecRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "commissions"
								origElem := elem
								if l := len("commissions"); len(elem) >= l && elem[0:l] == "commissions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleValidateCommissionHostsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							}
							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetHostCommissionValidationByIDRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}
					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetHostRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/tags"
						origElem := elem
						if l := len("/tags"); len(elem) >= l && elem[0:l] == "/tags" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleRemoveTagsFromHostRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetTagsAssignedToHostRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleAssignTagsToHostRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "assignable-tags"
								origElem := elem
								if l := len("assignable-tags"); len(elem) >= l && elem[0:l] == "assignable-tags" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetAssignableTagForHostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 't': // Prefix: "tag-manager"
								origElem := elem
								if l := len("tag-manager"); len(elem) >= l && elem[0:l] == "tag-manager" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetHostTagManagerUrlRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'i': // Prefix: "identity-"
				origElem := elem
				if l := len("identity-"); len(elem) >= l && elem[0:l] == "identity-" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'b': // Prefix: "broker/"
					origElem := elem
					if l := len("broker/"); len(elem) >= l && elem[0:l] == "broker/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "prechecks"
						origElem := elem
						if l := len("prechecks"); len(elem) >= l && elem[0:l] == "prechecks" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetIdentityPrecheckResultRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 's': // Prefix: "sddc-manager-oidc"
						origElem := elem
						if l := len("sddc-manager-oidc"); len(elem) >= l && elem[0:l] == "sddc-manager-oidc" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetSddcWs1bOidcInfoRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'p': // Prefix: "providers"
					origElem := elem
					if l := len("providers"); len(elem) >= l && elem[0:l] == "providers" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetIdentityProvidersRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetIdentityProviderByIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/sync-client"
							origElem := elem
							if l := len("/sync-client"); len(elem) >= l && elem[0:l] == "/sync-client" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleGenerateSyncClientTokenRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'l': // Prefix: "license-keys"
				origElem := elem
				if l := len("license-keys"); len(elem) >= l && elem[0:l] == "license-keys" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetLicenseKeysRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleAddLicenseKeyRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "product-types"
						origElem := elem
						if l := len("product-types"); len(elem) >= l && elem[0:l] == "product-types" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetLicenseProductTypesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}
					// Param: "key"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleRemoveLicenseKeyRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetLicenseKeyRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleUpdateLicenseKeyRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'n': // Prefix: "n"
				origElem := elem
				if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "etwork-pools"
					origElem := elem
					if l := len("etwork-pools"); len(elem) >= l && elem[0:l] == "etwork-pools" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetNetworkPoolRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateNetworkPoolRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteNetworkPoolRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetNetworkPoolByIDRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleUpdateNetworkPoolRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/networks"
							origElem := elem
							if l := len("/networks"); len(elem) >= l && elem[0:l] == "/networks" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetNetworksOfNetworkPoolRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "networkId"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetNetworkOfNetworkPoolRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/ip-pools"
									origElem := elem
									if l := len("/ip-pools"); len(elem) >= l && elem[0:l] == "/ip-pools" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleDeleteIpPoolFromNetworkOfNetworkPoolRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "POST":
											s.handleAddIpPoolToNetworkOfNetworkPoolRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,POST")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "sx"
					origElem := elem
					if l := len("sx"); len(elem) >= l && elem[0:l] == "sx" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '-': // Prefix: "-alb-clusters"
						origElem := elem
						if l := len("-alb-clusters"); len(elem) >= l && elem[0:l] == "-alb-clusters" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetALBClustersRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'f': // Prefix: "form-factors"
								origElem := elem
								if l := len("form-factors"); len(elem) >= l && elem[0:l] == "form-factors" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetALBClustersFormFactorsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'v': // Prefix: "validations"
								origElem := elem
								if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleValidateALBClusterCreationSpecRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/version"
									origElem := elem
									if l := len("/version"); len(elem) >= l && elem[0:l] == "/version" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleValidateNsxALBCompatibilityRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}
							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteALBClusterRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetALBClusterRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 't': // Prefix: "t-clusters"
						origElem := elem
						if l := len("t-clusters"); len(elem) >= l && elem[0:l] == "t-clusters" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetNsxClustersRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "criteria"
								origElem := elem
								if l := len("criteria"); len(elem) >= l && elem[0:l] == "criteria" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetNsxCriteriaRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetNsxCriterionRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'i': // Prefix: "ip-address-pools/validations"
								origElem := elem
								if l := len("ip-address-pools/validations"); len(elem) >= l && elem[0:l] == "ip-address-pools/validations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleValidateIpPoolRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetValidationResultRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'o': // Prefix: "oidcs"
								origElem := elem
								if l := len("oidcs"); len(elem) >= l && elem[0:l] == "oidcs" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleConnectOpenIdRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 'q': // Prefix: "queries"
								origElem := elem
								if l := len("queries"); len(elem) >= l && elem[0:l] == "queries" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleStartNsxCriteriaQueryRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetNsxClusterQueryResponseRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}
							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetNsxClusterRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "ip-address-pools"
									origElem := elem
									if l := len("ip-address-pools"); len(elem) >= l && elem[0:l] == "ip-address-pools" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetNsxIpAddressPoolsRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetNsxIpAddressPoolRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								case 't': // Prefix: "transport-zones"
									origElem := elem
									if l := len("transport-zones"); len(elem) >= l && elem[0:l] == "transport-zones" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetNsxTransportZonesRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'p': // Prefix: "p"
				origElem := elem
				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "ersonalities"
					origElem := elem
					if l := len("ersonalities"); len(elem) >= l && elem[0:l] == "ersonalities" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeletePersonalityRequest([0]string{}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetPersonalitiesRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleUploadPersonalityRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'f': // Prefix: "files"
							origElem := elem
							if l := len("files"); len(elem) >= l && elem[0:l] == "files" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PUT":
									s.handleUploadPersonalityFilesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PUT")
								}

								return
							}

							elem = origElem
						}
						// Param: "personalityId"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetPersonalityRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleRenamePersonalityByIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,PATCH")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "roduct-version-catalog"
					origElem := elem
					if l := len("roduct-version-catalog"); len(elem) >= l && elem[0:l] == "roduct-version-catalog" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetProductVersionCatalogRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleUploadProductVersionCatalogRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}

					elem = origElem
				case 's': // Prefix: "scs"
					origElem := elem
					if l := len("scs"); len(elem) >= l && elem[0:l] == "scs" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetPscsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetPscRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'r': // Prefix: "r"
				origElem := elem
				if l := len("r"); len(elem) >= l && elem[0:l] == "r" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "e"
					origElem := elem
					if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'l': // Prefix: "leases"
						origElem := elem
						if l := len("leases"); len(elem) >= l && elem[0:l] == "leases" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetReleasesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'd': // Prefix: "domains"
								origElem := elem
								if l := len("domains"); len(elem) >= l && elem[0:l] == "domains" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetReleaseByDomainsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'v': // Prefix: "validations/"
										origElem := elem
										if l := len("validations/"); len(elem) >= l && elem[0:l] == "validations/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "validationId"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetDomainReleaseViewValidationRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}
									// Param: "domainId"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch r.Method {
										case "DELETE":
											s.handleDeleteReleaseByDomainIDRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleGetReleaseByDomainRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										case "PATCH":
											s.handleUpdateReleaseByDomainIDRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,PATCH")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "custom-patches"
											origElem := elem
											if l := len("custom-patches"); len(elem) >= l && elem[0:l] == "custom-patches" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleGetCustomPatchesRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}

											elem = origElem
										case 'f': // Prefix: "future-releases"
											origElem := elem
											if l := len("future-releases"); len(elem) >= l && elem[0:l] == "future-releases" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleGetFutureReleasesRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}

											elem = origElem
										case 'v': // Prefix: "validations"
											origElem := elem
											if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleValidateReleaseByDomainIDRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "system"
								origElem := elem
								if l := len("system"); len(elem) >= l && elem[0:l] == "system" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetSystemReleaseRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 's': // Prefix: "s"
						origElem := elem
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'o': // Prefix: "ource"
							origElem := elem
							if l := len("ource"); len(elem) >= l && elem[0:l] == "ource" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '-': // Prefix: "-"
								origElem := elem
								if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'f': // Prefix: "functionalities"
									origElem := elem
									if l := len("functionalities"); len(elem) >= l && elem[0:l] == "functionalities" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetResourceFunctionalitiesRequest([0]string{}, elemIsEscaped, w, r)
										case "PATCH":
											s.handleUpdateResourcesFunctionalitiesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET,PATCH")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/global"
										origElem := elem
										if l := len("/global"); len(elem) >= l && elem[0:l] == "/global" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetResourcesFunctionalitiesAllowedGlobalRequest([0]string{}, elemIsEscaped, w, r)
											case "PATCH":
												s.handleUpdateResourcesFunctionalities1Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET,PATCH")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								case 'w': // Prefix: "warnings"
									origElem := elem
									if l := len("warnings"); len(elem) >= l && elem[0:l] == "warnings" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetResourceWarningsRequest([0]string{}, elemIsEscaped, w, r)
										case "POST":
											s.handleCreateResourceWarningRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET,POST")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "id"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetResourceWarningRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "s/licensing-infos"
								origElem := elem
								if l := len("s/licensing-infos"); len(elem) >= l && elem[0:l] == "s/licensing-infos" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "PUT":
										s.handleSetLicenseKeyForResourceRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "PUT")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 't': // Prefix: "tores/tasks"
							origElem := elem
							if l := len("tores/tasks"); len(elem) >= l && elem[0:l] == "tores/tasks" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleStartRestoreRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetRestoreTaskRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "oles"
					origElem := elem
					if l := len("oles"); len(elem) >= l && elem[0:l] == "oles" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetRolesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 's': // Prefix: "s"
				origElem := elem
				if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "ddc"
					origElem := elem
					if l := len("ddc"); len(elem) >= l && elem[0:l] == "ddc" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '-': // Prefix: "-manager"
						origElem := elem
						if l := len("-manager"); len(elem) >= l && elem[0:l] == "-manager" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'l': // Prefix: "local-os-user-accounts"
								origElem := elem
								if l := len("local-os-user-accounts"); len(elem) >= l && elem[0:l] == "local-os-user-accounts" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetLocalOsUserAccountsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 't': // Prefix: "trusted-certificates"
								origElem := elem
								if l := len("trusted-certificates"); len(elem) >= l && elem[0:l] == "trusted-certificates" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetTrustedCertificatesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "alias"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleDeleteTrustedCertificateRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetSddcManagersRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetSddcManagerRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/history"
									origElem := elem
									if l := len("/history"); len(elem) >= l && elem[0:l] == "/history" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetSddcManagerHistoryRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 's': // Prefix: "s"
						origElem := elem
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetBringupTasksRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleStartBringupRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "about"
								origElem := elem
								if l := len("about"); len(elem) >= l && elem[0:l] == "about" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetBringupAppInfoRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'v': // Prefix: "validations"
								origElem := elem
								if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetBringupValidationsRequest([0]string{}, elemIsEscaped, w, r)
									case "POST":
										s.handleValidateBringupSpecRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "validationId"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetBringupValidationRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/report"
										origElem := elem
										if l := len("/report"); len(elem) >= l && elem[0:l] == "/report" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleExportBringupValidationReportRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}
							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetBringupTaskByIDRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleRetrySddcRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'd': // Prefix: "detail-report"
									origElem := elem
									if l := len("detail-report"); len(elem) >= l && elem[0:l] == "detail-report" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleExportBringupDetailReportRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 's': // Prefix: "sddc-manager"
									origElem := elem
									if l := len("sddc-manager"); len(elem) >= l && elem[0:l] == "sddc-manager" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetSddcManagerInfoRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "so-domains"
					origElem := elem
					if l := len("so-domains"); len(elem) >= l && elem[0:l] == "so-domains" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetSSODomainsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "sso-domain"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/entities"
							origElem := elem
							if l := len("/entities"); len(elem) >= l && elem[0:l] == "/entities" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetSSODomainEntitiesRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'y': // Prefix: "ystem"
					origElem := elem
					if l := len("ystem"); len(elem) >= l && elem[0:l] == "ystem" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetSystemConfigurationRequest([0]string{}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleUpdateSystemConfigurationRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "backup-configuration"
							origElem := elem
							if l := len("backup-configuration"); len(elem) >= l && elem[0:l] == "backup-configuration" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetBackupConfigurationRequest([0]string{}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleUpdateBackupConfigurationRequest([0]string{}, elemIsEscaped, w, r)
								case "PUT":
									s.handleSetBackupConfigurationRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PATCH,PUT")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'b': // Prefix: "backup-locations"
									origElem := elem
									if l := len("backup-locations"); len(elem) >= l && elem[0:l] == "backup-locations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetBackupLocationRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 'v': // Prefix: "validations"
									origElem := elem
									if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleValidateBackupConfigurationsOperationsRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'c': // Prefix: "c"
							origElem := elem
							if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "eip"
								origElem := elem
								if l := len("eip"); len(elem) >= l && elem[0:l] == "eip" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetCeipStatusRequest([0]string{}, elemIsEscaped, w, r)
									case "PATCH":
										s.handleSetCeipStatusRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,PATCH")
									}

									return
								}

								elem = origElem
							case 'h': // Prefix: "heck-sets"
								origElem := elem
								if l := len("heck-sets"); len(elem) >= l && elem[0:l] == "heck-sets" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetLastAssessmentRunInfoRequest([0]string{}, elemIsEscaped, w, r)
									case "POST":
										s.handleTriggerCheckRunRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'q': // Prefix: "queries"
										origElem := elem
										if l := len("queries"); len(elem) >= l && elem[0:l] == "queries" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleQueryCheckSetsRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									}
									// Param: "runId"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetResultRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										case "PATCH":
											s.handleTriggerPartialRetryOfCheckRunRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET,PATCH")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'd': // Prefix: "dns-configuration"
							origElem := elem
							if l := len("dns-configuration"); len(elem) >= l && elem[0:l] == "dns-configuration" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetDnsConfigurationRequest([0]string{}, elemIsEscaped, w, r)
								case "PUT":
									s.handleConfigureDnsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PUT")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/validations"
								origElem := elem
								if l := len("/validations"); len(elem) >= l && elem[0:l] == "/validations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetValidationsOfDNSConfigurationRequest([0]string{}, elemIsEscaped, w, r)
									case "POST":
										s.handleValidateDnsConfigurationRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetValidationOfDnsConfigurationRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'h': // Prefix: "health-summary"
							origElem := elem
							if l := len("health-summary"); len(elem) >= l && elem[0:l] == "health-summary" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetHealthCheckTaskRequest([0]string{}, elemIsEscaped, w, r)
								case "POST":
									s.handleStartHealthCheckRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetHealthCheckStatusRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 'n': // Prefix: "ntp-configuration"
							origElem := elem
							if l := len("ntp-configuration"); len(elem) >= l && elem[0:l] == "ntp-configuration" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetNtpConfigurationRequest([0]string{}, elemIsEscaped, w, r)
								case "PUT":
									s.handleConfigureNtpRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PUT")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/validations"
								origElem := elem
								if l := len("/validations"); len(elem) >= l && elem[0:l] == "/validations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetValidationsOfNtpConfigurationRequest([0]string{}, elemIsEscaped, w, r)
									case "POST":
										s.handleValidateNtpConfigurationRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetValidationOfNtpConfigurationRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'p': // Prefix: "pr"
							origElem := elem
							if l := len("pr"); len(elem) >= l && elem[0:l] == "pr" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "echecks"
								origElem := elem
								if l := len("echecks"); len(elem) >= l && elem[0:l] == "echecks" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleStartPrecheckRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/tasks/"
									origElem := elem
									if l := len("/tasks/"); len(elem) >= l && elem[0:l] == "/tasks/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetPrecheckTaskRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'o': // Prefix: "oxy-configuration"
								origElem := elem
								if l := len("oxy-configuration"); len(elem) >= l && elem[0:l] == "oxy-configuration" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetProxyConfigurationRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'd': // Prefix: "ddc-spec-converter"
								origElem := elem
								if l := len("ddc-spec-converter"); len(elem) >= l && elem[0:l] == "ddc-spec-converter" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleStartBringupSpecConversionRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 'e': // Prefix: "e"
								origElem := elem
								if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "curity/fips"
									origElem := elem
									if l := len("curity/fips"); len(elem) >= l && elem[0:l] == "curity/fips" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetFIPSConfigurationRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 't': // Prefix: "ttings/"
									origElem := elem
									if l := len("ttings/"); len(elem) >= l && elem[0:l] == "ttings/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'd': // Prefix: "depot"
										origElem := elem
										if l := len("depot"); len(elem) >= l && elem[0:l] == "depot" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "DELETE":
												s.handleDeleteDepotSettingsRequest([0]string{}, elemIsEscaped, w, r)
											case "GET":
												s.handleGetDepotSettingsRequest([0]string{}, elemIsEscaped, w, r)
											case "PUT":
												s.handleUpdateDepotSettingsRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE,GET,PUT")
											}

											return
										}

										elem = origElem
									case 'v': // Prefix: "version-aliases"
										origElem := elem
										if l := len("version-aliases"); len(elem) >= l && elem[0:l] == "version-aliases" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleGetVersionAliasConfigurationRequest([0]string{}, elemIsEscaped, w, r)
											case "PUT":
												s.handleUpdateVersionAliasConfigurationsRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET,PUT")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "bundleComponentType"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												switch r.Method {
												case "DELETE":
													s.handleDeleteVersionAliasBySoftwareTypeRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "DELETE")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												origElem := elem
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "version"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "DELETE":
														s.handleDeleteAliasVersionsBySoftwareTypeAndBaseVersionRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													case "PUT":
														s.handleUpdateVersionAliasConfigurationRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "DELETE,PUT")
													}

													return
												}

												elem = origElem
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'u': // Prefix: "upport-bundles"
								origElem := elem
								if l := len("upport-bundles"); len(elem) >= l && elem[0:l] == "upport-bundles" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetSupportBundleTaskRequest([0]string{}, elemIsEscaped, w, r)
									case "POST":
										s.handleStartSupportBundleRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetSupportBundleStatusRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'u': // Prefix: "upgradables"
							origElem := elem
							if l := len("upgradables"); len(elem) >= l && elem[0:l] == "upgradables" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetUpgradablesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "t"
				origElem := elem
				if l := len("t"); len(elem) >= l && elem[0:l] == "t" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "asks"
					origElem := elem
					if l := len("asks"); len(elem) >= l && elem[0:l] == "asks" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetTasksRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleCancelTaskRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetTaskRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleRetryTaskRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "okens"
					origElem := elem
					if l := len("okens"); len(elem) >= l && elem[0:l] == "okens" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleCreateTokenRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "access-token/refresh"
							origElem := elem
							if l := len("access-token/refresh"); len(elem) >= l && elem[0:l] == "access-token/refresh" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PATCH":
									s.handleRefreshAccessTokenRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PATCH")
								}

								return
							}

							elem = origElem
						case 'r': // Prefix: "refresh-token"
							origElem := elem
							if l := len("refresh-token"); len(elem) >= l && elem[0:l] == "refresh-token" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleInvalidateRefreshTokenRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'u': // Prefix: "u"
				origElem := elem
				if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "pgrad"
					origElem := elem
					if l := len("pgrad"); len(elem) >= l && elem[0:l] == "pgrad" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "ables/domains/"
						origElem := elem
						if l := len("ables/domains/"); len(elem) >= l && elem[0:l] == "ables/domains/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "domainId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetUpgradablesByDomainRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "clusters"
								origElem := elem
								if l := len("clusters"); len(elem) >= l && elem[0:l] == "clusters" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetUpgradablesClustersRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'n': // Prefix: "nsxt"
								origElem := elem
								if l := len("nsxt"); len(elem) >= l && elem[0:l] == "nsxt" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetNsxUpgradeResourcesRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'e': // Prefix: "es"
						origElem := elem
						if l := len("es"); len(elem) >= l && elem[0:l] == "es" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetUpgradesRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handlePerformUpgradeRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "upgradeId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetUpgradeByIdRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleUpdateUpgradeScheduleRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/prechecks"
								origElem := elem
								if l := len("/prechecks"); len(elem) >= l && elem[0:l] == "/prechecks" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleStartUpgradePrecheckRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "precheckId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetUpgradePrecheckByIDRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "sers"
					origElem := elem
					if l := len("sers"); len(elem) >= l && elem[0:l] == "sers" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetUsersRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleAddUsersRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "local/admin"
							origElem := elem
							if l := len("local/admin"); len(elem) >= l && elem[0:l] == "local/admin" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDisableLocalAccountRequest([0]string{}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetLocalAccountRequest([0]string{}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleUpdateLocalUserPasswordRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PATCH")
								}

								return
							}

							elem = origElem
						case 'u': // Prefix: "ui"
							origElem := elem
							if l := len("ui"); len(elem) >= l && elem[0:l] == "ui" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetUiUsersRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}
						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleRemoveUserRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'v': // Prefix: "v"
				origElem := elem
				if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "asa-providers"
					origElem := elem
					if l := len("asa-providers"); len(elem) >= l && elem[0:l] == "asa-providers" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetVasaProvidersRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleAddVasaProviderRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'v': // Prefix: "validations"
							origElem := elem
							if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleValidateVasaProviderSpecRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetVasaProviderValidationRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}
						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleRemoveVasaProviderRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetVasaProviderRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleUpdateVasaProviderRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 's': // Prefix: "storage-containers"
								origElem := elem
								if l := len("storage-containers"); len(elem) >= l && elem[0:l] == "storage-containers" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetVasaProviderStorageContainersRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "POST":
										s.handleAddVasaProviderStorageContainerRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "storageContainerId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleRemoveVasaProviderStorageContainerRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "PATCH":
											s.handleUpdateVasaProviderStorageContainerRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,PATCH")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'u': // Prefix: "users"
								origElem := elem
								if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetVasaProviderUserRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "POST":
										s.handleAddVasaProviderUserRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "userId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "PATCH":
											s.handleUpdateVasaProviderUserRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "PATCH")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'c': // Prefix: "c"
					origElem := elem
					if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "enters"
						origElem := elem
						if l := len("enters"); len(elem) >= l && elem[0:l] == "enters" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetVcentersRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetVcenterRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'f': // Prefix: "f-services"
						origElem := elem
						if l := len("f-services"); len(elem) >= l && elem[0:l] == "f-services" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetVcfServicesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetVcfServiceRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "r"
					origElem := elem
					if l := len("r"); len(elem) >= l && elem[0:l] == "r" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "as"
						origElem := elem
						if l := len("as"); len(elem) >= l && elem[0:l] == "as" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetVrasRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 'l': // Prefix: "li"
						origElem := elem
						if l := len("li"); len(elem) >= l && elem[0:l] == "li" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/domains"
							origElem := elem
							if l := len("/domains"); len(elem) >= l && elem[0:l] == "/domains" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetVrliIntegratedDomainsRequest([0]string{}, elemIsEscaped, w, r)
								case "PUT":
									s.handleConnectVrliWithDomainRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PUT")
								}

								return
							}

							elem = origElem
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetVrlisRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'o': // Prefix: "ops"
						origElem := elem
						if l := len("ops"); len(elem) >= l && elem[0:l] == "ops" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/domains"
							origElem := elem
							if l := len("/domains"); len(elem) >= l && elem[0:l] == "/domains" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetVropsIntegratedDomainsRequest([0]string{}, elemIsEscaped, w, r)
								case "PUT":
									s.handleConnectVropsWithDomainRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PUT")
								}

								return
							}

							elem = origElem
						case 'e': // Prefix: "es"
							origElem := elem
							if l := len("es"); len(elem) >= l && elem[0:l] == "es" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetVropsesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 's': // Prefix: "slcm"
						origElem := elem
						if l := len("slcm"); len(elem) >= l && elem[0:l] == "slcm" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleRollbackVrslcmRequest([0]string{}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetVrslcmRequest([0]string{}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdateVrslcmVersionInInventoryRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/status"
							origElem := elem
							if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetVrslcmStatusRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetVrslcmsRequest([0]string{}, elemIsEscaped, w, r)
								case "POST":
									s.handleDeployVrslcmRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'v': // Prefix: "validations"
									origElem := elem
									if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleValidateVrslcmRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "id"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetVrslcmValidationRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}
								// Param: "id"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "PUT":
										s.handleUpdateVrslcmVersionByIdInInventoryRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "PUT")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "san-hcl"
					origElem := elem
					if l := len("san-hcl"); len(elem) >= l && elem[0:l] == "san-hcl" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "PATCH":
							s.handleDownloadVsanHclRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "attributes"
							origElem := elem
							if l := len("attributes"); len(elem) >= l && elem[0:l] == "attributes" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetVsanHclAttributesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'c': // Prefix: "configuration"
							origElem := elem
							if l := len("configuration"); len(elem) >= l && elem[0:l] == "configuration" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetVsanHclConfigurationRequest([0]string{}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleUpdateVsanHclConfigurationRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PATCH")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'w': // Prefix: "wsas"
				origElem := elem
				if l := len("wsas"); len(elem) >= l && elem[0:l] == "wsas" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetWsasRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"
			origElem := elem
			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "avns"
				origElem := elem
				if l := len("avns"); len(elem) >= l && elem[0:l] == "avns" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetAvns"
						r.summary = "Retrieve Application Virtual Network (AVN) details"
						r.operationID = "getAvns"
						r.pathPattern = "/v1/avns"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateAvns"
						r.summary = "Create Application Virtual Networks (AVN)"
						r.operationID = "createAvns"
						r.pathPattern = "/v1/avns"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/validations"
					origElem := elem
					if l := len("/validations"); len(elem) >= l && elem[0:l] == "/validations" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "ValidateAvnSpec"
							r.summary = "Perform validation of the AvnsCreationSpec specification"
							r.operationID = "validateAvnSpec"
							r.pathPattern = "/v1/avns/validations"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'b': // Prefix: "b"
				origElem := elem
				if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ackups/tasks"
					origElem := elem
					if l := len("ackups/tasks"); len(elem) >= l && elem[0:l] == "ackups/tasks" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "StartBackup"
							r.summary = "Start a backup operation"
							r.operationID = "startBackup"
							r.pathPattern = "/v1/backups/tasks"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'u': // Prefix: "undles"
					origElem := elem
					if l := len("undles"); len(elem) >= l && elem[0:l] == "undles" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetBundles"
							r.summary = "Retrieve a list of bundles"
							r.operationID = "getBundles"
							r.pathPattern = "/v1/bundles"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "UploadBundle"
							r.summary = "Upload a bundle to SDDC Manager"
							r.operationID = "uploadBundle"
							r.pathPattern = "/v1/bundles"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "PATCH":
								r.name = "UpdateBundleCompatibilitySets"
								r.summary = "Update the software compatability set for all bundles"
								r.operationID = "updateBundleCompatibilitySets"
								r.pathPattern = "/v1/bundles/"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case 'd': // Prefix: "domains/"
							origElem := elem
							if l := len("domains/"); len(elem) >= l && elem[0:l] == "domains/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetBundlesForSkipUpgrade"
									r.summary = "Retrieve a list of bundles for skip upgrade by domain ID"
									r.operationID = "getBundlesForSkipUpgrade"
									r.pathPattern = "/v1/bundles/domains/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "DeleteBundle"
								r.summary = "Delete a bundle by bundle ID"
								r.operationID = "deleteBundle"
								r.pathPattern = "/v1/bundles/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetBundle"
								r.summary = "Retrieve a bundle by its ID"
								r.operationID = "getBundle"
								r.pathPattern = "/v1/bundles/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "StartBundleDownloadByID"
								r.summary = "Start immediate download or schedule download of a bundle by ID"
								r.operationID = "startBundleDownloadByID"
								r.pathPattern = "/v1/bundles/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "c"
				origElem := elem
				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "ertificate-authorities"
					origElem := elem
					if l := len("ertificate-authorities"); len(elem) >= l && elem[0:l] == "ertificate-authorities" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetCertificateAuthorities"
							r.summary = "Retrieve a list of Certificate Authorities"
							r.operationID = "getCertificateAuthorities"
							r.pathPattern = "/v1/certificate-authorities"
							r.args = args
							r.count = 0
							return r, true
						case "PATCH":
							r.name = "ConfigureCertificateAuthority"
							r.summary = "Update the configuration of a Certificate Authority"
							r.operationID = "configureCertificateAuthority"
							r.pathPattern = "/v1/certificate-authorities"
							r.args = args
							r.count = 0
							return r, true
						case "PUT":
							r.name = "CreateCertificateAuthority"
							r.summary = "Configure integration with a Certificate Authority"
							r.operationID = "createCertificateAuthority"
							r.pathPattern = "/v1/certificate-authorities"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "RemoveCertificateAuthority"
								r.summary = "Remove the configuration of a Certificate Authority"
								r.operationID = "removeCertificateAuthority"
								r.pathPattern = "/v1/certificate-authorities/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetCertificateAuthorityById"
								r.summary = "Retrieve the details of a Certificate Authority by ID"
								r.operationID = "getCertificateAuthorityById"
								r.pathPattern = "/v1/certificate-authorities/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'l': // Prefix: "lusters"
					origElem := elem
					if l := len("lusters"); len(elem) >= l && elem[0:l] == "lusters" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetClusters"
							r.summary = "Retrieve a list of clusters"
							r.operationID = "getClusters"
							r.pathPattern = "/v1/clusters"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateCluster"
							r.summary = "Create a cluster and add to an existing domain"
							r.operationID = "createCluster"
							r.pathPattern = "/v1/clusters"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 't': // Prefix: "tags"
							origElem := elem
							if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetTagsAssignedToClusters"
									r.summary = "Get tags assigned to clusters"
									r.operationID = "getTagsAssignedToClusters"
									r.pathPattern = "/v1/clusters/tags"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'v': // Prefix: "validations"
							origElem := elem
							if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "ValidateClusterCreationSpec"
									r.summary = "Perform validation of the ClusterCreationSpec specification"
									r.operationID = "validateClusterCreationSpec"
									r.pathPattern = "/v1/clusters/validations"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetClusterCreateValidation"
										r.summary = "Get the status of the validations for cluster deployment"
										r.operationID = "getClusterCreateValidation"
										r.pathPattern = "/v1/clusters/validations/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}
						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteCluster"
								r.summary = "Delete a cluster from a domain if it has been previously initialized for deletion"
								r.operationID = "deleteCluster"
								r.pathPattern = "/v1/clusters/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetCluster"
								r.summary = "Get a cluster by its ID"
								r.operationID = "getCluster"
								r.pathPattern = "/v1/clusters/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateCluster"
								r.summary = "Update a Cluster by adding or removing Hosts, Stretching a standard vSAN cluster, Unstretching a stretched cluster or by marking for deletion"
								r.operationID = "updateCluster"
								r.pathPattern = "/v1/clusters/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'd': // Prefix: "datastores"
								origElem := elem
								if l := len("datastores"); len(elem) >= l && elem[0:l] == "datastores" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetClusterDatastores"
										r.summary = "Get the list of all datastores associated with the cluster."
										r.operationID = "getClusterDatastores"
										r.pathPattern = "/v1/clusters/{id}/datastores"
										r.args = args
										r.count = 1
										return r, true
									case "POST":
										r.name = "AddDatastoreToCluster"
										r.summary = "Mount a datastore to a cluster"
										r.operationID = "addDatastoreToCluster"
										r.pathPattern = "/v1/clusters/{id}/datastores"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "criteria"
										origElem := elem
										if l := len("criteria"); len(elem) >= l && elem[0:l] == "criteria" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "GetDatastoresCriteria1"
												r.summary = "Get all datastore criteria"
												r.operationID = "getDatastoresCriteria_1"
												r.pathPattern = "/v1/clusters/{id}/datastores/criteria"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "GET":
													r.name = "GetDatastoreCriterion1"
													r.summary = "Get a criterion to query for datastore"
													r.operationID = "getDatastoreCriterion_1"
													r.pathPattern = "/v1/clusters/{id}/datastores/criteria/{name}"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									case 'q': // Prefix: "queries"
										origElem := elem
										if l := len("queries"); len(elem) >= l && elem[0:l] == "queries" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "PostDatastoreQuery1"
												r.summary = "Post a datastore query"
												r.operationID = "postDatastoreQuery_1"
												r.pathPattern = "/v1/clusters/{id}/datastores/queries"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "queryId"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "GET":
													r.name = "GetDatastoreQueryResponse1"
													r.summary = "Get Datastore query response"
													r.operationID = "getDatastoreQueryResponse_1"
													r.pathPattern = "/v1/clusters/{clusterId}/datastores/queries/{queryId}"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									case 'v': // Prefix: "validation"
										origElem := elem
										if l := len("validation"); len(elem) >= l && elem[0:l] == "validation" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "ValidateVsanRemoteDatastoreSpec"
												r.summary = "Perform validation of the DatastoreMountSpec specification"
												r.operationID = "validateVsanRemoteDatastoreSpec"
												r.pathPattern = "/v1/clusters/{clusterId}/datastores/validation"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case 's': // Prefix: "s"
											origElem := elem
											if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = "ValidateVsanRemoteDatastoreMountSpec"
													r.summary = "Perform validation of the DatastoreMountSpec specification"
													r.operationID = "validateVsanRemoteDatastoreMountSpec"
													r.pathPattern = "/v1/clusters/{clusterId}/datastores/validations"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									}
									// Param: "datastoreId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "RemoveDatastoreFromCluster"
											r.summary = "Unmount a datastore from a cluster"
											r.operationID = "removeDatastoreFromCluster"
											r.pathPattern = "/v1/clusters/{id}/datastores/{datastoreId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'h': // Prefix: "hosts/"
								origElem := elem
								if l := len("hosts/"); len(elem) >= l && elem[0:l] == "hosts/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "criteria"
									origElem := elem
									if l := len("criteria"); len(elem) >= l && elem[0:l] == "criteria" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetHostCriteria"
											r.summary = "Get all host criteria"
											r.operationID = "getHostCriteria"
											r.pathPattern = "/v1/clusters/{id}/hosts/criteria"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetHostCriterion"
												r.summary = "Get a criterion to query for host"
												r.operationID = "getHostCriterion"
												r.pathPattern = "/v1/clusters/{id}/hosts/criteria/{name}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								case 'q': // Prefix: "queries"
									origElem := elem
									if l := len("queries"); len(elem) >= l && elem[0:l] == "queries" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "PostHostQuery"
											r.summary = "Post a host query"
											r.operationID = "postHostQuery"
											r.pathPattern = "/v1/clusters/{id}/hosts/queries"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "queryId"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetHostQueryResponse1"
												r.summary = "Get query response"
												r.operationID = "getHostQueryResponse_1"
												r.pathPattern = "/v1/clusters/{clusterId}/hosts/queries/{queryId}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'n': // Prefix: "network/queries"
								origElem := elem
								if l := len("network/queries"); len(elem) >= l && elem[0:l] == "network/queries" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "GetClusterNetworkConfiguration"
										r.summary = "Get cluster network configuration"
										r.operationID = "getClusterNetworkConfiguration"
										r.pathPattern = "/v1/clusters/{id}/network/queries"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "queryId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetClusterNetworkConfigurationQueryResponse"
											r.summary = "Get cluster network configuration query response"
											r.operationID = "getClusterNetworkConfigurationQueryResponse"
											r.pathPattern = "/v1/clusters/{id}/network/queries/{queryId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 't': // Prefix: "tags"
								origElem := elem
								if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										r.name = "RemoveTagsFromCluster"
										r.summary = "Remove tags from a cluster"
										r.operationID = "removeTagsFromCluster"
										r.pathPattern = "/v1/clusters/{id}/tags"
										r.args = args
										r.count = 1
										return r, true
									case "GET":
										r.name = "GetTagsAssignedToCluster"
										r.summary = "Get tags assigned to a cluster by its ID"
										r.operationID = "getTagsAssignedToCluster"
										r.pathPattern = "/v1/clusters/{id}/tags"
										r.args = args
										r.count = 1
										return r, true
									case "PUT":
										r.name = "AssignTagsToCluster"
										r.summary = "Assign Tags to Cluster"
										r.operationID = "assignTagsToCluster"
										r.pathPattern = "/v1/clusters/{id}/tags"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "assignable-tags"
										origElem := elem
										if l := len("assignable-tags"); len(elem) >= l && elem[0:l] == "assignable-tags" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetTagAssignableForCluster"
												r.summary = "Get tags assignable to a cluster"
												r.operationID = "getTagAssignableForCluster"
												r.pathPattern = "/v1/clusters/{id}/tags/assignable-tags"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 't': // Prefix: "tag-manager"
										origElem := elem
										if l := len("tag-manager"); len(elem) >= l && elem[0:l] == "tag-manager" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetClusterTagManagerUrl"
												r.summary = "Get Cluster Tag Manager Url"
												r.operationID = "getClusterTagManagerUrl"
												r.pathPattern = "/v1/clusters/{id}/tags/tag-manager"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'v': // Prefix: "v"
								origElem := elem
								if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "alidations"
									origElem := elem
									if l := len("alidations"); len(elem) >= l && elem[0:l] == "alidations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "ValidateClusterUpdateSpec"
											r.summary = "Perform validation of the ClusterUpdateSpec specification"
											r.operationID = "validateClusterUpdateSpec"
											r.pathPattern = "/v1/clusters/{id}/validations"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "validationId"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetClusterUpdateValidation"
												r.summary = "Get the status of the validations for cluster updates"
												r.operationID = "getClusterUpdateValidation"
												r.pathPattern = "/v1/clusters/{id}/validations/{validationId}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								case 'd': // Prefix: "dses"
									origElem := elem
									if l := len("dses"); len(elem) >= l && elem[0:l] == "dses" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetVdses"
											r.summary = "Get the list of VDSes of a cluster."
											r.operationID = "getVdses"
											r.pathPattern = "/v1/clusters/{clusterId}/vdses"
											r.args = args
											r.count = 1
											return r, true
										case "POST":
											r.name = "ImportVdsToInventory"
											r.summary = "Import Vds to inventory for the given cluster"
											r.operationID = "importVdsToInventory"
											r.pathPattern = "/v1/clusters/{clusterId}/vdses"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "o"
					origElem := elem
					if l := len("o"); len(elem) >= l && elem[0:l] == "o" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'm': // Prefix: "mp"
						origElem := elem
						if l := len("mp"); len(elem) >= l && elem[0:l] == "mp" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "atibility-matrices"
							origElem := elem
							if l := len("atibility-matrices"); len(elem) >= l && elem[0:l] == "atibility-matrices" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetCompatibilityMatrices"
									r.summary = "Get Compatibility Matrices"
									r.operationID = "getCompatibilityMatrices"
									r.pathPattern = "/v1/compatibility-matrices"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "compatibilityMatrixSource"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetCompatibilityMatrix"
										r.summary = "Get Compatibility Matrix"
										r.operationID = "getCompatibilityMatrix"
										r.pathPattern = "/v1/compatibility-matrices/{compatibilityMatrixSource}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "content"
										origElem := elem
										if l := len("content"); len(elem) >= l && elem[0:l] == "content" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetCompatibilityMatrixContent"
												r.summary = "Get Compatibility Matrix content"
												r.operationID = "getCompatibilityMatrixContent"
												r.pathPattern = "/v1/compatibility-matrices/{compatibilityMatrixSource}/content"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 'm': // Prefix: "metadata"
										origElem := elem
										if l := len("metadata"); len(elem) >= l && elem[0:l] == "metadata" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetCompatibilityMatrixMetadata"
												r.summary = "Get Compatibility Matrix Metadata"
												r.operationID = "getCompatibilityMatrixMetadata"
												r.pathPattern = "/v1/compatibility-matrices/{compatibilityMatrixSource}/metadata"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'l': // Prefix: "liance-"
							origElem := elem
							if l := len("liance-"); len(elem) >= l && elem[0:l] == "liance-" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "audits"
								origElem := elem
								if l := len("audits"); len(elem) >= l && elem[0:l] == "audits" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetComplianceAuditHistory"
										r.summary = "Get compliance audit history"
										r.operationID = "getComplianceAuditHistory"
										r.pathPattern = "/v1/compliance-audits"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "complianceAuditId"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetComplianceAudit"
											r.summary = "Get compliance audit"
											r.operationID = "getComplianceAudit"
											r.pathPattern = "/v1/compliance-audits/{complianceAuditId}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/compliance-audit-items"
										origElem := elem
										if l := len("/compliance-audit-items"); len(elem) >= l && elem[0:l] == "/compliance-audit-items" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetComplianceAuditItems"
												r.summary = "Get compliance audit items"
												r.operationID = "getComplianceAuditItems"
												r.pathPattern = "/v1/compliance-audits/{complianceAuditId}/compliance-audit-items"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'c': // Prefix: "configurations"
								origElem := elem
								if l := len("configurations"); len(elem) >= l && elem[0:l] == "configurations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetComplianceConfigurations"
										r.summary = "Get all compliance configurations"
										r.operationID = "getComplianceConfigurations"
										r.pathPattern = "/v1/compliance-configurations"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 's': // Prefix: "standards"
								origElem := elem
								if l := len("standards"); len(elem) >= l && elem[0:l] == "standards" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetComplianceStandards"
										r.summary = "Get all compliance standards"
										r.operationID = "getComplianceStandards"
										r.pathPattern = "/v1/compliance-standards"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'n': // Prefix: "nfig-drift"
						origElem := elem
						if l := len("nfig-drift"); len(elem) >= l && elem[0:l] == "nfig-drift" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '-': // Prefix: "-reconciliations"
							origElem := elem
							if l := len("-reconciliations"); len(elem) >= l && elem[0:l] == "-reconciliations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "ReconcileConfigs"
									r.summary = "Reconcile configs"
									r.operationID = "reconcileConfigs"
									r.pathPattern = "/v1/config-drift-reconciliations"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "taskId"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetReconciliationTask"
										r.summary = "Get config reconciliation task associated with the given task Id"
										r.operationID = "getReconciliationTask"
										r.pathPattern = "/v1/config-drift-reconciliations/{taskId}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetConfigs"
									r.summary = "Get configs associated with the given criteria"
									r.operationID = "getConfigs"
									r.pathPattern = "/v1/config-drifts"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "redentials"
					origElem := elem
					if l := len("redentials"); len(elem) >= l && elem[0:l] == "redentials" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetCredentials"
							r.summary = "Retrieve a list of credentials"
							r.operationID = "getCredentials"
							r.pathPattern = "/v1/credentials"
							r.args = args
							r.count = 0
							return r, true
						case "PATCH":
							r.name = "UpdateOrRotatePasswords"
							r.summary = "Update or rotate passwords for a list of resources"
							r.operationID = "updateOrRotatePasswords"
							r.pathPattern = "/v1/credentials"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "expirations"
							origElem := elem
							if l := len("expirations"); len(elem) >= l && elem[0:l] == "expirations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "GetPasswordExpiration"
									r.summary = "Fetch expiration details of passwords for a list of credentials"
									r.operationID = "getPasswordExpiration"
									r.pathPattern = "/v1/credentials/expirations"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetPasswordExpirationByTaskID"
										r.summary = "Retrive a password expiration task by ID"
										r.operationID = "getPasswordExpirationByTaskID"
										r.pathPattern = "/v1/credentials/expirations/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 't': // Prefix: "tasks"
							origElem := elem
							if l := len("tasks"); len(elem) >= l && elem[0:l] == "tasks" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetCredentialsTasks"
									r.summary = "Retrieve a list of credential tasks"
									r.operationID = "getCredentialsTasks"
									r.pathPattern = "/v1/credentials/tasks"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										r.name = "CancelCredentialsTask"
										r.summary = "Cancel a failed credential task by its ID"
										r.operationID = "cancelCredentialsTask"
										r.pathPattern = "/v1/credentials/tasks/{id}"
										r.args = args
										r.count = 1
										return r, true
									case "GET":
										r.name = "GetCredentialsTask"
										r.summary = "Retrieve a credential task by ID"
										r.operationID = "getCredentialsTask"
										r.pathPattern = "/v1/credentials/tasks/{id}"
										r.args = args
										r.count = 1
										return r, true
									case "PATCH":
										r.name = "RetryCredentialsTask"
										r.summary = "Retry a failed credentials task for a given ID"
										r.operationID = "retryCredentialsTask"
										r.pathPattern = "/v1/credentials/tasks/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'r': // Prefix: "resource-credentials"
										origElem := elem
										if l := len("resource-credentials"); len(elem) >= l && elem[0:l] == "resource-credentials" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetCredentialTaskByResourceID"
												r.summary = "Retriece a credential taks by resource ID"
												r.operationID = "getCredentialTaskByResourceID"
												r.pathPattern = "/v1/credentials/tasks/{id}/resource-credentials"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 's': // Prefix: "subtasks/"
										origElem := elem
										if l := len("subtasks/"); len(elem) >= l && elem[0:l] == "subtasks/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "subtaskId"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetCredentialsSubTask"
												r.summary = "Retrieve a credential sub task by its ID"
												r.operationID = "getCredentialsSubTask"
												r.pathPattern = "/v1/credentials/tasks/{id}/subtasks/{subtaskId}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}
						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetCredential"
								r.summary = "Retrieve a credential by its ID"
								r.operationID = "getCredential"
								r.pathPattern = "/v1/credentials/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'u': // Prefix: "ustom-isos"
					origElem := elem
					if l := len("ustom-isos"); len(elem) >= l && elem[0:l] == "ustom-isos" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetCustomIsos"
							r.summary = "Get the Custom ISOs"
							r.operationID = "getCustomIsos"
							r.pathPattern = "/v1/custom-isos"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'f': // Prefix: "file"
							origElem := elem
							if l := len("file"); len(elem) >= l && elem[0:l] == "file" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "UploadCustomIso"
									r.summary = "Upload a Custom ISO"
									r.operationID = "uploadCustomIso"
									r.pathPattern = "/v1/custom-isos/file"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "custom_iso_id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "DeleteCustomIsoById"
								r.summary = "Delete the Custom ISO based on ID"
								r.operationID = "deleteCustomIsoById"
								r.pathPattern = "/v1/custom-isos/{custom_iso_id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetCustomIsoById"
								r.summary = "Get the Custom ISO based on ID"
								r.operationID = "getCustomIsoById"
								r.pathPattern = "/v1/custom-isos/{custom_iso_id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "RenameCustomIsoById"
								r.summary = "Rename the Custom ISO corresponding to the ID"
								r.operationID = "renameCustomIsoById"
								r.pathPattern = "/v1/custom-isos/{custom_iso_id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'd': // Prefix: "domains"
				origElem := elem
				if l := len("domains"); len(elem) >= l && elem[0:l] == "domains" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetDomains"
						r.summary = "Retrieve a list of domains"
						r.operationID = "getDomains"
						r.pathPattern = "/v1/domains"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateDomain"
						r.summary = "Create a domain"
						r.operationID = "createDomain"
						r.pathPattern = "/v1/domains"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 't': // Prefix: "tags"
						origElem := elem
						if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetTagsAssignedToDomains"
								r.summary = "Get tags assigned to all domains"
								r.operationID = "getTagsAssignedToDomains"
								r.pathPattern = "/v1/domains/tags"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'v': // Prefix: "validations"
						origElem := elem
						if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "ValidateDomainCreationSpec"
								r.summary = "Perform validation of the DomainCreationSpec specification"
								r.operationID = "validateDomainCreationSpec"
								r.pathPattern = "/v1/domains/validations"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "DomainCreateValidation"
									r.summary = "Get the status of the validations for domain related operations"
									r.operationID = "domainCreateValidation"
									r.pathPattern = "/v1/domains/validations/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}
					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteDomain"
							r.summary = "Remove a domain if it has been previously initialized for deletion"
							r.operationID = "deleteDomain"
							r.pathPattern = "/v1/domains/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "GetDomain"
							r.summary = "Get a domain by its ID"
							r.operationID = "getDomain"
							r.pathPattern = "/v1/domains/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateDomain"
							r.summary = "Update a Domain"
							r.operationID = "updateDomain"
							r.pathPattern = "/v1/domains/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "c"
							origElem := elem
							if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "ertificates"
								origElem := elem
								if l := len("ertificates"); len(elem) >= l && elem[0:l] == "ertificates" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetDomainCertificates"
										r.summary = "Retrieve the latest generated certificates for a domain by its ID"
										r.operationID = "getDomainCertificates"
										r.pathPattern = "/v1/domains/{id}/certificates"
										r.args = args
										r.count = 1
										return r, true
									case "PATCH":
										r.name = "ReplaceCertificates"
										r.summary = "Replace certificate(s) for the selected resource(s) in a domain"
										r.operationID = "replaceCertificates"
										r.pathPattern = "/v1/domains/{id}/certificates"
										r.args = args
										r.count = 1
										return r, true
									case "PUT":
										r.name = "GenerateCertificates"
										r.summary = "Request the creation of signed certificate for resources of a domain"
										r.operationID = "generateCertificates"
										r.pathPattern = "/v1/domains/{id}/certificates"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/uploads"
									origElem := elem
									if l := len("/uploads"); len(elem) >= l && elem[0:l] == "/uploads" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "PUT":
											r.name = "UploadCertificates"
											r.summary = "Import certificate(s) to the certificate store for a domain"
											r.operationID = "uploadCertificates"
											r.pathPattern = "/v1/domains/{id}/certificates/uploads"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'l': // Prefix: "lusters/"
								origElem := elem
								if l := len("lusters/"); len(elem) >= l && elem[0:l] == "lusters/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "criteria"
									origElem := elem
									if l := len("criteria"); len(elem) >= l && elem[0:l] == "criteria" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetClusterCriteria"
											r.summary = "Get all cluster criteria"
											r.operationID = "getClusterCriteria"
											r.pathPattern = "/v1/domains/{domainId}/clusters/criteria"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetClusterCriterion"
												r.summary = "Get a criterion to query for cluster"
												r.operationID = "getClusterCriterion"
												r.pathPattern = "/v1/domains/{domainId}/clusters/criteria/{name}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								case 'q': // Prefix: "queries"
									origElem := elem
									if l := len("queries"); len(elem) >= l && elem[0:l] == "queries" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "PostClustersQuery"
											r.summary = "Post clusters query"
											r.operationID = "postClustersQuery"
											r.pathPattern = "/v1/domains/{domainId}/clusters/queries"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "queryId"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetClustersQueryResponse"
												r.summary = "Get clusters query response"
												r.operationID = "getClustersQueryResponse"
												r.pathPattern = "/v1/domains/{domainId}/clusters/queries/{queryId}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}
								// Param: "clusterName"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/queries"
									origElem := elem
									if l := len("/queries"); len(elem) >= l && elem[0:l] == "/queries" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "PostClusterQuery"
											r.summary = "Post a cluster query"
											r.operationID = "postClusterQuery"
											r.pathPattern = "/v1/domains/{domainId}/clusters/{clusterName}/queries"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "queryId"
										// Leaf parameter
										args[2] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetClusterQueryResponse"
												r.summary = "Get cluster query response"
												r.operationID = "getClusterQueryResponse"
												r.pathPattern = "/v1/domains/{domainId}/clusters/{clusterName}/queries/{queryId}"
												r.args = args
												r.count = 3
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'o': // Prefix: "ompliance-audits"
								origElem := elem
								if l := len("ompliance-audits"); len(elem) >= l && elem[0:l] == "ompliance-audits" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetComplianceAuditHistoryForADomain"
										r.summary = "Get compliance audit history for a domain"
										r.operationID = "getComplianceAuditHistoryForADomain"
										r.pathPattern = "/v1/domains/{id}/compliance-audits"
										r.args = args
										r.count = 1
										return r, true
									case "POST":
										r.name = "ComplianceAudit"
										r.summary = "Compliance audit of resource"
										r.operationID = "complianceAudit"
										r.pathPattern = "/v1/domains/{id}/compliance-audits"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 't': // Prefix: "tasks/"
										origElem := elem
										if l := len("tasks/"); len(elem) >= l && elem[0:l] == "tasks/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "taskId"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetComplianceAuditTask"
												r.summary = "Get compliance audit task"
												r.operationID = "getComplianceAuditTask"
												r.pathPattern = "/v1/domains/{id}/compliance-audits/tasks/{taskId}"
												r.args = args
												r.count = 2
												return r, true
											case "PATCH":
												r.name = "RetryComplianceAuditTask"
												r.summary = "Retry compliance audit task"
												r.operationID = "retryComplianceAuditTask"
												r.pathPattern = "/v1/domains/{id}/compliance-audits/tasks/{taskId}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}
									// Param: "complianceAuditId"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[1] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetComplianceAuditForADomain"
											r.summary = "Get compliance audit for a domain"
											r.operationID = "getComplianceAuditForADomain"
											r.pathPattern = "/v1/domains/{id}/compliance-audits/{complianceAuditId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/compliance-audit-items"
										origElem := elem
										if l := len("/compliance-audit-items"); len(elem) >= l && elem[0:l] == "/compliance-audit-items" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetComplianceAuditItemsForADomain"
												r.summary = "Get compliance audit items for a domain"
												r.operationID = "getComplianceAuditItemsForADomain"
												r.pathPattern = "/v1/domains/{id}/compliance-audits/{complianceAuditId}/compliance-audit-items"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "srs"
								origElem := elem
								if l := len("srs"); len(elem) >= l && elem[0:l] == "srs" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetCSRs"
										r.summary = "Request available CSR(s) in JSON format for a domain"
										r.operationID = "getCSRs"
										r.pathPattern = "/v1/domains/{id}/csrs"
										r.args = args
										r.count = 1
										return r, true
									case "PUT":
										r.name = "GeneratesCSRs"
										r.summary = "Request the creation of certificate signing request (CSR) files for resources of a domain"
										r.operationID = "generatesCSRs"
										r.pathPattern = "/v1/domains/{id}/csrs"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/downloads"
									origElem := elem
									if l := len("/downloads"); len(elem) >= l && elem[0:l] == "/downloads" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "DownloadCSR"
											r.summary = "Request the download of CSR(s) for a domain in tar.gz format"
											r.operationID = "downloadCSR"
											r.pathPattern = "/v1/domains/{id}/csrs/downloads"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'd': // Prefix: "datastores/"
							origElem := elem
							if l := len("datastores/"); len(elem) >= l && elem[0:l] == "datastores/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "criteria"
								origElem := elem
								if l := len("criteria"); len(elem) >= l && elem[0:l] == "criteria" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetDatastoresCriteria"
										r.summary = "Get all datastore criteria"
										r.operationID = "getDatastoresCriteria"
										r.pathPattern = "/v1/domains/{domainId}/datastores/criteria"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetDatastoreCriterion"
											r.summary = "Get a criterion to query for datastore"
											r.operationID = "getDatastoreCriterion"
											r.pathPattern = "/v1/domains/{domainId}/datastores/criteria/{name}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'q': // Prefix: "queries"
								origElem := elem
								if l := len("queries"); len(elem) >= l && elem[0:l] == "queries" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "PostDatastoreQuery"
										r.summary = "Post a datastore query"
										r.operationID = "postDatastoreQuery"
										r.pathPattern = "/v1/domains/{domainId}/datastores/queries"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "queryId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetDatastoreQueryResponse"
											r.summary = "Get Datastore query response"
											r.operationID = "getDatastoreQueryResponse"
											r.pathPattern = "/v1/domains/{domainId}/datastores/queries/{queryId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'e': // Prefix: "endpoints"
							origElem := elem
							if l := len("endpoints"); len(elem) >= l && elem[0:l] == "endpoints" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetDomainEndpoints"
									r.summary = "Retrieve a list of endpoints or URLs for a domain by its ID"
									r.operationID = "getDomainEndpoints"
									r.pathPattern = "/v1/domains/{id}/endpoints"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'h': // Prefix: "health-checks"
							origElem := elem
							if l := len("health-checks"); len(elem) >= l && elem[0:l] == "health-checks" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetVsanHealthCheckByDomain"
									r.summary = "Retrieve vSAN Health Check status for a domain by its ID"
									r.operationID = "getVsanHealthCheckByDomain"
									r.pathPattern = "/v1/domains/{domainId}/health-checks"
									r.args = args
									r.count = 1
									return r, true
								case "PATCH":
									r.name = "UpdateVsanHealthCheckByDomain"
									r.summary = "Update the vSAN Health Check status for a domain"
									r.operationID = "updateVsanHealthCheckByDomain"
									r.pathPattern = "/v1/domains/{domainId}/health-checks"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'q': // Prefix: "queries/"
									origElem := elem
									if l := len("queries/"); len(elem) >= l && elem[0:l] == "queries/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "queryId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetVsanHealthCheckByQueryID"
											r.summary = "Retrieve vSAN Health Check status for a domain and query ID"
											r.operationID = "getVsanHealthCheckByQueryID"
											r.pathPattern = "/v1/domains/{domainId}/health-checks/queries/{queryId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 't': // Prefix: "tasks/"
									origElem := elem
									if l := len("tasks/"); len(elem) >= l && elem[0:l] == "tasks/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "taskId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetVsanHealthCheckByTaskID"
											r.summary = "Retrieve a vSAN Health Check by task ID"
											r.operationID = "getVsanHealthCheckByTaskID"
											r.pathPattern = "/v1/domains/{domainId}/health-checks/tasks/{taskId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'i': // Prefix: "isolation-prechecks"
							origElem := elem
							if l := len("isolation-prechecks"); len(elem) >= l && elem[0:l] == "isolation-prechecks" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "PerformDomainIsolationPrecheck"
									r.summary = "Perform Domain Isolation Prechecks"
									r.operationID = "performDomainIsolationPrecheck"
									r.pathPattern = "/v1/domains/{domainId}/isolation-prechecks"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "precheckId"
								// Leaf parameter
								args[1] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetDomainIsolationPrecheckStatus"
										r.summary = "Get the status of the Domain Isolation Precheck"
										r.operationID = "getDomainIsolationPrecheckStatus"
										r.pathPattern = "/v1/domains/{domainId}/isolation-prechecks/{precheckId}"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 'r': // Prefix: "resource-certificates"
							origElem := elem
							if l := len("resource-certificates"); len(elem) >= l && elem[0:l] == "resource-certificates" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetCertificatesByDomain"
									r.summary = "Retrieve the certificate details for all resources in a domain"
									r.operationID = "getCertificatesByDomain"
									r.pathPattern = "/v1/domains/{id}/resource-certificates"
									r.args = args
									r.count = 1
									return r, true
								case "PUT":
									r.name = "ReplaceResourceCertificates"
									r.summary = "Replace the certificate(s) for selected resources of a domain"
									r.operationID = "replaceResourceCertificates"
									r.pathPattern = "/v1/domains/{id}/resource-certificates"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/validations"
								origElem := elem
								if l := len("/validations"); len(elem) >= l && elem[0:l] == "/validations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "PUT":
										r.name = "ValidateResourceCertificates"
										r.summary = "Perform validation of the ResourceCertificateSpec specification"
										r.operationID = "validateResourceCertificates"
										r.pathPattern = "/v1/domains/{id}/resource-certificates/validations"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "validationId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetResourceCertificatesValidationByID"
											r.summary = "Retrieve the results of a certificate validation by its ID"
											r.operationID = "getResourceCertificatesValidationByID"
											r.pathPattern = "/v1/domains/{id}/resource-certificates/validations/{validationId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 't': // Prefix: "tags"
							origElem := elem
							if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = "RemoveTagsFromDomain"
									r.summary = "remove Tags From Domain"
									r.operationID = "removeTagsFromDomain"
									r.pathPattern = "/v1/domains/{id}/tags"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = "GetTagsAssignedToDomain"
									r.summary = "Get tags assigned to a domain"
									r.operationID = "getTagsAssignedToDomain"
									r.pathPattern = "/v1/domains/{id}/tags"
									r.args = args
									r.count = 1
									return r, true
								case "PUT":
									r.name = "AssignTagsToDomain"
									r.summary = "Assign tags to a domain"
									r.operationID = "assignTagsToDomain"
									r.pathPattern = "/v1/domains/{id}/tags"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "assignable-tags"
									origElem := elem
									if l := len("assignable-tags"); len(elem) >= l && elem[0:l] == "assignable-tags" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetAssignableTagsForDomain"
											r.summary = "Get tags assignable to a domain"
											r.operationID = "getAssignableTagsForDomain"
											r.pathPattern = "/v1/domains/{id}/tags/assignable-tags"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 't': // Prefix: "tag-manager"
									origElem := elem
									if l := len("tag-manager"); len(elem) >= l && elem[0:l] == "tag-manager" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetDomainTagManagerUrl"
											r.summary = "Get Domain Tag Manager Url"
											r.operationID = "getDomainTagManagerUrl"
											r.pathPattern = "/v1/domains/{id}/tags/tag-manager"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'v': // Prefix: "validations"
							origElem := elem
							if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "ValidateDomainUpdateSpec"
									r.summary = "Perform validation of the DomainUpdateSpec specification"
									r.operationID = "validateDomainUpdateSpec"
									r.pathPattern = "/v1/domains/{id}/validations"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "validationId"
								// Leaf parameter
								args[1] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetDomainUpdateValidation"
										r.summary = "Get the status of the validations for domain related operations"
										r.operationID = "getDomainUpdateValidation"
										r.pathPattern = "/v1/domains/{id}/validations/{validationId}"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'e': // Prefix: "edge-clusters"
				origElem := elem
				if l := len("edge-clusters"); len(elem) >= l && elem[0:l] == "edge-clusters" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetEdgeClusters"
						r.summary = "Retrieve a list of NSX Edge Clusters"
						r.operationID = "getEdgeClusters"
						r.pathPattern = "/v1/edge-clusters"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateEdgeCluster"
						r.summary = "Create an NSX Edge Cluster"
						r.operationID = "createEdgeCluster"
						r.pathPattern = "/v1/edge-clusters"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'v': // Prefix: "validations"
						origElem := elem
						if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "ValidateEdgeClusterCreationSpec"
								r.summary = "Perform validiation of the EdgeClusterCreationSpec specification"
								r.operationID = "validateEdgeClusterCreationSpec"
								r.pathPattern = "/v1/edge-clusters/validations"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetEdgeClusterValidationByID"
									r.summary = "Retrieve the results of a NSX Edge Cluster validation by its ID"
									r.operationID = "getEdgeClusterValidationByID"
									r.pathPattern = "/v1/edge-clusters/validations/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}
					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetEdgeCluster"
							r.summary = "Retrieve an NSX Edge Cluster by its ID"
							r.operationID = "getEdgeCluster"
							r.pathPattern = "/v1/edge-clusters/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateEdgeCluster"
							r.summary = "Expand or shrink an NSX Edge Cluster"
							r.operationID = "updateEdgeCluster"
							r.pathPattern = "/v1/edge-clusters/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "criteria"
							origElem := elem
							if l := len("criteria"); len(elem) >= l && elem[0:l] == "criteria" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetEdgeClusterQueryCriteria"
									r.summary = "Get the Edge Cluster criterion list for the NSX query"
									r.operationID = "getEdgeClusterQueryCriteria"
									r.pathPattern = "/v1/edge-clusters/{edgeClusterId}/criteria"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'v': // Prefix: "validations"
							origElem := elem
							if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "ValidateEdgeClusterUpdateSpec"
									r.summary = "Perform validation of the EdgeClusterUpdateSpec specification"
									r.operationID = "validateEdgeClusterUpdateSpec"
									r.pathPattern = "/v1/edge-clusters/{id}/validations"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'h': // Prefix: "hosts"
				origElem := elem
				if l := len("hosts"); len(elem) >= l && elem[0:l] == "hosts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "DELETE":
						r.name = "DecommissionHosts"
						r.summary = "Decommission the Hosts"
						r.operationID = "decommissionHosts"
						r.pathPattern = "/v1/hosts"
						r.args = args
						r.count = 0
						return r, true
					case "GET":
						r.name = "GetHosts"
						r.summary = "Get all hosts"
						r.operationID = "getHosts"
						r.pathPattern = "/v1/hosts"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CommissionHosts"
						r.summary = "Commission the Hosts"
						r.operationID = "commissionHosts"
						r.pathPattern = "/v1/hosts"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "criteria"
						origElem := elem
						if l := len("criteria"); len(elem) >= l && elem[0:l] == "criteria" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetCriteria"
								r.summary = ""
								r.operationID = "getCriteria"
								r.pathPattern = "/v1/hosts/criteria"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "name"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetCriterion"
									r.summary = ""
									r.operationID = "getCriterion"
									r.pathPattern = "/v1/hosts/criteria/{name}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'p': // Prefix: "prechecks"
						origElem := elem
						if l := len("prechecks"); len(elem) >= l && elem[0:l] == "prechecks" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "PostHostsPrechecks1"
								r.summary = ""
								r.operationID = "postHostsPrechecks_1"
								r.pathPattern = "/v1/hosts/prechecks"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetHostsPrechecksResponse"
									r.summary = ""
									r.operationID = "getHostsPrechecksResponse"
									r.pathPattern = "/v1/hosts/prechecks/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'q': // Prefix: "queries"
						origElem := elem
						if l := len("queries"); len(elem) >= l && elem[0:l] == "queries" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "PostQuery"
								r.summary = ""
								r.operationID = "postQuery"
								r.pathPattern = "/v1/hosts/queries"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetHostQueryResponse"
									r.summary = ""
									r.operationID = "getHostQueryResponse"
									r.pathPattern = "/v1/hosts/queries/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 't': // Prefix: "tags"
						origElem := elem
						if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetTagsAssignedToHosts"
								r.summary = ""
								r.operationID = "getTagsAssignedToHosts"
								r.pathPattern = "/v1/hosts/tags"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'v': // Prefix: "validations"
						origElem := elem
						if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "ValidateHostCommissionSpec"
								r.summary = "Perform validation of the  HostCommissionSpec specification"
								r.operationID = "validateHostCommissionSpec"
								r.pathPattern = "/v1/hosts/validations"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "commissions"
								origElem := elem
								if l := len("commissions"); len(elem) >= l && elem[0:l] == "commissions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "ValidateCommissionHosts"
										r.summary = "Validate the input specification to commission the Hosts"
										r.operationID = "validateCommissionHosts"
										r.pathPattern = "/v1/hosts/validations/commissions"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}
							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetHostCommissionValidationByID"
									r.summary = "Retrieve the results of a host commission validation by its ID"
									r.operationID = "getHostCommissionValidationByID"
									r.pathPattern = "/v1/hosts/validations/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}
					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetHost"
							r.summary = "Get a host by its ID"
							r.operationID = "getHost"
							r.pathPattern = "/v1/hosts/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/tags"
						origElem := elem
						if l := len("/tags"); len(elem) >= l && elem[0:l] == "/tags" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "RemoveTagsFromHost"
								r.summary = ""
								r.operationID = "removeTagsFromHost"
								r.pathPattern = "/v1/hosts/{id}/tags"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetTagsAssignedToHost"
								r.summary = ""
								r.operationID = "getTagsAssignedToHost"
								r.pathPattern = "/v1/hosts/{id}/tags"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = "AssignTagsToHost"
								r.summary = ""
								r.operationID = "assignTagsToHost"
								r.pathPattern = "/v1/hosts/{id}/tags"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "assignable-tags"
								origElem := elem
								if l := len("assignable-tags"); len(elem) >= l && elem[0:l] == "assignable-tags" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetAssignableTagForHost"
										r.summary = ""
										r.operationID = "getAssignableTagForHost"
										r.pathPattern = "/v1/hosts/{id}/tags/assignable-tags"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 't': // Prefix: "tag-manager"
								origElem := elem
								if l := len("tag-manager"); len(elem) >= l && elem[0:l] == "tag-manager" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetHostTagManagerUrl"
										r.summary = ""
										r.operationID = "getHostTagManagerUrl"
										r.pathPattern = "/v1/hosts/{id}/tags/tag-manager"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'i': // Prefix: "identity-"
				origElem := elem
				if l := len("identity-"); len(elem) >= l && elem[0:l] == "identity-" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'b': // Prefix: "broker/"
					origElem := elem
					if l := len("broker/"); len(elem) >= l && elem[0:l] == "broker/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "prechecks"
						origElem := elem
						if l := len("prechecks"); len(elem) >= l && elem[0:l] == "prechecks" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetIdentityPrecheckResult"
								r.summary = "Get Identity Provider Federation Precheck Result"
								r.operationID = "getIdentityPrecheckResult"
								r.pathPattern = "/v1/identity-broker/prechecks"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 's': // Prefix: "sddc-manager-oidc"
						origElem := elem
						if l := len("sddc-manager-oidc"); len(elem) >= l && elem[0:l] == "sddc-manager-oidc" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetSddcWs1bOidcInfo"
								r.summary = "Get the SDDC Manager WS1B OIDC Information"
								r.operationID = "getSddcWs1bOidcInfo"
								r.pathPattern = "/v1/identity-broker/sddc-manager-oidc"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'p': // Prefix: "providers"
					origElem := elem
					if l := len("providers"); len(elem) >= l && elem[0:l] == "providers" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetIdentityProviders"
							r.summary = "Get all identity providers"
							r.operationID = "getIdentityProviders"
							r.pathPattern = "/v1/identity-providers"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetIdentityProviderById"
								r.summary = "Get an identity provider by its id"
								r.operationID = "getIdentityProviderById"
								r.pathPattern = "/v1/identity-providers/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/sync-client"
							origElem := elem
							if l := len("/sync-client"); len(elem) >= l && elem[0:l] == "/sync-client" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "GenerateSyncClientToken"
									r.summary = "Generate new sync client token"
									r.operationID = "generateSyncClientToken"
									r.pathPattern = "/v1/identity-providers/{id}/sync-client"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'l': // Prefix: "license-keys"
				origElem := elem
				if l := len("license-keys"); len(elem) >= l && elem[0:l] == "license-keys" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetLicenseKeys"
						r.summary = "Retrieve a list of license keys"
						r.operationID = "getLicenseKeys"
						r.pathPattern = "/v1/license-keys"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "AddLicenseKey"
						r.summary = "Add a a new license key"
						r.operationID = "addLicenseKey"
						r.pathPattern = "/v1/license-keys"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "product-types"
						origElem := elem
						if l := len("product-types"); len(elem) >= l && elem[0:l] == "product-types" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetLicenseProductTypes"
								r.summary = "Get product types"
								r.operationID = "getLicenseProductTypes"
								r.pathPattern = "/v1/license-keys/product-types"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}
					// Param: "key"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = "RemoveLicenseKey"
							r.summary = "Remove a license key"
							r.operationID = "removeLicenseKey"
							r.pathPattern = "/v1/license-keys/{key}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "GetLicenseKey"
							r.summary = "Retrieve a license key"
							r.operationID = "getLicenseKey"
							r.pathPattern = "/v1/license-keys/{key}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateLicenseKey"
							r.summary = "Update the license key"
							r.operationID = "updateLicenseKey"
							r.pathPattern = "/v1/license-keys/{key}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'n': // Prefix: "n"
				origElem := elem
				if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "etwork-pools"
					origElem := elem
					if l := len("etwork-pools"); len(elem) >= l && elem[0:l] == "etwork-pools" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetNetworkPool"
							r.summary = "Get the list of all Network Pools"
							r.operationID = "getNetworkPool"
							r.pathPattern = "/v1/network-pools"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateNetworkPool"
							r.summary = "Create a Network Pool"
							r.operationID = "createNetworkPool"
							r.pathPattern = "/v1/network-pools"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteNetworkPool"
								r.summary = "Delete a Network Pool"
								r.operationID = "deleteNetworkPool"
								r.pathPattern = "/v1/network-pools/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetNetworkPoolByID"
								r.summary = "Get a Network Pool"
								r.operationID = "getNetworkPoolByID"
								r.pathPattern = "/v1/network-pools/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateNetworkPool"
								r.summary = "Update Network Pool"
								r.operationID = "updateNetworkPool"
								r.pathPattern = "/v1/network-pools/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/networks"
							origElem := elem
							if l := len("/networks"); len(elem) >= l && elem[0:l] == "/networks" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetNetworksOfNetworkPool"
									r.summary = "Get the Networks of a Network Pool"
									r.operationID = "getNetworksOfNetworkPool"
									r.pathPattern = "/v1/network-pools/{id}/networks"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "networkId"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetNetworkOfNetworkPool"
										r.summary = "Get a Network of a Network Pool"
										r.operationID = "getNetworkOfNetworkPool"
										r.pathPattern = "/v1/network-pools/{id}/networks/{networkId}"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/ip-pools"
									origElem := elem
									if l := len("/ip-pools"); len(elem) >= l && elem[0:l] == "/ip-pools" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "DeleteIpPoolFromNetworkOfNetworkPool"
											r.summary = "Delete an IP Pool from a Network of a Network Pool"
											r.operationID = "deleteIpPoolFromNetworkOfNetworkPool"
											r.pathPattern = "/v1/network-pools/{id}/networks/{networkId}/ip-pools"
											r.args = args
											r.count = 2
											return r, true
										case "POST":
											r.name = "AddIpPoolToNetworkOfNetworkPool"
											r.summary = "Add an IP Pool to a Network of a Network Pool"
											r.operationID = "addIpPoolToNetworkOfNetworkPool"
											r.pathPattern = "/v1/network-pools/{id}/networks/{networkId}/ip-pools"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "sx"
					origElem := elem
					if l := len("sx"); len(elem) >= l && elem[0:l] == "sx" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '-': // Prefix: "-alb-clusters"
						origElem := elem
						if l := len("-alb-clusters"); len(elem) >= l && elem[0:l] == "-alb-clusters" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetALBClusters"
								r.summary = "Retrieve a list of NSX ALB Clusters"
								r.operationID = "getALBClusters"
								r.pathPattern = "/v1/nsx-alb-clusters"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'f': // Prefix: "form-factors"
								origElem := elem
								if l := len("form-factors"); len(elem) >= l && elem[0:l] == "form-factors" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetALBClustersFormFactors"
										r.summary = "Retrieve a list of NSX ALB Clusters Form Factors"
										r.operationID = "getALBClustersFormFactors"
										r.pathPattern = "/v1/nsx-alb-clusters/form-factors"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'v': // Prefix: "validations"
								origElem := elem
								if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "ValidateALBClusterCreationSpec"
										r.summary = "Perform validiation of the NsxAlbControllerClusterSpec specification"
										r.operationID = "validateALBClusterCreationSpec"
										r.pathPattern = "/v1/nsx-alb-clusters/validations"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/version"
									origElem := elem
									if l := len("/version"); len(elem) >= l && elem[0:l] == "/version" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = "ValidateNsxALBCompatibility"
											r.summary = "Validate NSX ALB compatibility version"
											r.operationID = "validateNsxALBCompatibility"
											r.pathPattern = "/v1/nsx-alb-clusters/validations/version"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}
							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = "DeleteALBCluster"
									r.summary = "Deletes an NSX ALB Cluster by its ID"
									r.operationID = "deleteALBCluster"
									r.pathPattern = "/v1/nsx-alb-clusters/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = "GetALBCluster"
									r.summary = "Retrieve an NSX ALB Cluster by its ID"
									r.operationID = "getALBCluster"
									r.pathPattern = "/v1/nsx-alb-clusters/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 't': // Prefix: "t-clusters"
						origElem := elem
						if l := len("t-clusters"); len(elem) >= l && elem[0:l] == "t-clusters" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetNsxClusters"
								r.summary = "Retrieve a list of NSX clusters"
								r.operationID = "getNsxClusters"
								r.pathPattern = "/v1/nsxt-clusters"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "criteria"
								origElem := elem
								if l := len("criteria"); len(elem) >= l && elem[0:l] == "criteria" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetNsxCriteria"
										r.summary = "Get all NSX criteria"
										r.operationID = "getNsxCriteria"
										r.pathPattern = "/v1/nsxt-clusters/criteria"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetNsxCriterion"
											r.summary = "Get a NSX criterion"
											r.operationID = "getNsxCriterion"
											r.pathPattern = "/v1/nsxt-clusters/criteria/{name}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'i': // Prefix: "ip-address-pools/validations"
								origElem := elem
								if l := len("ip-address-pools/validations"); len(elem) >= l && elem[0:l] == "ip-address-pools/validations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "ValidateIpPool"
										r.summary = ""
										r.operationID = "validateIpPool"
										r.pathPattern = "/v1/nsxt-clusters/ip-address-pools/validations"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetValidationResult"
											r.summary = ""
											r.operationID = "getValidationResult"
											r.pathPattern = "/v1/nsxt-clusters/ip-address-pools/validations/{id}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'o': // Prefix: "oidcs"
								origElem := elem
								if l := len("oidcs"); len(elem) >= l && elem[0:l] == "oidcs" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "ConnectOpenId"
										r.summary = ""
										r.operationID = "connectOpenId"
										r.pathPattern = "/v1/nsxt-clusters/oidcs"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'q': // Prefix: "queries"
								origElem := elem
								if l := len("queries"); len(elem) >= l && elem[0:l] == "queries" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "StartNsxCriteriaQuery"
										r.summary = "Start a query with NSX Criteria"
										r.operationID = "startNsxCriteriaQuery"
										r.pathPattern = "/v1/nsxt-clusters/queries"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetNsxClusterQueryResponse"
											r.summary = "Get NSX cluster query response"
											r.operationID = "getNsxClusterQueryResponse"
											r.pathPattern = "/v1/nsxt-clusters/queries/{id}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}
							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetNsxCluster"
									r.summary = "Retrieve the details of an NSX cluster by its ID"
									r.operationID = "getNsxCluster"
									r.pathPattern = "/v1/nsxt-clusters/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "ip-address-pools"
									origElem := elem
									if l := len("ip-address-pools"); len(elem) >= l && elem[0:l] == "ip-address-pools" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetNsxIpAddressPools"
											r.summary = "Retrive a list of NSX IP Address Pools by the NSX cluster ID"
											r.operationID = "getNsxIpAddressPools"
											r.pathPattern = "/v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetNsxIpAddressPool"
												r.summary = "Retrieve an NSX IP Address Pool by its name"
												r.operationID = "getNsxIpAddressPool"
												r.pathPattern = "/v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools/{name}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								case 't': // Prefix: "transport-zones"
									origElem := elem
									if l := len("transport-zones"); len(elem) >= l && elem[0:l] == "transport-zones" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetNsxTransportZones"
											r.summary = "Retrieve list of all NSX transport zones"
											r.operationID = "getNsxTransportZones"
											r.pathPattern = "/v1/nsxt-clusters/{nsxt-cluster-id}/transport-zones"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'p': // Prefix: "p"
				origElem := elem
				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "ersonalities"
					origElem := elem
					if l := len("ersonalities"); len(elem) >= l && elem[0:l] == "ersonalities" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeletePersonality"
							r.summary = "Delete the personality based on either name or id"
							r.operationID = "deletePersonality"
							r.pathPattern = "/v1/personalities"
							r.args = args
							r.count = 0
							return r, true
						case "GET":
							r.name = "GetPersonalities"
							r.summary = "Get the Personalities"
							r.operationID = "getPersonalities"
							r.pathPattern = "/v1/personalities"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "UploadPersonality"
							r.summary = "Upload a Personality"
							r.operationID = "uploadPersonality"
							r.pathPattern = "/v1/personalities"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'f': // Prefix: "files"
							origElem := elem
							if l := len("files"); len(elem) >= l && elem[0:l] == "files" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PUT":
									r.name = "UploadPersonalityFiles"
									r.summary = "Upload personality files to SDDC Manager"
									r.operationID = "uploadPersonalityFiles"
									r.pathPattern = "/v1/personalities/files"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "personalityId"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetPersonality"
								r.summary = "Get a Personality by its id"
								r.operationID = "getPersonality"
								r.pathPattern = "/v1/personalities/{personalityId}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "RenamePersonalityById"
								r.summary = "Rename personality based on ID"
								r.operationID = "renamePersonalityById"
								r.pathPattern = "/v1/personalities/{personalityId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "roduct-version-catalog"
					origElem := elem
					if l := len("roduct-version-catalog"); len(elem) >= l && elem[0:l] == "roduct-version-catalog" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetProductVersionCatalog"
							r.summary = "Get product version catalog"
							r.operationID = "getProductVersionCatalog"
							r.pathPattern = "/v1/product-version-catalog"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "UploadProductVersionCatalog"
							r.summary = "Upload product version catalog"
							r.operationID = "uploadProductVersionCatalog"
							r.pathPattern = "/v1/product-version-catalog"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 's': // Prefix: "scs"
					origElem := elem
					if l := len("scs"); len(elem) >= l && elem[0:l] == "scs" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetPscs"
							r.summary = "Retrieve a list of Platform Service Controller (PSC)"
							r.operationID = "getPscs"
							r.pathPattern = "/v1/pscs"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetPsc"
								r.summary = "Retrieve details of a Platform Service Controller (PSC)"
								r.operationID = "getPsc"
								r.pathPattern = "/v1/pscs/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'r': // Prefix: "r"
				origElem := elem
				if l := len("r"); len(elem) >= l && elem[0:l] == "r" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "e"
					origElem := elem
					if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'l': // Prefix: "leases"
						origElem := elem
						if l := len("leases"); len(elem) >= l && elem[0:l] == "leases" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetReleases"
								r.summary = "Retrieve a list of release including current and target versions"
								r.operationID = "getReleases"
								r.pathPattern = "/v1/releases"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'd': // Prefix: "domains"
								origElem := elem
								if l := len("domains"); len(elem) >= l && elem[0:l] == "domains" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetReleaseByDomains"
										r.summary = "Retrieve a release view for all domains"
										r.operationID = "getReleaseByDomains"
										r.pathPattern = "/v1/releases/domains"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'v': // Prefix: "validations/"
										origElem := elem
										if l := len("validations/"); len(elem) >= l && elem[0:l] == "validations/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "validationId"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetDomainReleaseViewValidation"
												r.summary = "Retrieve a domain target state validation by its validation id"
												r.operationID = "getDomainReleaseViewValidation"
												r.pathPattern = "/v1/releases/domains/validations/{validationId}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}
									// Param: "domainId"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch method {
										case "DELETE":
											r.name = "DeleteReleaseByDomainID"
											r.summary = "Delete the target release by its domain ID"
											r.operationID = "deleteReleaseByDomainID"
											r.pathPattern = "/v1/releases/domains/{domainId}"
											r.args = args
											r.count = 1
											return r, true
										case "GET":
											r.name = "GetReleaseByDomain"
											r.summary = "Retrieve a release view for a domain by its ID"
											r.operationID = "getReleaseByDomain"
											r.pathPattern = "/v1/releases/domains/{domainId}"
											r.args = args
											r.count = 1
											return r, true
										case "PATCH":
											r.name = "UpdateReleaseByDomainID"
											r.summary = "Modify the target upgrade release for a domain by its ID"
											r.operationID = "updateReleaseByDomainID"
											r.pathPattern = "/v1/releases/domains/{domainId}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "custom-patches"
											origElem := elem
											if l := len("custom-patches"); len(elem) >= l && elem[0:l] == "custom-patches" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "GET":
													r.name = "GetCustomPatches"
													r.summary = "Retrieve the list of custom patches for BOM products associated with or applicable on a VCF domain"
													r.operationID = "getCustomPatches"
													r.pathPattern = "/v1/releases/domains/{domainId}/custom-patches"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

											elem = origElem
										case 'f': // Prefix: "future-releases"
											origElem := elem
											if l := len("future-releases"); len(elem) >= l && elem[0:l] == "future-releases" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "GET":
													r.name = "GetFutureReleases"
													r.summary = "Retrive a list of future release by domain ID"
													r.operationID = "getFutureReleases"
													r.pathPattern = "/v1/releases/domains/{domainId}/future-releases"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

											elem = origElem
										case 'v': // Prefix: "validations"
											origElem := elem
											if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = "ValidateReleaseByDomainID"
													r.summary = "Validate the target selected upgrade version for the domain"
													r.operationID = "validateReleaseByDomainID"
													r.pathPattern = "/v1/releases/domains/{domainId}/validations"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "system"
								origElem := elem
								if l := len("system"); len(elem) >= l && elem[0:l] == "system" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetSystemRelease"
										r.summary = "Retrieve the lowest deployed release of VMware Cloud Foundation"
										r.operationID = "getSystemRelease"
										r.pathPattern = "/v1/releases/system"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 's': // Prefix: "s"
						origElem := elem
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'o': // Prefix: "ource"
							origElem := elem
							if l := len("ource"); len(elem) >= l && elem[0:l] == "ource" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '-': // Prefix: "-"
								origElem := elem
								if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'f': // Prefix: "functionalities"
									origElem := elem
									if l := len("functionalities"); len(elem) >= l && elem[0:l] == "functionalities" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetResourceFunctionalities"
											r.summary = "Get Resource Functionalities"
											r.operationID = "getResourceFunctionalities"
											r.pathPattern = "/v1/resource-functionalities"
											r.args = args
											r.count = 0
											return r, true
										case "PATCH":
											r.name = "UpdateResourcesFunctionalities"
											r.summary = "Update Resources Functionalities"
											r.operationID = "updateResourcesFunctionalities"
											r.pathPattern = "/v1/resource-functionalities"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/global"
										origElem := elem
										if l := len("/global"); len(elem) >= l && elem[0:l] == "/global" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetResourcesFunctionalitiesAllowedGlobal"
												r.summary = "Get Resource Functionalities Allowed Global Configuration"
												r.operationID = "getResourcesFunctionalitiesAllowedGlobal"
												r.pathPattern = "/v1/resource-functionalities/global"
												r.args = args
												r.count = 0
												return r, true
											case "PATCH":
												r.name = "UpdateResourcesFunctionalities1"
												r.summary = "Update Resources Functionalities Is Allowed Global Configuration"
												r.operationID = "updateResourcesFunctionalities_1"
												r.pathPattern = "/v1/resource-functionalities/global"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								case 'w': // Prefix: "warnings"
									origElem := elem
									if l := len("warnings"); len(elem) >= l && elem[0:l] == "warnings" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetResourceWarnings"
											r.summary = "Get Resource Warnings"
											r.operationID = "getResourceWarnings"
											r.pathPattern = "/v1/resource-warnings"
											r.args = args
											r.count = 0
											return r, true
										case "POST":
											r.name = "CreateResourceWarning"
											r.summary = "Create a new Resource Warning"
											r.operationID = "createResourceWarning"
											r.pathPattern = "/v1/resource-warnings"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "id"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetResourceWarning"
												r.summary = "Get a Resource Warning by ID"
												r.operationID = "getResourceWarning"
												r.pathPattern = "/v1/resource-warnings/{id}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "s/licensing-infos"
								origElem := elem
								if l := len("s/licensing-infos"); len(elem) >= l && elem[0:l] == "s/licensing-infos" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "PUT":
										r.name = "SetLicenseKeyForResource"
										r.summary = "Update a license key for a resource"
										r.operationID = "setLicenseKeyForResource"
										r.pathPattern = "/v1/resources/licensing-infos"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 't': // Prefix: "tores/tasks"
							origElem := elem
							if l := len("tores/tasks"); len(elem) >= l && elem[0:l] == "tores/tasks" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "StartRestore"
									r.summary = "Start a restore operation"
									r.operationID = "startRestore"
									r.pathPattern = "/v1/restores/tasks"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetRestoreTask"
										r.summary = "Retrieve the restore task"
										r.operationID = "getRestoreTask"
										r.pathPattern = "/v1/restores/tasks/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "oles"
					origElem := elem
					if l := len("oles"); len(elem) >= l && elem[0:l] == "oles" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetRoles"
							r.summary = "Retrieve a list of roles from SDDC Manager"
							r.operationID = "getRoles"
							r.pathPattern = "/v1/roles"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 's': // Prefix: "s"
				origElem := elem
				if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "ddc"
					origElem := elem
					if l := len("ddc"); len(elem) >= l && elem[0:l] == "ddc" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '-': // Prefix: "-manager"
						origElem := elem
						if l := len("-manager"); len(elem) >= l && elem[0:l] == "-manager" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'l': // Prefix: "local-os-user-accounts"
								origElem := elem
								if l := len("local-os-user-accounts"); len(elem) >= l && elem[0:l] == "local-os-user-accounts" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetLocalOsUserAccounts"
										r.summary = "Get local OS user accounts from the SDDC Manager appliance"
										r.operationID = "getLocalOsUserAccounts"
										r.pathPattern = "/v1/sddc-manager/local-os-user-accounts"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 't': // Prefix: "trusted-certificates"
								origElem := elem
								if l := len("trusted-certificates"); len(elem) >= l && elem[0:l] == "trusted-certificates" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetTrustedCertificates"
										r.summary = "Retrieve all trusted certificates from SDDC Manager"
										r.operationID = "getTrustedCertificates"
										r.pathPattern = "/v1/sddc-manager/trusted-certificates"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "alias"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "DeleteTrustedCertificate"
											r.summary = "Delete a trusted certificate from the SDDC Manager"
											r.operationID = "deleteTrustedCertificate"
											r.pathPattern = "/v1/sddc-manager/trusted-certificates/{alias}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetSddcManagers"
									r.summary = "Retrieve a list of SDDC Managers"
									r.operationID = "getSddcManagers"
									r.pathPattern = "/v1/sddc-managers"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetSddcManager"
										r.summary = "Retrieve the details of an SDDC Manager by its id"
										r.operationID = "getSddcManager"
										r.pathPattern = "/v1/sddc-managers/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/history"
									origElem := elem
									if l := len("/history"); len(elem) >= l && elem[0:l] == "/history" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetSddcManagerHistory"
											r.summary = "Retrieve the history of SDDC Manager by its id"
											r.operationID = "getSddcManagerHistory"
											r.pathPattern = "/v1/sddc-managers/{id}/history"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 's': // Prefix: "s"
						origElem := elem
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetBringupTasks"
								r.summary = "Retrieve all bringup tasks"
								r.operationID = "getBringupTasks"
								r.pathPattern = "/v1/sddcs"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "StartBringup"
								r.summary = "Deploy a management domain"
								r.operationID = "startBringup"
								r.pathPattern = "/v1/sddcs"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "about"
								origElem := elem
								if l := len("about"); len(elem) >= l && elem[0:l] == "about" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetBringupAppInfo"
										r.summary = "Get information about the bringup application"
										r.operationID = "getBringupAppInfo"
										r.pathPattern = "/v1/sddcs/about"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'v': // Prefix: "validations"
								origElem := elem
								if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetBringupValidations"
										r.summary = "Retrieve a list of bringup validations"
										r.operationID = "getBringupValidations"
										r.pathPattern = "/v1/sddcs/validations"
										r.args = args
										r.count = 0
										return r, true
									case "POST":
										r.name = "ValidateBringupSpec"
										r.summary = "Perform validation of the SddcSpec specification"
										r.operationID = "validateBringupSpec"
										r.pathPattern = "/v1/sddcs/validations"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "validationId"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetBringupValidation"
											r.summary = "Retrieve the results of a bringup validation by its ID"
											r.operationID = "getBringupValidation"
											r.pathPattern = "/v1/sddcs/validations/{id}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/report"
										origElem := elem
										if l := len("/report"); len(elem) >= l && elem[0:l] == "/report" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "ExportBringupValidationReport"
												r.summary = "Get validation report by ID"
												r.operationID = "exportBringupValidationReport"
												r.pathPattern = "/v1/sddcs/validations/{validationId}/report"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}
							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetBringupTaskByID"
									r.summary = "Get a bringup task by its id"
									r.operationID = "getBringupTaskByID"
									r.pathPattern = "/v1/sddcs/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "PATCH":
									r.name = "RetrySddc"
									r.summary = "Retry failed SDDC creation"
									r.operationID = "retrySddc"
									r.pathPattern = "/v1/sddcs/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'd': // Prefix: "detail-report"
									origElem := elem
									if l := len("detail-report"); len(elem) >= l && elem[0:l] == "detail-report" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "ExportBringupDetailReport"
											r.summary = "Get bringup report by ID"
											r.operationID = "exportBringupDetailReport"
											r.pathPattern = "/v1/sddcs/{id}/detail-report"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 's': // Prefix: "sddc-manager"
									origElem := elem
									if l := len("sddc-manager"); len(elem) >= l && elem[0:l] == "sddc-manager" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetSddcManagerInfo"
											r.summary = "Retrieve SDDC Manager VM details"
											r.operationID = "getSddcManagerInfo"
											r.pathPattern = "/v1/sddcs/{id}/sddc-manager"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "so-domains"
					origElem := elem
					if l := len("so-domains"); len(elem) >= l && elem[0:l] == "so-domains" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetSSODomains"
							r.summary = "Retrieive a list of domains from  vCenter Single Sign-On"
							r.operationID = "getSSODomains"
							r.pathPattern = "/v1/sso-domains"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "sso-domain"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/entities"
							origElem := elem
							if l := len("/entities"); len(elem) >= l && elem[0:l] == "/entities" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetSSODomainEntities"
									r.summary = "Retrieve a list of users and groups from a domain in vCenter Single Sign-On"
									r.operationID = "getSSODomainEntities"
									r.pathPattern = "/v1/sso-domains/{sso-domain}/entities"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'y': // Prefix: "ystem"
					origElem := elem
					if l := len("ystem"); len(elem) >= l && elem[0:l] == "ystem" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetSystemConfiguration"
							r.summary = "Retrieve the system configuration"
							r.operationID = "getSystemConfiguration"
							r.pathPattern = "/v1/system"
							r.args = args
							r.count = 0
							return r, true
						case "PATCH":
							r.name = "UpdateSystemConfiguration"
							r.summary = "Updates paramters of the system configuration"
							r.operationID = "updateSystemConfiguration"
							r.pathPattern = "/v1/system"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "backup-configuration"
							origElem := elem
							if l := len("backup-configuration"); len(elem) >= l && elem[0:l] == "backup-configuration" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetBackupConfiguration"
									r.summary = "Retrieve the backup configuration for SDDC Manager and NSX Manager"
									r.operationID = "getBackupConfiguration"
									r.pathPattern = "/v1/system/backup-configuration"
									r.args = args
									r.count = 0
									return r, true
								case "PATCH":
									r.name = "UpdateBackupConfiguration"
									r.summary = "Update the backup configuration for SDDC Manager and NSX Manager"
									r.operationID = "updateBackupConfiguration"
									r.pathPattern = "/v1/system/backup-configuration"
									r.args = args
									r.count = 0
									return r, true
								case "PUT":
									r.name = "SetBackupConfiguration"
									r.summary = "Configure the backup configuration for SDDC Manager and NSX Manager"
									r.operationID = "setBackupConfiguration"
									r.pathPattern = "/v1/system/backup-configuration"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'b': // Prefix: "backup-locations"
									origElem := elem
									if l := len("backup-locations"); len(elem) >= l && elem[0:l] == "backup-locations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetBackupLocation"
											r.summary = "Retrieve the backup location details"
											r.operationID = "getBackupLocation"
											r.pathPattern = "/v1/system/backup-configuration/backup-locations"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'v': // Prefix: "validations"
									origElem := elem
									if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = "ValidateBackupConfigurationsOperations"
											r.summary = "Validation API for backup configuration for SDDC Manager and NSX Manager"
											r.operationID = "validateBackupConfigurationsOperations"
											r.pathPattern = "/v1/system/backup-configuration/validations"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'c': // Prefix: "c"
							origElem := elem
							if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "eip"
								origElem := elem
								if l := len("eip"); len(elem) >= l && elem[0:l] == "eip" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetCeipStatus"
										r.summary = "Retrieve the CEIP status"
										r.operationID = "getCeipStatus"
										r.pathPattern = "/v1/system/ceip"
										r.args = args
										r.count = 0
										return r, true
									case "PATCH":
										r.name = "SetCeipStatus"
										r.summary = "Configure CEIP to Opt-In or Opt-Out"
										r.operationID = "setCeipStatus"
										r.pathPattern = "/v1/system/ceip"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'h': // Prefix: "heck-sets"
								origElem := elem
								if l := len("heck-sets"); len(elem) >= l && elem[0:l] == "heck-sets" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetLastAssessmentRunInfo"
										r.summary = "Get information about the last assessment run"
										r.operationID = "getLastAssessmentRunInfo"
										r.pathPattern = "/v1/system/check-sets"
										r.args = args
										r.count = 0
										return r, true
									case "POST":
										r.name = "TriggerCheckRun"
										r.summary = "Trigger a run of the selected checks"
										r.operationID = "triggerCheckRun"
										r.pathPattern = "/v1/system/check-sets"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'q': // Prefix: "queries"
										origElem := elem
										if l := len("queries"); len(elem) >= l && elem[0:l] == "queries" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = "QueryCheckSets"
												r.summary = "Query for check-sets for the given resources"
												r.operationID = "queryCheckSets"
												r.pathPattern = "/v1/system/check-sets/queries"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}
									// Param: "runId"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetResult"
											r.summary = "Get the result for a given check run"
											r.operationID = "getResult"
											r.pathPattern = "/v1/system/check-sets/{runId}"
											r.args = args
											r.count = 1
											return r, true
										case "PATCH":
											r.name = "TriggerPartialRetryOfCheckRun"
											r.summary = "Trigger partial retry of a completed check run"
											r.operationID = "triggerPartialRetryOfCheckRun"
											r.pathPattern = "/v1/system/check-sets/{runId}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'd': // Prefix: "dns-configuration"
							origElem := elem
							if l := len("dns-configuration"); len(elem) >= l && elem[0:l] == "dns-configuration" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetDnsConfiguration"
									r.summary = "Retrieve the DNS configuration"
									r.operationID = "getDnsConfiguration"
									r.pathPattern = "/v1/system/dns-configuration"
									r.args = args
									r.count = 0
									return r, true
								case "PUT":
									r.name = "ConfigureDns"
									r.summary = "Update the DNS configuration"
									r.operationID = "configureDns"
									r.pathPattern = "/v1/system/dns-configuration"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/validations"
								origElem := elem
								if l := len("/validations"); len(elem) >= l && elem[0:l] == "/validations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetValidationsOfDNSConfiguration"
										r.summary = "Retrieve a list of DNS configuation validations"
										r.operationID = "getValidationsOfDNSConfiguration"
										r.pathPattern = "/v1/system/dns-configuration/validations"
										r.args = args
										r.count = 0
										return r, true
									case "POST":
										r.name = "ValidateDnsConfiguration"
										r.summary = "Perform validation of the DnsConfiguration specification"
										r.operationID = "validateDnsConfiguration"
										r.pathPattern = "/v1/system/dns-configuration/validations"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetValidationOfDnsConfiguration"
											r.summary = "Retrieve the results of a DNS configuration validation by its ID"
											r.operationID = "getValidationOfDnsConfiguration"
											r.pathPattern = "/v1/system/dns-configuration/validations/{id}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'h': // Prefix: "health-summary"
							origElem := elem
							if l := len("health-summary"); len(elem) >= l && elem[0:l] == "health-summary" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetHealthCheckTask"
									r.summary = "Retieve a list of Health Check tasks"
									r.operationID = "getHealthCheckTask"
									r.pathPattern = "/v1/system/health-summary"
									r.args = args
									r.count = 0
									return r, true
								case "POST":
									r.name = "StartHealthCheck"
									r.summary = "Start a Health Check operation using SoS"
									r.operationID = "startHealthCheck"
									r.pathPattern = "/v1/system/health-summary"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetHealthCheckStatus"
										r.summary = "Retrieve the status of the Health Check operations"
										r.operationID = "getHealthCheckStatus"
										r.pathPattern = "/v1/system/health-summary/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 'n': // Prefix: "ntp-configuration"
							origElem := elem
							if l := len("ntp-configuration"); len(elem) >= l && elem[0:l] == "ntp-configuration" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetNtpConfiguration"
									r.summary = "Retrieve the NTP configuration"
									r.operationID = "getNtpConfiguration"
									r.pathPattern = "/v1/system/ntp-configuration"
									r.args = args
									r.count = 0
									return r, true
								case "PUT":
									r.name = "ConfigureNtp"
									r.summary = "Update the NTP configuration"
									r.operationID = "configureNtp"
									r.pathPattern = "/v1/system/ntp-configuration"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/validations"
								origElem := elem
								if l := len("/validations"); len(elem) >= l && elem[0:l] == "/validations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetValidationsOfNtpConfiguration"
										r.summary = "Retrieve a list of NTP configuation validations"
										r.operationID = "getValidationsOfNtpConfiguration"
										r.pathPattern = "/v1/system/ntp-configuration/validations"
										r.args = args
										r.count = 0
										return r, true
									case "POST":
										r.name = "ValidateNtpConfiguration"
										r.summary = "Perform validation of the NtpConfiguration specification"
										r.operationID = "validateNtpConfiguration"
										r.pathPattern = "/v1/system/ntp-configuration/validations"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetValidationOfNtpConfiguration"
											r.summary = "Retrieve the results of a NTP configuration  validation by its ID"
											r.operationID = "getValidationOfNtpConfiguration"
											r.pathPattern = "/v1/system/ntp-configuration/validations/{id}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'p': // Prefix: "pr"
							origElem := elem
							if l := len("pr"); len(elem) >= l && elem[0:l] == "pr" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "echecks"
								origElem := elem
								if l := len("echecks"); len(elem) >= l && elem[0:l] == "echecks" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "StartPrecheck"
										r.summary = "Start a system precheck"
										r.operationID = "startPrecheck"
										r.pathPattern = "/v1/system/prechecks"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/tasks/"
									origElem := elem
									if l := len("/tasks/"); len(elem) >= l && elem[0:l] == "/tasks/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetPrecheckTask"
											r.summary = "Retrieve a precheck task by its id"
											r.operationID = "getPrecheckTask"
											r.pathPattern = "/v1/system/prechecks/tasks/{id}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'o': // Prefix: "oxy-configuration"
								origElem := elem
								if l := len("oxy-configuration"); len(elem) >= l && elem[0:l] == "oxy-configuration" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetProxyConfiguration"
										r.summary = "Get the current Proxy configuration"
										r.operationID = "getProxyConfiguration"
										r.pathPattern = "/v1/system/proxy-configuration"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'd': // Prefix: "ddc-spec-converter"
								origElem := elem
								if l := len("ddc-spec-converter"); len(elem) >= l && elem[0:l] == "ddc-spec-converter" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "StartBringupSpecConversion"
										r.summary = "Convert SDDC specification Json/Excel File"
										r.operationID = "startBringupSpecConversion"
										r.pathPattern = "/v1/system/sddc-spec-converter"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'e': // Prefix: "e"
								origElem := elem
								if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "curity/fips"
									origElem := elem
									if l := len("curity/fips"); len(elem) >= l && elem[0:l] == "curity/fips" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetFIPSConfiguration"
											r.summary = "Retrieve the FIPS configration mode"
											r.operationID = "getFIPSConfiguration"
											r.pathPattern = "/v1/system/security/fips"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 't': // Prefix: "ttings/"
									origElem := elem
									if l := len("ttings/"); len(elem) >= l && elem[0:l] == "ttings/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'd': // Prefix: "depot"
										origElem := elem
										if l := len("depot"); len(elem) >= l && elem[0:l] == "depot" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "DELETE":
												r.name = "DeleteDepotSettings"
												r.summary = "Delete the depot configuration"
												r.operationID = "deleteDepotSettings"
												r.pathPattern = "/v1/system/settings/depot"
												r.args = args
												r.count = 0
												return r, true
											case "GET":
												r.name = "GetDepotSettings"
												r.summary = "Retrieve the depot configuration"
												r.operationID = "getDepotSettings"
												r.pathPattern = "/v1/system/settings/depot"
												r.args = args
												r.count = 0
												return r, true
											case "PUT":
												r.name = "UpdateDepotSettings"
												r.summary = "Configure the depot credentials"
												r.operationID = "updateDepotSettings"
												r.pathPattern = "/v1/system/settings/depot"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 'v': // Prefix: "version-aliases"
										origElem := elem
										if l := len("version-aliases"); len(elem) >= l && elem[0:l] == "version-aliases" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "GetVersionAliasConfiguration"
												r.summary = "Retrieve Version Alias Configuration"
												r.operationID = "getVersionAliasConfiguration"
												r.pathPattern = "/v1/system/settings/version-aliases"
												r.args = args
												r.count = 0
												return r, true
											case "PUT":
												r.name = "UpdateVersionAliasConfigurations"
												r.summary = "Update Version Alias Configurations"
												r.operationID = "updateVersionAliasConfigurations"
												r.pathPattern = "/v1/system/settings/version-aliases"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "bundleComponentType"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												switch method {
												case "DELETE":
													r.name = "DeleteVersionAliasBySoftwareType"
													r.summary = "Removes Version Alias Configuration by component type"
													r.operationID = "deleteVersionAliasBySoftwareType"
													r.pathPattern = "/v1/system/settings/version-aliases/{bundleComponentType}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												origElem := elem
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "version"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "DELETE":
														r.name = "DeleteAliasVersionsBySoftwareTypeAndBaseVersion"
														r.summary = "Removes Version Alias Configuration by component type and version"
														r.operationID = "deleteAliasVersionsBySoftwareTypeAndBaseVersion"
														r.pathPattern = "/v1/system/settings/version-aliases/{bundleComponentType}/{version}"
														r.args = args
														r.count = 2
														return r, true
													case "PUT":
														r.name = "UpdateVersionAliasConfiguration"
														r.summary = "Update the Version Alias Configuration by component type"
														r.operationID = "updateVersionAliasConfiguration"
														r.pathPattern = "/v1/system/settings/version-aliases/{bundleComponentType}/{version}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}

												elem = origElem
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'u': // Prefix: "upport-bundles"
								origElem := elem
								if l := len("upport-bundles"); len(elem) >= l && elem[0:l] == "upport-bundles" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetSupportBundleTask"
										r.summary = "Retrieve a list of Support Bundle tasks"
										r.operationID = "getSupportBundleTask"
										r.pathPattern = "/v1/system/support-bundles"
										r.args = args
										r.count = 0
										return r, true
									case "POST":
										r.name = "StartSupportBundle"
										r.summary = "Start a Support Bundle operation using SoS"
										r.operationID = "startSupportBundle"
										r.pathPattern = "/v1/system/support-bundles"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetSupportBundleStatus"
											r.summary = "Retrive the status of the Support Bundle operation"
											r.operationID = "getSupportBundleStatus"
											r.pathPattern = "/v1/system/support-bundles/{id}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'u': // Prefix: "upgradables"
							origElem := elem
							if l := len("upgradables"); len(elem) >= l && elem[0:l] == "upgradables" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetUpgradables"
									r.summary = "Retrieve a list of all upgradable resources"
									r.operationID = "getUpgradables"
									r.pathPattern = "/v1/system/upgradables"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "t"
				origElem := elem
				if l := len("t"); len(elem) >= l && elem[0:l] == "t" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "asks"
					origElem := elem
					if l := len("asks"); len(elem) >= l && elem[0:l] == "asks" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetTasks"
							r.summary = "Retrieve a list of all tasks"
							r.operationID = "getTasks"
							r.pathPattern = "/v1/tasks"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "CancelTask"
								r.summary = "Cancel a Task"
								r.operationID = "cancelTask"
								r.pathPattern = "/v1/tasks/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetTask"
								r.summary = "Retrieve a task by its ID"
								r.operationID = "getTask"
								r.pathPattern = "/v1/tasks/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "RetryTask"
								r.summary = "Retry a Task"
								r.operationID = "retryTask"
								r.pathPattern = "/v1/tasks/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "okens"
					origElem := elem
					if l := len("okens"); len(elem) >= l && elem[0:l] == "okens" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = "CreateToken"
							r.summary = "Create Token Pair"
							r.operationID = "createToken"
							r.pathPattern = "/v1/tokens"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "access-token/refresh"
							origElem := elem
							if l := len("access-token/refresh"); len(elem) >= l && elem[0:l] == "access-token/refresh" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PATCH":
									r.name = "RefreshAccessToken"
									r.summary = "Refresh Access Token"
									r.operationID = "refreshAccessToken"
									r.pathPattern = "/v1/tokens/access-token/refresh"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'r': // Prefix: "refresh-token"
							origElem := elem
							if l := len("refresh-token"); len(elem) >= l && elem[0:l] == "refresh-token" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = "InvalidateRefreshToken"
									r.summary = "Invalidate Refresh Token"
									r.operationID = "invalidateRefreshToken"
									r.pathPattern = "/v1/tokens/refresh-token"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'u': // Prefix: "u"
				origElem := elem
				if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "pgrad"
					origElem := elem
					if l := len("pgrad"); len(elem) >= l && elem[0:l] == "pgrad" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "ables/domains/"
						origElem := elem
						if l := len("ables/domains/"); len(elem) >= l && elem[0:l] == "ables/domains/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "domainId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetUpgradablesByDomain"
								r.summary = "Retrieve a list of all upgradable resources for a domain by its ID"
								r.operationID = "getUpgradablesByDomain"
								r.pathPattern = "/v1/upgradables/domains/{domainId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "clusters"
								origElem := elem
								if l := len("clusters"); len(elem) >= l && elem[0:l] == "clusters" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetUpgradablesClusters"
										r.summary = "Retrieve a list of upgradable packages details from HSM for a domain by its ID"
										r.operationID = "getUpgradablesClusters"
										r.pathPattern = "/v1/upgradables/domains/{domainId}/clusters"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'n': // Prefix: "nsxt"
								origElem := elem
								if l := len("nsxt"); len(elem) >= l && elem[0:l] == "nsxt" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetNsxUpgradeResources"
										r.summary = "Retrieve a list of all upgradable NSX resources for a domain by its ID"
										r.operationID = "getNsxUpgradeResources"
										r.pathPattern = "/v1/upgradables/domains/{domainId}/nsxt"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'e': // Prefix: "es"
						origElem := elem
						if l := len("es"); len(elem) >= l && elem[0:l] == "es" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetUpgrades"
								r.summary = "Retrieve a list of upgrades"
								r.operationID = "getUpgrades"
								r.pathPattern = "/v1/upgrades"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "PerformUpgrade"
								r.summary = "Start an upgrade operation"
								r.operationID = "performUpgrade"
								r.pathPattern = "/v1/upgrades"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "upgradeId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetUpgradeById"
									r.summary = "Retrieve an upgrade by ID"
									r.operationID = "getUpgradeById"
									r.pathPattern = "/v1/upgrades/{upgradeId}"
									r.args = args
									r.count = 1
									return r, true
								case "PATCH":
									r.name = "UpdateUpgradeSchedule"
									r.summary = "Change a DRAFT upgrade to a SCHEDULED state"
									r.operationID = "updateUpgradeSchedule"
									r.pathPattern = "/v1/upgrades/{upgradeId}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/prechecks"
								origElem := elem
								if l := len("/prechecks"); len(elem) >= l && elem[0:l] == "/prechecks" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "StartUpgradePrecheck"
										r.summary = "Start an upgrade precheck operation"
										r.operationID = "startUpgradePrecheck"
										r.pathPattern = "/v1/upgrades/{upgradeId}/prechecks"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "precheckId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetUpgradePrecheckByID"
											r.summary = "Retrieve an upgrade precheck task by ID"
											r.operationID = "getUpgradePrecheckByID"
											r.pathPattern = "/v1/upgrades/{upgradeId}/prechecks/{precheckId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "sers"
					origElem := elem
					if l := len("sers"); len(elem) >= l && elem[0:l] == "sers" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetUsers"
							r.summary = "Retrieve a list of users from SDDC Manager"
							r.operationID = "getUsers"
							r.pathPattern = "/v1/users"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "AddUsers"
							r.summary = "Assign access to users in SDDC Manager"
							r.operationID = "addUsers"
							r.pathPattern = "/v1/users"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "local/admin"
							origElem := elem
							if l := len("local/admin"); len(elem) >= l && elem[0:l] == "local/admin" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = "DisableLocalAccount"
									r.summary = "Disable local account"
									r.operationID = "disableLocalAccount"
									r.pathPattern = "/v1/users/local/admin"
									r.args = args
									r.count = 0
									return r, true
								case "GET":
									r.name = "GetLocalAccount"
									r.summary = "Get local account details"
									r.operationID = "getLocalAccount"
									r.pathPattern = "/v1/users/local/admin"
									r.args = args
									r.count = 0
									return r, true
								case "PATCH":
									r.name = "UpdateLocalUserPassword"
									r.summary = "Update password for local account"
									r.operationID = "updateLocalUserPassword"
									r.pathPattern = "/v1/users/local/admin"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'u': // Prefix: "ui"
							origElem := elem
							if l := len("ui"); len(elem) >= l && elem[0:l] == "ui" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetUiUsers"
									r.summary = "Retrieve a list of users assigned access via SDDC Manager"
									r.operationID = "getUiUsers"
									r.pathPattern = "/v1/users/ui"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "RemoveUser"
								r.summary = "Remove access for a user in SDDC Manager"
								r.operationID = "removeUser"
								r.pathPattern = "/v1/users/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'v': // Prefix: "v"
				origElem := elem
				if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "asa-providers"
					origElem := elem
					if l := len("asa-providers"); len(elem) >= l && elem[0:l] == "asa-providers" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetVasaProviders"
							r.summary = "Get the VASA Providers"
							r.operationID = "getVasaProviders"
							r.pathPattern = "/v1/vasa-providers"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "AddVasaProvider"
							r.summary = "Add a VASA Provider"
							r.operationID = "addVasaProvider"
							r.pathPattern = "/v1/vasa-providers"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'v': // Prefix: "validations"
							origElem := elem
							if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "ValidateVasaProviderSpec"
									r.summary = "Validate VasaProvider input specification"
									r.operationID = "validateVasaProviderSpec"
									r.pathPattern = "/v1/vasa-providers/validations"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetVasaProviderValidation"
										r.summary = "Get the status of the validation of the VASA Provider"
										r.operationID = "getVasaProviderValidation"
										r.pathPattern = "/v1/vasa-providers/validations/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}
						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "RemoveVasaProvider"
								r.summary = "Delete a VASA Provider"
								r.operationID = "removeVasaProvider"
								r.pathPattern = "/v1/vasa-providers/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetVasaProvider"
								r.summary = "Get a VASA Provider"
								r.operationID = "getVasaProvider"
								r.pathPattern = "/v1/vasa-providers/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateVasaProvider"
								r.summary = "Update a VASA Provider"
								r.operationID = "updateVasaProvider"
								r.pathPattern = "/v1/vasa-providers/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 's': // Prefix: "storage-containers"
								origElem := elem
								if l := len("storage-containers"); len(elem) >= l && elem[0:l] == "storage-containers" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetVasaProviderStorageContainers"
										r.summary = "Get the storage containers of a VASA Provider"
										r.operationID = "getVasaProviderStorageContainers"
										r.pathPattern = "/v1/vasa-providers/{id}/storage-containers"
										r.args = args
										r.count = 1
										return r, true
									case "POST":
										r.name = "AddVasaProviderStorageContainer"
										r.summary = "Add the storage containers to a VASA Provider"
										r.operationID = "addVasaProviderStorageContainer"
										r.pathPattern = "/v1/vasa-providers/{id}/storage-containers"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "storageContainerId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "RemoveVasaProviderStorageContainer"
											r.summary = "Delete a storage container of a VASA Provider"
											r.operationID = "removeVasaProviderStorageContainer"
											r.pathPattern = "/v1/vasa-providers/{id}/storage-containers/{storageContainerId}"
											r.args = args
											r.count = 2
											return r, true
										case "PATCH":
											r.name = "UpdateVasaProviderStorageContainer"
											r.summary = "Update the storage container of a VASA Provider"
											r.operationID = "updateVasaProviderStorageContainer"
											r.pathPattern = "/v1/vasa-providers/{id}/storage-containers/{storageContainerId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'u': // Prefix: "users"
								origElem := elem
								if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetVasaProviderUser"
										r.summary = "Get the users of a VASA Provider"
										r.operationID = "getVasaProviderUser"
										r.pathPattern = "/v1/vasa-providers/{id}/users"
										r.args = args
										r.count = 1
										return r, true
									case "POST":
										r.name = "AddVasaProviderUser"
										r.summary = "Add the users to a VASA Provider"
										r.operationID = "addVasaProviderUser"
										r.pathPattern = "/v1/vasa-providers/{id}/users"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "userId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "PATCH":
											r.name = "UpdateVasaProviderUser"
											r.summary = "Update the user of a VASA Provider"
											r.operationID = "updateVasaProviderUser"
											r.pathPattern = "/v1/vasa-providers/{id}/users/{userId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'c': // Prefix: "c"
					origElem := elem
					if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "enters"
						origElem := elem
						if l := len("enters"); len(elem) >= l && elem[0:l] == "enters" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetVcenters"
								r.summary = "Retrieve a list of vCenter Servers"
								r.operationID = "getVcenters"
								r.pathPattern = "/v1/vcenters"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetVcenter"
									r.summary = "Retrieve a vCenter Server by its ID"
									r.operationID = "getVcenter"
									r.pathPattern = "/v1/vcenters/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'f': // Prefix: "f-services"
						origElem := elem
						if l := len("f-services"); len(elem) >= l && elem[0:l] == "f-services" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetVcfServices"
								r.summary = "Retrieve a list of SDDC Manager services"
								r.operationID = "getVcfServices"
								r.pathPattern = "/v1/vcf-services"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetVcfService"
									r.summary = "Retrieve an SDDC Manager service by its ID"
									r.operationID = "getVcfService"
									r.pathPattern = "/v1/vcf-services/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "r"
					origElem := elem
					if l := len("r"); len(elem) >= l && elem[0:l] == "r" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "as"
						origElem := elem
						if l := len("as"); len(elem) >= l && elem[0:l] == "as" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetVras"
								r.summary = "Retrieve a list of VMware Aria Automation instances"
								r.operationID = "getVras"
								r.pathPattern = "/v1/vras"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'l': // Prefix: "li"
						origElem := elem
						if l := len("li"); len(elem) >= l && elem[0:l] == "li" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/domains"
							origElem := elem
							if l := len("/domains"); len(elem) >= l && elem[0:l] == "/domains" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetVrliIntegratedDomains"
									r.summary = "Retrieve a list of VMware Aria Operations for Logs integration status for domains"
									r.operationID = "getVrliIntegratedDomains"
									r.pathPattern = "/v1/vrli/domains"
									r.args = args
									r.count = 0
									return r, true
								case "PUT":
									r.name = "ConnectVrliWithDomain"
									r.summary = ""
									r.operationID = "connectVrliWithDomain"
									r.pathPattern = "/v1/vrli/domains"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetVrlis"
									r.summary = "Retrieve a list of VMware Aria Operations for Logs instances"
									r.operationID = "getVrlis"
									r.pathPattern = "/v1/vrlis"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'o': // Prefix: "ops"
						origElem := elem
						if l := len("ops"); len(elem) >= l && elem[0:l] == "ops" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/domains"
							origElem := elem
							if l := len("/domains"); len(elem) >= l && elem[0:l] == "/domains" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetVropsIntegratedDomains"
									r.summary = "Retrieve a list of VMware Aria Operations integration status for domains"
									r.operationID = "getVropsIntegratedDomains"
									r.pathPattern = "/v1/vrops/domains"
									r.args = args
									r.count = 0
									return r, true
								case "PUT":
									r.name = "ConnectVropsWithDomain"
									r.summary = "Connect or disconnect a domain with VMware Aria Operations"
									r.operationID = "connectVropsWithDomain"
									r.pathPattern = "/v1/vrops/domains"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'e': // Prefix: "es"
							origElem := elem
							if l := len("es"); len(elem) >= l && elem[0:l] == "es" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetVropses"
									r.summary = "Retrieve a list of VMware Aria Operations instances"
									r.operationID = "getVropses"
									r.pathPattern = "/v1/vropses"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 's': // Prefix: "slcm"
						origElem := elem
						if l := len("slcm"); len(elem) >= l && elem[0:l] == "slcm" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "RollbackVrslcm"
								r.summary = "Remove VMware Aria Suite Lifecycle after an unsuccessful deployment"
								r.operationID = "rollbackVrslcm"
								r.pathPattern = "/v1/vrslcm"
								r.args = args
								r.count = 0
								return r, true
							case "GET":
								r.name = "GetVrslcm"
								r.summary = "Retrieve information about VMware Aria Suite Lifecycle"
								r.operationID = "getVrslcm"
								r.pathPattern = "/v1/vrslcm"
								r.args = args
								r.count = 0
								return r, true
							case "PUT":
								r.name = "UpdateVrslcmVersionInInventory"
								r.summary = "Update the version of VMware Aria Suite Lifecycle"
								r.operationID = "updateVrslcmVersionInInventory"
								r.pathPattern = "/v1/vrslcm"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/status"
							origElem := elem
							if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetVrslcmStatus"
									r.summary = "Retrieve information about VMware Aria Suite Lifecycle actual status"
									r.operationID = "getVrslcmStatus"
									r.pathPattern = "/v1/vrslcm/status"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetVrslcms"
									r.summary = "Get all existing VMware Aria Suite Lifecycle instances"
									r.operationID = "getVrslcms"
									r.pathPattern = "/v1/vrslcms"
									r.args = args
									r.count = 0
									return r, true
								case "POST":
									r.name = "DeployVrslcm"
									r.summary = "Deploy VMware Aria Suite Lifecycle"
									r.operationID = "deployVrslcm"
									r.pathPattern = "/v1/vrslcms"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'v': // Prefix: "validations"
									origElem := elem
									if l := len("validations"); len(elem) >= l && elem[0:l] == "validations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "ValidateVrslcm"
											r.summary = "Perform validation of the VrslcmDeploymentSpec specification"
											r.operationID = "validateVrslcm"
											r.pathPattern = "/v1/vrslcms/validations"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "id"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetVrslcmValidation"
												r.summary = "Retrieve the results of a VMware Aria Suite Lifecycle validation by its ID"
												r.operationID = "getVrslcmValidation"
												r.pathPattern = "/v1/vrslcms/validations/{id}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}
								// Param: "id"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "PUT":
										r.name = "UpdateVrslcmVersionByIdInInventory"
										r.summary = "Update the version of VMware Aria Suite Lifecycle based on its ID"
										r.operationID = "updateVrslcmVersionByIdInInventory"
										r.pathPattern = "/v1/vrslcms/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "san-hcl"
					origElem := elem
					if l := len("san-hcl"); len(elem) >= l && elem[0:l] == "san-hcl" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "PATCH":
							r.name = "DownloadVsanHcl"
							r.summary = "Download vSAN HCL"
							r.operationID = "downloadVsanHcl"
							r.pathPattern = "/v1/vsan-hcl"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "attributes"
							origElem := elem
							if l := len("attributes"); len(elem) >= l && elem[0:l] == "attributes" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetVsanHclAttributes"
									r.summary = "Get vSAN HCL attributes"
									r.operationID = "getVsanHclAttributes"
									r.pathPattern = "/v1/vsan-hcl/attributes"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'c': // Prefix: "configuration"
							origElem := elem
							if l := len("configuration"); len(elem) >= l && elem[0:l] == "configuration" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetVsanHclConfiguration"
									r.summary = "Get vSAN HCL configuration"
									r.operationID = "getVsanHclConfiguration"
									r.pathPattern = "/v1/vsan-hcl/configuration"
									r.args = args
									r.count = 0
									return r, true
								case "PATCH":
									r.name = "UpdateVsanHclConfiguration"
									r.summary = "Update vSAN HCL configuration"
									r.operationID = "updateVsanHclConfiguration"
									r.pathPattern = "/v1/vsan-hcl/configuration"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'w': // Prefix: "wsas"
				origElem := elem
				if l := len("wsas"); len(elem) >= l && elem[0:l] == "wsas" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = "GetWsas"
						r.summary = "Retrieve a list of Workspace ONE Access instances"
						r.operationID = "getWsas"
						r.pathPattern = "/v1/wsas"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
