// Code generated by ogen, DO NOT EDIT.

package vcf

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddDatastoreToCluster implements addDatastoreToCluster operation.
	//
	// Mount a datastore to a cluster.
	//
	// POST /v1/clusters/{id}/datastores
	AddDatastoreToCluster(ctx context.Context, req *DatastoreMountSpec, params AddDatastoreToClusterParams) (AddDatastoreToClusterRes, error)
	// AddIpPoolToNetworkOfNetworkPool implements addIpPoolToNetworkOfNetworkPool operation.
	//
	// Add an IP Pool to a Network of a Network Pool.
	//
	// POST /v1/network-pools/{id}/networks/{networkId}/ip-pools
	AddIpPoolToNetworkOfNetworkPool(ctx context.Context, req *IpPool, params AddIpPoolToNetworkOfNetworkPoolParams) (AddIpPoolToNetworkOfNetworkPoolRes, error)
	// AddLicenseKey implements addLicenseKey operation.
	//
	// Add a a new license key.
	//
	// POST /v1/license-keys
	AddLicenseKey(ctx context.Context, req *LicenseKey) (AddLicenseKeyRes, error)
	// AddUsers implements addUsers operation.
	//
	// Add list of users.
	//
	// POST /v1/users
	AddUsers(ctx context.Context, req []User) (AddUsersRes, error)
	// AddVasaProvider implements addVasaProvider operation.
	//
	// Add a VASA Provider.
	//
	// POST /v1/vasa-providers
	AddVasaProvider(ctx context.Context, req *VasaProvider) (AddVasaProviderRes, error)
	// AddVasaProviderStorageContainer implements addVasaProviderStorageContainer operation.
	//
	// Add the storage containers to a VASA Provider.
	//
	// POST /v1/vasa-providers/{id}/storage-containers
	AddVasaProviderStorageContainer(ctx context.Context, req []StorageContainer, params AddVasaProviderStorageContainerParams) (AddVasaProviderStorageContainerRes, error)
	// AddVasaProviderUser implements addVasaProviderUser operation.
	//
	// Add the users to a VASA Provider.
	//
	// POST /v1/vasa-providers/{id}/users
	AddVasaProviderUser(ctx context.Context, req []VasaUser, params AddVasaProviderUserParams) (AddVasaProviderUserRes, error)
	// AssignTagsToCluster implements assignTagsToCluster operation.
	//
	// Assign Tags to Cluster.
	//
	// PUT /v1/clusters/{id}/tags
	AssignTagsToCluster(ctx context.Context, req *TagsSpec, params AssignTagsToClusterParams) (AssignTagsToClusterRes, error)
	// AssignTagsToDomain implements assignTagsToDomain operation.
	//
	// Assign tags to a domain.
	//
	// PUT /v1/domains/{id}/tags
	AssignTagsToDomain(ctx context.Context, req *TagsSpec, params AssignTagsToDomainParams) (AssignTagsToDomainRes, error)
	// AssignTagsToHost implements assignTagsToHost operation.
	//
	// Assign tags to a host.
	//
	// PUT /v1/hosts/{id}/tags
	AssignTagsToHost(ctx context.Context, req *TagsSpec, params AssignTagsToHostParams) (AssignTagsToHostRes, error)
	// CancelCredentialsTask implements cancelCredentialsTask operation.
	//
	// Cancel a failed credential task by its ID.
	//
	// DELETE /v1/credentials/tasks/{id}
	CancelCredentialsTask(ctx context.Context, params CancelCredentialsTaskParams) (CancelCredentialsTaskRes, error)
	// CancelTask implements cancelTask operation.
	//
	// Cancel a Task by ID, if it exists.
	//
	// DELETE /v1/tasks/{id}
	CancelTask(ctx context.Context, params CancelTaskParams) (CancelTaskRes, error)
	// CommissionHosts implements commissionHosts operation.
	//
	// Commission the Hosts.
	//
	// POST /v1/hosts
	CommissionHosts(ctx context.Context, req []HostCommissionSpec) (CommissionHostsRes, error)
	// ComplianceAudit implements complianceAudit operation.
	//
	// Compliance audit of resource.
	//
	// POST /v1/domains/{id}/compliance-audits
	ComplianceAudit(ctx context.Context, req *ComplianceAuditSpec, params ComplianceAuditParams) (ComplianceAuditRes, error)
	// ConfigureCertificateAuthority implements configureCertificateAuthority operation.
	//
	// Update the configuration of a Certificate Authority.
	//
	// PATCH /v1/certificate-authorities
	ConfigureCertificateAuthority(ctx context.Context, req *CertificateAuthorityCreationSpec) (ConfigureCertificateAuthorityRes, error)
	// ConfigureDns implements configureDns operation.
	//
	// Update the DNS configuration.
	//
	// PUT /v1/system/dns-configuration
	ConfigureDns(ctx context.Context, req *DnsConfiguration) (ConfigureDnsRes, error)
	// ConfigureNtp implements configureNtp operation.
	//
	// Update the NTP configuration.
	//
	// PUT /v1/system/ntp-configuration
	ConfigureNtp(ctx context.Context, req *NtpConfiguration) (ConfigureNtpRes, error)
	// ConnectOpenId implements connectOpenId operation.
	//
	// POST /v1/nsxt-clusters/oidcs
	ConnectOpenId(ctx context.Context, req *NsxtOidcSpec) error
	// ConnectVrliWithDomain implements connectVrliWithDomain operation.
	//
	// Connect or disconnect a domain with VMware Aria Operations for Logs.
	//
	// PUT /v1/vrli/domains
	ConnectVrliWithDomain(ctx context.Context, req *DomainIntegration) (*Task, error)
	// ConnectVropsWithDomain implements connectVropsWithDomain operation.
	//
	// Connects/disconnects a workload domains with VMware Aria Operations.
	//
	// Deprecated: schema marks this operation as deprecated.
	//
	// PUT /v1/vrops/domains
	ConnectVropsWithDomain(ctx context.Context, req *DomainIntegration) (ConnectVropsWithDomainRes, error)
	// CreateAvns implements createAvns operation.
	//
	// Create Application Virtual Networks (AVN).
	//
	// POST /v1/avns
	CreateAvns(ctx context.Context, req *AvnsCreationSpec) (CreateAvnsRes, error)
	// CreateCertificateAuthority implements createCertificateAuthority operation.
	//
	// Creates a certificate authority. This is required to generate signed certificates by supporting
	// CAs.
	//
	// PUT /v1/certificate-authorities
	CreateCertificateAuthority(ctx context.Context, req *CertificateAuthorityCreationSpec) (CreateCertificateAuthorityRes, error)
	// CreateCluster implements createCluster operation.
	//
	// Create a cluster and add to an existing domain.
	//
	// POST /v1/clusters
	CreateCluster(ctx context.Context, req *ClusterCreationSpec) (CreateClusterRes, error)
	// CreateDomain implements createDomain operation.
	//
	// Create a domain.
	//
	// POST /v1/domains
	CreateDomain(ctx context.Context, req *DomainCreationSpec) (CreateDomainRes, error)
	// CreateEdgeCluster implements createEdgeCluster operation.
	//
	// Create an NSX Edge Cluster.
	//
	// POST /v1/edge-clusters
	CreateEdgeCluster(ctx context.Context, req *EdgeClusterCreationSpec) (CreateEdgeClusterRes, error)
	// CreateNetworkPool implements createNetworkPool operation.
	//
	// Create a Network Pool.
	//
	// POST /v1/network-pools
	CreateNetworkPool(ctx context.Context, req *NetworkPool) (CreateNetworkPoolRes, error)
	// CreateResourceWarning implements createResourceWarning operation.
	//
	// Create a new Resource Warning.
	//
	// POST /v1/resource-warnings
	CreateResourceWarning(ctx context.Context, req *ResourceWarningCreationSpec) (CreateResourceWarningRes, error)
	// CreateToken implements createToken operation.
	//
	// Creates access token and refresh token for user access.
	//
	// POST /v1/tokens
	CreateToken(ctx context.Context, req *TokenCreationSpec) (CreateTokenRes, error)
	// DecommissionHosts implements decommissionHosts operation.
	//
	// Decommission the Hosts.
	//
	// DELETE /v1/hosts
	DecommissionHosts(ctx context.Context, req []HostDecommissionSpec) (DecommissionHostsRes, error)
	// DeleteALBCluster implements deleteALBCluster operation.
	//
	// Deletes an NSX ALB Cluster by its ID.
	//
	// DELETE /v1/nsx-alb-clusters/{id}
	DeleteALBCluster(ctx context.Context, params DeleteALBClusterParams) (DeleteALBClusterRes, error)
	// DeleteAliasVersionsBySoftwareTypeAndBaseVersion implements deleteAliasVersionsBySoftwareTypeAndBaseVersion operation.
	//
	// Delete Version Alias Configuration by bundle component type, version, and aliases.
	//
	// DELETE /v1/system/settings/version-aliases/{bundleComponentType}/{version}
	DeleteAliasVersionsBySoftwareTypeAndBaseVersion(ctx context.Context, req []string, params DeleteAliasVersionsBySoftwareTypeAndBaseVersionParams) (DeleteAliasVersionsBySoftwareTypeAndBaseVersionRes, error)
	// DeleteBundle implements deleteBundle operation.
	//
	// Delete a Bundle by bundle ID.
	//
	// DELETE /v1/bundles/{id}
	DeleteBundle(ctx context.Context, params DeleteBundleParams) (DeleteBundleRes, error)
	// DeleteCluster implements deleteCluster operation.
	//
	// Delete a cluster from a domain if it has been previously initialized for deletion.
	//
	// DELETE /v1/clusters/{id}
	DeleteCluster(ctx context.Context, params DeleteClusterParams) (DeleteClusterRes, error)
	// DeleteCustomIsoById implements deleteCustomIsoById operation.
	//
	// Delete the Custom ISO based on ID.
	//
	// DELETE /v1/custom-isos/{custom_iso_id}
	DeleteCustomIsoById(ctx context.Context, params DeleteCustomIsoByIdParams) (DeleteCustomIsoByIdRes, error)
	// DeleteDepotSettings implements deleteDepotSettings operation.
	//
	// Delete the depot configuration if such is present within VCF.
	//
	// DELETE /v1/system/settings/depot
	DeleteDepotSettings(ctx context.Context, params DeleteDepotSettingsParams) (DeleteDepotSettingsRes, error)
	// DeleteDomain implements deleteDomain operation.
	//
	// Remove a domain if it has been previously initialized for deletion.
	//
	// DELETE /v1/domains/{id}
	DeleteDomain(ctx context.Context, params DeleteDomainParams) (DeleteDomainRes, error)
	// DeleteIpPoolFromNetworkOfNetworkPool implements deleteIpPoolFromNetworkOfNetworkPool operation.
	//
	// Delete an IP Pool from a Network of a Network Pool.
	//
	// DELETE /v1/network-pools/{id}/networks/{networkId}/ip-pools
	DeleteIpPoolFromNetworkOfNetworkPool(ctx context.Context, req *IpPool, params DeleteIpPoolFromNetworkOfNetworkPoolParams) (DeleteIpPoolFromNetworkOfNetworkPoolRes, error)
	// DeleteNetworkPool implements deleteNetworkPool operation.
	//
	// Delete the Network Pool by the ID, if it exists and is unused.
	//
	// DELETE /v1/network-pools/{id}
	DeleteNetworkPool(ctx context.Context, params DeleteNetworkPoolParams) (DeleteNetworkPoolRes, error)
	// DeletePersonality implements deletePersonality operation.
	//
	// Delete the personality based on either name or id.
	//
	// DELETE /v1/personalities
	DeletePersonality(ctx context.Context, params DeletePersonalityParams) (DeletePersonalityRes, error)
	// DeleteReleaseByDomainID implements deleteReleaseByDomainID operation.
	//
	// Delete last selected upgrade version for the domain.
	//
	// DELETE /v1/releases/domains/{domainId}
	DeleteReleaseByDomainID(ctx context.Context, params DeleteReleaseByDomainIDParams) (DeleteReleaseByDomainIDRes, error)
	// DeleteTrustedCertificate implements deleteTrustedCertificate operation.
	//
	// Delete a trusted certificate from the SDDC Manager.
	//
	// DELETE /v1/sddc-manager/trusted-certificates/{alias}
	DeleteTrustedCertificate(ctx context.Context, params DeleteTrustedCertificateParams) (DeleteTrustedCertificateRes, error)
	// DeleteVersionAliasBySoftwareType implements deleteVersionAliasBySoftwareType operation.
	//
	// Removes Version Alias Configuration by component type.
	//
	// DELETE /v1/system/settings/version-aliases/{bundleComponentType}
	DeleteVersionAliasBySoftwareType(ctx context.Context, params DeleteVersionAliasBySoftwareTypeParams) (DeleteVersionAliasBySoftwareTypeRes, error)
	// DeployVrslcm implements deployVrslcm operation.
	//
	// Triggers the VMware Aria Suite Lifecycle deployment operation and returns an URL in the headers to
	// track the operation status.
	//
	// POST /v1/vrslcms
	DeployVrslcm(ctx context.Context, req *VrslcmDeploymentSpec) (DeployVrslcmRes, error)
	// DisableLocalAccount implements disableLocalAccount operation.
	//
	// Disable local account.
	//
	// DELETE /v1/users/local/admin
	DisableLocalAccount(ctx context.Context) (DisableLocalAccountRes, error)
	// DomainCreateValidation implements domainCreateValidation operation.
	//
	// Gets the status of given domain create validation workflow by given validation id.
	//
	// GET /v1/domains/validations/{id}
	DomainCreateValidation(ctx context.Context, params DomainCreateValidationParams) (DomainCreateValidationRes, error)
	// DownloadCSR implements downloadCSR operation.
	//
	// Download available CSR(s) in tar.gz format.
	//
	// Deprecated: schema marks this operation as deprecated.
	//
	// GET /v1/domains/{id}/csrs/downloads
	DownloadCSR(ctx context.Context, params DownloadCSRParams) (DownloadCSRRes, error)
	// DownloadVsanHcl implements downloadVsanHcl operation.
	//
	// Download vSAN HCL if online connectivity is available. Timestamp of vSAN HCL on SDDC Manager is
	// checked with what is available online before download. vSAN HCL is downloaded only if new data is
	// available.
	//
	// PATCH /v1/vsan-hcl
	DownloadVsanHcl(ctx context.Context) (DownloadVsanHclRes, error)
	// ExportBringupDetailReport implements exportBringupDetailReport operation.
	//
	// Returns the bringup report. Reports are generated in PDF and CSV formats.
	//
	// GET /v1/sddcs/{id}/detail-report
	ExportBringupDetailReport(ctx context.Context, params ExportBringupDetailReportParams) (ExportBringupDetailReportRes, error)
	// ExportBringupValidationReport implements exportBringupValidationReport operation.
	//
	// Returns the bringup report for a validation. Reports are generated in PDF format.
	//
	// GET /v1/sddcs/validations/{validationId}/report
	ExportBringupValidationReport(ctx context.Context, params ExportBringupValidationReportParams) (ExportBringupValidationReportRes, error)
	// GenerateCertificates implements generateCertificates operation.
	//
	// Generate certificate(s) for the selected resource(s) in a domain. CA must be configured and CSR
	// must be generated beforehand.
	//
	// PUT /v1/domains/{id}/certificates
	GenerateCertificates(ctx context.Context, req *CertificatesGenerationSpec, params GenerateCertificatesParams) (GenerateCertificatesRes, error)
	// GenerateSyncClientToken implements generateSyncClientToken operation.
	//
	// Generates a new sync client token.
	//
	// POST /v1/identity-providers/{id}/sync-client
	GenerateSyncClientToken(ctx context.Context, params GenerateSyncClientTokenParams) (GenerateSyncClientTokenRes, error)
	// GeneratesCSRs implements generatesCSRs operation.
	//
	// Generate CSR(s) for the selected resource(s) in the domain.
	// *Warning:*
	// _Avoid using wildcard certificates. Instead, use subdomain-specific certificates that are rotated
	// often. A compromised wildcard certificate can lead to security repercussions_.
	//
	// PUT /v1/domains/{id}/csrs
	GeneratesCSRs(ctx context.Context, req *CsrsGenerationSpec, params GeneratesCSRsParams) (GeneratesCSRsRes, error)
	// GetALBCluster implements getALBCluster operation.
	//
	// Retrieve an NSX ALB Cluster by its ID.
	//
	// GET /v1/nsx-alb-clusters/{id}
	GetALBCluster(ctx context.Context, params GetALBClusterParams) (GetALBClusterRes, error)
	// GetALBClusters implements getALBClusters operation.
	//
	// Retrieve a list of NSX ALB Clusters.
	//
	// GET /v1/nsx-alb-clusters
	GetALBClusters(ctx context.Context, params GetALBClustersParams) (GetALBClustersRes, error)
	// GetALBClustersFormFactors implements getALBClustersFormFactors operation.
	//
	// Retrieve a list of NSX ALB Clusters Form Factors.
	//
	// GET /v1/nsx-alb-clusters/form-factors
	GetALBClustersFormFactors(ctx context.Context) (GetALBClustersFormFactorsRes, error)
	// GetAssignableTagForHost implements getAssignableTagForHost operation.
	//
	// Get tags assignable to a host.
	//
	// GET /v1/hosts/{id}/tags/assignable-tags
	GetAssignableTagForHost(ctx context.Context, params GetAssignableTagForHostParams) (GetAssignableTagForHostRes, error)
	// GetAssignableTagsForDomain implements getAssignableTagsForDomain operation.
	//
	// Get tags assignable to a domain.
	//
	// GET /v1/domains/{id}/tags/assignable-tags
	GetAssignableTagsForDomain(ctx context.Context, params GetAssignableTagsForDomainParams) (GetAssignableTagsForDomainRes, error)
	// GetAvns implements getAvns operation.
	//
	// Returns all matching AVNs.
	//
	// GET /v1/avns
	GetAvns(ctx context.Context, params GetAvnsParams) (GetAvnsRes, error)
	// GetBackupConfiguration implements getBackupConfiguration operation.
	//
	// Retrieve the backup configuration for SDDC Manager and NSX Manager.
	//
	// GET /v1/system/backup-configuration
	GetBackupConfiguration(ctx context.Context) (GetBackupConfigurationRes, error)
	// GetBackupLocation implements getBackupLocation operation.
	//
	// Retrieve the backup location details.
	//
	// GET /v1/system/backup-configuration/backup-locations
	GetBackupLocation(ctx context.Context, params GetBackupLocationParams) (GetBackupLocationRes, error)
	// GetBringupAppInfo implements getBringupAppInfo operation.
	//
	// GET Method to retrieve information about Bringup app.
	//
	// GET /v1/sddcs/about
	GetBringupAppInfo(ctx context.Context) (GetBringupAppInfoRes, error)
	// GetBringupTaskByID implements getBringupTaskByID operation.
	//
	// Get a bringup task by its id.
	//
	// GET /v1/sddcs/{id}
	GetBringupTaskByID(ctx context.Context, params GetBringupTaskByIDParams) (GetBringupTaskByIDRes, error)
	// GetBringupTasks implements getBringupTasks operation.
	//
	// Retrieve all bringup tasks.
	//
	// GET /v1/sddcs
	GetBringupTasks(ctx context.Context) (GetBringupTasksRes, error)
	// GetBringupValidation implements getBringupValidation operation.
	//
	// Retrieve the results of a bringup validation by its ID.
	//
	// GET /v1/sddcs/validations/{id}
	GetBringupValidation(ctx context.Context, params GetBringupValidationParams) (GetBringupValidationRes, error)
	// GetBringupValidations implements getBringupValidations operation.
	//
	// Retrieve a list of bringup validations.
	//
	// GET /v1/sddcs/validations
	GetBringupValidations(ctx context.Context) (GetBringupValidationsRes, error)
	// GetBundle implements getBundle operation.
	//
	// Get a Bundle.
	//
	// GET /v1/bundles/{id}
	GetBundle(ctx context.Context, params GetBundleParams) (GetBundleRes, error)
	// GetBundles implements getBundles operation.
	//
	// Get all Bundles i.e uploaded bundles and also bundles available via depot access.
	//
	// GET /v1/bundles
	GetBundles(ctx context.Context, params GetBundlesParams) (GetBundlesRes, error)
	// GetBundlesForSkipUpgrade implements getBundlesForSkipUpgrade operation.
	//
	// Get bundles for skip upgrade a domain from current version to target version.
	//
	// GET /v1/bundles/domains/{id}
	GetBundlesForSkipUpgrade(ctx context.Context, params GetBundlesForSkipUpgradeParams) (GetBundlesForSkipUpgradeRes, error)
	// GetCSRs implements getCSRs operation.
	//
	// Get available CSR(s) in json format.
	//
	// GET /v1/domains/{id}/csrs
	GetCSRs(ctx context.Context, params GetCSRsParams) (GetCSRsRes, error)
	// GetCeipStatus implements getCeipStatus operation.
	//
	// Get CEIP status and instance id.
	//
	// GET /v1/system/ceip
	GetCeipStatus(ctx context.Context) (GetCeipStatusRes, error)
	// GetCertificateAuthorities implements getCertificateAuthorities operation.
	//
	// Get certificate authorities information.
	//
	// GET /v1/certificate-authorities
	GetCertificateAuthorities(ctx context.Context) (GetCertificateAuthoritiesRes, error)
	// GetCertificateAuthorityById implements getCertificateAuthorityById operation.
	//
	// Get certificate authority information.
	//
	// GET /v1/certificate-authorities/{id}
	GetCertificateAuthorityById(ctx context.Context, params GetCertificateAuthorityByIdParams) (GetCertificateAuthorityByIdRes, error)
	// GetCertificatesByDomain implements getCertificatesByDomain operation.
	//
	// View detailed metadata about the certificate(s) of all the resources in a domain.
	//
	// GET /v1/domains/{id}/resource-certificates
	GetCertificatesByDomain(ctx context.Context, params GetCertificatesByDomainParams) (GetCertificatesByDomainRes, error)
	// GetCluster implements getCluster operation.
	//
	// Get a cluster by its ID.
	//
	// GET /v1/clusters/{id}
	GetCluster(ctx context.Context, params GetClusterParams) (GetClusterRes, error)
	// GetClusterCreateValidation implements getClusterCreateValidation operation.
	//
	// Gets the status of given cluster create validation workflow by given validation id.
	//
	// GET /v1/clusters/validations/{id}
	GetClusterCreateValidation(ctx context.Context, params GetClusterCreateValidationParams) (GetClusterCreateValidationRes, error)
	// GetClusterCriteria implements getClusterCriteria operation.
	//
	// Get all cluster criteria.
	//
	// GET /v1/domains/{domainId}/clusters/criteria
	GetClusterCriteria(ctx context.Context, params GetClusterCriteriaParams) (*PageOfClusterCriterion, error)
	// GetClusterCriterion implements getClusterCriterion operation.
	//
	// Get a criterion to query for cluster.
	//
	// GET /v1/domains/{domainId}/clusters/criteria/{name}
	GetClusterCriterion(ctx context.Context, params GetClusterCriterionParams) (GetClusterCriterionRes, error)
	// GetClusterDatastores implements getClusterDatastores operation.
	//
	// Get the list of all datastores associated with the cluster.
	//
	// GET /v1/clusters/{id}/datastores
	GetClusterDatastores(ctx context.Context, params GetClusterDatastoresParams) (GetClusterDatastoresRes, error)
	// GetClusterNetworkConfiguration implements getClusterNetworkConfiguration operation.
	//
	// Get cluster network configuration.
	//
	// POST /v1/clusters/{id}/network/queries
	GetClusterNetworkConfiguration(ctx context.Context, req *ClusterNetworkConfigurationCriterion, params GetClusterNetworkConfigurationParams) (GetClusterNetworkConfigurationRes, error)
	// GetClusterNetworkConfigurationQueryResponse implements getClusterNetworkConfigurationQueryResponse operation.
	//
	// The response retrieved is only applicable for pure L2 domain clusters.
	//
	// GET /v1/clusters/{id}/network/queries/{queryId}
	GetClusterNetworkConfigurationQueryResponse(ctx context.Context, params GetClusterNetworkConfigurationQueryResponseParams) (GetClusterNetworkConfigurationQueryResponseRes, error)
	// GetClusterQueryResponse implements getClusterQueryResponse operation.
	//
	// Get cluster query response.
	//
	// GET /v1/domains/{domainId}/clusters/{clusterName}/queries/{queryId}
	GetClusterQueryResponse(ctx context.Context, params GetClusterQueryResponseParams) (GetClusterQueryResponseRes, error)
	// GetClusterTagManagerUrl implements getClusterTagManagerUrl operation.
	//
	// Get Cluster Tag Manager Url.
	//
	// GET /v1/clusters/{id}/tags/tag-manager
	GetClusterTagManagerUrl(ctx context.Context, params GetClusterTagManagerUrlParams) (GetClusterTagManagerUrlRes, error)
	// GetClusterUpdateValidation implements getClusterUpdateValidation operation.
	//
	// Gets the status of given cluster updates validation workflow by given validation id.
	//
	// GET /v1/clusters/{id}/validations/{validationId}
	GetClusterUpdateValidation(ctx context.Context, params GetClusterUpdateValidationParams) (GetClusterUpdateValidationRes, error)
	// GetClusters implements getClusters operation.
	//
	// Retrieve a list of clusters.
	//
	// GET /v1/clusters
	GetClusters(ctx context.Context, params GetClustersParams) (GetClustersRes, error)
	// GetClustersQueryResponse implements getClustersQueryResponse operation.
	//
	// Get clusters query response.
	//
	// GET /v1/domains/{domainId}/clusters/queries/{queryId}
	GetClustersQueryResponse(ctx context.Context, params GetClustersQueryResponseParams) (GetClustersQueryResponseRes, error)
	// GetCompatibilityMatrices implements getCompatibilityMatrices operation.
	//
	// Get Compatibility Matrices.
	//
	// GET /v1/compatibility-matrices
	GetCompatibilityMatrices(ctx context.Context) (GetCompatibilityMatricesRes, error)
	// GetCompatibilityMatrix implements getCompatibilityMatrix operation.
	//
	// Get Compatibility Matrix.
	//
	// GET /v1/compatibility-matrices/{compatibilityMatrixSource}
	GetCompatibilityMatrix(ctx context.Context, params GetCompatibilityMatrixParams) (GetCompatibilityMatrixRes, error)
	// GetCompatibilityMatrixContent implements getCompatibilityMatrixContent operation.
	//
	// Get Compatibility Matrix content.
	//
	// GET /v1/compatibility-matrices/{compatibilityMatrixSource}/content
	GetCompatibilityMatrixContent(ctx context.Context, params GetCompatibilityMatrixContentParams) (GetCompatibilityMatrixContentRes, error)
	// GetCompatibilityMatrixMetadata implements getCompatibilityMatrixMetadata operation.
	//
	// Get Compatibility Matrix Metadata.
	//
	// GET /v1/compatibility-matrices/{compatibilityMatrixSource}/metadata
	GetCompatibilityMatrixMetadata(ctx context.Context, params GetCompatibilityMatrixMetadataParams) (GetCompatibilityMatrixMetadataRes, error)
	// GetComplianceAudit implements getComplianceAudit operation.
	//
	// Get compliance audit.
	//
	// GET /v1/compliance-audits/{complianceAuditId}
	GetComplianceAudit(ctx context.Context, params GetComplianceAuditParams) (GetComplianceAuditRes, error)
	// GetComplianceAuditForADomain implements getComplianceAuditForADomain operation.
	//
	// Get compliance audit for a domain.
	//
	// GET /v1/domains/{id}/compliance-audits/{complianceAuditId}
	GetComplianceAuditForADomain(ctx context.Context, params GetComplianceAuditForADomainParams) (GetComplianceAuditForADomainRes, error)
	// GetComplianceAuditHistory implements getComplianceAuditHistory operation.
	//
	// Get compliance audit history.
	//
	// GET /v1/compliance-audits
	GetComplianceAuditHistory(ctx context.Context) (GetComplianceAuditHistoryRes, error)
	// GetComplianceAuditHistoryForADomain implements getComplianceAuditHistoryForADomain operation.
	//
	// Get compliance audit history for a domain.
	//
	// GET /v1/domains/{id}/compliance-audits
	GetComplianceAuditHistoryForADomain(ctx context.Context, params GetComplianceAuditHistoryForADomainParams) (GetComplianceAuditHistoryForADomainRes, error)
	// GetComplianceAuditItems implements getComplianceAuditItems operation.
	//
	// Get compliance audit items.
	//
	// GET /v1/compliance-audits/{complianceAuditId}/compliance-audit-items
	GetComplianceAuditItems(ctx context.Context, params GetComplianceAuditItemsParams) (GetComplianceAuditItemsRes, error)
	// GetComplianceAuditItemsForADomain implements getComplianceAuditItemsForADomain operation.
	//
	// Get compliance audit items for a domain.
	//
	// GET /v1/domains/{id}/compliance-audits/{complianceAuditId}/compliance-audit-items
	GetComplianceAuditItemsForADomain(ctx context.Context, params GetComplianceAuditItemsForADomainParams) (GetComplianceAuditItemsForADomainRes, error)
	// GetComplianceAuditTask implements getComplianceAuditTask operation.
	//
	// Get compliance audit task.
	//
	// GET /v1/domains/{id}/compliance-audits/tasks/{taskId}
	GetComplianceAuditTask(ctx context.Context, params GetComplianceAuditTaskParams) (GetComplianceAuditTaskRes, error)
	// GetComplianceConfigurations implements getComplianceConfigurations operation.
	//
	// Get a list of all compliance configurations.
	//
	// GET /v1/compliance-configurations
	GetComplianceConfigurations(ctx context.Context, params GetComplianceConfigurationsParams) (GetComplianceConfigurationsRes, error)
	// GetComplianceStandards implements getComplianceStandards operation.
	//
	// Get a list of all compliance standards.
	//
	// GET /v1/compliance-standards
	GetComplianceStandards(ctx context.Context) (GetComplianceStandardsRes, error)
	// GetConfigs implements getConfigs operation.
	//
	// Get configs associated with the given criteria, all if no criteria is provided.
	//
	// GET /v1/config-drifts
	GetConfigs(ctx context.Context, params GetConfigsParams) (GetConfigsRes, error)
	// GetCredential implements getCredential operation.
	//
	// Retrieve a credential by its ID.
	//
	// GET /v1/credentials/{id}
	GetCredential(ctx context.Context, params GetCredentialParams) (GetCredentialRes, error)
	// GetCredentialTaskByResourceID implements getCredentialTaskByResourceID operation.
	//
	// Retriece a credential taks by resource ID.
	//
	// GET /v1/credentials/tasks/{id}/resource-credentials
	GetCredentialTaskByResourceID(ctx context.Context, params GetCredentialTaskByResourceIDParams) (GetCredentialTaskByResourceIDRes, error)
	// GetCredentials implements getCredentials operation.
	//
	// Retrieve a list of credentials.
	//
	// GET /v1/credentials
	GetCredentials(ctx context.Context, params GetCredentialsParams) (GetCredentialsRes, error)
	// GetCredentialsSubTask implements getCredentialsSubTask operation.
	//
	// Retrieve a credential sub task by its ID.
	//
	// GET /v1/credentials/tasks/{id}/subtasks/{subtaskId}
	GetCredentialsSubTask(ctx context.Context, params GetCredentialsSubTaskParams) (GetCredentialsSubTaskRes, error)
	// GetCredentialsTask implements getCredentialsTask operation.
	//
	// Retrieve a credential task by ID.
	//
	// GET /v1/credentials/tasks/{id}
	GetCredentialsTask(ctx context.Context, params GetCredentialsTaskParams) (GetCredentialsTaskRes, error)
	// GetCredentialsTasks implements getCredentialsTasks operation.
	//
	// Retrieve a list of credential tasks.
	//
	// GET /v1/credentials/tasks
	GetCredentialsTasks(ctx context.Context, params GetCredentialsTasksParams) (GetCredentialsTasksRes, error)
	// GetCriteria implements getCriteria operation.
	//
	// Get all criteria.
	//
	// GET /v1/hosts/criteria
	GetCriteria(ctx context.Context) (*PageOfHostCriterion, error)
	// GetCriterion implements getCriterion operation.
	//
	// Get a criterion.
	//
	// GET /v1/hosts/criteria/{name}
	GetCriterion(ctx context.Context, params GetCriterionParams) (GetCriterionRes, error)
	// GetCustomIsoById implements getCustomIsoById operation.
	//
	// Get the Custom ISO based matching the ID.
	//
	// GET /v1/custom-isos/{custom_iso_id}
	GetCustomIsoById(ctx context.Context, params GetCustomIsoByIdParams) (GetCustomIsoByIdRes, error)
	// GetCustomIsos implements getCustomIsos operation.
	//
	// Get all Custom ISOs or Custom ISOs that match specified parameters.
	//
	// GET /v1/custom-isos
	GetCustomIsos(ctx context.Context, params GetCustomIsosParams) (GetCustomIsosRes, error)
	// GetCustomPatches implements getCustomPatches operation.
	//
	// Filter applicable patches (current/target vcf releases) per product type per domain.
	//
	// GET /v1/releases/domains/{domainId}/custom-patches
	GetCustomPatches(ctx context.Context, params GetCustomPatchesParams) (*FlexibleProductPatches, error)
	// GetDatastoreCriterion implements getDatastoreCriterion operation.
	//
	// Get a criterion to query for datastore.
	//
	// GET /v1/domains/{domainId}/datastores/criteria/{name}
	GetDatastoreCriterion(ctx context.Context, params GetDatastoreCriterionParams) (GetDatastoreCriterionRes, error)
	// GetDatastoreCriterion1 implements getDatastoreCriterion_1 operation.
	//
	// Get a criterion to query for datastore.
	//
	// GET /v1/clusters/{id}/datastores/criteria/{name}
	GetDatastoreCriterion1(ctx context.Context, params GetDatastoreCriterion1Params) (GetDatastoreCriterion1Res, error)
	// GetDatastoreQueryResponse implements getDatastoreQueryResponse operation.
	//
	// Get Datastore query response.
	//
	// GET /v1/domains/{domainId}/datastores/queries/{queryId}
	GetDatastoreQueryResponse(ctx context.Context, params GetDatastoreQueryResponseParams) (GetDatastoreQueryResponseRes, error)
	// GetDatastoreQueryResponse1 implements getDatastoreQueryResponse_1 operation.
	//
	// Get Datastore query response.
	//
	// GET /v1/clusters/{clusterId}/datastores/queries/{queryId}
	GetDatastoreQueryResponse1(ctx context.Context, params GetDatastoreQueryResponse1Params) (GetDatastoreQueryResponse1Res, error)
	// GetDatastoresCriteria implements getDatastoresCriteria operation.
	//
	// Get all datastore criteria.
	//
	// GET /v1/domains/{domainId}/datastores/criteria
	GetDatastoresCriteria(ctx context.Context, params GetDatastoresCriteriaParams) (*PageOfDatastoreCriterion, error)
	// GetDatastoresCriteria1 implements getDatastoresCriteria_1 operation.
	//
	// Get all datastore criteria.
	//
	// GET /v1/clusters/{id}/datastores/criteria
	GetDatastoresCriteria1(ctx context.Context, params GetDatastoresCriteria1Params) (*PageOfDatastoreCriterion, error)
	// GetDepotSettings implements getDepotSettings operation.
	//
	// Get the depot configuration. In a fresh setup, this would be empty.
	//
	// GET /v1/system/settings/depot
	GetDepotSettings(ctx context.Context) (GetDepotSettingsRes, error)
	// GetDnsConfiguration implements getDnsConfiguration operation.
	//
	// Retrieve the DNS configuration.
	//
	// GET /v1/system/dns-configuration
	GetDnsConfiguration(ctx context.Context) (GetDnsConfigurationRes, error)
	// GetDomain implements getDomain operation.
	//
	// Get a domain by its ID.
	//
	// GET /v1/domains/{id}
	GetDomain(ctx context.Context, params GetDomainParams) (GetDomainRes, error)
	// GetDomainCertificates implements getDomainCertificates operation.
	//
	// Get latest generated certificate(s) in a domain.
	//
	// GET /v1/domains/{id}/certificates
	GetDomainCertificates(ctx context.Context, params GetDomainCertificatesParams) (GetDomainCertificatesRes, error)
	// GetDomainEndpoints implements getDomainEndpoints operation.
	//
	// Retrieve a list of endpoints or URLs for a domain by its ID.
	//
	// GET /v1/domains/{id}/endpoints
	GetDomainEndpoints(ctx context.Context, params GetDomainEndpointsParams) (GetDomainEndpointsRes, error)
	// GetDomainIsolationPrecheckStatus implements getDomainIsolationPrecheckStatus operation.
	//
	// Get the status of the Domain Isolation Precheck.
	//
	// GET /v1/domains/{domainId}/isolation-prechecks/{precheckId}
	GetDomainIsolationPrecheckStatus(ctx context.Context, params GetDomainIsolationPrecheckStatusParams) (GetDomainIsolationPrecheckStatusRes, error)
	// GetDomainReleaseViewValidation implements getDomainReleaseViewValidation operation.
	//
	// Monitor the progress of domain target state validation task by the validation id.
	//
	// GET /v1/releases/domains/validations/{validationId}
	GetDomainReleaseViewValidation(ctx context.Context, params GetDomainReleaseViewValidationParams) (GetDomainReleaseViewValidationRes, error)
	// GetDomainTagManagerUrl implements getDomainTagManagerUrl operation.
	//
	// Get Domain Tag Manager Url.
	//
	// GET /v1/domains/{id}/tags/tag-manager
	GetDomainTagManagerUrl(ctx context.Context, params GetDomainTagManagerUrlParams) (GetDomainTagManagerUrlRes, error)
	// GetDomainUpdateValidation implements getDomainUpdateValidation operation.
	//
	// Gets the status of given domain update validation workflow by given validation id.
	//
	// GET /v1/domains/{id}/validations/{validationId}
	GetDomainUpdateValidation(ctx context.Context, params GetDomainUpdateValidationParams) (GetDomainUpdateValidationRes, error)
	// GetDomains implements getDomains operation.
	//
	// Retrieve a list of domains.
	//
	// GET /v1/domains
	GetDomains(ctx context.Context, params GetDomainsParams) (GetDomainsRes, error)
	// GetEdgeCluster implements getEdgeCluster operation.
	//
	// Retrieve an NSX Edge Cluster by its ID.
	//
	// GET /v1/edge-clusters/{id}
	GetEdgeCluster(ctx context.Context, params GetEdgeClusterParams) (GetEdgeClusterRes, error)
	// GetEdgeClusterQueryCriteria implements getEdgeClusterQueryCriteria operation.
	//
	// Get the Edge Cluster criterion list for the NSX query.
	//
	// GET /v1/edge-clusters/{edgeClusterId}/criteria
	GetEdgeClusterQueryCriteria(ctx context.Context, params GetEdgeClusterQueryCriteriaParams) (GetEdgeClusterQueryCriteriaRes, error)
	// GetEdgeClusterValidationByID implements getEdgeClusterValidationByID operation.
	//
	// Retrieve the results of a NSX Edge Cluster validation by its ID.
	//
	// GET /v1/edge-clusters/validations/{id}
	GetEdgeClusterValidationByID(ctx context.Context, params GetEdgeClusterValidationByIDParams) (GetEdgeClusterValidationByIDRes, error)
	// GetEdgeClusters implements getEdgeClusters operation.
	//
	// Retrieve a list of NSX Edge Clusters.
	//
	// GET /v1/edge-clusters
	GetEdgeClusters(ctx context.Context, params GetEdgeClustersParams) (GetEdgeClustersRes, error)
	// GetFIPSConfiguration implements getFIPSConfiguration operation.
	//
	// Retrieve VCF security FIPS mode.
	//
	// GET /v1/system/security/fips
	GetFIPSConfiguration(ctx context.Context) (GetFIPSConfigurationRes, error)
	// GetFutureReleases implements getFutureReleases operation.
	//
	// Returns all known to the system future target versions for a domain. If some of them are not
	// allowed (e.g. stepping stone) includes message why. If the domain does not have a product
	// configured at that point, that product will not be included in the BOM or patch bundle list in
	// each release.
	//
	// GET /v1/releases/domains/{domainId}/future-releases
	GetFutureReleases(ctx context.Context, params GetFutureReleasesParams) (GetFutureReleasesRes, error)
	// GetHealthCheckStatus implements getHealthCheckStatus operation.
	//
	// Retrieve the status of the Health Check operations.
	//
	// GET /v1/system/health-summary/{id}
	GetHealthCheckStatus(ctx context.Context, params GetHealthCheckStatusParams) (GetHealthCheckStatusRes, error)
	// GetHealthCheckTask implements getHealthCheckTask operation.
	//
	// Retieve a list of Health Check tasks.
	//
	// GET /v1/system/health-summary
	GetHealthCheckTask(ctx context.Context) (GetHealthCheckTaskRes, error)
	// GetHost implements getHost operation.
	//
	// Get a host by its ID.
	//
	// GET /v1/hosts/{id}
	GetHost(ctx context.Context, params GetHostParams) (GetHostRes, error)
	// GetHostCommissionValidationByID implements getHostCommissionValidationByID operation.
	//
	// Retrieve the results of a host commission validation by its ID.
	//
	// GET /v1/hosts/validations/{id}
	GetHostCommissionValidationByID(ctx context.Context, params GetHostCommissionValidationByIDParams) (GetHostCommissionValidationByIDRes, error)
	// GetHostCriteria implements getHostCriteria operation.
	//
	// Get all host criteria.
	//
	// GET /v1/clusters/{id}/hosts/criteria
	GetHostCriteria(ctx context.Context, params GetHostCriteriaParams) (*PageOfHostCriterion, error)
	// GetHostCriterion implements getHostCriterion operation.
	//
	// Get a criterion to query for host.
	//
	// GET /v1/clusters/{id}/hosts/criteria/{name}
	GetHostCriterion(ctx context.Context, params GetHostCriterionParams) (GetHostCriterionRes, error)
	// GetHostQueryResponse implements getHostQueryResponse operation.
	//
	// Get query response.
	//
	// GET /v1/hosts/queries/{id}
	GetHostQueryResponse(ctx context.Context, params GetHostQueryResponseParams) (GetHostQueryResponseRes, error)
	// GetHostQueryResponse1 implements getHostQueryResponse_1 operation.
	//
	// Get query response.
	//
	// GET /v1/clusters/{clusterId}/hosts/queries/{queryId}
	GetHostQueryResponse1(ctx context.Context, params GetHostQueryResponse1Params) (GetHostQueryResponse1Res, error)
	// GetHostTagManagerUrl implements getHostTagManagerUrl operation.
	//
	// Get Host Tag Manager Url.
	//
	// GET /v1/hosts/{id}/tags/tag-manager
	GetHostTagManagerUrl(ctx context.Context, params GetHostTagManagerUrlParams) (GetHostTagManagerUrlRes, error)
	// GetHosts implements getHosts operation.
	//
	// Get all hosts.
	//
	// GET /v1/hosts
	GetHosts(ctx context.Context, params GetHostsParams) (GetHostsRes, error)
	// GetHostsPrechecksResponse implements getHostsPrechecksResponse operation.
	//
	// Get host(s) prechecks response.
	//
	// GET /v1/hosts/prechecks/{id}
	GetHostsPrechecksResponse(ctx context.Context, params GetHostsPrechecksResponseParams) (GetHostsPrechecksResponseRes, error)
	// GetIdentityPrecheckResult implements getIdentityPrecheckResult operation.
	//
	// Get a list precheck result with warnings/errors.
	//
	// GET /v1/identity-broker/prechecks
	GetIdentityPrecheckResult(ctx context.Context, params GetIdentityPrecheckResultParams) (GetIdentityPrecheckResultRes, error)
	// GetIdentityProviderById implements getIdentityProviderById operation.
	//
	// Get a specific identity irovider using its id.
	//
	// GET /v1/identity-providers/{id}
	GetIdentityProviderById(ctx context.Context, params GetIdentityProviderByIdParams) (GetIdentityProviderByIdRes, error)
	// GetIdentityProviders implements getIdentityProviders operation.
	//
	// Get a list of all identity providers.
	//
	// GET /v1/identity-providers
	GetIdentityProviders(ctx context.Context) (GetIdentityProvidersRes, error)
	// GetLastAssessmentRunInfo implements getLastAssessmentRunInfo operation.
	//
	// Get information about the last assessment run.
	//
	// GET /v1/system/check-sets
	GetLastAssessmentRunInfo(ctx context.Context, params GetLastAssessmentRunInfoParams) (GetLastAssessmentRunInfoRes, error)
	// GetLicenseKey implements getLicenseKey operation.
	//
	// Retrieve a license key.
	//
	// GET /v1/license-keys/{key}
	GetLicenseKey(ctx context.Context, params GetLicenseKeyParams) (GetLicenseKeyRes, error)
	// GetLicenseKeys implements getLicenseKeys operation.
	//
	// Retrieve a list of license keys.
	//
	// GET /v1/license-keys
	GetLicenseKeys(ctx context.Context, params GetLicenseKeysParams) (GetLicenseKeysRes, error)
	// GetLicenseProductTypes implements getLicenseProductTypes operation.
	//
	// Get product types.
	//
	// GET /v1/license-keys/product-types
	GetLicenseProductTypes(ctx context.Context) (GetLicenseProductTypesRes, error)
	// GetLocalAccount implements getLocalAccount operation.
	//
	// Get information on the local account.
	//
	// GET /v1/users/local/admin
	GetLocalAccount(ctx context.Context) (GetLocalAccountRes, error)
	// GetLocalOsUserAccounts implements getLocalOsUserAccounts operation.
	//
	// Returns a list of local OS user accounts from the SDDC Manager appliance.
	//
	// GET /v1/sddc-manager/local-os-user-accounts
	GetLocalOsUserAccounts(ctx context.Context) (GetLocalOsUserAccountsRes, error)
	// GetNetworkOfNetworkPool implements getNetworkOfNetworkPool operation.
	//
	// Get a Network that is part of a Network Pool.
	//
	// GET /v1/network-pools/{id}/networks/{networkId}
	GetNetworkOfNetworkPool(ctx context.Context, params GetNetworkOfNetworkPoolParams) (GetNetworkOfNetworkPoolRes, error)
	// GetNetworkPool implements getNetworkPool operation.
	//
	// Get the Network Pools.
	//
	// GET /v1/network-pools
	GetNetworkPool(ctx context.Context) (GetNetworkPoolRes, error)
	// GetNetworkPoolByID implements getNetworkPoolByID operation.
	//
	// Get a Network Pool by ID, if it exists.
	//
	// GET /v1/network-pools/{id}
	GetNetworkPoolByID(ctx context.Context, params GetNetworkPoolByIDParams) (GetNetworkPoolByIDRes, error)
	// GetNetworksOfNetworkPool implements getNetworksOfNetworkPool operation.
	//
	// Get the Networks that are part of a Network Pool.
	//
	// GET /v1/network-pools/{id}/networks
	GetNetworksOfNetworkPool(ctx context.Context, params GetNetworksOfNetworkPoolParams) (GetNetworksOfNetworkPoolRes, error)
	// GetNsxCluster implements getNsxCluster operation.
	//
	// Retrieve the details of an NSX cluster by its ID.
	//
	// GET /v1/nsxt-clusters/{id}
	GetNsxCluster(ctx context.Context, params GetNsxClusterParams) (GetNsxClusterRes, error)
	// GetNsxClusterQueryResponse implements getNsxClusterQueryResponse operation.
	//
	// Get NSX cluster query response.
	//
	// GET /v1/nsxt-clusters/queries/{id}
	GetNsxClusterQueryResponse(ctx context.Context, params GetNsxClusterQueryResponseParams) (GetNsxClusterQueryResponseRes, error)
	// GetNsxClusters implements getNsxClusters operation.
	//
	// Retrieve a list of NSX clusters.
	//
	// GET /v1/nsxt-clusters
	GetNsxClusters(ctx context.Context, params GetNsxClustersParams) (GetNsxClustersRes, error)
	// GetNsxCriteria implements getNsxCriteria operation.
	//
	// Get all NSX criteria.
	//
	// GET /v1/nsxt-clusters/criteria
	GetNsxCriteria(ctx context.Context) (*PageOfNsxTCriterion, error)
	// GetNsxCriterion implements getNsxCriterion operation.
	//
	// Get a NSX criterion.
	//
	// GET /v1/nsxt-clusters/criteria/{name}
	GetNsxCriterion(ctx context.Context, params GetNsxCriterionParams) (GetNsxCriterionRes, error)
	// GetNsxIpAddressPool implements getNsxIpAddressPool operation.
	//
	// Retrieve an NSX IP Address Pool by its name.
	//
	// GET /v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools/{name}
	GetNsxIpAddressPool(ctx context.Context, params GetNsxIpAddressPoolParams) (GetNsxIpAddressPoolRes, error)
	// GetNsxIpAddressPools implements getNsxIpAddressPools operation.
	//
	// Retrive a list of NSX IP Address Pools by the NSX cluster ID.
	//
	// GET /v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools
	GetNsxIpAddressPools(ctx context.Context, params GetNsxIpAddressPoolsParams) (GetNsxIpAddressPoolsRes, error)
	// GetNsxTransportZones implements getNsxTransportZones operation.
	//
	// Retrieve list of all NSX transport zones.
	//
	// GET /v1/nsxt-clusters/{nsxt-cluster-id}/transport-zones
	GetNsxTransportZones(ctx context.Context, params GetNsxTransportZonesParams) (GetNsxTransportZonesRes, error)
	// GetNsxUpgradeResources implements getNsxUpgradeResources operation.
	//
	// Get the list NSX upgradable reosurce with resource metadata info.
	//
	// GET /v1/upgradables/domains/{domainId}/nsxt
	GetNsxUpgradeResources(ctx context.Context, params GetNsxUpgradeResourcesParams) (GetNsxUpgradeResourcesRes, error)
	// GetNtpConfiguration implements getNtpConfiguration operation.
	//
	// Retrieve the NTP configuration.
	//
	// GET /v1/system/ntp-configuration
	GetNtpConfiguration(ctx context.Context) (GetNtpConfigurationRes, error)
	// GetPasswordExpiration implements getPasswordExpiration operation.
	//
	// Fetch expiration details of passwords for a list of credentials.
	//
	// POST /v1/credentials/expirations
	GetPasswordExpiration(ctx context.Context, req *CredentialsExpirationSpec) (GetPasswordExpirationRes, error)
	// GetPasswordExpirationByTaskID implements getPasswordExpirationByTaskID operation.
	//
	// Retrive a password expiration task by ID.
	//
	// GET /v1/credentials/expirations/{id}
	GetPasswordExpirationByTaskID(ctx context.Context, params GetPasswordExpirationByTaskIDParams) (GetPasswordExpirationByTaskIDRes, error)
	// GetPersonalities implements getPersonalities operation.
	//
	// Get the Personalities which are available via depot access.
	//
	// GET /v1/personalities
	GetPersonalities(ctx context.Context, params GetPersonalitiesParams) (GetPersonalitiesRes, error)
	// GetPersonality implements getPersonality operation.
	//
	// Get the Personality for id.
	//
	// GET /v1/personalities/{personalityId}
	GetPersonality(ctx context.Context, params GetPersonalityParams) (GetPersonalityRes, error)
	// GetPrecheckTask implements getPrecheckTask operation.
	//
	// Monitor the progress of precheck task by the precheck task ID. As this API is deprecated, please
	// use the new LCM Prechecks API - /v1/system/check-sets/{taskId}.
	//
	// Deprecated: schema marks this operation as deprecated.
	//
	// GET /v1/system/prechecks/tasks/{id}
	GetPrecheckTask(ctx context.Context, params GetPrecheckTaskParams) (GetPrecheckTaskRes, error)
	// GetProductVersionCatalog implements getProductVersionCatalog operation.
	//
	// Get product version catalog. There should be only one valid product version catalog in the System.
	//
	// GET /v1/product-version-catalog
	GetProductVersionCatalog(ctx context.Context) (GetProductVersionCatalogRes, error)
	// GetProxyConfiguration implements getProxyConfiguration operation.
	//
	// Get the current Proxy configuration.
	//
	// GET /v1/system/proxy-configuration
	GetProxyConfiguration(ctx context.Context) (GetProxyConfigurationRes, error)
	// GetPsc implements getPsc operation.
	//
	// Retrieve details of a Platform Service Controller (PSC).
	//
	// GET /v1/pscs/{id}
	GetPsc(ctx context.Context, params GetPscParams) (GetPscRes, error)
	// GetPscs implements getPscs operation.
	//
	// Retrieve a list of Platform Service Controller (PSC).
	//
	// GET /v1/pscs
	GetPscs(ctx context.Context) (GetPscsRes, error)
	// GetReconciliationTask implements getReconciliationTask operation.
	//
	// Get config reconciliation task associated with the given task Id.
	//
	// GET /v1/config-drift-reconciliations/{taskId}
	GetReconciliationTask(ctx context.Context, params GetReconciliationTaskParams) (GetReconciliationTaskRes, error)
	// GetReleaseByDomain implements getReleaseByDomain operation.
	//
	// Get last selected upgrade version for the domain.
	//
	// GET /v1/releases/domains/{domainId}
	GetReleaseByDomain(ctx context.Context, params GetReleaseByDomainParams) (GetReleaseByDomainRes, error)
	// GetReleaseByDomains implements getReleaseByDomains operation.
	//
	// Get last selected upgrade version for WLDs.
	//
	// GET /v1/releases/domains
	GetReleaseByDomains(ctx context.Context) (GetReleaseByDomainsRes, error)
	// GetReleases implements getReleases operation.
	//
	// Get all Releases, with option to get current release for a domain, get release by version or get
	// future releases for a versionor get all the applicable target release.
	//
	// GET /v1/releases
	GetReleases(ctx context.Context, params GetReleasesParams) (GetReleasesRes, error)
	// GetResourceCertificatesValidationByID implements getResourceCertificatesValidationByID operation.
	//
	// Get the resource certificate validation result.
	//
	// GET /v1/domains/{id}/resource-certificates/validations/{validationId}
	GetResourceCertificatesValidationByID(ctx context.Context, params GetResourceCertificatesValidationByIDParams) (GetResourceCertificatesValidationByIDRes, error)
	// GetResourceFunctionalities implements getResourceFunctionalities operation.
	//
	// Get Resource Functionalities.
	//
	// GET /v1/resource-functionalities
	GetResourceFunctionalities(ctx context.Context, params GetResourceFunctionalitiesParams) (GetResourceFunctionalitiesRes, error)
	// GetResourceWarning implements getResourceWarning operation.
	//
	// Get a Resource Warning by ID.
	//
	// GET /v1/resource-warnings/{id}
	GetResourceWarning(ctx context.Context, params GetResourceWarningParams) (GetResourceWarningRes, error)
	// GetResourceWarnings implements getResourceWarnings operation.
	//
	// Get Resource Warnings.
	//
	// GET /v1/resource-warnings
	GetResourceWarnings(ctx context.Context, params GetResourceWarningsParams) (GetResourceWarningsRes, error)
	// GetResourcesFunctionalitiesAllowedGlobal implements getResourcesFunctionalitiesAllowedGlobal operation.
	//
	// Get Resource Functionalities Allowed Global Configuration.
	//
	// GET /v1/resource-functionalities/global
	GetResourcesFunctionalitiesAllowedGlobal(ctx context.Context) (GetResourcesFunctionalitiesAllowedGlobalRes, error)
	// GetRestoreTask implements getRestoreTask operation.
	//
	// Retrieve the restore task.
	//
	// GET /v1/restores/tasks/{id}
	GetRestoreTask(ctx context.Context, params GetRestoreTaskParams) (GetRestoreTaskRes, error)
	// GetResult implements getResult operation.
	//
	// Get the result for a given check run.
	//
	// GET /v1/system/check-sets/{runId}
	GetResult(ctx context.Context, params GetResultParams) (GetResultRes, error)
	// GetRoles implements getRoles operation.
	//
	// Get a list of all roles.
	//
	// GET /v1/roles
	GetRoles(ctx context.Context) (GetRolesRes, error)
	// GetSSODomainEntities implements getSSODomainEntities operation.
	//
	// Get a list of all entities in the SSO domain.
	//
	// GET /v1/sso-domains/{sso-domain}/entities
	GetSSODomainEntities(ctx context.Context, params GetSSODomainEntitiesParams) (GetSSODomainEntitiesRes, error)
	// GetSSODomains implements getSSODomains operation.
	//
	// Get a list of all SSO domains.
	//
	// GET /v1/sso-domains
	GetSSODomains(ctx context.Context) (GetSSODomainsRes, error)
	// GetSddcManager implements getSddcManager operation.
	//
	// Retrieve the details of an SDDC Manager by its id.
	//
	// GET /v1/sddc-managers/{id}
	GetSddcManager(ctx context.Context, params GetSddcManagerParams) (GetSddcManagerRes, error)
	// GetSddcManagerHistory implements getSddcManagerHistory operation.
	//
	// Retrieve the history of SDDC Manager by its id.
	//
	// GET /v1/sddc-managers/{id}/history
	GetSddcManagerHistory(ctx context.Context, params GetSddcManagerHistoryParams) (GetSddcManagerHistoryRes, error)
	// GetSddcManagerInfo implements getSddcManagerInfo operation.
	//
	// Retrieves the details of SDDC Manager VM.
	//
	// GET /v1/sddcs/{id}/sddc-manager
	GetSddcManagerInfo(ctx context.Context, params GetSddcManagerInfoParams) (GetSddcManagerInfoRes, error)
	// GetSddcManagers implements getSddcManagers operation.
	//
	// Retrieve a list of SDDC Managers.
	//
	// GET /v1/sddc-managers
	GetSddcManagers(ctx context.Context) (GetSddcManagersRes, error)
	// GetSddcWs1bOidcInfo implements getSddcWs1bOidcInfo operation.
	//
	// Get the SDDC Manager WS1B OIDC Information.
	//
	// GET /v1/identity-broker/sddc-manager-oidc
	GetSddcWs1bOidcInfo(ctx context.Context) (GetSddcWs1bOidcInfoRes, error)
	// GetSupportBundleStatus implements getSupportBundleStatus operation.
	//
	// Retrive the status of the Support Bundle operation.
	//
	// GET /v1/system/support-bundles/{id}
	GetSupportBundleStatus(ctx context.Context, params GetSupportBundleStatusParams) (GetSupportBundleStatusRes, error)
	// GetSupportBundleTask implements getSupportBundleTask operation.
	//
	// Retrieve a list of Support Bundle tasks.
	//
	// GET /v1/system/support-bundles
	GetSupportBundleTask(ctx context.Context) (GetSupportBundleTaskRes, error)
	// GetSystemConfiguration implements getSystemConfiguration operation.
	//
	// Retrieve the system configuration.
	//
	// GET /v1/system
	GetSystemConfiguration(ctx context.Context) (GetSystemConfigurationRes, error)
	// GetSystemRelease implements getSystemRelease operation.
	//
	// Returns release for the lowest deployed VCF version for a domain on the environment.If Management
	// domain is ahead of WLD domain, VCF BOM version for the WLDdomain will be returned.
	//
	// GET /v1/releases/system
	GetSystemRelease(ctx context.Context) (GetSystemReleaseRes, error)
	// GetTagAssignableForCluster implements getTagAssignableForCluster operation.
	//
	// Get tags assignable to a cluster.
	//
	// GET /v1/clusters/{id}/tags/assignable-tags
	GetTagAssignableForCluster(ctx context.Context, params GetTagAssignableForClusterParams) (GetTagAssignableForClusterRes, error)
	// GetTagsAssignedToCluster implements getTagsAssignedToCluster operation.
	//
	// Get tags assigned to a cluster by its ID.
	//
	// GET /v1/clusters/{id}/tags
	GetTagsAssignedToCluster(ctx context.Context, params GetTagsAssignedToClusterParams) (GetTagsAssignedToClusterRes, error)
	// GetTagsAssignedToClusters implements getTagsAssignedToClusters operation.
	//
	// Get tags assigned to clusters.
	//
	// GET /v1/clusters/tags
	GetTagsAssignedToClusters(ctx context.Context) (GetTagsAssignedToClustersRes, error)
	// GetTagsAssignedToDomain implements getTagsAssignedToDomain operation.
	//
	// Get tags assigned to a domain.
	//
	// GET /v1/domains/{id}/tags
	GetTagsAssignedToDomain(ctx context.Context, params GetTagsAssignedToDomainParams) (GetTagsAssignedToDomainRes, error)
	// GetTagsAssignedToDomains implements getTagsAssignedToDomains operation.
	//
	// Get tags assigned to all domains.
	//
	// GET /v1/domains/tags
	GetTagsAssignedToDomains(ctx context.Context) (GetTagsAssignedToDomainsRes, error)
	// GetTagsAssignedToHost implements getTagsAssignedToHost operation.
	//
	// Get Tags assigned to Host.
	//
	// GET /v1/hosts/{id}/tags
	GetTagsAssignedToHost(ctx context.Context, params GetTagsAssignedToHostParams) (GetTagsAssignedToHostRes, error)
	// GetTagsAssignedToHosts implements getTagsAssignedToHosts operation.
	//
	// Get Tags assigned to Hosts.
	//
	// GET /v1/hosts/tags
	GetTagsAssignedToHosts(ctx context.Context) (GetTagsAssignedToHostsRes, error)
	// GetTask implements getTask operation.
	//
	// Get a Task by ID, if it exists.
	//
	// GET /v1/tasks/{id}
	GetTask(ctx context.Context, params GetTaskParams) (GetTaskRes, error)
	// GetTasks implements getTasks operation.
	//
	// Get the tasks.
	//
	// GET /v1/tasks
	GetTasks(ctx context.Context, params GetTasksParams) (GetTasksRes, error)
	// GetTrustedCertificates implements getTrustedCertificates operation.
	//
	// Retrieve all trusted certificates from SDDC Manager.
	//
	// GET /v1/sddc-manager/trusted-certificates
	GetTrustedCertificates(ctx context.Context) (GetTrustedCertificatesRes, error)
	// GetUiUsers implements getUiUsers operation.
	//
	// Retrieve a list of users assigned access via SDDC Manager.
	//
	// GET /v1/users/ui
	GetUiUsers(ctx context.Context) (GetUiUsersRes, error)
	// GetUpgradables implements getUpgradables operation.
	//
	// Fetches the list of Upgradables in the System. Only one Upgradable becomes AVAILABLE for Upgrade.
	// The Upgradables provides information that can be use for Precheck API and also in the actual
	// Upgrade API call.
	//
	// GET /v1/system/upgradables
	GetUpgradables(ctx context.Context) (GetUpgradablesRes, error)
	// GetUpgradablesByDomain implements getUpgradablesByDomain operation.
	//
	// Fetches the list of Upgradables for a given domain. If a target version is provided, Upgradables
	// that are required for given target version become Available. The Upgradables providesinformation
	// that can be use for Precheck API and also in the actual Upgrade API call.This API is used only for
	// management domain, for all cases please use v1/system/upgradables.
	//
	// GET /v1/upgradables/domains/{domainId}
	GetUpgradablesByDomain(ctx context.Context, params GetUpgradablesByDomainParams) (GetUpgradablesByDomainRes, error)
	// GetUpgradablesClusters implements getUpgradablesClusters operation.
	//
	// Fetches the list of available hardware support managers and configured hardware support managers
	// for the give resource along with the hardware support packages and Software details.
	//
	// GET /v1/upgradables/domains/{domainId}/clusters
	GetUpgradablesClusters(ctx context.Context, params GetUpgradablesClustersParams) (GetUpgradablesClustersRes, error)
	// GetUpgradeById implements getUpgradeById operation.
	//
	// Retrieve an upgrade by ID.
	//
	// GET /v1/upgrades/{upgradeId}
	GetUpgradeById(ctx context.Context, params GetUpgradeByIdParams) (GetUpgradeByIdRes, error)
	// GetUpgradePrecheckByID implements getUpgradePrecheckByID operation.
	//
	// Gets upgrade precheck details.
	//
	// GET /v1/upgrades/{upgradeId}/prechecks/{precheckId}
	GetUpgradePrecheckByID(ctx context.Context, params GetUpgradePrecheckByIDParams) (GetUpgradePrecheckByIDRes, error)
	// GetUpgrades implements getUpgrades operation.
	//
	// Retrieve a list of upgrades.
	//
	// GET /v1/upgrades
	GetUpgrades(ctx context.Context, params GetUpgradesParams) (GetUpgradesRes, error)
	// GetUsers implements getUsers operation.
	//
	// Get a list of all users.
	//
	// GET /v1/users
	GetUsers(ctx context.Context) (GetUsersRes, error)
	// GetValidationOfDnsConfiguration implements getValidationOfDnsConfiguration operation.
	//
	// Retrieve the results of a DNS configuration validation by its ID.
	//
	// GET /v1/system/dns-configuration/validations/{id}
	GetValidationOfDnsConfiguration(ctx context.Context, params GetValidationOfDnsConfigurationParams) (GetValidationOfDnsConfigurationRes, error)
	// GetValidationOfNtpConfiguration implements getValidationOfNtpConfiguration operation.
	//
	// Retrieve the results of a NTP configuration  validation by its ID.
	//
	// GET /v1/system/ntp-configuration/validations/{id}
	GetValidationOfNtpConfiguration(ctx context.Context, params GetValidationOfNtpConfigurationParams) (GetValidationOfNtpConfigurationRes, error)
	// GetValidationResult implements getValidationResult operation.
	//
	// GET /v1/nsxt-clusters/ip-address-pools/validations/{id}
	GetValidationResult(ctx context.Context, params GetValidationResultParams) (*Validation, error)
	// GetValidationsOfDNSConfiguration implements getValidationsOfDNSConfiguration operation.
	//
	// Retrieve a list of DNS configuation validations.
	//
	// GET /v1/system/dns-configuration/validations
	GetValidationsOfDNSConfiguration(ctx context.Context, params GetValidationsOfDNSConfigurationParams) (GetValidationsOfDNSConfigurationRes, error)
	// GetValidationsOfNtpConfiguration implements getValidationsOfNtpConfiguration operation.
	//
	// Retrieve a list of NTP configuation validations.
	//
	// GET /v1/system/ntp-configuration/validations
	GetValidationsOfNtpConfiguration(ctx context.Context, params GetValidationsOfNtpConfigurationParams) (GetValidationsOfNtpConfigurationRes, error)
	// GetVasaProvider implements getVasaProvider operation.
	//
	// Get a VASA Provider.
	//
	// GET /v1/vasa-providers/{id}
	GetVasaProvider(ctx context.Context, params GetVasaProviderParams) (GetVasaProviderRes, error)
	// GetVasaProviderStorageContainers implements getVasaProviderStorageContainers operation.
	//
	// Get the storage containers of a VASA Provider.
	//
	// GET /v1/vasa-providers/{id}/storage-containers
	GetVasaProviderStorageContainers(ctx context.Context, params GetVasaProviderStorageContainersParams) (GetVasaProviderStorageContainersRes, error)
	// GetVasaProviderUser implements getVasaProviderUser operation.
	//
	// Get the users of a VASA Provider.
	//
	// GET /v1/vasa-providers/{id}/users
	GetVasaProviderUser(ctx context.Context, params GetVasaProviderUserParams) (GetVasaProviderUserRes, error)
	// GetVasaProviderValidation implements getVasaProviderValidation operation.
	//
	// Get the status of the validation of the VASA Provider.
	//
	// GET /v1/vasa-providers/validations/{id}
	GetVasaProviderValidation(ctx context.Context, params GetVasaProviderValidationParams) (GetVasaProviderValidationRes, error)
	// GetVasaProviders implements getVasaProviders operation.
	//
	// Get the VASA Providers.
	//
	// GET /v1/vasa-providers
	GetVasaProviders(ctx context.Context) (GetVasaProvidersRes, error)
	// GetVcenter implements getVcenter operation.
	//
	// Retrieve a vCenter Server by its ID.
	//
	// GET /v1/vcenters/{id}
	GetVcenter(ctx context.Context, params GetVcenterParams) (GetVcenterRes, error)
	// GetVcenters implements getVcenters operation.
	//
	// Retrieve a list of vCenter Servers.
	//
	// GET /v1/vcenters
	GetVcenters(ctx context.Context, params GetVcentersParams) (GetVcentersRes, error)
	// GetVcfService implements getVcfService operation.
	//
	// Retrieve an SDDC Manager service by its ID.
	//
	// GET /v1/vcf-services/{id}
	GetVcfService(ctx context.Context, params GetVcfServiceParams) (GetVcfServiceRes, error)
	// GetVcfServices implements getVcfServices operation.
	//
	// Retrieve a list of SDDC Manager services.
	//
	// GET /v1/vcf-services
	GetVcfServices(ctx context.Context) (GetVcfServicesRes, error)
	// GetVdses implements getVdses operation.
	//
	// Get the list of VDSes of a cluster.
	//
	// GET /v1/clusters/{clusterId}/vdses
	GetVdses(ctx context.Context, params GetVdsesParams) (GetVdsesRes, error)
	// GetVersionAliasConfiguration implements getVersionAliasConfiguration operation.
	//
	// Get the Version Alias Configuration.
	//
	// GET /v1/system/settings/version-aliases
	GetVersionAliasConfiguration(ctx context.Context) (GetVersionAliasConfigurationRes, error)
	// GetVras implements getVras operation.
	//
	// Retrieve a list of VMware Aria Automation instances.
	//
	// GET /v1/vras
	GetVras(ctx context.Context) (*PageOfVra, error)
	// GetVrliIntegratedDomains implements getVrliIntegratedDomains operation.
	//
	// Retrieve a list of VMware Aria Operations for Logs integration status for domains.
	//
	// GET /v1/vrli/domains
	GetVrliIntegratedDomains(ctx context.Context) (*PageOfDomainIntegration, error)
	// GetVrlis implements getVrlis operation.
	//
	// Retrieve a list of VMware Aria Operations for Logs instances.
	//
	// GET /v1/vrlis
	GetVrlis(ctx context.Context) (*PageOfVrli, error)
	// GetVropsIntegratedDomains implements getVropsIntegratedDomains operation.
	//
	// Retrieves the existing  domains and their connection status with Aria Operations.
	//
	// Deprecated: schema marks this operation as deprecated.
	//
	// GET /v1/vrops/domains
	GetVropsIntegratedDomains(ctx context.Context) (*PageOfDomainIntegration, error)
	// GetVropses implements getVropses operation.
	//
	// Retrieve a list of VMware Aria Operations instances.
	//
	// GET /v1/vropses
	GetVropses(ctx context.Context) (*PageOfVrops, error)
	// GetVrslcm implements getVrslcm operation.
	//
	// Gets the complete information about the existing VMware Aria Suite Lifecycle instance.
	//
	// GET /v1/vrslcm
	GetVrslcm(ctx context.Context) (GetVrslcmRes, error)
	// GetVrslcmStatus implements getVrslcmStatus operation.
	//
	// Get status on the VMware Aria Suite Lifecycle product and availability of different actions.
	//
	// GET /v1/vrslcm/status
	GetVrslcmStatus(ctx context.Context) (GetVrslcmStatusRes, error)
	// GetVrslcmValidation implements getVrslcmValidation operation.
	//
	// Gets the status of given VMware Aria Suite Lifecycle validation workflow by given validation id.
	//
	// GET /v1/vrslcms/validations/{id}
	GetVrslcmValidation(ctx context.Context, params GetVrslcmValidationParams) (GetVrslcmValidationRes, error)
	// GetVrslcms implements getVrslcms operation.
	//
	// Get all existing VMware Aria Suite Lifecycle instances.
	//
	// GET /v1/vrslcms
	GetVrslcms(ctx context.Context) (*PageOfVrslcm, error)
	// GetVsanHclAttributes implements getVsanHclAttributes operation.
	//
	// Attributes of vSAN HCL data such as timestamp of last update.
	//
	// GET /v1/vsan-hcl/attributes
	GetVsanHclAttributes(ctx context.Context) (GetVsanHclAttributesRes, error)
	// GetVsanHclConfiguration implements getVsanHclConfiguration operation.
	//
	// Get vSAN HCL configuration.
	//
	// GET /v1/vsan-hcl/configuration
	GetVsanHclConfiguration(ctx context.Context) (GetVsanHclConfigurationRes, error)
	// GetVsanHealthCheckByDomain implements getVsanHealthCheckByDomain operation.
	//
	// Get vSAN health check status for all cluster on the domain.
	//
	// GET /v1/domains/{domainId}/health-checks
	GetVsanHealthCheckByDomain(ctx context.Context, params GetVsanHealthCheckByDomainParams) (GetVsanHealthCheckByDomainRes, error)
	// GetVsanHealthCheckByQueryID implements getVsanHealthCheckByQueryID operation.
	//
	// Get vSAN health check status for a given Query Id.
	//
	// GET /v1/domains/{domainId}/health-checks/queries/{queryId}
	GetVsanHealthCheckByQueryID(ctx context.Context, params GetVsanHealthCheckByQueryIDParams) (GetVsanHealthCheckByQueryIDRes, error)
	// GetVsanHealthCheckByTaskID implements getVsanHealthCheckByTaskID operation.
	//
	// Get vSAN health check update task status for a given task Id.
	//
	// GET /v1/domains/{domainId}/health-checks/tasks/{taskId}
	GetVsanHealthCheckByTaskID(ctx context.Context, params GetVsanHealthCheckByTaskIDParams) (GetVsanHealthCheckByTaskIDRes, error)
	// GetWsas implements getWsas operation.
	//
	// Retrieve a list of Workspace ONE Access instances.
	//
	// GET /v1/wsas
	GetWsas(ctx context.Context) (*PageOfWsa, error)
	// ImportVdsToInventory implements importVdsToInventory operation.
	//
	// Import Vds to inventory for the given cluster.
	//
	// POST /v1/clusters/{clusterId}/vdses
	ImportVdsToInventory(ctx context.Context, req *ImportVdsSpec, params ImportVdsToInventoryParams) (ImportVdsToInventoryRes, error)
	// InvalidateRefreshToken implements invalidateRefreshToken operation.
	//
	// Invalidate the provided refresh token.
	//
	// DELETE /v1/tokens/refresh-token
	InvalidateRefreshToken(ctx context.Context, req string) error
	// PerformDomainIsolationPrecheck implements performDomainIsolationPrecheck operation.
	//
	// Perform Domain Isolation Prechecks.
	//
	// POST /v1/domains/{domainId}/isolation-prechecks
	PerformDomainIsolationPrecheck(ctx context.Context, req *IsolationSpec, params PerformDomainIsolationPrecheckParams) (PerformDomainIsolationPrecheckRes, error)
	// PerformUpgrade implements performUpgrade operation.
	//
	// Schedule/Trigger Upgrade of a Resource. Ex: Resource can be DOMAIN, CLUSTER, UNMANAGED_HOST etc.
	// Performing upgrades are supported on VMware Cloud Foundation 3.5 BOM resources and above. Supports
	// scheduling/triggering of only 'parallel' upgrades and only Resource 'cluster' that are managed
	// using both vSphere Lifecycle Manager Baselines and vSphere Lifecycle Manager Images in the same
	// request.
	//
	// POST /v1/upgrades
	PerformUpgrade(ctx context.Context, req *UpgradeSpec) (PerformUpgradeRes, error)
	// PostClusterQuery implements postClusterQuery operation.
	//
	// Post a cluster query.
	//
	// POST /v1/domains/{domainId}/clusters/{clusterName}/queries
	PostClusterQuery(ctx context.Context, req *ClusterCriterion, params PostClusterQueryParams) (PostClusterQueryRes, error)
	// PostClustersQuery implements postClustersQuery operation.
	//
	// Post clusters query.
	//
	// POST /v1/domains/{domainId}/clusters/queries
	PostClustersQuery(ctx context.Context, req *ClusterCriterion, params PostClustersQueryParams) (PostClustersQueryRes, error)
	// PostDatastoreQuery implements postDatastoreQuery operation.
	//
	// Post a datastore query.
	//
	// POST /v1/domains/{domainId}/datastores/queries
	PostDatastoreQuery(ctx context.Context, req *DatastoreCriterion, params PostDatastoreQueryParams) (PostDatastoreQueryRes, error)
	// PostDatastoreQuery1 implements postDatastoreQuery_1 operation.
	//
	// Post a datastore query.
	//
	// POST /v1/clusters/{id}/datastores/queries
	PostDatastoreQuery1(ctx context.Context, req *DatastoreCriterion, params PostDatastoreQuery1Params) (PostDatastoreQuery1Res, error)
	// PostHostQuery implements postHostQuery operation.
	//
	// Post a host query.
	//
	// POST /v1/clusters/{id}/hosts/queries
	PostHostQuery(ctx context.Context, req *HostCriterion, params PostHostQueryParams) (PostHostQueryRes, error)
	// PostHostsPrechecks1 implements postHostsPrechecks_1 operation.
	//
	// Post host(s) prechecks.
	//
	// POST /v1/hosts/prechecks
	PostHostsPrechecks1(ctx context.Context, req PostHostsPrechecks1Req) (PostHostsPrechecks1Res, error)
	// PostQuery implements postQuery operation.
	//
	// Post a query.
	//
	// POST /v1/hosts/queries
	PostQuery(ctx context.Context, req *HostCriterion) (PostQueryRes, error)
	// QueryCheckSets implements queryCheckSets operation.
	//
	// Query for check-sets for the given resources.
	//
	// POST /v1/system/check-sets/queries
	QueryCheckSets(ctx context.Context, req *CheckSetQueryInput) (QueryCheckSetsRes, error)
	// ReconcileConfigs implements reconcileConfigs operation.
	//
	// For selective reconciliation, provide a config spec.
	//
	// POST /v1/config-drift-reconciliations
	ReconcileConfigs(ctx context.Context, req *ConfigDriftApplySpec) (ReconcileConfigsRes, error)
	// RefreshAccessToken implements refreshAccessToken operation.
	//
	// Refresh the access token associated with the given refresh token.
	//
	// PATCH /v1/tokens/access-token/refresh
	RefreshAccessToken(ctx context.Context, req string) (RefreshAccessTokenRes, error)
	// RemoveCertificateAuthority implements removeCertificateAuthority operation.
	//
	// Deletes CA configuration file.
	//
	// DELETE /v1/certificate-authorities/{id}
	RemoveCertificateAuthority(ctx context.Context, params RemoveCertificateAuthorityParams) (RemoveCertificateAuthorityRes, error)
	// RemoveDatastoreFromCluster implements removeDatastoreFromCluster operation.
	//
	// Unmount a datastore from a cluster.
	//
	// DELETE /v1/clusters/{id}/datastores/{datastoreId}
	RemoveDatastoreFromCluster(ctx context.Context, params RemoveDatastoreFromClusterParams) (RemoveDatastoreFromClusterRes, error)
	// RemoveLicenseKey implements removeLicenseKey operation.
	//
	// Remove a license key.
	//
	// DELETE /v1/license-keys/{key}
	RemoveLicenseKey(ctx context.Context, params RemoveLicenseKeyParams) (RemoveLicenseKeyRes, error)
	// RemoveTagsFromCluster implements removeTagsFromCluster operation.
	//
	// Remove tags from a cluster.
	//
	// DELETE /v1/clusters/{id}/tags
	RemoveTagsFromCluster(ctx context.Context, req *TagsSpec, params RemoveTagsFromClusterParams) (RemoveTagsFromClusterRes, error)
	// RemoveTagsFromDomain implements removeTagsFromDomain operation.
	//
	// Remove Tags From Domain.
	//
	// DELETE /v1/domains/{id}/tags
	RemoveTagsFromDomain(ctx context.Context, req *TagsSpec, params RemoveTagsFromDomainParams) (RemoveTagsFromDomainRes, error)
	// RemoveTagsFromHost implements removeTagsFromHost operation.
	//
	// Remove Tags From Host.
	//
	// DELETE /v1/hosts/{id}/tags
	RemoveTagsFromHost(ctx context.Context, req *TagsSpec, params RemoveTagsFromHostParams) (RemoveTagsFromHostRes, error)
	// RemoveUser implements removeUser operation.
	//
	// Delete the user by the ID, if it exists.
	//
	// DELETE /v1/users/{id}
	RemoveUser(ctx context.Context, params RemoveUserParams) (RemoveUserRes, error)
	// RemoveVasaProvider implements removeVasaProvider operation.
	//
	// Delete a VASA Provider.
	//
	// DELETE /v1/vasa-providers/{id}
	RemoveVasaProvider(ctx context.Context, params RemoveVasaProviderParams) (RemoveVasaProviderRes, error)
	// RemoveVasaProviderStorageContainer implements removeVasaProviderStorageContainer operation.
	//
	// Delete a storage container of a VASA Provider.
	//
	// DELETE /v1/vasa-providers/{id}/storage-containers/{storageContainerId}
	RemoveVasaProviderStorageContainer(ctx context.Context, params RemoveVasaProviderStorageContainerParams) (RemoveVasaProviderStorageContainerRes, error)
	// RenameCustomIsoById implements renameCustomIsoById operation.
	//
	// Rename the Custom ISO corresponding to the ID.
	//
	// PATCH /v1/custom-isos/{custom_iso_id}
	RenameCustomIsoById(ctx context.Context, req *CustomIsoRenameSpec, params RenameCustomIsoByIdParams) (RenameCustomIsoByIdRes, error)
	// RenamePersonalityById implements renamePersonalityById operation.
	//
	// Rename personality with the ID passed in the URL.
	//
	// PATCH /v1/personalities/{personalityId}
	RenamePersonalityById(ctx context.Context, req *Personality, params RenamePersonalityByIdParams) (RenamePersonalityByIdRes, error)
	// ReplaceCertificates implements replaceCertificates operation.
	//
	// Replace certificate(s) for the selected resource(s) in a domain.
	//
	// PATCH /v1/domains/{id}/certificates
	ReplaceCertificates(ctx context.Context, req *CertificateOperationSpec, params ReplaceCertificatesParams) (ReplaceCertificatesRes, error)
	// ReplaceResourceCertificates implements replaceResourceCertificates operation.
	//
	// Replace resource certificates.
	//
	// PUT /v1/domains/{id}/resource-certificates
	ReplaceResourceCertificates(ctx context.Context, req []ResourceCertificateSpec, params ReplaceResourceCertificatesParams) (ReplaceResourceCertificatesRes, error)
	// RetryComplianceAuditTask implements retryComplianceAuditTask operation.
	//
	// Retry compliance audit task.
	//
	// PATCH /v1/domains/{id}/compliance-audits/tasks/{taskId}
	RetryComplianceAuditTask(ctx context.Context, params RetryComplianceAuditTaskParams) (RetryComplianceAuditTaskRes, error)
	// RetryCredentialsTask implements retryCredentialsTask operation.
	//
	// Retry a failed credentials task for a given ID.
	//
	// PATCH /v1/credentials/tasks/{id}
	RetryCredentialsTask(ctx context.Context, req *CredentialsUpdateSpec, params RetryCredentialsTaskParams) (RetryCredentialsTaskRes, error)
	// RetrySddc implements retrySddc operation.
	//
	// Retry failed SDDC creation.
	//
	// PATCH /v1/sddcs/{id}
	RetrySddc(ctx context.Context, req OptSddcSpec, params RetrySddcParams) (RetrySddcRes, error)
	// RetryTask implements retryTask operation.
	//
	// Retry a failed Task by ID, if it exists.
	//
	// PATCH /v1/tasks/{id}
	RetryTask(ctx context.Context, params RetryTaskParams) (RetryTaskRes, error)
	// RollbackVrslcm implements rollbackVrslcm operation.
	//
	// Triggers the VMware Aria Suite Lifecycle rollback operation and returns an URL in the headers to
	// track the operation status.
	//
	// DELETE /v1/vrslcm
	RollbackVrslcm(ctx context.Context) (RollbackVrslcmRes, error)
	// SetBackupConfiguration implements setBackupConfiguration operation.
	//
	// Configure the backup configuration for SDDC Manager and NSX Manager.
	//
	// PUT /v1/system/backup-configuration
	SetBackupConfiguration(ctx context.Context, req *BackupConfigurationSpec) (SetBackupConfigurationRes, error)
	// SetCeipStatus implements setCeipStatus operation.
	//
	// Opt-in or Opt-out of CEIP.
	//
	// PATCH /v1/system/ceip
	SetCeipStatus(ctx context.Context, req SetCeipStatusReq) (SetCeipStatusRes, error)
	// SetLicenseKeyForResource implements setLicenseKeyForResource operation.
	//
	// Update a license key for a resource.
	//
	// PUT /v1/resources/licensing-infos
	SetLicenseKeyForResource(ctx context.Context, req *LicensingSpec) (SetLicenseKeyForResourceRes, error)
	// StartBackup implements startBackup operation.
	//
	// Start a backup operation.
	//
	// POST /v1/backups/tasks
	StartBackup(ctx context.Context, req *BackupSpec) (StartBackupRes, error)
	// StartBringup implements startBringup operation.
	//
	// Deploy a management domain.
	//
	// POST /v1/sddcs
	StartBringup(ctx context.Context, req *SddcSpec) (StartBringupRes, error)
	// StartBringupSpecConversion implements startBringupSpecConversion operation.
	//
	// SDDC specification incorporates all the client inputs regarding VMW component parameters
	// constituting the SDDC: NTP, DNS spec, ESXi, VC, VSAN, NSX spec et al.
	//
	// POST /v1/system/sddc-spec-converter
	StartBringupSpecConversion(ctx context.Context, req OptStartBringupSpecConversionReq, params StartBringupSpecConversionParams) (StartBringupSpecConversionRes, error)
	// StartBundleDownloadByID implements startBundleDownloadByID operation.
	//
	// Update a Bundle for scheduling/triggering download. Only one download can triggered for a Bundle.
	//
	// PATCH /v1/bundles/{id}
	StartBundleDownloadByID(ctx context.Context, req *BundleUpdateSpec, params StartBundleDownloadByIDParams) (StartBundleDownloadByIDRes, error)
	// StartHealthCheck implements startHealthCheck operation.
	//
	// Start a Health Check operation using SoS.
	//
	// POST /v1/system/health-summary
	StartHealthCheck(ctx context.Context, req *HealthSummarySpec) (StartHealthCheckRes, error)
	// StartNsxCriteriaQuery implements startNsxCriteriaQuery operation.
	//
	// Start a query with NSX Criteria.
	//
	// POST /v1/nsxt-clusters/queries
	StartNsxCriteriaQuery(ctx context.Context, req *NsxTCriterion) (StartNsxCriteriaQueryRes, error)
	// StartPrecheck implements startPrecheck operation.
	//
	// Perform precheck of resource(ex: Domain, Cluster). If only resource is specified, all
	// resources/software components under it are included. If resource(Domain, Cluster etc) and specific
	// resources/software components are provided, only those are included in precheck. As this API is
	// deprecated, please use the new LCM Prechecks API - /v1/system/check-sets/queries and
	// /v1/system/check-sets.
	//
	// Deprecated: schema marks this operation as deprecated.
	//
	// POST /v1/system/prechecks
	StartPrecheck(ctx context.Context, req *PrecheckSpec) (StartPrecheckRes, error)
	// StartRestore implements startRestore operation.
	//
	// Start a restore operation.
	//
	// POST /v1/restores/tasks
	StartRestore(ctx context.Context, req *RestoreSpec) (StartRestoreRes, error)
	// StartSupportBundle implements startSupportBundle operation.
	//
	// Start a Support Bundle operation using SoS.
	//
	// POST /v1/system/support-bundles
	StartSupportBundle(ctx context.Context, req *SupportBundleSpec) (StartSupportBundleRes, error)
	// StartUpgradePrecheck implements startUpgradePrecheck operation.
	//
	// Perform Upgrade Prechecks.
	//
	// POST /v1/upgrades/{upgradeId}/prechecks
	StartUpgradePrecheck(ctx context.Context, params StartUpgradePrecheckParams) (StartUpgradePrecheckRes, error)
	// TriggerCheckRun implements triggerCheckRun operation.
	//
	// Trigger a run of the selected checks.
	//
	// POST /v1/system/check-sets
	TriggerCheckRun(ctx context.Context, req *CheckSetRunInput) (TriggerCheckRunRes, error)
	// TriggerPartialRetryOfCheckRun implements triggerPartialRetryOfCheckRun operation.
	//
	// Trigger partial retry of a completed check run.
	//
	// PATCH /v1/system/check-sets/{runId}
	TriggerPartialRetryOfCheckRun(ctx context.Context, req *AssessmentPartialRetryInput, params TriggerPartialRetryOfCheckRunParams) (TriggerPartialRetryOfCheckRunRes, error)
	// UpdateBackupConfiguration implements updateBackupConfiguration operation.
	//
	// Update the backup configuration for SDDC Manager and NSX Manager.
	//
	// PATCH /v1/system/backup-configuration
	UpdateBackupConfiguration(ctx context.Context, req *BackupConfigurationSpec) (UpdateBackupConfigurationRes, error)
	// UpdateBundleCompatibilitySets implements updateBundleCompatibilitySets operation.
	//
	// Update software compatibility sets for Bundles.
	//
	// Deprecated: schema marks this operation as deprecated.
	//
	// PATCH /v1/bundles/
	UpdateBundleCompatibilitySets(ctx context.Context, req *BundleUpdateSpec) (UpdateBundleCompatibilitySetsRes, error)
	// UpdateCluster implements updateCluster operation.
	//
	// Update a Cluster by adding or removing Hosts, Stretching a standard vSAN cluster, Unstretching a
	// stretched cluster or by marking for deletion.
	//
	// PATCH /v1/clusters/{id}
	UpdateCluster(ctx context.Context, req *ClusterUpdateSpec, params UpdateClusterParams) (UpdateClusterRes, error)
	// UpdateDepotSettings implements updateDepotSettings operation.
	//
	// Update depot settings. Depot settings can be updated with VMware Depot account.
	//
	// PUT /v1/system/settings/depot
	UpdateDepotSettings(ctx context.Context, req *DepotSettings) (UpdateDepotSettingsRes, error)
	// UpdateDomain implements updateDomain operation.
	//
	// Update a Domain.
	//
	// PATCH /v1/domains/{id}
	UpdateDomain(ctx context.Context, req *DomainUpdateSpec, params UpdateDomainParams) (UpdateDomainRes, error)
	// UpdateEdgeCluster implements updateEdgeCluster operation.
	//
	// Expand or shrink an NSX Edge Cluster.
	//
	// PATCH /v1/edge-clusters/{id}
	UpdateEdgeCluster(ctx context.Context, req *EdgeClusterUpdateSpec, params UpdateEdgeClusterParams) (UpdateEdgeClusterRes, error)
	// UpdateLicenseKey implements updateLicenseKey operation.
	//
	// Update the license key.
	//
	// PATCH /v1/license-keys/{key}
	UpdateLicenseKey(ctx context.Context, req *LicenseKeyUpdateSpec, params UpdateLicenseKeyParams) (UpdateLicenseKeyRes, error)
	// UpdateLocalUserPassword implements updateLocalUserPassword operation.
	//
	// Update the password for local account only if the old password is correct, or if user configures
	// the local account for the first time.
	//
	// PATCH /v1/users/local/admin
	UpdateLocalUserPassword(ctx context.Context, req *LocalAccountPasswordInfo) (UpdateLocalUserPasswordRes, error)
	// UpdateNetworkPool implements updateNetworkPool operation.
	//
	// Update a Network Pool by ID, if it exists.
	//
	// PATCH /v1/network-pools/{id}
	UpdateNetworkPool(ctx context.Context, req *NetworkPoolUpdateSpec, params UpdateNetworkPoolParams) (UpdateNetworkPoolRes, error)
	// UpdateOrRotatePasswords implements updateOrRotatePasswords operation.
	//
	// Update passwords for given list of resources by supplying new passwords or rotate the passwords
	// using system generated passwords.
	//
	// PATCH /v1/credentials
	UpdateOrRotatePasswords(ctx context.Context, req *CredentialsUpdateSpec) (UpdateOrRotatePasswordsRes, error)
	// UpdateReleaseByDomainID implements updateReleaseByDomainID operation.
	//
	// Update last selected upgrade version for the domain.
	//
	// PATCH /v1/releases/domains/{domainId}
	UpdateReleaseByDomainID(ctx context.Context, req OptDomainRelease, params UpdateReleaseByDomainIDParams) (UpdateReleaseByDomainIDRes, error)
	// UpdateResourcesFunctionalities implements updateResourcesFunctionalities operation.
	//
	// Update Resources Functionalities.
	//
	// PATCH /v1/resource-functionalities
	UpdateResourcesFunctionalities(ctx context.Context, req *ResourceFunctionalitiesUpdateSpec) (UpdateResourcesFunctionalitiesRes, error)
	// UpdateResourcesFunctionalities1 implements updateResourcesFunctionalities_1 operation.
	//
	// Update Resources Functionalities Is Allowed Global Configuration.
	//
	// PATCH /v1/resource-functionalities/global
	UpdateResourcesFunctionalities1(ctx context.Context, req *ResourceFunctionalitiesGlobalUpdateSpec) (UpdateResourcesFunctionalities1Res, error)
	// UpdateSystemConfiguration implements updateSystemConfiguration operation.
	//
	// Updates paramters of the system configuration.
	//
	// PATCH /v1/system
	UpdateSystemConfiguration(ctx context.Context, req *SystemUpdateSpec) (UpdateSystemConfigurationRes, error)
	// UpdateUpgradeSchedule implements updateUpgradeSchedule operation.
	//
	// Commit/Reschedule an existing upgrade. It moves the upgrade from DRAFT state to SCHEDULED state
	// and/or changes the upgrade scheduled date/time.
	//
	// PATCH /v1/upgrades/{upgradeId}
	UpdateUpgradeSchedule(ctx context.Context, req *UpgradeCommitSpec, params UpdateUpgradeScheduleParams) (UpdateUpgradeScheduleRes, error)
	// UpdateVasaProvider implements updateVasaProvider operation.
	//
	// Update a VASA Provider.
	//
	// PATCH /v1/vasa-providers/{id}
	UpdateVasaProvider(ctx context.Context, req *VasaProviderUpdateSpec, params UpdateVasaProviderParams) (UpdateVasaProviderRes, error)
	// UpdateVasaProviderStorageContainer implements updateVasaProviderStorageContainer operation.
	//
	// Update the storage container of a VASA Provider.
	//
	// PATCH /v1/vasa-providers/{id}/storage-containers/{storageContainerId}
	UpdateVasaProviderStorageContainer(ctx context.Context, req *StorageContainerUpdateSpec, params UpdateVasaProviderStorageContainerParams) (UpdateVasaProviderStorageContainerRes, error)
	// UpdateVasaProviderUser implements updateVasaProviderUser operation.
	//
	// Update the user of a VASA Provider.
	//
	// PATCH /v1/vasa-providers/{id}/users/{userId}
	UpdateVasaProviderUser(ctx context.Context, req *VasaUserUpdateSpec, params UpdateVasaProviderUserParams) (UpdateVasaProviderUserRes, error)
	// UpdateVersionAliasConfiguration implements updateVersionAliasConfiguration operation.
	//
	// Update Version Alias Configuration.
	//
	// PUT /v1/system/settings/version-aliases/{bundleComponentType}/{version}
	UpdateVersionAliasConfiguration(ctx context.Context, req *AliasSpec, params UpdateVersionAliasConfigurationParams) (UpdateVersionAliasConfigurationRes, error)
	// UpdateVersionAliasConfigurations implements updateVersionAliasConfigurations operation.
	//
	// Update Version Alias Configurations.
	//
	// PUT /v1/system/settings/version-aliases
	UpdateVersionAliasConfigurations(ctx context.Context, req *VersionAliasesForBundleComponentTypeSpec) (UpdateVersionAliasConfigurationsRes, error)
	// UpdateVrslcmVersionByIdInInventory implements updateVrslcmVersionByIdInInventory operation.
	//
	// Updates VMware Aria Suite Lifecycle version.
	//
	// PUT /v1/vrslcms/{id}
	UpdateVrslcmVersionByIdInInventory(ctx context.Context, req *Vrslcm, params UpdateVrslcmVersionByIdInInventoryParams) (UpdateVrslcmVersionByIdInInventoryRes, error)
	// UpdateVrslcmVersionInInventory implements updateVrslcmVersionInInventory operation.
	//
	// Updates VMware Aria Suite Lifecycle version in VCF inventory.
	//
	// PUT /v1/vrslcm
	UpdateVrslcmVersionInInventory(ctx context.Context, req *Vrslcm) (UpdateVrslcmVersionInInventoryRes, error)
	// UpdateVsanHclConfiguration implements updateVsanHclConfiguration operation.
	//
	// Update vSAN HCL configuration.
	//
	// PATCH /v1/vsan-hcl/configuration
	UpdateVsanHclConfiguration(ctx context.Context, req *VsanHclConfiguration) (UpdateVsanHclConfigurationRes, error)
	// UpdateVsanHealthCheckByDomain implements updateVsanHealthCheckByDomain operation.
	//
	// Update vSAN health check status for domain.
	//
	// PATCH /v1/domains/{domainId}/health-checks
	UpdateVsanHealthCheckByDomain(ctx context.Context, req []HealthCheckSpec, params UpdateVsanHealthCheckByDomainParams) (UpdateVsanHealthCheckByDomainRes, error)
	// UploadBundle implements uploadBundle operation.
	//
	// Upload Bundle to SDDC Manager. Used when you do not have internet connectivity for downloading
	// bundles from VMWare/VxRail to SDDC Manager. The Bundles are manually downloaded from Depot using
	// Bundle Transfer utility.
	//
	// POST /v1/bundles
	UploadBundle(ctx context.Context, req *BundleUploadSpec) (UploadBundleRes, error)
	// UploadCertificates implements uploadCertificates operation.
	//
	// Upload certificates to the certificate store.
	//
	// Deprecated: schema marks this operation as deprecated.
	//
	// PUT /v1/domains/{id}/certificates/uploads
	UploadCertificates(ctx context.Context, req OptUploadCertificatesReq, params UploadCertificatesParams) (UploadCertificatesRes, error)
	// UploadCustomIso implements uploadCustomIso operation.
	//
	// Upload Custom ISO to SDDC Manager.
	//
	// POST /v1/custom-isos/file
	UploadCustomIso(ctx context.Context, req OptUploadCustomIsoReq, params UploadCustomIsoParams) (UploadCustomIsoRes, error)
	// UploadPersonality implements uploadPersonality operation.
	//
	// Upload Personality to SDDC Manager.
	//
	// POST /v1/personalities
	UploadPersonality(ctx context.Context, req *PersonalityUploadSpec) (UploadPersonalityRes, error)
	// UploadPersonalityFiles implements uploadPersonalityFiles operation.
	//
	// Upload personality files to SDDC Manager.
	//
	// PUT /v1/personalities/files
	UploadPersonalityFiles(ctx context.Context, req OptUploadPersonalityFilesReq) (UploadPersonalityFilesRes, error)
	// UploadProductVersionCatalog implements uploadProductVersionCatalog operation.
	//
	// Upload product version catalog. Make sure product version is a valid one.
	//
	// POST /v1/product-version-catalog
	UploadProductVersionCatalog(ctx context.Context, req *ProductVersionCatalog) (UploadProductVersionCatalogRes, error)
	// ValidateALBClusterCreationSpec implements validateALBClusterCreationSpec operation.
	//
	// Perform validiation of the NsxAlbControllerClusterSpec specification.
	//
	// POST /v1/nsx-alb-clusters/validations
	ValidateALBClusterCreationSpec(ctx context.Context, req *NsxAlbControllerClusterSpec, params ValidateALBClusterCreationSpecParams) (ValidateALBClusterCreationSpecRes, error)
	// ValidateAvnSpec implements validateAvnSpec operation.
	//
	// Returns Validation report.
	//
	// POST /v1/avns/validations
	ValidateAvnSpec(ctx context.Context, req *AvnsCreationSpec) (ValidateAvnSpecRes, error)
	// ValidateBackupConfigurationsOperations implements validateBackupConfigurationsOperations operation.
	//
	// Validation API for backup configuration for SDDC Manager and NSX Manager.
	//
	// POST /v1/system/backup-configuration/validations
	ValidateBackupConfigurationsOperations(ctx context.Context, req *BackupConfigurationSpec) (ValidateBackupConfigurationsOperationsRes, error)
	// ValidateBringupSpec implements validateBringupSpec operation.
	//
	// SDDC specification incorporates all the client inputs regarding VMW component parameters
	// constituting the SDDC: NTP, DNS spec, ESXi, VC, VSAN, NSX spec et al.
	//
	// POST /v1/sddcs/validations
	ValidateBringupSpec(ctx context.Context, req *SddcSpec, params ValidateBringupSpecParams) (ValidateBringupSpecRes, error)
	// ValidateClusterCreationSpec implements validateClusterCreationSpec operation.
	//
	// Perform validation of the ClusterCreationSpec specification.
	//
	// POST /v1/clusters/validations
	ValidateClusterCreationSpec(ctx context.Context, req *ClusterCreationSpec, params ValidateClusterCreationSpecParams) (ValidateClusterCreationSpecRes, error)
	// ValidateClusterUpdateSpec implements validateClusterUpdateSpec operation.
	//
	// Perform validation of the ClusterUpdateSpec specification.
	//
	// POST /v1/clusters/{id}/validations
	ValidateClusterUpdateSpec(ctx context.Context, req *ClusterUpdateSpec, params ValidateClusterUpdateSpecParams) (ValidateClusterUpdateSpecRes, error)
	// ValidateCommissionHosts implements validateCommissionHosts operation.
	//
	// Validate the input specification to commission the Hosts.
	//
	// Deprecated: schema marks this operation as deprecated.
	//
	// POST /v1/hosts/validations/commissions
	ValidateCommissionHosts(ctx context.Context, req []HostCommissionSpec) (ValidateCommissionHostsRes, error)
	// ValidateDnsConfiguration implements validateDnsConfiguration operation.
	//
	// Perform validation of the DnsConfiguration specification.
	//
	// POST /v1/system/dns-configuration/validations
	ValidateDnsConfiguration(ctx context.Context, req *DnsConfiguration) (ValidateDnsConfigurationRes, error)
	// ValidateDomainCreationSpec implements validateDomainCreationSpec operation.
	//
	// Perform validation of the DomainCreationSpec specification.
	//
	// POST /v1/domains/validations
	ValidateDomainCreationSpec(ctx context.Context, req *DomainCreationSpec, params ValidateDomainCreationSpecParams) (ValidateDomainCreationSpecRes, error)
	// ValidateDomainUpdateSpec implements validateDomainUpdateSpec operation.
	//
	// Perform validation of the DomainUpdateSpec specification.
	//
	// POST /v1/domains/{id}/validations
	ValidateDomainUpdateSpec(ctx context.Context, req *DomainUpdateSpec, params ValidateDomainUpdateSpecParams) (ValidateDomainUpdateSpecRes, error)
	// ValidateEdgeClusterCreationSpec implements validateEdgeClusterCreationSpec operation.
	//
	// Perform validiation of the EdgeClusterCreationSpec specification.
	//
	// POST /v1/edge-clusters/validations
	ValidateEdgeClusterCreationSpec(ctx context.Context, req *EdgeClusterCreationSpec) (ValidateEdgeClusterCreationSpecRes, error)
	// ValidateEdgeClusterUpdateSpec implements validateEdgeClusterUpdateSpec operation.
	//
	// Perform validation of the EdgeClusterUpdateSpec specification.
	//
	// POST /v1/edge-clusters/{id}/validations
	ValidateEdgeClusterUpdateSpec(ctx context.Context, req *EdgeClusterUpdateSpec, params ValidateEdgeClusterUpdateSpecParams) (ValidateEdgeClusterUpdateSpecRes, error)
	// ValidateHostCommissionSpec implements validateHostCommissionSpec operation.
	//
	// Perform validation of the  HostCommissionSpec specification.
	//
	// POST /v1/hosts/validations
	ValidateHostCommissionSpec(ctx context.Context, req []HostCommissionSpec) (ValidateHostCommissionSpecRes, error)
	// ValidateIpPool implements validateIpPool operation.
	//
	// POST /v1/nsxt-clusters/ip-address-pools/validations
	ValidateIpPool(ctx context.Context, req *NsxtIpAddressPoolValidationSpec) (*Validation, error)
	// ValidateNsxALBCompatibility implements validateNsxALBCompatibility operation.
	//
	// Validate NSX ALB compatibility version.
	//
	// POST /v1/nsx-alb-clusters/validations/version
	ValidateNsxALBCompatibility(ctx context.Context, req *NsxAlbVersionValidationSpec) (ValidateNsxALBCompatibilityRes, error)
	// ValidateNtpConfiguration implements validateNtpConfiguration operation.
	//
	// Perform validation of the NtpConfiguration specification.
	//
	// POST /v1/system/ntp-configuration/validations
	ValidateNtpConfiguration(ctx context.Context, req *NtpConfiguration) (ValidateNtpConfigurationRes, error)
	// ValidateReleaseByDomainID implements validateReleaseByDomainID operation.
	//
	// Validate the target selected upgrade release BOM or custom BOM for a domain by its ID.
	//
	// POST /v1/releases/domains/{domainId}/validations
	ValidateReleaseByDomainID(ctx context.Context, req *DomainRelease, params ValidateReleaseByDomainIDParams) (ValidateReleaseByDomainIDRes, error)
	// ValidateResourceCertificates implements validateResourceCertificates operation.
	//
	// Validate resource certificates.
	//
	// PUT /v1/domains/{id}/resource-certificates/validations
	ValidateResourceCertificates(ctx context.Context, req []ResourceCertificateSpec, params ValidateResourceCertificatesParams) (ValidateResourceCertificatesRes, error)
	// ValidateVasaProviderSpec implements validateVasaProviderSpec operation.
	//
	// Validate VasaProvider input specification.
	//
	// POST /v1/vasa-providers/validations
	ValidateVasaProviderSpec(ctx context.Context, req *VasaProvider) (ValidateVasaProviderSpecRes, error)
	// ValidateVrslcm implements validateVrslcm operation.
	//
	// Triggers VMware Aria Suite Lifecycle deployment specification validation workflow.
	//
	// POST /v1/vrslcms/validations
	ValidateVrslcm(ctx context.Context, req *VrslcmDeploymentSpec) (ValidateVrslcmRes, error)
	// ValidateVsanRemoteDatastoreMountSpec implements validateVsanRemoteDatastoreMountSpec operation.
	//
	// Perform validation of the DatastoreMountSpec specification.
	//
	// POST /v1/clusters/{clusterId}/datastores/validations
	ValidateVsanRemoteDatastoreMountSpec(ctx context.Context, req *DatastoreMountSpec, params ValidateVsanRemoteDatastoreMountSpecParams) (ValidateVsanRemoteDatastoreMountSpecRes, error)
	// ValidateVsanRemoteDatastoreSpec implements validateVsanRemoteDatastoreSpec operation.
	//
	// Perform validation of the DatastoreMountSpec specification.
	//
	// Deprecated: schema marks this operation as deprecated.
	//
	// POST /v1/clusters/{clusterId}/datastores/validation
	ValidateVsanRemoteDatastoreSpec(ctx context.Context, req *DatastoreMountSpec, params ValidateVsanRemoteDatastoreSpecParams) (ValidateVsanRemoteDatastoreSpecRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
